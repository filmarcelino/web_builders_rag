[
  {
    "id": "cc1a3e9397e6ecb5ca36ea73212c7ddb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc922df2919e3c38cead61.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc922df2919e3c38cead61\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nAt the top of your code, declare a variable named NUMBER_OF_DISKS to store the number of disks and give it the value of 3. Then, replace the first argument passed in to the range() function with your new variable.\n--hints--\nYou should declare a variable named NUMBER_OF_DISKS.\njs\n({test: () => assert(__userGlobals.has('NUMBER_OF_DISKS')) })\nThe NUMBER_OF_DISKS variable should have the value 3.\njs\n({test: () => assert.equal(__userGlobals.get('NUMBER_OF_DISKS'), 3) })\nYou should change the value of the range() function's first argument into the NUMBER_OF_DISKS variable.\njs\n({test: () => assert.match(code, /('|\")A\\1\\s*:\\s*list\\s*\\(\\s*range\\s*\\(\\s*NUMBER_OF_DISKS\\s*,\\s*0\\s*,\\s*-\\s*1\\s*\\)\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nrods = {\n'A': list(range(3, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move():\npass\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1040,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc922df2919e3c38cead61.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e7a1d627f0bd7a27bf40bb81c402f54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc92a9718fb53ca3d1bad7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc92a9718fb53ca3d1bad7\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nThe Tower of Hanoi puzzle can be solved in 2n - 1 moves, where n is the number of disks. Declare a variable named number_of_moves and assign the total number of moves to this variable.\nThe power operator in Python is **.\n--hints--\nYou should declare a variable named number_of_moves.\njs\n({ test: () => assert(__userGlobals.has('number_of_moves')) })\nThe value of number_of_moves should be the expression to calculate the number of moves.\njs\n({ test: () => {\nassert(runPython(`\nnumber_of_moves == 2**NUMBER_OF_DISKS -1\n`))\n} })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 3\n--fcc-editable-region--\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move():\npass\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc92a9718fb53ca3d1bad7.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01abf47de0edf49b8d43c2d33db6b6e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc963d866fff3dd0329993.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc963d866fff3dd0329993\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nPrint the variable you declared in the previous step and feel free to change the number of disks to see how fast the required minimum number of moves increases.\n--hints--\nYou should print the number_of_moves variable.\n```js\n({ test: () => assert.match(code, /print\\s(\\snumber_of_moves\\s*)/) })\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\n--fcc-editable-region--\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move():\npass\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc963d866fff3dd0329993.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e4f180c75c4162758c39864f76b4a392",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc976bf864693e668d67e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc976bf864693e668d67e8\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nNow call your function and see the output on the terminal.\n--hints--\nYou should call your move() function.\njs\n({test: () => assert.match(code, /^move\\(\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move():\nprint(rods)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc976bf864693e668d67e8.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7b564f93dc815d80afb9376b1604eb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97005bc7943e2978df0a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc97005bc7943e2978df0a\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nNow you can remove your print() call. Then, inside the move() function, remove the pass keyword and print the content of your rods dictionary.\n--hints--\nYou should not have print(number_of_moves) in your code.\njs\n({ test: () => assert.isFalse(/print\\s*\\(\\s*number_of_moves\\s*\\)/.test(code)) })\nYou should remove the pass keyword and print the rods dictionary.\njs\n({ test: () => assert.match(code, /def\\s+move\\s*\\(\\s*\\)\\s*:\\s+print\\s*\\(\\s*rods\\s*\\)(?!\\s*pass)/) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nprint(number_of_moves)\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move():\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 889,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97005bc7943e2978df0a.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "06a6e6ff89e33c5b204aefbcedab09f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcd9bbc2268127e7898d77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dcd9bbc2268127e7898d77\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nFinally, when the move number divided by 3 has no remainder, the movement is allowed between 'B' and 'C'.\nAdd an elif statement for that. Then, print the appropriate string if the condition is met.\n--hints--\nYou should have an elif statement to execute when remainder == 0.\njs\n({test: () => assert.match(code, /elif\\s+remainder\\s*==\\s*0\\s*:/)})\nYou should print the string f'Move {i + 1} allowed between {auxiliary} and {target}'.\njs\n({test: () => assert.match(code, /print\\s*\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*auxiliary\\s*\\}\\sand\\s\\{\\s*target\\s*\\s*\\}\\1\\s*\\)/)})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcd9bbc2268127e7898d77.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8c5aabb156d23ee1828a288cb96c917",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc985e6720a23edac63b51.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc985e6720a23edac63b51\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nThe allowed disk movements between the rods exhibit a repetitive pattern occurring every three moves. For example, movements between rod A and rod C are allowed on the first, the fourth and the seventh move, where the remainder of the division between the move number and 3 is equal to 1.\nInside the previously created for loop, replace the existing print() call with an if statement that is triggered when (i + 1) % 3 == 1. Within this if statement, print f'Move {i + 1} allowed between {source} and {target}' using an f-string. Please, note that i + 1 is the move number since i is zero during the first iteration.\n--hints--\nYou should have an if statement that should be executed when (i + 1) % 3 == 1.\njs\n({test: () => assert.match(code, /if\\s+\\(\\s*i\\s*\\+\\s*1\\s*\\)\\s*%\\s*3\\s*==\\s*1\\s*:/)})\nYou should print the string f'Move {i + 1} allowed between {source} and {target}' using an f-string.\njs\n({test: () => assert.match(code, /print\\s*\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*target\\s*\\s*\\}\\1\\s*\\)/)})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nprint(i)\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc985e6720a23edac63b51.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "92bb46fe0c78961b6c32277e922fd6f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcd3d61c448e2676501f43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dcd3d61c448e2676501f43\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nWhen the remainder of the move number divided by 3 is equal to 2, the movement is allowed between 'A' and 'B' (the source and the auxiliary rods).\nAdd an elif statement for that. Then, print the appropriate string if the condition is met.\n--hints--\nYou should have an elif statement to execute when remainder == 2.\njs\n({test: () => assert.match(code, /elif\\s+remainder\\s*==\\s*2:/)})\nYou should print the string f'Move {i + 1} allowed between {source} and {auxiliary}'.\njs\n({test: () => assert.match(code, /print\\s*\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*auxiliary\\s*\\s*\\}\\1\\s*\\)/)})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcd3d61c448e2676501f43.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a0ab4ff4709e33e4f985b9e68c2aae7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97ab25730b3e9de86ea5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc97ab25730b3e9de86ea5\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nAt the end of this project, you will create a recursive solution to the Tower of Hanoi puzzle, but now you are going to explore an iterative approach to this problem Start by adding a for loop to your function that iterates through the number_of_moves and prints the current iteration number --hints--\nYou should write a for loop to iterate through the number of moves Use the range() function for that js\n({ test: () => {\nconst rgs = [\n/for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:/,\n/for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:/,\n/for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:/\n]\nconst loop = rgs some(r => code match(r));\nassert isTrue(loop);\n}\n})\nYou should print the current move number at each iteration js\n({ test: () => {\nconst rgs = [\n/for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n/for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n/for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/\n]\nconst loop = rgs some(r => code match(r));\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97ab25730b3e9de86ea5.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6234b05bdc378f56da2c288bbd25038a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97ab25730b3e9de86ea5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "write a for loop to iterate through the number of moves Use the range() function for that js ({ test: () => { const rgs = [ /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:/, /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:/, /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:/ ] const loop = rgs some(r => code match(r)); assert isTrue(loop); } }) You should print the current move number at each iteration js ({ test: () => { const rgs = [ /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/, /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/, /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/ ] const loop = rgs some(r => code match(r)); assertisTrue(loop);\n}\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc97ab25730b3e9de86ea5.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b711c0fdd4dbf92aa70824286d3bc260",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcdee07a14f0299ec30559.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dcdee07a14f0299ec30559\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nYou wrote the code to find the allowed movement between the rods, but the actual move could be in both directions.\nAfter the print() call, declare a variable named forward and set it to False. You will use that variable to check in which direction you need to move the disk between the rods.\n--hints--\nYou should declare a variable named forward.\njs\n({ test: () => assert.match(code, /forward\\s*=\\s*./) })\nYour forward variable should be set to False.\njs\n({ test: () => assert.match(code, /forward\\s*=\\s*False/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1464,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dcdee07a14f0299ec30559.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c7da2a55c63d4dd5fdecd93fa56efc23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddcc2ee182e0164c3539f8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddcc2ee182e0164c3539f8\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nAfter printing the move, you need to remove the last element from the source rod and append it to target rod. Use the .pop() method and the .append() method for that.\n--hints--\nYou should remove the last element from rods[source].\njs\n({ test: () => assert.match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)/) })\nYou should have rods[target].append(rods[source].pop()) in your code.\njs\n({ test: () => assert.match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1764,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddcc2ee182e0164c3539f8.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb5e4f79d343ba2f92069716c252a7d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dceadec3c9cf2ca7b56de6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dceadec3c9cf2ca7b56de6\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nNext, below the nested elif statement, add another if statement that should be executed when forward is True Inside this conditional, print the following f-string: f'Moving disk {rods[source][-1]} from {source} to {target}' --hints--\nYou should add an if statement to execute when forward is True after the elif block js\n({ test: () => assert match(code, /^\\s{12}if\\s+forward(\\s*==\\s*True) \\s*:/m) })\nYou should print the provide string inside your new if statement js\n({ test: () => assert match(code, /if\\s+forward(\\s*==\\s*True)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dceadec3c9cf2ca7b56de6.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c11f0e842d546ec9aef7f19e60d5fbe1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dceadec3c9cf2ca7b56de6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the nested elif statement, add another if statement that should be executed when forward is True Inside this conditional, print the following f-string: f'Moving disk {rods[source][-1]} from {source} to {target}' --hints-- You should add an if statement to execute when forward is True after the elif block js ({ test: () => assert match(code, /^\\s{12}if\\s+forward(\\s*==\\s*True) \\s*:/m) }) You should print the provide string inside your new if statement js ({ test: () => assert match(code, /if\\s+forward(\\s*==\\s*True)\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*source\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dceadec3c9cf2ca7b56de6.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "26f6a2156432e0e5edd998f9bcf9dab8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce5f6ff907c2b2c47bb05.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dce5f6ff907c2b2c47bb05\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nWhen target is empty, the disk should be moved necessarily from source to target After the declaration of forward, add an if statement to check if rods[target] is empty If it is, change forward to True --hints--\nYou should have an if statement to check if rods[target] is empty, and assign True to forward ``js\n({\ntest: () => {\nconst tCode = code replace(/\\r/g, '');\nconst ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\");\nconst { block_body } = ifBlock\nconst if2 = __helpers python getBlock(block_body, /if [^:]+/);\nconst if2Indent = if2 block_body match(/ +/)[0];\nconst ifLoc = tCode indexOf(block_body slice(0,20));\nconst ifLen = block_body length;\nconst newIf = block_body +\\n${if2Indent}__spy(forward)const newCode =\n__counter = 0\ndef __spy(x):\nglobal __counter\nif x:\n__counter += 1\n${tCode slice(0,ifLoc)}\n${newIf}\n${tCode slice(ifLoc + ifLen)}\n__counter\n`;\nconst out = runPython(newCode);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce5f6ff907c2b2c47bb05.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3704084c0c98e6b78830b1d39a18f47a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce5f6ff907c2b2c47bb05.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "''); const ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\"); const { block_body } = ifBlock const if2 = __helpers python getBlock(block_body, /if [^:]+/); const if2Indent = if2 block_body match(/ +/)[0]; const ifLoc = tCode indexOf(block_body slice(0,20)); const ifLen = block_body length; const newIf = block_body +\\n${if2Indent}__spy(forward)const newCode = __counter = 0 def __spy(x): global __counter if x: __counter += 1 ${tCode slice(0,ifLoc)} ${newIf} ${tCode slice(ifLoc + ifLen)} __counter `; const out = runPython(newCode); assertequal(out, 3);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce5f6ff907c2b2c47bb05.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d617c45ed1582984694b363331a1be3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dce7ee2494e82bf4205a3f\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nThe other case in which you have to move the disk necessarily from source to target is when the source list is not empty and the last disk in source is lower than the last disk in target Add an elif statement to check this condition Then, set the forward variable to True if the condition is met --hints--\nYou should have an elif statement to check if rods[source] is not empty and rods[source][-1] < rods[target][-1] js\nconst allowedRes = [\n\"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\",\n\"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\",\n\"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\",\n];\nconst re = new RegExp(`elif\\\\s+((${allowedRes join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:`);\nassert match(code, re);\nYou should set forward to True inside your new elif statement You should not change the previous assignments of forward",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "aa46634a01852870304294705df95e38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Add an elif statement to check this condition Then, set the forward variable to True if the condition is met --hints-- You should have an elif statement to check if rods[source] is not empty and rods[source][-1] < rods[target][-1] js const allowedRes = [ \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\", ]; const re = new RegExp(`elif\\\\s+((${allowedRes join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:`); assert match(code, re); You should set forward to True inside your new elif statement You should not change the previous assignments of forwardjs\nconst allowedRes = [\n\"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\",\n\"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\",\n\"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\",\n];\nconst re = new RegExp(`elif\\\\s+((${allowedRes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4abba00a857ad0b200244fda47d00c86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to True if the condition is met --hints-- You should have an elif statement to check if rods[source] is not empty and rods[source][-1] < rods[target][-1] js const allowedRes = [ \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\", ]; const re = new RegExp(`elif\\\\s+((${allowedRes join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:`); assert match(code, re); You should set forward to True inside your new elif statement You should not change the previous assignments of forwardjs const allowedRes = [ \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\", ]; const re = new RegExp(`elif\\\\s+((${allowedResjoin(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:\\\\s+forward\\\\s*=\\\\s*True`);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
      "source_type": "git_repo"
    },
    "token_count": 592,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "370f5c5b6c8a05f84340d8e88e33fee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "True if the condition is met --hints-- You should have an elif statement to check if rods[source] is not empty and rods[source][-1] < rods[target][-1] js const allowedRes = [ \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\", ]; const re = new RegExp(`elif\\\\s+((${allowedRes join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:`); assert match(code, re); You should set forward to True inside your new elif statement You should not change the previous assignments of forwardjs const allowedRes = [ \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\", \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\", ]; const re = new RegExp(`elif\\\\s+((${allowedResjoin(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:\\\\s+forward\\\\s*=\\\\s*True`); assertmatch(code, re);\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\n--fcc-editable-region--\nif not rods[target]:\nforward = True\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dce7ee2494e82bf4205a3f.md",
      "source_type": "git_repo"
    },
    "token_count": 829,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0f9030d8400ea855c5e80573553b4afd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd280d69fa818ca782d50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddd280d69fa818ca782d50\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nAs you can see, disk 1 is going back and forth every three moves This happens because you still need to take care of movements between the other rods Instead of repeating the same code you wrote during the previous few steps and changing the rods, it would be better to move that code inside a function to call in each conditional statement Declare an empty function named make_allowed_move() and don't forget the pass keyword --hints--\nYou should declare an empty function named make_allowed_move Remember to use the pass keyword inside the function body with the correct indentation js\n({ test: () => assert(runPython(`\nimport inspect\ninspect isfunction(make_allowed_move)\n`))\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target] append(rods[source] pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {source}')\nrods[source] append(rods[target] pop())\n# display our progress\nprint(rods)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd280d69fa818ca782d50.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1cf1e80f7e774844ba1fd49f360a077e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd02838f36117cd9738eb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddd02838f36117cd9738eb\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nOutside the else block, add a comment saying display our progress and print the content of the lists to check that everything is working --hints--\nYou should use the provided text to add a comment outside the else block js\n({ test: () => assert match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)\\s+#\\s*display\\sour\\sprogress/) })\nYou should print the rods object outside the else block, after the comment js\n({ test: () => assert match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)\\s+#\\s*display\\sour\\sprogress\\s+print\\s*\\(\\s*rods\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\n--fcc-editable-region--\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target] append(rods[source] pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {source}')\nrods[source] append(rods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2122,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd02838f36117cd9738eb.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a56e48a722c0935f55243bd1927b934d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd02838f36117cd9738eb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} def move(n, source, auxiliary, target): # display starting configuration print(rods) for i in range(number_of_moves): remainder = (i + 1) % 3 if remainder == 1: print(f'Move {i + 1} allowed between {source} and {target}') forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True --fcc-editable-region-- if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target] append(rods[source] pop()) else: print(f'Moving disk {rods[target][-1]} from {target} to {source}') rods[source] append(rods[target]pop())\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2122,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd02838f36117cd9738eb.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "727e6863c67de5bf6d7c445aeeda6362",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd4fbb4b598199acf5ec5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddd4fbb4b598199acf5ec5\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nAdd two parameters called rod1 and rod2 to your new function.\n--hints--\nYour make_allowed_move() function should have two parameters named rod1 and rod2.\njs\n({ test: () => assert(runPython(`\nimport inspect\nstr(inspect.signature(make_allowed_move)) == '(rod1, rod2)'\n`))\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef make_allowed_move():\npass\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target].append(rods[source].pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {source}')\nrods[source].append(rods[target].pop())\n# display our progress\nprint(rods)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd4fbb4b598199acf5ec5.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "16adbdbb844955ca8b691c429715f8f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de1469fccce61940f498c4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de1469fccce61940f498c4\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nThe rods dictionary will represent the three rods with their disks. Give it the strings 'A', 'B', and 'C' as keys and set each of them to an empty list.\n--hints--\nYour rods dictionary should have an 'A' key.\njs\n({ test: () => assert(runPython(`'A' in rods`)) })\nrods['A'] should be an empty list.\njs\n({ test: () => assert(runPython(`\nrods['A'] == []\n`))\n})\nYour rods dictionary should have a 'B' key.\njs\n({ test: () => assert(runPython(`'B' in rods`)) })\nrods['B'] should be an empty list.\njs\n({ test: () => assert(runPython(`\nrods['B'] == []\n`))\n})\nYour rods dictionary should have a 'C' key.\njs\n({ test: () => assert(runPython(`'C' in rods`)) })\nrods['C'] should be an empty list.\njs\n({ test: () => assert(runPython(`\nrods['C'] == []\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nrods = {}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1055,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de1469fccce61940f498c4.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "241ece3dfd35410e81a92d64b37e3e33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de4bccf5becb208a48ca97.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de4bccf5becb208a48ca97\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nIn the Tower of Hanoi puzzle, you can identify the three rods according to their purpose:\nThe first rod is the source, where all the disks are stacked on top of each other at the beginning of the game.\nThe second rod is an auxiliary rod, and it helps in moving the disks to the target rod.\nThe third rod is the target, where all the disks should be placed in order at the end of the game.\nCurrently, the move() function does not take any parameters. Change the function declaration to take 4 parameters: n, source, auxiliary, and target. Then, pass NUMBER_OF_DISKS and the strings 'A', 'B', and 'C' as arguments to your function call. The order matters.\n--hints--\nYour move() function should have n, source, auxiliary, and target as the parameters. The order matters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nstr(inspect.signature(move)) == '(n, source, auxiliary, target)'\n`))\n})\nYou should pass NUMBER_OF_DISKS and the strings 'A', 'B', and 'C' to move(). The order matters.\njs\n({test: () => assert.match(code, /^move\\(\\s*NUMBER_OF_DISKS\\s*,\\s*('|\")A\\1\\s*,\\s*('|\")B\\2\\s*,\\s*('|\")C\\3\\s*\\)/m)\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move():\nprint(rods)\nmove()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1575,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de4bccf5becb208a48ca97.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b8011d5c4d93ffc7dbe37f48e4c822e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddce6f6e8066173208235b\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nWhen forward is False, the disk has to be moved in the opposite direction Write an else clause for that Print the move and change the content of the lists accordingly --hints--\nYou should have an else clause to move the disks in the opposite direction js\n({ test: () => assert match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)\\s+else\\s*:/) })\nYou should have print(f'Moving disk {rods[target][-1]} from {target} to {source}') inside your else clause js\n({ test: () => assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}\\1\\s*\\)/) })\nYou should remove the last element from rods[target] js\n({ test: () => assert match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)/) })\nYou should have rods[source] append(rods[target] pop()) in your code js\n({ test: () => assert match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fe45218d810ec2e3d49122d3b60eaf0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the disks in the opposite direction js ({ test: () => assert match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)\\s+else\\s*:/) }) You should have print(f'Moving disk {rods[target][-1]} from {target} to {source}') inside your else clause js ({ test: () => assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}\\1\\s*\\)/) }) You should remove the last element from rods[target] js ({ test: () => assert match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)/) }) You should have rods[source] append(rods[target] pop()) in your code js ({ test: () => assert match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\n--fcc-editable-region--\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target] append(rods[source]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cde9d612e00b59002959c48f435845b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def move(n, source, auxiliary, target): # display starting configuration print(rods) for i in range(number_of_moves): remainder = (i + 1) % 3 if remainder == 1: print(f'Move {i + 1} allowed between {source} and {target}') forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True --fcc-editable-region-- if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target] append(rods[source]pop())\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddce6f6e8066173208235b.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "574b6c4b769e37d04a625f1e344e31ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de73f6c2486518e3064fec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de73f6c2486518e3064fec\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nNow call make_allowed_move() and pass in source and target as the arguments.\n--hints--\nYou should call make_allowed_move() passing source and target as the arguments.\njs\n({ test: () => assert.match(code, /make_allowed_move\\s*\\(\\s*source\\s*,\\s*target\\s*\\)(?=\\s+elif\\s+remainder\\s*==\\s*2\\s*:)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2].append(rods[rod1].pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1].append(rods[rod2].pop())\n# display our progress\nprint(rods)\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de73f6c2486518e3064fec.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "805326a87c8a6aa983049dca0085359c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64ddd65848a12919d7e1c7d0\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nIt's time to move some code from the move() function to the make_allowed_move() function Move the code nested inside the first if statement (except the first print() call) to your new function Pay close attention to the indentation Don't forget to remove the pass keyword --hints--\nYou should move the code nested inside the first if statement (except the first print() call) to your new function js\n({ test: () => {\nassert match(code, /def\\s+make_allowed_move\\(\\s*rod1\\s*,\\s*rod2\\s*\\):\\s+forward\\s*=\\s*False\\s+if\\s+not\\s+rods\\s*\\[\\s*target\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+elif\\s+rods\\s*\\[\\s*source\\s*\\]\\s+and\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+if\\s+forward\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*source\\s*\\}\\sto\\s\\{\\s*target\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\ pop\\(\\s*\\)\\s*\\)\\s+else\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "91264c5a8436f15baff533ee5d612139",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "time to move some code from the move() function to the make_allowed_move() function Move the code nested inside the first if statement (except the first print() call) to your new function Pay close attention to the indentation Don't forget to remove the pass keyword --hints-- You should move the code nested inside the first if statement (except the first print() call) to your new function js ({ test: () => { assert match(code, /def\\s+make_allowed_move\\(\\s*rod1\\s*,\\s*rod2\\s*\\):\\s+forward\\s*=\\s*False\\s+if\\s+not\\s+rods\\s*\\[\\s*target\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+elif\\s+rods\\s*\\[\\s*source\\s*\\]\\s+and\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+if\\s+forward\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*source\\s*\\}\\sto\\s\\{\\s*target\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\ pop\\(\\s*\\)\\s*\\)\\s+else\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\append\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "bdc0b3203e431c320c2a0997d319fcb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "time to move some code from the move() function to the make_allowed_move() function Move the code nested inside the first if statement (except the first print() call) to your new function Pay close attention to the indentation Don't forget to remove the pass keyword --hints-- You should move the code nested inside the first if statement (except the first print() call) to your new function js ({ test: () => { assert match(code, /def\\s+make_allowed_move\\(\\s*rod1\\s*,\\s*rod2\\s*\\):\\s+forward\\s*=\\s*False\\s+if\\s+not\\s+rods\\s*\\[\\s*target\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+elif\\s+rods\\s*\\[\\s*source\\s*\\]\\s+and\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:\\s+forward\\s*=\\s*True\\s+if\\s+forward\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*source\\s*\\}\\sto\\s\\{\\s*target\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\ pop\\(\\s*\\)\\s*\\)\\s+else\\s*:\\s+print\\(\\s*f'Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}'\\s*\\)\\s+rods\\s*\\[\\s*source\\s*\\]\\s*\\append\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\(\\s*\\)\\s*\\)\\s+#\\s*display\\sour\\sprogress\\s+print\\(\\s*rods\\s*\\)/);\n}\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef make_allowed_move(rod1, rod2):\npass\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ece71b91709894716a4be24d431d2499",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): pass def move(n, source, auxiliary, target): # display starting configuration print(rods) for i in range(number_of_moves): remainder = (i + 1) % 3 if remainder == 1: print(f'Move {i + 1} allowed between {source} and {target}') forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target]append(rods[source] pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {source}')\nrods[source] append(rods[target] pop())\n# display our progress\nprint(rods)\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64ddd65848a12919d7e1c7d0.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7191f11a28ae49394ed1cd74532201d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de773f81facd14653f49c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de773f81facd14653f49c8\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nIt looks like it's working But the output is not very readable Print a new line character after printing the rods to fix that --hints--\nYou should pass a string with a new line character ('\\n') as the second argument for your two print(rods) calls js\n({ test: () => assert match(code, /print\\(\\s*rods\\s*,\\s*('|\")\\\\n\\1\\s*\\)( = *print\\(\\s*rods\\s*,\\s*('|\")\\\\n\\2\\s*\\))/s) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de773f81facd14653f49c8.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0ead547e187df25351f1d7fa0114917d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de773f81facd14653f49c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "({ test: () => assert match(code, /print\\(\\s*rods\\s*,\\s*('|\")\\\\n\\1\\s*\\)( = *print\\(\\s*rods\\s*,\\s*('|\")\\\\n\\2\\s*\\))/s) }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def make_allowed_move(rod1, rod2): forward = False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2]pop())\n--fcc-editable-region--\n# display our progress\nprint(rods)\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\n--fcc-editable-region--\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de773f81facd14653f49c8.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7a9d517255399ca860c6098ba7b8580a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7662244db513d7b673ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de7662244db513d7b673ec\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nCall the make_allowed_move() function again inside the two elif clauses, and pass in the correct arguments --hints--\nYou should call make_allowed_move(source, auxiliary) inside the first elif clause js\n({ test: () => {\nassert match(code, /make_allowed_move\\s*\\(\\s*source\\s*,\\s*auxiliary\\s*\\)( =\\s+elif\\s+remainder\\s*==\\s*0\\s*:)/);\n}})\nYou should call make_allowed_move(auxiliary, target) inside the second elif clause js\nassert match(code, /make_allowed_move\\s*\\(\\s*auxiliary\\s*,\\s*target\\s*\\)( =\\s+#\\s*initiate\\scall)/);\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2050,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7662244db513d7b673ec.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e537b4e1b074d321a8fa784b2cf689c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7662244db513d7b673ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "inside the second elif clause js assert match(code, /make_allowed_move\\s*\\(\\s*auxiliary\\s*,\\s*target\\s*\\)( =\\s+#\\s*initiate\\scall)/); --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def make_allowed_move(rod1, rod2): forward = False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2]pop())\n# display our progress\nprint(rods)\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2050,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7662244db513d7b673ec.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "026a7f427e607b8fcd0def2927a294a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de7357cc75bd18bdced920\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nNow change each occurrence of target into rod2 --hints--\nYou should change each occurrence of target inside make_allowed_move into rod2 js\n({ test: () => {\nassert match(code, /if\\s+not\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*:/);\nassert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/);\nassert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/);\nassert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/);\nassert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "0a4327c93cf1c9e848fed7e1bc084506",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de7357cc75bd18bdced920\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nNow change each occurrence of target into rod2 --hints--\nYou should change each occurrence of target inside make_allowed_move into rod2 js\n({ test: () => {\nassert match(code, /if\\s+not\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*:/);\nassert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/);\nassert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/);\nassert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/);\nassert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/);\n}\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[target]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {target}')\nrods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "e873cf22ba907b29a7e22ceb42b244e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert match(code, /if\\s+not\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*:/); assert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/); assert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {target}') rods[target]append(rods[rod1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d6e5011e770f095e965334dee987b4e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert match(code, /if\\s+not\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*:/); assert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/); assert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {target}') rods[target]append(rods[rod1]pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {rod1}')\nrods[rod1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 565,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "dae621e34ff2f24dac4eadcd037ff84b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {target}') rods[target]append(rods[rod1]pop()) else: print(f'Moving disk {rods[target][-1]} from {target} to {rod1}') rods[rod1]append(rods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "9b73381060bc204885c75c97d9445118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*rod2\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*rod2\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod2\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod2\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {target}') rods[target]append(rods[rod1]pop()) else: print(f'Moving disk {rods[target][-1]} from {target} to {rod1}') rods[rod1]append(rods[target]pop())\n# display our progress\nprint(rods)\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7357cc75bd18bdced920.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "513bd4c5a34729c9794472404d74d435",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de6c8a5305d8173a3a9e09\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nmake_allowed_move() takes in rod1 and rod2 as parameters You need a little refactoring here Change every occurrence of source into rod1 --hints--\nYou should change each occurrence of source inside the make_allowed_move() function into rod1 js\n({ test: () => {\nassert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/);\nassert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/);\nassert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/);\nassert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "08cecd9a6f059fa848f8ea265cc900b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de6c8a5305d8173a3a9e09\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nmake_allowed_move() takes in rod1 and rod2 as parameters You need a little refactoring here Change every occurrence of source into rod1 --hints--\nYou should change each occurrence of source inside the make_allowed_move() function into rod1 js\n({ test: () => {\nassert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/);\nassert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/);\nassert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/);\nassert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/);\n}\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[target]:\nforward = True\nelif rods[source] and rods[source][-1] < rods[target][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[source][-1]} from {source} to {target}')\nrods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 592,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "f8f535f696424dd9fd446f2ef4c78ee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => { assert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/); assert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target]append(rods[source]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d5ff24fd4f6ffe76ee3fc2a3b4e93449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => { assert match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/); assert match(code, /if\\s+forward(\\s*==\\s*True) \\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target]append(rods[source]pop())\nelse:\nprint(f'Moving disk {rods[target][-1]} from {target} to {source}')\nrods[source]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "45e1b8f1fe79aad9e45e8aaf6357574f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target]append(rods[source]pop()) else: print(f'Moving disk {rods[target][-1]} from {target} to {source}') rods[source]append(rods[target]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "86deb3ad665533aea3d3b565baf794ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ pop\\s*\\(\\s*\\)\\s*\\)/); assert match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/); assert match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\ append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\pop\\s*\\(\\s*\\)\\s*\\)/); } }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 3 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } --fcc-editable-region-- def make_allowed_move(rod1, rod2): forward = False if not rods[target]: forward = True elif rods[source] and rods[source][-1] < rods[target][-1]: forward = True if forward: print(f'Moving disk {rods[source][-1]} from {source} to {target}') rods[target]append(rods[source]pop()) else: print(f'Moving disk {rods[target][-1]} from {target} to {source}') rods[source]append(rods[target]pop())\n# display our progress\nprint(rods)\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de6c8a5305d8173a3a9e09.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "32e5f59bb9e8687f9b89d7fef02cafc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de79de2fac6b1536ebcfdd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de79de2fac6b1536ebcfdd\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nThe iterative solution of Tower of Hanoi might seem complete, but change the number of disks to 4 and look at the output.\n--hints--\nYou should set NUMBER_OF_DISKS to 4.\njs\n({ test: () => assert.equal(__userGlobals.get('NUMBER_OF_DISKS'), 4) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 3\n--fcc-editable-region--\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2].append(rods[rod1].pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1].append(rods[rod2].pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de79de2fac6b1536ebcfdd.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7673093bc0dfffe2461de78240915179",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df332162988b13c35b7f7d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df332162988b13c35b7f7d\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nNow you need to do the same with your elif statement: put the print() and make_allowed_move() calls inside an if statement to execute when n is odd Also, turn the # make_allowed_move(source, auxiliary) comment into code --hints--\nYou should nest your print() and make_allowed_move() calls inside an if statement to execute when n is odd ```js\n({ test: () => assert match(code, /if\\s+n\\s%\\s2\\s( =\\s0|==\\s1)\\s:\\s+print(\\sf('|\")Move\\s{\\si\\s+\\s1\\s}\\sallowed\\sbetween\\s{\\ssource\\s}\\sand\\s{\\sauxiliary\\s}\\2\\s)\\s+make_allowed_move(\\ssource\\s,\\sauxiliary\\s)/) })\n```\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2] pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nif n % 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df332162988b13c35b7f7d.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8910d9756856ec48645bc6ad558f44f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df332162988b13c35b7f7d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2] pop()) # display our progress print(rods, '\\n') def move(n, source, auxiliary, target): # display starting configuration print(rods, '\\n') for i in range(number_of_moves): remainder = (i + 1) % 3 if remainder == 1: if n % 2= 0:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\n--fcc-editable-region--\nelse:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\n# make_allowed_move(source, auxiliary)\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\n--fcc-editable-region--\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df332162988b13c35b7f7d.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0eb81e196bd92ce3cbd76290e96f9149",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7be06eb689161dd63cf0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64de7be06eb689161dd63cf0\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nThe conditionals you wrote previously are only valid for odd numbers of disks Add a nested if to execute when n is odd, and add one indent level to your print() and make_allowed_move() calls --hints--\nYou should nest an if statement to execute when n is odd Don't forget to indent your print() and make_allowed_move() calls js\n({ test: () => assert match(code, /if\\s+n\\s*%\\s*2\\s*( =\\s*0|==\\s*1)\\s*:\\s+print *\\s+make_allowed_move\\( *\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7be06eb689161dd63cf0.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7d6b0de885bccdc4d8aaba99242c6e54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7be06eb689161dd63cf0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test: () => assert match(code, /if\\s+n\\s*%\\s*2\\s*( =\\s*0|==\\s*1)\\s*:\\s+print *\\s+make_allowed_move\\( *\\)/) }) --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 4 number_of_moves = 2**NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def make_allowed_move(rod1, rod2): forward = False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2]pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64de7be06eb689161dd63cf0.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f29567506bc634c683f4152ec7b13945",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df346f4c86461419974c1e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df346f4c86461419974c1e\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nFinally, add an else clause that prints the allowed move and call make_allowed_move Try to figure out the correct arguments --hints--\nYou should add an else clause js\nconst tCode = code replace(/\\r/g, '');\nconst elifBlock = __helpers python getBlock(tCode, \"elif remainder == 2\");\nassert match(elifBlock block_body, /else:/);\nYou should have print(f'Move {i + 1} allowed between {source} and {target}') within the else block js\nconst tCode = code replace(/\\r/g, '');\nconst elifBlock = __helpers python getBlock(tCode, \"elif remainder == 2\");\nassert match(elifBlock block_body, /print\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s{\\s*source\\s*\\}\\sand\\s\\{\\s*target\\s*\\}\\1\\s*\\)/);\nYou should have make_allowed_move(source, target) within the else block js\nconst tCode = code replace(/\\r/g, '');\nconst elifBlock = __helpers python getBlock(tCode, \"elif remainder == 2\");\nassert match(elifBlock block_body, /make_allowed_move\\(\\s*source\\s*,\\s*target\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2 ** NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df346f4c86461419974c1e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "eaa1c799502fbf2adb20ad54c0d2de48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df346f4c86461419974c1e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"elif remainder == 2\"); assert match(elifBlock block_body, /make_allowed_move\\(\\s*source\\s*,\\s*target\\s*\\)/); --seed-- --seed-contents-- ```py NUMBER_OF_DISKS = 4 number_of_moves = 2 ** NUMBER_OF_DISKS - 1 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def make_allowed_move(rod1, rod2): forward = False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2]pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nif n % 2 = 0:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelse:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\n--fcc-editable-region--\nelif remainder == 2:\nif n % 2 = 0:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\n--fcc-editable-region--\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df346f4c86461419974c1e.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "388baa864da9e30ba66e07396fe28cdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3e2fac34d813d048f3f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df3e2fac34d813d048f3f9\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nYou won't need make_allowed_move and number_of_moves, either. Delete the whole function and the variable.\n--hints--\nYou should delete the number_of_moves variable and its content.\njs\n({ test: () => assert.match(code, /NUMBER_OF_DISKS\\s*=\\s*4\\s+(?=rods\\s*=\\s*\\{)/) })\nYou should delete the whole make_allowed_move function.\njs\n({ test: () => assert.match(code, /\\}\\s+(?=def\\s+move\\(\\s*n\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\)\\s*:)/) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2 ** NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2].append(rods[rod1].pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1].append(rods[rod2].pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3e2fac34d813d048f3f9.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5e3ffcbc3f7e6ddf869e31add7ac822",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df202aa1342114cd077920\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nIf the number of disks is even and the remainder equals 1, the move is allowed between the source rod and the auxiliary rod Add an else clause to print the allowed movement and call make_allowed_move() with the correct arguments If you look at the output, you can see that the execution stops at the third move because of an IndexError This happens because the code is still incomplete and needs an else clause that you will be writing soon To make it work, turn your make_allowed_move() call into a comment --hints--\nYou should add an else clause js\nconst tCode = code replace(/\\r/g, '');\nconst ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\");\nassert match(ifBlock block_body, /else:/);\nYou should have print(f'Move {i + 1} allowed between {source} and {auxiliary}') within the else clause js\nconst tCode = code replace(/\\r/g, '');\nconst ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\");\nconst elseBlock = __helpers python getBlock(ifBlock block_body, \"else\");\nassert match(elseBlock block_body, /print\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*auxiliary\\s*\\}\\1\\s*\\)/);\nYou should have # make_allowed_move(source, auxiliary) within the else clause js\nconst tCode = code replace(/\\r/g, '');\nconst ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\");\nconst elseBlock = __helpers python getBlock(ifBlock block_body, \"else\");\nassert match(elseBlock",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "482467dffd14b2aa3808f7ef0d382379",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1} allowed between {source} and {auxiliary}') within the else clause js const tCode = code replace(/\\r/g, ''); const ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\"); const elseBlock = __helpers python getBlock(ifBlock block_body, \"else\"); assert match(elseBlock block_body, /print\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*auxiliary\\s*\\}\\1\\s*\\)/); You should have # make_allowed_move(source, auxiliary) within the else clause js const tCode = code replace(/\\r/g, ''); const ifBlock = __helpers python getBlock(tCode, \"if remainder == 1\"); const elseBlock = __helpers python getBlock(ifBlock block_body, \"else\"); assert match(elseBlockblock_body, /# *make_allowed_move\\(\\s*source\\s*,\\s*auxiliary\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2] pop())\n# display our progress\nprint(rods, '\\n')\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\n--fcc-editable-region--\nif remainder == 1:\nif n % 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ccba9aa4693a9d502bfaf9716a34acae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2] pop()) # display our progress print(rods, '\\n') def move(n, source, auxiliary, target): # display starting configuration print(rods, '\\n') for i in range(number_of_moves): remainder = (i + 1) % 3 --fcc-editable-region-- if remainder == 1: if n % 2= 0:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\n--fcc-editable-region--\nelif remainder == 2:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df202aa1342114cd077920.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8e10530c983718459419839a94bf4777",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df353d7ae6dc148fd64f53.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df353d7ae6dc148fd64f53\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nThat's all for the iterative solution From now on you are going to build a function that makes use of a recursive approach Recursion is when a function calls itself In this case, you are going to use recursion to calculate smaller versions of the same problem Delete the whole body of the move function except for the comment and the first print call Leave the function declaration as is --hints--\nYou should delete the whole body of the move function except for the comment and the first print call ```js\n({ test: () => assert match(code, /print(\\srods\\s,\\s('|\")\\n\\1\\s)\\s+( =#\\sinitiate)/) })\n```\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nnumber_of_moves = 2 ** NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef make_allowed_move(rod1, rod2):\nforward = False\nif not rods[rod2]:\nforward = True\nelif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]:\nforward = True\nif forward:\nprint(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}')\nrods[rod2] append(rods[rod1] pop())\nelse:\nprint(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}')\nrods[rod1] append(rods[rod2] pop())\n# display our progress\nprint(rods, '\\n')\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif remainder == 1:\nif n % 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df353d7ae6dc148fd64f53.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b82ebe99c5f8838d88bf443db0e8a6ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df353d7ae6dc148fd64f53.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "False if not rods[rod2]: forward = True elif rods[rod1] and rods[rod1][-1] < rods[rod2][-1]: forward = True if forward: print(f'Moving disk {rods[rod1][-1]} from {rod1} to {rod2}') rods[rod2] append(rods[rod1] pop()) else: print(f'Moving disk {rods[rod2][-1]} from {rod2} to {rod1}') rods[rod1] append(rods[rod2] pop()) # display our progress print(rods, '\\n') --fcc-editable-region-- def move(n, source, auxiliary, target): # display starting configuration print(rods, '\\n') for i in range(number_of_moves): remainder = (i + 1) % 3 if remainder == 1: if n % 2= 0:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelse:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelif remainder == 2:\nif n % 2 = 0:\nprint(f'Move {i + 1} allowed between {source} and {auxiliary}')\nmake_allowed_move(source, auxiliary)\nelse:\nprint(f'Move {i + 1} allowed between {source} and {target}')\nmake_allowed_move(source, target)\nelif remainder == 0:\nprint(f'Move {i + 1} allowed between {auxiliary} and {target}')\nmake_allowed_move(auxiliary, target)\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df353d7ae6dc148fd64f53.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0d68bee6781f4b8594df918f75b3fabe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df47b32b92301a815d5ef8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df47b32b92301a815d5ef8\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nAt first, the recursive call you have just added deals with the sub-problem of moving n - 1 disks to the second rod.\nFor that reason, the target argument corresponds to your second rod, while the auxiliary argument is the third rod. Keep in mind that those will keep swapping as the recursion proceeds.\nFix the arguments order exchanging target and auxiliary in your recursive call.\n--hints--\nYou should modify the order of the arguments in your move(n - 1, source, auxiliary, target) call.\njs\n({ test:  () => assert.match(code, /move\\(\\s*n\\s*-\\s*1\\s*,\\s*source\\s*,\\s*target\\s*,\\s*auxiliary\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, auxiliary, target)\n# move the nth disk from source to target\nrods[target].append(rods[source].pop())\n# display our progress\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df47b32b92301a815d5ef8.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c4ab3dfb16468167d6d59b0419354e60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df496c6a8ddf1b38db1ed6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df496c6a8ddf1b38db1ed6\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nIn a previous step, you wrote the code to move the largest disk of the sub-problem to the target rod.\nNow, all you need to do is add another recursive call to move the n - 1 disks you have already displaced. Copy the first recursive call and paste it at the end of the if block.\nNote that the function arguments are not in the right order. Try to figure out the correct order.\n--hints--\nYou should call move(n - 1,  auxiliary, source, target) at the end of your move function.\njs\n({ test: () => assert.match(code, /^\\s{8}move\\(\\s*n\\s*-\\s*1\\s*,\\s*auxiliary\\s*,\\s*source\\s*,\\s*target\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\nrods[target].append(rods[source].pop())\n# display our progress\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1386,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df496c6a8ddf1b38db1ed6.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7eef0b117b36cfd2e7d52e8e15d00eed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df72c6e0183a191fcd72dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df72c6e0183a191fcd72dc\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nBefore your function call, write a comment saying initiate call from source A to target C with auxiliary B.\n--hints--\nYou should write the given comment before your function call.\njs\n({test: () => assert.match(code, /#\\s*initiate\\scall\\sfrom\\ssource\\sA\\sto\\starget\\sC\\swith\\sauxiliary\\sB/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\nprint(rods)\n--fcc-editable-region--\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df72c6e0183a191fcd72dc.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "147a3cde72aa9ca15a178d7f2a8ecd77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3f1011888113fbd3d81b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df3f1011888113fbd3d81b\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nTo solve the puzzle with recursion, the first thing to do is break the original problem down into smaller sub-problems The final configuration with n disks piled up to the third rod in decreasing order can be obtained by moving:\nn - 1 disks from the source to the auxiliary rod\nthe largest disk from the source to the target\nand then the n - 1 disks from the auxiliary rod to the target So, the first thing the move function should do is calling itself with n - 1 as the first argument But if you try to do so without defining a base case, you will get a RecursionError This happens because the function keeps calling itself indefinitely Before your comment and your print() call, add the recursive function call with n - 1 as the first argument and make sure the function body executes only when n is greater than zero For now, leave the other arguments in the same order --hints--\nThe move function body should start with an if statement that is triggered when n is greater than zero js\n({ test: () => assert match(code, /def\\s+move\\(\\s*n\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\)\\s*:\\s+if\\s+n\\s*>\\s*0\\s*:/) })\nYou should call move(n - 1, source, auxiliary, target) inside the if statement Remember to indent your print() call ```js\nconst transformedCode = \"\\n\" + code replace(/\\r/g, '');\nconst move = __helpers python getDef(transformedCode, \"move\");\nconst { function_parameters, function_body } = move;\nassert match(function_parameters, /n\\s,\\ssource\\s,\\sauxiliary\\s,\\starget/);\nconst functionBodyIndent = function_body match(/ +/)[0];\nconst re = new RegExp(${functionBodyIndent}if\\\\s+n\\\\s*>\\\\s*0\\\\s*:\\\\s+^${functionBodyIndent}( +)move\\\\(\\\\s*n\\\\s*-\\\\s*1\\\\s*,\\\\s*source\\\\s*,\\\\s*auxiliary\\\\s*,\\\\s*target\\\\s*\\\\) +",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3f1011888113fbd3d81b.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "03c3a8364bc2651d12d01a578eadeb24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3f1011888113fbd3d81b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that is triggered when n is greater than zero js ({ test: () => assert match(code, /def\\s+move\\(\\s*n\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\)\\s*:\\s+if\\s+n\\s*>\\s*0\\s*:/) }) You should call move(n - 1, source, auxiliary, target) inside the if statement Remember to indent your print() call ```js const transformedCode = \"\\n\" + code replace(/\\r/g, ''); const move = __helpers python getDef(transformedCode, \"move\"); const { function_parameters, function_body } = move; assert match(function_parameters, /n\\s,\\ssource\\s,\\sauxiliary\\s,\\starget/); const functionBodyIndent = function_body match(/ +/)[0]; const re = new RegExp(${functionBodyIndent}if\\\\s+n\\\\s*>\\\\s*0\\\\s*:\\\\s+^${functionBodyIndent}( +)move\\\\(\\\\s*n\\\\s*-\\\\s*1\\\\s*,\\\\s*source\\\\s*,\\\\s*auxiliary\\\\s*,\\\\s*target\\\\s*\\\\) +^${functionBodyIndent}\\\\1print\\\\s*\\\\(\\\\s*rods\\\\s*,\\\\s*(\"|')\\\\\\\\n\\\\2\\\\s*\\\\), \"ms\");\nassert match(function_body, re);\n```\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df3f1011888113fbd3d81b.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a91812d509bceccf536d9987a7c88320",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df45a3ad4f8719e5355244.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64df45a3ad4f8719e5355244\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nThe steps of moving n - 1 disks can be broken down further until only a single disk is considered This will be the first move occurring After the first move occurs, the following moves are generated by the unwinding of the recursive calls Keep in mind that in each recursive step the role played by the rods changes between source, target, and auxiliary For now, each recursive call prints the rods dictionary without performing any changes to the lists Before the print() call, remove the last element from the rods[source] list and append it to the rods[target] list --hints--\nYou should remove the last element from the rods[source] list and append it to the rods[target] list before the print call ``js\n({ test: () => assert isTrue(runPython(\n_log = []\ndef capture_print(*args):\n_log append(repr(args))\nold_print = print\nprint = capture_print\nold_rods = rods\nrods2 = {\n'A': list(range(5, 0, -1)),\n'B': [],\n'C': []\n}\nrods = rods2\nmove(5, 'A', 'B', 'C')\nrods = old_rods\nprint = old_print\n_expected_prints = [\nr\"({'A': [5, 4, 3, 2], 'B': [], 'C': [1]}, '\\n')\",\nr\"({'A': [5, 4, 3], 'B': [], 'C': [1, 2]}, '\\n')\",\nr\"({'A': [5, 4], 'B': [], 'C': [1, 2, 3]}, '\\n')\",\nr\"({'A': [5], 'B': [], 'C': [1, 2, 3, 4]}, '\\n')\",\nr\"({'A': [], 'B': [], 'C': [1, 2, 3, 4, 5]}, '\\n')\",\n]\nfor args in _log:\nif not _expected_prints:\nbreak\nif args == _expected_prints[0]:\n_expected_prints",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df45a3ad4f8719e5355244.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "367d81fd75dfdca568d18ca9c54a550b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df45a3ad4f8719e5355244.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'B', 'C') rods = old_rods print = old_print _expected_prints = [ r\"({'A': [5, 4, 3, 2], 'B': [], 'C': [1]}, '\\n')\", r\"({'A': [5, 4, 3], 'B': [], 'C': [1, 2]}, '\\n')\", r\"({'A': [5, 4], 'B': [], 'C': [1, 2, 3]}, '\\n')\", r\"({'A': [5], 'B': [], 'C': [1, 2, 3, 4]}, '\\n')\", r\"({'A': [], 'B': [], 'C': [1, 2, 3, 4, 5]}, '\\n')\", ] for args in _log: if not _expected_prints: break if args == _expected_prints[0]: _expected_printspop(0)\nnot rods2['A'] and rods2['C'] == list(range(1, 6)) and not _expected_prints\n`))})\n```\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, auxiliary, target)\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64df45a3ad4f8719e5355244.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "21f92d380f8b5ea86a1bd2ef9215765a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e337e3096b7c1739d934e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e337e3096b7c1739d934e6\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nBefore your recursive call, add a comment saying move n - 1 disks from source to auxiliary, so they are out of the way.\n--hints--\nYou should add a comment with the provided text before your recursive call.\njs\n({ test: () => assert.match(code, /if\\s+n\\s*>\\s*0\\s*:\\s+#\\s*move\\sn\\s-\\s1\\sdisks\\sfrom\\ssource\\sto\\sauxiliary\\s*,\\s*so\\sthey\\sare\\sout\\sof\\sthe\\sway\\s+(?=move\\(\\s*n\\s*-\\s*1\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\))/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\nmove(n - 1, source, auxiliary, target)\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e337e3096b7c1739d934e6.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8206310d2af826e933fc3c8e1c151e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e3392996b41d17a1375643.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e3392996b41d17a1375643\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nBefore appending the last element to the target, add a comment saying move the nth disk from source to target.\n--hints--\nYou should add a comment with the provided text before rods[target].append(rods[source].pop()).\njs\n({ test: () => assert.match(code, /move\\(\\s*n\\s*-\\s*1\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\)\\s+#\\s*move\\sthe\\snth\\sdisk\\sfrom\\ssource\\sto\\starget\\s+(?=rods\\s*\\[\\s*target\\s*\\]\\s*\\.append\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\.pop\\(\\s*\\)\\s*\\))/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, auxiliary, target)\nrods[target].append(rods[source].pop())\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e3392996b41d17a1375643.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2ebd099bdddf6edc3a11dcd65c808e92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e33a488b4a2717fa22ebf3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e33a488b4a2717fa22ebf3\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nAdd another comment before your print() call saying display starting configuration.\n--hints--\nYou should use the provided text to add a comment before your print() call.\njs\n({ test: () => assert.match(code, /#\\s*display\\sstarting\\sconfiguration\\s+print\\s*\\(\\s*rods\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nprint(rods)\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e33a488b4a2717fa22ebf3.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "91a659d41edd99a6177f9cbd770c7aee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e340ecee18af1430939018.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e340ecee18af1430939018\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nAbove the second move call, add one last comment saying move the n - 1 disks that we left on auxiliary onto target.\n--hints--\nYou should add a comment using the provided text.\njs\n({ test: () => assert.match(code, /#\\s*move\\sthe\\sn\\s-\\s1\\sdisks\\sthat\\swe\\sleft\\son\\sauxiliary\\sonto\\starget\\s+(?=move\\(\\s*n\\s*-\\s*1\\s*,\\s*auxiliary\\s*,\\s*source\\s*,\\s*target\\s*\\))/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\nrods[target].append(rods[source].pop())\n# display our progress\nprint(rods, '\\n')\nmove(n - 1,  auxiliary, source, target)\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1210,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e340ecee18af1430939018.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9450679b603ab8f2ffd2bef372737e12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e34146860065146733883b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e34146860065146733883b\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nAlthough recursion can sometimes be less easy to understand, it gives you the power to create more concise code. In this case, you don't even need to differentiate between even and odd numbers of disks.\nSet NUMBER_OF_DISKS to 5 and check the output.\n--hints--\nYou should set the NUMBER_OF_DISKS variable to 5.\njs\n({test: () => assert.equal(__userGlobals.get('NUMBER_OF_DISKS'), 5) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 4\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\ntarget.append(source.pop())\n# display our progress\nprint(A, B, C, '\\n')\n# move the n - 1 disks that we left on auxiliary onto target\nmove(n - 1,  auxiliary, source, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1258,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e34146860065146733883b.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fef8d7c84d9a6bdd1fe505046c37c9a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e340302bd28513f3e73740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64e340302bd28513f3e73740\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nNow, change the comment above the print() call into display our progress.\n--hints--\nYou should change # display starting configuration into # display our progress.\njs\n({ test: () => assert.match(code, /\\)\\s+#\\s*display\\sour\\sprogress\\s+(?=print\\()/) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, auxiliary, target)\n# move the nth disk from source to target\nrods[target].append(rods[source].pop())\n# display starting configuration\nprint(rods, '\\n')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64e340302bd28513f3e73740.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01bde3137f80c540da007169f33ff6b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\65782342850feb3b8d62f936.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65782342850feb3b8d62f936\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nSince you are going to use the expression (i + 1) % 3 multiple times, it is convenient to store it in a variable.\nJust above your if statement, declare a remainder variable and assign the value (i + 1) % 3 to this variable.\n--hints--\nYou should declare a remainder variable just above the if block.\njs\n({ test: () => assert.match(code, /^\\s{8}remainder\\s*=/m) })\nThe value of your remainder variable should be the expression (i + 1) % 3.\njs\n({ test: () => assert.match(code, /^\\s{8}remainder\\s*=\\s*\\(\\s*i\\s*\\+\\s*1\\s*\\)\\s*%\\s*3/m) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nif (i + 1) % 3 == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\65782342850feb3b8d62f936.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "acabc4be0bbfe38a0ec896fc54e12f1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\6578273de26b6e5965a9107d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6578273de26b6e5965a9107d\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nNow, replace the expression in the if condition with the remainder variable.\n--hints--\nYou should replace (i+ 1) % 3 with the remainder variable.\njs\n({ test: () => assert.match(code, /^\\s{8}if\\s+remainder\\s*==\\s*1\\s*:/m) })\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\n# display starting configuration\nprint(rods)\nfor i in range(number_of_moves):\nremainder = (i + 1) % 3\nif (i + 1) % 3 == 1:\nprint(f'Move {i + 1} allowed between {source} and {target}')\n--fcc-editable-region--\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\6578273de26b6e5965a9107d.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ee56ecb7690d2fccb51d27d233d4c887",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b667a772ed53e82962c81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b667a772ed53e82962c81\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nThere's still one thing you can do to improve the readability of your code.\nModify your if to execute when n is less than or equal to zero and add a return statement to stop the function execution.\n--hints--\nYou should modify your existing if to check if n is less than or equal to 0.\njs\n({ test: () =>\n{\nconst hanoi = __helpers.python.getDef(code, \"move\");\nconst {function_body} = hanoi;\nassert(function_body.match(/^\\s{4}if\\s+n\\s*<=\\s*0\\s*:/m));\n}\n})\nYou should add a return statement to the first line of your if block.\njs\n({ test: () =>\n{\nconst hanoi = __helpers.python.getDef(code, \"move\");\nconst {function_body} = hanoi;\nassert(function_body.match(/^(\\s{4})if\\s+n\\s*<=\\s*0\\s*:\\s*\\1\\1return/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nNUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n--fcc-editable-region--\ndef move(n, source, auxiliary, target):\nif n > 0:\n--fcc-editable-region--\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\ntarget.append(source.pop())\n# display our progress\nprint(A, B, C, '\\n')\n# move the n - 1 disks that we left on auxiliary onto target\nmove(n - 1,  auxiliary, source, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b667a772ed53e82962c81.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "77f57c584211ee3dd8317b3a1674bc0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564683821b2ee3174e7250e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564683821b2ee3174e7250e\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nYou can access the utilities defined inside the imported module through the dot notation. The dot notation works by appending a dot followed by the utility name to the module name. For example, here's how to access the ascii_lowercase constant:\n```py\nimport string\nprint(string.ascii_lowercase)\nOutput: abcdefghijklmnopqrstuvwxyz\n```\nIn this project, you are going to use different constants from the string module.\nDeclare a new variable called letters and assign string.ascii_letters to this variable.\n--hints--\nYou should declare a variable named letters.\njs\n({ test: () => assert(__userGlobals.has(\"letters\")) })\nYou should assign string.ascii_letters to your letters variable.\njs\n({ test: () => assert(runPython(`\nimport string\nletters == string.ascii_letters\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport string\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1042,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564683821b2ee3174e7250e.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd3f08ed6fbaa470b9f62e36d6b8c814",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\650c6082e5586f9e3acfcd3b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 650c6082e5586f9e3acfcd3b\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nNow, delete the rods dictionary and turn its keys into the variables A, B, and C, respectively, keeping their values Refactor your code to reflect these changes If you see the output on the terminal, you correctly did this step --hints--\nYou should turn rods['A'] into a variable named A keeping its value js\nassert match(code, /A\\s*=\\s*list\\s*\\(\\s*range\\s*\\(\\s*NUMBER_OF_DISKS\\s*,\\s*0\\s*,\\s*-\\s*1\\s*\\)\\s*\\)/);\nYou should turn rods['B'] into a variable named B keeping its value js\nassert match(code, /B\\s*=\\s*\\[\\s*\\]/);\nYou should turn rods['C'] into a variable named C keeping its value js\nassert match(code, /C\\s*=\\s*\\[\\s*\\]/);\nYou should modify your print() call to print A, B, C, instead of the rods object Keep the newline character in the print() call js\nassert match(code, /print\\s*\\(\\s*A\\s*,\\s*B\\s*,\\s*C\\s*,\\s*('|\")\\\\n\\1\\s*\\)/);\nYou should have target append(source pop()) in your code js\nassert match(code, /target\\ append\\s*\\(\\s*source\\ pop\\s*\\(\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 4\nrods = {\n'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n'B': [],\n'C': []\n}\ndef move(n, source, auxiliary, target):\nif n > 0:\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\nrods[target] append(rods[source]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\650c6082e5586f9e3acfcd3b.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "375c9a6932c37279e48d097a8c94ab38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\650c6082e5586f9e3acfcd3b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should have target append(source pop()) in your code js assert match(code, /target\\ append\\s*\\(\\s*source\\ pop\\s*\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```py --fcc-editable-region-- NUMBER_OF_DISKS = 4 rods = { 'A': list(range(NUMBER_OF_DISKS, 0, -1)), 'B': [], 'C': [] } def move(n, source, auxiliary, target): if n > 0: # move n - 1 disks from source to auxiliary, so they are out of the way move(n - 1, source, target, auxiliary) # move the nth disk from source to target rods[target] append(rods[source]pop())\n# display our progress\nprint(rods, '\\n')\n# move the n - 1 disks that we left on auxiliary onto target\nmove(n - 1,  auxiliary, source, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\650c6082e5586f9e3acfcd3b.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7e9b53d9e54a13666d13d8205e71df9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564642ce403fe29cc23fee7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564642ce403fe29cc23fee7\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nA Python module is a file containing code designed to perform specific tasks. The Python standard library contains many modules that you can import and use in your code. You can achieve this by using the import statement followed by the name of the module.\nStart this project by importing the string module.\n--hints--\nYou should import the string module.\njs\n({ test: () => assert.match(code, /^import\\s+string/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 637,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564642ce403fe29cc23fee7.md",
      "source_type": "git_repo"
    },
    "token_count": 148,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d549dae96e0a027950dfdd505f7946c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656469e62377ab34a5bcb8d1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656469e62377ab34a5bcb8d1\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nDeclare two new variables named digits and symbols and assign them string.digits and string.punctuation, respectively.\n--hints--\nYou should declare a variable named digits.\njs\n({ test: () => assert(__userGlobals.has(\"digits\")) })\nYou should assign string.digits to your digits variable.\njs\n({ test: () => assert(runPython(`\nimport string\ndigits == string.digits\n`))\n})\nYou should declare a variable named symbols.\njs\n({ test: () => assert(__userGlobals.has(\"symbols\")) })\nYou should assign string.punctuation to your symbols variable.\njs\n({ test: () => assert(runPython(`\nimport string\nsymbols == string.punctuation\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport string\nletters = string.ascii_letters\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656469e62377ab34a5bcb8d1.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a9610224beb14ae8f90c4a791c4ef212",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b6a4a49faec5c600287ba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b6a4a49faec5c600287ba\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nAs a final step, reduce the indentation level of all the code after the return statement Well done You have completed the Tower of Hanoi practice project --hints--\nYou should reduce the indentation level of all the code after the return statement js\n({ test: () => assert(runPython(`\na, b, c = [3, 2, 1], [], []\nmove(3, a, b, c)\na == [] and b == [] and c == [3, 2, 1]\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nNUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\ndef move(n, source, auxiliary, target):\nif n <= 0:\nreturn\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\ntarget append(source pop())\n# display our progress\nprint(A, B, C, '\\n')\n# move the n - 1 disks that we left on auxiliary onto target\nmove(n - 1,  auxiliary, source, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n--fcc-editable-region--\n```\n--solutions--\n```py\nNUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\ndef move(n, source, auxiliary, target):\nif n <= 0:\nreturn\n# move n - 1 disks from source to auxiliary, so they are out of the way\nmove(n - 1, source, target, auxiliary)\n# move the nth disk from source to target\ntarget append(source",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b6a4a49faec5c600287ba.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8126f8bc9124c44ea55667e509bcad15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b6a4a49faec5c600287ba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "call from source A to target C with auxiliary B move(NUMBER_OF_DISKS, A, B, C) --fcc-editable-region-- ``` --solutions-- ```py NUMBER_OF_DISKS = 5 A = list(range(NUMBER_OF_DISKS, 0, -1)) B = [] C = [] def move(n, source, auxiliary, target): if n <= 0: return # move n - 1 disks from source to auxiliary, so they are out of the way move(n - 1, source, target, auxiliary) # move the nth disk from source to target target append(sourcepop())\n# display our progress\nprint(A, B, C, '\\n')\n# move the n - 1 disks that we left on auxiliary onto target\nmove(n - 1,  auxiliary, source, target)\ninitiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\657b6a4a49faec5c600287ba.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8e83374b48638e3924e9b46e72e15ed8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65646ab6bced52360f44670f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65646ab6bced52360f44670f\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nNow declare a variable named all_characters and assign it the result of concatenating your existing variables.\n--hints--\nYou should declare a variable named all_characters.\njs\n({ test: () => assert(__userGlobals.has(\"all_characters\")) })\nYou should concatenate letters, digits, and symbols and assign the result to your all_characters variable.\njs\n({ test: () => assert(runPython(`\nimport string\nfrom itertools import permutations\nperms = permutations([string.ascii_letters, string.digits, string.punctuation])\nany(\"\".join(perm) == all_characters for perm in perms)\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65646ab6bced52360f44670f.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6e8af019ad6110a453d011b681adc4e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65646ffeaed2d238c562a014.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65646ffeaed2d238c562a014\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nIt is a common convention to place import statements at the top of your code. And additionally, in case of multiple import statements, sort them in alphabetical order to improve readability.\nAt the top of your code, import the random module.\n--hints--\nYou should import the random module.\njs\n({ test: () => assert.match(code, /^import\\s+random/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport string\n--fcc-editable-region--\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\nprint(all_characters)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 814,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65646ffeaed2d238c562a014.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bd2feb6871c64c1b971479740c5c96c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656474314bf37d3c83a85143.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656474314bf37d3c83a85143\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nThe choice() function from the random module takes a sequence and returns a random item of the sequence.\nModify your print() call to use the choice() function and pass all_characters as the argument.\n--hints--\nYou should modify your existing print() call to print random.choice(all_characters).\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*random\\.choice\\s*\\(\\s*all_characters\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport random\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\nprint(all_characters)\n--fcc-editable-region--\nprint(random.random())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656474314bf37d3c83a85143.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5f817b5c4dca3b5fa2b18ff70ebbde24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656477845006313fbfea0ad1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656477845006313fbfea0ad1\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nAlthough the effect might seem equal to random.choice(), secrets ensures you the most secure source of randomness that your operating system can provide.\nNow, delete your two print() calls.\n--hints--\nYou should delete your two print() calls.\njs\n({ test: () => assert.isFalse( /^print/m.test(code)) })\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\nprint(all_characters)\nprint(secrets.choice(all_characters))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 819,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656477845006313fbfea0ad1.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d84930c8c871793a0552838829915a34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656470d517833a39bb8b5608.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656470d517833a39bb8b5608\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nThe random module contains a pseudo-random number generator. Most of its functionalities depend on the random() function, which returns a floating point number in the range between 0.0 (inclusive) and 1.0 (exclusive).\nCall the random() function from the random module and print the result.\n--hints--\nYou should print the result of calling random.random().\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*random\\.random\\s*\\(\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport random\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\nprint(all_characters)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656470d517833a39bb8b5608.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "620982c5476027d8d52c95ef56ad3684",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656475bbf1c2573de1d2c69c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656475bbf1c2573de1d2c69c\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nEvery time the code runs, you should see a random character from the all_characters string. This is exactly what you want to achieve to create a random password.\nHowever, the algorithm on which random relies makes the generated pseudo-random numbers predictable. Therefore, although the random module is suitable for the most common applications, it cannot be used for cryptographic purposes, due to its deterministic nature.\nInstead of importing random, import the secrets module. Then change the print() call to use secrets.choice(all_characters).\n--hints--\nYou should import the secrets module instead of the random module.\njs\n({\ntest: () => {\nassert.match(code, /^import\\s+secrets/m)\nassert.isFalse( /^import\\s+random/m.test(code))\n}\n})\nYou should modify your existing print() call to print secrets.choice(all_characters).\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport random\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\nprint(all_characters)\nprint(random.choice(all_characters))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656475bbf1c2573de1d2c69c.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5374c08e34b922cee5c3a38cd9be231",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65647c71a5d2bd431596f629.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65647c71a5d2bd431596f629\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nYour generate_password function needs a few parameters. Start by adding a length parameter.\n--hints--\nYour generate_password function should take a length parameter.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(generate_password))\nsig == \"(length)\"\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport secrets\nimport string\ndef generate_password():\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65647c71a5d2bd431596f629.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3fb9fa7e115c27e0eb5d83ac90aa2346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564883669b5af4b69f794cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564883669b5af4b69f794cc\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nYour all_characters variable is a string formed by all lowercase and uppercase letters, all the 10 digits and several special characters.\nJust before it, add a comment saying Combine all characters.\n--hints--\nYou should add the comment just above your all_characters variable.\njs\n({ test: () => assert.match(code, /^#\\s*Combine all characters\\s+^all_characters/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nall_characters = letters + digits + symbols\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564883669b5af4b69f794cc.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f22993d7c59f8cfa216de1cab8e490ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656485a8a3496d4a36b1496a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656485a8a3496d4a36b1496a\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nThese three variables constitute the possible characters to choose from when generating the password.\nJust before them, add a comment saying Define the possible characters for the password.\n--hints--\nYou should add the comment just above the letters variable.\njs\n({ test: () => assert.match(code, /^#\\s*Define the possible characters for the password.*^letters/ms) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport string\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 686,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656485a8a3496d4a36b1496a.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "66319510c289196feb89702b82a533bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656479aa5f298441c190bf8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656479aa5f298441c190bf8f\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nDeclare a generate_password function and write all your code except the import lines inside the function body.\n--hints--\nYou should declare a function named generate_password.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).has_function('generate_password')\n`))\n})\nThe import statements should still be outside the function.\njs\n({\ntest: () => assert(runPython(`\nimports_list = _Node(_code).find_imports()\nany([imp.is_equivalent('import secrets') for imp in imports_list]) and any([imp.is_equivalent('import string') for imp in imports_list])\n`))\n})\nThe four variable declarations should be moved inside the function.\njs\n({\ntest: () => assert(runPython(`\nfunc = _Node(_code).find_function('generate_password')\nvars = ['letters', 'digits', 'symbols', 'all_characters']\nfunc.find_variable('letters').is_equivalent('letters = string.ascii_letters') and \\\\\nfunc.find_variable('digits').is_equivalent('digits = string.digits') and \\\\\nfunc.find_variable('symbols').is_equivalent('symbols = string.punctuation') and \\\\\nfunc.find_variable('all_characters').is_equivalent('all_characters = letters + digits + symbols') and \\\\\nall(not _Node(_code).has_variable(var) for var in vars)\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\n--fcc-editable-region--\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\nCombine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656479aa5f298441c190bf8f.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "43a0037a5a12778d8d5921e02ee43786",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656489e0a5d0954c1a64fc93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656489e0a5d0954c1a64fc93\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nNow print the all_characters variable to see what it looks like.\n--hints--\nYou should print your all_characters variable.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*all_characters\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport string\nDefine the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n--fcc-editable-region--\nCombine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656489e0a5d0954c1a64fc93.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c1c8741edc2ea6c748c01b4224f5c294",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656490295d346850a4c4f2b5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656490295d346850a4c4f2b5\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nAfter the loop, add a return statement to your function so it returns the password variable.\n--hints--\nYou should return password at the end of your function.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/^(\\s*)for\\s+\\w\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:.+^\\1return\\s+password/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656490295d346850a4c4f2b5.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0ca00eafce6993e625f0ef9f187916d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648f4b2281ba50051ae39c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65648f4b2281ba50051ae39c\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nNext, write a for loop with i as the loop variable. Use the range() function to iterate up to the value of the length.\nInside the loop, use the addition assignment operator to add a random character from all_characters to the current value of password. Use the choice() function from the secrets module for that.\n--hints--\nYou should write a for loop that iterates over range(length).\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/for\\s+i\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:/));\n}\n})\nYou should use the += operator to add a random character from all_characters to the current value of password.\njs\n({ test: () =>\n{\nconst generate_pwd = __helpers.python.getDef(code, \"generate_password\");\nconst {function_body} = generate_pwd;\nassert(function_body.match(/^(\\s*)for\\s+i\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:\\s*^\\1\\1password\\s*\\+=\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\npassword = ''\n# Generate password\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648f4b2281ba50051ae39c.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "02ecc71cc9469fb2f34cea246746db3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648e4c5b316c4ec5e4fddc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65648e4c5b316c4ec5e4fddc\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nAt the bottom of your function, declare a password variable and assign an empty string to this variable.\n--hints--\nYou should have a password variable inside your function with the value of an empty string. Pay attention to the indentation.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/password\\s*=\\s*(\"|')\\1/));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648e4c5b316c4ec5e4fddc.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "23ad782a2f1facfb99e2ff90c81ec26e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648eefbee2014f5815f4ba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65648eefbee2014f5815f4ba\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nBelow your new variable, add a comment saying Generate password.\n--hints--\nYou should add the provided comment.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/#\\s*Generate password/));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\npassword = ''\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 923,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65648eefbee2014f5815f4ba.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4fe68b53a1c28a6bdb4d5f7e2ee4f6b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65649122c7f77f519aaf0975.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65649122c7f77f519aaf0975\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nFinally, declare a variable new_password and assign it the result of calling generate_password. Pass 8 as the argument to your generate_password call.\n--hints--\nYou should call generate_password passing 8 as the argument.\njs\n({ test: () => assert.match(code, /generate_password\\s*\\(\\s*8\\s*\\)/) })\nYou should assign generate_password(8) to the variable new_password.\njs\n({\ntest: () => {\nassert(__userGlobals.has(\"new_password\"));\nassert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*8\\s*\\)/m);\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nreturn password\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65649122c7f77f519aaf0975.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c33ae4781bc6c9e969f49adeb2397566",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656494269ccce754411a2112.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656494269ccce754411a2112\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nThe re module allows you to use regular expressions in your code. You will learn more about regular expressions very soon.\nFor now, add an import statement at the top of your code to import the re module.\n--hints--\nYou should import the re module.\njs\n({ test: () => assert.match(code, /^import\\s+re/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport secrets\nimport string\n--fcc-editable-region--\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656494269ccce754411a2112.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa3d3c9cb26005fedafbf5800e7e45b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656491fa4e69005287eb5a9a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656491fa4e69005287eb5a9a\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nCheck the result by printing your new variable.\n--hints--\nYou should print new_password.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*new_password\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(8)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656491fa4e69005287eb5a9a.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "067c4c79d77da3b66be55221e5fc3b26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65649a631440b757f9f7b428.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65649a631440b757f9f7b428\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nA regular expression, or regex, is a pattern used to match a specific combination of characters inside a string. It is a valid alternative to if/else conditional statements when you need to match or find patterns inside a string for validation purposes, character replacement, and others.\nThe compile() function from the re module compiles the string passed as the argument into a regular expression object that can be used by other re methods.\nDeclare a new pattern variable and assign the value of re.compile('i') to this variable.\n--hints--\nYou should declare a pattern variable.\njs\n({ test: () => assert(__userGlobals.has(\"pattern\")) })\nYou should assign re.compile('i') to your pattern variable.\njs\n({ test: () => assert(runPython(`\nimport re\npattern == re.compile('i')\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\65649a631440b757f9f7b428.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53afd3e71e703e6a681658c2b2146738",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564a767a7241362f7d8d664.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564a767a7241362f7d8d664\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nA standalone single underscore is used to represent a value you don't care or that won't be used in your code.\nYour iteration variable is not actually used.\nModify your i variable into a single underscore.\n--hints--\nYou should modify your i variable into _.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/for\\s+_\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:/));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\npassword = ''\n# Generate password\nfor i in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1195,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564a767a7241362f7d8d664.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "322d6030831d7c7c644dd5d8bec7d4e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564c67db26c417561ab510d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564c67db26c417561ab510d\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nAs you can see from the output, now your regex matches the first l inside the string.\nIn your pattern, you can add a quantifier after a character to specify how many times that character should be repeated. For example, the + quantifier means it should repeat one or more times.\nAdd a + quantifier to your pattern.\n--hints--\nYou should modify your pattern variable into re.compile('l+').\njs\n({ test: () => assert(runPython(`\nimport re\npattern == re.compile('l+')\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = re.compile('l')\nquote = 'Not all those who wander are lost.'\nprint(pattern.search(quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564c67db26c417561ab510d.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3fea5d623cfcd69a598b055460e3b362",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564cf2e8642517abdf9d6e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564cf2e8642517abdf9d6e2\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nNow, modify the pattern in your constraint tuple to indicate the range of all digits using square brackets.\n--hints--\nYou should have the (nums, '[0-9]') tuple in your constraints list.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[0-9\\]\\1\\s*\\)\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '[0123456789]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = '[a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564cf2e8642517abdf9d6e2.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1f254d1d4911a7af522f353ca72ca15f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564cbb6311a40783b3f5de6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564cbb6311a40783b3f5de6\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nCharacter classes also allow you to indicate a range of characters to match. You need to specify the starting and the ending characters separated by an hyphen, -. Characters follow the Unicode order.\nModify your pattern variable to match any letter t preceded by a lowercase letter in the quote variable. Use the range of characters from a to z for that.\n--hints--\nYou should modify your pattern variable to match any letter t in quote preceded by a lowercase letter using the [a-z] class.\njs\n({ test: () => assert.equal(__userGlobals.get(\"pattern\"), \"[a-z]t\") })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '[0123456789]')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = 'w[ha]'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564cbb6311a40783b3f5de6.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c833e067c470522f6ac067e32fa4964d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564b8c9349bd76dc037967b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564b8c9349bd76dc037967b\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nThe search() function from the re module analyzes the string passed as the argument looking for the first place where the regex pattern matches the string.\nDeclare a variable called quote and assign the string 'Not all those who wander are lost.' to this variable. Then, print the result of pattern.search(quote).\n--hints--\nYou should have a quote variable.\njs\n({ test: () => assert(__userGlobals.has(\"quote\")) })\nYou should assign the provided string to your new quote variable.\njs\n({ test: () => assert.equal(__userGlobals.get(\"quote\"), \"Not all those who wander are lost.\") })\nYou should print pattern.search(quote).\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*pattern\\.search\\s*\\(\\s*quote\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = re.compile('i')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564b8c9349bd76dc037967b.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c39789d08ac70664e920ab2fdda401ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d096a55d707bd77ab67b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d096a55d707bd77ab67b\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nThe caret, ^, placed at the beginning of the character class, matches all the characters except those specified in the class.\nAdd a ^ as the first character inside your character class and see what happens.\n--hints--\nYou should add a ^ as the first character inside your character class.\njs\n({ test: () => assert.equal(__userGlobals.get(\"pattern\"), \"[^a-z]t\") })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '[0-9]')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = '[a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1344,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d096a55d707bd77ab67b.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a2848df326e0f61d7366ca3d19470ec0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d27c8e4c197d367c3b1c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d27c8e4c197d367c3b1c\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nAdd a new tuple to the constraints list. Use lowercase as the first item and a regex pattern that matches a single lowercase letter as the second item.\n--hints--\nYou should add a second tuple to the constraints list. Use the lowercase parameter as the first item and [a-z] as the second item.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[0-9\\]\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*(\"|')\\[a-z\\]\\2\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '[0-9]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = '[^a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d27c8e4c197d367c3b1c.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "59625ad977dc5dc31d5436ea75e8ab0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d2eeb36ebe7dd9bd1ee9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d2eeb36ebe7dd9bd1ee9\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nAdd a third tuple to the constraints list. Use the uppercase parameter as the first item and a regex pattern that matches a single uppercase letter as the second item.\n--hints--\nYou should add a third tuple to the constraints list using uppercase as the first item and a character class that matches a single uppercase letter as the second item.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[0-9\\]\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = '[^a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d2eeb36ebe7dd9bd1ee9.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d4bf252c44248951e8e196d91c33d91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d500f1a48e7f2b732a37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d500f1a48e7f2b732a37\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nAdd one last tuple to your list. Use the special_chars parameter as the first item and an empty string as the second item.\n--hints--\nYou should add a fourth tuple to the constraints list using special_chars as the first item and an empty string as the second item.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[0-9\\]\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,\\s*\\(\\s*special_chars\\s*,\\s*(\"|')\\4\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]'),\n(uppercase, '[A-Z]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = '[^a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d500f1a48e7f2b732a37.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "08e61a52b24abd89511935e9656a3a30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d68c34027a8072a704f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d68c34027a8072a704f4\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nThe dot character is a wildcard that matches any character in a string — except for a newline character by default. Modify pattern to match the entire string by replacing the current pattern with a . followed by the + quantifier.\n--hints--\nYou should modify your pattern variable to match the whole quote string.\njs\n({ test: () => assert.equal(__userGlobals.get(\"pattern\"), \".+\") })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]'),\n(uppercase, '[A-Z]'),\n(special_chars, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = '[^a-z]t'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1471,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d68c34027a8072a704f4.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5756ac2b062fda10956c5fa2ce73d1bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564daa2725b9b8420141b1c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564daa2725b9b8420141b1c\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nNow, turn the four patterns from the constraints list into raw strings.\n--hints--\nYou should turn the four strings inside the constraints list into raw strings.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*r(\"|')\\[0-9\\]\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*r(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*r(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,\\s*\\(\\s*special_chars\\s*,\\s*r(\"|')\\4\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]'),\n(uppercase, '[A-Z]'),\n(special_chars, '')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = r'.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1493,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564daa2725b9b8420141b1c.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3c29f451d4ea4eace158090b37e6a4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d75a923d21815caaa445.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d75a923d21815caaa445\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nIf you need to match a character that has a special meaning in the pattern, such as . or +, you can escape it by prepending a backslash character, \\. For example, this matches a literal plus sign: \\+.\nModify pattern so that it matches a single literal dot.\n--hints--\nYou should modify your pattern variable into \\..\njs\n({ test: () => assert.match(code, /^pattern\\s*=\\s*(\"|')\\\\\\.\\1/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]'),\n(uppercase, '[A-Z]'),\n(special_chars, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = '.+'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d75a923d21815caaa445.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c714679f434f4f254a3378739922bc9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d97a5ef99783216a6229.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564d97a5ef99783216a6229\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nPython provides a particular type of string called raw string. Raw strings are prefixed with a r. The key distinction from regular strings lies in how they handle the backslash character: in raw strings, backslashes are treated as literal characters rather than escape characters. When writing regular expressions, using raw strings is a good practice, since they can usually contain a lot of \\ characters.\nTurn your pattern string into a raw string by prefixing it with a r.\n--hints--\nYou should modify your pattern variable into r'\\.'.\njs\n({ test: () => assert.match(code, /^pattern\\s*=\\s*r(\"|')\\\\\\.\\1/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '[0-9]'),\n(lowercase, '[a-z]'),\n(uppercase, '[A-Z]'),\n(special_chars, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = '.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564d97a5ef99783216a6229.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f927332c981521ac5adc259c28a8d5f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564db880cf9408535f17ff4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564db880cf9408535f17ff4\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nThe character class \\d is a shorthand for [0-9]. Replace this character class with the shorthand inside your first constraint tuple.\n--hints--\nYou should turn the [0-9] class into \\d.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*r(\"|')\\\\d\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*r(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*r(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,\\s*\\(\\s*special_chars\\s*,\\s*r(\"|')\\4\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, r'[0-9]'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = r'.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1520,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564db880cf9408535f17ff4.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6d7be567012cced892153be8e0867275",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564dd65c3c2fa873a83d213.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564dd65c3c2fa873a83d213\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nIn a character class, you can combine multiple ranges by writing one range after another inside the square brackets (without any additional characters). For example: [a-d3-6] is the combination of [a-d] and [3-6].\nNow, modify the last regex pattern to match any non-alphanumeric character. Combine the a-z, A-Z, and 0-9 ranges into a single character class and add a ^ as the first character to negate the pattern.\n--hints--\nYou should complete your fourth pattern to match any non-alphanumeric character.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*r(\"|')\\\\d\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*r(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*r(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,\\s*\\(\\s*special_chars\\s*,\\s*r(\"|')\\[\\^a-zA-Z0-9\\]\\4\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = r'.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564dd65c3c2fa873a83d213.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a8925df7d48a1068c4110832b967ecfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564de10a0887f882b0012d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564de10a0887f882b0012d3\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nIn the same way the [0-9] class is equivalent to \\d, the [^0-9] class is equivalent to \\D. Alphanumeric characters can be matched with \\w and non-alphanumeric characters can be matched with \\W.\nReplace the [^a-zA-Z0-9] character class with \\W.\n--hints--\nYou should replace the [^a-zA-Z0-9] character class with \\W.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*r(\"|')\\\\d\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*r(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*r(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,\\s*\\(\\s*special_chars\\s*,\\s*r(\"|')\\\\W\\4\\s*\\)\\s*,?\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'[^a-zA-Z0-9]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = r'.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564de10a0887f882b0012d3.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5dffaac431a0be5e08ca8cdf712ad390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564eebf0d2d6390b9377197.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564eebf0d2d6390b9377197\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nNow, turn pattern into the shorthand class for non-alphanumeric characters.\n--hints--\nYour pattern variable should be '\\W'.\njs\n({ test: () => assert.match(code, /^pattern\\s*=\\s*r(\"|')\\\\W\\1/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'\\W')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = r'.'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1276,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564eebf0d2d6390b9377197.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "901d15509148bda77c942e5bbaa33333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564efa70114b591b74d5679.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564efa70114b591b74d5679\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nThe space characters and the final period are matched, as they are the only non-alphanumeric characters in the string.\nNow turn your quote string into a single underscore character.\n--hints--\nYour quote variable should be '_'.\njs\n({ test: () => assert.equal(__userGlobals.get(\"quote\"), \"_\") })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'\\W')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = r'\\W'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564efa70114b591b74d5679.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff1a80f0aba97595555b0eca0af07d29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f32b18480893cf7799fd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564f32b18480893cf7799fd\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nNow, combine your raw string with an f-string and interpolate your symbols variable inside the character class. Remember that you can interpolate a variable within an f-string using curly brackets { }.\n--hints--\nThe second item in your fourth constraint tuple should be the string fr'[{symbols}]'.\njs\n({ test: () => assert.match(code, /\\(\\s*special_chars\\s*,\\s*(fr|rf)(\"|')\\[\\{\\s*symbols\\s*\\}\\]\\2/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n--fcc-editable-region--\n(special_chars, r'\\W')\n--fcc-editable-region--\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f32b18480893cf7799fd.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f9cc45cc01d75f341e9286deedac755",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f583ca6fbf9556098dd6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564f583ca6fbf9556098dd6\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nBelow the constraints list, add a comment saying Check constraints.\n--hints--\nYou should add the provided comment.\njs\n({ test: () => assert.match(code, /#\\s*Check\\sconstraints/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f583ca6fbf9556098dd6.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "818e02a0b5e7f35d8196e484cec8e0a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f0279e23ce924eedd1b2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564f0279e23ce924eedd1b2\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nSince the underscore character is a valid character for variable names, it is included in the \\w character class (equivalent to [a-zA-Z0-9_]), which can be conveniently used to match variable names.\nTherefore, the \\W character class is equivalent to [^a-zA-Z0-9_] with the underscore character that is not matched. For this reason you cannot use it to match all your special characters.\nDelete the last three lines in your code.\n--hints--\nYou should delete the last three lines in your code.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /pattern\\s*=\\s*r(\"|')\\\\W\\1/);\nassert.notMatch(commentless_code, /quote\\s*=\\s*(\"|')_\\1/);\nassert.notMatch(commentless_code, /print\\(\\s*re\\.findall\\(\\s*pattern\\s*,\\s*quote\\s*\\)\\s*\\)/);\n}})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, r'\\W')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = r'\\W'\nquote = '_'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f0279e23ce924eedd1b2.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e69c662a39045d40b813d61c9a7f2945",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f834dd717998092cfd47.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564f834dd717998092cfd47\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nAfter your new comment, write a for loop to iterate over the constraints list. Use constraint and pattern as the loop variables.\n--hints--\nYou should write a for loop to iterate over the constraints list.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"generate_password\").find_whiles()[0].find_bodies()[0].find_for_loops()[1].find_for_iter().is_equivalent(\"constraints\")`)) })\nYour for loop should use constraint and pattern as the loop variables to iterate over the constraints list.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"generate_password\").find_whiles()[0].find_bodies()[0].find_for_loops()[1].find_for_vars().is_equivalent(\"constraint, pattern\")`)) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564f834dd717998092cfd47.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a353c37e67e5b8fe2f7d0fb30a827f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564fd78ffff909b1531d3c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564fd78ffff909b1531d3c3\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nInside the for loop, call the findall() function passing pattern and password as the arguments.\n--hints--\nYou should call re.findall() passing pattern and password as the arguments.\njs\n({ test: () => assert.match(code, /^(\\s*)for.+:\\s*^\\1\\s{4}re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\nfor constraint, pattern in constraints:\npass\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1412,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6564fd78ffff909b1531d3c3.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d90e7f1430fb560003286a6fa9868fd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bb128adfcd5ec362382d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565bb128adfcd5ec362382d\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nInside your for loop, compare constraint and the length of the list returned by findall(). Use the <= operator for that.\n--hints--\nYou should compare constraint and the length of the list returned by findall using the <= operator inside your for loop.\njs\n({ test: () => assert.match(code, /^(\\s*)for.+:\\s*^\\1\\s{4}constraint\\s*<=\\s*len\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\nfor constraint, pattern in constraints:\nlen(re.findall(pattern, password))\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bb128adfcd5ec362382d.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "65907252999b0a421734339e04a21311",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565012a2564509d40a90048.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565012a2564509d40a90048\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nYou are interested in the number of elements in the list returned by the findall() function.\nPass your existent findall() call to the len() function.\n--hints--\nYou should call the len() function with re.findall(pattern, password) as the argument.\njs\n({ test: () => assert.match(code, /^(\\s*)for.+:\\s*^\\1\\s{4}len\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\nfor constraint, pattern in constraints:\nre.findall(pattern, password)\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1515,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565012a2564509d40a90048.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0d18e1aca617be6b6d6f56560f7d9ced",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c014db6e9b63c257771d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c014db6e9b63c257771d\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nRight before your for loop, declare a count variable and assign the value zero to this variable.\n--hints--\nYou should declare a count variable and assign the value 0 to this variable.\njs\n({ test: () => assert.match(code, /count\\s*=\\s*0/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\nfor constraint, pattern in constraints:\nconstraint <= len(re.findall(pattern, password))\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1404,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c014db6e9b63c257771d.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ef33a605931598790473f5ef3170627",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c13fdb798865c161d8f8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c13fdb798865c161d8f8\ntitle: Step 65\nchallengeType: 20\ndashedName: step-65\n--description--\nNow it's time to test your function. Uncomment the last two lines in your code and modify the function call passing 5 arguments. Use 8 for the length and 1 for the other four constraints.\n--hints--\nYou should call generate_password with the provided arguments.\njs\n({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*8\\s*,\\s*1\\s*,\\s*1\\s*,\\s*1\\s*,\\s*1\\s*\\)/m) })\nYou should print your new_password variable.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*new_password\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c13fdb798865c161d8f8.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b380421e42d45767d40414250f623f44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c234de8cdf673c96bdf3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c234de8cdf673c96bdf3\ntitle: Step 67\nchallengeType: 20\ndashedName: step-67\n--description--\nAs long as all the arguments in a function call are keyword arguments, the order of the arguments doesn't matter.\nTo confirm this, try to change the order of length=8 and nums=1 in your function call.\n--hints--\nYou should change the order of length=8 and nums=1 in your generate_password() call.\njs\n({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*nums\\s*=\\s*1\\s*,\\s*length\\s*=\\s*8\\s*,\\s*special_chars\\s*=\\s*1\\s*,\\s*uppercase\\s*=\\s*1\\s*,\\s*lowercase\\s*=\\s*1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(length=8, nums=1, special_chars=1, uppercase=1, lowercase=1)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c234de8cdf673c96bdf3.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "30787deb99bd0709bafc9b3f2dd3a4cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c084627071646f94c4b0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c084627071646f94c4b0\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nFinally, after the for loop, create an if statement to check if count is equal to 4 and break out of the while loop by using the break statement.\n--hints--\nYou should create an if statement that checks if count is equal to 4 after the for loop.\njs\n({ test: () => assert.match(code, /^(\\s*)for.+:\\s*^\\1(\\s{4})if\\s+constraint\\s*<=\\s*len\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)\\s*:\\s*^\\1\\2\\2count\\s*\\+=\\s*1\\s*^\\1if\\s+count\\s*==\\s*4\\s*:/m) })\nYou should use break inside your new if to break out of the while loop.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+count\\s*==\\s*4\\s*/);\nassert(block_body.match(/^\\s+break\\s*$/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\ncount = 0\nfor constraint, pattern in constraints:\nif constraint <= len(re.findall(pattern, password)):\ncount += 1\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c084627071646f94c4b0.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "49ab31cda6c35c00e8e647e52d08810b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c32f89ab8d68b42aff30.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c32f89ab8d68b42aff30\ntitle: Step 70\nchallengeType: 20\ndashedName: step-70\n--description--\nNow, remove all the arguments from your function call.\n--hints--\nYou should call generate_password without arguments.\njs\n({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(length=8)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c32f89ab8d68b42aff30.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "566c137dd4bab98f83f74fc1b3657d8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c3a146bd5469b62bc59e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c3a146bd5469b62bc59e\ntitle: Step 71\nchallengeType: 20\ndashedName: step-71\n--description--\nModify your print() call to take the string 'Generated password:' as the first argument, before new_password.\n--hints--\nYou should pass the string 'Generated password:' and new_password to your print() call.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*(\"|')Generated\\spassword:\\1\\s*,\\s*new_password\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password()\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c3a146bd5469b62bc59e.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a1586ed6484658399d7a5d743c4f2ae2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bd4265158360de8e2ae7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565bd4265158360de8e2ae7\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nTurn the expression inside your for loop into an if statement Use the existing expression constraint <= len(re findall(pattern, password)) as the if condition Inside the new conditional statement, increment the count value by 1 --hints--\nYou should turn constraint <= len(re findall(pattern, password)) into the if condition js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+constraint\\s*,\\s*pattern\\s+in\\s+constraints\\s*/);\nassert(block_body match(/^\\s+if\\s+constraint\\s*<=\\s*len\\s*\\(\\s*re\\ findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)\\s*:/));\n}\n})\nYou should increment count by one inside your new if statement js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /if\\s+constraint\\s*<=\\s*len\\s*\\(\\s*re\\ findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)\\s*/);\nassert(block_body match(/^\\s+(count\\s*\\+=\\s*1|count\\s*=\\s*count\\s*\\+\\s*1)/));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string ascii_letters\ndigits = string digits\nsymbols = string punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\ncount = 0\nfor constraint, pattern in constraints:\nconstraint <= len(re",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bd4265158360de8e2ae7.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "23d5bac22dc873c58488b611951e9e22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bd4265158360de8e2ae7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "uppercase, lowercase): # Define the possible characters for the password letters = string ascii_letters digits = string digits symbols = string punctuation # Combine all characters all_characters = letters + digits + symbols while True: password = '' # Generate password for _ in range(length): password += secrets choice(all_characters) constraints = [ (nums, r'\\d'), (lowercase, r'[a-z]'), (uppercase, r'[A-Z]'), (special_chars, fr'[{symbols}]') ] --fcc-editable-region-- # Check constraints count = 0 for constraint, pattern in constraints: constraint <= len(refindall(pattern, password))\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565bd4265158360de8e2ae7.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3d732cfae5319aaaee05c53db6609907",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef54070c72161e6feb90f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656ef54070c72161e6feb90f\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nIt seems all fine, but it would be nice to have a way to check that the generated password complies to specific features. For example, a minimum number of special characters, digits, or uppercase/lowercase letters. You are going to take care of that very soon.\nFor now, comment out the last two lines of your code.\n--hints--\nYou should turn the last two lines of your code into comments.\njs\n({ test: () => {\nassert.match(code, /#\\s*new_password\\s*=\\s*generate_password\\s*\\(\\s*8\\s*\\)/);\nassert.match(code, /#\\s*print\\s*\\(\\s*new_password\\s*\\)/);\n} })\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef54070c72161e6feb90f.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c974ecf2f177ab7b3ea0b853c490f4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656eec2f40d18056cc58b229.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656eec2f40d18056cc58b229\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nThe value None is returned since 'i' is not found inside the parsed string.\nNow, modify the string passed to re.compile() into 'l' and see the result.\n--hints--\nYou should modify your pattern variable into re.compile('l').\njs\n({ test: () => assert(runPython(`\nimport re\npattern == re.compile('l')\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = re.compile('i')\nquote = 'Not all those who wander are lost.'\nprint(pattern.search(quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656eec2f40d18056cc58b229.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "26d3b51a6e080ee501139eda6dc09e0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef5bc5c0cd464be1df675.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656ef5bc5c0cd464be1df675\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nNext, you are going to give your function more parameters that will act as constraints for the generated password.\nModify your function declaration by adding nums, special_chars, uppercase, and lowercase in this order after the existent length parameter.\n--hints--\nYour function should take length, nums, special_chars, uppercase, and lowercase as the parameters. The order matters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(generate_password))\nsig == '(length, nums, special_chars, uppercase, lowercase)'\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\n--fcc-editable-region--\ndef generate_password(length):\n--fcc-editable-region--\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef5bc5c0cd464be1df675.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb1698a5ebdde2faf84daa829d61ac53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef783bba6976de014eaa8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656ef783bba6976de014eaa8\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nPut your password variable declaration and the following for loop inside a while loop. Use True as the condition for your new loop.\n--hints--\nYou should create a while True loop enclosing your existing password declaration and for loop.\n```js\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /while\\s+True\\s*/);\nassert(block_body.match(/^\\s+password\\s*=\\s*(\"|')\\1\\s*^\\s+for\\s+_\\s+in\\s+range\\s*\\(\\s*length\\s*\\s*\\)\\s*:\\s*^\\s+password\\s*\\+=\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)\\s*$/m));\nconst {block_body: for_body} = __helpers.python.getBlock(commentless_code, /for\\s+_\\s+in\\s+range\\s*\\(\\s*length\\s*\\s*\\)\\s*/);\nassert(for_body.match(/^\\s+password\\s*\\+=\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)\\s*$/m));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef783bba6976de014eaa8.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5be484123636cebe03abd9fabbbc5615",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef7f792734072dedd8319.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656ef7f792734072dedd8319\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nAfter your for loop, create a constraints variable and assign an empty list to this variable.\n--hints--\nYou should declare a constraints variable after your for loop and assign an empty list to this variable.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\nconst {function_body} = generate_pw;\nassert(function_body.match(/^(\\s*)for.*:.*^\\1constraints\\s*=\\s*\\[\\s*\\]/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\n--fcc-editable-region--\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef7f792734072dedd8319.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd5c13a6ee6e9dc7e35a8a24620eaf0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef89b4b486b7a16077864.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656ef89b4b486b7a16077864\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nA tuple is another built-in data structure in Python. Tuples are very much like lists, but they are defined with parentheses (), instead of square brackets. Also, tuples are immutable, unlike lists.\npy\nmy_tuple = ('larch', 1, True)\nYour constraints list is going to store tuples. The first item of each tuple will be a constraint parameter.\nModify the constraints list assignment by adding a tuple to your list. Use nums as the first item and an empty string as the second item.\n--hints--\nYou should add a tuple to the constraints list.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(.*\\)\\s*\\]/) })\nYou should add (nums, '') to the constraints list.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\1\\s*\\)\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = []\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656ef89b4b486b7a16077864.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a2f3d27152944394bacb71b4cd18dba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f0bc259c1f6b57486ed68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656f0bc259c1f6b57486ed68\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nTo check that the generated password meets the required features, you are going to use the findall() function from the re module. It's similar to search but it returns a list with all the occurrences of the matched pattern.\nReplace the search() call with findall() and check the output.\n--hints--\nYou should modify your existing print() call replacing search() with findall().\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*quote\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = 'l+'\nquote = 'Not all those who wander are lost.'\nprint(re.search(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1465,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f0bc259c1f6b57486ed68.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "759af0870f70ce4e0276511fa71f38e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c4767f49286aec825c6d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565c4767f49286aec825c6d\ntitle: Step 72\nchallengeType: 20\ndashedName: step-72\n--description--\nFinally, put the last two lines of your code inside an if statement that execute when __name__ == '__main__' In this way, your code won't run when imported as a module Otherwise, it will call generate_password() and print the generated password With that, the password generator project is complete --hints--\nYou should have an if statement that checks if __name__ == '__main__' js\nconst commentless_code = __helpers python removeComments(code);\nassert(commentless_code match(/^if\\s+__name__\\s*==\\s*(\"|')__main__\\1\\s*:\\s*$/m));\nYou should put the new_password assignment and the following print() call in your new if statement body js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /if\\s+__name__\\s*==\\s*(\"|')__main__\\3\\s*/);\nassert(block_body match(/^\\s+new_password\\s*=\\s*generate_password\\s*\\(\\s*\\)\\s*print\\s*\\(\\s*(\"|')Generated\\spassword:\\1\\s*,\\s*new_password\\s*\\)\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n# Define the possible characters for the password\nletters = string ascii_letters\ndigits = string digits\nsymbols = string punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c4767f49286aec825c6d.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "95ed24c44742971cc571c27482a8b76c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c4767f49286aec825c6d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "secrets import string def generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1): # Define the possible characters for the password letters = string ascii_letters digits = string digits symbols = string punctuation # Combine all characters all_characters = letters + digits + symbols while True: password = '' # Generate password for _ in range(length): password += secrets choice(all_characters) constraints = [ (nums, r'\\d'), (special_chars, fr'[{symbols}]'), (uppercase, r'[A-Z]'), (lowercase, r'[a-z]') ] # Check constraints if all( constraint <= len(refindall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password()\nprint('Generated password:', new_password)\n--fcc-editable-region--\n```\n--solutions--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n# Define the possible characters for the password\nletters = string ascii_letters\ndigits = string digits\nsymbols = string punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\nif name == 'main':\nnew_password = generate_password()\nprint('Generated password:', new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6565c4767f49286aec825c6d.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8067b88c7bd3e92df689be852692bb4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f04b20397d9a574cc7eb2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656f04b20397d9a574cc7eb2\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nYou can obtain the same result without using the compile() function. Modify your pattern variable into the literal string 'l+'. Then, change the print() call to print re.search(pattern, quote).\n--hints--\nYou should modify your pattern variable into the literal string 'l+'.\njs\n({ test: () => assert.equal(__userGlobals.get(\"pattern\"), \"l+\") })\nYou should print re.search(pattern, quote).\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*re\\.search\\s*\\(\\s*pattern\\s*,\\s*quote\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = re.compile('l+')\nquote = 'Not all those who wander are lost.'\nprint(pattern.search(quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1491,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f04b20397d9a574cc7eb2.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6059007ca212a34d5f93cd2e5239ca77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f0d6bc60b58b9777a36c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656f0d6bc60b58b9777a36c9\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nA character class is indicated by square brackets and matches one character among those specified between the brackets. For example, ma[dnt] matches either mad, man, or mat.\nModify your pattern to match a w followed by either h or a.\n--hints--\nYour pattern should use a character class to match a w followed by either h or a.\njs\n({ test: () => assert(runPython(`\npattern == \"w[ha]\" or pattern == \"w[ah]\"\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, '')\n]\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n--fcc-editable-region--\npattern = 'l+'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f0d6bc60b58b9777a36c9.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25b57b3fdd040dac42b55e5e6eef8836",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577333feab1e8e927014f03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6577333feab1e8e927014f03\ntitle: Step 63\nchallengeType: 20\ndashedName: step-63\n--description--\nHaving all([expression for i in iterable]), means that a new list is created by evaluating expression for each i in iterable. After the all() function iterates over the newly created list, the list is deleted automatically, since it is no longer needed.\nMemory can be saved by using a generator expression. Generator expressions follow the syntax of list comprehensions but they use parentheses instead of square brackets.\nChange your list comprehension into a generator expression by removing the square brackets.\n--hints--\nYou should turn your list comprehension into a generator expression by removing the square brackets.\njs\n({ test: () => assert.match(code, /^(\\s*)if\\s+all\\s*\\(\\s*constraint\\s*<=\\s*len\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)\\s*for\\s+constraint\\s*,\\s*pattern\\s+in\\s+constraints\\s*\\)\\s*:\\s*^\\1\\s{4}break/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n# Check constraints\ncount = 0\n--fcc-editable-region--\nif all(\n[\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n]\n):\n--fcc-editable-region--\nbreak\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577333feab1e8e927014f03.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cda8ccdd528f52bd7021797e9132e5df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f10458134d4c4e283a2f1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656f10458134d4c4e283a2f1\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nNow, turn the empty string in the constraint tuple into a regex pattern to match a single digit. Use a character class specifying each digit from 0 to 9.\n--hints--\nYou should have the (nums, '[0123456789]') tuple in your constraints list.\njs\n({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[\\d{10}\\]\\1\\s*\\)\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\n--fcc-editable-region--\nconstraints = [\n(nums, '')\n]\n--fcc-editable-region--\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\npattern = 'w[ha]'\nquote = 'Not all those who wander are lost.'\nprint(re.findall(pattern, quote))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1330,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\656f10458134d4c4e283a2f1.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f32e2e9342685507d8c4840bc0b5a00f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657732654845d8e2fb1217e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657732654845d8e2fb1217e6\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nRight now, all() is taking an empty list as the argument. Populate that empty list using the comprehension syntax so that the list stores the results of evaluating the expression constraint <= len(re.findall(pattern, password)) for each constraint-pattern tuple in the constraints list.\nIn this way, you'll break out of the while loop only after all the requirements are fulfilled.\n--hints--\nYou should pass [constraint <= len(re.findall(pattern, password)) for constraint, pattern in constraints] to the all() function.\njs\n({ test: () => assert(runPython(`\n_Node(_code).find_function(\"generate_password\").find_while(\"True\").find_bodies()[0].find_ifs()[0].find_conditions()[0].is_equivalent(\"all([constraint <= len(re.findall(pattern, password)) for constraint, pattern in constraints])\")\n`)) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n# Check constraints\ncount = 0\n--fcc-editable-region--\nif all([]):\n--fcc-editable-region--\nbreak\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1921,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657732654845d8e2fb1217e6.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a70cc951b5a25e62ac76b913b55898d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657733bc97eb83efdb7e3988.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657733bc97eb83efdb7e3988\ntitle: Step 64\nchallengeType: 20\ndashedName: step-64\n--description--\nYou don't need the count variable anymore. Delete this variable and its value.\n--hints--\nYou should delete the count = 0 line.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse( /count\\s*=\\s*0/.test(commentless_code))\n}\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n--fcc-editable-region--\n# Check constraints\ncount = 0\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\n--fcc-editable-region--\nbreak\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1494,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657733bc97eb83efdb7e3988.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "595bedcecc75d26f3e5d4e72fcc0248b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657dadf4d8b93c1704f3a57c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657dadf4d8b93c1704f3a57c\ntitle: Step 66\nchallengeType: 20\ndashedName: step-66\n--description--\nIt works, but there are still a couple of things you can improve. First of all, calling a function with 5 arguments can create confusion on which value will be assigned to which parameter.\nYou can call a function using keyword arguments, that is writing the parameter name explicitly followed by the assignment operator and the value. For example:\n```py\ndef add(x, y):\nreturn x + y\nadd(x=1, y=7) # 8\n```\nModify your function call to use keyword arguments.\n--hints--\nYour new_password variable should have the value of generate_password(length=8, nums=1, special_chars=1, uppercase=1, lowercase=1).\njs\n({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*length\\s*=\\s*8\\s*,\\s*nums\\s*=\\s*1\\s*,\\s*special_chars\\s*=\\s*1\\s*,\\s*uppercase\\s*=\\s*1\\s*,\\s*lowercase\\s*=\\s*1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(8, 1, 1, 1, 1)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657dadf4d8b93c1704f3a57c.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ef637e0843c5d930197a915db3d52686",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657db2114b4029241956f5d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657db2114b4029241956f5d6\ntitle: Step 68\nchallengeType: 20\ndashedName: step-68\n--description--\nModify your function declaration to take default parameters. Use 16 for the length and 1 for the other constraints.\n--hints--\nYour function should take default parameters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(generate_password))\nsig == '(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1)'\n`))\n})\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\n--fcc-editable-region--\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n--fcc-editable-region--\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\nnew_password = generate_password(nums=1, length=8, special_chars=1, uppercase=1, lowercase=1)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657db2114b4029241956f5d6.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6cb8a504a994d4186e9e71dd521b51b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577319039f4f7de9251b822.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6577319039f4f7de9251b822\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nInstead of using a loop and a counter variable, you can achieve the same result with a different approach, which you are going to implement in the next few steps all() is a built-in Python function that returns True if all the elements inside a given iterable evaluate to True Otherwise, it returns False Replace your existing for loop and two if statements with a single if statement For the if condition, use a call to the all() function and pass an empty list as the argument to the function call --hints--\nYou should replace your existing for loop and two if statements with a single if statement js\n({ test: () => {\nassert match(code, /^(\\s{8})if\\s+ +:\\s*^\\1\\s{4}break/ms);\nassert isFalse(/if\\s+count\\s*==\\s*4\\s*:/ test(code));\n} })\nYour new if condition should be all([]) js\n({ test: () => assert(runPython(`\n_Node(_code) find_function(\"generate_password\") find_while(\"True\") find_bodies()[0] find_if(\"all([])\") = _Node()\n`)) })\nYou should have break inside your new if body js\n({ test: () => assert(runPython(`\n_Node(_code) find_function(\"generate_password\") find_while(\"True\") find_bodies()[0] find_if(\"all([])\") find_bodies()[0] is_equivalent(\"break\")\n`)) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n# Define the possible characters for the password\nletters = string ascii_letters\ndigits = string digits\nsymbols = string punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(lowercase, r'[a-z]'),\n(uppercase, r'[A-Z]'),\n(special_chars, fr'[{symbols}]')\n]\n# Check constraints\ncount = 0\n--fcc-editable-region--\nfor constraint, pattern in constraints:\nif constraint <= len(re",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577319039f4f7de9251b822.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35d532a21fc6861a2831f8fde936a236",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577319039f4f7de9251b822.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lowercase): # Define the possible characters for the password letters = string ascii_letters digits = string digits symbols = string punctuation # Combine all characters all_characters = letters + digits + symbols while True: password = '' # Generate password for _ in range(length): password += secrets choice(all_characters) constraints = [ (nums, r'\\d'), (lowercase, r'[a-z]'), (uppercase, r'[A-Z]'), (special_chars, fr'[{symbols}]') ] # Check constraints count = 0 --fcc-editable-region-- for constraint, pattern in constraints: if constraint <= len(refindall(pattern, password)):\ncount += 1\nif count == 4:\n--fcc-editable-region--\nbreak\nreturn password\nnew_password = generate_password(8)\nprint(new_password)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\6577319039f4f7de9251b822.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e9ffe3d8d82327a3d544331ea1c022e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f01969115f933073b6be03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f01969115f933073b6be03\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nA vector is an object that has a length (or magnitude) and a direction and it cannot be expressed by a single number. In physics, vectors are commonly used to represent forces, velocities, accelerations, and other quantities.\nIn this project you are going to build a vector space, a set in which a series of operations is defined between the elements in that set. You'll learn all the details very soon.\nFor now, start the project by declaring an empty class named Vector.\n--hints--\nYou should declare an empty class named Vector.\njs\n({ test: () => assert(runPython(`_Node(_code).has_class(\"Vector\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f01969115f933073b6be03.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4fa078608086ebd02eca6d45e8d4aaa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f03d9f92eac9183a4d3281.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f03d9f92eac9183a4d3281\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nA vector can be defined by two coordinates, x and y, in the Euclidean plane. The distance between the origin of the axes and the point (x, y) will be its length, or norm. And the vector direction will point towards (x, y).\nWithin the Vector class, create an __init__ method and give it three parameters, self, x, and y.\n--hints--\nYou should define an __init__ method inside the Vector class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Vector\").has_function(\"__init__\")`)) })\nYour __init__ method should take three parameters: self, x, and y.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Vector\").find_function(\"__init__\").has_args(\"self, x, y\")`)) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Vector:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f03d9f92eac9183a4d3281.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "097460f8e1f5d40a7138e2702f1beb70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657db4cb77190e33a20e852a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657db4cb77190e33a20e852a\ntitle: Step 69\nchallengeType: 20\ndashedName: step-69\n--description--\nWhen you combine default arguments with keyword arguments, you are able to explicitly pass fewer arguments than those required by the function. The arguments that are not explicitly passed to the function call will take their default values.\nModify your generate_password() call to take only length=8.\n--hints--\nYou should pass only length=8 to your generate_password() call.\njs\n({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*length\\s*=\\s*8\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nimport re\nimport secrets\nimport string\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n# Combine all characters\nall_characters = letters + digits + symbols\nwhile True:\npassword = ''\n# Generate password\nfor _ in range(length):\npassword += secrets.choice(all_characters)\nconstraints = [\n(nums, r'\\d'),\n(special_chars, fr'[{symbols}]'),\n(uppercase, r'[A-Z]'),\n(lowercase, r'[a-z]')\n]\n# Check constraints\nif all(\nconstraint <= len(re.findall(pattern, password))\nfor constraint, pattern in constraints\n):\nbreak\nreturn password\n--fcc-editable-region--\nnew_password = generate_password(nums=1, length=8, special_chars=1, uppercase=1, lowercase=1)\nprint(new_password)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1739,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\657db4cb77190e33a20e852a.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "20fd5e9ddc7e5f8426228e1554c8b506",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f056a405239e1dc4cc2854.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f056a405239e1dc4cc2854\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nNow, assign y to the y attribute of the Vector object.\n--hints--\nYou should assign y to self.y.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").find_function(\"__init__\").find_variable(\"self.y\").is_equivalent(\"self.y = y\")\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Vector:\ndef __init__(self, x, y):\nself.x = x\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f056a405239e1dc4cc2854.md",
      "source_type": "git_repo"
    },
    "token_count": 148,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0d4ad720e99b7cc7c57cebebeb5c160b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f055b9190fc41ca35549b8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f055b9190fc41ca35549b8\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nPython offers various methods that include both a leading and trailing double underscore in their names. You may already be familiar with some, such as __init__ and __str__. These methods, which follow the __<name>__ naming pattern, are referred to as special methods, magic methods, or dunder (which stands for double underscore) methods.\nDefining special methods in a class affects the behavior of that class. They are called under the hood in specific situations (e.g. __init__ during instantiation, __str__ when the object is printed or passed to str()). In this project, you are going to learn some of the most commonly used special methods.\nFor now, assign x to the x attribute of the Vector object.\n--hints--\nYou should assign x to self.x.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").find_function(\"__init__\").has_stmt(\"self.x = x\")\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Vector:\ndef __init__(self, x, y):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1184,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f055b9190fc41ca35549b8.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb63a613861dde44388c2a94b5b26af5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f0694fb2296f3caadf8347.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f0694fb2296f3caadf8347\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nThe length of a vector $\\mathbf{a}$, or norm, is typically indicated as $\\| \\mathbf{a} \\|$. It can be calculated as the square root of the sum of its squared components:\n\\[ \\| \\mathbf{a} \\| = \\sqrt{a_1^2 + a_2^2 + \\ldots + a_n^2}\n\\]\nCompute the vector norm and return the result from your norm method.\n--hints--\nYour norm method should use the provided formula to calculate and return a number representing the norm of the current vector instance. Do not approximate the value.\njs\n({ test: () => runPython(`\nv1 = Vector(2, 2.5)\nv2 = Vector(0, -1)\nv3 = Vector(-5, -0.3)\nassert v1.norm() == 3.2015621187164243\nassert v2.norm() == 1\nassert v3.norm() == 5.008991914547277\n`) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1023,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f0694fb2296f3caadf8347.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "314f43d7e159187eb209bd396be5f83d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f06a8e5a57673d700c79c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f06a8e5a57673d700c79c3\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nOutside the Vector class, create an instance of Vector passing the integers 2 and 3 as the x and y values and assign it to a variable named v1.\n--hints--\nYou should declare a variable v1 and assign it Vector(2, 3).\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_variable(\"v1\").is_equivalent(\"v1 = Vector(2, 3)\")\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f06a8e5a57673d700c79c3.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "836645a4c16850a882ccdba9ed5aca01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f058e06f34fd1f0ee6e55d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f058e06f34fd1f0ee6e55d\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nNext, within the Vector class, create an empty norm method and give it a self parameter.\n--hints--\nYour Vector class should have a norm method.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").has_function(\"norm\")\n`))\n})\nYour norm method should have a self parameter.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").find_function(\"norm\").has_args(\"self\")\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Vector:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 753,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f058e06f34fd1f0ee6e55d.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7a48a777ef9a23cfa271917302f20da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f07c9b1ffb814d856dcffc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f07c9b1ffb814d856dcffc\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nTest that norm works as expected by printing the value returned by the method.\n--hints--\nYou should call norm() on v1 and print the result.\njs\n({\ntest: () => assert(runPython(`_Node(_code).has_call(\"print(v1.norm())\")`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\nv1 = Vector(2, 3)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 621,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f07c9b1ffb814d856dcffc.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "651364660090163ea96b54cc3a003c94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fe07cc763212efe91285.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f3fe07cc763212efe91285\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nA vector can have a number n of dimensions (components). Here's a representation of a 3-dimensional vector:\nSo far, you created a 2-dimensional vector. You want to be able to represent vectors with a different number of dimensions without rewriting the necessary code for each specific case. For that, you will use inheritance.\nStart by renaming the Vector class into R2Vector to specify that this class is going to deal with 2-dimensional vectors. Remember to modify the instantiation of v1, too.\n--hints--\nYou should rename the Vector class into R2Vector. Remember to modify the instantiation of v1, too.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).has_class(\"R2Vector\")\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\nv1 = Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fe07cc763212efe91285.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "248d35674bbeff9db35181a7d39ee7fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fa097f26b510db6c710b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f3fa097f26b510db6c710b\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nGreat, norm is working as expected. Now, if you try to print v1, you'll get the default string representation of an object (something like <__main__.Vector object at 0x11eb778>).\nInside the Vector class, declare an empty __str__ method to implement a readable string representation. Remember to give it a self parameter.\nPay attention to not print v1 until __str__ returns a string, otherwise you'll get a TypeError, because __str__ must always return a string.\n--hints--\nYou should define a __str__ method within the Vector class.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").has_function(\"__str__\")\n`))\n})\nYour __str__ method should have a self parameter.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"Vector\").find_function(\"__str__\").has_args(\"self\")\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\nv1 = Vector(2, 3)\nprint(v1.norm())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fa097f26b510db6c710b.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "163e487c7ea5f4e0d0f65bcd781d86c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40401e6ef53173c04e27d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f40401e6ef53173c04e27d\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nWithin your new class, declare an __init__ method. Give it self, x, y, and z as the parameters.\n--hints--\nYou should define an __init__ method inside your R3Vector class.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R3Vector\").has_function(\"__init__\")\n`))\n})\nYour __init__ method should have four parameters self, x, y, and z.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R3Vector\").find_function(\"__init__\").has_args(\"self, x, y, z\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\n--fcc-editable-region--\nclass R3Vector(R2Vector):\npass\n--fcc-editable-region--\nv1 = R2Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1058,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40401e6ef53173c04e27d.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70c1e41b1c980c693052075ca31a3b2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fa60a93b84110b3f1708.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f3fa60a93b84110b3f1708\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nYou want to return a meaningful string representation. For example, in the case of v1, you want to return a string containing the tuple with the values of the vector components: (2, 3).\nFrom the __str__ method, return a string representing the vector as a tuple containing the vector components in order. Then, go outside the Vector class and print v1 to check the result.\n--hints--\nYour __str__ method should return a string representing the vector as a tuple containing the vector components in order.\njs\n({ test: () => runPython(`\nv1 = Vector(2, 3)\nv2 = Vector(0, 0)\nv3 = Vector(-2, -3.5)\nassert str(v1) == '(2, 3)'\nassert str(v2) == '(0, 0)'\nassert str(v3) == '(-2, -3.5)'\n`) })\nYou should print v1.\njs\n({\ntest: () => assert(runPython(`_Node(_code).has_call(\"print(v1)\")`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\npass\nv1 = Vector(2, 3)\nprint(v1.norm())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f3fa60a93b84110b3f1708.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67b6ba4408b45cb6aae12ac17add66ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40051d6b09a139f253e8e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f40051d6b09a139f253e8e\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nInheritance enables you to define a class from an existing one. The new class, called child, inherits all the methods and properties of the existing class, called parent.\n```py\nclass Tree:\ndef sprout(self):\nprint('Making new leaves!')\nclass Oak(Tree):\npass\nOak().sprout() # Output: Making new leaves!\n```\nIn the example above, the child class Oak inherits from Tree and inherits the sprout method from the parent class Tree.\nCreate a new class named R3Vector and follow the example above to make it inherit from the R2Vector class.\n--hints--\nYou should define a new class R3Vector.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).has_class(\"R3Vector\")\n`))\n})\nYour new class R3Vector should inherit from R2Vector.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R3Vector\").inherits_from(\"R2Vector\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\n--fcc-editable-region--\n--fcc-editable-region--\nv1 = R2Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40051d6b09a139f253e8e.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ca861d7ac757cfc02b9997a4493c9df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f407ea37ad6e181b90462e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f407ea37ad6e181b90462e\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nYou could assign each i parameter to self.i as you did before. Although in this case you have few lines to repeat, one way to avoid this repetition is using the super() function. super() enables you to refer implicitly to the parent class: super().__init__(x, y) calls the __init__ method of the parent class.\nAdd a super().__init__(x, y) call to your __init__ method.\n--hints--\nYou should have a super().__init__(x, y) call in your __init__ method.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R3Vector\").find_function(\"__init__\").has_stmt(\"super().__init__(x, y)\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, x, y, z):\npass\n--fcc-editable-region--\nv1 = R2Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1184,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f407ea37ad6e181b90462e.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "462dd7e26447ab8f9041ebc6c33b9baa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40f8af784751c613d638a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f40f8af784751c613d638a\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nNow, you need to assign z to the z attribute of your R3Vector object.\n--hints--\nYou should assign z to self.z after the super call.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R3Vector\").find_function(\"__init__\").is_ordered(\"super().__init__(x, y)\", \"self.z = z\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, x, y, z):\nsuper().init(x, y)\n--fcc-editable-region--\nv1 = R2Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40f8af784751c613d638a.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "91442d1849f698d33ef64e823f962291",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40fdb3579aa1ced28b2eb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f40fdb3579aa1ced28b2eb\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nCreate an R3Vector instance with 2, 2, and 3 as the values of x, y, and z, respectively. Assign the new instance to v2.\n--hints--\nYou should declare a variable v2 and assign it R3Vector(2, 2, 3).\njs\n({ test: () => assert(runPython(`_Node(_code).find_variable(\"v2\").is_equivalent(\"v2 = R3Vector(2, 2, 3)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, x, y, z):\nsuper().init(x, y)\nself.z = z\nv1 = R2Vector(2, 3)\nprint(v1.norm())\nprint(v1)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f40fdb3579aa1ced28b2eb.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75a295ab149d955ec3045a5be695eeaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4148dea0f802040225e0c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f4148dea0f802040225e0c\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nRemove the existing print calls. Then, as you did before for v1, print v2 and the value returned by v2.norm().\n--hints--\nYou should not have print(v1) and print(v1.norm()) in your code.\njs\n({\ntest: () => {\nassert.isFalse(runPython(`_Node(_code).has_call(\"print(v1)\")`));\nassert.isFalse(runPython(`_Node(_code).has_call(\"print(v1.norm())\")`));\n}\n})\nYou should print v2 and v2.norm().\njs\n({\ntest: () => {\nassert(runPython(`_Node(_code).has_call(\"print(v2)\")`));\nassert(runPython(`_Node(_code).has_call(\"print(v2.norm())\")`));\n}\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nprint(v1.norm())\nprint(v1)\nv2 = R3Vector(x=2, y=2, z=3)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4148dea0f802040225e0c.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ef47f69050f396171a30539a71dc911",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4520e363e2642f8112e33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f4520e363e2642f8112e33\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nAs you can see, something is not quite right. The norm and __str__ methods inherited from R2Vector cannot adapt to a 3-dimensional vector. Their implementation has to be more flexible.\nEvery object in Python has a special attribute named __dict__, which is a dictionary that stores the object attributes.\nRemove the existing print calls. Then, print the __dict__ attribute of your v1 and v2 vectors to see what they look like.\n--hints--\nYou should not have print(v2) and print(v2.norm()) in your code.\njs\n({\ntest: () => {\nassert.isFalse(runPython(`_Node(_code).has_call(\"print(v2)\")`));\nassert.isFalse(runPython(`_Node(_code).has_call(\"print(v2.norm())\")`));\n}\n})\nYou should print the __dict__ attribute of v1 and v2.\njs\n({ test: () => assert(runPython(`\n(_Node(_code).has_call(\"print(v1.__dict__)\") and _Node(_code).has_call(\"print(v2.__dict__)\")) or _Node(_code).has_call(\"print(v1.__dict__, v2.__dict__)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn (self.x**2 + self.y**2)**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v2.norm())\nprint(v2)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4520e363e2642f8112e33.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f24c7de5c2d74ce193329428d613fc5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4535bbdb28d436ff3ddc9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f4535bbdb28d436ff3ddc9\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nAs you can see from the output, __dict__ contains the values of your instance attributes. Instead of explicitly adding the squares of self.x and self.y, you are going to iterate over the values stored in __dict__ to calculate the value of the norm.\nWithin the norm method body, replace the content of the parentheses with a generator expression that elevates each value val in self.__dict__.values() to the power of 2. Also, pass that generator expression as the argument to the sum function, so that all the squares are added together before calculating the square root.\n--hints--\nYou should return sum(val**2 for val in self.__dict__.values())**0.5 from norm() method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"norm\").has_return(\"sum(val**2 for val in self.__dict__.values())**0.5\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, , x, y):\nself.x = x\nself.y = y\n--fcc-editable-region--\ndef norm(self):\nreturn (self.x2 + self.y2)*0.5\n--fcc-editable-region--\ndef str(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.dict)\nprint(v2.dict)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f4535bbdb28d436ff3ddc9.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f436dc016944412d0f4ff410251ec23c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f870003444fb1a2ad171f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f870003444fb1a2ad171f2\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nModify the two print calls to print the norm of your vectors and verify that the norm() method works fine.\n--hints--\nYou should print v1.norm().\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(v1.norm())\")`)) })\nYou should print v2.norm().\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(v2.norm())\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in self.__dict__.values())**0.5\ndef __str__(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.dict)\nprint(v2.dict)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1015,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f870003444fb1a2ad171f2.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ca9a7c4661b3135bcaab0ec965b48d4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8720685ec351abef26740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f8720685ec351abef26740\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nTo obtain a proper string representation, call the tuple() constructor and pass it the generator expression you wrote in the previous step as the argument.\n--hints--\nYou should pass the expression returned by the __str__ method to the tuple() constructor.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__str__\").has_return(\"tuple(getattr(self, i) for i in vars(self))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\n--fcc-editable-region--\ndef str(self):\nreturn (getattr(self, i) for i in vars(self))\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.norm())\nprint(v2.norm())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8720685ec351abef26740.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "26ae0ee1d7eed1f8e42b6936db55d245",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8709620b2ce1a62608f5a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f8709620b2ce1a62608f5a\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nWhen you need to dynamically access some attributes starting from a string input, the built-in getattr() function is what you need. It takes an object as its first argument, and a string containing the attribute name as its second attribute.\nStart to fix the __str__ method by replacing the string returned by __str__() with a generator expression that iterates through the object attributes and calls getattr() for each attribute i.\n--hints--\nYou should return a generator expression that iterates over vars(self).\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__str__\").find_return().find_comp_iters()[0].is_equivalent(\"vars(self)\")`)) })\nYou should return a generator expression that uses i as the iteration variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__str__\").find_return().find_comp_targets()[0].is_equivalent(\"i\")`)) })\nYou should return a generator expression that calls getattr(self, i) for each item i in vars(self).\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__str__\").find_return().find_comp_expr().is_equivalent(\"getattr(self, i)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\n--fcc-editable-region--\ndef str(self):\nreturn f'{self.x, self.y}'\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.norm())\nprint(v2.norm())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1878,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8709620b2ce1a62608f5a.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a2cc428b862f89b9d382e2b01c407c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f412c208c3791fee305acf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f412c208c3791fee305acf\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nIn Python, you can enforce the use of keyword-only arguments by adding a * as an additional argument to the function or method signature Modify both __init__ methods by adding a * as the second parameter (after self) Every parameter placed after that will require the use of a keyword argument in the function/method call This means that you need to modify the super() __init__(x, y) call, too Do it by giving x the value x, and y the value y Finally, modify the instantiation of v1 and v2 by using keyword arguments --hints--\nYou should enforce keyword arguments by adding a * as the second parameter in both your __init__ methods js\n({ test: () => {\nassert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__init__\") has_args(\"self, *, x, y\")`));\nassert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"__init__\") has_args(\"self, *, x, y, z\")`));\n} })\nYou should modify your super __init__(x, y) call to  use keyword arguments js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"__init__\") find_body() is_equivalent(\"super() __init__(x=x, y=y)\\\\nself z = z\")`)) })\nYou should modify the assignment of v1 to be R2Vector(x=2, y=3) js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v1\") is_equivalent(\"v1 = R2Vector(x=2, y=3)\")`)) })\nYou should modify the assignment of v2 to be R3Vector(x=2, y=2, z=3) js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v2\") is_equivalent(\"v2 = R3Vector(x=2, y=2, z=3)\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass R2Vector:\ndef init(self, x, y):\nself x = x\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f412c208c3791fee305acf.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "49838f79d06b9c9c8bb1a9811d1a1369",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f412c208c3791fee305acf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => assert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"__init__\") find_body() is_equivalent(\"super() __init__(x=x, y=y)\\\\nself z = z\")`)) }) You should modify the assignment of v1 to be R2Vector(x=2, y=3) js ({ test: () => assert(runPython(`_Node(_code) find_variable(\"v1\") is_equivalent(\"v1 = R2Vector(x=2, y=3)\")`)) }) You should modify the assignment of v2 to be R3Vector(x=2, y=2, z=3) js ({ test: () => assert(runPython(`_Node(_code) find_variable(\"v2\") is_equivalent(\"v2 = R3Vector(x=2, y=2, z=3)\")`)) }) --seed-- --seed-contents-- ```py --fcc-editable-region-- class R2Vector: def init(self, x, y): self x = x selfy = y\ndef norm(self):\nreturn (self x**2 + self y**2)**0 5\ndef __str__(self):\nreturn f'{self x, self y}'\nclass R3Vector(R2Vector):\ndef init(self, x, y, z):\nsuper() init(x, y)\nself z = z\nv1 = R2Vector(2, 3)\nprint(v1 norm())\nprint(v1)\nv2 = R3Vector(2, 2, 3)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f412c208c3791fee305acf.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4fe511c765f97288cac083208f9fe0d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f872a0fe6aa21b456ad4fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f872a0fe6aa21b456ad4fe\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nFinally, pass the tuple() call as the argument to the str() function.\n--hints--\nYou should pass the tuple() call you are currently returning from the __str__ method to the str() function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__str__\").has_return(\"str(tuple(getattr(self, i) for i in vars(self)))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\n--fcc-editable-region--\ndef str(self):\nreturn tuple(getattr(self, i) for i in vars(self))\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.norm())\nprint(v2.norm())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f872a0fe6aa21b456ad4fe.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "73a559f9c23f8c9ab617de23d4a76656",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8749b13774b1d2e4a7fba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f8749b13774b1d2e4a7fba\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nWhile the __str__ method returns a human-readable string representation of an object, the __repr__ method is supposed to return the string needed to instantiate the object.\nAdd a __repr__ method with a self parameter within the R2Vector class.\n--hints--\nYour R2Vector class should have a __repr__ method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").has_function(\"__repr__\")`)) })\nYour __repr__ method should have a self parameter.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__repr__\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1298,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f8749b13774b1d2e4a7fba.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3f467bdae9e7e7ab07652fd97cb5ebc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93acbb514857003510e79.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f93acbb514857003510e79\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nDeclare a variable args and assign it the value returned by joining the elements in arg_list with the string ', '.\n--hints--\nYou should declare a variable args and assign it the value returned by joining the elements in arg_list with the string ', '.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__repr__\").find_variable(\"args\").is_equivalent(\"args = ', '.join(arg_list)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\n--fcc-editable-region--\ndef repr(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93acbb514857003510e79.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fec19de6defa2ecb3f8381e2c092bf20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93b67169a9c703264458a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f93b67169a9c703264458a\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nSince the method should return the string to instantiate the object for R2Vector as well as R3Vector when inherited, you cannot build the string specifying the class name.\nYou can access the name of a class with __class__.__name__. Add a return statement to the __repr__ method and return the string necessary to instantiate the object.\n--hints--\nYou should use __class__.__name__ to build the f-string needed to instantiate a vector object and return it from the __repr__ method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__repr__\").has_return(\"f'{self.__class__.__name__}({args})'\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\n--fcc-editable-region--\ndef repr(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93b67169a9c703264458a.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "06faf69c1823e9be7ab424ea62eca329",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93e54a9121571dcdd3e79.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f93e54a9121571dcdd3e79\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nThe output is correct, repr is giving you the string required to instantiate the objects.\nNow comment out both your print calls.\n--hints--\nYou should comment out both your print() calls.\njs\n({ test: () => {\nassert.match(code, /#\\s*print\\s*\\(\\s*f('|\")v1 = \\{\\s*v1\\s*\\}\\1\\s*,\\s*f('|\")\\\\nrepr = \\{\\s*repr\\s*\\(\\s*v1\\s*\\)\\s*\\}\\2\\s*\\)/);\nassert.match(code, /#\\s*print\\s*\\(\\s*f('|\")v2 = \\{\\s*v2\\s*\\}\\1\\s*,\\s*f('|\")\\\\nrepr = \\{\\s*repr\\s*\\(\\s*v2\\s*\\)\\s*\\}\\2\\s*\\)/);\n} })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93e54a9121571dcdd3e79.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eb00eeaf0c8969c1131f5eb5f0ef1d35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b17a638f0d0dcce8c354.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9b17a638f0d0dcce8c354\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nTo create a vector space, you need to define how vectors should behave in several cases. Vectors can be added, forming a new vector.\nThe special method __add__ can be implemented to override what happens by default when two objects are added together using the + operator.\nRight now, trying to add two instances of R2Vector or R3Vector would raise an exception. Create an empty __add__ method within the R2Vector class and give it two parameters: self, and other.\n--hints--\nYou should define an __add__ method within the R2Vector class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").has_function(\"__add__\")`)) })\nYour __add__ method should have two parameters, self and other.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__add__\").has_args(\"self, other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1739,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b17a638f0d0dcce8c354.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "16e6720c34bdab1c4841e24f21010a21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93d4647ce2670dc6f095c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f93d4647ce2670dc6f095c\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nThe __repr__ method is called under the hood by the repr function. Verify that __repr__ works properly by adding f'\\nrepr = {repr(v1)}' and f'\\nrepr = {repr(v2)}' as the second argument to your first and second print calls, respectively.\n--hints--\nYou should add f'\\nrepr = {repr(v1)}' as the second argument to your print(f'v1 = {v1}') call.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(f'v1 = {v1}', f'\\\\\\\\nrepr = {repr(v1)}')\")`)) })\nYou should add f'\\nrepr = {repr(v2)}' as the second argument to your print(f'v2 = {v2}') call.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(f'v2 = {v2}', f'\\\\\\\\nrepr = {repr(v2)}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f93d4647ce2670dc6f095c.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c1adadd54196dbdeb70b77fa8bfed71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b486989cb90ff3e77ac8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9b486989cb90ff3e77ac8\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nThe other parameter of your __add__ method represents the operand placed at the right side of the + operator in an addition operation.\nYou want to verify that the right-hand operand is not an object of the same class as the left-hand operand (i.e. self). Create an if statement that verifies that by checking the type of the operands.\n--hints--\nYou should create an if statement that checks if type(self) and type(other) are different.\njs\n({ test: () => assert(runPython(`\nnode = _Node(_code).find_class(\"R2Vector\").find_function(\"__add__\").find_ifs()[0].find_conditions()[0]\nnode.is_equivalent(\"type(self) != type(other)\") or node.is_equivalent(\"type(other) != type(self)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\n--fcc-editable-region--\ndef add(self, other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b486989cb90ff3e77ac8.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50ce5f6f4007d3f1a9d046ea4d377d6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b9710cca621244d3bde1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9b9710cca621244d3bde1\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nIn Python, NotImplemented is a special value used to indicate that an operation is not implemented for a specific case.\nNotImplemented does not raise an exception immediately. Instead, it signals to ask to the other operand how to perform the operation. If the request cannot be satisfied, a TypeError is returned by default.\nBecause you want to be able to sum two vectors only if they belong to the same class, return NotImplemented from the if statement you created in the previous step.\n--hints--\nYou should return NotImplemented from within the if body.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"__add__\").find_ifs()[0].find_bodies()[0].has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\n--fcc-editable-region--\ndef add(self, other):\nif type(self) != type(other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9b9710cca621244d3bde1.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e2d91b074924ecf37b482a2f6c36e05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bb7c0d524612b2a88a4b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9bb7c0d524612b2a88a4b\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nAfter the if statement, declare a variable kwargs and assign it an empty dictionary.\n--hints--\nYou should declare a variable kwargs and assign it an empty dictionary after the if statement.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R2Vector\").find_function(\"__add__\").has_stmt(\"kwargs = {}\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\n--fcc-editable-region--\ndef add(self, other):\nif type(self) != type(other):\nreturn NotImplemented\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1310,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bb7c0d524612b2a88a4b.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a79ca0c9f4f44077a3fccba59fd41bf9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f876d17832001e8e1abb05.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f876d17832001e8e1abb05\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nDeclare a variable arg_list Give it the value of a list comprehension that iterates over key and val for each key-value pair in vars(self) items() and computes the f-string f'{key}={val}' at each iteration --hints--\nYou should declare a variable arg_list js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") has_variable(\"arg_list\")`)) })\nYou should assign a list comprehension that iterates over vars(self) items() to arg_list js\n({ test: () => runPython(`\nimport ast\nvar = _Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") find_variable(\"arg_list\")\nassert isinstance(var tree value, ast ListComp), \"Expected arg_list to be a list comprehension\"\nassert (actual := var find_comp_iters()[0] is_equivalent(\"vars(self) items()\")), f\"Expected vars(self) items(), got {actual}\"\n`) })\nThe list comprehension assigned to arg_list should use key and val to iterate over vars(self) items() js\n({ test: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") find_variable(\"arg_list\") find_comp_targets()[0] is_equivalent(\"key, val\")\n`)) })\nThe list comprehension assigned to arg_list should compute the string f'{key}={val}' for each key-value pair in vars(self) items() js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") find_variable(\"arg_list\") find_comp_expr() is_equivalent(\"f'{key}={val}'\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f876d17832001e8e1abb05.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0f7a97e445cec2e0eb6df9e07dc88771",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f876d17832001e8e1abb05.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "iterate over vars(self) items() js ({ test: () => assert(runPython(` _Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") find_variable(\"arg_list\") find_comp_targets()[0] is_equivalent(\"key, val\") `)) }) The list comprehension assigned to arg_list should compute the string f'{key}={val}' for each key-value pair in vars(self) items() js ({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__repr__\") find_variable(\"arg_list\") find_comp_expr() is_equivalent(\"f'{key}={val}'\")`)) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**05\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\n--fcc-editable-region--\ndef repr(self):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f876d17832001e8e1abb05.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "416f3ce7b9176001a6228bbf481c304e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9c2c2006feb1428ad2d4c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9c2c2006feb1428ad2d4c\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nYou can unpack a dictionary into keyword arguments by using the ** operator:\n```py\ndef spam(a, b):\nreturn a + b\nmy_dict = {a: 11, b: 4}\nspam(**my_dict) # 15\n```\nReturn an instance of the current class by using __class__ and passing **kwargs as the argument.\n--hints--\nYou should return self.__class__(**kwargs) from the __add__ method.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R2Vector\").find_function(\"__add__\").has_return(\"self.__class__(**kwargs)\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\n--fcc-editable-region--\ndef add(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1560,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9c2c2006feb1428ad2d4c.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87a0e51024bf97e7529b9e6da1028add",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dfd2e75e291a38695f13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9dfd2e75e291a38695f13\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nFinally, return a new vector object. Use __class__ and unpack kwargs to instantiate the new vector.\n--hints--\nYou should return a new vector using __class__ and unpacking kwargs from the __sub__ method.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_class(\"R2Vector\").find_function(\"__sub__\").has_return(\"self.__class__(**kwargs)\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\ndef __add__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\n--fcc-editable-region--\ndef sub(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dfd2e75e291a38695f13.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1e8e537cece574a66623c7c9d132c8c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9e0a578b22c1a736f3d82.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9e0a578b22c1a736f3d82\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nModify your v2 variable assignment to be an R2Vector instance having x=0.5 and y=1.25.\n--hints--\nYou should modify your v2 variable assignment to be an R2Vector instance having x=0.5 and y=1.25.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).has_stmt(\"v2 = R2Vector(x=0.5, y=1.25)\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\ndef __add__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\ndef __sub__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9e0a578b22c1a736f3d82.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9999f0d7902091eb395e63a00b9911c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bc10a9fb1612e066e9e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9bc10a9fb1612e066e9e8\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nWhen adding two vectors, each component of one vector is added to the same component of the other vector For example, adding (1, 2) and (2, 4) generates a third vector (3, 6), where 3 is the sum of 1 and 2 and 6 is the sum of 2 and 4 The kwargs dictionary will contain the key-value pairs needed to instantiate a new vector of the same class of the two vectors added together Turn the empty dictionary into a dictionary comprehension that iterates through vars(self) and for each key (i) creates a key-value pair, where the key is the same key of the current iteration and its value is the sum of the values of the i attributes of the two operands --hints--\nYou should turn the empty dictionary assigned to kwargs into a dictionary comprehension that iterates over vars(self) js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_iters()[0] is_equivalent(\"vars(self)\")\n`))\n})\nThe dictionary comprehension assigned to kwargs should use the variable i to iterate over vars(self) js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_targets()[0] is_equivalent(\"i\")\n`))\n})\nThe dictionary comprehension assigned to kwargs should use i as the key js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_key() is_equivalent(\"i\")\n`))\n})\nThe dictionary comprehension assigned to kwargs should assign the sum of the i attribute of self and the i attribute of other to the i key for each i in vars(self) Use the getattr() function for that js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_expr()\nnode is_equivalent(\"getattr(self, i) + getattr(other, i)\") or node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bc10a9fb1612e066e9e8.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "78675b60b3185e02403133457bd72199",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bc10a9fb1612e066e9e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i as the key js ({ test: () => assert(runPython(` _Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_key() is_equivalent(\"i\") `)) }) The dictionary comprehension assigned to kwargs should assign the sum of the i attribute of self and the i attribute of other to the i key for each i in vars(self) Use the getattr() function for that js ({ test: () => assert(runPython(` node = _Node(_code) find_class(\"R2Vector\") find_function(\"__add__\") find_variable(\"kwargs\") find_comp_expr() node is_equivalent(\"getattr(self, i) + getattr(other, i)\") or nodeis_equivalent(\"getattr(other, i) + getattr(self, i)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\n--fcc-editable-region--\ndef add(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {}\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9bc10a9fb1612e066e9e8.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8a2bd7f560b3470d6e4d8716c4eaaee8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9cb678070ca1668898c70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9cb678070ca1668898c70\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nIn the same way __add__ is called under the hood when two objects are added together, the __sub__ method is called implicitly in case of subtraction Now, define an empty __sub__ method and give two parameters: self, and other Inside your new method, create an if statement to check if self and other do not belong to the same class and return NotImplemented, as you did previously --hints--\nYou should define a __sub__ method within the R2Vector class js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") has_function(\"__sub__\")\n`))\n})\nYour __sub__ method should have two parameters, self and other js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") has_args(\"self, other\")\n`))\n})\nYou should create an if statement that checks if self and other does not belong to the same class js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_ifs()[0] find_conditions()[0]\nnode is_equivalent(\"type(self) = type(other)\") or node is_equivalent(\"type(other) = type(self)\")\n`))\n})\nYou should return NotImplemented from within the if body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2509,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9cb678070ca1668898c70.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ff01908ffbc3c972ba32e6bc57bedd39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9cb678070ca1668898c70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return NotImplemented from within the if body js ({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class____name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2509,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9cb678070ca1668898c70.md",
      "source_type": "git_repo"
    },
    "token_count": 327,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "abfd06dfc6f7329247ad16c0d0574194",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dd6e5a08af19c196c2df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f9dd6e5a08af19c196c2df\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nThe vector resulting from the subtraction of one vector from another is obtained by calculating the difference of each of their components For example, subtracting (2, 4) from (7, 3) generates a third vector (5, -1), where 5 is the difference between 7 and 2 and -1 is the difference between 3 and 4 As you did before inside the __add__ method, declare a kwargs variable after the if statement Assign it a dictionary comprehension that iterates through the object attributes and creates a key-value pair for each key i, where the key is the same key as the current iteration and its value is the difference between the values of the i attributes of two operands --hints--\nYou should declare a variable kwargs and assign it a dictionary comprehension that iterates over the object attributes js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_iters()[0]\nnode is_equivalent(\"vars(self)\") or node is_equivalent(\"self __dict__\")`)) })\nThe dictionary comprehension assigned to kwargs should use the variable i to iterate over the object attributes js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_targets()[0] is_equivalent(\"i\")\n`))\n})\nThe dictionary comprehension assigned to kwargs should use i as the key js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_key() is_equivalent(\"i\")`)) })\nThe dictionary comprehension assigned to kwargs should assign the difference between the i attribute of self and the i attribute of other to the i key for each i js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_expr()\nnode is_equivalent(\"getattr(self, i) - getattr(other, i)\") or node is_equivalent(\"self __getattribute__(i) - other",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dd6e5a08af19c196c2df.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b821f501a8325373ab6686eb6f2b84c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dd6e5a08af19c196c2df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "comprehension assigned to kwargs should use i as the key js ({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_key() is_equivalent(\"i\")`)) }) The dictionary comprehension assigned to kwargs should assign the difference between the i attribute of self and the i attribute of other to the i key for each i js ({ test: () => assert(runPython(` node = _Node(_code) find_class(\"R2Vector\") find_function(\"__sub__\") find_variable(\"kwargs\") find_comp_expr() node is_equivalent(\"getattr(self, i) - getattr(other, i)\") or node is_equivalent(\"self __getattribute__(i) - other__getattribute__(i)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\ndef sub(self, other):\nif type(self) = type(other):\nreturn NotImplemented\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65f9dd6e5a08af19c196c2df.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c8f47c4666a658cd95b70564612386ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa8df56a0e2c149b4d24fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fa8df56a0e2c149b4d24fe\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nNext, check the new vector by printing the following f-string f'v1 + v2 = {v3}'.\n--hints--\nYou should print f'v1 + v2 = {v3}'.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(f'v1 + v2 = {v3}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\ndef __add__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\ndef __sub__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0.5, y=1.25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa8df56a0e2c149b4d24fe.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a01c397d664e2e86ae7f1256b92ac98c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa8d5cf0ef3b141010f5d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fa8d5cf0ef3b141010f5d8\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nIt's time to verify that the addition and subtraction operations work as expected. Declare another variable v3 and assign it the sum of v1 plus v2.\n--hints--\nYou should declare a variable v3 and assign it the sum of v1 and v2.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).has_stmt(\"v3 = v1 + v2\") or _Node(_code).has_stmt(\"v3 = v2 + v1\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\ndef __add__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\ndef __sub__(self, other):\nif type(self) != type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self.__class__(**kwargs)\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0.5, y=1.25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa8d5cf0ef3b141010f5d8.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e022b82cbe5e55265f370da45b379e0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9402d1fb5516aa42159d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fa9402d1fb5516aa42159d\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nFeel free to modify v3 so that it sums an R2Vector instance with an object of a different type, such as an integer or a string You will be able to see a TypeError message printed on the console Then, restore the original line and create a new variable v4 Assign the difference between v1 and v2 to your new variable and print the result following the same structure as the previous f-string --hints--\nYou should declare a variable v4 and assign it the difference between v1 and v2 js\n({\ntest: () => assert(runPython(`\n_Node(_code) has_stmt(\"v4 = v1 - v2\")\n`))\n})\nYou should print f'v1 - v2 = {v4}' js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(f'v1 - v2 = {v4}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2089,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9402d1fb5516aa42159d.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "65edb5b8f67d7272e73f1e488822b59d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9402d1fb5516aa42159d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) selfz = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2089,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9402d1fb5516aa42159d.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "35ac99177efc5252ad11005eccd45654",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9e1b6c6db919385359ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fa9e1b6c6db919385359ec\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nThe special method __mul__ can be implemented to specify what should happen when the current instance is multiplied by another object Create an empty __mul__ method within the R2Vector class and give it two parameters: self, and other --hints--\nYou should define a __mul__ method within the R2Vector class js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") has_function(\"__mul__\")\n`))\n})\nYour __mul__ method should have two parameters, self and other js\n({\ntest: () => assert(runPython(`\n_Node(_code) find_class(\"R2Vector\") find_function(\"__mul__\") has_args(\"self, other\")\n`))\n})\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2057,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9e1b6c6db919385359ec.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "112a52ef98c9173b46b1e194e5c7ed58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9e1b6c6db919385359ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) --fcc-editable-region-- --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2057,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fa9e1b6c6db919385359ec.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6a30cb53b5197627a3c50e69284613c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc87e19930a503e5f05500.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fc87e19930a503e5f05500\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nA vector can be multiplied by another vector, too This operation is called dot product, or scalar product Create an elif clause that checks if other is an object of the same class of the current instance You are going to implement the dot product inside this block during the next step --hints--\nYou should create an elif clause that checks if other is an object of the same class of the current instance js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__mul__\") find_ifs()[0] find_conditions()[1]\nnode is_equivalent(\"type(self) == type(other)\") or node is_equivalent(\"type(other) == type(self)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\ndef mul(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self class(*kwargs)\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, , x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc87e19930a503e5f05500.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "241974c0cdc423991fb463173b6eb6de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc87e19930a503e5f05500.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) --fcc-editable-region-- def mul(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self class(*kwargs) --fcc-editable-region-- class R3Vector(R2Vector): def init(self, , x, y, z): super() init(x=x, y=y) selfz = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc87e19930a503e5f05500.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "72aaf70c25488697f852a9ef0b567f1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65faaed8f7a9772f023ea816.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65faaed8f7a9772f023ea816\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nVectors can be multiplied by a scalar, i e a number that multiplies each single component The result of scalar multiplication is a vector with the same orientation as the original vector but a different magnitude Implement the scalar multiplication by checking if other is either an int or a float If it is, return a new instance of the current class that has each component of the starting vector multiplied by other This will be the vector resulting from the scalar multiplication Make sure the methods can be applied to compute the scalar multiplication of vectors with any number of dimensions --hints--\nYour method should return a new instance of the current class only when the type of other is either int or float js\n({ test: () => runPython(`\nv1 = R2Vector(x=0, y=0)\nv2 = R3Vector(x=0, y=0, z=0)\ntypes = [\"\", True, [], {}]\nassert all((v1 * i) is None for i in types)\ntypes = [1, 1 0]\nassert all(type(v1 * i) is type(v1) for i in types)\nassert all(type(v2 * i) is type(v2) for i in types)\n`) })\nThe vector resulting from the scalar multiplication should have each component of the starting vector multiplied by the scalar js\n({ test: () => runPython(`\nv1 = R2Vector(x=1, y=1 5)\nv2 = R3Vector(x=2 2, y=3, z=-1)\nassert vars(v1 * 3) == vars(R2Vector(x=3, y=4 5))\nassert vars(v2 * (-2 0)) == vars(R3Vector(x=-4 4, y=-6 0, z=2 0))\n`) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65faaed8f7a9772f023ea816.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6af456ad704701bc9779b0312ddec72a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65faaed8f7a9772f023ea816.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "each component of the starting vector multiplied by the scalar js ({ test: () => runPython(` v1 = R2Vector(x=1, y=1 5) v2 = R3Vector(x=2 2, y=3, z=-1) assert vars(v1 * 3) == vars(R2Vector(x=3, y=4 5)) assert vars(v2 * (-2 0)) == vars(R3Vector(x=-4 4, y=-6 0, z=2 0)) `) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**05\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\ndef mul(self, other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65faaed8f7a9772f023ea816.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e817dc2d41d3ab34a08081325e45ea02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8e7c766ab1070213aadb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fc8e7c766ab1070213aadb\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nIn case other is not an integer, a floating point number, or another instance of the current class, no product can be computed After the elif clause, return NotImplemented --hints--\nYou should return NotImplemented after the elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__mul__\") has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\ndef mul(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self class(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8e7c766ab1070213aadb.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6d3330c20a20da669a6b2786130d3397",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8e7c766ab1070213aadb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) --fcc-editable-region-- def mul(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self class(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8e7c766ab1070213aadb.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e6f234d66db447509ae63cc4eb34015e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc899d77495504d6deeccc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fc899d77495504d6deeccc\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nThe scalar product between two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is indicated as:\n\\( \\mathbf{a} \\cdot \\mathbf{b} = a_1 \\cdot b_1 + a_2 \\cdot b_2 + \\ldots + a_n \\cdot b_n = \\sum_{i=1}^{n} a_i \\cdot b_i \\)\nWhere each component of $\\mathbf{a}$ is multiplied by the correspondent component of $\\mathbf{b}$, and all the products are summed together, resulting in a number Within the elif clause, implement the above formula to compute the result of a scalar product and return the result Remember that your implementation must be valid for any vector, independently from the number of components, when the method is inherited --hints--\nYou should implement the scalar product calculation and return the result inside the elif body of your __mul__ method js\n({ test: () => assert(runPython(`\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nv3 = R3Vector(x=2, y=3, z=1 5)\nv4 = R3Vector(x=0 5, y=1 25, z=1 5)\nv1*v2 == 4 75 and v3*v4 == 7 0\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc899d77495504d6deeccc.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "709377346e4ba7d0f5181048df4371cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc899d77495504d6deeccc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\ndef mul(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self class(**kwargs)\nelif type(self) == type(other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc899d77495504d6deeccc.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ee36b34a152c65d7b4c710d345a2f7f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8fa7e7860407ab479bf0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fc8fa7e7860407ab479bf0\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nIt's time to test the multiplication Declare a new variable v5 and assign it the scalar multiplication v1 * 3 Then, call the print function and pass it the following f-string: f'v1 * 3 = {v5}' --hints--\nYou should declare a new variable v5 and assign it the scalar multiplication v1 * 3 js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v5\") is_equivalent(\"v5 = v1 * 3\")`)) })\nYou should print the f-string f'v1 * 3 = {v5}' js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(f'v1 * 3 = {v5}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8fa7e7860407ab479bf0.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "70df734cf901269ecc716750e2492c39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8fa7e7860407ab479bf0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self__class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fc8fa7e7860407ab479bf0.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "de557aa635fea7085300d49d55c96592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd681b20b7e45f55def415.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd681b20b7e45f55def415\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nThe scalar multiplication works fine Now, modify the assignment of v5 to be the dot product v1 * v2 Also, update the print call Before doing that, feel free to experiment and multiply v1 by an object of invalid type to see the error message printed on the console --hints--\nYou should update the assignment of v5 assigning it the scalar product v1 * v2 js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v5\") is_equivalent(\"v5 = v1 * v2\")`)) })\nYou should update your print call to print the f-string f'v1 * v2 = {v5}' js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(f'v1 * v2 = {v5}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2464,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd681b20b7e45f55def415.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c5aaa3887f837b65bcf0cec6f8aaf3b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd681b20b7e45f55def415.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self__class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * 3\nprint(f'v1 * 3 = {v5}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2464,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd681b20b7e45f55def415.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a89b7503873fbbb9c3e00117680de60e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9250db0d6b8198cf29ef.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd9250db0d6b8198cf29ef\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nThe __eq__ method can be implemented to specify what should happen in case the comparison operator (==) is used to compare an object with something else Within the R2Vector class, create an __eq__ method and give it two parameters: self and other --hints--\nYou should define a __eq__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__eq__\")`)) })\nYour __eq__ method should take two parameters: self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__eq__\") has_args(\"self, other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2455,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9250db0d6b8198cf29ef.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0c08f7cdcb4e18211a004907d5a1818c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9250db0d6b8198cf29ef.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self__class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2455,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9250db0d6b8198cf29ef.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b84f32126a4bf13eaf855f8b4e9dabd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd97f3c1b4c4839bdeb8d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd97f3c1b4c4839bdeb8d2\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nTo compare two vectors, you are going to check that each component of the first vector is equal to the same component of the second vector After the if statement you created in the previous step, return True if each attribute of the current instance is equal to the same attribute of other and False otherwise --hints--\nThe __eq__ method should return True if each attribute of the current instance is equal to the same attribute of other and False otherwise js\n({ test: () => assert(runPython(`\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=2, y=3)\nv3 = R2Vector(x=0 5, y=1 25)\nv4 = R3Vector(x=2, y=3, z=1 5)\nv5 = R3Vector(x=2, y=3, z=1 5)\nv6 = R3Vector(x=0 5, y=1 25, z=1 5)\nv1 == v2 and not v1 == v3 and v4 == v5 and not v5 == v6\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd97f3c1b4c4839bdeb8d2.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f7d28233237c9ef7bcf1af374eb444e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd97f3c1b4c4839bdeb8d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\n--fcc-editable-region--\ndef eq(self, other):\nif type(self) = type(other):\nreturn NotImplemented\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd97f3c1b4c4839bdeb8d2.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4cfd04af3618c0ae6a4cf21c4ff7fc0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd95c23beef982af29004c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd95c23beef982af29004c\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nYou want to compare two vectors, only when they belong to the same class For that create an if statement that checks if self and other do not belong to the same class and return NotImplemented in that case --hints--\nYou should create an if statement that checks if self and other do not belong to the same class js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__eq__\") find_ifs()[0] find_conditions()[0]\nconditions = [\"type(self) = type(other)\", \"type(other) = type(self)\", \"self __class__ = other __class__\", \"other __class__ = self __class__\"]\nany(node is_equivalent(condition) for condition in conditions)`)) })\nYou should return NotImplemented from your if body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__eq__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd95c23beef982af29004c.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "290e8accd389e976812e2839461edc45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd95c23beef982af29004c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\n--fcc-editable-region--\ndef eq(self, other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd95c23beef982af29004c.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ea40345a8e7dfa40db4cfa22363cec27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9c6e49d7cd8513ab1005.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd9c6e49d7cd8513ab1005\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nAt the end of your code, use the equality operator to compare v1 and R2Vector(x=2, y=3) and print the result --hints--\nYou should print the result of comparing v1 and R2Vector(x=2, y=3) using the equality operator js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(v1 == R2Vector(x=2, y=3))\") or _Node(_code) has_call(\"print(R2Vector(x=2, y=3) == v1)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9c6e49d7cd8513ab1005.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9359e99a7f1cba33730be1954a2f9628",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9c6e49d7cd8513ab1005.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9c6e49d7cd8513ab1005.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "45800a9197b257b90b9680603ee9fb0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd9aa649f6cc84631882a9\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nThe __ne__ method is called under the hood when the = operator is used Define a __ne__ method with two parameters self and other From your new method, return the opposite of self == other --hints--\nYou should define a __ne__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__ne__\")`)) })\nYour __ne__ method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__ne__\") has_args(\"self, other\")`)) })\nThe __ne__ method should return False if each attribute of the current instance is equal to the same attribute of other and True otherwise js\n({ test: () => assert(runPython(`\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=2, y=3)\nv3 = R2Vector(x=0 5, y=1 25)\nv4 = R3Vector(x=2, y=3, z=1 5)\nv5 = R3Vector(x=2, y=3, z=1 5)\nv6 = R3Vector(x=0 5, y=1 25, z=1 5)\nnot v1 = v2 and v1 = v3 and not v4 = v5 and v5 = v6\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3003,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9ea4713e00473ef88cbc6efe72afb372",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "v1 = v3 and not v4 = v5 and v5 = v6 `)) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self)= type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\n--fcc-editable-region--\ndef eq(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3003,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "16ed332f5feba704d3edeca371185e56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented --fcc-editable-region-- def eq(self, other): if type(self) = type(other): return NotImplemented return all(getattr(self, i) == getattr(other, i) for i in vars(self)) --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3003,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9aa649f6cc84631882a9.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "81ad9eef75d83bbd6a7dfcb9bfaab65e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9d6203afea85931094c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd9d6203afea85931094c9\ntitle: Step 63\nchallengeType: 20\ndashedName: step-63\n--description--\nThe comparison returns True, since the two vectors have the same components Now, modify the argument of the print call you added in the previous step to use the inequality operator --hints--\nYou should modify the print call you added in the previous step using the inequality operator to compare v1 and R2Vector(x=2, y=3) js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(v1 = R2Vector(x=2, y=3))\") or _Node(_code) has_call(\"print(R2Vector(x=2, y=3) = v1)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9d6203afea85931094c9.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "19cf8976b0117a2ba70075f38133ee5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9d6203afea85931094c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 == R2Vector(x=2, y=3))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9d6203afea85931094c9.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "56e1a238355a4f3af2ffd40829a03929",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc3c8478ee70fc7966151.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fdc3c8478ee70fc7966151\ntitle: Step 65\nchallengeType: 20\ndashedName: step-65\n--description--\nIn the same way you did before for the __eq__ method, create an if statement that checks if self and other do not belong to the same class and return NotImplemented --hints--\nYou should create an if statement that checks if self and other do not belong to the same class js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__lt__\") find_ifs()[0] find_conditions()[0]\nconditions = [\"type(self) = type(other)\", \"type(other) = type(self)\", \"self __class__ = other __class__\", \"other __class__ = self __class__\"]\nany(node is_equivalent(condition) for condition in conditions)\n`)) })\nYou should return NotImplemented from your if body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__lt__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc3c8478ee70fc7966151.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2b3cea053ad6109bbfd97f7e1c859d23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc3c8478ee70fc7966151.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\n--fcc-editable-region--\ndef lt(self, other):\npass\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc3c8478ee70fc7966151.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f42b21f048826eb5b959bc4f6252ebac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9e2c56ff19862dfb8cbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd9e2c56ff19862dfb8cbb\ntitle: Step 64\nchallengeType: 20\ndashedName: step-64\n--description--\nThe __lt__ method is called under the hood when the < operator is used to compare an object with something else Add an empty __lt__ method and give it two parameters: self, other --hints--\nYou should define a __lt__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__lt__\")`)) })\nYour __lt__ method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__lt__\") has_args(\"self, other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9e2c56ff19862dfb8cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "33d5a6553d783c1172a9c4db9c595d53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9e2c56ff19862dfb8cbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fd9e2c56ff19862dfb8cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "00383496b98013f5863629d01ab21172",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc496f4440e1055a2ac1b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fdc496f4440e1055a2ac1b\ntitle: Step 66\nchallengeType: 20\ndashedName: step-66\n--description--\nAfter the if statement, return the result of comparing the norm of the current instance with the norm of other using the less than operator --hints--\nThe __lt__ method should return the result of comparing the norm of the current instance with the norm of other using the < operator js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__lt__\") has_return(\"self norm() < other norm()\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc496f4440e1055a2ac1b.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "16ad4d0b56321a6808c09c047a7dfe6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc496f4440e1055a2ac1b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\n--fcc-editable-region--\ndef lt(self, other):\nif type(self) = type(other):\nreturn NotImplemented\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\65fdc496f4440e1055a2ac1b.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cacd0b152a1b6cd6ff275247e6cbf1de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66019258a7c71d4ae50da42e\ntitle: Step 68\nchallengeType: 20\ndashedName: step-68\n--description--\nThere are still two possible comparisons to implement The __le__ method is called when the <= operator is used to compare two objects Define a __le__ method with self and other as the parameters and make it return the opposite of self > other --hints--\nYou should define a __le__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__le__\")`)) })\nYour __le__ method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__le__\") has_args(\"self, other\")`)) })\nYour __le__ method should return the opposite of self > other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__le__\") has_return(\"not self > other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a8a4e1e3ae2a74971f08000533a87ed0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\n--fcc-editable-region--\ndef lt(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e14f67581104ba4c2392ddbd89cbae16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return NotImplemented return all(getattr(self, i) == getattr(other, i) for i in vars(self)) def __ne__(self, other): return not self == other --fcc-editable-region-- def lt(self, other): if type(self) = type(other): return NotImplemented return self norm() < other norm() def __gt__(self, other): if type(self) = type(other): return NotImplemented return self norm() > other norm() --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019258a7c71d4ae50da42e.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d52b843bd487f5793017c11bdb88a905",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601918b44a11b4a8c986c6a\ntitle: Step 67\nchallengeType: 20\ndashedName: step-67\n--description--\nThe __gt__ method is called under the hood when the > operator is used to compare an object with something else After the __lt__ method, in the same way you did for __lt__, implement the __gt__ method Pay attention to use the appropriate operator --hints--\nYou should define a __gt__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__gt__\")`)) })\nYour __lt__ method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") has_args(\"self, other\")`)) })\nYou should create an if statement that checks if self and other do not belong to the same class js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") find_ifs()[0] find_conditions()[0]\nnode is_equivalent(\"type(self) = type(other)\") or node is_equivalent(\"type(other) = type(self)\")`)) })\nYou should return NotImplemented from your if body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) })\nThe __gt__ method should return the result of comparing the norm of the current instance with the norm of other using the greater than operator js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") has_return(\"self norm() > other norm()\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3762,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a37dbc693bc9a678e5b89f706b31a20b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) }) The __gt__ method should return the result of comparing the norm of the current instance with the norm of other using the greater than operator js ({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__gt__\") has_return(\"self norm() > other norm()\")`)) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**05\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\n--fcc-editable-region--\ndef lt(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3762,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b7c3539817f67849f110dc1a4ad2428e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self) = type(other): return NotImplemented return all(getattr(self, i) == getattr(other, i) for i in vars(self)) def __ne__(self, other): return not self == other --fcc-editable-region-- def lt(self, other): if type(self) = type(other): return NotImplemented return self norm() < othernorm()\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3762,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601918b44a11b4a8c986c6a.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f3606b031fb46d3c0652dfa912048904",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66019319edb1cb4b57d3a793\ntitle: Step 69\nchallengeType: 20\ndashedName: step-69\n--description--\nThe last method you need is __ge__, which is called when the >= is used to compare two objects Define a __ge__ method with self and other as the parameters and make it return the opposite of self < other --hints--\nYou should define a __ge__ method within the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__ge__\")`)) })\nYour __ge__ method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__ge__\") has_args(\"self, other\")`)) })\nYour __ge__ method should return the opposite of self < other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__ge__\") has_return(\"not self < other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8c9c8cdfc43fb7b587822cbcbc7404e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c86a30e9381adec075459619b46c4ef5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for i in vars(self)) def __ne__(self, other): return not self == other def __lt__(self, other): if type(self) = type(other): return NotImplemented return self norm() < other norm() def __gt__(self, other): if type(self) = type(other): return NotImplemented return self norm() > other norm() def __le__(self, other): return not self > other --fcc-editable-region-- --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019319edb1cb4b57d3a793.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "347e6933db7de346d0a0bf0d1880acdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\660193a2a71faa4bd8f10970.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660193a2a71faa4bd8f10970\ntitle: Step 70\nchallengeType: 20\ndashedName: step-70\n--description--\nFeel free to play around with the new comparison operations you implemented Then, remove your last print call --hints--\nYou should not have print(v1 = R2Vector(x=2, y=3)) in your code js\n({test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(v1 = R2Vector(x=2, y=3))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\660193a2a71faa4bd8f10970.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "626f5d165bc4f7039296a010a6afad06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\660193a2a71faa4bd8f10970.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self) = type(other): return NotImplemented return all(getattr(self, i) == getattr(other, i) for i in vars(self)) def __ne__(self, other): return not self == other def __lt__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nprint(v1 = R2Vector(x=2, y=3))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\660193a2a71faa4bd8f10970.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "66e4187bc5f1cec0975f3593412e73ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a88a6e2ccc550d7d7208.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601a88a6e2ccc550d7d7208\ntitle: Step 73\nchallengeType: 20\ndashedName: step-73\n--description--\nAfter the if statement, declare a variable kwargs and assign it an empty dictionary --hints--\nYou should declare a variable kwargs and assign it an empty dictionary after the if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"cross\") find_variable(\"kwargs\") is_equivalent(\"kwargs = {}\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2931,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a88a6e2ccc550d7d7208.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b65aa8b9837954dedc7f7f370bd83eaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a88a6e2ccc550d7d7208.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self) = type(other): return NotImplemented return all(getattr(self, i) == getattr(other, i) for i in vars(self)) def __ne__(self, other): return not self == other def __lt__(self, other): if type(self) = type(other): return NotImplemented return selfnorm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self) = type(other):\nreturn NotImplemented\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2931,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a88a6e2ccc550d7d7208.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f9931823456082a241f910653198fde8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601a7eb860fb8546516674d\ntitle: Step 72\nchallengeType: 20\ndashedName: step-72\n--description--\nCreate an if statement that checks if self and other do not belong to the same class and return NotImplemented --hints--\nYou should create an if statement that checks if self and other do not belong to the same class js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"R3Vector\") find_function(\"cross\") find_ifs()[0] find_conditions()[0]\nconditions = [\"type(self) = type(other)\", \"type(other) = type(self)\", \"self __class__ = other __class__\", \"other __class__ = self __class__\"]\nany(node is_equivalent(condition) for condition in conditions)\n`)) })\nYou should return NotImplemented from your if body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"cross\") find_ifs()[0] find_bodies()[0] has_return(\"NotImplemented\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "671cbbca79e8a9945abce4b63ece9506",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self__class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\npass\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "feb6108ad8f6f7578e645dc072b77ef2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __lt__(self, other): if type(self) = type(other): return NotImplemented return self norm() < other norm() def __gt__(self, other): if type(self) = type(other): return NotImplemented return self norm() > other norm() def __le__(self, other): return not self > other def __ge__(self, other): return not self < other --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): pass --fcc-editable-region-- v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a7eb860fb8546516674d.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fe333b99878bb0d5f117dae7ae77ac2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66019977710caa516276c0a8\ntitle: Step 71\nchallengeType: 20\ndashedName: step-71\n--description--\nThe cross product, or vector product, is defined between 3-dimensional vectors and results in a third vector perpendicular to both of them The R3Vector class inherits from R2Vector, meaning it has access to all the methods and properties defined in R2Vector A child class can implement additional features You already saw a way to change the implementation of a method Now, you are going to give the child class R3Vector a new method instead Within the R3Vector class, define a cross method and give it two parameters: self, and other --hints--\nYou should define a cross method within the R3Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R3Vector\") has_function(\"cross\")`)) })\nYour cross method should have two parameters, self and other js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R3Vector\") find_function(\"cross\") has_args(\"self, other\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ba027387067af3ed94a5dbad4bbbf41a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3a616b2b14a063776a9d20c1eb0abea3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "not self == other def __lt__(self, other): if type(self) = type(other): return NotImplemented return self norm() < other norm() def __gt__(self, other): if type(self) = type(other): return NotImplemented return self norm() > other norm() def __le__(self, other): return not self > other def __ge__(self, other): return not self < other --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z --fcc-editable-region-- v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66019977710caa516276c0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d3b9a852a36f747b95a450a6ef4c7790",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601a8fb2e993b55912f9e9f\ntitle: Step 74\nchallengeType: 20\ndashedName: step-74\n--description--\nThe cross product between two 3D vectors \\( \\mathbf{a} \\) and \\( \\mathbf{b} \\) can be computed as it follows:\n\\[ \\mathbf{a} \\times \\mathbf{b} = \\begin{pmatrix} a_yb_z - a_zb_y \\\\ a_zb_x - a_xb_z \\\\ a_xb_y - a_yb_x \\end{pmatrix}\n\\]\nWhere the resulting vector is represented as a column vector Implement the formula above to compute the cross product between two 3-dimensional vectors and return the resulting vector from the cross() method --hints--\nThe cross() method should return a new R3Vector instance resulting from the cross product computation js\n({ test: () => assert(runPython(`\nv1 = R3Vector(x=2, y=3, z=1)\nv2 = R3Vector(x=0 5, y=1 25, z=2)\nv1 cross(v2) == R3Vector(x=4 75, y=-3 5, z=1 0) and v2 cross(v1) == R3Vector(x=-4 75, y=3 5, z=-1 0) and v1 cross(v1) == R3Vector(x=0, y=0, z=0)\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "96fb9acaae744a5e769c32c92de89985",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "96339e86323d1015f048d9479faa2cae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "vars(self)) def __ne__(self, other): return not self == other def __lt__(self, other): if type(self) = type(other): return NotImplemented return self norm() < other norm() def __gt__(self, other): if type(self) = type(other): return NotImplemented return self norm() > other norm() def __le__(self, other): return not self > other def __ge__(self, other): return not self < other --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): if type(self)= type(other):\nreturn NotImplemented\nkwargs = {}\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1 25)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601a8fb2e993b55912f9e9f.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "03431c7935bf9fe4dc35369438a7e773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6659875502b6d7765498f324.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6659875502b6d7765498f324\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nUse f-strings to modify your print calls so that they result in the output v1 = (2, 3) and v2 = (2, 2, 3), respectively.\n--hints--\nYou should use an f-string to interpolate v1 and generate the output v1 = (2, 3).\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(f'v1 = {v1}')\")`)) })\nYou should use an f-string to interpolate v2 and generate the output v2 = (2, 2, 3).\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(f'v2 = {v2}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in self.__dict__.values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.norm())\nprint(v2.norm())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1177,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6659875502b6d7765498f324.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a8b42f4d005ea3d6076457b26a3fea4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66680ddfd0f8c76782923cb0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66680ddfd0f8c76782923cb0\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nThe norm() method is returning the correct values, but there's still something you can improve: readability.\nThe vars() built-in function takes an object as its argument and returns the __dict__ attribute of that object.\nInstead of directly accessing the __dict__ attribute of self, modify the norm method to use the vars() function.\n--hints--\nYou should modify your norm method to use vars(self) instead of self.__dict__.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"R2Vector\").find_function(\"norm\").has_return(\"sum(val**2 for val in vars(self).values())**0.5\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, , x, y):\nself.x = x\nself.y = y\n--fcc-editable-region--\ndef norm(self):\nreturn sum(val2 for val in self.dict.values())*0.5\n--fcc-editable-region--\ndef str(self):\nreturn f'{self.x, self.y}'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(v1.norm())\nprint(v2.norm())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66680ddfd0f8c76782923cb0.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "795de0b3da314d314140735aebe824ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601ac48a2ee6b59e6a5060d\ntitle: Step 76\nchallengeType: 20\ndashedName: step-76\n--description--\nCall cross() on v1 and pass v2 as the argument Assign this call to a new variable v6 --hints--\nYou should declare a variable named v6 and assign it a call to the cross() method on v1 passing it v2 as the argument js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v6\") is_equivalent(\"v6 = v1 cross(v2)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b4003a0cfc382b418ea6a8cef2808996",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {\n'x': self y * other z - self z * other y,\n'y': self z * other x - self x * other z,\n'z': self x * other y - self y * other x\n}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\nv1 = R3Vector(x=2, y=3, z=1)\nv2 = R3Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "76afb188de5bfcd965be587431f0fd55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): if type(self) = type(other): return NotImplemented kwargs = { 'x': self y * other z - self z * other y, 'y': self z * other x - self x * other z, 'z': self x * other y - self y * other x } return self __class__(**kwargs) --fcc-editable-region-- v1 = R3Vector(x=2, y=3, z=1) v2 = R3Vector(x=0 5, y=125, z=2)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ac48a2ee6b59e6a5060d.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "48481e719714d3976133acd748cac359",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601ab2809898f57591f2f7f\ntitle: Step 75\nchallengeType: 20\ndashedName: step-75\n--description--\nNow, modify the assignments of v1 and v2 Turn them into R3Vector instances and pass z=1 and z=2 to v1 and v2, respectively --hints--\nYou should modify the assignment of v1 to be an R3Vector instance js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v1\") is_equivalent(\"v1 = R3Vector(x=2, y=3, z=1)\")`)) })\nYou should modify the assignment of v2 to be an R3Vector instance js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"v2\") is_equivalent(\"v2 = R3Vector(x=0 5, y=1 25, z=2)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5112ebdf42e7ffcf99b0b5b14f3735d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self__class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {\n'x': self y * other z - self z * other y,\n'y': self z * other x - self x * other z,\n'z': self x * other y - self y * other x\n}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\nv1 = R2Vector(x=2, y=3)\nv2 = R2Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1dd4daa97ea2be2a7157cab2c0ab9b0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): if type(self) = type(other): return NotImplemented kwargs = { 'x': self y * other z - self z * other y, 'y': self z * other x - self x * other z, 'z': self x * other y - self y * other x } return self __class__(**kwargs) --fcc-editable-region-- v1 = R2Vector(x=2, y=3) v2 = R2Vector(x=0 5, y=125)\n--fcc-editable-region--\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ab2809898f57591f2f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d40a03148ffa3f8dc7f3bf37ba293688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666826f258fda1ab3396a509.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666826f258fda1ab3396a509\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nNow, print the result of accessing the x attribute of v1 both with the dot operator and the getattr() built-in function.\nYou will see that __getattribute__ is called in both cases.\n--hints--\nYou should print the x attribute of v1 using both the dot operator and the getattr() function.\njs\n({ test: () => assert(runPython(`\nn = _Node(_code)\n(n.has_call(\"print(v1.x)\") and n.has_call(\"print(getattr(v1, 'x'))\")) or n.has_call(\"print(v1.x, getattr(v1, 'x'))\") or n.has_call(\"print(getattr(v1, 'x'), v1.x)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself.x = x\nself.y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self).values())**0.5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self).items()]\nargs = ', '.join(arg_list)\nreturn f'{self.__class__.__name__}({args})'\ndef __getattribute__(self, attr):\nreturn 'calling __getattribute__'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper().init(x=x, y=y)\nself.z = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666826f258fda1ab3396a509.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de46af6b129e78e851444f1dd5eb2fdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66682150151af29efec9727d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66682150151af29efec9727d\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nThe __getattribute__ method is called under the hood any time you try to access an instance attribute If the attribute is not found at the instance level, the method will search for it at the class level, and eventually in parent classes Inside your class, define a __getattribute__ method with two parameters, self and attr, and make it return the string 'calling __getattribute__' You'll override momentarily the default implementation just to see how the attribute access works --hints--\nYou should define a method named __getattribute__ with two parameters, self and attr, inside the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__getattribute__\") has_args(\"self, attr\")`)) })\nYour __getattribute__ method should return the string 'calling __getattribute__' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__getattribute__\") has_return(\"'calling __getattribute__'\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\n--fcc-editable-region--\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1935,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66682150151af29efec9727d.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8a0dbf1533f4b54941e2a40de8d35bfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66682150151af29efec9727d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_class(\"R2Vector\") find_function(\"__getattribute__\") has_return(\"'calling __getattribute__'\")`)) }) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' --fcc-editable-region-- --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) selfz = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1935,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\66682150151af29efec9727d.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b8300e0050104b778d7a44c0a1616f4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6601ad0fe415985a5c83f3cc\ntitle: Step 77\nchallengeType: 20\ndashedName: step-77\n--description--\nAs a final step, call the print function and pass it the f-string f'v1 x v2 = {v6}' to see the output of the cross product With that, you have completed the vector space project Well done --hints--\nYou should print f'v1 x v2 = {v6}' js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(f'v1 x v2 = {v6}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "dd2422fdabbafa457049f469693ceada",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __mul__(self, other): if type(other) in (int, float): kwargs = {i: getattr(self, i) * other for i in vars(self)} return self __class__(**kwargs) elif type(self) == type(other): args = [getattr(self, i) * getattr(other, i) for i in vars(self)] return sum(args) return NotImplemented def __eq__(self, other): if type(self)= type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {\n'x': self y * other z - self z * other y,\n'y': self z * other x - self x * other z,\n'z': self x * other y - self y * other x\n}\nreturn self __class__(**kwargs)\n--fcc-editable-region--\nv1 = R3Vector(x=2, y=3, z=1)\nv2 = R3Vector(x=0 5, y=1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "2c28695c91245f59184d1744ecd0ea8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): if type(self) = type(other): return NotImplemented kwargs = { 'x': self y * other z - self z * other y, 'y': self z * other x - self x * other z, 'z': self x * other y - self y * other x } return self __class__(**kwargs) --fcc-editable-region-- v1 = R3Vector(x=2, y=3, z=1) v2 = R3Vector(x=0 5, y=125, z=2)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nv6 = v1 cross(v2)\n--fcc-editable-region--\n```\n--solutions--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __add__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)}\nreturn self __class__(**kwargs)\ndef __sub__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0729032a932344ce00344aa8b97e9428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __add__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) + getattr(other, i) for i in vars(self)} return self __class__(**kwargs) def __sub__(self, other): if type(self) = type(other): return NotImplemented kwargs = {i: getattr(self, i) - getattr(other, i) for i in vars(self)} return self__class__(**kwargs)\ndef __mul__(self, other):\nif type(other) in (int, float):\nkwargs = {i: getattr(self, i) * other for i in vars(self)}\nreturn self __class__(**kwargs)\nelif type(self) == type(other):\nargs = [getattr(self, i) * getattr(other, i) for i in vars(self)]\nreturn sum(args)\nreturn NotImplemented\ndef __eq__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn all(getattr(self, i) == getattr(other, i) for i in vars(self))\ndef __ne__(self, other):\nreturn not self == other\ndef __lt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() < other norm()\ndef __gt__(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nreturn self norm() > other norm()\ndef __le__(self, other):\nreturn not self > other\ndef __ge__(self, other):\nreturn not self < other\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself z = z\ndef cross(self, other):\nif type(self) = type(other):\nreturn NotImplemented\nkwargs = {\n'x': self y * other z - self z * other y,\n'y': self z * other x - self x * other z,\n'z': self x * other y - self y * other x\n}\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2ef58a64710abf114b9a88309052014c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "> other def __ge__(self, other): return not self < other class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) self z = z def cross(self, other): if type(self) = type(other): return NotImplemented kwargs = { 'x': self y * other z - self z * other y, 'y': self z * other x - self x * other z, 'z': self x * other y - self y * other x } return self__class__(**kwargs)\nv1 = R3Vector(x=2, y=3, z=1)\nv2 = R3Vector(x=0 5, y=1 25, z=2)\nprint(f'v1 = {v1}')\nprint(f'v2 = {v2}')\nv3 = v1 + v2\nprint(f'v1 + v2 = {v3}')\nv4 = v1 - v2\nprint(f'v1 - v2 = {v4}')\nv5 = v1 * v2\nprint(f'v1 * v2 = {v5}')\nv6 = v1 cross(v2)\nprint(f'v1 x v2 = {v6}')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6601ad0fe415985a5c83f3cc.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "cf560f6f51cdd46fbd44280c1cbe4198",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551ecf597038c36637f3759.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551ecf597038c36637f3759\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nVariables are an essential part of Python and any programming language. A variable is a name that references or points to an object. You can declare a variable by writing the variable name on the left side of the assignment operator = and specifying the value to assign to that variable on the right side of the assignment operator:\npy\nvariable_name = value\nCreate a variable called number and assign the value 5 to your new variable.\n--hints--\nYou should declare a variable called number. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^number\\s*=/m)\nYou should assign the value 5 to your number variable.\njs\nassert.match(code, /^number\\s*=\\s*5\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551ecf597038c36637f3759.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "38f15b6b4d395821167a9eba6177e2c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666832e427d70bc5219dc62a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666832e427d70bc5219dc62a\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nAs you can see from the output, although you defined __getattr__ in your class, this method is not called yet This happens because the default attribute access occurs through __getattribute__ Therefore, you can see the attribute value printed on the terminal Now modify the last two lines of code to access the z attribute of v1 in both your print() calls This time, you are going to access an attribute that v1 does not have As a result, __getattribute__ will raise an error and __getattr__ will be called --hints--\nYou should modify your code to print the z attribute of v1 using both the dot operator and the getattr() function js\n({ test: () => assert(runPython(`\nn = _Node(_code)\n(n has_call(\"print(v1 z)\") and n has_call(\"print(getattr(v1, 'z'))\")) or n has_call(\"print(v1 z, getattr(v1, 'z'))\") or n has_call(\"print(getattr(v1, 'z'), v1 z)\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\ndef __getattr__(self, attr):\nreturn 'calling __getattr__'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666832e427d70bc5219dc62a.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f465beb776123463774d374f8acc343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666832e427d70bc5219dc62a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}) --seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' def __getattr__(self, attr): return 'calling __getattr__' class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) selfz = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\n--fcc-editable-region--\nprint(v1 x)\nprint(getattr(v1, 'x'))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666832e427d70bc5219dc62a.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a8a128792aa07ca4c4c37c124ca17dc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551eebe6cbb2e6cadf9b468.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551eebe6cbb2e6cadf9b468\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nVariables can store values of different data types. You just assigned an integer value, but if you want to represent some text, you need to assign a string. Strings are sequences of characters enclosed by single or double quotes, but you cannot start a string with a single quote and end it with a double quote or vice versa:\npy\nstring_1 = \"I am a string\"\nstring_2 = 'I am also a string'\nstring_3 = 'This is not valid\"\nDelete your number variable and its value. Then, declare another variable called text and assign the string 'Hello World' to this variable.\n--hints--\nYou should not have number = 5 in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse(/number\\s*=\\s*5/.test(commentless_code))\nYou should declare a variable called text. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^text\\s*=/m)\nYou should assign the string 'Hello World' to your text variable. Remember to use either single or double quotes to enclose the string and pay attention to the letter case.\njs\nassert.match(code, /^text\\s*=\\s*(\"|')Hello World\\1\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nnumber = 5\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551eebe6cbb2e6cadf9b468.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79a0b26901ec8d3b0ab725ea2e3dbe16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6668374ed18b7fce10259cb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6668374ed18b7fce10259cb3\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nNow that you have an idea of how the attribute access work, remove the last two lines of your code together with the __getattr__ method Then, restore the print() calls you commented out before and delete the second argument from both of them --hints--\nYou should not have a __getattr__ method js\n({ test: () => assert isFalse(runPython(`_Node(_code) find_class(\"R2Vector\") has_function(\"__getattr__\")`)) })\nYou should not have print(v1 z)and print(getattr(v1, 'z')) in your code js\n({ test: () => assert isFalse(runPython(`\nn = _Node(_code)\nn has_call(\"print(v1 z)\") or n has_call(\"print(getattr(v1, 'z'))\")\n`)) })\nYou should restore the print() calls you commented out before and remove the second argument from both of them js\n({ test: () => assert(runPython(`\n_Node(_code) has_call(\"print(f'v1 = {v1}')\") and _Node(_code) has_call(\"print(f'v2 = {v2}')\")\n`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\n--fcc-editable-region--\ndef getattr(self, attr):\nreturn 'calling getattr'\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6668374ed18b7fce10259cb3.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b777763d1dc4e8a11a311ca99bbe0c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6668374ed18b7fce10259cb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--seed-- --seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' --fcc-editable-region-- def getattr(self, attr): return 'calling getattr' class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) selfz = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\nprint(v1 z)\nprint(getattr(v1, 'z'))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\6668374ed18b7fce10259cb3.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "10ad272125dd9a9288a112c96575af26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551ef504d91936d2d4e54f8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551ef504d91936d2d4e54f8\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nAn argument is an object or an expression passed to a function — added between the opening and closing parentheses — when it is called:\npy\ngreet = 'Hello!'\nprint(greet)\nThe code in the example above would print the string 'Hello!', which is the value of the variable greet passed to print() as the argument.\nPrint your text variable to the screen by passing the text variable as the argument to the print() function.\n--hints--\nYou should pass text to the print() function by adding the name of this variable within the opening and closing parentheses. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*text\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint()\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551ef504d91936d2d4e54f8.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7c983eb2350db153ea2d6c88f090029f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f1e8737dbe6e0cb08ea4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f1e8737dbe6e0cb08ea4\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nAnd now print your new variable.\n--hints--\nYou should not remove your existing print(type(text)) call.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/)\nYou should call the print() function passing in the shift variable. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*shift\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(type(text))\nshift = 3\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f1e8737dbe6e0cb08ea4.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3017b16b105aa900a98344b69b1c556b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f22653e6ce6e4f1d1370.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f22653e6ce6e4f1d1370\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nModify your print(shift) call to print the data type of your shift variable.\n--hints--\nYou should keep your existing print(type(text)) call.\njs\nassert.match(code, /^print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/m)\nYou should pass shift to the type() function.\njs\nassert.match(code, /type\\s*\\(\\s*shift\\s*\\)/)\nYou should pass type(shift) to your print() function. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*type\\s*\\(\\s*shift\\s*\\)\\s*\\)/m)\nYou should not have print(shift) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code)\nassert.notMatch(commentless_code, /print\\s*\\(\\s*shift\\s*\\)/)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(type(text))\nshift = 3\nprint(shift)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1093,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f22653e6ce6e4f1d1370.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bc19a46a38d2f2891507edc05e231eea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f3bfed58796ebb1268dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f3bfed58796ebb1268dc\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nEach string character can be referenced by a numerical index. The index count starts at zero. So the first character of a string has an index of 0. For example, in the string 'Hello World', 'H' is at index 0, 'e' is at index 1, and so on.\nEach character of a string can be accessed by using bracket notation. You need to write the variable name followed by square brackets and add the index of the character between the brackets:\npy\ntext = 'Hello World'\nr = text[8]\nNow, instead of printing text, print just the character at index 6.\n--hints--\nYou should still call the print() function.\njs\nassert.match(code, /print\\s*\\(.*\\)/)\nYou should pass text[6] to the print() function by including it between the parentheses. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*text\\s*\\[\\s*6\\s*\\]\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(text)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f3bfed58796ebb1268dc.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2c13cad9b5e6f335ba6bc018d91ecd8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666827a6fd0dbaafe8330ea6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666827a6fd0dbaafe8330ea6\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\n__getattr__ is another special method that plays a role in accessing attributes The default implementation of __getattribute__ is to raise an AttributeError when the requested attribute is not an instance attribute or it is not present in the class tree In that case, __getattr__ is called if defined by the class You can consider it as a sort of fallback when the usual attribute accessing procedure fails Turn the __getattribute__ method into __getattr__ and modify the string returned by the method into 'calling __getattr__' --hints--\nYou should define a method named __getattr__ with two parameters, self and attr, inside the R2Vector class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__getattr__\") has_args(\"self, attr\")`)) })\nYour __getattr__ method should return the string 'calling __getattr__' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"R2Vector\") find_function(\"__getattr__\") has_return(\"'calling __getattr__'\")`)) })\n--seed--\n--seed-contents--\n```py\nclass R2Vector:\ndef init(self, *, x, y):\nself x = x\nself y = y\ndef norm(self):\nreturn sum(val**2 for val in vars(self) values())**0 5\ndef __str__(self):\nreturn str(tuple(getattr(self, i) for i in vars(self)))\ndef __repr__(self):\narg_list = [f'{key}={val}' for key, val in vars(self) items()]\nargs = ', ' join(arg_list)\nreturn f'{self __class__ __name__}({args})'\n--fcc-editable-region--\ndef getattribute(self, attr):\nreturn 'calling getattribute'\n--fcc-editable-region--\nclass R3Vector(R2Vector):\ndef init(self, *, x, y, z):\nsuper() init(x=x, y=y)\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666827a6fd0dbaafe8330ea6.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf67023e2f6d5e001a2f9c7f59bb8a69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666827a6fd0dbaafe8330ea6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--seed-contents-- ```py class R2Vector: def init(self, *, x, y): self x = x self y = y def norm(self): return sum(val**2 for val in vars(self) values())**0 5 def __str__(self): return str(tuple(getattr(self, i) for i in vars(self))) def __repr__(self): arg_list = [f'{key}={val}' for key, val in vars(self) items()] args = ', ' join(arg_list) return f'{self __class__ __name__}({args})' --fcc-editable-region-- def getattribute(self, attr): return 'calling getattribute' --fcc-editable-region-- class R3Vector(R2Vector): def init(self, *, x, y, z): super() init(x=x, y=y) selfz = z\nv1 = R2Vector(x=2, y=3)\nv2 = R3Vector(x=2, y=2, z=3)\nprint(f'v1 = {v1}', f'\\nrepr = {repr(v1)}')\nprint(f'v2 = {v2}', f'\\nrepr = {repr(v2)}')\nprint(v1 x)\nprint(getattr(v1, 'x'))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\666827a6fd0dbaafe8330ea6.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b935c5e26e61b098727fde7ec2182ed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f4259d66026ee28cb205.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f4259d66026ee28cb205\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nYou can also access string characters starting from the end of the string. The last character has an index of -1, the second to last -2 and so on.\nNow modify your existing print() call to print the last character in your string.\n--hints--\nYou should still call the print() function.\njs\nassert.match(code, /print\\s*\\(.*\\)/)\nYou should pass text[-1] to the print() function by including it between the parentheses. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*text\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(text[6])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f4259d66026ee28cb205.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e061f44d658058de13b04d94b9a7c25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f5756c20146fc94f8675.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f5756c20146fc94f8675\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nYou can access the number of characters in a string with the built-in len() function.\nModify your existing print() call by passing len(text) instead of text[-1].\n--hints--\nYou should call the len() function.\njs\nassert.match(code, /len\\s*\\(.*\\)/)\nYou should pass the variable text to the len() function by including it between the parentheses.\njs\nassert.match(code, /len\\s*\\(\\s*text\\s*\\)/)\nYou should pass len(text) to the print() function by including it between the parentheses. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*len\\s*\\(\\s*text\\s*\\)\\s*\\)/m)\nYou should not have print(text[-1]) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code)\nassert.notMatch(commentless_code, /print\\s*\\(\\s*text\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\)/)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(text[-1])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f5756c20146fc94f8675.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "96ea84c8c9a1d35404ab7fd3e0c11142",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f6f9ec6db270eb83f3db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551f6f9ec6db270eb83f3db\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nYou can see 11 printed on the terminal because 'Hello World' contains 11 characters.\nAnother useful built-in function is type(), which returns the data type of a variable. Modify your print() call to print the data type of text.\n--hints--\nYou should call the type() function.\njs\nassert.match(code, /type\\s*\\(.*\\)/)\nYou should pass text to the type() function by including it between the parentheses.\njs\nassert.match(code, /type\\s*\\(\\s*text\\s*\\)/)\nYou should pass type(text) to the print() function by including it between the parentheses. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/m)\nYou should not have print(len(text)) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code)\nassert.notMatch(commentless_code, /print\\s*\\(\\s*len\\s*\\(\\s*text\\s*\\)\\s*\\)/)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(len(text))\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551f6f9ec6db270eb83f3db.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff71a485b2bd9f7bd0024b400b872564",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551fb531ce7f773071a0b84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551fb531ce7f773071a0b84\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nAs you can see, the output of printing type(text) is <class 'str'>, which means that your variable is a string, indicated as str.\nNow go to a new line and create another variable called shift and assign the value 3 to this variable.\n--hints--\nYou should declare a variable called shift. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^shift\\s*=/m)\nYou should assign the value 3 to your shift variable.\njs\nassert.match(code, /^shift\\s*=\\s*3\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(type(text))\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551fb531ce7f773071a0b84.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b670dfbfbb8451bc351c4fa6648c9c4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551fe3b1df7c9740f13f270.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6551fe3b1df7c9740f13f270\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nKey aspects of variable naming in Python are:\nSome words are reserved keywords (e.g. for, while, True). They have a special meaning in Python, so you cannot use them for variable names.\nVariable names cannot start with a number, and they can only contain alpha-numeric characters or underscores.\nVariable names are case sensitive, i.e. my_var is different from my_Var and MY_VAR.\nFinally, it is a common convention to write variable names using snake_case, where each space is replaced by an underscore character and the words are written in lowercase letters.\nRemove both calls to print() and declare another variable called alphabet. Assign the string 'abcdefghijklmnopqrstuvwxyz' to this variable.\n--hints--\nYou should not have print(type(text)) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/)\nYou should not have print(type(shift)) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*shift\\s*\\)\\s*\\)/)\nYou should declare a variable called alphabet. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^alphabet\\s*=/m)\nYou should assign the string 'abcdefghijklmnopqrstuvwxyz' to your alphabet variable. Remember to use either single or double quotes to enclose the string.\njs\nassert.match(code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nprint(type(text))\nshift = 3\nprint(type(shift))\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6551fe3b1df7c9740f13f270.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fbc7e25dfdbe8f87ed9518ad6a4e8ca0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655208d59b131e7816f18c96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655208d59b131e7816f18c96\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nThe print() function gives you only an output in the console, but functions and methods can have a return value that you can use in your code.\nNow assign alphabet.find(text[0]) to a variable named index. In this way, index will store the value returned by alphabet.find(text[0]).\n--hints--\nYou should declare a variable named index. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^index\\s*=/m)\nYou should assign the value returned by alphabet.find(text[0]) to your index variable.\njs\nassert.match(code, /^index\\s*=\\s*alphabet\\.find\\s*\\(\\s*text\\s*\\[\\s*\\s*0\\s*\\]\\s*\\)\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nalphabet.find(text[0])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1065,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655208d59b131e7816f18c96.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d22bd6967a40a3118f2bcc21b9f7cd42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6552008c0d9d9075cbec9772.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6552008c0d9d9075cbec9772\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nYou are going to use the .find() method to find the position in the alphabet of each letter in your message. A method is similar to a function, but it belongs to an object.\npy\nsentence = 'My brain hurts!'\nsentence.find('r')\nAbove, the .find() method is called on sentence (the string to search in), and 'r' (the character to locate) is passed as the argument. The sentence.find('r') call will return 4, which is the index of the first occurrence of 'r' in sentence.\nAt the end of your code, call .find() on alphabet and pass 'z' as the argument to the method.\n--hints--\nYou should call the .find() method.\njs\nassert.match(code, /find\\s*\\(.*\\)/)\nYou should call the .find() method on the alphabet variable.\njs\nassert.match(code, /alphabet\\.find\\s*\\(.*\\)/)\nYou should call the .find() method on the alphabet variable and pass 'z' to the method. Pay attention to place the method call at the beginning of the line.\njs\nassert.match(code, /^alphabet\\.find\\s*\\(\\s*('|\")z\\1\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6552008c0d9d9075cbec9772.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ecbf99991f81b32be29a5116cf0d536",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655209a4a27dd37873c4cac3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655209a4a27dd37873c4cac3\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\n.find() returns the index of the matching character inside the string. If the character is not found, it returns -1. As you can see, the first character in text, uppercase 'H', is not found, since alphabet contains only lowercase letters.\nYou can transform a string into its lowercase equivalent with the .lower() method. Add another print() call to print text.lower() and see the output.\n--hints--\nYou should still have print(index) in your code. Pay attention to have the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*index\\s*\\)/m)\nYou should print text.lower(). Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*text\\.lower\\s*\\(\\s*\\)\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0])\nprint(index)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655209a4a27dd37873c4cac3.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b210c4bcbd71d8ad7111c32bd0fe087",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65521203d7165c7b84b22ad4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65521203d7165c7b84b22ad4\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nA loop allows you to systematically go through a sequence of elements and execute actions on each one.\nIn this case, you'll employ a for loop. Here's how you can iterate over text:\npy\nfor i in text:\nfor is the keyword denoting the loop type. i is a variable that sequentially takes the value of the elements in text. The statement ends with a colon, :.\nBelow the line where you declared alphabet, write a for loop to iterate over text. Use i as the loop variable.\nDoing so, there is an error in the terminal. You will learn about it in the next step.\n--hints--\nYou should use the for keyword to create a loop. Make sure to place the for keyword at the beginning of the line and leave a white space after the keyword.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+/m)\nYou should write the i variable after the for keyword.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i/m)\nYou should write the in keyword after for i. Make sure to leave a space around the in keyword.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i\\s+in\\s+/m)\nYou should write text after for i in. Don't forget to add the final :.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i\\s+in\\s+text\\s*:\\s*$/m)\nYour for loop should be placed below the line of code alphabet = 'abcdefghijklmnopqrstuvwxyz'.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1\\s*^for\\s+i\\s+in\\s+text\\s*:\\s*$/m)\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65521203d7165c7b84b22ad4.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a87cba87198dc52535f29af9e411fdfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65520f8282faf57a0db4f7fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65520f8282faf57a0db4f7fe\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nAs you can see from the output, 'h' is at index 7 in the alphabet string. Now you need to find the letter at index 7 plus the value of shift. For that, you can use the addition operator, +, in the same way you would use it for a mathematical addition.\nModify your shifted variable so that it stores the value of alphabet at index index + shift.\n--hints--\nYou should assign alphabet[index + shift] to your shifted variable.\njs\nassert.match(code, /^shifted\\s*=\\s*alphabet\\s*\\[\\s*(index|shift)\\s*\\+\\s*(?!\\1)(index|shift)\\s*\\]\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0].lower())\nprint(index)\nshifted = alphabet[index]\nprint(shifted)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1042,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65520f8282faf57a0db4f7fe.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2c03030209b838b57aff2a6173a777d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65520e6f2b9678799977f24d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65520e6f2b9678799977f24d\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nRemove the last print() call. Then, instead of text[0], pass text[0].lower() as the argument to your .find() call and see the output.\n--hints--\nYou should not have print(text.lower()) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*text\\.lower\\s*\\(\\s*\\)\\s*\\)/);\nYou should still print your index variable.\njs\nassert.match(code, /^print\\s*\\(\\s*index\\s*\\)/m);\nYou should update your alphabet.find(text[0]) call to use text[0].lower() as the argument. Pay attention to place the method call at the beginning of the line.\njs\nassert.match(code, /^index\\s*=\\s*alphabet\\.find\\s*\\(\\s*text\\s*\\[\\s*\\s*0\\s*\\]\\s*\\.lower\\s*\\(\\s*\\)\\s*\\)\\s*(#.*)?$/m);\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0])\nprint(index)\nprint(text.lower())\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65520e6f2b9678799977f24d.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "924ded70ffed574be98b82c033fc9e3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65521fc818947e800bffe48a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65521fc818947e800bffe48a\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nInside the for loop, before printing the current character, declare a variable called index and assign the value returned by alphabet.find(char) to this variable.\n--hints--\nYou should declare a new variable named index at the beginning of your for loop.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\s*/);\nassert(block_body.match(/^\\s*index\\s*=/));\nYou should assign alphabet.find(char) to your new index variable.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\s*/);\nassert(block_body.match(/index\\s*=\\s*alphabet\\.find\\s*\\(\\s*char\\s*\\)\\s*(#.*)?$/m));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n--fcc-editable-region--\nfor char in text:\nprint(char)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65521fc818947e800bffe48a.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad60b184a6f40f9ff737200d1c964540",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655220953ba90d80514d7ee2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655220953ba90d80514d7ee2\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nCurrently, the print() function is taking a single argument char, but it can take multiple arguments, separated by a comma.\nAdd a second argument to print(char) so that it prints the character and its index inside the alphabet.\n--hints--\nYou should add index as the second argument to your existing print(char) call. Don't forget to separate the arguments with a comma.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\s*/);\nassert(block_body.match(/print\\s*\\(\\s*char\\s*,\\s*index\\s*\\)\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text:\nindex = alphabet.find(char)\nprint(char)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655220953ba90d80514d7ee2.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8884bd349710f1f80dd8c1cd015f73e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65522255d5b9cd80f335c6f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65522255d5b9cd80f335c6f2\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nAt the end of your loop body, declare a variable called new_index and assign the value of index + shift to this variable.\n--hints--\nYou should declare a variable called new_index inside your for loop.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/new_index\\s*=/));\nYou should assign index + shift to your new variable at the end of your for loop body.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_indentation, block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/new_index\\s*=\\s*index\\s*\\+\\s*shift\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65522255d5b9cd80f335c6f2.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c32311c4d9d5b41ecbb1cd939ef08f5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524b3aa6a1938a069a91ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65524b3aa6a1938a069a91ab\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nNext, print new_char and see the output.\n--hints--\nYou should print your new_char variable.\njs\nassert.match(code, /print\\s*\\(\\s*new_char\\s*\\)/)\nYou should print your new_char variable at the end of your loop body.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/print\\s*\\(\\s*new_char\\s*\\)\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\nnew_char = alphabet[new_index]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524b3aa6a1938a069a91ab.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4326fb19d68d61854069c15f8a95f1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6552487e689f6e895f658717.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6552487e689f6e895f658717\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nNow you need to create a new_char variable at the end of your loop body. Set its value to alphabet[new_index].\n--hints--\nYou should create a new_char variable inside your for loop.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/new_char\\s*=/));\nYou should set your new_char variable to alphabet[new_index] at the end of your loop body.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/new_char\\s*=\\s*alphabet\\s*\\[\\s*new_index\\s*\\]\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1205,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6552487e689f6e895f658717.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d756ec9dc281f12dfd5ee0cba7b1757e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524b790ba8558a2f1c9fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65524b790ba8558a2f1c9fe5\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nClean the output a bit. Delete print(char, index), and turn the last print() call into print('char:', char, 'new char:', new_char).\n--hints--\nYou should not have print(char, index) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse(/print\\s*\\(\\s*char\\s*,\\s*index\\s*\\)/.test(commentless_code))\nYou should change print(new_char) into print('char:', char, 'new char:', new_char).\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse(/print\\s*\\(\\s*new_char\\s*\\)/.test(commentless_code));\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/print\\s*\\(\\s*(\"|')char:\\1\\s*,\\s*char\\s*,\\s*(\"|')new\\schar:\\2\\s*,\\s*new_char\\s*\\)\\s*$/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\nnew_char = alphabet[new_index]\nprint(new_char)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524b790ba8558a2f1c9fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f04b3991b8733c658d1330f997de0c7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524d2a1a253b8bb5197ae2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65524d2a1a253b8bb5197ae2\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nfind is again returning -1 for uppercase letters, and for the space character, too. You are going to take care of the space later on.\nFor now, instead of iterating over text, change the for loop to iterate over text.lower().\n--hints--\nYou should modify your for loop to iterate over text.lower() instead of text.\njs\n({test: () => assert.match(code, /^for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*:/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text:\nindex = alphabet.find(char)\nprint(char, index)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65524d2a1a253b8bb5197ae2.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "49405a6f8e0776d67c10a0f319c2b5be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655251308f31958d06cdf267.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655251308f31958d06cdf267\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nAt the moment, the encrypted character is updated in every iteration. It would be better to store the encrypted string in a new variable. Before your for loop, declare a variable called encrypted_text and assign an empty string ('') to this variable.\n--hints--\nYou should declare a variable called encrypted_text before your for loop.\njs\n({ test: () => assert(__userGlobals.has(\"encrypted_text\")) })\nYou should assign an empty string to your encrypted_text variable.\njs\n({ test: () => assert.equal(__userGlobals.get(\"encrypted_text\"), \"\") })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nnew_index = index + shift\nnew_char = alphabet[new_index]\nprint('char:', char, 'new char:', new_char)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655251308f31958d06cdf267.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ffe22e9327036e0a9bbf75bbb5bd005",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65525e359ca28d938baa82c5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65525e359ca28d938baa82c5\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nYou can obtain the same effect of a = a + b by using the addition assignment operator:\npy\na += b\nThe addition assignment operator enables you to add a value to a variable and then assign the result to that variable.\nUse the += operator to add a value and assign it at the same time to encrypted_text.\n--hints--\nYou should use the addition assignment operator to add alphabet[new_index] to the current value of encrypted_text inside your loop body.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/encrypted_text\\s*\\+=\\s*alphabet\\s*\\[\\s*new_index\\s*\\]/));\n}\n})\n--seed--\n--seed-contents--\npy\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n--fcc-editable-region--\nfor char in text.lower():\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text = encrypted_text + alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65525e359ca28d938baa82c5.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d6317a6ebe6159ce6211fceb7d18c04f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553980e0527fa115c705646.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553980e0527fa115c705646\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nNow, instead of printing 'space!', use the addition assignment operator to add the space (currently stored in char) to the current value of encrypted_text.\n--hints--\nYou should not have print('space!') in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*(\"|')space!\\1\\s*\\)/);\nYou should use the += operator to add char to the current value of encrypted_text inside your new if statement.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+char\\s*==\\s*(\"|')\\s\\3\\s*/);\nassert(block_body.match(/encrypted_text\\s*\\+=\\s*char/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nprint('space!')\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553980e0527fa115c705646.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2ac3a6e29e8482cb0718ad1938c134f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a44b1801991847d8cc69.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553a44b1801991847d8cc69\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nNext, modify your print() call to print 'encrypted text:', encrypted_text and put it outside the for loop, so that the encrypted string is printed one time.\n--hints--\nYou should print 'encrypted text:', encrypted_text after your for loop.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*(\"|')encrypted\\stext:\\1\\s*,\\s*encrypted_text\\s*\\)/m) })\nYou should not have print('char:', char, 'encrypted text:', encrypted_text) in your code.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*(\"|')char:\\1\\s*,\\s*char\\s*,\\s*(\"|')encrypted\\stext:\\2\\s*,\\s*encrypted_text\\s*\\)/)\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a44b1801991847d8cc69.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "02c8ded3844919dbf5bd76a92b3c146f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553995f412dd8122ed38e4a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553995f412dd8122ed38e4a\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nA conditional statement can also have an else clause. This clause can be added to the end of an if statement to execute alternative code if the condition of the if statement is false:\npy\nif x != 0:\nprint(x)\nelse:\nprint('x = 0')\nAs you can see in your output, when the loop iterations reach the space, a space is added to the encrypted string. Then the code outside the if block executes and a c is added to the encrypted string.\nTo fix it, add an else clause after encrypted_text += char and indent all the subsequent lines of code except the print() call.\n--hints--\nYou should create an else clause. Remember to include the final colon.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/else\\s*:/));\nYou should indent the lines of code after your else clause except the print() call.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /else/);\nassert(block_body.match(/index\\s*=\\s*alphabet\\.find\\s*\\(\\s*char\\s*\\)\\s*new_index\\s*=\\s*index\\s*\\+\\s*shift\\s*encrypted_text\\s*\\+=\\s*alphabet\\s*\\[\\s*new_index\\s*\\]\\s*$/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553995f412dd8122ed38e4a.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6d196f71330a767d5c1393e12271775",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a755879b131a445e664c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553a755879b131a445e664c\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nTry to assign the string 'Hello Zaira' to your text variable and see what happens in the terminal.\nYou'll see a string index out of range exception. Don't worry, you'll figure out how to fix it soon!\n--hints--\nYou should have a text variable.\njs\nassert.match(code, /^text\\s*=/m)\nYou should assign the string 'Hello Zaira' to your text variable.\njs\nassert.match(code, /^text\\s*=\\s*(\"|')Hello\\sZaira\\1/m)\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a755879b131a445e664c.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc5e98348e96109e77a66d02ad4f9e23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553ed69ece88d29594748aa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553ed69ece88d29594748aa\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nTo execute, a function needs to be called (or invoked) by appending a pair of parentheses after its name, like this:\npy\nfunction_name()\nAt the end of your code, call your caesar function. Pay attention to the indentation.\n--hints--\nYou should call your caesar function. Make sure to write the function call at the beginning of the line.\njs\n({ test: () => assert.match(code, /^caesar\\s*\\(\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\ndef caesar():\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1070,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553ed69ece88d29594748aa.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "edf3fdc8012ef899f51d3adb822eeee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a7d8d05cbb1ae335a665.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553a7d8d05cbb1ae335a665\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nWhen the loop reaches the letter Z, the sum index + shift exceeds the last index of the string alphabet. Therefore, alphabet[new_index] is trying to use an invalid index, which causes an IndexError to be thrown.\nYou can notice that the output in the terminal stops at the space immediately before the Z, the last print before the error is thrown.\nIn this case, the modulo operator (%) can be used to return the remainder of the division between two numbers. For example: 5 % 2 is equal to 1, because 5 divided by 2 has a quotient of 2 and a remainder of 1.\nSurround index + shift with parentheses, and modulo the expression with 26, which is the alphabet length.\n--hints--\nYou should have new_index = (index + shift) % 26 in your else statement.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /else/);\nassert(block_body.match(/new_index\\s*=\\s*\\(\\s*index\\s*\\+\\s*shift\\s*\\)\\s*%\\s*26/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a7d8d05cbb1ae335a665.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dfa245e1a421fe96258c8794aea92013",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655261b2e1f2c197093f3993.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655261b2e1f2c197093f3993\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nCurrently, spaces get encrypted as 'c' To maintain the original spacing in the plain message, you'll require a conditional if statement This is composed of the if keyword, a condition, and a colon : py\nif x = 0:\nprint(x)\nIn the example above, the condition of the if statement is x = 0 The code print(x), inside the if statement body, runs only when the condition evaluates to True (in this example, meaning that x is different from zero) At the top of your for loop, replace print(char == ' ') with an if statement The condition of this if statement should evaluate to True if char is an empty space and False otherwise Inside the if body, print the string 'space ' Remember to indent this line --hints--\nYou should not have print(char == ' ') in your code js\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/);\nassert notMatch(block_body, /print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/);\nYou should replace print(char == ' ') with an if statement that triggers when char == ' ' Do not use parentheses to enclose the if condition and remember to include the final colon js\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body match(/if\\s+char\\s*==\\s*(\"|')\\s\\1\\s*:/));\nYou should print the string 'space ' inside your new if statement js\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /if\\s+char\\s*==\\s*(\"|')\\s\\3\\s*/);\nassert(block_body match(/print\\s*\\(\\s*(\"|')space \\1\\s*\\)/));\nYour code contains invalid syntax and/or invalid indentation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655261b2e1f2c197093f3993.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2e9b9279b86d2c3137c8078a4036b4de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655261b2e1f2c197093f3993.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "triggers when char == ' ' Do not use parentheses to enclose the if condition and remember to include the final colon js const commentless_code = __helpers python removeComments(code); const {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/); assert(block_body match(/if\\s+char\\s*==\\s*(\"|')\\s\\1\\s*:/)); You should print the string 'space ' inside your new if statement js const commentless_code = __helpers python removeComments(code); const {block_body} = __helpers python getBlock(commentless_code, /if\\s+char\\s*==\\s*(\"|')\\s\\3\\s*/); assert(block_body match(/print\\s*\\(\\s*(\"|')space \\1\\s*\\)/)); Your code contains invalid syntax and/or invalid indentationjs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text lower():\nprint(char == ' ')\nindex = alphabet find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655261b2e1f2c197093f3993.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c44ecac934528e35a5f4c605420d25f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553efd6ada3f42aa2d75448.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553efd6ada3f42aa2d75448\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nNow you should see the output again. Although this approach works, it doesn't significantly enhance the code's reusability. Repeatedly calling your function will result in the same outcome. However, functions can be declared with parameters to introduce versatility and customization:\npy\ndef function_name(param_1, param_2):\n<code>\nParameters are variables that you can use inside your function. A function can be declared with different number of parameters. In the example above, param_1 and param_2 are parameters.\nModify your function declaration so that it takes two parameters called message and offset.\nAfter that, you'll see an error appear in the terminal. You'll see how to solve it in the next steps.\n--hints--\nYour caesar function should take message and offset as the parameters. Remember to separate the parameters with a comma.\njs\nassert.match(code, /^def\\s+caesar\\s*\\(\\s*message\\s*,\\s*offset\\s*\\)\\s*:/m)\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\n--fcc-editable-region--\ndef caesar():\n--fcc-editable-region--\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\ncaesar()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553efd6ada3f42aa2d75448.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "efeece8528d52c530d9e1e6ab98dc294",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a572f7a65718f1e42e18.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553a572f7a65718f1e42e18\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nA function is essentially a reusable block of code You have already met some built-in functions, like print(), find() and len() But you can also define custom functions like this:\npy\ndef function_name():\n<code>\nA function declaration starts with the def keyword followed by the function name — a valid variable name — and a pair of parentheses The declaration ends with a colon Right after your shift variable, declare a function called caesar and indent all the following lines to give your new function a body --hints--\nYou should use the def keyword to declare a new function js\nassert match(code, /^def\\s+/m)\nYou should write caesar as the function name after the def keyword Remember to add a space after def js\nassert match(code, /^def\\s+caesar/m)\nYou should add a pair of parentheses after the function name Don't forget the final colon js\nassert match(code, /^def\\s+caesar\\s*\\(\\s*\\)\\s*:/m)\nYou should indent all the lines after shift = 3 so that they become your new function body js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {def} = __helpers python getDef(commentless_code, \"caesar\");\nconst replacement = def replace(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*text\\s*\\)\\s*print\\s*\\(\\s*(\"|')encrypted\\stext:\\2\\s*,\\s*encrypted_text\\s*\\)/, \"return encrypted_text\")\nconst py_code = `\ntext = \"Hello Zaira\"\nshift = 3\n${replacement}\ncaesar()\n`\nconst out = runPython(py_code, {});\nassert equal(out, \"khoor cdlud\");\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a572f7a65718f1e42e18.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5aa776458b35ae2b0ac12cf993c5e9a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a572f7a65718f1e42e18.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__helpers python removeComments(code); const {def} = __helpers python getDef(commentless_code, \"caesar\"); const replacement = def replace(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*text\\s*\\)\\s*print\\s*\\(\\s*(\"|')encrypted\\stext:\\2\\s*,\\s*encrypted_text\\s*\\)/, \"return encrypted_text\") const py_code = ` text = \"Hello Zaira\" shift = 3 ${replacement} caesar() ` const out = runPython(py_code, {}); assert equal(out, \"khoor cdlud\"); } }) --seed-- --seed-contents-- ```py --fcc-editable-region-- text = 'Hello Zaira' shift = 3 alphabet = 'abcdefghijklmnopqrstuvwxyz' encrypted_text = '' for char in text lower(): if char == ' ': encrypted_text += char else: index = alphabetfind(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553a572f7a65718f1e42e18.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9c8d3ca0c7af7036fd23553f5f249699",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f3fc92741c2bf8ded140.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553f3fc92741c2bf8ded140\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nInside your function body, rename the text and shift variables to message and offset, respectively.\n--hints--\nYou should rename all occurrences of text to message.\njs\nassert.match(code, /for\\s+char\\s+in\\s+message\\.lower\\s*\\(\\s*\\)\\s*:/);\nassert.match(code, /print\\s*\\(\\s*(\"|')(plain text|(plain )?message):\\1\\s*,\\s*message\\s*\\)/);\nYou should rename shift to offset.\njs\nassert.match(code, /new_index\\s*=\\s*\\(\\s*index\\s*\\+\\s*offset\\s*\\)\\s*%\\s*len\\s*\\(\\s*alphabet\\s*\\)/);\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\n--fcc-editable-region--\ndef caesar(message, offset):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\ncaesar()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f3fc92741c2bf8ded140.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1ed8e7d3013028e9b4c2fd60cb56021",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f4f66099802c6ae94613.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553f4f66099802c6ae94613\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nCurrently, your code raises a TypeError, because the caesar function is defined with two parameters (message and offset), therefore it expects to be called with two arguments.\nCalling caesar() without the required arguments stops the execution of the code.\nGive message and offset values, by passing text and shift as arguments to the caesar function call.\n--hints--\nYou should pass text and shift as the arguments to your function call by including them inside the parentheses. Don't forget to separate the arguments with a comma.\njs\n({\ntest: () => assert(runPython(\n`_Node(_code).find_calls('caesar')[0].is_equivalent('caesar(text, shift)')`\n))\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\ndef caesar(message, offset):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\ncaesar()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f4f66099802c6ae94613.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e27a07598446271a6439608594637e70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f6086add4b2cbb99fd78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553f6086add4b2cbb99fd78\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nAt the bottom of your code, after your existing caesar(text, shift) call, call your function again.\nThis time, pass the text variable and the integer 13 as arguments.\n--hints--\nYou should call your function again, this time passing text and 13 as arguments.\njs\n({ test: () => assert.match(code, /^caesar\\s*\\(\\s*text\\s*,\\s*13\\s*\\)/m) })\nYou should keep the existing function call.\njs\n({ test: () => assert.match(code, /^caesar\\s*\\(\\s*text\\s*,\\s*shift\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\ndef caesar(message, offset):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\ncaesar(text, shift)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f6086add4b2cbb99fd78.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "91724ad265f99175dadc2f39f7d79148",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655491bd5b98b813fa5bedca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655491bd5b98b813fa5bedca\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nNow modify your function declaration: change the function name into vigenere and the second parameter into key.\n--hints--\nYou should modify your function name into vigenere.\njs\nassert.match(code, /^def\\s+vigenere\\s*\\(.*\\)\\s*:/m)\nYour vigenere function should take message and key as the parameters.\njs\nassert.match(code, /^def\\s+vigenere\\s*\\(\\s*message\\s*,\\s*key\\s*\\)\\s*:/m)\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\ndef caesar(message, offset):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655491bd5b98b813fa5bedca.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb9ed458e5cbdf6ecabd5d3cfbe1a01a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f6b4ec51112d44d737c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553f6b4ec51112d44d737c8\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nRight before the print call, add another one and pass 'plain text:', text as the arguments to print(). Use the same indentation.\n--hints--\nYou should print 'plain text:', text after your for loop.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*text\\s*\\)\\s*^print/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f6b4ec51112d44d737c8.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7e17cf1a919f9fbb268d4b9e298d2870",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f8c570f9982e013a8886.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6553f8c570f9982e013a8886\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nCurrently, every single letter is always encrypted with the same letter, depending on the specified offset. What if the offset were different for each letter? That would be much more difficult to decrypt. This algorithm is referred to as the Vigenère cipher, where the offset for each letter is determined by another text, called the key.\nStart transforming your Caesar cipher into a Vigenère cipher by removing the two function calls.\n--hints--\nYou should remove your two caesar() function calls.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse(/^caesar\\s*\\(\\s*text\\s*,\\s*shift\\s*\\)/m.test(commentless_code))\nassert.isFalse(/^caesar\\s*\\(\\s*text\\s*,\\s*13\\s*\\)/m.test(commentless_code))\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\ndef caesar(message, offset):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\ncaesar(text, shift)\ncaesar(text, 13)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6553f8c570f9982e013a8886.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fa97def258b847612160fd90f885c429",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554930320d70414e7b6acc6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554930320d70414e7b6acc6\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nDelete your shift variable. Then, declare a new variable called custom_key and assign the value of the string 'python' to this variable.\n--hints--\nYou should delete the shift variable and its value.\njs\n({ test: () => assert.isFalse(__userGlobals.has(\"shift\")) })\nYou should declare a variable called custom_key.\njs\n({ test: () => assert(__userGlobals.has(\"custom_key\")) })\nYou should assign the string 'python' to your custom_key variable.\njs\n({ test: () => assert.equal(__userGlobals.get(\"custom_key\"), \"python\") })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\n--fcc-editable-region--\ndef vigenere(message, key):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554930320d70414e7b6acc6.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9dfa2ca3f888f31ca5685f67df71106b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65549f90cf78131c96ebcf28.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65549f90cf78131c96ebcf28\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nWhen coding, readability is key. Comments serve as effective notes, explaining the logic behind your code. They prove valuable when returning to a project after some time and also aid your colleagues in understanding the code.\nIn Python, you can write a comment using a #. Anything that comes after the # won't be executed.\nBefore your if statement, add a comment saying Append space to the message.\n--hints--\nYou should add a comment saying Append space to the message. Don't forget the # character at the beginning.\njs\n({ test: () => assert.match(code, /#\\s*Append\\sspace\\sto\\sthe\\smessage/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n--fcc-editable-region--\nif char == ' ':\nencrypted_text += char\n--fcc-editable-region--\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1340,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65549f90cf78131c96ebcf28.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1f99221ad0a2d0bffe9e41cf8ec713d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a334a40edb1fb4eff827.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554a334a40edb1fb4eff827\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nNext, inside the else block, declare a variable called key_char and assign it the value of key at the index key_index mod(%) the length of key.\n--hints--\nYou should declare a variable called key_char at the beginning of your else clause body.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, \"else\");\nassert(block_body.match(/^\\s*key_char\\s*=/));\nYou should assign key[key_index % len(key)] to your key_char variable.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, \"else\");\nassert(block_body.match(/key_char\\s*=\\s*key\\s*\\[\\s*key_index\\s*%\\s*len\\s*\\(\\s*key\\s*\\)\\s*\\]/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n--fcc-editable-region--\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1637,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a334a40edb1fb4eff827.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eec3811b0a34a2ad82041eb5bfa45e89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65549561463f0016876e852c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65549561463f0016876e852c\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nSince your key is shorter than the text that you will have to encrypt, you will need to repeat it to generate the whole encrypted text.\nAt the beginning of your function body, declare a key_index variable and set it to zero.\n--hints--\nYou should declare a variable called key_index at the beginning of your function body.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"vigenere\");\nassert(function_body.match(/^\\s*key_index\\s*=/));\nYou should assign 0 to your key_index variable.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"vigenere\");\nassert(function_body.match(/key_index\\s*=\\s*0/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1574,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65549561463f0016876e852c.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7bb342a3ea5035e2575953880e30d4c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a57ec0a2c52106e7ee50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554a57ec0a2c52106e7ee50\ntitle: Step 64\nchallengeType: 20\ndashedName: step-64\n--description--\nInside the else clause, write a comment saying Find the right key character to encode.\n--hints--\nYou should create a comment saying Find the right key character to encode. Don't forget  the # at the beginning.\njs\n({ test: () => assert.match(code, /#\\s*Find\\sthe\\sright\\skey\\scharacter\\sto\\sencode/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\nkey_char = key[key_index % len(key)]\nkey_index += 1\n--fcc-editable-region--\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1145,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a57ec0a2c52106e7ee50.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ef812160bb8bd7ab912a36a1cf981caa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a49a4f782f208abcc87e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554a49a4f782f208abcc87e\ntitle: Step 63\nchallengeType: 20\ndashedName: step-63\n--description--\nYou will need to increase the key_index count for the next iteration.\nTo do this, after the line you just added and in the same code block, use the addition assignment operator to increment key_index by one.\n--hints--\nYou should use the += operator to add 1 to key_index inside the else clause body.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, \"else\");\nassert(block_body.match(/key_char\\s*=\\s*key\\s*\\[\\s*key_index\\s*%\\s*len\\s*\\(\\s*key\\s*\\)\\s*\\]\\s*key_index\\s*\\+=\\s*1/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\nkey_char = key[key_index % len(key)]\n--fcc-editable-region--\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a49a4f782f208abcc87e.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4aca9c2556836c3fbf14d040d862ceba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a88d5af937226f4a9121.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554a88d5af937226f4a9121\ntitle: Step 65\nchallengeType: 20\ndashedName: step-65\n--description--\nThe .index() method is identical to the .find() method but it throws a ValueError exception if it is unable to find the substring.\nA ValueError is a built-in exception that is raised when an argument with the right type but inappropriate value is passed to a function.\nAfter incrementing key_index, declare a variable named offset. Find the index that key_char has in alphabet and assign it to offset. Use the .index() to find the index.\n--hints--\nYou should declare a variable called offset.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /else/);\nassert(block_body.match(/offset\\s*=/));\nYour offset variable should store the value of alphabet.index(key_char).\njs\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /else/);\nassert(block_body.match(/offset\\s*=\\s*alphabet\\.index\\s*\\(\\s*key_char\\s*\\)/));\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\n--fcc-editable-region--\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n--fcc-editable-region--\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554a88d5af937226f4a9121.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9658d2ac1ffb96c384f8e8663dedb64d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ac937a49be2701af4f2f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554ac937a49be2701af4f2f\ntitle: Step 66\nchallengeType: 20\ndashedName: step-66\n--description--\nAbove the offset variable, create another comment saying Define the offset and the encrypted letter.\n--hints--\nYou should create a comment saying Define the offset and the encrypted letter. Don't forget the # at the beginning.\njs\n({ test: () => assert.match(code, /#\\s*Define\\sthe\\soffset\\sand\\sthe\\sencrypted\\sletter/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n--fcc-editable-region--\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ac937a49be2701af4f2f.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e17d02e44e96785b59b4c1371a21350a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d0332949b133a0b35eaa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554d0332949b133a0b35eaa\ntitle: Step 68\nchallengeType: 20\ndashedName: step-68\n--description--\nCall your function passing text and custom_key as the arguments. Store the return value of the function call in a variable called encryption.\n--hints--\nYou should call vigenere passing text and custom_key as the arguments.\njs\n({ test: () => assert.match(code, /vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/) })\nYou should have an encryption variable.\njs\n({ test: () => assert(__userGlobals.has(\"encryption\")) })\nYou should assign your function call to the encryption variable.\njs\n({ test: () => assert.match(code, /encryption\\s*=\\s*vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d0332949b133a0b35eaa.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff38d7b680e281d4fd77c076eaf0f111",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d15c8acb5f34499ad789.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554d15c8acb5f34499ad789\ntitle: Step 69\nchallengeType: 20\ndashedName: step-69\n--description--\nAnd now, try to print encryption to see the actual output on the terminal.\n--hints--\nYou should print your encryption variable.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*encryption\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\nencryption = vigenere(text, custom_key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d15c8acb5f34499ad789.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bc91d57cce84159df894f2abec011c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d25dc5ceaa354307a77e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554d25dc5ceaa354307a77e\ntitle: Step 70\nchallengeType: 20\ndashedName: step-70\n--description--\nEncryption and decryption are opposite processes and your function can do both with a couple of tweaks.\nAdd a third parameter called direction to your function definition. Also, comment out the last two lines of code to avoid errors in the console.\n--hints--\nYou should turn the last two lines in your code into comments. Put a # at the beginning of each line.\njs\n({ test: () => assert.match(code, /#\\s*encryption\\s*=\\s*vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)\\s*#\\s*print\\s*\\(\\s*encryption\\s*\\)/) })\nYou should add direction as the third parameter of your function.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(vigenere))\nsig == '(message, key, direction)'\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\nencryption = vigenere(text, custom_key)\nprint(encryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1741,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554d25dc5ceaa354307a77e.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e019151dd39c808638f0522e561e2a11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554de295ade563a069936a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554de295ade563a069936a1\ntitle: Step 71\nchallengeType: 20\ndashedName: step-71\n--description--\nAll you need to do is multiply the offset by the direction in the new_index assignment. The multiplication operator in Python is *.\n--hints--\nYou should multiply offset by direction in the new_index assignment. Do not add other parentheses.\njs\n({ test: () => assert.match(code, /new_index\\s*=\\s*\\(\\s*index\\s*\\+\\s*offset\\s*\\*\\s*direction\\s*\\)\\s*%\\s*len\\s*\\(\\s*alphabet\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\n--fcc-editable-region--\nnew_index = (index + offset) % len(alphabet)\n--fcc-editable-region--\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\nencryption = vigenere(text, custom_key)\nprint(encryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1410,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554de295ade563a069936a1.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a250727234befc0e5b1db2a5e0271121",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554dfce1683be3c0c9609a6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554dfce1683be3c0c9609a6\ntitle: Step 72\nchallengeType: 20\ndashedName: step-72\n--description--\nNow you can uncomment the last two lines and modify your function call passing 1 as the third argument.\n--hints--\nYou should restore the last two lines of your code and pass 1 as the third argument to your function call.\njs\n({ test: () => assert.match(code, /^encryption\\s*=\\s*vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*,\\s*1\\s*\\)\\s*print\\s*\\(\\s*encryption\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\nencryption = vigenere(text, custom_key)\nprint(encryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554dfce1683be3c0c9609a6.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb12fc037130390898b0a14d83200c2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e0adc7bb193cbfdb36d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554e0adc7bb193cbfdb36d5\ntitle: Step 73\nchallengeType: 20\ndashedName: step-73\n--description--\nCheck if the function can decrypt the string back to the plain text.\nDeclare another variable called decryption and assign it vigenere(encryption, custom_key, -1).\n--hints--\nYou should call vigenere passing encryption, custom_key and -1 as the arguments.\njs\n({ test: () => assert.match(code, /vigenere\\s*\\(\\s*encryption\\s*,\\s*custom_key\\s*,\\s*-\\s*1\\s*\\)/) })\nYou should declare a decryption variable.\njs\n({ test: () => assert(__userGlobals.has(\"decryption\")) })\nYour decryption variable should have the value of vigenere(encryption, custom_key, -1).\njs\n({ test: () => assert.match(code, /^decryption\\s*=\\s*vigenere\\s*\\(\\s*encryption\\s*,\\s*custom_key\\s*,\\s*-\\s*1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1739,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e0adc7bb193cbfdb36d5.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46f006a635ae739dcab1445691a9bb44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e2ee23bfd93f2c83640f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554e2ee23bfd93f2c83640f\ntitle: Step 74\nchallengeType: 20\ndashedName: step-74\n--description--\nNow print your decryption variable.\n--hints--\nYou should print your new decryption variable.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*decryption\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e2ee23bfd93f2c83640f.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a44cc606266d12625e9afca5dc2d78d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e343caea913ffba7bec6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554e343caea913ffba7bec6\ntitle: Step 75\nchallengeType: 20\ndashedName: step-75\n--description--\nNow, your function can be used both to encrypt and decrypt a message. Clean up your code with better variable names.\nChange each occurrence of encrypted_text into final_message.\n--hints--\nYou should change each occurrence of encrypted_text into final_message.\njs\n({\ntest: () => {\nconst l = code.match(/final_message/g).length\nassert.equal(l, 4)\n}\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\n--fcc-editable-region--\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nencrypted_text += alphabet[new_index]\nreturn encrypted_text\n--fcc-editable-region--\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554e343caea913ffba7bec6.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "71121685725c3858fac136d9fabe8c58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ad2463b8892748f8efdd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6554ad2463b8892748f8efdd\ntitle: Step 67\nchallengeType: 20\ndashedName: step-67\n--description--\nAt the moment, your function prints some strings, but these values cannot be used by other parts of code to perform any actions For that purpose, you need to use a return statement:\npython\ndef foo():\nreturn 'spam'\nYou need to write return followed by a space and the value that the function should return Once the return statement is found, that value is returned and the execution of the function stops, proceeding to the next line of code after the function call In the example above, the foo function returns the string 'spam' Remove the two print() calls from your function and return encrypted_text --hints--\nYou should remove the two print() calls from your function js\n({\ntest: () => {\nconst commentless_code = __helpers python removeComments(code);\nassert isFalse(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*message\\s*\\)/ test(commentless_code))\nassert isFalse(/print\\s*\\(\\s*(\"|')encrypted\\stext:\\1\\s*,\\s*encrypted_text\\s*\\)/ test(commentless_code))\n}\n})\nYour function should return encrypted_text js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {function_body} = __helpers python getDef(commentless_code, \"vigenere\");\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+message\\ lower\\s*\\(\\s*\\)\\s*/);\nconst regex = /return\\s+encrypted_text/\nassert(function_body match(regex));\nassert notMatch(block_body, regex);\n}\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in message lower():\n# Append space to the message\nif char == ' ':\nencrypted_text += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n--fcc-editable-region--\n# Define the offset and the encrypted letter\noffset = alphabet index(key_char)\nindex = alphabet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ad2463b8892748f8efdd.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bc8c1a4454e71b2730107cd494c9c1a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ad2463b8892748f8efdd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} }) --seed-- --seed-contents-- ```py text = 'Hello Zaira' custom_key = 'python' def vigenere(message, key): key_index = 0 alphabet = 'abcdefghijklmnopqrstuvwxyz' encrypted_text = '' for char in message lower(): # Append space to the message if char == ' ': encrypted_text += char else: # Find the right key character to encode key_char = key[key_index % len(key)] key_index += 1 --fcc-editable-region-- # Define the offset and the encrypted letter offset = alphabet index(key_char) index = alphabetfind(char)\nnew_index = (index + offset) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', message)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6554ad2463b8892748f8efdd.md",
      "source_type": "git_repo"
    },
    "token_count": 162,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c81d96a6ee4ddc2572c5ab35e55e2c09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655516e410b8e30fb4fb64e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655516e410b8e30fb4fb64e8\ntitle: Step 76\nchallengeType: 20\ndashedName: step-76\n--description--\nUpdate your comments too. Your second comment should say encode/decode in place of encode. Your third comment should say encrypted/decrypted in place of encrypted.\n--hints--\nYour second comment should be Find the right key character to encode/decode.\njs\n({ test: () => assert.match(code, /#\\s*Find\\sthe\\sright\\skey\\scharacter\\sto\\sencode\\/decode/) })\nYour third comment should be Define the offset and the encrypted/decrypted letter.\njs\n({ test: () => assert.match(code, /#\\s*Define\\sthe\\soffset\\sand\\sthe\\sencrypted\\/decrypted\\sletter/) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nfinal_message += char\nelse:\n# Find the right key character to encode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1655,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655516e410b8e30fb4fb64e8.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25a12d1e78032a9d3323348439fca3a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555201d9b7fc917399f9f0b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555201d9b7fc917399f9f0b\ntitle: Step 80\nchallengeType: 20\ndashedName: step-80\n--description--\nThe .isalpha() method returns True if all of the characters of the string on which it is called are letters. For example, the code below returns True:\n```py\n'freeCodeCamp'.isalpha()\nTrue\n```\nDelete the condition char == ' ' and replace it by calling the .isalpha() method on char.\n--hints--\nYou should have if char.isalpha(): in your code.\njs\n({ test: () => assert.match(code, /if\\s+char\\.isalpha\\s*\\(\\s*\\)\\s*:/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif char == ' ':\nfinal_message += char\n--fcc-editable-region--\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1544,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555201d9b7fc917399f9f0b.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b5f7227d6b240e2ddcc8a5e9ba7a15f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655520c20cb1e6177b0641d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655520c20cb1e6177b0641d6\ntitle: Step 81\nchallengeType: 20\ndashedName: step-81\n--description--\nThe not operator is used to negate an expression. When placed before a truthy value — a value that evaluates to True — it returns False and vice versa.\nAdd the not operator at the beginning of the if condition to check if the character is not alphabetic.\n--hints--\nYou should use the not operator in the condition of your if statement.\njs\n({ test: () => assert.match(code, /if\\s+not\\s+char\\.isalpha\\s*\\(\\s*\\)\\s*:/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif char.isalpha():\nfinal_message += char\n--fcc-editable-region--\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655520c20cb1e6177b0641d6.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75787f3dfb99b20b745c17976c4851ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65551a628bcb7e121e32d04b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65551a628bcb7e121e32d04b\ntitle: Step 79\nchallengeType: 20\ndashedName: step-79\n--description--\nRight now, punctuation, special characters or digits are not encoded/decoded correctly.\nCheck this by adding an exclamation mark at the end of the text string.\n--hints--\nYou should have a text variable.\njs\n({ test: () => assert(__userGlobals.has(\"text\")) })\nYour text variable should be equal to the string 'Hello Zaira!'.\njs\n({ test: () => assert.equal(__userGlobals.get(\"text\"), \"Hello Zaira!\") })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\ncustom_key = 'python'\n--fcc-editable-region--\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1526,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65551a628bcb7e121e32d04b.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aedbf929b054659a93af4f9932234332",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655522883e66f618e03a9411.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655522883e66f618e03a9411\ntitle: Step 82\nchallengeType: 20\ndashedName: step-82\n--description--\nModify your comment into Append any non-letter character to the message.\n--hints--\nYou should turn your first comment into Append any non-letter character to the message.\njs\n({ test: () => assert.match(code, /#\\s*Append\\sany\\snon-letter\\scharacter\\sto\\sthe\\smessage/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n--fcc-editable-region--\n# Append space to the message\nif not char.isalpha():\nfinal_message += char\n--fcc-editable-region--\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655522883e66f618e03a9411.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "73036e293604c70e9bf065c2a2241b90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552a9593755e1fb2f5ab50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65552a9593755e1fb2f5ab50\ntitle: Step 85\nchallengeType: 20\ndashedName: step-85\n--description--\nDefine another function named decrypt with the same parameters as encrypt. This time return vigenere(message, key, -1).\n--hints--\nYou should define a new function called decrypt.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(decrypt)\n`))\n})\nYour decrypt function should take message and key as the parameters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = inspect.signature(decrypt)\nstr(sig) == \"(message, key)\"\n`))\n})\nYour decrypt function should return vigenere(message, key, -1).\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"decrypt\");\nassert(function_body.match(/return\\s+vigenere\\s*\\(\\s*message\\s*,\\s*key\\s*,\\s*-\\s*1\\s*\\)/));\n}\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\n--fcc-editable-region--\ndef encrypt(message, key):\nreturn vigenere(message, key)\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552a9593755e1fb2f5ab50.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2409bbc660576c79150cafbc4c1298e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555231eac4d9f19bd3d44b5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555231eac4d9f19bd3d44b5\ntitle: Step 83\nchallengeType: 20\ndashedName: step-83\n--description--\nThe pass keyword can be used as a placeholder for future code. It does not have any effect in your code but it can save you from errors you would get in case of incomplete code:\npy\ndef foo():\npass\nCalling vigenere with 1 to encrypt and -1 to decrypt is fine but it might be a little bit cryptic. Create a new function called encrypt that takes message and key parameters, and use pass to fill the function body.\n--hints--\nYou should declare a new function called encrypt. Remember to use the pass keyword inside the body.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(encrypt)\n`))\n})\nYour encrypt function should take message and key as the parameters. The order matters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = inspect.signature(encrypt)\nstr(sig) == \"(message, key)\"\n`))\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\n--fcc-editable-region--\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555231eac4d9f19bd3d44b5.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f1e13f8b653c884e9fa01bf0339ecf2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552a111190e11f0963949e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65552a111190e11f0963949e\ntitle: Step 84\nchallengeType: 20\ndashedName: step-84\n--description--\nDelete the pass keyword, and return vigenere(message, key) from your new function.\n--hints--\nYour encrypt function should return vigenere(message, key). Remember to delete pass.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"encrypt\");\nassert(function_body.match(/return\\s+vigenere\\s*\\(\\s*message\\s*,\\s*key\\s*\\)/));\nassert.notMatch(function_body, /pass/);\n}\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\n--fcc-editable-region--\ndef encrypt(message, key):\npass\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1657,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552a111190e11f0963949e.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2887d51ca92e77e020c3637743f68eb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552b14e803731fe3c1e4ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65552b14e803731fe3c1e4ca\ntitle: Step 86\nchallengeType: 20\ndashedName: step-86\n--description--\nNext, modify your encryption and decryption variables by calling encrypt and decrypt, respectively, in place of vigenere.\n--hints--\nYour encryption variable should have the value of encrypt(text, custom_key).\njs\n({ test: () => assert.match(code, /^encryption\\s*=\\s*encrypt\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/m) })\nYour decryption variable should have the value of decrypt(encryption, custom_key).\njs\n({ test: () => assert.match(code, /^decryption\\s*=\\s*decrypt\\s*\\(\\s*encryption\\s*,\\s*custom_key\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira!'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\n--fcc-editable-region--\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65552b14e803731fe3c1e4ca.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7350d544c07f3d2dd85a867671b65e2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65553159615a8123b190ee43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65553159615a8123b190ee43\ntitle: Step 87\nchallengeType: 20\ndashedName: step-87\n--description--\nIt works! Now, you are going to start with an encrypted message to be decrypted.\nChange the value of text to the string 'mrttaqrhknsw ih puggrur'.\n--hints--\nYou should still have a text variable.\njs\n({ test: () => assert(__userGlobals.has(\"text\")) })\nYour text variable should have the value of 'mrttaqrhknsw ih puggrur'.\njs\n({ test: () => assert.equal(__userGlobals.get(\"text\"), \"mrttaqrhknsw ih puggrur\") })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira!'\ncustom_key = 'python'\n--fcc-editable-region--\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\nencryption = encrypt(text, custom_key)\nprint(encryption)\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65553159615a8123b190ee43.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c12e5deda10d8a8166485a90874b7fd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555d8b0b3d20b128bdadd37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555d8b0b3d20b128bdadd37\ntitle: Step 78\nchallengeType: 20\ndashedName: step-78\n--description--\nNow you can remove the third argument from your first function call.\n--hints--\nYou should remove the third argument from vigenere(text, custom_key, 1).\njs\n({ test: () => assert.match(code, /vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\n--fcc-editable-region--\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555d8b0b3d20b128bdadd37.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "883a9b2895e4c7ad14a16471d1301d7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555d6e12c95701172b55709.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555d6e12c95701172b55709\ntitle: Step 77\nchallengeType: 20\ndashedName: step-77\n--description--\nFunctions can be called with default arguments. A default argument indicates the value that the function should take if the argument is not passed. For example, the function below accepts three arguments but you can call it passing two arguments. The third one will assume the specified value by default:\npy\ndef foo(a, b, c=value):\n<code>\nModify the vigenere function so that its direction parameter has a default value of 1.\n--hints--\nThe direction parameter of your vigenere function should have a default value of 1.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(vigenere))\nsig == '(message, key, direction=1)'\n`))\n})\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\ncustom_key = 'python'\n--fcc-editable-region--\ndef vigenere(message, key, direction):\n--fcc-editable-region--\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append space to the message\nif char == ' ':\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555d6e12c95701172b55709.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3f18503391ad92225a504959622e707f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555db4a7b788e15795674e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555db4a7b788e15795674e5\ntitle: Step 89\nchallengeType: 20\ndashedName: step-89\n--description--\nTwo or more strings can be concatenated by using the + operator. For example: 'Hello' + ' there!' results in 'Hello there!'.\nCall the print() function and use the + operator to concatenate the text variable to the string 'Encrypted text: '. Pay attention to the spacing.\n--hints--\nYou should call print() and pass 'Encrypted text: ' + text as the arguments.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^print\\s*\\(\\s*(\"|')Encrypted\\stext:\\s\\1\\s*\\+\\s*text\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\n--fcc-editable-region--\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555db4a7b788e15795674e5.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8893d98abf5c9a79c806c876d5c451a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555df0c81300b175308557d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555df0c81300b175308557d\ntitle: Step 90\nchallengeType: 20\ndashedName: step-90\n--description--\nBelow the print() call you just added, add another print() call to print Key: python by concatenating the string 'Key: ' and the value of the custom_key variable.\n--hints--\nYou should have a print() call that prints Key: python by concatenating the string 'Key: ' and the value of the custom_key variable.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^print\\s*\\(\\s*(\"|')Key:\\s\\1\\s*\\+\\s*custom_key\\s*\\)/m);\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint('Encrypted text: ' + text)\n--fcc-editable-region--\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555df0c81300b175308557d.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "475c9a8b0836e70ec98a88fb4daf5386",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e3f387381a19d5e00333.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555e3f387381a19d5e00333\ntitle: Step 92\nchallengeType: 20\ndashedName: step-92\n--description--\nNext, modify print('Key: ' + custom_key) to use an f-string.\n--hints--\nYou should modify the print('Key: ' + custom_key) call so that it prints the same result using an f-string.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*f(\"|')Key:\\s\\{\\s*custom_key\\s*\\}\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint(f'Encrypted text: {text}')\nprint('Key: ' + custom_key)\n--fcc-editable-region--\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e3f387381a19d5e00333.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd6693775fa0ef974262c0815026a8d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e1bfcd374e18c6be8e58.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555e1bfcd374e18c6be8e58\ntitle: Step 91\nchallengeType: 20\ndashedName: step-91\n--description--\nIn Python, there's a way to easily format strings. f-strings enable you to interpolate values in your strings.\nInterpolation means writing placeholders that will be replaced by the specified values when the program runs. For example, you can get the same result of 'Encrypted text: ' + text with f'Encrypted text: {text}'. You need to put an f before the quotes to create the f-string and write the variables or expressions you want to interpolate between curly braces.\nModify the first print() call to use an f-string.\n--hints--\nYou should modify the print('Encrypted text: ' + text) call so that it prints the same result using an f-string.\njs\n({ test: () => assert.match(code, /print\\s*\\(\\s*f(\"|')Encrypted\\stext:\\s\\{\\s*text\\s*\\}\\1\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint('Encrypted text: ' + text)\nprint('Key: ' + custom_key)\n--fcc-editable-region--\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2030,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e1bfcd374e18c6be8e58.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fd2960f57834167f814786780ffd1f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e43e783ed31a0532b1b2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555e43e783ed31a0532b1b2\ntitle: Step 93\nchallengeType: 20\ndashedName: step-93\n--description--\nThe newline character \\n is a special sequence used to represent a new line. You can write a backslash \\ followed by an n as a normal sequence of characters in a string and it will be replaced by a new line in the output when the program runs.\nPut a newline character at the beginning of your first print call and see the output.\n--hints--\nYou should modify your first print call into print(f'\\nEncrypted text: {text}').\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*f(\"|')\\\\nEncrypted\\stext:\\s\\{\\s*text\\s*\\}\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint(f'Encrypted text: {text}')\nprint(f'Key: {custom_key}')\n--fcc-editable-region--\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e43e783ed31a0532b1b2.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85950a497998f50d40f4d5a964388d26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655619327c7b364166f8dd6f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655619327c7b364166f8dd6f\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nIf you wish to incorporate additional characters into the alphabet string, such as digits or special characters, you'll find it's necessary to manually modify the right operand of the modulo operation.\nReplace 26 with len(alphabet) to avoid this issue.\n--hints--\nYou should modify the new_index value replacing 26 with len(alphabet).\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /else/);\nassert(block_body.match(/new_index\\s*=\\s*\\(\\s*index\\s*\\+\\s*shift\\s*\\)\\s*%\\s*len\\s*\\(\\s*alphabet\\s*\\)/));\n} })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % 26\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655619327c7b364166f8dd6f.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12dbde9affcef65010a13bad00cf8d15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e547c18a2b1a7b795bd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555e547c18a2b1a7b795bd8\ntitle: Step 95\nchallengeType: 20\ndashedName: step-95\n--description--\nUncomment your last print() call and change it to use the f-string f'\\nDecrypted text: {decryption}\\n' as the argument.\n--hints--\nYou should uncomment your last print() call and change it to use f'\\nDecrypted text: {decryption}\\n' as the argument.\njs\n({\ntest: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^print\\s*\\(\\s*f(\"|')\\\\nDecrypted\\stext:\\s\\{\\s*decryption\\s*\\}\\\\n\\1\\s*\\)/m)\n}\n})\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1729,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e547c18a2b1a7b795bd8.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4f6bfc1ba12c219013a2a8d99e17839",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\656886ec4e4d9b96ded3c565.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656886ec4e4d9b96ded3c565\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nThe iteration variable can have any valid name, but it's convenient to give it a meaningful name.\nRename your i variable to char.\n--hints--\nYou should replace i with char.\njs\nassert.match(code, /^for\\s+char\\s+in\\s+text:\\s+print\\s*\\(\\s*char\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n--fcc-editable-region--\nfor i in text:\nprint(i)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\656886ec4e4d9b96ded3c565.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ef2df1f236973fe1aacaf6c6df9aea99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65687d2f8c7ee27b0446cef3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687d2f8c7ee27b0446cef3\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nThe code to execute at each iteration — placed after the : — constitutes the body of the loop. This code must be indented. In Python, it is recommended to use 4 spaces per indentation level. This indented level is a code block.\npy\nfor i in text:\nprint(i)\nPython relies on indentation to indicate blocks of code. A colon at the end of a line is a signal that a new indented block of code will follow.\nSo, when no indented block is found after the final colon, the code execution stops and an IndentationError is thrown. This code will not show the output and instead raise an IndentationError:\npy\nfor i in text:\nprint(i)\nGive your for loop a body by adding a call to print(i). Remember to indent the loop body.\n--hints--\nYou should add print(i) to your for loop body. Pay attention to the indentation.\njs\nassert.match(code, /^for\\s+i\\s+in\\s+text:\\s+print\\s*\\(\\s*i\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor i in text:\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1320,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65687d2f8c7ee27b0446cef3.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12879565b624feb5b30f62167053be1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65688a50e6c998a21d8e41d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65688a50e6c998a21d8e41d3\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nStrings are immutable, which means they cannot be changed once created. For example, you might think that the following code changes the value of my_string into the string 'train', but this is not valid:\npy\nmy_string = 'brain'\nmy_string[0] = 't'\nConfirm that by using the bracket notation to access the first letter in text and try to change it into a character of your choice. You will see the ouput disappear and an error appear.\n--hints--\nYou should still have text = 'Hello World' in your code.\njs\nassert.match(code, /^text\\s*=\\s*(\"|')Hello World\\1/m)\nYou should access the first letter in text with text[0].\njs\nassert.match(code, /^text\\s*\\[\\s*0\\s*\\]\\s*/m)\nYou should use the = operator to assign a character of your choice to text[0]. Don't forget to enclose the character in either single or double quotes.\njs\nassert.match(code, /^text\\s*\\[\\s*0\\s*\\]\\s*\\=\\s*(\"|').\\1/m)\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\n--fcc-editable-region--\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1319,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65688a50e6c998a21d8e41d3.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "769814613a294d595bbca364d1720fbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65688b5a1655a7a6caede847.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65688b5a1655a7a6caede847\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nWhen you try to change the individual characters of a string as you did in the previous step, you get a TypeError, which occurs when an object of inappropriate type is used in your code.\nAs you can see from the error message, strings do not support item assignment, because they are immutable. However, a variable can be reassigned another string:\npy\nmessage = 'Hello World'\nmessage = 'Hello there!'\nDelete the text[0] line and reassign text the string 'Albatross'.\n--hints--\nYou should not have text[0] = 'C' in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse( /text\\s*\\[\\s*0\\s*\\]\\s*\\=\\s*(\"|')\\w\\1/.test(commentless_code));\nYou should reassign text the string 'Albatross'. Do not modify text = 'Hello World'.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code.replace(/\\r/g, ''), /text\\s*=\\s*(\"|')Hello World\\1\\s+text\\s*=\\s*(\"|')Albatross\\2/m);\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\ntext[0] = 'C'\n--fcc-editable-region--\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65688b5a1655a7a6caede847.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5efd4265355c402f0c5ca35fad47d100",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568b7a40c7ba0ccbc4b4425.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6568b7a40c7ba0ccbc4b4425\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nAs you can see, each character of the reassigned string gets printed inside the loop.\nGo back to the original string by deleting the text reassignment.\n--hints--\nYou should not have text = 'Albatross' in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse( /text\\s*=\\s*(\"|')Albatross\\1/.test(commentless_code))\nYou should still have a text variable with the value 'Hello World'.\njs\n({test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /text\\s*=\\s*(\"|')Hello World\\1/)\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\ntext = 'Albatross'\n--fcc-editable-region--\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfor char in text.lower():\nindex = alphabet.find(char)\nprint(char, index)\nnew_index = index + shift\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568b7a40c7ba0ccbc4b4425.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "411b1e45e04409ce2d4fd036d79145b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655a2a7210094920069b117c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655a2a7210094920069b117c\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nComparison operators allow you to compare two objects based on their values You can use a comparison operator by placing it between the objects you want to compare They return a Boolean value — namely True or False — depending on the truthfulness of the expression Python has the following comparison operators:\nOperator\nMeaning\n==\nEqual =\nNot equal\n>\nGreater than\n<\nLess than\n>=\nGreater than or equal to\n<=\nLess than or equal to\nAt the beginning of your loop body, print the result of comparing char with a space (' ') Use the equality operator == for that --hints--\nYou should compare char with a space using the equality operator inside your for loop js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body match(/char\\s*==\\s*(\"|')\\s\\1/));\n}\n})\nYou should print the result of comparing char with a space inside your for loop js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body match(/print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n}\n})\nYou should print the result of comparing char with a space at the beginning of your loop js\n({ test: () => {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body match(/^\\s+print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655a2a7210094920069b117c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9dc359c20552e37d2a05118e98acad4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655a2a7210094920069b117c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "python removeComments(code); const {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/); assert(block_body match(/print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/)); } }) You should print the result of comparing char with a space at the beginning of your loop js ({ test: () => { const commentless_code = __helpers python removeComments(code); const {block_body} = __helpers python getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\ lower\\s*\\(\\s*\\)\\s*/); assert(block_body match(/^\\s+print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/)); } }) --seed-- --seed-contents-- ```py --fcc-editable-region-- text = 'Hello World' shift = 3 alphabet = 'abcdefghijklmnopqrstuvwxyz' encrypted_text = '' for char in textlower():\nindex = alphabet find(char)\nnew_index = index + shift\nencrypted_text += alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\655a2a7210094920069b117c.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8585bc897114b9fc34459df81672665f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568cc9301a0c41058ed95c5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6568cc9301a0c41058ed95c5\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nNow, replace new_char with encrypted_text. Also, modify the print() call into print('char:', char, 'encrypted text:', encrypted_text) to reflect this change.\n--hints--\nYou should replace new_char with encrypted_text inside your for loop.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/encrypted_text\\s*=\\s*alphabet\\s*\\[\\s*new_index\\s*\\]/));\n}\n})\nYou should turn your print() call into print('char:', char, 'encrypted text:', encrypted_text) inside your for loop.\njs\n({\ntest: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert.isFalse(/print\\s*\\(\\s*new_char\\s*\\)/.test(commentless_code));\nassert(block_body.match(/print\\s*\\(\\s*(\"|')char:\\1\\s*,\\s*char\\s*,\\s*(\"|')encrypted\\stext:\\2\\s*,\\s*encrypted_text\\s*\\)/));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nindex = alphabet.find(char)\nnew_index = index + shift\nnew_char = alphabet[new_index]\nprint('char:', char, 'new char:', new_char)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1574,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568cc9301a0c41058ed95c5.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5073c767da56e759c8928a1cee304f67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568c86dc9193000d11ca5e0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6568c86dc9193000d11ca5e0\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nInstead of assigning alphabet[new_index] to encrypted_text, assign the current value of encrypted_text plus alphabet[new_index] to this variable.\n--hints--\nYou should assign encrypted_text + alphabet[new_index] to your encrypted_text variable.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/encrypted_text\\s*=\\s*encrypted_text\\s*\\+\\s*alphabet\\s*\\[\\s*new_index\\s*\\]/));\n}\n})\n--seed--\n--seed-contents--\npy\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n--fcc-editable-region--\nfor char in text.lower():\nindex = alphabet.find(char)\nnew_index = index + shift\nencrypted_text = alphabet[new_index]\nprint('char:', char, 'encrypted text:', encrypted_text)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6568c86dc9193000d11ca5e0.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "47bf85d520bb5236d571d46b642e7692",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65951b637ddec63611c482c0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65951b637ddec63611c482c0\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nYou can use the built-in function print() to print the output of your code on the terminal.\nFunctions are reusable code blocks that you can call, or invoke, to run their code when you need them. To call a function, you just need to write a pair of parentheses next to its name. You will learn more about functions very soon.\nFor now, go to a new line and add an empty call to the print() function. You should not see any output yet.\n--hints--\nYou should have print() in your code. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'Hello World'\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 942,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65951b637ddec63611c482c0.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0ed8f90543ded9eca4b6db35de5f2597",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659526f3e5424b3eac4b6aa7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 659526f3e5424b3eac4b6aa7\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nNext, print the index variable to the console.\n--hints--\nYou should print your index variable. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*index\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659526f3e5424b3eac4b6aa7.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "125a6397121d570fefe9ab2ce0081532",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e5991af57d1ae0e35f0a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6555e5991af57d1ae0e35f0a\ntitle: Step 96\nchallengeType: 20\ndashedName: step-96\n--description--\nWait a minute You cannot decrypt anything with the wrong key Try with 'happycoding' With that, your cipher project is complete --hints--\nYou should still have a custom_key variable js\n({ test: () => assert(__userGlobals has(\"custom_key\")) })\nYou should modify the custom_key value into 'happycoding' js\n({ test: () => assert equal(__userGlobals get(\"custom_key\"), \"happycoding\") })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message lower():\n# Append any non-letter character to the message\nif not char isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet index(key_char)\nindex = alphabet find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')\n--fcc-editable-region--\n```\n--solutions--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message lower():\n# Append any non-letter character to the message\nif not char",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e5991af57d1ae0e35f0a.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4244e11ec34e4033d5b58a28656db726",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e5991af57d1ae0e35f0a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(index + offset*direction) % len(alphabet) final_message += alphabet[new_index] return final_message def encrypt(message, key): return vigenere(message, key) def decrypt(message, key): return vigenere(message, key, -1) print(f'\\nEncrypted text: {text}') print(f'Key: {custom_key}') decryption = decrypt(text, custom_key) print(f'\\nDecrypted text: {decryption}\\n') --fcc-editable-region-- ``` --solutions-- ```py text = 'mrttaqrhknsw ih puggrur' custom_key = 'happycoding' def vigenere(message, key, direction=1): key_index = 0 alphabet = 'abcdefghijklmnopqrstuvwxyz' final_message = '' for char in message lower(): # Append any non-letter character to the message if not charisalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet index(key_char)\nindex = alphabet find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6555e5991af57d1ae0e35f0a.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f46db96a6894241705ced592c24e2f98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65952b70924edb449faf1950.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65952b70924edb449faf1950\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nDeclare a new variable named shifted. Use the bracket notation to access the value of alphabet at index index and assign it to your new variable.\n--hints--\nYou should declare a variable named shifted. Pay attention to place the variable name at the beginning of the line.\njs\nassert.match(code, /^shifted\\s*=/m)\nYou should assign alphabet[index] to your shifted variable.\njs\nassert.match(code, /^shifted\\s*=\\s*alphabet\\s*\\[\\s*index\\s*\\]\\s*(#.*)?$/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0].lower())\nprint(index)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65952b70924edb449faf1950.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "160a04ce8db732fe2498aa88b6f71b3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659530ca823d6c47f61daa8a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 659530ca823d6c47f61daa8a\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nPrint your shifted variable.\n--hints--\nYou should print your shifted variable. Pay attention to place the function call at the beginning of the line.\njs\nassert.match(code, /^print\\s*\\(\\s*shifted\\s*\\)/m)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0].lower())\nprint(index)\nshifted = alphabet[index]\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659530ca823d6c47f61daa8a.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "191e11460877d7be417ecf428e6f0eed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a51c9e000b660122b8b29e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65a51c9e000b660122b8b29e\ntitle: Step 94\nchallengeType: 20\ndashedName: step-94\n--description--\nUncomment the decryption variable and change its value by passing text as the first argument to decrypt.\n--hints--\nYour decryption variable should have the value of decrypt(text, custom_key).\njs\n({ test: () => assert.match(code, /^decryption\\s*=\\s*decrypt\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message.lower():\n# Append any non-letter character to the message\nif not char.isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet.index(key_char)\nindex = alphabet.find(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(encryption, custom_key)\n--fcc-editable-region--\nprint(decryption)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a51c9e000b660122b8b29e.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f690459e928747bc151c605f53bb24bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6624e0ec0bf47017eed84b1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6624e0ec0bf47017eed84b1f\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nThe first kind of cipher you are going to build is called a Caesar cipher.  Specifically, you will take each letter in your message, find its position in the alphabet, take the letter located after 3 positions in the alphabet, and replace the original letter with the new letter.\nTo implement this, you will use the .find() method discussed in the previous step. Modify your existing .find() call passing it text[0] as the argument instead of 'z'.\n--hints--\nYou should modify your existing alphabet.find('z') call passing text[0] to the method.\njs\nassert.match(code, /^alphabet\\.find\\s*\\(\\s*text\\s*\\[\\s*0\\s*\\]\\s*\\)/m)\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nalphabet.find('z')\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 939,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\6624e0ec0bf47017eed84b1f.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "124df5056a4d0958d7d5d11a51c80d6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659db3e3670d3e712be82593.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 659db3e3670d3e712be82593\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nRepeating the process of locating the letter inside the alphabet and determine the shifted letter for each character in text can be tedious. Thankfully, you can simplify it using a loop.\nFor now, remove all the lines of code below the declaration of the alphabet variable.\n--hints--\nYou should still have text = 'Hello World' in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^text\\s*=\\s*(\"|')Hello World\\1/m)\nYou should still have shift = 3 in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^shift\\s*=\\s*3/m)\nYou should still have alphabet = 'abcdefghijklmnopqrstuvwxyz' in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1/m)\nYou should delete index variable and its value.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /index\\s*=/)\nYou should not have print(index) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*index\\s*\\)/)\nYou should delete the shifted variable and its value.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /shifted\\s*=/)\nYou should not have print(shifted) in your code.\njs\nconst commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*shifted\\s*\\)/)\nYour code contains invalid syntax and/or invalid indentation.\njs\n({test: () => assert(true) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ntext = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0].lower())\nprint(index)\nshifted = alphabet[index + shift]\nprint(shifted)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\659db3e3670d3e712be82593.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d2cad7b500e8d853b0f757f9d47006f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\666064e915eba7aa1de03f6b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666064e915eba7aa1de03f6b\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nNow, fix the error by removing the line that tries to print the alphabet variable outside of the caesar function.\n--hints--\nYou should remove the print(alphabet) line.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"print(alphabet)\")`)) })\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\ndef caesar():\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\nprint(alphabet)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\666064e915eba7aa1de03f6b.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f61d39660fa27fcf45f77f5b3f01bf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\66605a64a9822f01ec5ae8ce.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66605a64a9822f01ec5ae8ce\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nIn Python, the scope of a variable determines where that variable can be accessed:\nVariables defined outside a function have a global scope and they can be accessed from any part of your code.\nVariables defined inside a function are local to that function and cannot be accessed outside of it.\nTo see this in action, try to print the alphabet variable at the end of your code. This will raise a NameError exception.\nYou should see an error message indicating that alphabet is not defined. This is because alphabet is defined inside the caesar function and is not accessible outside of it.\n--hints--\nYou should attempt to print the alphabet variable outside the caesar function.\njs\nassert.match(code, /^print\\(\\s*alphabet\\s*\\)/m)\n--seed--\n--seed-contents--\n```py\ntext = 'Hello Zaira'\nshift = 3\ndef caesar():\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\nfor char in text.lower():\nif char == ' ':\nencrypted_text += char\nelse:\nindex = alphabet.find(char)\nnew_index = (index + shift) % len(alphabet)\nencrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1413,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\66605a64a9822f01ec5ae8ce.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1c26ab9ebc942d174b3131ecaf8f4c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef181dad3d96b14a21a03e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef181dad3d96b14a21a03e\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you will find the approximate square root of a given number using the bisection method.\nThe bisection method is a technique for finding the roots of a real-valued function. It works by narrowing down an interval where the square root lies until it converges to a value within a specified tolerance.\nBegin by creating a function named square_root_bisection. Leave the parameters empty for now.\n--hints--\nYou should define the function square_root_bisection with no parameters.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isfunction(square_root_bisection)\n`))\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef181dad3d96b14a21a03e.md",
      "source_type": "git_repo"
    },
    "token_count": 194,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0e55cdf75fd49610b9ea7d6717df33a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef190c6b51e9b5a5f7ed29.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef190c6b51e9b5a5f7ed29\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nGive the square_root_bisection function the following parameters:\nsquare_target: The number for which you want to find the square root.\ntolerance (optional): The acceptable difference between the square of the approximate root value and the actual target value (default is 1e-7).  The tolerance 1e-7 implies that the solution will be accurate to within 0.0000001 of the true value and is a good default choice that balances accuracy and performance.\nmax_iterations (optional): The maximum number of iterations to perform (default is 100). If the method doesn't converge within this limit, you'll assume the solution is not found.\n--hints--\nYour function should have these parameters: square_target, tolerance = 1e-7, and max_iterations = 100. The order matters.\njs\n({\ntest: () => assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").has_args(\"square_target, tolerance=1e-7, max_iterations=100\")`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef square_root_bisection():\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef190c6b51e9b5a5f7ed29.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "63f2876fe03b2c69e5f50fcfbd1753f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef19425d1b27b6c930bae6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef19425d1b27b6c930bae6\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nIf the number for which you want to find the square root is negative, the code should raise an error as the square root of a negative number is not defined in real numbers.\nRemove the pass statement and create an if statement to check if square_target is less than 0.\n--hints--\nYou should remove the pass keyword.\njs\n({\ntest: () => {\nassert.isFalse(runPython(`_Node(_code).find_function(\"square_root_bisection\").has_pass()`))\n}\n})\nYou should create an if statement to check if square_target < 0.\n``js\n({\ntest: () => {\nassert.isFalse(runPython(_Node(_code).find_function(\"square_root_bisection\").find_if(\"square_target < 0\").is_empty()`))\n}\n})\n```\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef square_root_bisection(square_target, tolerance = 1e-7, max_iterations = 100):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef19425d1b27b6c930bae6.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0db3cb3ec24a609d6f1f2a23b224ace2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a450e8fb2c9d75c7378d28.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65a450e8fb2c9d75c7378d28\ntitle: Step 88\nchallengeType: 20\ndashedName: step-88\n--description--\nSince this time you are starting from an encrypted string to decrypt, you won't need the encryption variable anymore Delete encryption and the print(encryption) call Also, comment out the last two lines of your code --hints--\nYou should delete the encryption variable and its value js\nconst commentless_code = __helpers python removeComments(code);\nassert isFalse(/encryption\\s*=\\s*encrypt\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/ test(commentless_code))\nYou should not have print(encryption) in your code js\nconst commentless_code = __helpers python removeComments(code);\nassert isFalse(/print\\s*\\(\\s*encryption\\s*\\)/ test(commentless_code))\nYou should turn decryption = decrypt(encryption, custom_key) into a comment js\nassert(code match(/#\\s*decryption\\s*=/));\nYou should turn print(decryption) into a comment js\nassert(code match(/#\\s*print\\s*\\(\\s*decryption\\s*\\)/));\nYour code contains invalid syntax and/or invalid indentation js\n({test: () => assert(true) })\n--seed--\n--seed-contents--\n```py\ntext = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'python'\ndef vigenere(message, key, direction=1):\nkey_index = 0\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nfinal_message = ''\nfor char in message lower():\n# Append any non-letter character to the message\nif not char isalpha():\nfinal_message += char\nelse:\n# Find the right key character to encode/decode\nkey_char = key[key_index % len(key)]\nkey_index += 1\n# Define the offset and the encrypted/decrypted letter\noffset = alphabet index(key_char)\nindex = alphabet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2283,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a450e8fb2c9d75c7378d28.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3240a5fb9b47952a14f32d6d860989a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a450e8fb2c9d75c7378d28.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--seed-- --seed-contents-- ```py text = 'mrttaqrhknsw ih puggrur' custom_key = 'python' def vigenere(message, key, direction=1): key_index = 0 alphabet = 'abcdefghijklmnopqrstuvwxyz' final_message = '' for char in message lower(): # Append any non-letter character to the message if not char isalpha(): final_message += char else: # Find the right key character to encode/decode key_char = key[key_index % len(key)] key_index += 1 # Define the offset and the encrypted/decrypted letter offset = alphabet index(key_char) index = alphabetfind(char)\nnew_index = (index + offset*direction) % len(alphabet)\nfinal_message += alphabet[new_index]\nreturn final_message\ndef encrypt(message, key):\nreturn vigenere(message, key)\ndef decrypt(message, key):\nreturn vigenere(message, key, -1)\n--fcc-editable-region--\nencryption = encrypt(text, custom_key)\nprint(encryption)\ndecryption = decrypt(encryption, custom_key)\nprint(decryption)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2283,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\65a450e8fb2c9d75c7378d28.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fc300687cea41fe93efbdb9e1a952e99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef19ec318e2fb9066381e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef19ec318e2fb9066381e3\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nYou'll create separate cases for when square_target is 0 or 1.\nBegin by creating an if statement to check if square_target is equal to 1.\n--hints--\nYou should create an if statement to check that square_target == 1.\njs\n({\ntest: () =>\n{\nassert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_conditions()[0].is_equivalent(\"square_target == 1\")`))\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef19ec318e2fb9066381e3.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "135a6c4d71a0f9111b28a1b11a5fadff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef198fde24dfb7ff675b42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef198fde24dfb7ff675b42\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nThe raise statement allows you to force a specific exception to occur. It consists of the raise keyword followed by the exception type, and enables you to provide a custom error message:\npy\nraise ValueError(\"Invalid value\")\nWhen the code above runs, a ValueError is raised and the message \"Invalid value\" is shown to the user.\nIf the square_target is less than 0, no real-valued square root can be computed. Therefore, raise a ValueError with the message 'Square root of negative number is not defined in real numbers'. Don't forget to remove the pass keyword.\n--hints--\nYou should remove the pass keyword.\njs\n({\ntest: () => {\nassert.isFalse(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[0].find_bodies()[0].has_pass()`))\n}\n})\nYou should raise a ValueError with the message 'Square root of negative number is not defined in real numbers' inside the if body.\n```js\n({\ntest: () => {\nassert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[0].find_bodies()[0].is_equivalent(\"raise ValueError('Square root of negative number is not defined in real numbers')\")`))\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef198fde24dfb7ff675b42.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7097d415007d8b077d664dfef9d5d69d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a1fcb527bba0ca82ccf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1a1fcb527bba0ca82ccf\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nIf the square_target is equal to  1, declare a variable root and assign it the value 1 . Also, print the message 'The square root of {square_target} is 1'. Remember to format the message using an f-string.\n--hints--\nYou should remove the pass keyword.\njs\n({\ntest: () =>\n{\nassert.isFalse(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[0].has_pass()`))\n}\n})\nYou should assign the value 1 to the root variable and print the message 'The square root of {square_target} is 1' inside the if body.\n```js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[0].is_equivalent(\"root = 1\\\\nprint(f'The square root of {square_target} is 1')\")));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a1fcb527bba0ca82ccf.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "03c40371d8c5b5ff4b5e7d595fb5b8ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a720d6e65bbb0d22463.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1a720d6e65bbb0d22463\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nNext, you are going to work on the cases where the square_target is a positive number apart from 1 or 0.\nCreate an else clause to handle these cases.\n--hints--\nCreate an else clause and do not forget to add a pass keyword.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_conditions()[2] == _Node()`))\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1017,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a720d6e65bbb0d22463.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d918786e2b0972c4819be92a4a5200b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1afca9a8f6be0d4150ba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1afca9a8f6be0d4150ba\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nSet the value of root to None as at this point, you don't have an approximate value yet.\n--hints--\nThe value of root should be None.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].is_equivalent(\"low = 0\\nhigh = max(1, square_target)\\nroot = None\")`));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\n--fcc-editable-region--\nelse:\nlow = 0\nhigh = max(1, square_target)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1042,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1afca9a8f6be0d4150ba.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8577e64d3179a0e44cf898ad75d4bf9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a50049cf9bada13266f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1a50049cf9bada13266f\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nCreate an elif statement to check if square_target is equal to 0. If it is, assign the value 0 to the root variable. Also, print the message 'The square root of {square_target} is 0'. Remember to format the message using an f-string.\n--hints--\nYou should have an elif statement to check the condition square_target == 0.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_conditions()[1].is_equivalent(\"square_target == 0\")`));\n}\n})\n```\nYou should assign the value 0 to the root variable and pass the argument f'The square root of {square_target} is 0' to a print call.\n```js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[1].is_equivalent(\"root = 0\\\\nprint(f'The square root of {square_target} is 0')\")));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1a50049cf9bada13266f.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "63d8d7135635d7d587c43adda6e130fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1aacca094bbcc2e2a3c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1aacca094bbcc2e2a3c8\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nIn Python, the max() function returns the largest of the input values.\npython\nmax(1, 2, 3) # Output: 3\nThe variables low and high will be used to define the initial interval where the square root lies.\nInside the else clause, initialize the low variable to 0 and the high variable to be the maximum of either 1 or square_target as the square root of a number is always less than or equal to the number itself.\n--hints--\nYou should remove the pass keyword.\njs\n({\ntest: () =>\n{\nassert.isFalse(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].has_pass()`))\n}\n})\nYou should declare a variable low and assign it 0.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_variable(\"low\").is_equivalent(\"low = 0\")`));    }\n})\n```\nYou should declare a variable high and use the max() function to assign it the maximum value between 1 and square_target.\n```js\n({ test: () => assert(runPython(node = _Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_variable(\"high\")\nvalues = [\"high = max(1, square_target)\", \"high = max(square_target, 1)\"]\nany(node.is_equivalent(val) for val in values))) })\n```\n--seed--\n--seed-contents--\npy\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\n--fcc-editable-region--\nelse:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1969,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1aacca094bbcc2e2a3c8.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a06ebb79c1fa3f4ef6416bf7ac0ed3b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c34a541afc12dbb849d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1c34a541afc12dbb849d\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nThe abs() function returns the absolute value of a number, which is always positive, regardless of the number sign. You will use it to check that the estimated square root is close enough to the actual value.\nNow, create an if statement to check if the absolute value of the difference between square_mid and square_target is within the specified tolerance.\n--hints--\nYou should have an if statement with the condition abs(square_mid - square_target) < tolerance: inside the body of the for loop.\njs\n({\ntest: () =>\n{\nassert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_conditions()[0].is_equivalent(\"abs(square_mid - square_target) < tolerance\")`))\n}\n})\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\n--fcc-editable-region--\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c34a541afc12dbb849d.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "81776b5ef1da5d484ac4edb97d409fca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1be2b958cabf712296cd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1be2b958cabf712296cd\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nNow you'll repeatedly narrow down the interval by finding the midpoint of the current interval and comparing the square of the midpoint with the target value.\nFor that, inside the else block, create a for loop that runs up to max_iterations times.\nFor your loop, use the range function, which generates a sequence of numbers you can iterate over. The syntax is range(start, stop, step), where start is the starting integer (inclusive), stop is the last integer (not inclusive), and step is the difference between a number and the previous one in the sequence.\nAlso, use _ as a loop variable. The _ acts as a placeholder and is useful when you need to use a variable but don't actually need its value.\n--hints--\nYou should create a for loop to iterate over range(max_iterations). Use _ as the loop variable.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].is_equivalent(\"for _ in range(max_iterations):\\n    pass\")`));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1be2b958cabf712296cd.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d44560af5bce62457856693e2fca0b9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1cb031de30c2cde64c12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1cb031de30c2cde64c12\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nIf the difference is within the specified tolerance, set the value of root to mid and break out of the loop.\n--hints--\nYou should remove the existing pass statement.\n``js\n({\ntest: () =>\n{\nassert.isFalse(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_bodies()[0].has_pass()`))\n}\n})\n```\nYou should assign the value of mid to root and break out of the loop.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_bodies()[0].is_equivalent(\"root = mid\\nbreak\")`))\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\n--fcc-editable-region--\nif abs(square_mid - square_target) < tolerance:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1625,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1cb031de30c2cde64c12.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "22483c4d44f004cede3eab26b5b9ec0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1cda150a59c3b8306944.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1cda150a59c3b8306944\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nIf the difference is not within the specified tolerance, create an elif statement to check if square_mid is less than square_target.\nAssign the value of mid to low as the square root would now lie between low and mid.\n--hints--\nYou should create an elif statement that checks if square_mid < square_target.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_conditions()[1].is_equivalent(\"square_mid < square_target\")`))\n}\n})\n```\nYou should assign the value of mid to low.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_bodies()[1].is_equivalent(\"low = mid\")`))\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\n--fcc-editable-region--\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1815,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1cda150a59c3b8306944.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0714dfeac25c5c4ccd7c32e164b174e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c0a03fcabc04ded7e69.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1c0a03fcabc04ded7e69\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nInside the for loop, calculate the midpoint of the interval ranging from low to high Assign this value to a variable mid Also, calculate the square of the midpoint (mid) and store it in the variable square_mid --hints--\nYou should remove the pass keyword ``js\n({\ntest: () =>\n{\nassert isFalse(runPython(_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_for_loops()[0] find_bodies()[0] has_pass()`))\n}\n})\n```\nYou should declare a variable mid and assign it (low + high) / 2 inside the body of the for loop ``js\n({\ntest: () =>\n{\nassert(runPython(\nnode = _Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_for_loops()[0] find_bodies()[0] find_variable(\"mid\")\nvalues = [\"mid = (low + high) / 2\", \"mid = (high + low) / 2\"]\nany(node is_equivalent(val) for val in values)\n`))\n}\n})\n```\nYou should declare a variable square_mid and assign it mid**2 inside the body of the for loop js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_for_loops()[0] find_bodies()[0] find_variable(\"square_mid\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c0a03fcabc04ded7e69.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c7c579402110b71c684ece1ee5a9182e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c0a03fcabc04ded7e69.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "body of the for loop ``js ({ test: () => { assert(runPython( node = _Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_for_loops()[0] find_bodies()[0] find_variable(\"mid\") values = [\"mid = (low + high) / 2\", \"mid = (high + low) / 2\"] any(node is_equivalent(val) for val in values) `)) } }) ``` You should declare a variable square_mid and assign it mid**2 inside the body of the for loop js ({ test: () => assert(runPython(`_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_for_loops()[0] find_bodies()[0] find_variable(\"square_mid\")is_equivalent(\"square_mid = mid**2\")`)) })\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\n--fcc-editable-region--\nfor _ in range(max_iterations):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1c0a03fcabc04ded7e69.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6adb08918d0e926eb241243902c671de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d104c2be9c4d8e22075.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1d104c2be9c4d8e22075\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nIf both the if and elif conditions are not met, the value of mid would be greater than square_target. In this case, create an else clause and assign the value of mid to high.\n--hints--\nYou should have an else clause.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_conditions()[2]== _Node()`));\n}\n})\n```\nYou should assign the value of mid to high in the else clause.\njs\n({\ntest: () =>\n{\nassert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_ifs()[0].find_bodies()[2].is_equivalent(\"high = mid\")`));\n}\n})\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\n--fcc-editable-region--\nelif square_mid < square_target:\nlow = mid\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1756,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d104c2be9c4d8e22075.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e992abd829320dcd1a229df219e037ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1dd722f6e7c8294eeec4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1dd722f6e7c8294eeec4\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nFinally, return the value of root from the square_root_bisection function.\n--hints--\nYou should return root at the end of the function.\njs\n({\ntest: () =>\n{\nconst pyClassStr = runPython(`str(_Node(_code).find_function(\"square_root_bisection\"))`);\nassert.match(pyClassStr, /return\\s*root/)\n}\n})\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\n--fcc-editable-region--\nif root is None:\nprint(f\"Failed to converge within {max_iterations} iterations.\")\nelse:\nprint(f'The square root of {square_target} is approximately {root}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1dd722f6e7c8294eeec4.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d069bb33ea28972d817d28794e55db1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1e10268f8ec9121446d1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1e10268f8ec9121446d1\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nOutside the function definiton, create a variable N and assign the value of 16 to it.\n--hints--\nYou should have the variable N = 16 outside the function definition.\njs\n({\ntest: () =>\n{\nassert(runPython(`_Node(_code).find_variable(\"N\").is_equivalent(\"N = 16\")`))\n}\n})\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\nif root is None:\nprint(f\"Failed to converge within {max_iterations} iterations.\")\nelse:\nprint(f'The square root of {square_target} is approximately {root}')\nreturn root\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1e10268f8ec9121446d1.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a6f012f0d0d3613be8fb9243cd07777",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d924ff2e5c7031c6ce8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1d924ff2e5c7031c6ce8\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nCreate an else clause to handle the case where the value of root is not None, indicating that a root has been found. If it is not None, print the message 'The square root of {square_target} is approximately {root}'. Remember to format using an f-string.\n--hints--\nYou should create an else clause.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_ifs()[0].find_conditions()[1] == _Node()`));\n}\n})\n```\nYou should print f'The square root of {square_target} is approximately {root}' within the else body.\n``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_ifs()[0].find_bodies()[1].is_equivalent(\"print(f'The square root of {square_target} is approximately {root}')\")`));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\n--fcc-editable-region--\nif root is None:\nprint(f\"Failed to converge within {max_iterations} iterations.\")\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d924ff2e5c7031c6ce8.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "afaf7ecd9d4c65028b25e99085b2ad0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4eb814cc977c95cd7df0e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4eb814cc977c95cd7df0e\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you are going to create a Binary Search Tree (BST). A BST is a data structure in which each node has at most two children, with the left child containing values less than the parent node and the right child containing values greater than the parent node, allowing for efficient searching and sorting operations.\nThis is what a Binary Search Tree looks like:\nBegin by defining an empty TreeNode class. The TreeNode class represents a node in a binary search tree. Use the pass keyword to fill the class body and avoid an error.\n--hints--\nYou should use the class keyword to declare an empty class named TreeNode.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isclass(TreeNode)\n`));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4eb814cc977c95cd7df0e.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "102a412d81c95065a1262135998a6c35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d5e3d2927c5e0f4997b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1d5e3d2927c5e0f4997b\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nIn Python, the is keyword checks for object identity It's used to determine if two variables point to the same object in memory In contrast to is, the equality operator (==) determines if the values of two objects are the same, regardless of whether they are the same object in memory Outside the for loop, create an if statement to check if  root is None If it is, print the message 'Failed to converge within {max_iterations} iterations ' Remember to format the message using an f-string --hints--\nYou should create an if statement that checks if root is None ``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_ifs()[0] find_conditions()[0] is_equivalent(\"root is None\")`));\n}\n})\n```\nYou should pass the argument f'Failed to converge within {max_iterations} iterations ' to the print function ``js\n({\ntest: () =>\n{\nassert(runPython(_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_ifs()[0] is_equivalent(\"if root is None:\\n    print(f'Failed to converge within {max_iterations} iterations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d5e3d2927c5e0f4997b.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "64590f0f2b22dcb346f96920004fe732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d5e3d2927c5e0f4997b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Remember to format the message using an f-string --hints-- You should create an if statement that checks if root is None ``js ({ test: () => { assert(runPython(_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_ifs()[0] find_conditions()[0] is_equivalent(\"root is None\")`)); } }) ``` You should pass the argument f'Failed to converge within {max_iterations} iterations ' to the print function ``js ({ test: () => { assert(runPython(_Node(_code) find_function(\"square_root_bisection\") find_ifs()[1] find_bodies()[2] find_ifs()[0] is_equivalent(\"if root is None:\\n print(f'Failed to converge within {max_iterations} iterations')\")`));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1d5e3d2927c5e0f4997b.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "235406ab35b7e1dbb469b0a28e05632b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4ef8463f869d0eaf87c67.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4ef8463f869d0eaf87c67\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nInside the TreeNode class, replace pass with an __init__ method so that you can initialize the attributes of the object. Don't add any parameters for now.\n--hints--\nYou should remove pass keyword from the TreeNode class and move it inside the __init__ method.\njs\n({\ntest: () => {\nconst pyClassStr = runPython(`str(_Node(_code).find_class(\"TreeNode\"))`);\nconst to_test = pyClassStr.split(\"\\n\");\nassert.notInclude(to_test[1], \"pass\");\n},\n});\nYou should define an __init__ method inside your TreeNode class. Remember to use the pass keyword inside.\njs\n({\ntest: () => {\nassert(\nrunPython(`_Node(_code).find_class(\"TreeNode\").has_function(\"__init__\")`)\n);\n},\n});\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass TreeNode:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4ef8463f869d0eaf87c67.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d88685b1522a362a7667a15ef220d01a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f013851cefd1a4fe4c96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f013851cefd1a4fe4c96\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nThe __init__ method takes two parameters: self (which represents the instance of the class being created) and key (the value to be stored in the node). Add those two parameters to the __init__() method.\n--hints--\nYou should add the self parameter to the method.\njs\n({ test: () => assert.match(code, /def\\s+__init__\\s*\\(\\s*self\\s*/) });\nYou should add the key parameter to the method.\njs\n({\ntest: () => assert.match(code, /def\\s+__init__\\s*\\(\\s*self\\s*,\\s*key\\s*\\)/)\n});\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass TreeNode:\ndef __init__():\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 755,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f013851cefd1a4fe4c96.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "210eca4999b5ea628e194fc5b28cd2b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f02dbd3557d23f12db62.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f02dbd3557d23f12db62\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nInside the __init__ method, delete pass and assign the value of the key parameter to the key attribute of the node using self.key.\nThis means that the key attribute of the TreeNode instance will be set to the value passed during the object's creation.\n--hints--\nYou should remove the pass statement from the __init__ method.\n``js\n({\ntest: () => {\nassert.isFalse(\nrunPython(_Node(_code).find_class(\"TreeNode\").find_function(\"init\").has_pass()`\n)\n);\n},\n});\n```\nYou should assign the value of the key parameter to the key attribute of the node using self.key.\njs\n({ test: () => assert.match(code, /^\\s{8}self\\.key\\s*=\\s*key/m) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass TreeNode:\ndef __init__(self, key):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 965,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f02dbd3557d23f12db62.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94a6ba698e9422ba753bdb67f2e5a19b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f07da204f4d2f325fbd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f07da204f4d2f325fbd3\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nInside the __init__ method, initialize the left and right attributes of the node to None. This is because when a node is first created, it doesn't have any left or right children. Remember to use the self keyword.\n--hints--\nYou should assign None to the left attribute of the node using self.left.\njs\n({ test: () => assert.match(code, /self\\.left\\s*=\\s*None/m) })\nYou should assign None to the right attribute of the node using self.right.\njs\n({ test: () => assert.match(code, /self\\.right\\s*=\\s*None/m) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f07da204f4d2f325fbd3.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0d08a25999b5849ce2a5e1ef22be4b41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1eac497754cafa12a26c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ef1eac497754cafa12a26c\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nCall the square_root_bisection function with the N variable as the argument This will print the result to the console Experiment with larger values With this, you have successfully implemented the bisection method to find the square root of a number --hints--\nYou should call the square_root_bisection function with the variable N as the argument js\n({\ntest: () => assert(runPython(`_Node(_code) has_call(\"square_root_bisection(N)\")`))\n})\n--seed--\n--seed-contents--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\nif root is None:\nprint(f\"Failed to converge within {max_iterations} iterations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1eac497754cafa12a26c.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "56e705902750dc00541cbc41feece3fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1eac497754cafa12a26c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "square root of {square_target} is 1') elif square_target == 0: root = 0 print(f'The square root of {square_target} is 0') else: low = 0 high = max(1, square_target) root = None for _ in range(max_iterations): mid = (low + high) / 2 square_mid = mid**2 if abs(square_mid - square_target) < tolerance: root = mid break elif square_mid < square_target: low = mid else: high = mid if root is None: print(f\"Failed to converge within {max_iterations} iterations\")\nelse:\nprint(f'The square root of {square_target} is approximately {root}')\nreturn root\n--fcc-editable-region--\nN = 16\n--fcc-editable-region--\n```\n--solutions--\n```py\ndef square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\nif square_target < 0:\nraise ValueError('Square root of negative number is not defined in real numbers')\nif square_target == 1:\nroot = 1\nprint(f'The square root of {square_target} is 1')\nelif square_target == 0:\nroot = 0\nprint(f'The square root of {square_target} is 0')\nelse:\nlow = 0\nhigh = max(1, square_target)\nroot = None\nfor _ in range(max_iterations):\nmid = (low + high) / 2\nsquare_mid = mid**2\nif abs(square_mid - square_target) < tolerance:\nroot = mid\nbreak\nelif square_mid < square_target:\nlow = mid\nelse:\nhigh = mid\nif root is None:\nprint(f\"Failed to converge within {max_iterations} iterations \")\nelse:\nprint(f'The square root of {square_target} is approximately {root}')\nreturn root\nN = 16\nsquare_root_bisection(N)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\65ef1eac497754cafa12a26c.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99e1282d98da16a3a102a1ceb95d04ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f09e074dd8d37830ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f09e074dd8d37830ea00\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nCreate another empty class called BinarySearchTree that represents a binary search tree.\n--hints--\nYou should have a class named BinarySearchTree. Remember to use the pass keyword.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isclass(BinarySearchTree)\n`));\n}\n})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f09e074dd8d37830ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 147,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "82232df6b9c9c5c97f386506ed839ae2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f195de7e2ad5932be717.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f195de7e2ad5932be717\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nNext, you need to define a mechanism to insert nodes in the tree. For that, you need to define an _insert method, which is a helper function and would be used by the actual insert method later on.\nThis method is recursive, meaning it calls itself to traverse the tree until the appropriate location for the new node is found.\nDefine an _insert method with the parameters self, node and key.\n--hints--\nYou should define an _insert method within the BinarySearchTree class. Remember to use pass.\njs\n({ test: () => assert.match(code, /def\\s+_insert\\s*\\([^(]*\\)\\s*:/m) })\nYour _insert method should take three parameters: self, node and key.\njs\n({ test: () => assert.match(code, /def\\s+_insert\\s*\\(\\s*self\\s*,\\s*node\\s*,\\s*key\\s*\\)\\s*:/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\nclass BinarySearchTree:\ndef init(self):\nself.root = None\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f195de7e2ad5932be717.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9665c353ca8ef95d8856015b20fe3cd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f22498d22ed775ef8efb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f22498d22ed775ef8efb\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nNow you need to check if the node parameter is None. If it is, this means that the method has reached a leaf node or an empty spot in the tree where the new node should be inserted.\nInside the _insert method body, replace pass with an if statement that checks if node is None.\nInside the new if block, return TreeNode(key) to  create a new TreeNode instance with the provided key. This will become the new leaf node, effectively inserting the key into the tree.\n--hints--\nYou should not have pass in your _insert method.\n``js\n({ test: () => assert.isFalse(runPython(_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_insert\").has_pass()`)) })\n```\nYou should write an if statement to check if node is None.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst ins = __helpers.python.getDef(\"\\n\"+transformedCode, \"_insert\");\nconst {function_body} = ins;\nassert(function_body.match(/^\\s{8}if\\s+node\\s+is\\s+None\\s*:/m));\n}\n})\nYou should return TreeNode(key) from the if block.\njs\n({ test: () =>\n{\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst ins = __helpers.python.getDef(\"\\n\"+transformedCode, \"_insert\");\nconst {function_body} = ins;\nassert(function_body.match(/^(\\s{8})if\\s+node\\s+is\\s+None\\s*:\\s*^\\1\\s{4}return\\s+TreeNode\\s*\\(\\s*key\\s*\\)/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f22498d22ed775ef8efb.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01b806de5ab9445b12e46686f965c0e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f0d32ca17ad4b1636b0e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f0d32ca17ad4b1636b0e\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nInside the __init__ method, delete pass and initialize root to the value None.\nThe root attribute represents the root node of the binary search tree. Since this is the constructor when a new BinarySearchTree object is created, it starts with an empty tree, so the root attribute is set to None.\n--hints--\nYou should remove the pass statement from the __init__ method.\n``js\n({\ntest: () => {\nconst pyClassStr = runPython(str(_Node(_code).find_class(\"BinarySearchTree\"))`\n);\nassert.notInclude(pyClassStr, \"pass\");\n},\n});\n```\nYou should initialize the root attribute to None using self.root.\njs\n({ test: () => assert.match(code, /^\\s{8}self\\.root\\s*=\\s*None/m) })\n--seed--\n--seed-contents--\npy\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\nclass BinarySearchTree:\ndef __init__(self):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1117,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f0d32ca17ad4b1636b0e.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8f9e96647923658f85bdfca37289b632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f0b82db314d3fcc0b8e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f0b82db314d3fcc0b8e1\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nWithin the BinarySearchTree class, replace pass with an __init__ method and add a self parameter to this method.\n--hints--\nYou should remove the pass keyword from the BinarySearchTree class.\n``js\n({\ntest: () => {\nconst pyClassStr = runPython(str(_Node(_code).find_class(\"BinarySearchTree\"))`\n);\nconst to_test = pyClassStr.split(\"\\n\");\nassert.notInclude(to_test[1], \"pass\");\n},\n});\n```\nYou should define an __init__ method and add a self parameter to this method. Remember to use the pass keyword inside the method body.\njs\n({ test: () => assert.match(code, /^\\s{4}def\\s+__init__\\s*\\(\\s*self\\s*\\)\\s*:/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\nclass BinarySearchTree:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f0b82db314d3fcc0b8e1.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "252adf5cfb9f02bb19eb3d9b8b2c4cb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2b7178afed8e88f782f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f2b7178afed8e88f782f\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nIf key < node.key evaluates to True, then the new node should be placed in the left subtree.\nDelete pass and recursively call the _insert method with left child as the first argument and key as the second argument. Assign the result to the left attribute of the current node.\n--hints--\nYou should remove the pass keyword from the if block.\njs\n({\ntest: () => {\nassert.isFalse(\nrunPython(\n`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_insert\").find_if(\"key < node.key\").find_bodies()[0].has_pass()`\n)\n);\n},\n});\nYou should call the self._insert method passing node.left and key as the arguments.\njs\n({ test: () => assert.match(code, /self\\._insert\\(\\s*node\\.left\\s*,\\s*key\\s*\\)/) });\nYou should assign the result of your self._insert() call to the left attribute of the current node.\njs\n({ test: () => assert.match(code, /node\\.left\\s*=\\s*self\\._insert\\(\\s*node\\.left\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1538,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2b7178afed8e88f782f.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4df486b92a71e2dd6eb9154da04ac770",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2851645e8d84d14f5d1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f2851645e8d84d14f5d1\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nNow you need to recursively traverse the tree and insert the values using the principle for binary trees:\nValues smaller than the key are placed in the left subtree\nValues greater than the key are placed in the right subtree\nAfter your existing conditional statement, write another if statement to check if key is less than node.key.\n--hints--\nYou should write another if statement to check if key is less than node.key. Remember to use the pass keyword.\njs\n({ test: () => assert(runPython(` _Node(_code).find_class(\"BinarySearchTree\").find_function(\"_insert\").find_ifs()[1].find_conditions()[0].is_equivalent(\"key < node.key\")`)) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1157,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2851645e8d84d14f5d1.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "07ab0878777e863642f5fccc25219431",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2d9fd872fd99ac659dd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f2d9fd872fd99ac659dd\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nAdd an elif conditional statement that checks if key > node.key.\n--hints--\nYou should add an elif conditional statement to check if key > node.key. Remember to use the pass keyword.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_insert\").find_ifs()[1].find_conditions()[1].is_equivalent(\"key > node.key\")`))})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f2d9fd872fd99ac659dd.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "004f59366fa6e68b5da551bf6e4d5eab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f300da28d8da361bfa93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f300da28d8da361bfa93\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nInside your elif clause, replace pass with a call to the _insert method with right child of the current node as the first argument  and key as the second argument. Assign the result to the right attribute of the current node.\n--hints--\nYou should remove the pass keyword from the elif block.\n``js\n({\ntest: () => {\nconst pyClassStr = runPython(str(_Node(_code).find_class(\"BinarySearchTree\"))`\n);\nassert.notInclude(pyClassStr, \"pass\");\n},\n});\n```\nYou should call the self._insert() method passing node.right and key as the arguments.\njs\n({ test: () => assert.match(code, /self\\._insert\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/) });\nYou should assign the result of your self._insert() call to the right attribute (node.right) of the current node.\njs\n({ test: () => assert.match(code, /node\\.right\\s*=\\s*self\\._insert\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1538,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f300da28d8da361bfa93.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c5765d925f9b6f6dc653f0beba9d985d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f37ba6cbcfdc77e24165.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f37ba6cbcfdc77e24165\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nThe insert method will be called by the user. In addition to the self parameter, it will also need a key parameter. This parameter will be the key value to insert into the binary search tree.\nAdd key as the second parameter to the function definition.\n--hints--\nThe insert method should contain the self parameter.\njs\n({ test: () => assert.match(code, /def\\s+insert\\s*\\(\\s*self\\s*,/) });\nThe insert method should contain the key parameter.\njs\n({ test: () => assert.match(code, /def\\s+insert\\s*\\(\\s*self\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\n--fcc-editable-region--\ndef insert(self):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f37ba6cbcfdc77e24165.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "04c1199e84571237ac2ef3df4e0329eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3258d2e4cdacc919dfd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f3258d2e4cdacc919dfd\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nAt the end of your _insert method, after the insertion process is complete, return the current node to update the tree structure at the higher levels of the recursive call stack.\n--hints--\nYou should return the current node outside the conditional blocks.\njs\n({ test: () => assert.match(code, /^\\s{8}return\\s+node/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef init(self):\nself.root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3258d2e4cdacc919dfd.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bcbe79510b2ce588847ca82a71b97270",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f33bc3c3d8db7f732787.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f33bc3c3d8db7f732787\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nNow, to perform the actual insertion, define an empty insert method within the BinarySearchTree class and give it a self parameter.\n--hints--\nYou should define an insert method with a self parameter within the BinarySearchTree class. Remember the pass keyword.\njs\n({ test: () => assert.match(code, /^\\s{4}def\\s+insert\\s*\\(\\s*self\\s*\\)\\s*:/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef init(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef init(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1050,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f33bc3c3d8db7f732787.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67a324ca7d6e62d1a388b40e17eda366",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63da2ed6769a10e141341.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63da2ed6769a10e141341\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nNow you are going to define a base case for the recursive search. Remove the current pass and write an if statement that checks two conditions:\nIf node is None: This indicates that the search has reached the end of a branch without finding the key.\nIf node.key == key: This means that the key has been found in the current node.\nCombine the two conditions with the or operator and return the current node inside the if block.\n--hints--\nYou should remove the pass keyword from the _search method.\n``js\n({\ntest: () => {\nassert.isFalse(\nrunPython(_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_search\").has_pass()`\n)\n);\n},\n});\n```\nYou should write an if statement that checks if node is None or if node.key is equal to key.\njs\n({ test: () => assert.match(code, /^\\s{8}if\\s+node\\s+is\\s+None\\s+or\\s+node\\.key\\s*==\\s*key\\s*:/m) })\nYou should return node from the if block.\njs\n({ test: () => assert.match(code, /^(\\s{8})if\\s+node\\s+is\\s+None\\s+or\\s+node\\.key\\s*==\\s*key\\s*:\\s*^\\1\\s{4}return\\s+node/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\ndef _search(self, node, key):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1920,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63da2ed6769a10e141341.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e26916f7a06b50754b696c937cbd8fa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63a4c4da62e9ae18e321a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63a4c4da62e9ae18e321a\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nIt's time to work on the search functionality. Just like you created a helper method _insert for the insert method, you need to create a helper method _search for the search method.\nDefine the _search method with three parameters, namely self,node and key.\n--hints--\nYou should declare a _search method. Note the leading underscore and remember to use pass.\njs\n({ test: () => assert.match(code, /def\\s+_search/) });\nYour _search method should take three parameters: self, node, and key.\njs\n({ test: () => assert.match(code, /def\\s+_search\\(\\s*self\\s*,\\s*node\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1387,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63a4c4da62e9ae18e321a.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01280e04517fc2482c42a0ff9bc4cb69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63df529bd15a24c187c62.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63df529bd15a24c187c62\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nWrite another if statement that checks if the target key is less than the key of the current node.\nInside the if block, return the result of calling the _search method with the left child of the current node and key as the arguments.\n--hints--\nYou should write another if statement to check if key < node.key.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_search\").find_ifs()[1].find_conditions()[0].is_equivalent(\"key < node.key\")`)) })\nYou should return self._search(node.left, key) from your new if block.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_search\").find_ifs()[1].find_bodies()[0].is_equivalent(\"return self._search(node.left, key)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63df529bd15a24c187c62.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f4c56e49a2c9679dc11551cb9b64fd92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63eb01b9563a4b8a046b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63eb01b9563a4b8a046b6\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nNext, define the method named search inside the BinarySearchTree class. Give the search method two parameters: self and key.\n--hints--\nYou should define a method named search. Remember the pass keyword.\njs\n({ test: () => assert.match(code, /def\\s+search/) });\nThe search method should take two parameters: self and key.\njs\n({ test: () => assert.match(code, /def\\s+search\\(\\s*self\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63eb01b9563a4b8a046b6.md",
      "source_type": "git_repo"
    },
    "token_count": 327,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c6b5ba4fdad77f5ef72a5bf77e94337f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63e6962159fa372ecdbec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63e6962159fa372ecdbec\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nIf the second if statement is not True, it means that the target key is greater than or equal to the current node key.\nIn a binary search tree, if the target key is greater than the current node's key, the search continues in the right subtree.\nAfter the if block, return the result of calling the _search method with the right child of the current node and the key as arguments.\n--hints--\nYou should recursively call the _search method using self._search().\njs\nconst after_split = code.split('return self._search(node.left, key)')[1];\nassert.match(after_split, /self\\._search/);\nYou should pass two arguments to the call of the _search method: node.right and key.\njs\n({ test: () => assert.match(code, /self\\._search\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/) });\nYou should return the result of the _search method call.\njs\n({\ntest: () => assert.match(code, /return\\s+self\\._search\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/)\n});\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1907,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63e6962159fa372ecdbec.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d24e7bcd1663b103226d3fda9445678b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63fd9b387f0a6c5bf6a72.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c63fd9b387f0a6c5bf6a72\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nInside the search method, delete pass and call the helper method _search with the following arguments.\nself.root: This is the root of the binary search tree. The search starts from the root.\nkey: This is the value that the user wants to find in the binary search tree.\nInternally, search delegates the actual search logic to the _search helper method that performs the actual recursive search within the binary search tree.\n--hints--\nYou should remove the pass keyword from the search method.\n``js\n({\ntest: () => {\nassert.isFalse(\nrunPython(_Node(_code).find_class(\"BinarySearchTree\").find_function(\"search\").has_pass()`\n)\n);\n},\n});\n```\nYou should call the _search method within the search method.\njs\n({ test: () => assert(runPython(`\nstr(_Node(_code).find_class(\"BinarySearchTree\").find_function(\"search\").find_calls(\"_search\")[0]).startswith(\"self._search(\")\n`)) });\nYou should call the _search method passing self.root and key as the arguments.\njs\n({ test: () => assert(runPython(`\n_Node(_code).find_class(\"BinarySearchTree\").find_function(\"search\").find_calls(\"_search\")[0].is_equivalent(\"self._search(self.root, key)\")\n`)) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c63fd9b387f0a6c5bf6a72.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25c4293201572f5a6b4227a8f7ad75d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c64057a080baa7d60523ed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c64057a080baa7d60523ed\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nNow, make the search method return the result of the _search() call.\n--hints--\nYou should prepend the return statement to your _search() call.\njs\n({ test: () => assert.match(code, /return\\s+self\\._search\\(\\s*self\\.root\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\n--fcc-editable-region--\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nself._search(self.root, key)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c64057a080baa7d60523ed.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ac0749a22cb07cbe4145038b8330ff90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3aee69d11dcfdbcfc00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c4f3aee69d11dcfdbcfc00\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nNow, inside the insert method, you need to call the helper method _insert() that we defined earlier Here, _insert has encapsulated the implementation of the insertion logic This is useful for recursion and for keeping the implementation details hidden from the user Delete pass and assign self _insert(self root, key) to self root Note that:\nself root passes the root node of the tree as the first argument This is the starting point for the insertion process key: passes the key value you want to insert as the second argument --hints--\nYou should remove the pass keyword from the insert method ``js\n({\ntest: () => {\nassert isFalse(\nrunPython(_Node(_code) find_class(\"BinarySearchTree\") find_function(\"insert\") has_pass()`\n)\n);\n},\n});\n```\nYou should recursively call the _insert() method using self _insert()\njs\n({ test: () =>\n{\nconst transformedCode = code replace(/\\r/g, \"\");\nconst ins = __helpers python getDef(\"\\n\"+transformedCode, \"insert\");\nconst {function_body} = ins;\nassert(function_body match(/self\\ _insert\\s*\\([^(]*\\)/));\n}\n})\nYou should pass self root and key to your _insert() call js\n({ test: () =>\n{\nconst transformedCode = code replace(/\\r/g, \"\");\nconst ins = __helpers python getDef(\"\\n\"+transformedCode, \"insert\");\nconst {function_body} = ins;\nassert(function_body match(/self\\ _insert\\s*\\(\\s*self\\ root\\s*,\\s*key\\s*\\)/));\n}\n})\nYou should assign the return value of your _insert() call to self root js\n({ test: () =>\n{\nconst transformedCode = code replace(/\\r/g, \"\");\nconst ins = __helpers python getDef(\"\\n\"+transformedCode, \"insert\");\nconst {function_body} = ins;\nassert(function_body match(/^\\s{8}self\\ root\\s*=\\s*self\\ _insert\\s*\\(\\s*self\\ root\\s*,\\s*key\\s*\\)/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3aee69d11dcfdbcfc00.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f95e0c6a9669572e0a9f0c62921886f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3aee69d11dcfdbcfc00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ins = __helpers python getDef(\"\\n\"+transformedCode, \"insert\"); const {function_body} = ins; assert(function_body match(/self\\ _insert\\s*\\(\\s*self\\ root\\s*,\\s*key\\s*\\)/)); } }) You should assign the return value of your _insert() call to self root js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const ins = __helpers python getDef(\"\\n\"+transformedCode, \"insert\"); const {function_body} = ins; assert(function_body match(/^\\s{8}self\\ root\\s*=\\s*self\\ _insert\\s*\\(\\s*self\\ root\\s*,\\s*key\\s*\\)/m)); } }) --seed-- --seed-contents-- ```py class TreeNode: def __init__(self, key): self key = key self left = None selfright = None\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\n--fcc-editable-region--\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c4f3aee69d11dcfdbcfc00.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a2f673e198c51e8fc70bf2939f286170",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c6409418806da8d0636ffc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c6409418806da8d0636ffc\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nThe insert and search functionalities are complete, it's time to test them.\nNote that, at this point, the nodes are not sorted and just inserted. You'll work on sorting using inorder traversal later on.\nYou can create an instance of a class in Python like this:\npython\nobject_name = ClassName()\nOutside the class definitions, create an instance of the BinarySearchTree class and assign it to the variable bst.\n--hints--\nYou should create an instance of the BinarySearchTree class.\njs\nassert.match(code, /BinarySearchTree\\(\\s*\\)/);\nYou should assign the new instance of BinarySearchTree to the variable bst.\njs\nassert.match(code, /bst\\s*=\\s*BinarySearchTree\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1781,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c6409418806da8d0636ffc.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12260a0c8fa2693feccab22212d00863",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c644829cfb63acf3479d09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c644829cfb63acf3479d09\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nInsert the nodes in the list nodes into the bst instance by iterating over the list and calling the insert method on each node in the list. Use node as the iteration variable.\n--hints--\nYou should have a for node in nodes loop.\njs\n({ test: () => (runPython(`assert _Node(_code).find_for_loops()[0].find_for_vars().is_equivalent(\"node\") and _Node(_code).find_for_loops()[0].find_for_iter().is_equivalent(\"nodes\")`)) });\nYou should have bst.insert(node) inside the for loop.\njs\n({ test: () => (runPython(`assert _Node(_code).find_for(\"node\", \"nodes\").find_body().is_equivalent(\"bst.insert(node)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1764,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c644829cfb63acf3479d09.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ea5a12c2d230a988321133c7113fb24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c646d4148ae3b2d1cbcac4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c646d4148ae3b2d1cbcac4\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nNote that, your search returns something like 80: <__main__.TreeNode object at 0x108b3e0>. This is the default string representation when printing an instance of a class.\nTo change that to print a useful value, define another method named __str__ in the TreeNode class. It takes a single argument self.\nAfter defining __str__ you'll get an exception in the console because the __str__ method doesn't return anything yet. You'll work on the method body in the next step.\n--hints--\nYou should define a method __str__ that takes a single argument self. Remember to use pass.\njs\nassert.match(code, /^(\\s+)def\\s+__init__.+?^\\1def\\s+__str__\\(\\s*self\\s*\\)\\s*:\\s*\\n^\\1\\1pass/ms)\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\n--fcc-editable-region--\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c646d4148ae3b2d1cbcac4.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "095692c01a3d4b1075c8de7d83a6bc9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c9de201959f73591b606e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c9de201959f73591b606e6\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nAs you can see, now you get a readable output in the console.\nNow, comment out the print call.\n--hints--\nYou should comment out the line print('Search for 80:', bst.search(80))\njs\nassert(code.match(/#\\s*print\\s*\\(\\s*'Search\\s*for\\s*80:\\s*',\\s*bst\\.search\\s*\\(\\s*80\\s*\\)\\s*\\)/));\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\ndef __str__(self):\nreturn str(self.key)\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\n--fcc-editable-region--\nprint('Search for 80:', bst.search(80))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1561,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c9de201959f73591b606e6.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1e1f8216bed1bd1c3faaad2695b351ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c645b838e7deb080fc25e0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c645b838e7deb080fc25e0\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nNow, the nodes have been inserted. To see if they have been correctly inserted, you can search for a node in the tree.\nOutside the for loop, search for node 80 in the bst instance and add it to a print call. Also the first argument of the print function should be the 'Search for 80:'\n--hints--\nYou should print the result of calling bst.search(80) and your print statement should have the first argument as 'Search for 80:'.\njs\nassert.match(code, /^print\\(('|\")Search for 80:('|\"),\\s*bst\\.search\\(80\\)/gm);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c645b838e7deb080fc25e0.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7ebe99ed214ab4b708e8b3965d49f71b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c9ddd336596e30a4266a50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65c9ddd336596e30a4266a50\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nIn the body of the __str__ method, delete pass and return the result of calling the str() function with self.key as the argument.  This is the attribute of the current node object that stores the value associated with the node.\nAfter returning the result, you should see the exception disappear from the console and the output should now display the value of the key associated with the node.\n--hints--\nYou should remove the pass keyword from the __str__ method.\n``js\n({\ntest: () => {\nassert.isFalse(\nrunPython(_Node(_code).find_class(\"TreeNode\").find_function(\"str\").has_pass()`\n)\n);\n},\n});\n```\nYou should return the string value of self.key from your __str__ method.\njs\n({ test: () => assert.match(code, /^\\s{8}return\\s+str\\(\\s*self\\.key\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\n--fcc-editable-region--\ndef str(self):\npass\n--fcc-editable-region--\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65c9ddd336596e30a4266a50.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1c5f72f47f74a1cd713cacd3573721e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca03bd8eb5faf24b250c56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca03bd8eb5faf24b250c56\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nThe next step is to work on the deletion of nodes.\nFor that, you would follow the same approach by first defining a helper method and then the actual method.\nInside the BinarySearchTree class, define a new helper method called _delete  that takes three parameters: self, node, and key.\n--hints--\nYou should define the _delete method inside the BinarySearchTree class with the parameters self, node and key. Remember to use the pass keyword.\njs\n({ test: () => assert.match(code, /def\\s+_delete\\(\\s*self\\s*,\\s*node\\s*,\\s*key\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\ndef __str__(self):\nreturn str(self.key)\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1835,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca03bd8eb5faf24b250c56.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "beb31a5a795a643ca9ddbbe0cbbf27a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06475e9b8aff8ea5a5f1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca06475e9b8aff8ea5a5f1\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nAfter your existing if, write another one that checks if the target key is less than the current node key.\n--hints--\nYou should have an if condition that checks if key is less than node.key. Remember to use pass.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_delete\").find_ifs()[1].find_conditions()[0].is_equivalent(\"key < node.key\")`)) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\ndef __str__(self):\nreturn str(self.key)\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1763,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06475e9b8aff8ea5a5f1.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40dbea5a8b46d21d2252e56b1f8e1e44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca05f7cba1e6fe70527534.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca05f7cba1e6fe70527534\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nInside your _delete method, replace pass with an if statement that checks if the current node is None When the current node is None, the key to be deleted was not found Therefore, return node from your if block --hints--\nYou should remove the pass keyword from the _delete method ``js\n({\ntest: () => {\nassert isFalse(\nrunPython(_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\") has_pass()`\n)\n);\n},\n});\n```\nYou should write an if statement that checks if the current node is None js\nconst after_split = code split('def _delete(self, node, key):')[1];\nassert match(after_split, /if\\s+node\\s+is\\s+None/);\nYou should return node inside your if block js\nconst after_split = code split('def _delete(self, node, key):')[1];\nassert match(after_split, /return\\s+node/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca05f7cba1e6fe70527534.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5d10d56be216db00207529e260f24387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca071d5921760254949f76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca071d5921760254949f76\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nThe conditionals you wrote in the previous steps are valid for nodes with either zero or one child. The upcoming conditionals will be valid if there are 2 children.\nFor that, add an else clause to the conditional.\n--hints--\nYou should add an else clause. Remember to use the pass keyword.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"BinarySearchTree\").find_function(\"_delete\").find_ifs()[1].find_conditions()[2].tree is None`)) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\ndef __str__(self):\nreturn str(self.key)\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node.key:\nnode.left = self._delete(node.left, key)\nelif key > node.key:\nnode.right = self._delete(node.right, key)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca071d5921760254949f76.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "df5268a1f56a979bd4da4ccd073ebb44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06864129380054b55dc0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca06864129380054b55dc0\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nWithin the if block, replace pass with a call to the _delete method, passing the left child of the current node and the key as arguments Assign the function call to the left node --hints--\nYou should remove the pass keyword from the if statement js\n({\ntest: () => {\nassert isFalse(\nrunPython(\n`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\") find_if(\"key < node key\") find_bodies()[0] has_pass()`\n)\n);\n},\n});\nYou should call the _delete method with node left and the key as the arguments js\nassert match(code, /self\\ _delete\\(\\s*node\\ left\\s*,\\s*key\\s*\\)/);\nYou should assign the result of the _delete() call to the left child (node left) of the current node js\nassert match(code, /node\\ left\\s*=\\s*self\\ _delete\\(\\s*node\\ left\\s*,\\s*key\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06864129380054b55dc0.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b9407606f77d51d24396659af8e598fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06864129380054b55dc0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key > node key: node right = self _insert(node right, key) return node def insert(self, key): self root = self _insert(self root, key) def _search(self, node, key): if node is None or node key == key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < nodekey:\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06864129380054b55dc0.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "73842dc00a3989e8a9587e26c6725b52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06c9f918730107c9908d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca06c9f918730107c9908d\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nWrite an elif statement that checks if key > node key Inside your elif block, call the _delete method with the right child of the current node and key as the arguments and assign the result to the right node --hints--\nYou should write an elif statement that checks if key > node key js\nconst after_split = code split('def _delete(self, node, key):')[1];\nassert match(after_split, /elif\\s+key\\s+>\\s+node\\ key/);\nYou should call the _delete method with node right and key as the arguments js\nassert match(code, /self\\ _delete\\(\\s*node\\ right\\s*,\\s*key\\s*\\)/);\nYou should assign the result of the _delete() call to node right js\nassert match(code, /node\\ right\\s*=\\s*self\\ _delete\\(\\s*node\\ right\\s*,\\s*key\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06c9f918730107c9908d.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "baa6585016c8afe4acbae2eafa0d6388",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06c9f918730107c9908d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key): if node is None or node key == key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) --fcc-editable-region-- bst = BinarySearchTree() nodes = [50, 30, 20, 40, 70, 60, 80] for node in nodes: bstinsert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca06c9f918730107c9908d.md",
      "source_type": "git_repo"
    },
    "token_count": 148,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "58c568b31c519e033084f501c77c9dd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca07dd6fa8840491b7a5cd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca07dd6fa8840491b7a5cd\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nIf neither one of the previous conditions is met, it means the node has both left and right children To choose the successor, you need to find the minimum value in the right subtree The smallest value will be the in-order successor of the current node To find the smallest value, create a helper function _min_value that takes two parameters: self and node --hints--\nYou should define the _min_value method with self and node as the parameters Remember to use the pass keyword js\n({ test: () => assert match(code, /def\\s+_min_value\\(\\s*self\\s*,\\s*node\\s*\\)\\s*:/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\n--fcc-editable-region--\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca07dd6fa8840491b7a5cd.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8cc4edda807d445393149ba8939dfc10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca075e3184180309f4c1d9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca075e3184180309f4c1d9\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nInside the else block, replace pass with an if statement to check if the left child of the current node is None When node left is None, there is no left child Therefore, return the right child from the new if block as a replacement --hints--\nYou should remove the pass keyword from the else block js\n({\ntest: () => {\nconst pyClassStr = runPython(\n`str(_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\"))`\n);\nassert notInclude(pyClassStr, \"pass\");\n},\n});\nYou should write an if statement that checks if node left is None js\nassert match(code, /if\\s+node\\ left\\s*is\\s*None/);\nYou should return the right child of the current node js\nassert match(code, /return\\s+node\\ right/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca075e3184180309f4c1d9.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22ce3d3bd5d5678d2dcab3d44622b388",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca075e3184180309f4c1d9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "< node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: pass --fcc-editable-region-- bst = BinarySearchTree() nodes = [50, 30, 20, 40, 70, 60, 80] for node in nodes: bstinsert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca075e3184180309f4c1d9.md",
      "source_type": "git_repo"
    },
    "token_count": 152,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "685bcbbcca09833f5917fb47f3bb49e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca085a19adaa057302a3d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca085a19adaa057302a3d6\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nInside the while loop body, replace pass with node and assign it the left child of the node --hints--\nYou should remove the pass keyword from the while loop ``js\n({\ntest: () => {\nconst pyClassStr = runPython(str(_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_min_value\"))`\n);\nassert notInclude(pyClassStr, \"pass\");\n},\n});\n```\nYou should assign node left to node inside your while loop js\n({ test: () => assert match(code, /node\\s*=\\s*node\\ left/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\n--fcc-editable-region--\ndef _min_value(self, node):\nwhile node left is not None:\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2292,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca085a19adaa057302a3d6.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bd226aaaf07245aec3560e195e36edd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0794ec3ed103bca67ed7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0794ec3ed103bca67ed7\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nBelow the if statement, add an elif clause to check if the right child of the current node (node right) is None If the previous condition is met, it means there is no right child So, return the left child of the current node from the elif block as a replacement --hints--\nYou should create an elif statement that checks if the right child of the current node is None js\n({test: () => assert(runPython(`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\") find_ifs()[1] find_conditions()[3] is_equivalent(\"node right is None\")`))})\nYou should return the left child of the current node js\n({test: () => assert(runPython(`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\") find_ifs()[1] find_bodies()[3] is_equivalent(\"return node left\")`))})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0794ec3ed103bca67ed7.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "105cbec60fd8cf63574634581de1523c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0794ec3ed103bca67ed7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "node is None or node key == key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return noderight\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0794ec3ed103bca67ed7.md",
      "source_type": "git_repo"
    },
    "token_count": 175,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d5496960f9bf837aab71aaa50873fe8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0d5adf39c410cd1177cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0d5adf39c410cd1177cc\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nNow, you'll work on traversing the tree based on the in-order traversal method In-order traversal is a depth-first binary tree traversal algorithm that visits the left subtree, the current node, and then the right subtree Define the _inorder_traversal method within the BinarySearchTree class and give it three parameters: self, node and result Where node is the current node being considered during the traversal and result is the list to which the keys are appended in sorted order --hints--\nYou should define a method _inorder_traversal that takes three parameters: self, node, and result Remember to use pass js\nassert match(code, /def\\s+_inorder_traversal\\(\\s*self\\s*,\\s*node\\s*,\\s*result\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0d5adf39c410cd1177cc.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c6c9671fd090341ebd8dfada578fde84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0d5adf39c410cd1177cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key) def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(selfroot, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\n--fcc-editable-region--\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0d5adf39c410cd1177cc.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3060bbf0b5754c538184c9699d754609",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca089e848eca0672b9cd77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca089e848eca0672b9cd77\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nNow, back to the _delete method, you have to choose the successor, using the _min_value helper function Add a _min_value call after your elif block, passing node right as the argument Assign it to the current node key --hints--\nYou should assign self _min_value(node right) to node key after your elif block ``js\n({ test: () => (runPython(\nimport ast\nassign_after_elif = _Node(_code) find_class(\"BinarySearchTree\") find_function(\"_delete\") find_ifs()[1] tree orelse[0] orelse[1]\nassign_code = ast get_source_segment(_code, assign_after_elif)\nassert _Node(assign_code) is_equivalent(\"node key = self _min_value(node right)\")`)) })\n```\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\n--fcc-editable-region--\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca089e848eca0672b9cd77.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a30540fa7e94c4d9c6c5e9ad1c345bfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca089e848eca0672b9cd77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left --fcc-editable-region-- def _min_value(self, node): while node left is not None: node = node left return nodekey\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca089e848eca0672b9cd77.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "87f747d702d50a1a6594e91d4cd213cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0a1f27596a089b0363b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0a1f27596a089b0363b9\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nInside the delete method, delete pass and call the helper method _delete with the root of the Binary Search Tree and the key to delete as the arguments Also, assign the result of  the _delete method to self root in the delete method --hints--\nYou should remove the pass keyword from the delete method js\n({ test: () => {\nassert isFalse(runPython(`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"delete\") has_pass()`))\n}})\nYour delete method should call the _delete method with two arguments: self root and key js\n({ test: () => assert match(code, /self\\ _delete\\(\\s*self\\ root\\s*,\\s*key\\s*\\)/) });\nYou should assign the result of the _delete method to self root in the delete method js\nconst after_split = code split('def delete(self, key):')[1];\nassert match(after_split, /self\\ root\\s*=\\s*self\\ _delete\\(self\\ root,\\s*key\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0a1f27596a089b0363b9.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ac9f9d7ea38e939794ef18229b916a9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0a1f27596a089b0363b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if node is None or node key == key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return noderight\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\n--fcc-editable-region--\ndef delete(self, key):\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0a1f27596a089b0363b9.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "003bd4a747a3132a084c056d62f2aa94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dc5dbf42a11c3cf1098.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0dc5dbf42a11c3cf1098\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nReplace pass with an if statement that checks if the current node (node) is not empty Then, recursively call _inorder_traversal with node left and result as the arguments --hints--\nYou should remove the existing pass keyword from the _inorder_traversal method ``js\n({\ntest: () => {\nassert isFalse(\nrunPython(_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_inorder_traversal\") has_pass()`\n)\n);\n},\n});\n```\nYour check condition should be if node js\nassert match(code, /if\\s+node:/);\nYou should call _inorder_traversal on the node left inside the if block js\nassert match(code, /self\\ _inorder_traversal\\(\\s*node\\ left\\s*,\\s*result\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dc5dbf42a11c3cf1098.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7f7aad69b9552ce00f6686a7929dbb9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dc5dbf42a11c3cf1098.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "root, key) def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self_delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\n--fcc-editable-region--\ndef _inorder_traversal(self, node, result):\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dc5dbf42a11c3cf1098.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9d6ec267bc68e1e5ac3dcf00c41a7fbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dfaea3f4112afde6e26.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0dfaea3f4112afde6e26\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nStill inside the if block, append the key of the current node to the result list --hints--\nYou should append node key to the result list js\nassert match(code, /result\\ append\\(\\s*node\\ key\\s*\\)/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\n--fcc-editable-region--\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2373,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dfaea3f4112afde6e26.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5a8492209dbdf0dad3678b1309ac74f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dfaea3f4112afde6e26.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key --fcc-editable-region-- def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) --fcc-editable-region-- bst = BinarySearchTree() nodes = [50, 30, 20, 40, 70, 60, 80] for node in nodes: bst insert(node) print('Search for 80:', bstsearch(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2373,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0dfaea3f4112afde6e26.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d16b301b944040d4646ccfc21ab29608",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e2d05557a13a40b1243.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0e2d05557a13a40b1243\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nFinally, recursively call the _inorder_traversal method on the right child of the current node This recursive call explores the entire right subtree in an in-order manner --hints--\nYou should call _inorder_traversal passing node right and result as the arguments js\n({test: () => assert(runPython(`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_inorder_traversal\") find_ifs()[0] find_bodies()[0] find_body()[2] is_equivalent(\"self _inorder_traversal(node right, result)\")`))})\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e2d05557a13a40b1243.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0ef89f1d8919b0e71f35c183316fee72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e2d05557a13a40b1243.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return nodekey\n--fcc-editable-region--\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e2d05557a13a40b1243.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "823065ae87758396645785b9dd25b83f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e8eb2c9c215269d6a66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca0e8eb2c9c215269d6a66\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nThe inorder_traversal method is responsible for performing an in-order traversal of the binary search tree It returns the keys of the nodes in sorted order It will use the helper method _inorder_traversal to achieve this Create an inorder_traversal method that takes self as the only parameter --hints--\nYou should define an inorder_traversal method that takes self as the parameter Remember to use pass js\n({ test: () => assert match(code, /def\\s+inorder_traversal\\(\\s*self\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2757,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e8eb2c9c215269d6a66.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f1436f2e7e255edbbfc763d6f8d06283",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e8eb2c9c215269d6a66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) result append(nodekey)\nself _inorder_traversal(node right, result)\n--fcc-editable-region--\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2757,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca0e8eb2c9c215269d6a66.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f655b1cf2aec998394bf31884ff420af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca1181e5b9b41c47632127.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca1181e5b9b41c47632127\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nInside the inorder_traversal method, replace pass with an empty list named result that will store the keys of the nodes in sorted order --hints--\nYou should remove the pass keyword from the inorder_traversal method js\n({\ntest: () => {\nassert isFalse(\nrunPython(\n`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"inorder_traversal\") has_pass()`\n)\n);\n},\n});\nYou should initialize an empty list named result inside the method js\n({ test: () => assert match(code, /result\\s*=\\s*\\[\\s*\\]/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca1181e5b9b41c47632127.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f3f9f304b141ac8a5151692fead6c359",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca1181e5b9b41c47632127.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "> node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self_inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\n--fcc-editable-region--\ndef inorder_traversal(self):\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca1181e5b9b41c47632127.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8274e4eb7d1bf7bfcfb09cca8b22fa62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11a86801bc1d254da83c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca11a86801bc1d254da83c\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nWithin the inorder_traversal method, start the in-order traversal by calling the helper method _inorder_traversal and pass the BST root and the result list as the arguments This will start the traversal from the root of the binary search tree (self root), and the result list will be passed to accumulate the keys during the traversal --hints--\nYou should call _inorder_traversal and pass self root and result as the arguments js\n({ test: () => assert match(code, /self\\ _inorder_traversal\\(\\s*self\\ root\\s*,\\s*result\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11a86801bc1d254da83c.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dce3e0982afcf4556ba0658add21aab3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11a86801bc1d254da83c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "> node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self_inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\n--fcc-editable-region--\ndef inorder_traversal(self):\nresult = []\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11a86801bc1d254da83c.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a14774ce43f9e5da3e34e805b7cd0b31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11d8f3e8a71de41d0e32.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca11d8f3e8a71de41d0e32\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nFinally, return the sorted list of keys --hints--\nYou should return the result list from your inorder_traversal method js\nassert match(code, /return\\s+result/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\n--fcc-editable-region--\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2526,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11d8f3e8a71de41d0e32.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5539bfc02e455cc8bd6e16effc264232",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11d8f3e8a71de41d0e32.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) result append(node key) self _inorder_traversal(node right, result) --fcc-editable-region-- def inorder_traversal(self): result = [] self _inorder_traversal(selfroot, result)\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2526,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca11d8f3e8a71de41d0e32.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "66f5ecd55e442ab96243de23a6ede841",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca120111bd521ea8b73e75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca120111bd521ea8b73e75\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nNow it's time to put everything into use Uncomment the given line of code --hints--\nYou should uncomment the print('Search for 80:', bst search(80)) line js\nassert match(code, /^print\\(\\s*'Search\\s*for\\s*80:\\s*',\\s*bst\\ search\\(\\s*80\\s*\\)\\s*\\)/m);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2639,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca120111bd521ea8b73e75.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad65c8f7fe71560a9233e1631ccec6ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca120111bd521ea8b73e75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) result append(node key) self _inorder_traversal(node right, result) def inorder_traversal(self): result = [] self _inorder_traversal(selfroot, result)\nreturn result\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\n--fcc-editable-region--\nprint('Search for 80:', bst search(80))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2639,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca120111bd521ea8b73e75.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "14db15f70e769e2516ae67679dd2e6a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca29b3a07d662de018ac13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca29b3a07d662de018ac13\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nNext, call the delete method of bst and delete 40 from the binary search tree --hints--\nYou should call the delete method of bst passing 40 as the argument js\n({ test: () => assert match(code, /print\\s*\\( *\\)\\s*^bst\\ delete\\s*\\(\\s*40\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2686,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca29b3a07d662de018ac13.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7616436637f7c4ef4db95ad12db98722",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca29b3a07d662de018ac13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) result append(node key) self _inorder_traversal(node right, result) def inorder_traversal(self): result = [] self _inorder_traversal(selfroot, result)\nreturn result\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\nprint(\"Inorder traversal:\", bst inorder_traversal())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2686,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca29b3a07d662de018ac13.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bf0a5a0ebf20b8fe0ee8e03f39c49611",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a18039c942f04ddde83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca2a18039c942f04ddde83\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nConfirm that 40 has been deleted Call print() by passing the string 'Search for 40:' as the first argument and an bst search(40) call as the second argument --hints--\nYou should have print('Search for 40:', bst search(40)) in your code js\n({ test: () => assert match(code, /^print\\(\\s*(\"|')Search for 40:(\"|')\\s*,\\s*bst\\ search\\(\\s*40\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a18039c942f04ddde83.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fc2596224811752beed4961f5a4e85c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a18039c942f04ddde83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return node key def _inorder_traversal(self, node, result): if node: self _inorder_traversal(node left, result) result append(nodekey)\nself _inorder_traversal(node right, result)\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self root, result)\nreturn result\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\nprint(\"Inorder traversal:\", bst inorder_traversal())\nbst delete(40)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a18039c942f04ddde83.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "483a1e74521b711ac98a9e489454e806",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca294e05dc032bf8922dc7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca294e05dc032bf8922dc7\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nBelow the print() call, call the print() function again and pass it the string 'Inorder traversal:' as the first argument and the bst inorder_traversal() call as the second argument to print the result of the inorder traversal --hints--\nYou should call print() and pass the string 'Inorder traversal:' and the bst inorder_traversal() call as the arguments js\n({ test: () => assert match(code, /^print\\s*\\(\\s*(\"|')Inorder traversal:\\1\\s*,\\s*bst\\ inorder_traversal\\s*\\(\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2879,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca294e05dc032bf8922dc7.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "96d40ff469c70c008f7ed878855062bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca294e05dc032bf8922dc7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = node left return nodekey\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self root, result)\nreturn result\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2879,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca294e05dc032bf8922dc7.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ea9697c898db83e107e0f2952a321d3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a8773c816a273653fd0e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65d8a8773c816a273653fd0e\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nFinally, after your else clause, return the current node.\n--hints--\nYou should return the current node after the else clause.\njs\n({ test: () => assert.match(code, /^(\\s+)else\\s*:.+?^\\1return\\s+node/ms) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\ndef __str__(self):\nreturn str(self.key)\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node.key:\nnode.left = self._delete(node.left, key)\nelif key > node.key:\nnode.right = self._delete(node.right, key)\nelse:\nif node.left is None:\nreturn node.right\nelif node.right is None:\nreturn node.left\nnode.key = self._min_value(node.right)\nnode.right = self._delete(node.right, node.key)\n--fcc-editable-region--\ndef _min_value(self, node):\nwhile node.left is not None:\nnode = node.left\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst.insert(node)\nprint('Search for 80:', bst.search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a8773c816a273653fd0e.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0662bafe88ed1ab597a824e2fa534057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65cb45d130c97cb459439fac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65cb45d130c97cb459439fac\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nTo find the smallest value in the right subtree, you need to iterate through the left children of the given node until you reach the leftmost (smallest) node in the subtree To do this, write a while loop that runs when node left is not None and move pass inside the while block This condition checks if there is a left child As long as there is a left child, the loop continues and there is a smaller value to be found --hints--\nyou should remove the pass keyword from the _min_value method js\n({\ntest: () => {\nassert isFalse(\nrunPython(\n`_Node(_code) find_class(\"BinarySearchTree\") find_function(\"_min_value\") has_pass()`\n)\n);\n},\n});\nYou should use the condition node left is not None in the while loop js\n({ test: () => assert match(code, /while\\s+node\\ left\\s+is\\s+not\\s+None\\s*:/) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65cb45d130c97cb459439fac.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "da2c174fb4e469f449dc9317ef08b16a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65cb45d130c97cb459439fac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return nodeleft\n--fcc-editable-region--\ndef _min_value(self, node):\npass\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65cb45d130c97cb459439fac.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d68e966d093076b5fac2c556704603fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a6fcb15a3a239ba35dfd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65d8a6fcb15a3a239ba35dfd\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nAfter finding the minimum value, you will need to recursively delete the node with the minimum value from the right subtree This step ensures that the node with the minimum value is removed from the tree while maintaining the binary search tree (BST) property Call the _delete method recursively with node right and node key as the arguments Assign the return value of the _delete() call to the right child of the current node --hints--\nYou should call the _delete method recursively with node right and node key as the arguments js\nassert match(code, /self\\ _delete\\(\\s*node\\ right\\s*,\\s*node\\ key\\s*/);\nYou should assign the return value of the _delete() call to the right child of the current node js\nassert match(code, /node\\ right\\s*=\\s*self\\ _delete\\(\\s*node\\ right\\s*,\\s*node\\ key/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\n--fcc-editable-region--\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a6fcb15a3a239ba35dfd.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9b4c5d601df02d6d6f236db3d3f185b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a6fcb15a3a239ba35dfd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key: return self _search(node left, key) return self _search(node right, key) def search(self, key): return self _search(self root, key) --fcc-editable-region-- def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(noderight)\n--fcc-editable-region--\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a6fcb15a3a239ba35dfd.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d7d5eeb7b1093644b76f2a32b477c57b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8b58074495d3f94977dca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65d8b58074495d3f94977dca\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nOnce the leftmost node is found (that is, when node left becomes None), the loop exits After the while loop, return the key of the leftmost node, which represents the minimum value in the given subtree With this, you are able to get the value that will replace the node after it is deleted --hints--\nAfter the while loop, return node key as the result of the function js\n({ test: () => assert match(code, /^(\\s+)while *: + ^\\1return\\s+node\\ key/ms) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\n--fcc-editable-region--\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8b58074495d3f94977dca.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d9ed91a60ca75349048a2b7c9a2b10f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65f97131a0709033d6911558.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f97131a0709033d6911558\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nCreate a list named nodes with values 50, 30, 20, 40, 70, 60, 80.\n--hints--\nYour list should have the values 50, 30, 20, 40, 70, 60, 80.\njs\nassert.match(code, /\\s*\\[50,\\s*30,\\s*20,\\s*40,\\s*70,\\s*60,\\s*80\\]/);\nYour list should be assigned to nodes.\njs\nassert.match(code, /nodes\\s*=\\s*\\[50,\\s*30,\\s*20,\\s*40,\\s*70,\\s*60,\\s*80\\]/);\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself.key = key\nself.left = None\nself.right = None\nclass BinarySearchTree:\ndef __init__(self):\nself.root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node.key:\nnode.left = self._insert(node.left, key)\nelif key > node.key:\nnode.right = self._insert(node.right, key)\nreturn node\ndef insert(self, key):\nself.root = self._insert(self.root, key)\ndef _search(self, node, key):\nif node is None or node.key == key:\nreturn node\nif key < node.key:\nreturn self._search(node.left, key)\nreturn self._search(node.right, key)\ndef search(self, key):\nreturn self._search(self.root, key)\n--fcc-editable-region--\nbst = BinarySearchTree()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65f97131a0709033d6911558.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6052b37d3dc9b110040cc8993819eb23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a90640d40c2927ebbd94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65d8a90640d40c2927ebbd94\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nNext, you'll work on the delete method Within the BinarySearchTree class, define a delete method It takes two parameters: self and key key is the value that the user wants to delete from the binary search tree --hints--\nYou should define a delete method with two parameters: self and key Remember to use pass js\n({ test: () => assert match(code, /def\\s+delete\\(\\s*self\\s*,\\s*key\\s*\\)/) });\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\n--fcc-editable-region--\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a90640d40c2927ebbd94.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c4aeb060f8a288ad82b3d57ca758f5e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a90640d40c2927ebbd94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "_delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def _min_value(self, node): while node left is not None: node = node left return node key --fcc-editable-region-- --fcc-editable-region-- bst = BinarySearchTree() nodes = [50, 30, 20, 40, 70, 60, 80] for node in nodes: bst insert(node) print('Search for 80:', bstsearch(80))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65d8a90640d40c2927ebbd94.md",
      "source_type": "git_repo"
    },
    "token_count": 134,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4be412881d9129013f6a0cd77674f068",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65ca2a52d579b22feb89177f\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nAs a last step, print the whole tree Call print() by passing the string 'Inorder traversal after deleting 40:' as the first argument and an inorder_traversal() call as the second argument With this, you have finished the implementation of the binary search tree Great work --hints--\nYou should call print passing the string 'Inorder traversal after deleting 40:' as the first argument and an inorder_traversal() call as the second argument js\n({ test: () => assert match(code, /^print\\s*\\(\\s*(\"|')Inorder traversal after deleting 40:\\1\\s*,\\s*bst\\ inorder_traversal\\s*\\(\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nclass TreeNode:\ndef __init__(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef __init__(self):\nself root = None\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef insert(self, key):\nself root = self _insert(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef search(self, key):\nreturn self _search(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node left, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c2fcaeb38aae6de2276ff98ea7a18d5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "node key: node left = self _delete(node left, key) elif key > node key: node right = self _delete(node right, key) else: if node left is None: return node right elif node right is None: return node left node key = self _min_value(node right) node right = self _delete(node right, node key) return node def delete(self, key): self root = self _delete(self root, key) def _min_value(self, node): while node left is not None: node = nodeleft\nreturn node key\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self root, result)\nreturn result\n--fcc-editable-region--\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint('Search for 80:', bst search(80))\nprint(\"Inorder traversal:\", bst inorder_traversal())\nbst delete(40)\nprint(\"Search for 40:\", bst search(40))\n--fcc-editable-region--\n```\n--solutions--\n```py\nclass TreeNode:\ndef init(self, key):\nself key = key\nself left = None\nself right = None\ndef __str__(self):\nreturn str(self key)\nclass BinarySearchTree:\ndef init(self):\nself root = None\ndef insert(self,key):\nself root = self _insert(self root, key)\ndef _insert(self, node, key):\nif node is None:\nreturn TreeNode(key)\nif key < node key:\nnode left = self _insert(node left, key)\nelif key > node key:\nnode right = self _insert(node right, key)\nreturn node\ndef search(self, key):\nreturn self _search(self root, key)\ndef _search(self, node, key):\nif node is None or node key == key:\nreturn node\nif key < node key:\nreturn self _search(node left, key)\nreturn self _search(node right, key)\ndef delete(self, key):\nself root = self _delete(self root, key)\ndef _delete(self, node, key):\nif node is None:\nreturn node\nif key < node key:\nnode left = self _delete(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f52bac744058ca1a6c01fc4bf6db5620",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "right = self _insert(node right, key) return node def search(self, key): return self _search(self root, key) def _search(self, node, key): if node is None or node key == key: return node if key < node key: return self _search(node left, key) return self _search(node right, key) def delete(self, key): self root = self _delete(self root, key) def _delete(self, node, key): if node is None: return node if key < node key: node left = self _delete(nodeleft, key)\nelif key > node key:\nnode right = self _delete(node right, key)\nelse:\nif node left is None:\nreturn node right\nelif node right is None:\nreturn node left\nnode key = self _min_value(node right)\nnode right = self _delete(node right, node key)\nreturn node\ndef _min_value(self, node):\nwhile node left is not None:\nnode = node left\nreturn node key\ndef inorder_traversal(self):\nresult = []\nself _inorder_traversal(self root, result)\nreturn result\ndef _inorder_traversal(self, node, result):\nif node:\nself _inorder_traversal(node left, result)\nresult append(node key)\nself _inorder_traversal(node right, result)\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\nfor node in nodes:\nbst insert(node)\nprint(\"Inorder traversal:\", bst inorder_traversal())\nprint(\"Search for 40:\", bst search(40))\nbst delete(40)\nprint(\"Search for 40:\", bst search(40))\nprint(\"Inorder traversal after deleting 40:\", bst inorder_traversal())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\65ca2a52d579b22feb89177f.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8db8278f8b3aaf69d00ded6625b3d54c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\clean-up-your-project-with-modules.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589690e6f9fc0f352b528e6e\ntitle: Clean Up Your Project with Modules\nchallengeType: 2\nforumTopicId: 301549\ndashedName: clean-up-your-project-with-modules\n--description--\nRight now, everything you have is in your server.js file. This can lead to hard to manage code that isn't very expandable. Create 2 new files: routes.js and auth.js\nBoth should start with the following code:\n```js\nmodule.exports = function (app, myDataBase) {\n}\n```\nNow, in the top of your server file, require these files like so: const routes = require('./routes.js'); Right after you establish a successful connection with the database, instantiate each of them like so: routes(app, myDataBase)\nFinally, take all of the routes in your server and paste them into your new files, and remove them from your server file. Also take the ensureAuthenticated function, since it was specifically created for routing. Now, you will have to correctly add the dependencies in which are used, such as const passport = require('passport');, at the very top, above the export line in your routes.js file.\nKeep adding them until no more errors exist, and your server file no longer has any routing (except for the route in the catch block)!\nDo the same thing in your auth.js file with all of the things related to authentication such as the serialization and the setting up of the local strategy and erase them from your server file. Be sure to add the dependencies in and call auth(app, myDataBase) in the server in the same spot.\nSubmit your page when you think you've got it right. If you're running into errors, you can check out an example of the completed project.\n--hints--\nModules should be present.\njs\nasync () => {\nconst url = new URL(\"/_api/server.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/require\\s*\\(('|\")\\.\\/routes(\\.js)?\\1\\)/gi,\n'You should have required your new files'\n);\nassert.match(\ndata,\n/client\\s*\\.db[^]*routes/gi,\n'Your new modules should be called after your connection to the database'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\clean-up-your-project-with-modules.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e5d942221764583b5db07f3d0c04570b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-strategies.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70df9fc0f352b528e68\ntitle: Authentication Strategies\nchallengeType: 2\nforumTopicId: 301547\ndashedName: authentication-strategies\n--description--\nA strategy is a way of authenticating a user You can use a strategy for allowing users to authenticate based on locally saved information (if you have them register first) or from a variety of providers such as Google or GitHub For this project, we will use Passport middleware Passport provides a comprehensive set of strategies that support authentication using a username and password, GitHub, Google, and more passport-local@~1 0 0 has already been added as a dependency Add it to your server as follows:\njavascript\nconst LocalStrategy = require('passport-local');\nTell passport to use an instantiated LocalStrategy object with a few settings defined Make sure this (as well as everything from this point on) is encapsulated in the database connection since it relies on it :\njavascript\npassport use(new LocalStrategy((username, password, done) => {\nmyDataBase findOne({ username: username }, (err, user) => {\nconsole log(`User ${username} attempted to log in `);\nif (err) return done(err);\nif ( user) return done(null, false);\nif (password == user password) return done(null, false);\nreturn done(null, user);\n});\n}));\nThis is defining the process to use when you try to authenticate someone locally First, it tries to find a user in your database with the username entered Then, it checks for the password to match Finally, if no errors have popped up that you checked for (e g an incorrect password), the user object is returned and they are authenticated Many strategies are set up using different settings Generally, it is easy to set it up based on the README in that strategy's repository A good example of this is the GitHub strategy where you don't need to worry about a username or password because the user will be sent to GitHub's auth page to authenticate As long as they are logged in and agree then GitHub returns their profile for you to use In the next step, you will set up how to actually call the authentication strategy to validate a user based on form data Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nPassport-local should be a dependency",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-strategies.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "14fd9b9887630f27154e14e7d4aebeac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-strategies.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "page to authenticate As long as they are logged in and agree then GitHub returns their profile for you to use In the next step, you will set up how to actually call the authentication strategy to validate a user based on form data Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints-- Passport-local should be a dependencyjs\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'passport-local',\n'Your project should list \"passport-local \" as a dependency'\n);\n}\nPassport-local should be correctly required and set up js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require *(\"|')passport-local(\"|')/,\n'You should have required passport-local'\n);\nassert match(\ndata,\n/new LocalStrategy/,\n'You should have told passport to use a new strategy'\n);\nassert match(\ndata,\n/findOne/,\n'Your new local strategy should use the findOne query to find a username based on the inputs'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-strategies.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e5171d968fb5610b9a8506d348dbbe91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\create-new-middleware.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70df9fc0f352b528e6a\ntitle: Create New Middleware\nchallengeType: 2\nforumTopicId: 301551\ndashedName: create-new-middleware\n--description--\nAs is, any user can just go to /profile whether they have authenticated or not by typing in the URL. You want to prevent this by checking if the user is authenticated first before rendering the profile page. This is the perfect example of when to create a middleware.\nThe challenge here is creating the middleware function ensureAuthenticated(req, res, next), which will check if a user is authenticated by calling Passport's isAuthenticated method on the request which checks if req.user is defined. If it is, then next() should be called. Otherwise, you can just respond to the request with a redirect to your homepage to login.\nAn implementation of this middleware is:\njavascript\nfunction ensureAuthenticated(req, res, next) {\nif (req.isAuthenticated()) {\nreturn next();\n}\nres.redirect('/');\n};\nCreate the above middleware function, then pass ensureAuthenticated as middleware to requests for the profile page before the argument to the GET request:\njavascript\napp\n.route('/profile')\n.get(ensureAuthenticated, (req,res) => {\nres.render('profile');\n});\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point.\n--hints--\nThe middleware ensureAuthenticated should be implemented and attached to the /profile route.\njs\nasync () => {\nconst url = new URL(\"/_api/server.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/ensureAuthenticated[^]*req.isAuthenticated/,\n'Your ensureAuthenticated middleware should be defined and utilize the req.isAuthenticated function'\n);\nassert.match(\ndata,\n/profile[^]*get[^]*ensureAuthenticated/,\n'Your ensureAuthenticated middleware should be attached to the /profile route'\n);\n}\nAn unauthenticated GET request to /profile should correctly redirect to /.\njs\nasync () => {\nconst url = new URL(\"/profile\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/Home page/,\n'An attempt to go to the profile at this point should redirect to the homepage since we are not logged in'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2530,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\create-new-middleware.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a85257a1d02f51ac5c67c89f4f740688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\announce-new-users.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc832f9fc0f352b528e78\ntitle: Announce New Users\nchallengeType: 2\nforumTopicId: 301546\ndashedName: announce-new-users\n--description--\nMany chat rooms are able to announce when a user connects or disconnects and then display that to all of the connected users in the chat Seeing as though you already are emitting an event on connect and disconnect, you will just have to modify this event to support such a feature The most logical way of doing so is sending 3 pieces of data with the event: the username of the user who connected/disconnected, the current user count, and if that username connected or disconnected Change the event name to 'user', and pass an object along containing the fields username, currentUsers, and connected (to be true in case of connection, or false for disconnection of the user sent) Be sure to change both 'user count' events and set the disconnect one to send false for the field connected instead of true like the event emitted on connect js\nio emit('user', {\nusername: socket request user username,\ncurrentUsers,\nconnected: true\n});\nNow your client will have all the necessary information to correctly display the current user count and announce when a user connects or disconnects To handle this event on the client side we should listen for 'user', then update the current user count by using jQuery to change the text of #num-users to '{NUMBER} users online', as well as append a <li> to the unordered list with id messages with '{NAME} has {joined/left} the chat ' An implementation of this could look like the following:\njs\nsocket on('user', data => {\n$('#num-users') text(data currentUsers + ' users online');\nlet message =\ndata username +\n(data connected ' has joined the chat ' : ' has left the chat ');\n$('#messages') append($('<li>') html('<b>' + message + '</b>'));\n});\nSubmit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nEvent 'user' should be emitted with username, currentUsers, and connected js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\announce-new-users.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d67b93ee39fceb93dd5412f70dba3bc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\announce-new-users.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "chat ' : ' has left the chat '); $('#messages') append($('<li>') html('<b>' + message + '</b>')); }); Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints-- Event 'user' should be emitted with username, currentUsers, and connected js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await restext();\n// Regex is lenient to match both `username` and `name` as the key on purpose assert match(\ndata,\n/io emit *('|\")user\\1 *name *currentUsers *connected/s,\n'You should have an event emitted named user sending name, currentUsers, and connected'\n);\n}\nClient should properly handle and display the new data from event 'user' js\nasync () => {\nconst url = new URL(\"/public/client js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/socket on *('|\")user\\1[^]*num-users/s,\n'You should change the text of \"#num-users\" within on your client within the \"user\" event listener to show the current users connected'\n);\nassert match(\ndata,\n/socket on *('|\")user\\1[^]*messages *li/s,\n'You should append a list item to \"#messages\" on your client within the \"user\" event listener to announce a user came or went'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\announce-new-users.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "69fc973a66ccbc6399c1cae8380ebcd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\handle-a-disconnect.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc831f9fc0f352b528e76\ntitle: Handle a Disconnect\nchallengeType: 2\nforumTopicId: 301552\ndashedName: handle-a-disconnect\n--description--\nYou may notice that up to now you have only been increasing the user count. Handling a user disconnecting is just as easy as handling the initial connect, except you have to listen for it on each socket instead of on the whole server.\nTo do this, add another listener inside the existing 'connect' listener that listens for 'disconnect' on the socket with no data passed through. You can test this functionality by just logging that a user has disconnected to the console.\njs\nsocket.on('disconnect', () => {\n/*anything you want to do on disconnect*/\n});\nTo make sure clients continuously have the updated count of current users, you should decrease currentUsers by 1 when the disconnect happens then emit the 'user count' event with the updated count.\nNote: Just like 'disconnect', all other events that a socket can emit to the server should be handled within the connecting listener where we have 'socket' defined.\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point.\n--hints--\nServer should handle the event disconnect from a socket.\njs\nasync () => {\nconst url = new URL(\"/_api/server.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(data, /socket.on.*('|\")disconnect('|\")/s, '');\n}\nYour client should be listening for 'user count' event.\njs\nasync () => {\nconst url = new URL(\"/public/client.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/socket.on.*('|\")user count('|\")/s,\n'Your client should be connection to server with the connection defined as socket'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\handle-a-disconnect.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2527611c1b60e9b2b2eef7c0c65f0ff6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc831f9fc0f352b528e77\ntitle: Authentication with Socket IO\nchallengeType: 2\nforumTopicId: 301548\ndashedName: authentication-with-socket-io\n--description--\nCurrently, you cannot determine who is connected to your web socket While req user contains the user object, that's only when your user interacts with the web server, and with web sockets you have no req (request) and therefore no user data One way to solve the problem of knowing who is connected to your web socket is by parsing and decoding the cookie that contains the passport session then deserializing it to obtain the user object Luckily, there is a package on NPM just for this that turns a once complex task into something simple passport socketio@~3 7 0, connect-mongo@~3 2 0, and cookie-parser@~1 4 5 have already been added as dependencies Require them as passportSocketIo, MongoStore, and cookieParser respectively Also, we need to initialize a new memory store, from express-session which we previously required It should look like this:\njs\nconst MongoStore = require('connect-mongo')(session);\nconst URI = process env MONGO_URI;\nconst store = new MongoStore({ url: URI });\nNow we just have to tell Socket IO to use it and set the options Be sure this is added before the existing socket code and not in the existing connection listener For your server, it should look like this:\njs\nio use(\npassportSocketIo authorize({\ncookieParser: cookieParser,\nkey: 'express sid',\nsecret: process env SESSION_SECRET,\nstore: store,\nsuccess: onAuthorizeSuccess,\nfail: onAuthorizeFail\n})\n);\nNote that configuring Passport authentication for Socket IO is very similar to the way we configured the session middleware for the API This is because they are meant to use the same authentication method — get the session id from a cookie and validate it Previously, when we configured the session middleware, we didn't explicitly set the cookie name for session (key) This is because the session package was using the default value Now that we've added another package which needs access to the same value from the cookies, we need to explicitly set the key value in both configuration objects Be sure to add the key with the cookie name to the session middleware that matches the Socket IO key Also, add the store reference to the options, near where we set saveUninitialized: true",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4811,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "25ab4667aac4b92e52d4cf947686cd3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for session (key) This is because the session package was using the default value Now that we've added another package which needs access to the same value from the cookies, we need to explicitly set the key value in both configuration objects Be sure to add the key with the cookie name to the session middleware that matches the Socket IO key Also, add the store reference to the options, near where we set saveUninitialized: trueThis is necessary to tell Socket IO which session to relate to Now, define the success, and fail callback functions:\n```js\nfunction onAuthorizeSuccess(data, accept) {\nconsole log('successful connection to socket io');\naccept(null, true);\n}\nfunction onAuthorizeFail(data, message, error, accept) {\nif (error) throw new Error(message);\nconsole log('failed connection to socket io:', message);\naccept(null, false);\n}\n```\nThe user object is now accessible on your socket object as socket request user For example, now you can add the following:\njs\nconsole log('user ' + socket request user username + ' connected');\nIt will log to the server console who has connected Submit your page when you think you've got it right If you're running into errors, you can  check out the project up to this point --hints--\npassport socketio should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'passport socketio',\n'Your project should list \"passport socketio\" as a dependency'\n);\n}\ncookie-parser should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'cookie-parser',\n'Your project should list \"cookie-parser\" as a dependency'\n);\n}\npassportSocketIo should be properly required js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require\\((['\"])passport\\ socketio\\1\\)/gi,\n'You should correctly require and instantiate \"passport socketio\"'\n);\n}\npassportSocketIo should be properly setup js\nasync () => {\nconst url = new URL(\"/_api/server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4811,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a0db64210233c87d363c67c63d799f91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "await res json(); assert property( packJson dependencies, 'cookie-parser', 'Your project should list \"cookie-parser\" as a dependency' ); } passportSocketIo should be properly required js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /require\\((['\"])passport\\ socketio\\1\\)/gi, 'You should correctly require and instantiate \"passport socketio\"' ); } passportSocketIo should be properly setup js async () => { const url = new URL(\"/_api/serverjs\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/io\\ use\\(\\s*\\w+\\ authorize\\(/,\n'You should register \"passport socketio\" as socket io middleware and provide it correct options'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4811,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c7c59547b4a4215fdb28d22882369654",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-put-a-profile-together.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70ef9fc0f352b528e6b\ntitle: How to Put a Profile Together\nchallengeType: 2\nforumTopicId: 301554\ndashedName: how-to-put-a-profile-together\n--description--\nNow that you can ensure the user accessing the /profile is authenticated, you can use the information contained in req.user on your page.\nPass an object containing the property username and value of req.user.username as the second argument for the render method of the profile view.\nThen, go to your profile.pug view, and add the following line below the existing h1 element, and at the same level of indentation:\npug\nh2.center#welcome Welcome, #{username}!\nThis creates an h2 element with the class center and id welcome containing the text Welcome, followed by the username.\nAlso, in profile.pug, add a link referring to the /logout route, which will host the logic to unauthenticate a user:\npug\na(href='/logout') Logout\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point.\n--hints--\nYou should correctly add a Pug render variable to /profile.\njs\nasync () => {\nconst url = new URL(\"/_api/server.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/username:( |)req.user.username/,\n'You should be passing the variable username with req.user.username into the render function of the profile page'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-put-a-profile-together.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "03dad9109f4aba8600f1d3e4a3487092",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\communicate-by-emitting.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc831f9fc0f352b528e75\ntitle: Communicate by Emitting\nchallengeType: 2\nforumTopicId: 301550\ndashedName: communicate-by-emitting\n--description--\nEmit is the most common way of communicating you will use When you emit something from the server to 'io', you send an event's name and data to all the connected sockets A good example of this concept would be emitting the current count of connected users each time a new user connects Start by adding a variable to keep track of the users, just before where you are currently listening for connections js\nlet currentUsers = 0;\nNow, when someone connects, you should increment the count before emitting the count So, you will want to add the incrementer within the connection listener js\n++currentUsers;\nFinally, after incrementing the count, you should emit the event (still within the connection listener) The event should be named 'user count', and the data should just be the currentUsers js\nio emit('user count', currentUsers);\nNow, you can implement a way for your client to listen for this event Similar to listening for a connection on the server, you will use the on keyword js\nsocket on('user count', function(data) {\nconsole log(data);\n});\nNow, try loading up your app, authenticate, and you should see in your client console '1' representing the current user count Try loading more clients up, and authenticating to see the number go up Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\ncurrentUsers should be defined js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/currentUsers/s,\n'You should have variable currentUsers defined'\n);\n}\nServer should emit the current user count at each new connection js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/io emit *('|\")user count('|\") *currentUsers/s,\n'You should emit \"user count\" with data currentUsers'\n);\n}\nYour client should be listening for 'user count' event",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\communicate-by-emitting.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf6916d08cf2b9e1aaa0c0f29730a6bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\communicate-by-emitting.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "await res text(); assert match( data, /currentUsers/s, 'You should have variable currentUsers defined' ); } Server should emit the current user count at each new connection js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /io emit *('|\")user count('|\") *currentUsers/s, 'You should emit \"user count\" with data currentUsers' ); } Your client should be listening for 'user count' eventjs\nasync () => {\nconst url = new URL(\"/public/client js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/socket on *('|\")user count('|\")/s,\n'Your client should be connection to server with the connection defined as socket'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\communicate-by-emitting.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eed1bee2b52f9210a65fe58763cb97d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\hashing-your-passwords.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58a25c98f9fc0f352b528e7f\ntitle: Hashing Your Passwords\nchallengeType: 2\nforumTopicId: 301553\ndashedName: hashing-your-passwords\n--description--\nGoing back to the information security section, you may remember that storing plaintext passwords is never okay Now it is time to implement BCrypt to solve this issue bcrypt@~5 0 0 has already been added as a dependency, so require it in your server You will need to handle hashing in 2 key areas: where you handle registering/saving a new account, and when you check to see that a password is correct on login Currently on your registration route, you insert a user's plaintext password into the database like so: password: req body password Hash the passwords instead by adding the following before your database logic: const hash = bcrypt hashSync(req body password, 12);, and replacing the req body password in the database saving with just password: hash On your authentication strategy, you check for the following in your code before completing the process: if (password == user password) return done(null, false); After making the previous changes, now user password is a hash Before making a change to the existing code, notice how the statement is checking if the password is not equal then return non-authenticated With this in mind, change that code to look as follows to properly check the password entered against the hash:\njs\nif ( bcrypt compareSync(password, user password)) {\nreturn done(null, false);\n}\nThat is all it takes to implement one of the most important security features when you have to store passwords Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nBCrypt should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json()\nassert property(\npackJson dependencies,\n'bcrypt',\n'Your project should list \"bcrypt\" as a dependency'\n);\n}\nBCrypt should be correctly required and implemented js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require *(\"|')bcrypt\\1/gi,\n'You should have required bcrypt'\n);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\hashing-your-passwords.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "29d98029527b08e4e9d46c00f8660023",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\hashing-your-passwords.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ const url = new URL(\"/_api/package json\", code); const res = await fetch(url); const packJson = await res json() assert property( packJson dependencies, 'bcrypt', 'Your project should list \"bcrypt\" as a dependency' ); } BCrypt should be correctly required and implemented js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /require *(\"|')bcrypt\\1/gi, 'You should have required bcrypt' ); assertmatch(\ndata,\n/bcrypt hashSync/gi,\n'You should use hash the password in the registration'\n);\nassert match(\ndata,\n/bcrypt compareSync/gi,\n'You should compare the password to the hash in your strategy'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\hashing-your-passwords.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "649f451d3dae01358288aa8bd1fb80ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implement-the-serialization-of-a-passport-user.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70cf9fc0f352b528e67\ntitle: Implement the Serialization of a Passport User\nchallengeType: 2\nforumTopicId: 301556\ndashedName: implement-the-serialization-of-a-passport-user\n--description--\nYou are not loading an actual user object since the database is not set up Connect to the database once, when you start the server, and keep a persistent connection for the full life-cycle of the app To do this, add your database's connection string (for example: mongodb+srv://<username>:<password>@cluster0-jvwxi mongodb net/ retryWrites=true&w=majority) to the environment variable MONGO_URI This is used in the connection js file If you are having issues setting up a free database on MongoDB Atlas, check out this tutorial Now you want to connect to your database, then start listening for requests The purpose of this is to not allow requests before your database is connected or if there is a database error To accomplish this, encompass your serialization and app routes in the following code:\n```javascript\nmyDB(async client => {\nconst myDataBase = await client db('database') collection('users');\n// Be sure to change the title\napp route('/') get((req, res) => {\n// Change the response to render the Pug template\nres render('index', {\ntitle: 'Connected to Database',\nmessage: 'Please login'\n});\n});\n// Serialization and deserialization here // Be sure to add this }) catch(e => {\napp route('/') get((req, res) => {\nres render('index', { title: e, message: 'Unable to connect to database' });\n});\n});\n// app listen out here ```\nBe sure to uncomment the myDataBase code in deserializeUser, and edit your done(null, null) to include the doc Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nDatabase connection should be present js\nasync () => {\nconst url = new URL(\"/\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/Connected to Database/gi,\n'You successfully connected to the database '\n);\n}\nDeserialization should now be correctly using the DB and done(null, null) should be called with the doc js\nasync () => {\nconst url = new URL(\"/_api/server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implement-the-serialization-of-a-passport-user.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a6fc64861fa60a480826dddaafbb70b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implement-the-serialization-of-a-passport-user.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "project completed up to this point --hints-- Database connection should be present js async () => { const url = new URL(\"/\", code); const res = await fetch(url); const data = await res text(); assert match( data, /Connected to Database/gi, 'You successfully connected to the database ' ); } Deserialization should now be correctly using the DB and done(null, null) should be called with the doc js async () => { const url = new URL(\"/_api/serverjs\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/null,\\s*doc/gi,\n'The callback in deserializeUser of (null, null) should be altered to (null, doc)'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implement-the-serialization-of-a-passport-user.md",
      "source_type": "git_repo"
    },
    "token_count": 152,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b5f39f22978204f053e5bc97d68f6a13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-use-passport-strategies.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70df9fc0f352b528e69\ntitle: How to Use Passport Strategies\nchallengeType: 2\nforumTopicId: 301555\ndashedName: how-to-use-passport-strategies\n--description--\nIn the index pug file supplied, there is a login form It is hidden because of the inline JavaScript if showLogin with the form indented after it In the res render for that page, add a new variable to the object, showLogin: true When you refresh your page, you should then see the form This form is set up to POST on /login So, this is where you should set up to accept the POST request and authenticate the user For this challenge, you should add the route /login to accept a POST request To authenticate on this route, you need to add a middleware to do so before then sending a response This is done by just passing another argument with the middleware before with your response The middleware to use is passport authenticate('local') passport authenticate can also take some options as an argument such as { failureRedirect: '/' } which is incredibly useful, so be sure to add that in as well Add a response after using the middleware (which will only be called if the authentication middleware passes) that redirects the user to /profile Add that route, as well, and make it render the view profile pug If the authentication was successful, the user object will be saved in req user At this point, if you enter a username and password in the form, it should redirect to the home page /, and the console of your server should display 'User {USERNAME} attempted to log in ', since we currently cannot login a user who isn't registered Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nAll steps should be correctly implemented in server js js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/showLogin:( |)true/,\n'You should be passing the variable \"showLogin\" as true to your render function for the homepage'\n);\nassert match(\ndata,\n/failureRedirect:( |)('|\")\\/('|\")/,\n'Your code should include a failureRedirect to the \"/\" route'\n);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-use-passport-strategies.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0a8463335dea92c825c5accb4ef8532c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-use-passport-strategies.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "up to this point --hints-- All steps should be correctly implemented in server js js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /showLogin:( |)true/, 'You should be passing the variable \"showLogin\" as true to your render function for the homepage' ); assert match( data, /failureRedirect:( |)('|\")\\/('|\")/, 'Your code should include a failureRedirect to the \"/\" route' ); assertmatch(\ndata,\n/login[^]*post[^]*local/,\n'You should have a route for login which accepts a POST and passport authenticates local'\n);\n}\nA POST request to /login should correctly redirect to / js\nasync () => {\nconst url = new URL(\"/login\", code);\nconst res = await fetch(url, { method: 'POST' });\nconst data = await res text();\nassert match(\ndata,\n/Looks like this page is being rendered from Pug into HTML /,\n'A login attempt at this point should redirect to the homepage since we do not have any registered users'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-use-passport-strategies.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c54db6ca4563a0d527d70bf76ebcf419",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\logging-a-user-out.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58965611f9fc0f352b528e6c\ntitle: Logging a User Out\nchallengeType: 2\nforumTopicId: 301560\ndashedName: logging-a-user-out\n--description--\nCreating the logout logic is easy. The route should just unauthenticate the user, and redirect to the home page instead of rendering any view.\nIn passport, unauthenticating a user is as easy as just calling req.logout() before redirecting. Add this /logout route to do that:\njs\napp.route('/logout')\n.get((req, res) => {\nreq.logout();\nres.redirect('/');\n});\nYou may have noticed that you are not handling missing pages (404). The common way to handle this in Node is with the following middleware. Go ahead and add this in after all your other routes:\njs\napp.use((req, res, next) => {\nres.status(404)\n.type('text')\n.send('Not Found');\n});\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point.\n--hints--\nreq.logout() should be called in your /logout route.\njs\nasync () => {\nconst url = new URL(\"/_api/server.js\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/req.logout/gi,\n'You should be calling req.logout() in your /logout route'\n);\n}\n/logout should redirect to the home page.\njs\nasync () => {\nconst url = new URL(\"/logout\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/Home page/gi,\n'When a user logs out they should be redirected to the homepage'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\logging-a-user-out.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a3b4970abd5113b323214f4f434e31f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-iii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589a8eb3f9fc0f352b528e72\ntitle: Implementation of Social Authentication III\nchallengeType: 2\nforumTopicId: 301558\ndashedName: implementation-of-social-authentication-iii\n--description--\nThe final part of the strategy is handling the profile returned from GitHub We need to load the user's database object if it exists, or create one if it doesn't, and populate the fields from the profile, then return the user's object GitHub supplies us a unique id within each profile which we can use to search with to serialize the user with (already implemented) Below is an example implementation you can use in your project--it goes within the function that is the second argument for the new strategy, right below where console log(profile); currently is:\njs\nmyDataBase findOneAndUpdate(\n{ id: profile id },\n{\n$setOnInsert: {\nid: profile id,\nusername: profile username,\nname: profile displayName || 'John Doe',\nphoto: profile photos[0] value || '',\nemail: Array isArray(profile emails) profile emails[0] value\n: 'No public email',\ncreated_on: new Date(),\nprovider: profile provider || ''\n},\n$set: {\nlast_login: new Date()\n},\n$inc: {\nlogin_count: 1\n}\n},\n{ upsert: true, new: true },\n(err, doc) => {\nreturn cb(null, doc value);\n}\n);\nfindOneAndUpdate allows you to search for an object and update it If the object doesn't exist, it will be inserted and made available to the callback function In this example, we always set last_login, increment the login_count by 1, and only populate the majority of the fields when a new object (new user) is inserted Notice the use of default values Sometimes a profile returned won't have all the information filled out or the user will keep it private In this case, you handle it to prevent an error You should be able to login to your app now Try it Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nGitHub strategy setup should be complete js\nasync () => {\nconst url = new URL(\"/_api/auth js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2711,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-iii.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f04beb83e0b6b9d9118fd5b93000b343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-iii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you handle it to prevent an error You should be able to login to your app now Try it Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints-- GitHub strategy setup should be complete js async () => { const url = new URL(\"/_api/auth js\", code); const res = await fetch(url); const data = await res text(); assertmatch(\ndata,\n/GitHubStrategy[^]*myDataBase/gi,\n'Strategy should use now use the database to search for the user'\n);\nassert match(\ndata,\n/GitHubStrategy[^]*cb/gi,\n'Strategy should return the callback function \"cb\"'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2711,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-iii.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "649081b8643920467a84f8c6f6506d7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589a69f5f9fc0f352b528e71\ntitle: Implementation of Social Authentication II\nchallengeType: 2\nforumTopicId: 301557\ndashedName: implementation-of-social-authentication-ii\n--description--\nThe last part of setting up your GitHub authentication is to create the strategy itself passport-github@~1 1 0 has already been added as a dependency, so require it in your auth js file as GitHubStrategy like this: const GitHubStrategy = require('passport-github') Strategy; Do not forget to require and configure dotenv to use your environment variables To set up the GitHub strategy, you have to tell Passport to use an instantiated GitHubStrategy, which accepts 2 arguments: an object (containing clientID, clientSecret, and callbackURL) and a function to be called when a user is successfully authenticated, which will determine if the user is new and what fields to save initially in the user's database object This is common across many strategies, but some may require more information as outlined in that specific strategy's GitHub README For example, Google requires a scope as well which determines what kind of information your request is asking to be returned and asks the user to approve such access The current strategy you are implementing authenticates users using a GitHub account and OAuth 2 0 tokens The client ID and secret obtained when creating an application are supplied as options when creating the strategy The strategy also requires a verify callback, which receives the access token and optional refresh token, as well as profile which contains the authenticated user's GitHub profile The verify callback must call cb providing a user to complete authentication Here's how your new strategy should look at this point:\njs\npassport use(new GitHubStrategy({\nclientID: process env GITHUB_CLIENT_ID,\nclientSecret: process env GITHUB_CLIENT_SECRET,\ncallbackURL: /*INSERT CALLBACK URL ENTERED INTO GITHUB HERE*/\n},\nfunction(accessToken, refreshToken, profile, cb) {\nconsole log(profile);\n//Database logic here with callback containing your user object\n}\n));\nYour authentication won't be successful yet, and it will actually throw an error without the database logic and callback, but it should log your GitHub profile to your console if you try it Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\npassport-github dependency should be added",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4045,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ea85ecfbde0f4219756950f68beb01d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "//Database logic here with callback containing your user object } )); Your authentication won't be successful yet, and it will actually throw an error without the database logic and callback, but it should log your GitHub profile to your console if you try it Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints-- passport-github dependency should be addedjs\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'passport-github',\n'Your project should list \"passport-github\" as a dependency'\n);\n}\npassport-github should be required js\nasync () => {\nconst url = new URL(\"/_api/auth js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require *(\"|')passport-github(\"|')/gi,\n'You should have required passport-github'\n);\n}\nGitHub strategy should be setup correctly thus far js\nasync () => {\nconst url = new URL(\"/_api/auth js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/passport\\ use *new GitHubStrategy/gis,\n'Passport should use a new GitHubStrategy'\n);\nassert match(\ndata,\n/callbackURL:\\s*(\"|') *(\"|')/gi,\n'You should have a callbackURL'\n);\nassert match(\ndata,\n/process\\ env(\\ GITHUB_CLIENT_SECRET|\\[( <q>\"|')GITHUB_CLIENT_SECRET\\k<q>\\])/g,\n'You should use process env GITHUB_CLIENT_SECRET'\n);\nassert match(\ndata,\n/process\\ env(\\ GITHUB_CLIENT_ID|\\[( <q>\"|')GITHUB_CLIENT_ID\\k<q>\\])/g,\n'You should use process env GITHUB_CLIENT_ID'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4045,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0fe71e6fd90dfd27af21a9880afb08ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\send-and-display-chat-messages.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc832f9fc0f352b528e79\ntitle: Send and Display Chat Messages\nchallengeType: 2\nforumTopicId: 301562\ndashedName: send-and-display-chat-messages\n--description--\nIt's time you start allowing clients to send a chat message to the server to emit to all the clients In your client js file, you should see there is already a block of code handling when the message form is submitted js\n$('form') submit(function() {\n/*logic*/\n});\nWithin the form submit code, you should emit an event after you define messageToSend but before you clear the text box #m The event should be named 'chat message' and the data should just be messageToSend js\nsocket emit('chat message', messageToSend);\nNow, on your server, you should be listening to the socket for the event 'chat message' with the data being named message Once the event is received, it should emit the event 'chat message' to all sockets using io emit, sending a data object containing the username and message In client js, you should now listen for event 'chat message' and, when received, append a list item to #messages with the username, a colon, and the message At this point, the chat should be fully functional and sending messages across all clients Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nServer should listen for 'chat message' and then emit it properly js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/socket on *('|\")chat message('|\")[^]*io emit *('|\")chat message('|\") *username *message/s,\n'Your server should listen to the socket for \"chat message\" then emit to all users \"chat message\" with name and message in the data object'\n);\n}\nClient should properly handle and display the new data from event 'chat message' js\nasync () => {\nconst url = new URL(\"/public/client js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/socket on *('|\")chat message('|\")[^]*messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\send-and-display-chat-messages.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5a8061f98a2cd2df59aefe8fad58ff3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\send-and-display-chat-messages.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "message('|\")[^]*io emit *('|\")chat message('|\") *username *message/s, 'Your server should listen to the socket for \"chat message\" then emit to all users \"chat message\" with name and message in the data object' ); } Client should properly handle and display the new data from event 'chat message' js async () => { const url = new URL(\"/public/client js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /socket on *('|\")chat message('|\")[^]*messages*li/s,\n'You should append a list item to #messages on your client within the \"chat message\" event listener to display the new message'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\send-and-display-chat-messages.md",
      "source_type": "git_repo"
    },
    "token_count": 150,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "db305ead7c1b99d0e8cb8ce09376fca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589a69f5f9fc0f352b528e70\ntitle: Implementation of Social Authentication\nchallengeType: 2\nforumTopicId: 301559\ndashedName: implementation-of-social-authentication\n--description--\nThe basic path this kind of authentication will follow in your app is:\nUser clicks a button or link sending them to your route to authenticate using a specific strategy (e g GitHub) Your route calls passport authenticate('github') which redirects them to GitHub The page the user lands on, on GitHub, allows them to login if they aren't already It then asks them to approve access to their profile from your app The user is then returned to your app at a specific callback url with their profile if they are approved They are now authenticated, and your app should check if it is a returning profile, or save it in your database if it is not Strategies with OAuth require you to have at least a Client ID and a Client Secret which is a way for the service to verify who the authentication request is coming from and if it is valid These are obtained from the site you are trying to implement authentication with, such as GitHub, and are unique to your app--THEY ARE NOT TO BE SHARED and should never be uploaded to a public repository or written directly in your code A common practice is to put them in your env file and reference them like so: process env GITHUB_CLIENT_ID For this challenge you are going to use the GitHub strategy Follow these instructions to obtain your Client ID and Secret from GitHub Set the homepage URL to your homepage (not the project code's URL), and set the callback URL to the same homepage URL with /auth/github/callback appended to the end Save the client ID and your client secret in your project's env file as GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET In your routes js file, add showSocialAuth: true to the homepage route, after showRegistration: true Now, create 2 routes accepting GET requests: /auth/github and /auth/github/callback The first should only call passport to authenticate 'github' The second should call passport to authenticate 'github' with a failure redirect to /, and then if that is successful redirect to /profile (similar to your last project) An example of how /auth/github/callback should look is similar to how you handled a normal login:\njs\napp route('/login') post(passport",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1769e1399ddf686b13ce99f13a67c41b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "showSocialAuth: true to the homepage route, after showRegistration: true Now, create 2 routes accepting GET requests: /auth/github and /auth/github/callback The first should only call passport to authenticate 'github' The second should call passport to authenticate 'github' with a failure redirect to /, and then if that is successful redirect to /profile (similar to your last project) An example of how /auth/github/callback should look is similar to how you handled a normal login: js app route('/login') post(passportauthenticate('local', { failureRedirect: '/' }), (req,res) => {\nres redirect('/profile');\n});\nSubmit your page when you think you've got it right If you're running into errors, you can check out the project up to this point --hints--\nRoute /auth/github should be correct js\nasync () => {\ntry {\nconst res = await fetch(code + '/_api/routes js');\nif (res ok) {\nconst data = await res text();\nassert match(\ndata replace(/\\s/g, ''),\n/passport authenticate * github/g,\n'Route auth/github should only call passport authenticate with github'\n);\n} else {\nthrow new Error(res statusText);\n}\nconst res2 = await fetch(code + '/_api/app-stack');\nif (res2 ok) {\nconst data2 = JSON parse(await res2 json());\nconst dataLayer = data2 find(layer => layer route path === '/auth/github');\nassert deepInclude(dataLayer route, { methods: {get: true}, path: \"/auth/github\"});\nassert deepInclude(dataLayer route stack [0], {method: \"get\", name: \"authenticate\"});\n} else {\nthrow new Error(res2 statusText);\n}\n} catch (err) {\nthrow new Error(err);\n}\n}\nRoute /auth/github/callback should be correct js\nasync () => {\ntry {\nconst res = await fetch(code + '/_api/routes js');\nif (res ok) {\nconst data = await res text();\nassert match(\ndata replace(/\\s/g, ''),\n/failureRedirect:(\"|')\\/\\1/g,\n'Route auth/github/callback should accept a get request and call passport authenticate for github with a failure redirect to home'\n);\n} else {\nthrow new Error(res statusText);\n}\nconst res2 = await fetch(code + '/_api/app-stack');\nif (res2 ok) {\nconst data2 = JSON parse(await res2 json());\nconst dataLayer = data2 find(layer => layer route",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "55f0c132e0320f3e3588f2e3987186c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= await fetch(code + '/_api/routes js'); if (res ok) { const data = await res text(); assert match( data replace(/\\s/g, ''), /failureRedirect:(\"|')\\/\\1/g, 'Route auth/github/callback should accept a get request and call passport authenticate for github with a failure redirect to home' ); } else { throw new Error(res statusText); } const res2 = await fetch(code + '/_api/app-stack'); if (res2 ok) { const data2 = JSON parse(await res2 json()); const dataLayer = data2 find(layer => layer routepath === '/auth/github/callback');\nassert deepInclude(dataLayer route, { methods: {get: true}, path: \"/auth/github/callback\"});\nassert deepInclude(dataLayer route stack [0], {method: \"get\", name: \"authenticate\"});\n} else {\nthrow new Error(res2 statusText);\n}\n} catch (err) {\nthrow new Error(err);\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5c9480f5efcd6309a9e75105906e94be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\serialization-of-a-user-object.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70cf9fc0f352b528e66\ntitle: Serialization of a User Object\nchallengeType: 2\nforumTopicId: 301563\ndashedName: serialization-of-a-user-object\n--description--\nSerialization and deserialization are important concepts in regard to authentication To serialize an object means to convert its contents into a small key that can then be deserialized into the original object This is what allows us to know who has communicated with the server without having to send the authentication data, like the username and password, at each request for a new page To set this up properly, you need to have a serialize function and a deserialize function In Passport, these can be created with:\njavascript\npassport serializeUser(cb);\npassport deserializeUser(cb);\nThe callback function passed to serializeUser is called with two arguments: the full user object, and a callback used by passport The callback expects two arguments: An error, if any, and a unique key to identify the user that should be returned in the callback You will use the user's _id in the object This is guaranteed to be unique, as it is generated by MongoDB Similarly, deserializeUser is called with two arguments: the unique key, and a callback function This callback expects two arguments: An error, if any, and the full user object To get the full user object, make a query search for a Mongo _id, as shown below:\n```javascript\npassport serializeUser((user, done) => {\ndone(null, user _id);\n});\npassport deserializeUser((id, done) => {\nmyDataBase findOne({ _id: new ObjectID(id) }, (err, doc) => {\ndone(null, null);\n});\n});\n```\nAdd the two functions above to your server The ObjectID class comes from the mongodb package mongodb@~3 6 0 has already been added as a dependency Declare this class with:\njavascript\nconst { ObjectID } = require('mongodb');\nThe deserializeUser will throw an error until you set up the database connection So, for now, comment out the myDatabase findOne call, and just call done(null, null) in the deserializeUser callback function Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nYou should serialize the user object correctly js\nasync () => {\nconst url = new URL(\"/_api/server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4117,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\serialization-of-a-user-object.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6b4af839515c827a0ba872495e77d2b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\serialization-of-a-user-object.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The deserializeUser will throw an error until you set up the database connection So, for now, comment out the myDatabase findOne call, and just call done(null, null) in the deserializeUser callback function Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints-- You should serialize the user object correctly js async () => { const url = new URL(\"/_api/serverjs\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/passport serializeUser/gi,\n'You should have created your passport serializeUser function'\n);\nassert match(\ndata,\n/null,\\s*user _id/gi,\n'There should be a callback in your serializeUser with (null, user _id)'\n);\n}\nYou should deserialize the user object correctly js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/passport deserializeUser/gi,\n'You should have created your passport deserializeUser function'\n);\nassert match(\ndata,\n/null,\\s*null/gi,\n'There should be a callback in your deserializeUser with (null, null) for now'\n);\n}\nMongoDB should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'mongodb',\n'Your project should list \"mongodb\" as a dependency'\n);\n}\nMongodb should be properly required including the ObjectId js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require *(\"|')mongodb\\1/gi,\n'You should have required mongodb'\n);\nassert match(\ndata,\n/new ObjectID *id/gi,\n'Even though the block is commented out, you should use new ObjectID(id) for when we add the database'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4117,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\serialization-of-a-user-object.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a7eee04c8313b9c4734811dad58420b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-a-template-engine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f700f9fc0f352b528e63\ntitle: Set up a Template Engine\nchallengeType: 2\nforumTopicId: 301564\ndashedName: set-up-a-template-engine\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo A template engine enables you to use static template files (such as those written in Pug) in your app At runtime, the template engine replaces variables in a template file with actual values which can be supplied by your server Then it transforms the template into a static HTML file that is sent to the client This approach makes it easier to design an HTML page and allows for displaying variables on the page without needing to make an API call from the client pug@~3 0 0 has already been installed, and is listed as a dependency in your package json file Express needs to know which template engine you are using Use the set method to assign pug as the view engine property's value:\njavascript\napp set('view engine', 'pug');\nAfter that, add another set method that sets the views property of your app to point to the /views/pug directory This tells Express to render all views relative to that directory Finally, use res render() in the route for your home page, passing index as the first argument This will render the pug template If all went as planned, your app home page will no longer be blank Instead, it will display a message indicating you've successfully rendered the Pug template Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nPug should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'pug',\n'Your project should list \"pug\" as a dependency'\n);\n}\nView engine should be Pug js\nasync () => {\nconst url = new URL(\"/_api/app\", code);\nconst res = await fetch(url);\nconst app = await res json();\nassert equal(app settings",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-a-template-engine.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "944dd969c555e9961e16c4270a684907",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-a-template-engine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this point --hints-- Pug should be a dependency js async () => { const url = new URL(\"/_api/package json\", code); const res = await fetch(url); const packJson = await res json(); assert property( packJson dependencies, 'pug', 'Your project should list \"pug\" as a dependency' ); } View engine should be Pug js async () => { const url = new URL(\"/_api/app\", code); const res = await fetch(url); const app = await res json(); assert equal(app settings['view engine'], \"pug\");\n}\nYou should set the views property of the application to /views/pug js\nasync () => {\nconst url = new URL(\"/_api/app\", code);\nconst res = await fetch(url);\nconst app = await res json();\nassert equal(app settings views, \" /views/pug\");\n}\nUse the correct ExpressJS method to render the index page from the response js\nasync () => {\nconst url = new URL(\"/\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/FCC Advanced Node and Express/gi,\n'You successfully rendered the Pug template '\n);\n}\nPug should be working js\nasync () => {\nconst url = new URL(\"/\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/pug-success-message/gi,\n'Your projects home page should now be rendered by pug with the projects pug file unaltered'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-a-template-engine.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "277297e613224f66f9e1f402fea73018",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\use-a-template-engines-powers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70bf9fc0f352b528e64\ntitle: Use a Template Engine's Powers\nchallengeType: 2\nforumTopicId: 301567\ndashedName: use-a-template-engines-powers\n--description--\nOne of the greatest features of using a template engine is being able to pass variables from the server to the template file before rendering it to HTML.\nIn your Pug file, you're able to use a variable by referencing the variable name as #{variable_name} inline with other text on an element or by using an equal sign on the element without a space such as p=variable_name which assigns the variable's value to the p element's text.\nPug is all about using whitespace and tabs to show nested elements and cutting down on the amount of code needed to make a beautiful site.\nTake the following Pug code for example:\npug\nhead\nscript(type='text/javascript').\nif (foo) bar(1 + 5);\nbody\nif youAreUsingPug\np You are amazing\nelse\np Get on it!\nThe above yields the following HTML:\n```html\nYou are amazing\n```\nYour index.pug file included in your project, uses the variables title and message.\nPass those from your server to the Pug file by adding an object as a second argument to your res.render call with the variables and their values. Give the title a value of Hello and message a value of Please log in.\nIt should look like:\njavascript\nres.render('index', { title: 'Hello', message: 'Please log in' });\nNow refresh your page, and you should see those values rendered in your view in the correct spot as laid out in your index.pug file!\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point.\n--hints--\nPug should correctly render variables.\njs\nasync () => {\nconst url = new URL(\"/\", code);\nconst res = await fetch(url);\nconst data = await res.text();\nassert.match(\ndata,\n/pug-variable(\"|')>Please log in/gi,\n'Your projects home page should now be rendered by pug with the projects .pug file unaltered'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2344,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\use-a-template-engines-powers.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7dfa97a64a86a544614c3f43b9e86a77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-passport.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5895f70cf9fc0f352b528e65\ntitle: Set up Passport\nchallengeType: 2\nforumTopicId: 301565\ndashedName: set-up-passport\n--description--\nIt's time to set up Passport so you can finally start allowing a user to register or log in to an account In addition to Passport, you will use Express-session to handle sessions Express-session has a ton of advanced features you can use, but for now you are just going to use the basics Using this middleware saves the session id as a cookie in the client, and allows us to access the session data using that id on the server This way, you keep personal account information out of the cookie used by the client to tell to your server clients are authenticated and keep the key to access the data stored on the server passport@~0 4 1 and express-session@~1 17 1 are already installed, and are both listed as dependencies in your package json file You will need to set up the session settings and initialize Passport First, create the variables session and passport to require express-session and passport respectively Then, set up your Express app to use the session by defining the following options:\njavascript\napp use(session({\nsecret: process env SESSION_SECRET,\nresave: true,\nsaveUninitialized: true,\ncookie: { secure: false }\n}));\nBe sure to add SESSION_SECRET to your env file, and give it a random value This is used to compute the hash used to encrypt your cookie After you do all that, tell your express app to use passport initialize() and passport session() Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point --hints--\nPassport and Express-session should be dependencies js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'passport',\n'Your project should list \"passport\" as a dependency'\n);\nassert property(\npackJson dependencies,\n'express-session',\n'Your project should list \"express-session\" as a dependency'\n);\n}\nDependencies should be correctly required js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/require",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-passport.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2dc35406bf60eb915440ccaff28aff1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-passport.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "new URL(\"/_api/package json\", code); const res = await fetch(url); const packJson = await res json(); assert property( packJson dependencies, 'passport', 'Your project should list \"passport\" as a dependency' ); assert property( packJson dependencies, 'express-session', 'Your project should list \"express-session\" as a dependency' ); } Dependencies should be correctly required js async () => { const url = new URL(\"/_api/server js\", code); const res = await fetch(url); const data = await res text(); assert match( data, /require*(\"|')passport(\"|')/,\n'You should have required passport'\n);\nassert match(\ndata,\n/require *(\"|')express-session(\"|')/,\n'You should have required express-session'\n);\n}\nExpress app should use new dependencies js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(data, /passport\\ initialize/, 'Your express app should use \"passport initialize()\"');\nassert match(data, /passport\\ session/, 'Your express app should use \"passport session()\"');\n}\nSession and session secret should be correctly set up js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/secret *:\\s*process\\ env(\\ SESSION_SECRET|\\[( <q>\"|')SESSION_SECRET\\k<q>\\])/,\n'Your express app should have express-session set up with your secret as process env SESSION_SECRET'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-passport.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5a08ee047d16c8a3299ff8f53f9eff6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\assert-deep-equality-with-.deepequal-and-.notdeepequal.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824c367417b2b2512c4c\ntitle: Assert Deep Equality with .deepEqual and .notDeepEqual\nchallengeType: 2\nforumTopicId: 301587\ndashedName: assert-deep-equality-with--deepequal-and--notdeepequal\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\ndeepEqual() asserts that two objects are deep equal.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #7 in the Equality suite, change each assert to either assert.deepEqual or assert.notDeepEqual to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=6').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - deepEqual vs. notDeepEqual.\njs\n$.get(code + '/_api/get-tests?type=unit&n=6').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'deepEqual',\n'The order of the keys does not matter'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - deepEqual vs. notDeepEqual.\njs\n$.get(code + '/_api/get-tests?type=unit&n=6').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'notDeepEqual',\n'The position of elements within an array does matter'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\assert-deep-equality-with-.deepequal-and-.notdeepequal.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "618539ca24c4745ae18ad539b2501859",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-the-environment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 589fc830f9fc0f352b528e74\ntitle: Set up the Environment\nchallengeType: 2\nforumTopicId: 301566\ndashedName: set-up-the-environment\n--description--\nThe following challenges will make use of the chat pug file So, in your routes js file, add a GET route pointing to /chat which makes use of ensureAuthenticated, and renders chat pug, with { user: req user } passed as an argument to the response Now, alter your existing /auth/github/callback route to set the req session user_id = req user id, and redirect to /chat socket io@~2 3 0 has already been added as a dependency, so require/instantiate it in your server as follows with http (comes built-in with Nodejs):\njavascript\nconst http = require('http') createServer(app);\nconst io = require('socket io')(http);\nNow that the http server is mounted on the express app, you need to listen from the http server Change the line with app listen to http listen The first thing needing to be handled is listening for a new connection from the client The on keyword does just that- listen for a specific event It requires 2 arguments: a string containing the title of the event that's emitted, and a function with which the data is passed through In the case of our connection listener, use socket to define the data in the second argument A socket is an individual client who is connected To listen for connections to your server, add the following within your database connection:\njavascript\nio on('connection', socket => {\nconsole log('A user has connected');\n});\nNow for the client to connect, you just need to add the following to your client js which is loaded by the page after you've authenticated:\njs\n/*global io*/\nlet socket = io();\nThe comment suppresses the error you would normally see since 'io' is not defined in the file You have already added a reliable CDN to the Socket IO library on the page in chat pug Now try loading up your app and authenticate and you should see in your server console A user has connected Note:io() works only when connecting to a socket hosted on the same url/server For connecting to an external socket hosted elsewhere, you would use io connect('URL'); Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-the-environment.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e540fd8155c79fd5572c4fe52cfac7de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-the-environment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "page in chat pug Now try loading up your app and authenticate and you should see in your server console A user has connected Note:io() works only when connecting to a socket hosted on the same url/server For connecting to an external socket hosted elsewhere, you would use io connect('URL'); Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point--hints--\nsocket io should be a dependency js\nasync () => {\nconst url = new URL(\"/_api/package json\", code);\nconst res = await fetch(url);\nconst packJson = await res json();\nassert property(\npackJson dependencies,\n'socket io',\n'Your project should list \"socket io\" as a dependency'\n);\n}\nYou should correctly require and instantiate http as http js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/http *= *require *('|\")http\\1/s,\n'Your project should list \"http\" as a dependency'\n);\n}\nYou should correctly require and instantiate socket io as io js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/io *= *require *('|\")socket io\\1 *http/s,\n'You should correctly require and instantiate socket io as io '\n);\n}\nSocket IO should be listening for connections js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/io on *('|\")connection\\1 *socket/s,\n'io should listen for \"connection\" and socket should be the 2nd arguments variable'\n);\n}\nYour client should connect to your server js\nasync () => {\nconst url = new URL(\"/public/client js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/socket *= *io/s,\n'Your client should be connection to server with the connection defined as socket'\n);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-the-environment.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bec0e66f18c897368a7283478e9837fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\learn-how-javascript-assertions-work.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824a367417b2b2512c46\ntitle: Learn How JavaScript Assertions Work\nchallengeType: 2\nforumTopicId: 301589\ndashedName: learn-how-javascript-assertions-work\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #1 in the Basic Assertions suite, change each assert to either assert.isNull or assert.isNotNull to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=0').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - isNull vs. isNotNull.\njs\n$.get(code + '/_api/get-tests?type=unit&n=0').then(\n(data) => {\nassert.equal(data.assertions[0].method, 'isNull', 'Null is null');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - isNull vs. isNotNull.\njs\n$.get(code + '/_api/get-tests?type=unit&n=0').then(\n(data) => {\nassert.equal(data.assertions[1].method, 'isNotNull', '1 is not null');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1751,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\learn-how-javascript-assertions-work.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7fe0a6c82f76f666c3194ace7dac8a13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58966a17f9fc0f352b528e6d\ntitle: Registration of New Users\nchallengeType: 2\nforumTopicId: 301561\ndashedName: registration-of-new-users\n--description--\nNow you need to allow a new user on your site to register an account In the res render for the home page add a new variable to the object passed along - showRegistration: true When you refresh your page, you should then see the registration form that was already created in your index pug file This form is set up to POST on /register, so create that route and have it add the user object to the database by following the logic below The logic of the registration route should be as follows:\nRegister the new user\nAuthenticate the new user\nRedirect to /profile\nThe logic of step 1 should be as follows:\nQuery database with findOne\nIf there is an error, call next with the error\nIf a user is returned, redirect back to home\nIf a user is not found and no errors occur, then insertOne into the database with the username and password As long as no errors occur there, call next to go to step 2, authenticating the new user, which you already wrote the logic for in your POST /login route js\napp route('/register') post((req, res, next) => {\nmyDataBase findOne({ username: req body username }, (err, user) => {\nif (err) {\nnext(err);\n} else if (user) {\nres redirect('/');\n} else {\nmyDataBase insertOne({\nusername: req body username,\npassword: req body password\n},\n(err, doc) => {\nif (err) {\nres redirect('/');\n} else {\n// The inserted document is held within\n// the ops property of the doc\nnext(null, doc ops[0]);\n}\n}\n)\n}\n})\n},\npassport authenticate('local', { failureRedirect: '/' }),\n(req, res, next) => {\nres redirect('/profile');\n}\n);\nSubmit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point NOTE: From this point onwards, issues can arise relating to the use of the picture-in-picture browser If you are using an online IDE which offers a preview of the app within the editor, it is recommended to open this preview in a new tab",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dc587a494a8185445a60695e3e7f9c80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> { res redirect('/profile'); } ); Submit your page when you think you've got it right If you're running into errors, you can check out the project completed up to this point NOTE: From this point onwards, issues can arise relating to the use of the picture-in-picture browser If you are using an online IDE which offers a preview of the app within the editor, it is recommended to open this preview in a new tab--hints--\nYou should have a /register route and display a registration form on the home page js\nasync () => {\nconst url = new URL(\"/_api/server js\", code);\nconst res = await fetch(url);\nconst data = await res text();\nassert match(\ndata,\n/showRegistration:( |)true/gi,\n'You should be passing the variable showRegistration as true to your render function for the homepage'\n);\nassert match(\ndata,\n/register[^]*post[^]*findOne[^]*username:( |)req body username/gi,\n'You should have a route that accepts a POST request on /register that queries the db with findOne and the query being username: req body username'\n);\n}\nRegistering should work js\nasync () => {\nconst url = code;\nconst user = `freeCodeCampTester${Date now()}`;\nconst xhttp = new XMLHttpRequest();\nxhttp onreadystatechange = function () {\nif (this readyState == 4 && this status == 200) {\ntest(this);\n} else {\nthrow new Error(`${this status} ${this statusText}`);\n}\n};\nxhttp open('POST', url + '/register', true);\nxhttp setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\nxhttp send(`username=${user}&password=${user}`);\nfunction test(xhttpRes) {\nconst data = xhttpRes responseText;\nassert match(\ndata,\n/Profile/gi,\n'Register should work, and redirect successfully to the profile '\n);\n}\n};\nLogin should work js\nasync () => {\nconst url = code;\nconst user = `freeCodeCampTester${Date now()}`;\nconst xhttpReg = new XMLHttpRequest();\nxhttpReg onreadystatechange = function () {\nif (this readyState == 4 && this status == 200) {\nlogin();\n} else {\nthrow new Error(`${this status} ${this statusText}`);\n}\n};\nxhttpReg open('POST', url + '/register', true);\nxhttpReg",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b87ae98a3bafc6daf2211341ecfe4c5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "responseText; assert match( data, /Profile/gi, 'Register should work, and redirect successfully to the profile ' ); } }; Login should work js async () => { const url = code; const user = `freeCodeCampTester${Date now()}`; const xhttpReg = new XMLHttpRequest(); xhttpReg onreadystatechange = function () { if (this readyState == 4 && this status == 200) { login(); } else { throw new Error(`${this status} ${this statusText}`); } }; xhttpReg open('POST', url + '/register', true); xhttpRegsetRequestHeader(\n'Content-type',\n'application/x-www-form-urlencoded'\n);\nxhttpReg send(`username=${user}&password=${user}`);\nfunction login() {\nconst xhttp = new XMLHttpRequest();\nxhttp onreadystatechange = function () {\nif (this readyState == 4 && this status == 200) {\ntest(this);\n} else {\nthrow new Error(`${this status} ${this statusText}`);\n}\n};\nxhttp open('POST', url + '/login', true);\nxhttp setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\nxhttp send(`username=${user}&password=${user}`);\n}\nfunction test(xhttpRes) {\nconst data = xhttpRes responseText;\nassert match(\ndata,\n/Profile/gi,\n'Login should work if previous test was done successfully and redirect successfully to the profile '\n);\nassert match(\ndata,\nnew RegExp(user, 'g'),\n'The profile should properly display the welcome to the user logged in'\n);\n}\n};\nLogout should work js\n$ ajax({\nurl: code + '/logout',\ntype: 'GET',\nxhrFields: { withCredentials: true }\n}) then(\n(data) => {\nassert match(data, /Home/gi, 'Logout should redirect to home');\n},\n(xhr) => {\nthrow new Error(xhr statusText);\n}\n);\nProfile should no longer work after logout js\n$ ajax({\nurl: code + '/profile',\ntype: 'GET',\ncrossDomain: true,\nxhrFields: { withCredentials: true }\n}) then(\n(data) => {\nassert match(\ndata,\n/Home/gi,\n'Profile should redirect to home when we are logged out now again'\n);\n},\n(xhr) => {\nthrow new Error(xhr statusText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8384bc8e4efcafa83cb16685d9447cdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824f367417b2b2512c59\ntitle: Run Functional Tests on API Endpoints using Chai-HTTP II\nchallengeType: 2\nforumTopicId: 301592\ndashedName: run-functional-tests-on-api-endpoints-using-chai-http-ii\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\n--instructions--\nWithin tests/2_functional-tests.js, alter the 'Test GET /hello with your name' test (// #2) to assert the status and the text of the response to make the test pass.\nSend your name as a URL query by appending ?name=<your_name> to the route. The endpoint responds with 'hello <your_name>'.\n--hints--\nAll tests should pass\njs\n$.get(code + '/_api/get-tests?type=functional&n=1').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should test for res.status == 200\njs\n$.get(code + '/_api/get-tests?type=functional&n=1').then(\n(data) => {\nassert.equal(data.assertions[0].method, 'equal');\nassert.equal(data.assertions[0].args[0], 'res.status');\nassert.equal(data.assertions[0].args[1], '200');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should test for res.text == 'hello <your_name>'\njs\n$.get(code + '/_api/get-tests?type=functional&n=1').then(\n(data) => {\nassert.equal(data.assertions[1].method, 'equal');\nassert.equal(data.assertions[1].args[0], 'res.text');\nassert.match(data.assertions[1].args[1], /hello [\\w\\d_-]/);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a738d35cbbd837164d514463d536726",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\compare-the-properties-of-two-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824c367417b2b2512c4d\ntitle: Compare the Properties of Two Elements\nchallengeType: 2\nforumTopicId: 301588\ndashedName: compare-the-properties-of-two-elements\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub --instructions--\nWithin tests/1_unit-tests js under the test labeled #8 in the Comparisons suite, change each assert to either assert isAbove or assert isAtMost to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=7') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - isAbove vs isAtMost js\n$ get(code + '/_api/get-tests type=unit&n=7') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'isAtMost',\n'5 is at most (<=) 5'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - isAbove vs isAtMost js\n$ get(code + '/_api/get-tests type=unit&n=7') then(\n(data) => {\nassert equal(data assertions[1] method, 'isAbove', '1 is greater than 0');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - isAbove vs isAtMost js\n$ get(code + '/_api/get-tests type=unit&n=7') then(\n(data) => {\nassert equal(\ndata assertions[2] method,\n'isAbove',\n'Math PI = 3 14159265 is greater than 3'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - isAbove vs isAtMost js\n$ get(code + '/_api/get-tests type=unit&n=7') then(\n(data) => {\nassert equal(\ndata assertions[3] method,\n'isAtMost',\n'1 - Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\compare-the-properties-of-two-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "822f1c313c2564fce2f7f66f14887380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\compare-the-properties-of-two-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the third assertion - isAbove vs isAtMost js $ get(code + '/_api/get-tests type=unit&n=7') then( (data) => { assert equal( data assertions[2] method, 'isAbove', 'Math PI = 3 14159265 is greater than 3' ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - isAbove vs isAtMost js $ get(code + '/_api/get-tests type=unit&n=7') then( (data) => { assert equal( data assertions[3] method, 'isAtMost', '1 - Mathrandom() is > 0 and <= 1 It is atMost 1 '\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\compare-the-properties-of-two-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "72d8defe391f55fc3879b8786e2d8c3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iii---put-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824f367417b2b2512c5a\ntitle: Run Functional Tests on an API Response using Chai-HTTP III - PUT method\nchallengeType: 2\nforumTopicId: 301590\ndashedName: run-functional-tests-on-an-api-response-using-chai-http-iii---put-method\n--description--\nAs a reminder, this project is being built upon the following starter project  cloned from GitHub When you test a PUT request, you'll often send data along with it The data you include with your PUT request is called the body of the request To send a PUT request and a JSON object to the '/travellers' endpoint, you can use chai-http plugin's put and send methods:\njs\nchai request(server) keepOpen() put('/travellers') send({\n\"surname\": [last name of a traveller of the past]\n}) And the route responds with:\njson\n{\n\"name\": [first name],\n\"surname\": [last name],\n\"dates\": [birth - death years]\n}\nSee the server code for the different responses to the '/travellers' endpoint --instructions--\nWithin tests/2_functional-tests js, alter the 'Send {surname: \"Colombo\"}' test (// #3) and use the put and send methods to test the  '/travellers' endpoint Send the following JSON object with your PUT request:\njson\n{\n\"surname\": \"Colombo\"\n}\nCheck for the following within the request end callback:\nThe status should be 200\nThe type should be application/json\nThe body name should be Cristoforo\nThe body surname should be Colombo\nFollow the assertion order above - we rely on it Also, be sure to remove assert fail() once complete --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=functional&n=2') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res status to be 200 js\n$ get(code + '/_api/get-tests type=functional&n=2') then(\n(data) => {\nassert equal(data assertions[0] method, 'equal');\nassert equal(data assertions[0] args[0], 'res status');\nassert equal(data assertions[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iii---put-method.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a3f892125d4b901f7aba5b424f6c0680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iii---put-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "- we rely on it Also, be sure to remove assert fail() once complete --hints-- All tests should pass js $ get(code + '/_api/get-tests type=functional&n=2') then( (data) => { assert equal(data state, 'passed'); }, (xhr) => { throw new Error(xhr responseText); } ); You should test for res status to be 200 js $ get(code + '/_api/get-tests type=functional&n=2') then( (data) => { assert equal(data assertions[0] method, 'equal'); assert equal(data assertions[0] args[0], 'res status'); assert equal(data assertions[0]args[1], '200');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res type to be 'application/json' js\n$ get(code + '/_api/get-tests type=functional&n=2') then(\n(data) => {\nassert equal(data assertions[1] method, 'equal');\nassert equal(data assertions[1] args[0], 'res type');\nassert match(data assertions[1] args[1], /('|\")application\\/json\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res body name to be 'Cristoforo' js\n$ get(code + '/_api/get-tests type=functional&n=2') then(\n(data) => {\nassert equal(data assertions[2] method, 'equal');\nassert equal(data assertions[2] args[0], 'res body name');\nassert match(data assertions[2] args[1], /('|\")Cristoforo\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res body surname to be 'Colombo' js\n$ get(code + '/_api/get-tests type=functional&n=2') then(\n(data) => {\nassert equal(data assertions[3] method, 'equal');\nassert equal(data assertions[3] args[0], 'res body surname');\nassert match(data assertions[3] args[1], /('|\")Colombo\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iii---put-method.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a19a6cb51af428aae08570da6bfd0e53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iv---put-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824f367417b2b2512c5b\ntitle: Run Functional Tests on an API Response using Chai-HTTP IV - PUT method\nchallengeType: 2\nforumTopicId: 301591\ndashedName: run-functional-tests-on-an-api-response-using-chai-http-iv---put-method\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub This exercise is similar to the previous one Now that you know how to test a PUT request, it's your turn to do it from scratch --instructions--\nWithin tests/2_functional-tests js, alter the 'Send {surname: \"da Verrazzano\"}' test (// #4) and use the put and send methods to test the  '/travellers' endpoint Send the following JSON object with your PUT request:\njson\n{\n\"surname\": \"da Verrazzano\"\n}\nCheck for the following within the request end callback:\nThe status should be 200\nThe type should be application/json\nThe body name should be Giovanni\nThe body surname should be da Verrazzano\nFollow the assertion order above - we rely on it Also, be sure to remove assert fail() once complete --hints--\nAll tests should pass\njs\n$ get(code + '/_api/get-tests type=functional&n=3') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res status to be 200\njs\n$ get(code + '/_api/get-tests type=functional&n=3') then(\n(data) => {\nassert equal(data assertions[0] method, 'equal');\nassert equal(data assertions[0] args[0], 'res status');\nassert equal(data assertions[0] args[1], '200');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res type to be 'application/json'\njs\n$ get(code + '/_api/get-tests type=functional&n=3') then(\n(data) => {\nassert equal(data assertions[1] method, 'equal');\nassert equal(data assertions[1] args[0], 'res type');\nassert match(data assertions[1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3096,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iv---put-method.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d37c9bb56157bd3a9ab22a24f500c313",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iv---put-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test for res status to be 200 js $ get(code + '/_api/get-tests type=functional&n=3') then( (data) => { assert equal(data assertions[0] method, 'equal'); assert equal(data assertions[0] args[0], 'res status'); assert equal(data assertions[0] args[1], '200'); }, (xhr) => { throw new Error(xhr responseText); } ); You should test for res type to be 'application/json' js $ get(code + '/_api/get-tests type=functional&n=3') then( (data) => { assert equal(data assertions[1] method, 'equal'); assert equal(data assertions[1] args[0], 'res type'); assert match(data assertions[1]args[1], /('|\")application\\/json\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res body name to be 'Giovanni'\njs\n$ get(code + '/_api/get-tests type=functional&n=3') then(\n(data) => {\nassert equal(data assertions[2] method, 'equal');\nassert equal(data assertions[2] args[0], 'res body name');\nassert match(data assertions[2] args[1], /('|\")Giovanni\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res body surname to be 'da Verrazzano'\njs\n$ get(code + '/_api/get-tests type=functional&n=3') then(\n(data) => {\nassert equal(data assertions[3] method, 'equal');\nassert equal(data assertions[3] args[0], 'res body surname');\nassert match(data assertions[3] args[1], /('|\")da Verrazzano\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3096,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iv---put-method.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ad8a6228c075352f5ce897872925c9cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5f8884f4c46685731aabfc41\ntitle: Run Functional Tests Using a Headless Browser II\nchallengeType: 2\nforumTopicId: 301594\ndashedName: run-functional-tests-using-a-headless-browser-ii\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub --instructions--\nWithin tests/2_functional-tests js, in the 'Submit the surname \"Vespucci\" in the HTML form' test (// #6), automate the following:\nFill in the form with the surname Vespucci\nPress the submit button\nAnd within the pressButton callback:\nAssert that status is OK 200\nAssert that the text inside the element span#name is 'Amerigo'\nAssert that the text inside the element span#surname is 'Vespucci'\nAssert that the element(s) span#dates exist and their count is 1\nDo not forget to remove the assert fail() call --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=functional&n=6') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the headless browser request succeeded js\n$ get(code + '/_api/get-tests type=functional&n=6') then(\n(data) => {\nassert equal(data assertions[0] method, 'browser success');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the text inside the element span#name is 'Amerigo' js\n$ get(code + '/_api/get-tests type=functional&n=6') then(\n(data) => {\nassert equal(data assertions[1] method, 'browser text');\nassert match(data assertions[1] args[0], /('|\")span#name\\1/);\nassert match(data assertions[1] args[1], /('|\")Amerigo\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the text inside the element span#surname is 'Vespucci' js\n$ get(code + '/_api/get-tests type=functional&n=6') then(\n(data) => {\nassert equal(data assertions[2] method, 'browser text');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "864c2962b26549ddff0d6331fe1bb097",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should assert that the text inside the element span#name is 'Amerigo' js $ get(code + '/_api/get-tests type=functional&n=6') then( (data) => { assert equal(data assertions[1] method, 'browser text'); assert match(data assertions[1] args[0], /('|\")span#name\\1/); assert match(data assertions[1] args[1], /('|\")Amerigo\\1/); }, (xhr) => { throw new Error(xhr responseText); } ); You should assert that the text inside the element span#surname is 'Vespucci' js $ get(code + '/_api/get-tests type=functional&n=6') then( (data) => { assert equal(data assertions[2] method, 'browser text'); assertmatch(data assertions[2] args[0], /('|\")span#surname\\1/);\nassert match(data assertions[2] args[1], /('|\")Vespucci\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the element span#dates exist and its count is 1 js\n$ get(code + '/_api/get-tests type=functional&n=6') then(\n(data) => {\nassert equal(data assertions[3] method, 'browser elements');\nassert match(data assertions[3] args[0], /('|\")span#dates\\1/);\nassert equal(data assertions[3] args[1], 1);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "96d92d95313d8af2b86c4f9a6702fc68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\simulate-actions-using-a-headless-browser.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824f367417b2b2512c5c\ntitle: Simulate Actions Using a Headless Browser\nchallengeType: 2\ndashedName: simulate-actions-using-a-headless-browser\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nIn the next challenges, you'll simulate human interaction with a page by using a headless browser.\nHeadless browsers are web browsers without a GUI. They are able to render and interpret HTML, CSS, and JavaScript the same way a regular browser would, making them particularly useful for testing web pages.\nFor the following challenges you'll use Zombie.js, which is a lightweight headless browser that doesn't rely on additional binaries to be installed. But there are many other, more powerful headless browser options.\nMocha allows you to run some code before any of the actual tests run. This can be useful to do things like add entries to a database which will be used in the rest of the tests.\nWith a headless browser, before running tests, you need to visit the page you'll test.\nThe suiteSetup hook is executed only once at the beginning of a test suite.\nThere are several other hook types that can execute code before each test, after each test, or at the end of a test suite. See the Mocha docs for more information.\n--instructions--\nWithin tests/2_functional-tests.js, immediately after the Browser declaration, add your project URL to the site property of the variable:\njs\nBrowser.site = 'http://0.0.0.0:3000'; // Your URL here\nThen at the root level of the 'Functional Tests with Zombie.js' suite, instantiate a new instance of the Browser object with the following code:\njs\nconst browser = new Browser();\nAnd use the suiteSetup hook to direct the browser to the / route with the following code. Note: done is passed as a callback to browser.visit, you should not invoke it.\njs\nsuiteSetup(function(done) {\nreturn browser.visit('/', done);\n});\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=functional&n=4').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2360,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\simulate-actions-using-a-headless-browser.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "abba945379a219a42c64b1cad213978e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824e367417b2b2512c58\ntitle: Run Functional Tests on API Endpoints using Chai-HTTP\nchallengeType: 2\nforumTopicId: 301593\ndashedName: run-functional-tests-on-api-endpoints-using-chai-http\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub Mocha allows you to test asynchronous operations like calls to API endpoints with a plugin called chai-http The following is an example of a test using chai-http for a suite called 'GET /hello name=[name] => \"hello [name]\"':\njs\nsuite('GET /hello name=[name] => \"hello [name]\"', function () {\ntest(' name=John', function (done) {\nchai request(server) keepOpen() get('/hello name=John') end(function (err, res) {\nassert equal(res status, 200, 'Response status should be 200');\nassert equal(res text, 'hello John', 'Response should be \"hello John\"');\ndone();\n});\n});\n});\nThe test sends a GET request to the server with a name as a URL query string ( name=John) In the end method's callback function, the response object (res) is received and contains the status property The first assert equal checks if the status is equal to 200 The second assert equal checks that the response string (res text) is equal to \"hello John\" Also, notice the done parameter in the test's callback function Calling it without an argument at the end of a test is necessary to signal that the asynchronous operation is complete Finally, note the keepOpen method just after the request method Normally you would run your tests from the command line, or as part of an automated integration process, and you could let chai-http start and stop your server automatically However, the tests that run when you submit the link to your project require your server to be up, so you need to use the keepOpen method to prevent chai-http from stopping your server --instructions--\nWithin tests/2_functional-tests js, alter the 'Test GET /hello with no name' test (// #1) to assert the status and the text of the response to make the test pass Do not alter the arguments passed to the asserts There should be no URL query Without a name URL query, the endpoint responds with hello Guest --hints--\nAll tests should pass\njs\n$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fde0e746829d3609e720b994d12d0c0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "need to use the keepOpen method to prevent chai-http from stopping your server --instructions-- Within tests/2_functional-tests js, alter the 'Test GET /hello with no name' test (// #1) to assert the status and the text of the response to make the test pass Do not alter the arguments passed to the asserts There should be no URL query Without a name URL query, the endpoint responds with hello Guest --hints-- All tests should pass js $get(code + '/_api/get-tests type=functional&n=0') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res status == 200\njs\n$ get(code + '/_api/get-tests type=functional&n=0') then(\n(data) => {\nassert equal(data assertions[0] method, 'equal');\nassert equal(data assertions[0] args[0], 'res status');\nassert equal(data assertions[0] args[1], '200');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should test for res text == 'hello Guest'\njs\n$ get(code + '/_api/get-tests type=functional&n=0') then(\n(data) => {\nassert equal(data assertions[1] method, 'equal');\nassert equal(data assertions[1] args[0], 'res text');\nassert match(data assertions[1] args[1], /('|\")hello Guest\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f5d6008e332de14231cba4d822514971",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-string-contains-a-substring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824d367417b2b2512c53\ntitle: Test if a String Contains a Substring\nchallengeType: 2\nforumTopicId: 301597\ndashedName: test-if-a-string-contains-a-substring\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\ninclude() and notInclude() work for strings too! include() asserts that the actual string contains the expected substring.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #14 in the Strings suite, change each assert to either assert.include or assert.notInclude to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=13').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - include vs. notInclude.\njs\n$.get(code + '/_api/get-tests?type=unit&n=13').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'include',\n\"'Arrow' contains 'row'...\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - include vs. notInclude.\njs\n$.get(code + '/_api/get-tests?type=unit&n=13').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'notInclude',\n\"... a 'dart' doesn't contain a 'queue'\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-string-contains-a-substring.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f96a71fd077520e4a341a72e441f3a27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-falls-within-a-specific-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824c367417b2b2512c4f\ntitle: Test if a Value Falls within a Specific Range\nchallengeType: 2\nforumTopicId: 301598\ndashedName: test-if-a-value-falls-within-a-specific-range\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\njavascript\n.approximately(actual, expected, delta, [message])\nAsserts that the actual is equal to expected, to within a +/- delta range.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #10 in the Comparisons suite, change each assert to assert.approximately to make the test pass (should evaluate to true).\nChoose the minimum range (3rd parameter) to make the test always pass. It should be less than 1.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=9').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct range for the first assertion - approximately(actual, expected, range).\njs\n$.get(code + '/_api/get-tests?type=unit&n=9').then(\n(data) => {\nassert.equal(data.assertions[0].method, 'approximately');\nassert.equal(\ndata.assertions[0].args[2],\n0.5,\n\"weirdNumbers(0.5) is in the range (0.5, 1.5]. It's within 1 +/- 0.5\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct range for the second assertion - approximately(actual, expected, range).\njs\n$.get(code + '/_api/get-tests?type=unit&n=9').then(\n(data) => {\nassert.equal(data.assertions[1].method, 'approximately');\nassert.equal(\ndata.assertions[1].args[2],\n0.8,\n\"weirdNumbers(0.2) is in the range (0.2, 1.2]. It's within 1 +/- 0.8\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-falls-within-a-specific-range.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "63138d440a5c0dde9ccc3ec6cdb5631b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-for-truthiness.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824b367417b2b2512c49\ntitle: Test for Truthiness\nchallengeType: 2\nforumTopicId: 301596\ndashedName: test-for-truthiness\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub isTrue() will test for the boolean value true and isNotTrue() will pass when given anything but the boolean value of true js\nassert isTrue(true, 'This will pass with the boolean value true');\nassert isTrue('true', 'This will NOT pass with the string value \"true\"');\nassert isTrue(1, 'This will NOT pass with the number value 1');\nisFalse() and isNotFalse() also exist, and behave similarly to their true counterparts except they look for the boolean value of false --instructions--\nWithin tests/1_unit-tests js under the test labeled #4 in the Basic Assertions suite, change each assert to either assert isTrue or assert isNotTrue to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=3') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - isTrue vs isNotTrue js\n$ get(code + '/_api/get-tests type=unit&n=3') then(\n(data) => {\nassert equal(data assertions[0] method, 'isTrue', 'True is true');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - isTrue vs isNotTrue js\n$ get(code + '/_api/get-tests type=unit&n=3') then(\n(data) => {\nassert equal(\ndata assertions[1] method,\n'isTrue',\n'Double negation of a truthy value is true'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - isTrue vs isNotTrue js\n$ get(code + '/_api/get-tests type=unit&n=3') then(\n(data) => {\nassert equal(\ndata assertions[2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-for-truthiness.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "788dd61458fdaf80b308dd9dd1693fdf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-for-truthiness.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should choose the correct method for the second assertion - isTrue vs isNotTrue js $ get(code + '/_api/get-tests type=unit&n=3') then( (data) => { assert equal( data assertions[1] method, 'isTrue', 'Double negation of a truthy value is true' ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the third assertion - isTrue vs isNotTrue js $ get(code + '/_api/get-tests type=unit&n=3') then( (data) => { assert equal( data assertions[2]method,\n'isNotTrue',\n'A truthy object is not true - neither is a false one'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-for-truthiness.md",
      "source_type": "git_repo"
    },
    "token_count": 169,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c69d78f098b8006107a85bc0d11b35c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-a-string.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824d367417b2b2512c52\ntitle: Test if a Value is a String\nchallengeType: 2\nforumTopicId: 301599\ndashedName: test-if-a-value-is-a-string\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nisString or isNotString asserts that the actual value is a string.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #13 in the Strings suite, change each assert to either assert.isString or assert.isNotString to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=12').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - isString vs. isNotString.\njs\n$.get(code + '/_api/get-tests?type=unit&n=12').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'isNotString',\n'A float number is not a string'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - isString vs. isNotString.\njs\n$.get(code + '/_api/get-tests?type=unit&n=12').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'isString',\n'environment vars are strings (or undefined)'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the third assertion - isString vs. isNotString.\njs\n$.get(code + '/_api/get-tests?type=unit&n=12').then(\n(data) => {\nassert.equal(data.assertions[2].method, 'isString', 'A JSON is a string');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-a-string.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cf135660e9eb20d5231c4fbe1f35aed3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824d367417b2b2512c50\ntitle: Test if a Value is an Array\nchallengeType: 2\nforumTopicId: 301600\ndashedName: test-if-a-value-is-an-array\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #11 in the Arrays suite, change each assert to either assert.isArray or assert.isNotArray to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=10').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - isArray vs. isNotArray.\njs\n$.get(code + '/_api/get-tests?type=unit&n=10').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'isArray',\n'String.prototype.split() returns an Array'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - isArray vs. isNotArray.\njs\n$.get(code + '/_api/get-tests?type=unit&n=10').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'isNotArray',\n'Array.prototype.indexOf() returns a number'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ffadb47442b7d0fc8375530dc04987d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-variable-or-function-is-defined.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824b367417b2b2512c47\ntitle: Test if a Variable or Function is Defined\nchallengeType: 2\nforumTopicId: 301602\ndashedName: test-if-a-variable-or-function-is-defined\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #2 in the Basic Assertions suite, change each assert to either assert.isDefined() or assert.isUndefined() to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=1').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - isDefined vs. isUndefined.\njs\n$.get(code + '/_api/get-tests?type=unit&n=1').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'isDefined',\n'Null is not undefined'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - isDefined vs. isUndefined.\njs\n$.get(code + '/_api/get-tests?type=unit&n=1').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'isUndefined',\n'Undefined is undefined'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the third assertion - isDefined vs. isUndefined.\njs\n$.get(code + '/_api/get-tests?type=unit&n=1').then(\n(data) => {\nassert.equal(\ndata.assertions[2].method,\n'isDefined',\n'A string is not undefined'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-variable-or-function-is-defined.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d604b9f63fcb5d265de128480e58035c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-array-contains-an-item.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824d367417b2b2512c51\ntitle: Test if an Array Contains an Item\nchallengeType: 2\nforumTopicId: 301603\ndashedName: test-if-an-array-contains-an-item\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #12 in the Arrays suite, change each assert to either assert.include or assert.notInclude to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=11').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - include vs. notInclude.\njs\n$.get(code + '/_api/get-tests?type=unit&n=11').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'notInclude',\n\"It's summer in july...\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - include vs. notInclude.\njs\n$.get(code + '/_api/get-tests?type=unit&n=11').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'include',\n'JavaScript is a backend language !!'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1657,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-array-contains-an-item.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5065ff5c4464993d4a411ffd385cc18c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-has-a-property.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824e367417b2b2512c55\ntitle: Test if an Object has a Property\nchallengeType: 2\nforumTopicId: 301604\ndashedName: test-if-an-object-has-a-property\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nproperty asserts that the actual object has a given property.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #16 in the Objects suite, change each assert to either assert.property or assert.notProperty to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=15').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - property vs. notProperty.\njs\n$.get(code + '/_api/get-tests?type=unit&n=15').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'notProperty',\n'A car has not wings'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - property vs. notProperty.\njs\n$.get(code + '/_api/get-tests?type=unit&n=15').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'property',\n'planes have engines'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the third assertion - property vs. notProperty.\njs\n$.get(code + '/_api/get-tests?type=unit&n=15').then(\n(data) => {\nassert.equal(data.assertions[2].method, 'property', 'Cars have wheels');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-has-a-property.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1e313bc9612bbbf6632c8b4e2b5c456",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8250367417b2b2512c5d\ntitle: Run Functional Tests Using a Headless Browser\nchallengeType: 2\nforumTopicId: 301595\ndashedName: run-functional-tests-using-a-headless-browser\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub On the page there's an input form It sends data to the PUT /travellers endpoint as an AJAX request When the request successfully completes, the client code appends a <div> containing the information in the response to the DOM Here's an example of how to use Zombie js to interact with the form:\njs\ntest('Submit the surname \"Polo\" in the HTML form', function (done) {\nbrowser fill('surname', 'Polo') then(() => {\nbrowser pressButton('submit', () => {\nbrowser assert success();\nbrowser assert text('span#name', 'Marco');\nbrowser assert text('span#surname', 'Polo');\nbrowser assert elements('span#dates', 1);\ndone();\n});\n});\n});\nFirst, the fill method of the browser object fills the surname field of the form with the value 'Polo' fill returns a promise, so then is chained off of it Within the then callback, the pressButton method of the browser object is used to invoke the form's submit event listener The pressButton method is asynchronous Then, once a response is received from the AJAX request, a few assertions are made confirming:\nThe status of the response is 200\nThe text within the <span id='name'></span> element matches 'Marco'\nThe text within the <span id='surname'></span> element matches 'Polo'\nThere is 1 <span id='dates'></span> element Finally, the done callback is invoked, which is needed due to the asynchronous test --instructions--\nWithin tests/2_functional-tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a778259163507b47c1b412aeeec6527a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to invoke the form's submit event listener The pressButton method is asynchronous Then, once a response is received from the AJAX request, a few assertions are made confirming: The status of the response is 200 The text within the <span id='name'></span> element matches 'Marco' The text within the <span id='surname'></span> element matches 'Polo' There is 1 <span id='dates'></span> element Finally, the done callback is invoked, which is needed due to the asynchronous test --instructions-- Within tests/2_functional-testsjs, in the 'Submit the surname \"Colombo\" in the HTML form' test (// #5), automate the following:\nFill in the form with the surname Colombo\nPress the submit button\nAnd within the pressButton callback:\nAssert that status is OK 200\nAssert that the text inside the element span#name is 'Cristoforo'\nAssert that the text inside the element span#surname is 'Colombo'\nAssert that the element(s) span#dates exist and their count is 1\nDo not forget to remove the assert fail() call --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=functional&n=5') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the headless browser request succeeded js\n$ get(code + '/_api/get-tests type=functional&n=5') then(\n(data) => {\nassert equal(data assertions[0] method, 'browser success');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the text inside the element span#name is 'Cristoforo' js\n$ get(code + '/_api/get-tests type=functional&n=5') then(\n(data) => {\nassert equal(data assertions[1] method, 'browser text');\nassert match(data assertions[1] args[0], /('|\")span#name\\1/);\nassert match(data assertions[1] args[1], /('|\")Cristoforo\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the text inside the element span#surname is 'Colombo' js\n$ get(code + '/_api/get-tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6a674534538a746c15230ccc05cf316e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "success'); }, (xhr) => { throw new Error(xhr responseText); } ); You should assert that the text inside the element span#name is 'Cristoforo' js $ get(code + '/_api/get-tests type=functional&n=5') then( (data) => { assert equal(data assertions[1] method, 'browser text'); assert match(data assertions[1] args[0], /('|\")span#name\\1/); assert match(data assertions[1] args[1], /('|\")Cristoforo\\1/); }, (xhr) => { throw new Error(xhr responseText); } ); You should assert that the text inside the element span#surname is 'Colombo' js $ get(code + '/_api/get-teststype=functional&n=5') then(\n(data) => {\nassert equal(data assertions[2] method, 'browser text');\nassert match(data assertions[2] args[0], /('|\")span#surname\\1/);\nassert match(data assertions[2] args[1], /('|\")Colombo\\1/);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should assert that the element span#dates exist and its count is 1 js\n$ get(code + '/_api/get-tests type=functional&n=5') then(\n(data) => {\nassert equal(data assertions[3] method, 'browser elements');\nassert match(data assertions[3] args[0], /('|\")span#dates\\1/);\nassert equal(data assertions[3] args[1], 1);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f9685c07cb7fde00375127a16e23af4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-of-a-specific-data-structure-type.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824e367417b2b2512c56\ntitle: Test if a Value is of a Specific Data Structure Type\nchallengeType: 2\nforumTopicId: 301601\ndashedName: test-if-a-value-is-of-a-specific-data-structure-type\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub #typeOf asserts that value's type is the given string, as determined by Object prototype toString --instructions--\nWithin tests/1_unit-tests js under the test labeled #17 in the Objects suite, change each assert to either assert typeOf or assert notTypeOf to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - typeOf vs notTypeOf js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'typeOf',\n'myCar is typeOf Object'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - typeOf vs notTypeOf js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(\ndata assertions[1] method,\n'typeOf',\n'Car model is a String'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - typeOf vs notTypeOf js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(\ndata assertions[2] method,\n'notTypeOf',\n'Plane wings is a Number (not a String)'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - typeOf vs notTypeOf js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(\ndata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-of-a-specific-data-structure-type.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "04d485ddcfca1a4cc608b8671e8b940f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-of-a-specific-data-structure-type.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "You should choose the correct method for the third assertion - typeOf vs notTypeOf js $ get(code + '/_api/get-tests type=unit&n=16') then( (data) => { assert equal( data assertions[2] method, 'notTypeOf', 'Plane wings is a Number (not a String)' ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - typeOf vs notTypeOf js $ get(code + '/_api/get-tests type=unit&n=16') then( (data) => { assert equal( dataassertions[3] method,\n'typeOf',\n'Plane engines is an Array'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fifth assertion - typeOf vs notTypeOf js\n$ get(code + '/_api/get-tests type=unit&n=16') then(\n(data) => {\nassert equal(\ndata assertions[4] method,\n'typeOf',\n'Car wheels is a Number'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-of-a-specific-data-structure-type.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a6d02498cb5caf749d3981b6978bbe5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-one-value-is-below-or-at-least-as-large-as-another.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824c367417b2b2512c4e\ntitle: Test if One Value is Below or At Least as Large as Another\nchallengeType: 2\nforumTopicId: 301606\ndashedName: test-if-one-value-is-below-or-at-least-as-large-as-another\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub --instructions--\nWithin tests/1_unit-tests js under the test labelled #9 in the Comparisons suite, change each assert to either assert isBelow or assert isAtLeast to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=8') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - isBelow vs isAtLeast js\n$ get(code + '/_api/get-tests type=unit&n=8') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'isAtLeast',\n'5 is at least (>=) 5'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - isBelow vs isAtLeast js\n$ get(code + '/_api/get-tests type=unit&n=8') then(\n(data) => {\nassert equal(\ndata assertions[1] method,\n'isAtLeast',\n'2 * Math random() is at least 0'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - isBelow vs isAtLeast js\n$ get(code + '/_api/get-tests type=unit&n=8') then(\n(data) => {\nassert equal(data assertions[2] method, 'isBelow', '1 is smaller than 2');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - isBelow vs isAtLeast js\n$ get(code + '/_api/get-tests type=unit&n=8') then(\n(data) => {\nassert equal(\ndata assertions[3]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2399,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-one-value-is-below-or-at-least-as-large-as-another.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ffd9b96c6475fab4311102ab919a4275",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-one-value-is-below-or-at-least-as-large-as-another.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Error(xhr responseText); } ); You should choose the correct method for the third assertion - isBelow vs isAtLeast js $ get(code + '/_api/get-tests type=unit&n=8') then( (data) => { assert equal(data assertions[2] method, 'isBelow', '1 is smaller than 2'); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - isBelow vs isAtLeast js $ get(code + '/_api/get-tests type=unit&n=8') then( (data) => { assert equal( data assertions[3]method,\n'isBelow',\n'2/3 (0 6666) is smaller than 1'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2399,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-one-value-is-below-or-at-least-as-large-as-another.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fead74ee7229692c7e1e8e9ff445f747",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-regular-expressions-to-test-a-string.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824d367417b2b2512c54\ntitle: Use Regular Expressions to Test a String\nchallengeType: 2\nforumTopicId: 301608\ndashedName: use-regular-expressions-to-test-a-string\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nmatch() asserts that the actual value matches the second argument regular expression.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #15 in the Strings suite, change each assert to either assert.match or assert.notMatch to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=14').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - match vs. notMatch.\njs\n$.get(code + '/_api/get-tests?type=unit&n=14').then(\n(data) => {\nassert.equal(\ndata.assertions[0].method,\n'match',\n\"'# name:John Doe, age:35' matches the regex\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - match vs. notMatch.\njs\n$.get(code + '/_api/get-tests?type=unit&n=14').then(\n(data) => {\nassert.equal(\ndata.assertions[1].method,\n'notMatch',\n\"'# name:Paul Smith III, age:twenty-four' does not match the regex (the age must be numeric)\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-regular-expressions-to-test-a-string.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8137269ad2c1910503f719cc75958fb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-assert.isok-and-assert.isnotok.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824b367417b2b2512c48\ntitle: Use Assert.isOK and Assert.isNotOK\nchallengeType: 2\nforumTopicId: 301607\ndashedName: use-assert-isok-and-assert-isnotok\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nisOk() will test for a truthy value, and isNotOk() will test for a falsy value.\nTo learn more about truthy and falsy values, try our Falsy Bouncer challenge.\n--instructions--\nWithin tests/1_unit-tests.js under the test labeled #3 in the Basic Assertions suite, change each assert to either assert.isOk() or assert.isNotOk() to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.\n--hints--\nAll tests should pass.\njs\n$.get(code + '/_api/get-tests?type=unit&n=2').then(\n(data) => {\nassert.equal(data.state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the first assertion - isOk vs. isNotOk.\njs\n$.get(code + '/_api/get-tests?type=unit&n=2').then(\n(data) => {\nassert.equal(data.assertions[0].method, 'isNotOk', 'Null is falsy');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the second assertion - isOk vs. isNotOk.\njs\n$.get(code + '/_api/get-tests?type=unit&n=2').then(\n(data) => {\nassert.equal(data.assertions[1].method, 'isOk', 'A string is truthy');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYou should choose the correct method for the third assertion - isOk vs. isNotOk.\njs\n$.get(code + '/_api/get-tests?type=unit&n=2').then(\n(data) => {\nassert.equal(data.assertions[2].method, 'isOk', 'true is truthy');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-assert.isok-and-assert.isnotok.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "971a665a94ce142b44284c921618ba86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-is-an-instance-of-a-constructor.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824e367417b2b2512c57\ntitle: Test if an Object is an Instance of a Constructor\nchallengeType: 2\nforumTopicId: 301605\ndashedName: test-if-an-object-is-an-instance-of-a-constructor\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub #instanceOf asserts that an object is an instance of a constructor --instructions--\nWithin tests/1_unit-tests js under the test labeled #18 in the Objects suite, change each assert to either assert instanceOf or assert notInstanceOf to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=17') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - instanceOf vs notInstanceOf js\n$ get(code + '/_api/get-tests type=unit&n=17') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'notInstanceOf',\n'myCar is not an instance of Plane'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - instanceOf vs notInstanceOf js\n$ get(code + '/_api/get-tests type=unit&n=17') then(\n(data) => {\nassert equal(\ndata assertions[1] method,\n'instanceOf',\n'airlinePlane is an instance of Plane'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - instanceOf vs notInstanceOf js\n$ get(code + '/_api/get-tests type=unit&n=17') then(\n(data) => {\nassert equal(\ndata assertions[2] method,\n'instanceOf',\n'everything is an Object in JavaScript '\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - instanceOf vs notInstanceOf js\n$ get(code + '/_api/get-tests type=unit&n=17') then(\n(data) => {\nassert equal(\ndata assertions[3] method,\n'notInstanceOf',\n'myCar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-is-an-instance-of-a-constructor.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5d9483703563147c71e7caac3be6746c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-is-an-instance-of-a-constructor.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the correct method for the third assertion - instanceOf vs notInstanceOf js $ get(code + '/_api/get-tests type=unit&n=17') then( (data) => { assert equal( data assertions[2] method, 'instanceOf', 'everything is an Object in JavaScript ' ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - instanceOf vs notInstanceOf js $ get(code + '/_api/get-tests type=unit&n=17') then( (data) => { assert equal( data assertions[3] method, 'notInstanceOf', 'myCarwheels is not an instance of String'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-is-an-instance-of-a-constructor.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e1a5059e883c37ae5dd8731cfa358bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-double-equals-to-assert-equality.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824b367417b2b2512c4a\ntitle: Use the Double Equals to Assert Equality\nchallengeType: 2\nforumTopicId: 301609\ndashedName: use-the-double-equals-to-assert-equality\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub equal() compares objects using == --instructions--\nWithin tests/1_unit-tests js under the test labeled #5 in the Equality suite, change each assert to either assert equal or assert notEqual to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=4') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - equal vs notEqual js\n$ get(code + '/_api/get-tests type=unit&n=4') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'equal',\n'Numbers are coerced into strings with == '\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - equal vs notEqual js\n$ get(code + '/_api/get-tests type=unit&n=4') then(\n(data) => {\nassert equal(\ndata assertions[1] method,\n'notEqual',\n' == compares object references'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - equal vs notEqual js\n$ get(code + '/_api/get-tests type=unit&n=4') then(\n(data) => {\nassert equal(\ndata assertions[2] method,\n'equal',\n\"6 * '2' is 12 It should be equal to '12'\"\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - equal vs notEqual js\n$ get(code + '/_api/get-tests type=unit&n=4') then(\n(data) => {\nassert equal(data assertions[3] method, 'notEqual', \"6 + '2' is '62'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-double-equals-to-assert-equality.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f425ee1c5826eb8a3ebc587e42f6dc4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-double-equals-to-assert-equality.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "- equal vs notEqual js $ get(code + '/_api/get-tests type=unit&n=4') then( (data) => { assert equal( data assertions[2] method, 'equal', \"6 * '2' is 12 It should be equal to '12'\" ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - equal vs notEqual js $ get(code + '/_api/get-tests type=unit&n=4') then( (data) => { assert equal(data assertions[3] method, 'notEqual', \"6 + '2' is '62'\");\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-double-equals-to-assert-equality.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "10acde517af3a53608902d94f86f5f1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-triple-equals-to-assert-strict-equality.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824b367417b2b2512c4b\ntitle: Use the Triple Equals to Assert Strict Equality\nchallengeType: 2\nforumTopicId: 301610\ndashedName: use-the-triple-equals-to-assert-strict-equality\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub strictEqual() compares objects using === --instructions--\nWithin tests/1_unit-tests js under the test labeled #6 in the Equality suite, change each assert to either assert strictEqual or assert notStrictEqual to make the test pass (should evaluate to true) Do not alter the arguments passed to the asserts --hints--\nAll tests should pass js\n$ get(code + '/_api/get-tests type=unit&n=5') then(\n(data) => {\nassert equal(data state, 'passed');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the first assertion - strictEqual vs notStrictEqual js\n$ get(code + '/_api/get-tests type=unit&n=5') then(\n(data) => {\nassert equal(\ndata assertions[0] method,\n'notStrictEqual',\n'with strictEqual the type must match'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the second assertion - strictEqual vs notStrictEqual js\n$ get(code + '/_api/get-tests type=unit&n=5') then(\n(data) => {\nassert equal(data assertions[1] method, 'strictEqual', '3*2 = 6 ');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the third assertion - strictEqual vs notStrictEqual js\n$ get(code + '/_api/get-tests type=unit&n=5') then(\n(data) => {\nassert equal(\ndata assertions[2] method,\n'strictEqual',\n\"6 * '2' is 12 Types match \"\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYou should choose the correct method for the fourth assertion - strictEqual vs notStrictEqual js\n$ get(code + '/_api/get-tests type=unit&n=5') then(\n(data) => {\nassert equal(\ndata assertions[3]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-triple-equals-to-assert-strict-equality.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b84b1e0ed4007ced170bb1c5bca42871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-triple-equals-to-assert-strict-equality.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should choose the correct method for the third assertion - strictEqual vs notStrictEqual js $ get(code + '/_api/get-tests type=unit&n=5') then( (data) => { assert equal( data assertions[2] method, 'strictEqual', \"6 * '2' is 12 Types match \" ); }, (xhr) => { throw new Error(xhr responseText); } ); You should choose the correct method for the fourth assertion - strictEqual vs notStrictEqual js $ get(code + '/_api/get-tests type=unit&n=5') then( (data) => { assert equal( data assertions[3]method,\n'notStrictEqual',\n'Even if they have the same elements, the Arrays are notStrictEqual'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-triple-equals-to-assert-strict-equality.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ecb483c6b4e55c6fd0664c20594db8fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824a367417b2b2512c43\ntitle: Personal Library\nchallengeType: 4\nforumTopicId: 301571\ndashedName: personal-library\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://personal-library freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nAdd your MongoDB connection string to env without quotes as DB\nExample: DB=mongodb://admin:pass@1234 mlab com:1234/fccpersonallib\nIn your env file set NODE_ENV to test, without quotes\nYou need to create all routes within routes/api js\nYou will create all functional tests in tests/2_functional-tests js\n--hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/personal-library\\ freecodecamp\\ rocks/ test(code)\n);\nYou can send a POST request to /api/books with title as part of the form data to add a book The returned response will be an object with the title and a unique _id as keys If title is not included in the request, the returned response should be the string missing required field title js\nasync () => {\ntry {\nlet data1 = await $ post(code + '/api/books', {\ntitle: 'Faux Book 1'\n});\nassert isObject(data1);\nassert property(data1, 'title');\nassert equal(data1 title, 'Faux Book 1');\nassert property(data1, '_id');\nlet data2 = await $ post(code + '/api/books');\nassert isString(data2);\nassert equal(data2, 'missing required field title');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a GET request to /api/books and receive a JSON response representing all the books The JSON response will be an array of objects with each object (book) containing title, _id, and commentcount properties js\nasync () => {\ntry {\nlet url = code + '/api/books';\nlet a = $ post(url, { title: 'Faux Book A' });\nlet b = $",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "dc562b502173ffcea3626751f1b73f35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "catch (err) { throw new Error(err responseText || err message); } }; You can send a GET request to /api/books and receive a JSON response representing all the books The JSON response will be an array of objects with each object (book) containing title, _id, and commentcount properties js async () => { try { let url = code + '/api/books'; let a = $ post(url, { title: 'Faux Book A' }); let b = $post(url, { title: 'Faux Book B' });\nlet c = $ post(url, { title: 'Faux Book C' });\nawait Promise all([a, b, c]) then(async () => {\nlet data = await $ get(url);\nassert isArray(data);\nassert isAtLeast(data length, 3);\ndata forEach((book) => {\nassert isObject(book);\nassert property(book, 'title');\nassert isString(book title);\nassert property(book, '_id');\nassert property(book, 'commentcount');\nassert isNumber(book commentcount);\n});\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a GET request to /api/books/{_id} to retrieve a single object of a book containing the properties title, _id, and a comments array (empty array if no comments present) If no book is found, return the string no book exists js\nasync () => {\ntry {\nlet url = code + '/api/books';\nlet noBook = await $ get(url + '/5f665eb46e296f6b9b6a504d');\nassert isString(noBook);\nassert equal(noBook, 'no book exists');\nlet sampleBook = await $ post(url, { title: 'Faux Book Alpha' });\nassert isObject(sampleBook);\nlet bookId = sampleBook _id;\nlet bookQuery = await $ get(url + '/' + bookId);\nassert isObject(bookQuery);\nassert property(bookQuery, 'title');\nassert equal(bookQuery title, 'Faux Book Alpha');\nassert property(bookQuery, 'comments');\nassert isArray(bookQuery comments);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a POST request containing comment as the form body data to /api/books/{_id} to add a comment to a book The returned response will be the books object similar to GET /api/books/{_id} request in an earlier test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "65ac1f07f64280ca3e69b27e37b69b42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "await $ get(url + '/' + bookId); assert isObject(bookQuery); assert property(bookQuery, 'title'); assert equal(bookQuery title, 'Faux Book Alpha'); assert property(bookQuery, 'comments'); assert isArray(bookQuery comments); } catch (err) { throw new Error(err responseText || err message); } }; You can send a POST request containing comment as the form body data to /api/books/{_id} to add a comment to a book The returned response will be the books object similar to GET /api/books/{_id} request in an earlier testIf comment is not included in the request, return the string missing required field comment If no book is found, return the string no book exists js\nasync () => {\ntry {\nlet url = code + '/api/books';\nlet commentTarget = await $ post(url, { title: 'Notable Book' });\nassert isObject(commentTarget);\nlet bookId = commentTarget _id;\nlet bookCom1 = await $ post(url + '/' + bookId, {\ncomment: 'This book is fab '\n});\nlet bookCom2 = await $ post(url + '/' + bookId, {\ncomment: 'I did not care for it'\n});\nassert isObject(bookCom2);\nassert property(bookCom2, '_id');\nassert property(bookCom2, 'title');\nassert property(bookCom2, 'comments');\nassert lengthOf(bookCom2 comments, 2);\nbookCom2 comments forEach((comment) => {\nassert isString(comment);\nassert oneOf(comment, ['This book is fab ', 'I did not care for it']);\n});\nlet commentErr = await $ post(url + '/' + bookId);\nassert isString(commentErr);\nassert equal(commentErr, 'missing required field comment');\nlet failingComment = await $ post(url + '/5f665eb46e296f6b9b6a504d', {\ncomment: 'Never Seen Comment'\n});\nassert isString(failingComment);\nassert equal(failingComment, 'no book exists');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a DELETE request to /api/books/{_id} to delete a book from the collection The returned response will be the string delete successful if successful If no book is found, return the string no book exists js\nasync () => {\ntry {\nlet url = code + '/api/books';\nlet deleteTarget = await $",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "fdc9a93d7ddcae4d4bb8be1cca2fecbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}); assert isString(failingComment); assert equal(failingComment, 'no book exists'); } catch (err) { throw new Error(err responseText || err message); } }; You can send a DELETE request to /api/books/{_id} to delete a book from the collection The returned response will be the string delete successful if successful If no book is found, return the string no book exists js async () => { try { let url = code + '/api/books'; let deleteTarget = await $post(url, { title: 'Deletable Book' });\nassert isObject(deleteTarget);\nlet bookId = deleteTarget _id;\nlet doDelete = await $ ajax({ url: url + '/' + bookId, type: 'DELETE' });\nassert isString(doDelete);\nassert equal(doDelete, 'delete successful');\nlet failingDelete = await $ ajax({\nurl: url + '/5f665eb46e296f6b9b6a504d',\ntype: 'DELETE'\n});\nassert isString(failingDelete);\nassert equal(failingDelete, 'no book exists');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a DELETE request to /api/books to delete all books in the database The returned response will be the string complete delete successful if successful js\nasync () => {\ntry {\nconst deleteAll = await $ ajax({\nurl: code + '/api/books',\ntype: 'DELETE'\n});\nassert isString(deleteAll);\nassert equal(deleteAll, 'complete delete successful');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 10 functional tests required are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nassert isAtLeast(getTests length, 10, 'At least 10 tests passed');\ngetTests forEach((test) => {\nassert equal(test state, 'passed', 'Test in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "565e3967c519c222773971f315f70140",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e601c0d5ac9d0ecd8b94afe\ntitle: American British Translator\nchallengeType: 4\nforumTopicId: 462358\ndashedName: american-british-translator\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://american-british-translator freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nAll logic can go into /components/translator js\nComplete the /api/translate route in /routes/api js\nCreate all of the unit/functional tests in tests/1_unit-tests js and tests/2_functional-tests js\nSee the JavaScript files in /components for the different spelling and terms your application should translate\nTo run the tests automatically, set NODE_ENV to test without quotes in the env file\nTo run the tests in the console, use the command npm run test Write the following tests in tests/1_unit-tests js:\nTranslate Mangoes are my favorite fruit to British English\nTranslate I ate yogurt for breakfast to British English\nTranslate We had a party at my friend's condo to British English\nTranslate Can you toss this in the trashcan for me to British English\nTranslate The parking lot was full to British English\nTranslate Like a high tech Rube Goldberg machine to British English\nTranslate To play hooky means to skip class or work to British English\nTranslate No Mr Bond, I expect you to die to British English\nTranslate Dr Grosh will see you now to British English\nTranslate Lunch is at 12:15 today to British English\nTranslate We watched the footie match for a while to American English\nTranslate Paracetamol takes up to an hour to work to American English\nTranslate First, caramelise the onions to American English\nTranslate I spent the bank holiday at the funfair to American English\nTranslate I had a bicky then went to the chippy to American English\nTranslate I've just got bits and bobs in my bum bag to American English\nTranslate The car boot sale at Boxted Airfield was called off to American English\nTranslate Have you met Mrs Kalyani to American English\nTranslate Prof Joyner of King's College, London",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "201d0f5db9e9110bc70f28fa9eed0971",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "First, caramelise the onions to American English Translate I spent the bank holiday at the funfair to American English Translate I had a bicky then went to the chippy to American English Translate I've just got bits and bobs in my bum bag to American English Translate The car boot sale at Boxted Airfield was called off to American English Translate Have you met Mrs Kalyani to American English Translate Prof Joyner of King's College, Londonto American English\nTranslate Tea time is usually around 4 or 4 30 to American English\nHighlight translation in Mangoes are my favorite fruit Highlight translation in I ate yogurt for breakfast Highlight translation in We watched the footie match for a while Highlight translation in Paracetamol takes up to an hour to work Write the following tests in tests/2_functional-tests js:\nTranslation with text and locale fields: POST request to /api/translate\nTranslation with text and invalid locale field: POST request to /api/translate\nTranslation with missing text field: POST request to /api/translate\nTranslation with missing locale field: POST request to /api/translate\nTranslation with empty text: POST request to /api/translate\nTranslation with text that needs no translation: POST request to /api/translate\n--hints--\nYou should provide your own project, not the example URL js\nassert( / *\\/american-british-translator\\ freecodecamp\\ rocks/ test(\ncode\n)\n);\nYou can POST to /api/translate with a body containing text with the text to translate and locale with either american-to-british or british-to-american The returned object should contain the submitted text and translation with the translated text js\nasync () => {\ntry {\nconst text = 'Mangoes are my favorite fruit ';\nconst locale = 'american-to-british';\nconst output = {\ntext: 'Mangoes are my favorite fruit ',\ntranslation:\n'Mangoes are my <span class=\"highlight\">favourite</span> fruit '\n};\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'text');\nassert property(parsed, 'translation');\nassert deepEqual(parsed, output);\n} catch (err) {\nthrow new Error(err responseText || err",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "b46ced4e6e2fd558e069b533c0482520",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "favorite fruit '; const locale = 'american-to-british'; const output = { text: 'Mangoes are my favorite fruit ', translation: 'Mangoes are my <span class=\"highlight\">favourite</span> fruit ' }; let data = await fetch(code + '/api/translate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ text, locale }) }); let parsed = await data json(); assert isObject(parsed); assert property(parsed, 'text'); assert property(parsed, 'translation'); assert deepEqual(parsed, output); } catch (err) { throw new Error(err responseText || errmessage);\n}\n};\nThe /api/translate route should handle the way time is written in American and British English For example, ten thirty is written as \"10 30\" in British English and \"10:30\" in American English The span element should wrap the entire time string, i e <span class=\"highlight\">10:30</span> js\nasync () => {\ntry {\nconst text = 'Lunch is at 12:15 today ';\nconst locale = 'american-to-british';\nconst output = {\ntext: text,\ntranslation: 'Lunch is at <span class=\"highlight\">12 15</span> today '\n};\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'text');\nassert property(parsed, 'translation');\nassert deepEqual(parsed, output);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nThe /api/translate route should also handle the way titles/honorifics are abbreviated in American and British English For example, Doctor Wright is abbreviated as \"Dr Wright\" in British English and \"Dr Wright\" in American English See /components/american-to-british-titles js for the different titles your application should handle js\nasync () => {\ntry {\nconst text = 'Dr Grosh will see you now ';\nconst locale = 'american-to-british';\nconst output = {\ntext: text,\ntranslation: '<span class=\"highlight\">Dr</span> Grosh will see you now",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "98d2aee12f4eeffa69fd52416eee5a81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "also handle the way titles/honorifics are abbreviated in American and British English For example, Doctor Wright is abbreviated as \"Dr Wright\" in British English and \"Dr Wright\" in American English See /components/american-to-british-titles js for the different titles your application should handle js async () => { try { const text = 'Dr Grosh will see you now '; const locale = 'american-to-british'; const output = { text: text, translation: '<span class=\"highlight\">Dr</span> Grosh will see you now'\n};\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'text');\nassert property(parsed, 'translation');\nassert deepEqual(parsed, output);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nWrap any translated spelling or terms with <span class=\"highlight\"> </span> tags so they appear in green js\nasync () => {\ntry {\nconst text = 'Mangoes are my favorite fruit ';\nconst locale = 'american-to-british';\nconst output = {\ntext: 'Mangoes are my favorite fruit ',\ntranslation:\n'Mangoes are my <span class=\"highlight\">favourite</span> fruit '\n};\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'text');\nassert property(parsed, 'translation');\nassert deepEqual(parsed, output);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nIf one or more of the required fields is missing, return { error: 'Required field(s) missing' } js\nasync () => {\ntry {\nconst locale = 'american-to-british';\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'error');\nassert equal(parsed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "4fa5f7dc84e3a7c68e38edde0aeb8ad5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "output); } catch (err) { throw new Error(err responseText || err message); } }; If one or more of the required fields is missing, return { error: 'Required field(s) missing' } js async () => { try { const locale = 'american-to-british'; let data = await fetch(code + '/api/translate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ locale }) }); let parsed = await data json(); assert isObject(parsed); assert property(parsed, 'error'); assert equal(parsederror, 'Required field(s) missing');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nIf text is empty, return { error: 'No text to translate' }\njs\nasync () => {\ntry {\nconst locale = 'american-to-british';\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text: '', locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'error');\nassert equal(parsed error, 'No text to translate');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nIf locale does not match one of the two specified locales, return { error: 'Invalid value for locale field' } js\nasync () => {\ntry {\nconst text = \"Ceci n'est pas une pipe\";\nconst locale = 'french-to-american';\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert property(parsed, 'error');\nassert equal(parsed error, 'Invalid value for locale field');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nIf text requires no translation, return \"Everything looks good to me \" for the translation value js\nasync () => {\ntry {\nconst locale = 'british-to-american';\nconst output = {\ntext: 'SaintPeter and nhcarrigan give their regards ',\ntranslation: 'Everything looks good to me",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "2df618cf5ed69ce88e22e400e1b8e244",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "parsed = await data json(); assert isObject(parsed); assert property(parsed, 'error'); assert equal(parsed error, 'Invalid value for locale field'); } catch (err) { throw new Error(err responseText || err message); } }; If text requires no translation, return \"Everything looks good to me \" for the translation value js async () => { try { const locale = 'british-to-american'; const output = { text: 'SaintPeter and nhcarrigan give their regards ', translation: 'Everything looks good to me'\n};\nlet data = await fetch(code + '/api/translate', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ text: output text, locale })\n});\nlet parsed = await data json();\nassert isObject(parsed);\nassert isObject(parsed);\nassert property(parsed, 'text');\nassert property(parsed, 'translation');\nassert deepEqual(parsed, output);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 24 unit tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst unitTests = getTests filter((test) => {\nreturn test context match(/Unit Tests/gi);\n});\nassert isAtLeast(unitTests length, 24, 'At least 24 tests passed');\nunitTests forEach((test) => {\nassert equal(test state, 'passed', 'Tests in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 6 functional tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst functTests = getTests filter((test) => {\nreturn test context match(/Functional Tests/gi);\n});\nassert isAtLeast(functTests length, 6, 'At least 6 tests passed');\nfunctTests forEach((test) => {\nassert equal(test state, 'passed', 'Tests in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "dabb4a57a01d888beb58072917a6d5ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8249367417b2b2512c41\ntitle: Metric-Imperial Converter\nchallengeType: 4\nforumTopicId: 301570\ndashedName: metric-imperial-converter\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://metric-imperial-converter freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo Note: This project's tests do not work when using glitch com --instructions--\nComplete the necessary conversion logic in /controllers/convertHandler js\nComplete the necessary routes in /routes/api js\nCopy the sample env file to env and set the variables appropriately\nTo run the tests automatically, add NODE_ENV=test in your env file\nTo run the tests in the console, use the command npm run test Write the following tests in tests/1_unit-tests js:\nconvertHandler should correctly read a whole number input convertHandler should correctly read a decimal number input convertHandler should correctly read a fractional input convertHandler should correctly read a fractional input with a decimal convertHandler should correctly return an error on a double-fraction (i e 3/2/3) convertHandler should correctly default to a numerical input of 1 when no numerical input is provided convertHandler should correctly read each valid input unit convertHandler should correctly return an error for an invalid input unit convertHandler should return the correct return unit for each valid input unit convertHandler should correctly return the spelled-out string unit for each valid input unit convertHandler should correctly convert gal to L convertHandler should correctly convert L to gal convertHandler should correctly convert mi to km convertHandler should correctly convert km to mi convertHandler should correctly convert lbs to kg convertHandler should correctly convert kg to lbs Write the following tests in tests/2_functional-tests js:\nConvert a valid input such as 10L: GET request to /api/convert Convert an invalid input such as 32g: GET request to /api/convert Convert an invalid number such as 3/7 2/4kg: GET request to /api/convert Convert an invalid number AND unit such as 3/7 2/4kilomegagram: GET request to /api/convert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "ad7cca46a7ad71cb1eb3bfff5c7cf4be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "convertHandler should correctly convert km to mi convertHandler should correctly convert lbs to kg convertHandler should correctly convert kg to lbs Write the following tests in tests/2_functional-tests js: Convert a valid input such as 10L: GET request to /api/convert Convert an invalid input such as 32g: GET request to /api/convert Convert an invalid number such as 3/7 2/4kg: GET request to /api/convert Convert an invalid number AND unit such as 3/7 2/4kilomegagram: GET request to /api/convertConvert with no number such as kg: GET request to /api/convert --hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/metric-imperial-converter\\ freecodecamp\\ rocks/ test(\ncode\n)\n);\nYou can GET /api/convert with a single parameter containing an accepted number and unit and have it converted (Hint: Split the input by looking for the index of the first character which will mark the start of the unit)\n```js\n```\nYou can convert 'gal' to 'L' and vice versa (1 gal to 3 78541 L)\njs\nasync () => {\ntry {\nconst data1 = await $ get(code + '/api/convert input=1gal');\nassert equal(data1 returnNum, 3 78541);\nassert equal(data1 returnUnit, 'L');\nconst data2 = await $ get(code + '/api/convert input=10gal');\nassert equal(data2 returnNum, 37 8541);\nassert equal(data2 returnUnit, 'L');\nconst data3 = await $ get(code + '/api/convert input=1l');\nassert equal(data3 returnNum, 0 26417);\nassert equal(data3 returnUnit, 'gal');\nconst data4 = await $ get(code + '/api/convert input=10l');\nassert equal(data4 returnNum, 2 64172);\nassert equal(data4 returnUnit, 'gal');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nYou can convert 'lbs' to 'kg' and vice versa (1 lbs to 0 453592 kg)\njs\nasync () => {\ntry {\nconst data1 = await $ get(code + '/api/convert input=1lbs');\nassert equal(data1 returnNum, 0 45359);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "5464befa02d5be2d77f917968b47e5a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "equal(data3 returnNum, 0 26417); assert equal(data3 returnUnit, 'gal'); const data4 = await $ get(code + '/api/convert input=10l'); assert equal(data4 returnNum, 2 64172); assert equal(data4 returnUnit, 'gal'); } catch (xhr) { throw new Error(xhr responseText || xhr message); } }; You can convert 'lbs' to 'kg' and vice versa (1 lbs to 0 453592 kg) js async () => { try { const data1 = await $ get(code + '/api/convert input=1lbs'); assert equal(data1 returnNum, 0 45359); assertequal(data1 returnUnit, 'kg');\nconst data2 = await $ get(code + '/api/convert input=10lbs');\nassert equal(data2 returnNum, 4 53592);\nassert equal(data2 returnUnit, 'kg');\nconst data3 = await $ get(code + '/api/convert input=1kg');\nassert equal(data3 returnNum, 2 20462);\nassert equal(data3 returnUnit, 'lbs');\nconst data4 = await $ get(code + '/api/convert input=10kg');\nassert equal(data4 returnNum, 22 04624);\nassert equal(data4 returnUnit, 'lbs');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nYou can convert 'mi' to 'km' and vice versa (1 mi to 1 60934 km)\njs\nasync () => {\ntry {\nconst data1 = await $ get(code + '/api/convert input=1mi');\nassert equal(data1 returnNum, 1 60934);\nassert equal(data1 returnUnit, 'km');\nconst data2 = await $ get(code + '/api/convert input=10mi');\nassert equal(data2 returnNum, 16 0934);\nassert equal(data2 returnUnit, 'km');\nconst data3 = await $ get(code + '/api/convert input=1km');\nassert equal(data3 returnNum, 0 62137);\nassert equal(data3 returnUnit, 'mi');\nconst data4 = await $ get(code + '/api/convert input=10km');\nassert equal(data4 returnNum, 6 21373);\nassert equal(data4 returnUnit, 'mi');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "5c84aeeb406b351c6452a43da1ef7aff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ '/api/convert input=1mi'); assert equal(data1 returnNum, 1 60934); assert equal(data1 returnUnit, 'km'); const data2 = await $ get(code + '/api/convert input=10mi'); assert equal(data2 returnNum, 16 0934); assert equal(data2 returnUnit, 'km'); const data3 = await $ get(code + '/api/convert input=1km'); assert equal(data3 returnNum, 0 62137); assert equal(data3 returnUnit, 'mi'); const data4 = await $ get(code + '/api/convert input=10km'); assert equal(data4 returnNum, 6 21373); assert equal(data4 returnUnit, 'mi'); } catch (xhr) { throw new Error(xhr responseText || xhrmessage);\n}\n};\nAll incoming units should be accepted in both upper and lower case, but should be returned in both the initUnit and returnUnit in lower case, except for liter, which should be represented as an uppercase 'L' js\nasync () => {\ntry {\nconst data1 = await $ get(code + '/api/convert input=1gal');\nassert equal(data1 initUnit, 'gal');\nassert equal(data1 returnUnit, 'L');\nconst data2 = await $ get(code + '/api/convert input=10L');\nassert equal(data2 initUnit, 'L');\nassert equal(data2 returnUnit, 'gal');\nconst data3 = await $ get(code + '/api/convert input=1l');\nassert equal(data3 initUnit, 'L');\nassert equal(data3 returnUnit, 'gal');\nconst data4 = await $ get(code + '/api/convert input=10KM');\nassert equal(data4 initUnit, 'km');\nassert equal(data4 returnUnit, 'mi');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nIf the unit of measurement is invalid, returned will be 'invalid unit' js\nasync () => {\ntry {\nconst data = await $ get(code + '/api/convert input=1min');\nassert(data error === 'invalid unit' || data === 'invalid unit');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nIf the number is invalid, returned will be 'invalid number' js\nasync () => {\ntry {\nconst data = await $",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "4403cd4501101692daa62f61a7cf1970",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "message); } }; If the unit of measurement is invalid, returned will be 'invalid unit' js async () => { try { const data = await $ get(code + '/api/convert input=1min'); assert(data error === 'invalid unit' || data === 'invalid unit'); } catch (xhr) { throw new Error(xhr responseText || xhr message); } }; If the number is invalid, returned will be 'invalid number' js async () => { try { const data = await $get(\ncode + '/api/convert input=1//2gal'\n);\nassert(data error === 'invalid number' || data === 'invalid number');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nIf both the unit and number are invalid, returned will be 'invalid number and unit' js\nasync () => {\ntry {\nconst data = await $ get(\ncode + '/api/convert input=1//2min'\n);\nassert(\ndata error === 'invalid number and unit' ||\ndata === 'invalid number and unit'\n);\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nYou can use fractions, decimals or both in the parameter (ie 5, 1/2, 2 5/6), but if nothing is provided it will default to 1 js\nasync () => {\ntry {\nconst data1 = await $ get(code + '/api/convert input=mi');\nassert approximately(data1 initNum, 1, 0 001);\nassert approximately(data1 returnNum, 1 60934, 0 001);\nassert equal(data1 returnUnit, 'km');\nconst data2 = await $ get(code + '/api/convert input=1/5mi');\nassert approximately(data2 initNum, 1 / 5, 0 1);\nassert approximately(data2 returnNum, 0 32187, 0 001);\nassert equal(data2 returnUnit, 'km');\nconst data3 = await $ get(\ncode + '/api/convert input=1 5/7km'\n);\nassert approximately(data3 initNum, 1 5 / 7, 0 001);\nassert approximately(data3 returnNum, 0 13315, 0 001);\nassert equal(data3 returnUnit, 'mi');\nconst data4 = await $ get(\ncode + '/api/convert input=3/2 7km'\n);\nassert approximately(data4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "a5ab0375cbee6eab2d7d9f472f5a530e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "returnUnit, 'km'); const data2 = await $ get(code + '/api/convert input=1/5mi'); assert approximately(data2 initNum, 1 / 5, 0 1); assert approximately(data2 returnNum, 0 32187, 0 001); assert equal(data2 returnUnit, 'km'); const data3 = await $ get( code + '/api/convert input=1 5/7km' ); assert approximately(data3 initNum, 1 5 / 7, 0 001); assert approximately(data3 returnNum, 0 13315, 0 001); assert equal(data3 returnUnit, 'mi'); const data4 = await $ get( code + '/api/convert input=3/2 7km' ); assert approximately(data4initNum, 3 / 2 7, 0 001);\nassert approximately(data4 returnNum, 0 69041, 0 001);\nassert equal(data4 returnUnit, 'mi');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYour return will consist of the initNum, initUnit, returnNum, returnUnit, and string spelling out units in the format '{initNum} {initUnitString} converts to {returnNum} {returnUnitString}' with the result rounded to 5 decimals js\nasync () => {\ntry {\nconst data = await $ get(code + '/api/convert input=2mi');\nassert equal(data initNum, 2);\nassert equal(data initUnit, 'mi');\nassert approximately(data returnNum, 3 21868, 0 001);\nassert equal(data returnUnit, 'km', 'returnUnit did not match');\nassert equal(data string, '2 miles converts to 3 21868 kilometers');\n} catch (xhr) {\nthrow new Error(xhr responseText || xhr message);\n}\n};\nAll 16 unit tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst unitTests = getTests filter(test => {\nreturn test context match(/Unit Tests/gi);\n});\nassert isAtLeast(unitTests length, 16, 'At least 16 tests passed');\nunitTests forEach(test => {\nassert equal(test state, 'passed', 'Tests in Passed State');\nassert isAtLeast(\ntest assertions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "d7f88130ed848709f9d2db665351ea24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} catch (xhr) { throw new Error(xhr responseText || xhr message); } }; All 16 unit tests are complete and passing js async () => { try { const getTests = await $ get(code + '/_api/get-tests'); assert isArray(getTests); const unitTests = getTests filter(test => { return test context match(/Unit Tests/gi); }); assert isAtLeast(unitTests length, 16, 'At least 16 tests passed'); unitTests forEach(test => { assert equal(test state, 'passed', 'Tests in Passed State'); assert isAtLeast( test assertionslength,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 5 functional tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst functTests = getTests filter(test => {\nreturn test context match(/Functional Tests/gi);\n});\nassert isAtLeast(functTests length, 5, 'At least 5 tests passed');\nfunctTests forEach(test => {\nassert equal(test state, 'passed', 'Tests in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "3a8a7258495662c9ebcb5e7189f77ea5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\file-metadata-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443edefaeb5bd0f\ntitle: File Metadata Microservice\nchallengeType: 4\nforumTopicId: 301506\ndashedName: file-metadata-microservice\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://file-metadata-microservice.freecodecamp.rocks. Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n--instructions--\nHINT: You can use the multer npm package to handle file uploading.\n--hints--\nYou should provide your own project, not the example URL.\njs\nassert(\n!/.*\\/file-metadata-microservice\\.freecodecamp\\.rocks/.test(\ncode\n)\n);\nYou can submit a form that includes a file upload.\njs\nasync () => {\nconst site = await fetch(code);\nconst data = await site.text();\nconst doc = new DOMParser().parseFromString(data, 'text/html');\nassert(doc.querySelector('input[type=\"file\"]'));\n};\nThe form file input field has the name attribute set to upfile.\njs\nasync () => {\nconst site = await fetch(code);\nconst data = await site.text();\nconst doc = new DOMParser().parseFromString(data, 'text/html');\nassert(doc.querySelector('input[name=\"upfile\"]'));\n};\nWhen you submit a file, you receive the file name, type, and size in bytes within the JSON response.\njs\nasync () => {\nconst formData = new FormData();\nconst fileData = await fetch(\n'https://cdn.freecodecamp.org/weather-icons/01d.png'\n);\nconst file = await fileData.blob();\nformData.append('upfile', file, 'icon');\nconst data = await fetch(code + '/api/fileanalyse', {\nmethod: 'POST',\nbody: formData\n});\nconst parsed = await data.json();\nassert.property(parsed, 'size');\nassert.equal(parsed.name, 'icon');\nassert.equal(parsed.type, 'image/png');\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\file-metadata-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8564f1593edcb1a280c06535651e6a8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8249367417b2b2512c42\ntitle: Issue Tracker\nchallengeType: 4\nforumTopicId: 301569\ndashedName: issue-tracker\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://issue-tracker freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nComplete the necessary routes in /routes/api js\nCreate all of the functional tests in tests/2_functional-tests js\nCopy the sample env file to env and set the variables appropriately\nTo run the tests automatically, add NODE_ENV=test in your env file\nTo run the tests in the console, use the command npm run test\nWrite the following tests in tests/2_functional-tests js:\nCreate an issue with every field: POST request to /api/issues/{project}\nCreate an issue with only required fields: POST request to /api/issues/{project}\nCreate an issue with missing required fields: POST request to /api/issues/{project}\nView issues on a project: GET request to /api/issues/{project}\nView issues on a project with one filter: GET request to /api/issues/{project}\nView issues on a project with multiple filters: GET request to /api/issues/{project}\nUpdate one field on an issue: PUT request to /api/issues/{project}\nUpdate multiple fields on an issue: PUT request to /api/issues/{project}\nUpdate an issue with missing _id: PUT request to /api/issues/{project}\nUpdate an issue with no fields to update: PUT request to /api/issues/{project}\nUpdate an issue with an invalid _id: PUT request to /api/issues/{project}\nDelete an issue: DELETE request to /api/issues/{project}\nDelete an issue with an invalid _id: DELETE request to /api/issues/{project}\nDelete an issue with missing _id: DELETE request to /api/issues/{project}\n--hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/issue-tracker\\ freecodecamp\\ rocks/",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "9393dd594d44fe70557f3c2abe229838",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "issue with missing _id: PUT request to /api/issues/{project} Update an issue with no fields to update: PUT request to /api/issues/{project} Update an issue with an invalid _id: PUT request to /api/issues/{project} Delete an issue: DELETE request to /api/issues/{project} Delete an issue with an invalid _id: DELETE request to /api/issues/{project} Delete an issue with missing _id: DELETE request to /api/issues/{project} --hints-- You can provide your own project, not the example URL js assert( / *\\/issue-tracker\\ freecodecamp\\ rocks/test(code));\nYou can send a POST request to /api/issues/{projectname} with form data containing the required fields issue_title, issue_text, created_by, and optionally assigned_to and status_text js\nasync () => {\ntry {\nlet test_data = {\nissue_title: 'Faux Issue Title',\nissue_text: 'Functional Test - Required Fields Only',\ncreated_by: 'fCC'\n};\nconst data = await $ post(\ncode + '/api/issues/fcc-project',\ntest_data\n);\nassert isObject(data);\nassert nestedInclude(data, test_data);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nThe POST request to /api/issues/{projectname} will return the created object, and must include all of the submitted fields Excluded optional fields will be returned as empty strings Additionally, include created_on (date/time), updated_on (date/time), open (boolean, true for open - default value, false for closed), and _id js\nasync () => {\ntry {\nlet test_data = {\nissue_title: 'Faux Issue Title 2',\nissue_text: 'Functional Test - Every field filled in',\ncreated_by: 'fCC',\nassigned_to: 'Chai and Mocha'\n};\nconst data = await $ post(\ncode + '/api/issues/fcc-project',\ntest_data\n);\nassert isObject(data);\nassert nestedInclude(data, test_data);\nassert property(data, 'created_on');\nassert isNumber(Date parse(data created_on));\nassert property(data, 'updated_on');\nassert isNumber(Date parse(data updated_on));\nassert property(data, 'open');\nassert isBoolean(data open);\nassert isTrue(data open);\nassert property(data, '_id');\nassert isNotEmpty(data _id);\nassert property(data, 'status_text');\nassert isEmpty(data",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "9d859ce17cd09ffe6c6c1dbad0bc18bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "try { let test_data = { issue_title: 'Faux Issue Title 2', issue_text: 'Functional Test - Every field filled in', created_by: 'fCC', assigned_to: 'Chai and Mocha' }; const data = await $ post( code + '/api/issues/fcc-project', test_data ); assert isObject(data); assert nestedInclude(data, test_data); assert property(data, 'created_on'); assert isNumber(Date parse(data created_on)); assert property(data, 'updated_on'); assert isNumber(Date parse(data updated_on)); assert property(data, 'open'); assert isBoolean(data open); assert isTrue(data open); assert property(data, '_id'); assert isNotEmpty(data _id); assert property(data, 'status_text'); assert isEmpty(datastatus_text);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nIf you send a POST request to /api/issues/{projectname} without the required fields, returned will be the error { error: 'required field(s) missing' }\njs\nasync () => {\ntry {\nlet test_data = { created_by: 'fCC' };\nconst data = await $ post(code + '/api/issues/fcc-project', {\ncreated_by: 'fCC'\n});\nassert isObject(data);\nassert property(data, 'error');\nassert equal(data error, 'required field(s) missing');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a GET request to /api/issues/{projectname} for an array of all issues for that specific projectname, with all the fields present for each issue js\nasync () => {\ntry {\nlet test_data = { issue_text: 'Get Issues Test', created_by: 'fCC' };\nconst url =\ncode +\n'/api/issues/get_issues_test_' +\nDate now() toString() substring(7);\nconst data1 = await $ post(\nurl,\nObject assign(test_data, { issue_title: 'Faux Issue 1' })\n);\nassert isObject(data1);\nconst data2 = await $ post(\nurl,\nObject assign(test_data, { issue_title: 'Faux Issue 2' })\n);\nassert isObject(data2);\nconst data3 = await $ post(\nurl,\nObject assign(test_data, { issue_title: 'Faux Issue 3' })\n);\nassert isObject(data3);\nconst getIssues = await $ get(url);\nassert isArray(getIssues);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "03c13352c146fa70da003176e6a0eb91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'fCC' }; const url = code + '/api/issues/get_issues_test_' + Date now() toString() substring(7); const data1 = await $ post( url, Object assign(test_data, { issue_title: 'Faux Issue 1' }) ); assert isObject(data1); const data2 = await $ post( url, Object assign(test_data, { issue_title: 'Faux Issue 2' }) ); assert isObject(data2); const data3 = await $ post( url, Object assign(test_data, { issue_title: 'Faux Issue 3' }) ); assert isObject(data3); const getIssues = await $ get(url); assert isArray(getIssues); assertlengthOf(getIssues, 3);\nlet re = new RegExp('Faux Issue \\\\d');\ngetIssues forEach((issue) => {\nassert property(issue, 'issue_title');\nassert match(issue issue_title, re);\nassert property(issue, 'issue_text');\nassert property(issue, 'created_by');\nassert property(issue, 'assigned_to');\nassert property(issue, 'status_text');\nassert property(issue, 'open');\nassert property(issue, 'created_on');\nassert property(issue, 'updated_on');\nassert property(issue, '_id');\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a GET request to /api/issues/{projectname} and filter the request by also passing along any field and value as a URL query (ie /api/issues/{project} open=false) You can pass one or more field/value pairs at once js\nasync () => {\ntry {\nlet test_data = {\nissue_title: 'To be Filtered',\nissue_text: 'Filter Issues Test'\n};\nconst url =\ncode +\n'/api/issues/get_issues_test_' +\nDate now() toString() substring(7);\nconst data1 = await $ post(\nurl,\nObject assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n);\nconst data2 = await $ post(\nurl,\nObject assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n);\nconst data3 = await $ post(\nurl,\nObject assign(test_data, { created_by: 'Alice', assigned_to: 'Eric' })\n);\nconst data4 = await $ post(\nurl,\nObject assign(test_data, { created_by: 'Carol', assigned_to: 'Eric' })\n);\nconst getSingle = await $",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "d0fabc45eefb48ef3e4a9285b8281fd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ '/api/issues/get_issues_test_' + Date now() toString() substring(7); const data1 = await $ post( url, Object assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' }) ); const data2 = await $ post( url, Object assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' }) ); const data3 = await $ post( url, Object assign(test_data, { created_by: 'Alice', assigned_to: 'Eric' }) ); const data4 = await $ post( url, Object assign(test_data, { created_by: 'Carol', assigned_to: 'Eric' }) ); const getSingle = await $get(url + ' created_by=Alice');\nassert isArray(getSingle);\nassert lengthOf(getSingle, 3);\nconst getMultiple = await $ get(url + ' created_by=Alice&assigned_to=Bob');\nassert isArray(getMultiple);\nassert lengthOf(getMultiple, 2);\nconst copyId = getMultiple[0] _id;\nconst getById = await $ get(url + ` _id=${copyId}`);\nassert isArray(getById);\nassert lengthOf(getById, 1);\nassert equal(getById[0] _id, copyId, 'should be able to query a document by _id')\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a PUT request to /api/issues/{projectname} with an _id and one or more fields to update On success, the updated_on field should be updated, and returned should be {  result: 'successfully updated', '_id': _id } js\nasync () => {\ntry {\nlet initialData = {\nissue_title: 'Issue to be Updated',\nissue_text: 'Functional Test - Put target',\ncreated_by: 'fCC'\n};\nconst url = code + '/api/issues/fcc-project';\nconst itemToUpdate = await $ post(url, initialData);\nconst updateSuccess = await $ ajax({\nurl: url,\ntype: 'PUT',\ndata: { _id: itemToUpdate _id, issue_text: 'New Issue Text' }\n});\nassert isObject(updateSuccess);\nassert deepEqual(updateSuccess, {\nresult: 'successfully updated',\n_id: itemToUpdate _id\n});\nconst getUpdatedId = await $ get(url + ' _id=' + itemToUpdate _id);\nassert isArray(getUpdatedId);\nassert isObject(getUpdatedId[0]);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "0dd0aa6c0bb46d5a4d5fac89169b8ba9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'Issue to be Updated', issue_text: 'Functional Test - Put target', created_by: 'fCC' }; const url = code + '/api/issues/fcc-project'; const itemToUpdate = await $ post(url, initialData); const updateSuccess = await $ ajax({ url: url, type: 'PUT', data: { _id: itemToUpdate _id, issue_text: 'New Issue Text' } }); assert isObject(updateSuccess); assert deepEqual(updateSuccess, { result: 'successfully updated', _id: itemToUpdate _id }); const getUpdatedId = await $ get(url + ' _id=' + itemToUpdate _id); assert isArray(getUpdatedId); assert isObject(getUpdatedId[0]); assertisAbove(\nDate parse(getUpdatedId[0] updated_on),\nDate parse(getUpdatedId[0] created_on)\n);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nWhen the PUT request sent to /api/issues/{projectname} does not include an _id, the return value is { error: 'missing _id' } js\nasync () => {\ntry {\nconst url = code + '/api/issues/fcc-project';\nconst badUpdate = await $ ajax({ url: url, type: 'PUT' });\nassert isObject(badUpdate);\nassert property(badUpdate, 'error');\nassert equal(badUpdate error, 'missing _id');\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nWhen the PUT request sent to /api/issues/{projectname} does not include update fields, the return value is { error: 'no update field(s) sent', '_id': _id } On any other error, the return value is { error: 'could not update', '_id': _id } js\nasync () => {\ntry {\nconst url = code + '/api/issues/fcc-project';\nconst badUpdate = await $ ajax({\nurl: url,\ntype: 'PUT',\ndata: { _id: '5f665eb46e296f6b9b6a504d' }\n});\nassert deepEqual(badUpdate, {\nerror: 'no update field(s) sent',\n_id: '5f665eb46e296f6b9b6a504d'\n});\nconst badIdUpdate = await $",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "2d7e43b06d98517a2e310b17eafb5a01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "update fields, the return value is { error: 'no update field(s) sent', '_id': _id } On any other error, the return value is { error: 'could not update', '_id': _id } js async () => { try { const url = code + '/api/issues/fcc-project'; const badUpdate = await $ ajax({ url: url, type: 'PUT', data: { _id: '5f665eb46e296f6b9b6a504d' } }); assert deepEqual(badUpdate, { error: 'no update field(s) sent', _id: '5f665eb46e296f6b9b6a504d' }); const badIdUpdate = await $ajax({\nurl: url,\ntype: 'PUT',\ndata: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n});\nassert deepEqual(badIdUpdate, {\nerror: 'could not update',\n_id: '5f665eb46e296f6b9b6a504d'\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nYou can send a DELETE request to /api/issues/{projectname} with an _id to delete an issue If no _id is sent, the return value is { error: 'missing _id' } On success, the return value is { result: 'successfully deleted', '_id': _id } On failure, the return value is { error: 'could not delete', '_id': _id } js\nasync () => {\ntry {\nlet initialData = {\nissue_title: 'Issue to be Deleted',\nissue_text: 'Functional Test - Delete target',\ncreated_by: 'fCC'\n};\nconst url = code + '/api/issues/fcc-project';\nconst itemToDelete = await $ post(url, initialData);\nassert isObject(itemToDelete);\nconst deleteSuccess = await $ ajax({\nurl: url,\ntype: 'DELETE',\ndata: { _id: itemToDelete _id }\n});\nassert isObject(deleteSuccess);\nassert deepEqual(deleteSuccess, {\nresult: 'successfully deleted',\n_id: itemToDelete _id\n});\nconst noId = await $ ajax({ url: url, type: 'DELETE' });\nassert isObject(noId);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "47449f43b4bc9363b753c4460987a213",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "let initialData = { issue_title: 'Issue to be Deleted', issue_text: 'Functional Test - Delete target', created_by: 'fCC' }; const url = code + '/api/issues/fcc-project'; const itemToDelete = await $ post(url, initialData); assert isObject(itemToDelete); const deleteSuccess = await $ ajax({ url: url, type: 'DELETE', data: { _id: itemToDelete _id } }); assert isObject(deleteSuccess); assert deepEqual(deleteSuccess, { result: 'successfully deleted', _id: itemToDelete _id }); const noId = await $ ajax({ url: url, type: 'DELETE' }); assert isObject(noId); assertdeepEqual(noId, { error: 'missing _id' });\nconst badIdDelete = await $ ajax({\nurl: url,\ntype: 'DELETE',\ndata: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n});\nassert isObject(badIdDelete);\nassert deepEqual(badIdDelete, {\nerror: 'could not delete',\n_id: '5f665eb46e296f6b9b6a504d'\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 14 functional tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nassert isAtLeast(getTests length, 14, 'At least 14 tests passed');\ngetTests forEach((test) => {\nassert equal(test state, 'passed', 'Test in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "5fe88ceb06a12673545c5102ae924b71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\request-header-parser-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443edefaeb5bdff\ntitle: Request Header Parser Microservice\nchallengeType: 4\nforumTopicId: 301507\ndashedName: request-header-parser-microservice\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://request-header-parser-microservice.freecodecamp.rocks/. Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n--hints--\nYou should provide your own project, not the example URL.\njs\nassert(\n!/.*\\/request-header-parser-microservice\\.freecodecamp\\.rocks/.test(\ncode\n)\n);\nA request to /api/whoami should return a JSON object with your IP address in the ipaddress key.\njs\n$.get(code + '/api/whoami').then(\n(data) => assert(data.ipaddress && data.ipaddress.length > 0),\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nA request to /api/whoami should return a JSON object with your preferred language in the language key.\njs\n$.get(code + '/api/whoami').then(\n(data) => assert(data.language && data.language.length > 0),\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nA request to /api/whoami should return a JSON object with your software in the software key.\njs\n$.get(code + '/api/whoami').then(\n(data) => assert(data.software && data.software.length > 0),\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\request-header-parser-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b72d59c304910ae6c6f9e268689e0022",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\url-shortener-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443edefaeb5bd0e\ntitle: URL Shortener Microservice\nchallengeType: 4\nforumTopicId: 301509\ndashedName: url-shortener-microservice\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://url-shortener-microservice freecodecamp rocks Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nHINT: Do not forget to use a body parsing middleware to handle the POST requests Also, you can use the function dns lookup(host, cb) from the dns core module to verify a submitted URL --hints--\nYou should provide your own project, not the example URL js\nassert( / *\\/url-shortener-microservice\\ freecodecamp\\ rocks/ test(\ncode\n)\n);\nYou can POST a URL to /api/shorturl and get a JSON response with original_url and short_url properties Here's an example: { original_url : 'https://freeCodeCamp org', short_url : 1}\njs\nasync () => {\nconst url = code;\nconst urlVariable = Date now();\nconst fullUrl = `${url}/ v=${urlVariable}`\nconst res = await fetch(url + '/api/shorturl', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `url=${fullUrl}`\n});\nif (res ok) {\nconst { short_url, original_url } = await res json();\nassert isNotNull(short_url);\nassert strictEqual(original_url, `${url}/ v=${urlVariable}`);\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nWhen you visit /api/shorturl/<short_url>, you will be redirected to the original URL js\nasync () => {\nconst url = code;\nconst urlVariable = Date now();\nconst fullUrl = `${url}/ v=${urlVariable}`\nlet shortenedUrlVariable;\nconst postResponse = await fetch(url + '/api/shorturl', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `url=${fullUrl}`\n});\nif (postResponse",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\url-shortener-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "196d96a2eba1edd8fdccc3fed4079781",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\url-shortener-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "original_url } = await res json(); assert isNotNull(short_url); assert strictEqual(original_url, `${url}/ v=${urlVariable}`); } else { throw new Error(`${res status} ${res statusText}`); } }; When you visit /api/shorturl/<short_url>, you will be redirected to the original URL js async () => { const url = code; const urlVariable = Date now(); const fullUrl = `${url}/ v=${urlVariable}` let shortenedUrlVariable; const postResponse = await fetch(url + '/api/shorturl', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `url=${fullUrl}` }); if (postResponseok) {\nconst { short_url } = await postResponse json();\nshortenedUrlVariable = short_url;\n} else {\nthrow new Error(`${postResponse status} ${postResponse statusText}`);\n}\nconst getResponse = await fetch(\nurl + '/api/shorturl/' + shortenedUrlVariable\n);\nif (getResponse) {\nconst { redirected, url } = getResponse;\nassert isTrue(redirected);\nassert strictEqual(url,fullUrl);\n} else {\nthrow new Error(`${getResponse status} ${getResponse statusText}`);\n}\n};\nIf you pass an invalid URL that doesn't follow the valid http://www example com format, the JSON response will contain { error: 'invalid url' }\njs\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/shorturl', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `url=ftp:/john-doe invalidTLD`\n});\nif (res ok) {\nconst { error } = await res json();\nassert isNotNull(error);\nassert strictEqual(error toLowerCase(), 'invalid url');\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\url-shortener-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5842573aabee0f5bfa19693aa4c73b0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\timestamp-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443edefaeb5bdef\ntitle: Timestamp Microservice\nchallengeType: 4\nforumTopicId: 301508\ndashedName: timestamp-microservice\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://timestamp-microservice freecodecamp rocks Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo Note: Time zones conversion is not a purpose of this project, so assume all sent valid dates will be parsed with new Date() as GMT dates --hints--\nYou should provide your own project, not the example URL js\nassert( / *\\/timestamp-microservice\\ freecodecamp\\ rocks/ test(code)\n);\nA request to /api/:date with a valid date should return a JSON object with a unix key that is a Unix timestamp of the input date in milliseconds (as type Number)\njs\n$ get(code + '/api/2016-12-25') then(\n(data) => {\nassert equal(\ndata unix,\n1482624000000,\n'Should be a valid unix timestamp'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nA request to /api/:date with a valid date should return a JSON object with a utc key that is a string of the input date in the format: Thu, 01 Jan 1970 00:00:00 GMT\njs\n$ get(code + '/api/2016-12-25') then(\n(data) => {\nassert equal(\ndata utc,\n'Sun, 25 Dec 2016 00:00:00 GMT',\n'Should be a valid UTC date string'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nA request to /api/1451001600000 should return { unix: 1451001600000, utc: \"Fri, 25 Dec 2015 00:00:00 GMT\" }\njs\n$ get(code + '/api/1451001600000') then(\n(data) => {\nassert(\ndata unix === 1451001600000 &&\ndata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\timestamp-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "62ea2a9fbeef1f4da4671ba1801789b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\timestamp-microservice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Thu, 01 Jan 1970 00:00:00 GMT js $ get(code + '/api/2016-12-25') then( (data) => { assert equal( data utc, 'Sun, 25 Dec 2016 00:00:00 GMT', 'Should be a valid UTC date string' ); }, (xhr) => { throw new Error(xhr responseText); } ); A request to /api/1451001600000 should return { unix: 1451001600000, utc: \"Fri, 25 Dec 2015 00:00:00 GMT\" } js $ get(code + '/api/1451001600000') then( (data) => { assert( data unix === 1451001600000 && datautc === 'Fri, 25 Dec 2015 00:00:00 GMT'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYour project can handle dates that can be successfully parsed by new Date(date_string)\njs\n$ get(code + '/api/05 October 2011, GMT') then(\n(data) => {\nassert(\ndata unix === 1317772800000 &&\ndata utc === 'Wed, 05 Oct 2011 00:00:00 GMT'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nIf the input date string is invalid, the API returns an object having the structure { error : \"Invalid Date\" }\njs\n$ get(code + '/api/this-is-not-a-date') then(\n(data) => {\nassert equal(data error toLowerCase(), 'invalid date');\n},\n(xhr) => {\nassert(xhr responseJSON error toLowerCase() === 'invalid date');\n}\n);\nAn empty date parameter should return the current time in a JSON object with a unix key\njs\n$ get(code + '/api') then(\n(data) => {\nvar now = Date now();\nassert approximately(data unix, now, 20000);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nAn empty date parameter should return the current time in a JSON object with a utc key\njs\n$ get(code + '/api') then(\n(data) => {\nvar now = Date now();\nvar serverTime = new Date(data utc) getTime();\nassert approximately(serverTime, now, 20000);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\timestamp-microservice.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c27c8241db8ad843e1a3f7db2e526ff7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\chain-middleware-to-create-a-time-server.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb1367417b2b2512bf4\ntitle: Chain Middleware to Create a Time Server\nchallengeType: 2\nforumTopicId: 301510\ndashedName: chain-middleware-to-create-a-time-server\n--description--\nMiddleware can be mounted at a specific route using app.METHOD(path, middlewareFunction). Middleware can also be chained within a route definition.\nLook at the following example:\njs\napp.get('/user', function(req, res, next) {\nreq.user = getTheUserSync();  // Hypothetical synchronous operation\nnext();\n}, function(req, res) {\nres.send(req.user);\n});\nThis approach is useful to split the server operations into smaller units. That leads to a better app structure, and the possibility to reuse code in different places. This approach can also be used to perform some validation on the data. At each point of the middleware stack you can block the execution of the current chain and pass control to functions specifically designed to handle errors. Or you can pass control to the next matching route, to handle special cases. We will see how in the advanced Express section.\n--instructions--\nIn the route app.get('/now', ...) chain a middleware function and the final handler. In the middleware function you should add the current time to the request object in the req.time key. You can use new Date().toString(). In the handler, respond with a JSON object, taking the structure {time: req.time}.\nNote: The test will not pass if you don’t chain the middleware. If you mount the function somewhere else, the test will fail, even if the output result is correct.\n--hints--\nThe /now endpoint should have mounted middleware\njs\n$.get(code + '/_api/chain-middleware-time').then(\n(data) => {\nassert.equal(\ndata.stackLength,\n2,\n'\"/now\" route has no mounted middleware'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nThe /now endpoint should return the current time.\njs\n$.get(code + '/_api/chain-middleware-time').then(\n(data) => {\nvar now = new Date();\nassert.isAtMost(\nMath.abs(new Date(data.time) - now),\n20000,\n'the returned time is not between +- 20 secs from now'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\chain-middleware-to-create-a-time-server.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3d398976e359e696db28e1d022cb9c59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e601bf95ac9d0ecd8b94afd\ntitle: Sudoku Solver\nchallengeType: 4\nforumTopicId: 462357\ndashedName: sudoku-solver\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://sudoku-solver freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nAll puzzle logic can go into /controllers/sudoku-solver js\nThe validate function should take a given puzzle string and check it to see if it has 81 valid characters for the input The check functions should be validating against the current state of the board The solve function should handle solving any given valid puzzle string, not just the test inputs and solutions You are expected to write out the logic to solve this All routing logic can go into /routes/api js\nSee the puzzle-strings js file in /controllers for some sample puzzles your application should solve\nTo run the challenge tests on this page, set NODE_ENV to test without quotes in the env file\nTo run the tests in the console, use the command npm run test Write the following tests in tests/1_unit-tests js:\nLogic handles a valid puzzle string of 81 characters\nLogic handles a puzzle string with invalid characters (not 1-9 or )\nLogic handles a puzzle string that is not 81 characters in length\nLogic handles a valid row placement\nLogic handles an invalid row placement\nLogic handles a valid column placement\nLogic handles an invalid column placement\nLogic handles a valid region (3x3 grid) placement\nLogic handles an invalid region (3x3 grid) placement\nValid puzzle strings pass the solver\nInvalid puzzle strings fail the solver\nSolver returns the expected solution for an incomplete puzzle\nWrite the following tests in tests/2_functional-tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "ebddbe81c23d73ceb6796548ca5b31cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "puzzle string that is not 81 characters in length Logic handles a valid row placement Logic handles an invalid row placement Logic handles a valid column placement Logic handles an invalid column placement Logic handles a valid region (3x3 grid) placement Logic handles an invalid region (3x3 grid) placement Valid puzzle strings pass the solver Invalid puzzle strings fail the solver Solver returns the expected solution for an incomplete puzzle Write the following tests in tests/2_functional-testsjs\nSolve a puzzle with valid puzzle string: POST request to /api/solve\nSolve a puzzle with missing puzzle string: POST request to /api/solve\nSolve a puzzle with invalid characters: POST request to /api/solve\nSolve a puzzle with incorrect length: POST request to /api/solve\nSolve a puzzle that cannot be solved: POST request to /api/solve\nCheck a puzzle placement with all fields: POST request to /api/check\nCheck a puzzle placement with single placement conflict: POST request to /api/check\nCheck a puzzle placement with multiple placement conflicts: POST request to /api/check\nCheck a puzzle placement with all placement conflicts: POST request to /api/check\nCheck a puzzle placement with missing required fields: POST request to /api/check\nCheck a puzzle placement with invalid characters: POST request to /api/check\nCheck a puzzle placement with incorrect length: POST request to /api/check\nCheck a puzzle placement with invalid placement coordinate: POST request to /api/check\nCheck a puzzle placement with invalid placement value: POST request to /api/check\n--hints--\nYou should provide your own project, not the example URL js\nconst url = code;\nassert( / *\\/sudoku-solver\\ freecodecamp\\ rocks/ test(code));\nYou can POST /api/solve with form data containing puzzle which will be a string containing a combination of numbers (1-9) and periods to represent empty spaces The returned object will contain a solution property with the solved puzzle js\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "0ad3c51a7fecb5c0be23b864137d5f94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "url = code; assert( / *\\/sudoku-solver\\ freecodecamp\\ rocks/ test(code)); You can POST /api/solve with form data containing puzzle which will be a string containing a combination of numbers (1-9) and periods to represent empty spaces The returned object will contain a solution property with the solved puzzle js async () => { const input = ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6';\nconst output =\n'769235418851496372432178956174569283395842761628713549283657194516924837947381625';\nconst data = await fetch(code + '/api/solve', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input })\n});\nconst parsed = await data json();\nassert property(parsed, 'solution');\nassert equal(parsed solution, output);\n};\nIf the object submitted to /api/solve is missing puzzle, the returned value will be { error: 'Required field missing' }\njs\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst output = 'Required field missing';\nconst data = await fetch(code + '/api/solve', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ notpuzzle: input })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n};\nIf the puzzle submitted to /api/solve contains values which are not numbers or periods, the returned value will be { error: 'Invalid characters in puzzle' }\njs\nasync () => {\nconst input =\n'AA9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst output = 'Invalid characters in puzzle';\nconst data = await fetch(code + '/api/solve', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "4a844b45827eeb629d74cf14a3016f7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ error: 'Invalid characters in puzzle' } js async () => { const input = 'AA9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '; const output = 'Invalid characters in puzzle'; const data = await fetch(code + '/api/solve', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ puzzle: input }) }); const parsed = await data json(); assert property(parsed, 'error'); assert equal(parsederror, output);\n};\nIf the puzzle submitted to /api/solve is greater or less than 81 characters, the returned value will be { error: 'Expected puzzle to be 81 characters long' }\njs\nasync () => {\nconst inputs = [\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ',\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '\n];\nconst output = 'Expected puzzle to be 81 characters long';\nfor (const input of inputs) {\nconst data = await fetch(code + '/api/solve', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n}\n};\nIf the puzzle submitted to /api/solve is invalid or cannot be solved, the returned value will be { error: 'Puzzle cannot be solved' }\njs\nasync () => {\nconst input =\n'9 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst output = 'Puzzle cannot be solved';\nconst data = await fetch(code + '/api/solve', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "ac27503aa0e392cbad995632f15f38b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "error: 'Puzzle cannot be solved' } js async () => { const input = '9 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '; const output = 'Puzzle cannot be solved'; const data = await fetch(code + '/api/solve', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ puzzle: input }) }); const parsed = await data json(); assert property(parsed, 'error'); assert equal(parsederror, output);\n};\nYou can POST to /api/check an object containing puzzle, coordinate, and value where the coordinate is the letter A-I indicating the row, followed by a number 1-9 indicating the column, and value is a number from 1-9 js\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst coordinate = 'A1';\nconst value = '7';\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'valid');\nassert isTrue(parsed valid);\n};\nThe return value from the POST to /api/check will be an object containing a valid property, which is true if the number may be placed at the provided coordinate and false if the number may not If false, the returned object will also contain a conflict property which is an array containing the strings \"row\", \"column\", and/or \"region\" depending on which makes the placement invalid js\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst coordinate = 'A1';\nconst value = '1';\nconst conflict = ['row', 'column'];\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'valid');\nassert isFalse(parsed valid);\nassert property(parsed, 'conflict');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "4f63f8961ed6dd81d8bfbd563abf22be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '; const coordinate = 'A1'; const value = '1'; const conflict = ['row', 'column']; const data = await fetch(code + '/api/check', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ puzzle: input, coordinate, value }) }); const parsed = await data json(); assert property(parsed, 'valid'); assert isFalse(parsed valid); assert property(parsed, 'conflict'); assertinclude(parsed conflict, 'row');\nassert include(parsed conflict, 'column');\n};\nIf value submitted to /api/check is already placed in puzzle on that coordinate, the returned value will be an object containing a valid property with true if value is not conflicting js\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst coordinate = 'C3';\nconst value = '2';\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'valid');\nassert isTrue(parsed valid);\n};\nIf the puzzle submitted to /api/check contains values which are not numbers or periods, the returned value will be { error: 'Invalid characters in puzzle' }\njs\nasync () => {\nconst input =\n'AA9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst coordinate = 'A1';\nconst value = '1';\nconst output = 'Invalid characters in puzzle';\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "cee235f10f19929d6adc06daaa084f90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> { const input = 'AA9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '; const coordinate = 'A1'; const value = '1'; const output = 'Invalid characters in puzzle'; const data = await fetch(code + '/api/check', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify({ puzzle: input, coordinate, value }) }); const parsed = await data json(); assert property(parsed, 'error'); assert equal(parsederror, output);\n};\nIf the puzzle submitted to /api/check is greater or less than 81 characters, the returned value will be { error: 'Expected puzzle to be 81 characters long' }\njs\nasync () => {\nconst inputs = [\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ',\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 '\n];\nconst coordinate = 'A1';\nconst value = '1';\nconst output = 'Expected puzzle to be 81 characters long';\nfor (const input of inputs) {\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n}\n};\nIf the object submitted to /api/check is missing puzzle, coordinate or value, the returned value will be { error: 'Required field(s) missing' }\njs\nasync () => {\nconst inputs = [\n{\npuzzle: ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ',\nvalue: '1',\n},\n{\npuzzle: ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "95c0b9ccf73140efc8436944722a65b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is missing puzzle, coordinate or value, the returned value will be { error: 'Required field(s) missing' } js async () => { const inputs = [ { puzzle: ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ', value: '1', }, { puzzle: ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6',\ncoordinate: 'A1',\n},\n{\ncoordinate: 'A1',\nvalue: '1'\n}\n];\nfor (const input of inputs) {\nconst output = 'Required field(s) missing';\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(input)\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n}\n};\nIf the coordinate submitted to api/check does not point to an existing grid cell, the returned value will be { error: 'Invalid coordinate'}\njs\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6 ';\nconst output = 'Invalid coordinate';\nconst coordinates = ['A0', 'A10', 'J1', 'A', '1', 'XZ18'];\nconst value = '7';\nfor (const coordinate of coordinates) {\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n}\n};\nIf the value submitted to /api/check is not a number between 1 and 9, the returned value will be { error: 'Invalid value' }\njs\nasync () => {\nconst input =\n' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "6550aab44697900afb0e71961713469a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "JSON stringify({ puzzle: input, coordinate, value }) }); const parsed = await data json(); assert property(parsed, 'error'); assert equal(parsed error, output); } }; If the value submitted to /api/check is not a number between 1 and 9, the returned value will be { error: 'Invalid value' } js async () => { const input = ' 9 5 1 85 4 2432 1 69 83 9 6 62 71 9 1945 4 37 4 3 6';\nconst output = 'Invalid value';\nconst coordinate = 'A1';\nconst values = ['0', '10', 'A'];\nfor (const value of values) {\nconst data = await fetch(code + '/api/check', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify({ puzzle: input, coordinate, value })\n});\nconst parsed = await data json();\nassert property(parsed, 'error');\nassert equal(parsed error, output);\n}\n};\nAll 12 unit tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst unitTests = getTests filter((test) => {\nreturn test context match(/Unit\\s*Tests/gi);\n});\nassert isAtLeast(unitTests length, 12, 'At least 12 tests passed');\nunitTests forEach((test) => {\nassert equal(test state, 'passed', 'Test in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n};\nAll 14 functional tests are complete and passing js\nasync () => {\ntry {\nconst getTests = await $ get(code + '/_api/get-tests');\nassert isArray(getTests);\nconst functTests = getTests filter((test) => {\nreturn test context match(/Functional\\s*Tests/gi);\n});\nassert isAtLeast(functTests length, 14, 'At least 14 tests passed');\nfunctTests forEach((test) => {\nassert equal(test state, 'passed', 'Test in Passed State');\nassert isAtLeast(\ntest assertions length,\n1,\n'At least one assertion per test'\n);\n});\n} catch (err) {\nthrow new Error(err",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "4ac307980b03db7a2f05a653bd2b5e1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "tests are complete and passing js async () => { try { const getTests = await $ get(code + '/_api/get-tests'); assert isArray(getTests); const functTests = getTests filter((test) => { return test context match(/Functional\\s*Tests/gi); }); assert isAtLeast(functTests length, 14, 'At least 14 tests passed'); functTests forEach((test) => { assert equal(test state, 'passed', 'Test in Passed State'); assert isAtLeast( test assertions length, 1, 'At least one assertion per test' ); }); } catch (err) { throw new Error(errresponseText || err message);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "6de284be22356c0d2733e961b0c78b0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-data-from-post-requests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb2367417b2b2512bf8\ntitle: Get Data from POST Requests\nchallengeType: 2\nforumTopicId: 301511\ndashedName: get-data-from-post-requests\n--description--\nMount a POST handler at the path /name It’s the same path as before We have prepared a form in the html frontpage It will submit the same data of exercise 10 (Query string) If the body-parser is configured correctly, you should find the parameters in the object req body Have a look at the usual library example:\nroute: POST '/library'urlencoded_body: userId=546&bookId=6754 req body: {userId: '546', bookId: '6754'}\nRespond with the same JSON object as before: {name: 'firstname lastname'} Test if your endpoint works using the html form we provided in the app frontpage Tip: There are several other http methods other than GET and POST And by convention there is a correspondence between the http verb, and the operation you are going to execute on the server The conventional mapping is:\nPOST (sometimes PUT) - Create a new resource using the information sent with the request,\nGET - Read an existing resource without modifying it,\nPUT or PATCH (sometimes POST) - Update a resource using the data sent,\nDELETE - Delete a resource There are also a couple of other methods which are used to negotiate a connection with the server Except for GET, all the other methods listed above can have a payload (i e the data into the request body) The body-parser middleware works with these methods as well --hints--\nTest 1 : Your API endpoint should respond with the correct name\njs\n$ post(code + '/name', { first: 'Mick', last: 'Jagger' }) then(\n(data) => {\nassert equal(\ndata name,\n'Mick Jagger',\n'Test 1: \"POST /name\" route does not behave as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nTest 2 : Your API endpoint should respond with the correct name\njs\n$ post(code + '/name', {\nfirst: 'Keith',\nlast: 'Richards'\n}) then(\n(data) => {\nassert equal(\ndata name,\n'Keith Richards',\n'Test 2: \"POST /name\" route does not behave as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-data-from-post-requests.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fdcba60ba4b9752e994a3270d1d5fd3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-data-from-post-requests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "data name, 'Mick Jagger', 'Test 1: \"POST /name\" route does not behave as expected' ); }, (xhr) => { throw new Error(xhr responseText); } ); Test 2 : Your API endpoint should respond with the correct name js $ post(code + '/name', { first: 'Keith', last: 'Richards' }) then( (data) => { assert equal( data name, 'Keith Richards', 'Test 2: \"POST /name\" route does not behave as expected' ); }, (xhr) => { throw new Error(xhrresponseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-data-from-post-requests.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "64ea3837b52681e833197421de36c6d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-route-parameter-input-from-the-client.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb2367417b2b2512bf5\ntitle: Get Route Parameter Input from the Client\nchallengeType: 2\nforumTopicId: 301513\ndashedName: get-route-parameter-input-from-the-client\n--description--\nWhen building an API, we have to allow users to communicate to us what they want to get from our service. For example, if the client is requesting information about a user stored in the database, they need a way to let us know which user they're interested in. One possible way to achieve this result is by using route parameters. Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the URL which matches its position. The captured values can be found in the req.params object.\nroute_path: '/user/:userId/book/:bookId'actual_request_URL: '/user/546/book/6754' req.params: {userId: '546', bookId: '6754'}\n--instructions--\nBuild an echo server, mounted at the route GET /:word/echo. Respond with a JSON object, taking the structure {echo: word}. You can find the word to be repeated at req.params.word. You can test your route from your browser's address bar, visiting some matching routes, e.g. your-app-rootpath/freecodecamp/echo.\n--hints--\nTest 1 : Your echo server should repeat words correctly\njs\n$.get(code + '/eChOtEsT/echo').then(\n(data) => {\nassert.equal(\ndata.echo,\n'eChOtEsT',\n'Test 1: the echo server is not working as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nTest 2 : Your echo server should repeat words correctly\njs\n$.get(code + '/ech0-t3st/echo').then(\n(data) => {\nassert.equal(\ndata.echo,\n'ech0-t3st',\n'Test 2: the echo server is not working as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1914,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-route-parameter-input-from-the-client.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c62fa1ad44ae4be0769f32cda51b91c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-query-parameter-input-from-the-client.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb2367417b2b2512bf6\ntitle: Get Query Parameter Input from the Client\nchallengeType: 2\nforumTopicId: 301512\ndashedName: get-query-parameter-input-from-the-client\n--description--\nAnother common way to get input from the client is by encoding the data after the route path, using a query string The query string is delimited by a question mark ( ), and includes field=value couples Each couple is separated by an ampersand (&) Express can parse the data from the query string, and populate the object req query Some characters, like the percent (%), cannot be in URLs and have to be encoded in a different format before you can send them If you use the API from JavaScript, you can use specific methods to encode/decode these characters route_path: '/library'actual_request_URL: '/library userId=546&bookId=6754' req query: {userId: '546', bookId: '6754'}\n--instructions--\nBuild an API endpoint, mounted at GET /name Respond with a JSON document, taking the structure { name: 'firstname lastname'} The first and last name parameters should be encoded in a query string e g first=firstname&last=lastname Note: In the following exercise you are going to receive data from a POST request, at the same /name route path If you want, you can use the method app route(path) get(handler) post(handler) This syntax allows you to chain different verb handlers on the same path route You can save a bit of typing, and have cleaner code --hints--\nTest 1 : Your API endpoint should respond with { \"name\": \"Mick Jagger\" } when the /name endpoint is called with first=Mick&last=Jagger\njs\n$ get(code + '/name first=Mick&last=Jagger') then(\n(data) => {\nassert equal(\ndata name,\n'Mick Jagger',\n'Test 1: \"GET /name\" route does not behave as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nTest 2 : Your API endpoint should respond with { \"name\": \"Keith Richards\" } when the /name endpoint is called with first=Keith&last=Richards\njs\n$ get(code + '/name last=Richards&first=Keith') then(\n(data) => {\nassert equal(\ndata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-query-parameter-input-from-the-client.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a8e1609e6554dd25791dbffe693f0335",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-query-parameter-input-from-the-client.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is called with first=Mick&last=Jagger js $ get(code + '/name first=Mick&last=Jagger') then( (data) => { assert equal( data name, 'Mick Jagger', 'Test 1: \"GET /name\" route does not behave as expected' ); }, (xhr) => { throw new Error(xhr responseText); } ); Test 2 : Your API endpoint should respond with { \"name\": \"Keith Richards\" } when the /name endpoint is called with first=Keith&last=Richards js $ get(code + '/name last=Richards&first=Keith') then( (data) => { assert equal( dataname,\n'Keith Richards',\n'Test 2: \"GET /name\" route does not behave as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-query-parameter-input-from-the-client.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d8a0b0d4ce9bdea1233cd64edea1aced",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-an-html-file.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb0367417b2b2512bef\ntitle: Serve an HTML File\nchallengeType: 2\nforumTopicId: 301516\ndashedName: serve-an-html-file\n--description--\nYou can respond to requests with a file using the res.sendFile(path) method. You can put it inside the app.get('/', ...) route handler. Behind the scenes, this method will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type. Then it will read and send the file. This method needs an absolute file path. We recommend you to use the Node global variable __dirname to calculate the path like this:\njs\nabsolutePath = __dirname + '/relativePath/file.ext'\n--instructions--\nSend the /views/index.html file as a response to GET requests to the / path. If you view your live app, you should see a big HTML heading (and a form that we will use later…), with no style applied.\nNote: You can edit the solution of the previous challenge or create a new one. If you create a new solution, keep in mind that Express evaluates routes from top to bottom, and executes the handler for the first match. You have to comment out the preceding solution, or the server will keep responding with a string.\n--hints--\nYour app should serve the file views/index.html\njs\n$.get(code).then(\n(data) => {\nassert.match(\ndata,\n/<h1>.*<\\/h1>/,\n'Your app does not serve the expected HTML'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-an-html-file.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6353bb6f8e4de6af8519cc5930db9a36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\meet-the-node-console.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb0367417b2b2512bed\ntitle: Meet the Node console\nchallengeType: 2\nforumTopicId: 301515\ndashedName: meet-the-node-console\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\nDuring the development process, it is important to be able to check what’s going on in your code.\nNode is just a JavaScript environment. Like client side JavaScript, you can use the console to display useful debug information. On your local machine, you would see console output in a terminal.\nWe recommend to keep the terminal open while working at these challenges. By reading the output in the terminal, you can see any errors that may occur.\nThe server must be restarted after making changes to its files.\nYou can stop the server from the terminal using Ctrl + C and start it using Node directly (node mainEntryFile.js) or using a run script in the package.json file with npm run.\nFor example, the \"start\": \"node server.js\" script would be run from the terminal using npm run start.\nTo implement server auto restarting on file save Node provides the --watch flag you can add to your start script \"start\": \"node --watch server.js\" or you can install an npm package like nodemon. We will leave this to you as an exercise.\n--instructions--\nModify the myApp.js file to log \"Hello World\" to the console.\n--hints--\n\"Hello World\" should be in the console\njs\n$.get(code + '/_api/hello-console').then(\n(data) => {\nassert.isTrue(data.passed, '\"Hello World\" is not in the server console');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1977,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\meet-the-node-console.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dca070d403470942f93161bb968f4e48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-json-on-a-specific-route.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb1367417b2b2512bf1\ntitle: Serve JSON on a Specific Route\nchallengeType: 2\nforumTopicId: 301517\ndashedName: serve-json-on-a-specific-route\n--description--\nWhile an HTML server serves HTML, an API serves data. A REST (REpresentational State Transfer) API allows data exchange in a simple way, without the need for clients to know any detail about the server. The client only needs to know where the resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitted.\nLet's create a simple API by creating a route that responds with JSON at the path /json. You can do it as usual, with the app.get() method. Inside the route handler, use the method res.json(), passing in an object as an argument. This method closes the request-response loop, returning the data. Behind the scenes, it converts a valid JavaScript object into a string, then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back. A valid object has the usual structure {key: data}. data can be a number, a string, a nested object or an array. data can also be a variable or the result of a function call, in which case it will be evaluated before being converted into a string.\n--instructions--\nServe the object {\"message\": \"Hello json\"} as a response, in JSON format, to GET requests to the /json route. Then point your browser to your-app-url/json, you should see the message on the screen.\n--hints--\nThe endpoint /json should serve the JSON object {\"message\": \"Hello json\"}\njs\n$.get(code + '/json').then(\n(data) => {\nassert.equal(\ndata.message,\n'Hello json',\n\"The '/json' endpoint does not serve the right data\"\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-json-on-a-specific-route.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2e15bf43f5fcf83fc8e7b1e0408bf295",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-static-assets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb0367417b2b2512bf0\ntitle: Serve Static Assets\nchallengeType: 2\nforumTopicId: 301518\ndashedName: serve-static-assets\n--description--\nAn HTML server usually has one or more directories that are accessible by the user. You can place there the static assets needed by your application (stylesheets, scripts, images).\nIn Express, you can put in place this functionality using the middleware express.static(path), where the path parameter is the absolute path of the folder containing the assets.\nIf you don’t know what middleware is... don’t worry, we will discuss in detail later. Basically, middleware are functions that intercept route handlers, adding some kind of information. A middleware needs to be mounted using the method app.use(path, middlewareFunction). The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.\n--instructions--\nMount the express.static() middleware to the path /public with app.use(). The absolute path to the assets folder is __dirname + /public.\nNow your app should be able to serve a CSS stylesheet. Note that the /public/style.css file is referenced in the /views/index.html in the project boilerplate. Your front-page should look a little better now!\n--hints--\nYour app should serve asset files from the /public directory to the /public path\njs\n$.get(code + '/public/style.css').then(\n(data) => {\nassert.match(\ndata,\n/body\\s*\\{[^\\}]*\\}/,\n'Your app does not serve static assets'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nYour app should not serve files from any other folders except from /public directory\njs\n$.get(code + '/server.js').then(\n(data) => {\nassert.equal(\ndata?.status + '',\n404 + '',\n'Your app must serve files only from \"public\" directory'\n);\n},\n(xhr) => {\nassert.equal(\nxhr?.status + '',\n404 + '',\n'Your app must serve files only from \"public\" directory'\n);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-static-assets.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7b0abc11eab07b0f819da22b35249e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\start-a-working-express-server.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb0367417b2b2512bee\ntitle: Start a Working Express Server\nchallengeType: 2\nforumTopicId: 301519\ndashedName: start-a-working-express-server\n--description--\nIn the first two lines of the file myApp.js, you can see how easy it is to create an Express app object. This object has several methods, and you will learn many of them in these challenges. One fundamental method is app.listen(port). It tells your server to listen on a given port, putting it in running state. For testing reasons, we need the app to be running in the background so we added this method in the server.js file for you.\nLet’s serve our first string! In Express, routes takes the following structure: app.METHOD(PATH, HANDLER). METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). HANDLER is a function that Express calls when the route is matched. Handlers take the form function(req, res) {...}, where req is the request object, and res is the response object. For example, the handler\njs\nfunction(req, res) {\nres.send('Response String');\n}\nwill serve the string 'Response String'.\n--instructions--\nUse the app.get() method to serve the string \"Hello Express\" to GET requests matching the / (root) path. Be sure that your code works by looking at the logs.\nNote: All the code for these lessons should be added in between the few lines of code we have started you off with.\n--hints--\nYour app should serve the string 'Hello Express'\njs\n$.get(code).then(\n(data) => {\nassert.equal(\ndata,\n'Hello Express',\n'Your app does not serve the text \"Hello Express\"'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1791,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\start-a-working-express-server.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8c83997ba06ef1cd6ddc3c08833169bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a8b073d06fa14fcfde687aa\ntitle: Exercise Tracker\nchallengeType: 4\nforumTopicId: 301505\ndashedName: exercise-tracker\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://exercise-tracker freecodecamp rocks Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nYour responses should have the following structures Exercise:\njs\n{\nusername: \"fcc_test\",\ndescription: \"test\",\nduration: 60,\ndate: \"Mon Jan 01 1990\",\n_id: \"5fb5853f734231456ccb3b05\"\n}\nUser:\njs\n{\nusername: \"fcc_test\",\n_id: \"5fb5853f734231456ccb3b05\"\n}\nLog:\njs\n{\nusername: \"fcc_test\",\ncount: 1,\n_id: \"5fb5853f734231456ccb3b05\",\nlog: [{\ndescription: \"test\",\nduration: 60,\ndate: \"Mon Jan 01 1990\",\n}]\n}\nHint: For the date property, the toDateString method of the Date API can be used to achieve the expected output --hints--\nYou should provide your own project, not the example URL js\nassert( / *\\/exercise-tracker\\ freecodecamp\\ rocks/ test(code)\n);\nYou can POST to /api/users with form data username to create a new user js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nassert isTrue(res ok);\nif( res ok) {\nthrow new Error(`${res status} ${res statusText}`)\n};\n};\nThe returned response from POST /api/users with form data username will be an object with username and _id properties",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "38e455ef8f576bad3340a67e188211bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "POST to /api/users with form data username to create a new user js async () => { const url = code; const res = await fetch(url + '/api/users', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }); assert isTrue(res ok); if( res ok) { throw new Error(`${res status} ${res statusText}`) }; }; The returned response from POST /api/users with form data username will be an object with username and _id propertiesjs\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res json();\nassert exists(_id);\nassert exists(username);\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nYou can make a GET request to /api/users to get a list of all users js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users');\nassert isTrue(res ok);\nif( res ok) {\nthrow new Error(`${res status} ${res statusText}`)\n};\n};\nThe GET request to /api/users returns an array js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users');\nif(res ok){\nconst users = await res json();\nassert isArray(users);\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n};\n};\nEach element in the array returned from GET /api/users is an object literal containing a user's username and _id js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users');\nif(res ok){\nconst users = await res json();\nconst user = users[0];\nassert exists(user);\nassert exists(user username);\nassert exists(user _id);\nassert isString(user username);\nassert isString(user _id);\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n};\n};\nYou can POST to /api/users/:_id/exercises with form data description, duration, and optionally date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "9269e291cc6e67235079412e9e1d3e71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is an object literal containing a user's username and _id js async () => { const url = code; const res = await fetch(url + '/api/users'); if(res ok){ const users = await res json(); const user = users[0]; assert exists(user); assert exists(user username); assert exists(user _id); assert isString(user username); assert isString(user _id); } else { throw new Error(`${res status} ${res statusText}`); }; }; You can POST to /api/users/:_id/exercises with form data description, duration, and optionally dateIf no date is supplied, the current date will be used js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: 'Mon Jan 01 1990'\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}&date=1990-01-01`\n});\nassert isTrue(addRes ok);\nif( addRes ok) {\nthrow new Error(`${addRes status} ${addRes statusText}`)\n};\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nThe response returned from POST /api/users/:_id/exercises will be the user object with the exercise fields added js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "e24510505d19071bf91bc6eb90c4ee4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "throw new Error(`${addRes status} ${addRes statusText}`) }; } else { throw new Error(`${res status} ${res statusText}`); } }; The response returned from POST /api/users/:_id/exercises will be the user object with the exercise fields added js async () => { const url = code; const res = await fetch(url + '/api/users', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }); if (res ok) { const { _id, username } = await resjson();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: 'Mon Jan 01 1990'\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}&date=1990-01-01`\n});\nassert isTrue(addRes ok);\nif ( addRes ok) {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n}\nconst responseBody = await addRes json();\nassert isString(responseBody description);\nassert isNumber(responseBody duration);\nassert isString(responseBody date);\nassert equal(responseBody _id, expected _id);\nassert equal(responseBody username, expected username);\nassert equal(responseBody description, expected description);\nassert equal(responseBody duration, expected duration);\nconst receivedDate = new Date(responseBody date);\nconst expectedDate = new Date(expected date); // Jan 1, 1990\nconst allowedPreviousDate = new Date(expectedDate);\nallowedPreviousDate setDate(expectedDate getDate() - 1); // Dec 31, 1989\nconst isValidDate =\nreceivedDate toDateString() === expectedDate toDateString() ||\nreceivedDate toDateString() === allowedPreviousDate toDateString();\nassert isTrue(\nisValidDate,\n`Expected date to be ${expectedDate toDateString()} or ${allowedPreviousDate toDateString()}, but got ${receivedDate toDateString()}`\n);\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nYou can make a GET request to /api/users/:_id/logs to retrieve a full exercise log of any user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "beb9fe9ff59f1a3dfd35a84ef9347254",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Jan 1, 1990 const allowedPreviousDate = new Date(expectedDate); allowedPreviousDate setDate(expectedDate getDate() - 1); // Dec 31, 1989 const isValidDate = receivedDate toDateString() === expectedDate toDateString() || receivedDate toDateString() === allowedPreviousDate toDateString(); assert isTrue( isValidDate, `Expected date to be ${expectedDate toDateString()} or ${allowedPreviousDate toDateString()}, but got ${receivedDate toDateString()}` ); } else { throw new Error(`${res status} ${res statusText}`); } }; You can make a GET request to /api/users/:_id/logs to retrieve a full exercise log of any userjs\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}`\n});\nif (addRes ok) {\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nassert isTrue(logRes ok);\nif( logRes ok) {\nthrow new Error(`${logRes status} ${logRes statusText}`)\n};\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n}\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nA request to a user's log GET /api/users/:_id/logs returns a user object with a count property representing the number of exercises that belong to that user js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "783b724f4ca9f92e6d487428d771db0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "throw new Error(`${addRes status} ${addRes statusText}`); } } else { throw new Error(`${res status} ${res statusText}`); } }; A request to a user's log GET /api/users/:_id/logs returns a user object with a count property representing the number of exercises that belong to that user js async () => { const url = code; const res = await fetch(url + '/api/users', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }); if (resok) {\nconst { _id, username } = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}`\n});\nif (addRes ok) {\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nif (logRes ok) {\nconst { count } = await logRes json();\nassert(count);\n} else {\nthrow new Error(`${logRes status} ${logRes statusText}`);\n}\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n}\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};\nA GET request to /api/users/:_id/logs will return the user object with a log array of all the exercises added js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n})\nif(res ok){\nconst {_id, username} = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "863768c1dd55548ea8c061fae01fc3c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of all the exercises added js async () => { const url = code; const res = await fetch(url + '/api/users', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }) if(res ok){ const {_id, username} = await res json(); const expected = { username, description: 'test', duration: 60, _id, date: new Date() toDateString() }; const addRes = await fetch(url + `/api/users/${_id}/exercises`, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `description=${expecteddescription}&duration=${expected duration}`\n});\nif(addRes ok){\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nif(logRes ok) {\nconst {log} = await logRes json();\nassert isArray(log);\nassert equal(1, log length);\n} else {\nthrow new Error(`${logRes status} ${logRes statusText}`);\n}\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n};\n} else {\nthrow new Error(`${res status} ${res statusText}`)\n};\n};\nEach item in the log array that is returned from GET /api/users/:_id/logs is an object that should have a description, duration, and date properties js\nasync () => {\nconst url = code;\nconst res = await fetch(url + `/api/users`, {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif(res ok) {\nconst {_id, username} = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}`\n});\nif(addRes ok) {\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nif(logRes ok) {\nconst {log} = await logRes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "7ee3ce58ac94bc7af4d305c99cd99f8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }); if(res ok) { const {_id, username} = await res json(); const expected = { username, description: 'test', duration: 60, _id, date: new Date() toDateString() }; const addRes = await fetch(url + `/api/users/${_id}/exercises`, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `description=${expected description}&duration=${expected duration}` }); if(addRes ok) { const logRes = await fetch(url + `/api/users/${_id}/logs`); if(logRes ok) { const {log} = await logResjson();\nconst exercise = log[0];\nassert exists(exercise);\nassert exists(exercise description);\nassert exists(exercise duration);\nassert exists(exercise date);\n} else {\nthrow new Error(`${logRes status} ${logRes statusText}`);\n};\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n};\n} else {\nthrow new Error(`${res status} ${res statusText}`)\n};\n};\nThe description property of any object in the log array that is returned from GET /api/users/:_id/logs should be a string js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody: `username=fcc_test_${Date now()}` substring(0,29)\n});\nif(res ok) {\nconst {_id, username} = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody: `description=${expected description}&duration=${expected duration}`\n});\nif(addRes ok) {\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nif(logRes ok){\nconst {log} = await logRes json();\nconst exercise = log[0];\nassert isString(exercise description);\nassert equal(exercise",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "bd8f6b357ff5a6702b6a9d2805efb6a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "`username=fcc_test_${Date now()}` substring(0,29) }); if(res ok) { const {_id, username} = await res json(); const expected = { username, description: 'test', duration: 60, _id, date: new Date() toDateString() }; const addRes = await fetch(url + `/api/users/${_id}/exercises`, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: `description=${expected description}&duration=${expected duration}` }); if(addRes ok) { const logRes = await fetch(url + `/api/users/${_id}/logs`); if(logRes ok){ const {log} = await logRes json(); const exercise = log[0]; assert isString(exercise description); assert equal(exercisedescription, expected description);\n} else {\nthrow new Error(`${logRes status} ${logRes statusText}`);\n}\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n};\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n};\n};\nThe duration property of any object in the log array that is returned from GET /api/users/:_id/logs should be a number js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody: `username=fcc_test_${Date now()}` substring(0,29)\n});\nif(res ok) {\nconst {_id, username} = await res json();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody: `description=${expected description}&duration=${expected duration}`\n});\nif(addRes ok) {\nconst logRes = await fetch(url + `/api/users/${_id}/logs`);\nif(logRes ok){\nconst {log} = await logRes json();\nconst exercise = log[0];\nassert isNumber(exercise duration);\nassert equal(exercise duration, expected duration);\n} else {\nthrow new Error(`${logRes status} ${logRes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "ac1f69ef4e96bab229c0f470e4a8065c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "await res json(); const expected = { username, description: 'test', duration: 60, _id, date: new Date() toDateString() }; const addRes = await fetch(url + `/api/users/${_id}/exercises`, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: `description=${expected description}&duration=${expected duration}` }); if(addRes ok) { const logRes = await fetch(url + `/api/users/${_id}/logs`); if(logRes ok){ const {log} = await logRes json(); const exercise = log[0]; assert isNumber(exercise duration); assert equal(exercise duration, expected duration); } else { throw new Error(`${logRes status} ${logResstatusText}`);\n}\n} else {\nthrow new Error(`${addRes status} ${addRes statusText}`);\n};\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n};\n};\nThe date property of any object in the log array that is returned from GET /api/users/:_id/logs should be a string Use the dateString format of the Date API ``js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody:username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res json();\nconst currentDate = new Date();\nconst expectedDates = [\nnew Date(currentDate setDate(currentDate getDate() - 1)) toLocaleDateString(\"en-US\", {\ntimeZone: \"UTC\", weekday: \"short\", month: \"short\",\nday: \"2-digit\", year: \"numeric\"\n}) replaceAll(',', ''),\nnew Date() toLocaleDateString(\"en-US\", {\ntimeZone: \"UTC\", weekday: \"short\", month: \"short\",\nday: \"2-digit\", year: \"numeric\"\n}) replaceAll(',', ''),\nnew Date(currentDate setDate(currentDate getDate() + 1)) toLocaleDateString(\"en-US\", {\ntimeZone: \"UTC\", weekday: \"short\", month: \"short\",\nday: \"2-digit\", year: \"numeric\"\n})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "a546738739ce518623f03ebc9c82a15a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ const { _id, username } = await res json(); const currentDate = new Date(); const expectedDates = [ new Date(currentDate setDate(currentDate getDate() - 1)) toLocaleDateString(\"en-US\", { timeZone: \"UTC\", weekday: \"short\", month: \"short\", day: \"2-digit\", year: \"numeric\" }) replaceAll(',', ''), new Date() toLocaleDateString(\"en-US\", { timeZone: \"UTC\", weekday: \"short\", month: \"short\", day: \"2-digit\", year: \"numeric\" }) replaceAll(',', ''), new Date(currentDate setDate(currentDate getDate() + 1)) toLocaleDateString(\"en-US\", { timeZone: \"UTC\", weekday: \"short\", month: \"short\", day: \"2-digit\", year: \"numeric\" })replaceAll(',', '')\n];\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\n};\nconst addRes = await fetch(url + /api/users/${_id}/exercises, {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n},\nbody: description=${expected description}&duration=${expected duration}\n});\nif (addRes ok) {\nconst logRes = await fetch(url + /api/users/${_id}/logs);\nif (logRes ok) {\nconst { log } = await logRes json();\nconst exercise = log[0];\nassert isString(exercise date);\nassert include(expectedDates, exercise date); // Check if date matches any valid dates\n} else {\nthrow new Error(${logRes status} ${logRes statusText});\n}\n} else {\nthrow new Error(${addRes status} ${addRes statusText});\n};\n} else {\nthrow new Error(${res status} ${res statusText});\n};\n};\n```\nYou can add from, to and limit parameters to a GET /api/users/:_id/logs request to retrieve part of the log of any user from and to are dates in yyyy-mm-dd format limit is an integer of how many logs to send back js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/users', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `username=fcc_test_${Date now()}` substring(0, 29)\n});\nif (res ok) {\nconst { _id, username } = await res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "f4c9b9dbdc346b74af26e576e97f0173",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "parameters to a GET /api/users/:_id/logs request to retrieve part of the log of any user from and to are dates in yyyy-mm-dd format limit is an integer of how many logs to send back js async () => { const url = code; const res = await fetch(url + '/api/users', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `username=fcc_test_${Date now()}` substring(0, 29) }); if (res ok) { const { _id, username } = await resjson();\nconst expected = {\nusername,\ndescription: 'test',\nduration: 60,\n_id,\ndate: new Date() toDateString()\n};\nconst addExerciseRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}&date=1990-01-01`\n});\nconst addExerciseTwoRes = await fetch(url + `/api/users/${_id}/exercises`, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' },\nbody: `description=${expected description}&duration=${expected duration}&date=1990-01-03`\n});\nif (addExerciseRes ok && addExerciseTwoRes ok) {\nconst logRes = await fetch(\nurl + `/api/users/${_id}/logs from=1989-12-31&to=1990-01-04`\n);\nif (logRes ok) {\nconst { log } = await logRes json();\nassert isArray(log);\nassert equal(2, log length);\n} else {\nthrow new Error(`${logRes status} ${logRes statusText}`);\n}\nconst limitRes = await fetch(\nurl + `/api/users/${_id}/logs limit=1`\n);\nif (limitRes ok) {\nconst { log } = await limitRes json();\nassert isArray(log);\nassert equal(1, log length);\n} else {\nthrow new Error(`${limitRes status} ${limitRes statusText}`);\n}\nconst filterDateBeforeLimitRes = await fetch(\nurl + `/api/users/${_id}/logs from=1990-01-02&to=1990-01-04&limit=1`\n);\nif (filterDateBeforeLimitRes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "f24b064a9028ae70c7869aa369440249",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ok) { const { log } = await logRes json(); assert isArray(log); assert equal(2, log length); } else { throw new Error(`${logRes status} ${logRes statusText}`); } const limitRes = await fetch( url + `/api/users/${_id}/logs limit=1` ); if (limitRes ok) { const { log } = await limitRes json(); assert isArray(log); assert equal(1, log length); } else { throw new Error(`${limitRes status} ${limitRes statusText}`); } const filterDateBeforeLimitRes = await fetch( url + `/api/users/${_id}/logs from=1990-01-02&to=1990-01-04&limit=1` ); if (filterDateBeforeLimitResok) {\nconst { log } = await filterDateBeforeLimitRes json();\nassert isArray(log);\nassert equal(1, log length);\n} else {\nthrow new Error(`${filterDateBeforeLimitRes status} ${filterDateBeforeLimitRes statusText}`);\n}\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n} else {\nthrow new Error(`${res status} ${res statusText}`);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "1e485cb945785ee7c6c0c8862955658b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-description-to-your-package.json.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb3367417b2b2512bfc\ntitle: Add a Description to Your package.json\nchallengeType: 2\nforumTopicId: 301522\ndashedName: add-a-description-to-your-package-json\n--description--\nThe next part of a good package.json file is the description field; where a short, but informative description about your project belongs.\nIf some day you plan to publish a package to npm, this is the string that should sell your idea to the user when they decide whether to install your package or not. However, that’s not the only use case for the description, it’s a great way to summarize what a project does. It’s just as important in any Node.js project to help other developers, future maintainers or even your future self understand the project quickly.\nRegardless of what you plan for your project, a description is definitely recommended. Here's an example:\njson\n\"description\": \"A project that does something awesome\",\n--instructions--\nAdd a description to the package.json file of your project.\nNote: Remember to use double-quotes for field-names (\") and commas (,) to separate fields.\n--hints--\npackage.json should have a valid \"description\" key\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.exists(data.description, '\"description\" is missing');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-description-to-your-package.json.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e0afba01ca0ea952731665b4cca8975b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\implement-a-root-level-request-logger-middleware.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb1367417b2b2512bf3\ntitle: Implement a Root-Level Request Logger Middleware\nchallengeType: 2\nforumTopicId: 301514\ndashedName: implement-a-root-level-request-logger-middleware\n--description--\nEarlier, you were introduced to the express static() middleware function Now it’s time to see what middleware is, in more detail Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s request-response cycle These functions execute some code that can have side effects on the app, and usually add information to the request or response objects They can also end the cycle by sending a response when some condition is met If they don’t send the response when they are done, they start the execution of the next function in the stack This triggers calling the 3rd argument, next() Look at the following example:\njs\nfunction(req, res, next) {\nconsole log(\"I'm a middleware \");\nnext();\n}\nLet’s suppose you mounted this function on a route When a request matches the route, it displays the string “I’m a middleware…”, then it executes the next function in the stack In this exercise, you are going to build root-level middleware As you have seen in challenge 4, to mount a middleware function at root level, you can use the app use(<mware-function>) method In this case, the function will be executed for all the requests, but you can also set more specific conditions For example, if you want a function to be executed only for POST requests, you could use app post(<mware-function>) Analogous methods exist for all the HTTP verbs (GET, DELETE, PUT, …) --instructions--\nBuild a simple logger For every request, it should log to the console a string taking the following format: method path - ip An example would look like this: GET /json - ::ffff:127 0 0 1 Note that there is a space between method and path and that the dash separating path and ip is surrounded by a space on both sides You can get the request method (http verb), the relative route path, and the caller’s ip from the request object using req method, req path and req ip Remember to call next() when you are done, or your server will be stuck forever Be sure to have the ‘Logs’ opened, and see what happens when some request arrives",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\implement-a-root-level-request-logger-middleware.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c8986e386d082e57129ef2dfd69cc247",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\implement-a-root-level-request-logger-middleware.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and path and that the dash separating path and ip is surrounded by a space on both sides You can get the request method (http verb), the relative route path, and the caller’s ip from the request object using req method, req path and req ip Remember to call next() when you are done, or your server will be stuck forever Be sure to have the ‘Logs’ opened, and see what happens when some request arrivesNote: Express evaluates functions in the order they appear in the code This is true for middleware too If you want it to work for all the routes, it should be mounted before them --hints--\nRoot level logger middleware should be active\njs\n$ get(code + '/_api/root-middleware-logger') then(\n(data) => {\nassert isTrue(\ndata passed,\n'root-level logger is not working as expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\implement-a-root-level-request-logger-middleware.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c9da8a1a8d2a14589919e42bdd5ec2c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-license-to-your-package.json.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb4367417b2b2512bfe\ntitle: Add a License to Your package.json\nchallengeType: 2\nforumTopicId: 301523\ndashedName: add-a-license-to-your-package-json\n--description--\nThe license field is where you inform users of what they are allowed to do with your project.\nSome common licenses for open source projects include MIT and BSD. License information is not required, and copyright laws in most countries will give you ownership of what you create by default. However, it’s always a good practice to explicitly state what users can and can’t do. Here's an example of the license field:\njson\n\"license\": \"MIT\",\n--instructions--\nFill the license field in the package.json file of your project as you find suitable.\n--hints--\npackage.json should have a valid \"license\" key\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.exists(data.license, '\"license\" is missing');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-license-to-your-package.json.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "22ac16bc8d0bed9f8bedfb1a75832696",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-version-to-your-package.json.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb4367417b2b2512bff\ntitle: Add a Version to Your package.json\nchallengeType: 2\nforumTopicId: 301525\ndashedName: add-a-version-to-your-package-json\n--description--\nA version is one of the required fields of your package.json file. This field describes the current version of your project. Here's an example:\njson\n\"version\": \"1.2.0\",\n--instructions--\nAdd a version to the package.json file of your project.\n--hints--\npackage.json should have a valid \"version\" key\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.exists(data.version, '\"version\" is missing');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 761,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-version-to-your-package.json.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "56fed33d0de95ca718d449dbbcf44df8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-body-parser-to-parse-post-requests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb2367417b2b2512bf7\ntitle: Use body-parser to Parse POST Requests\nchallengeType: 2\nforumTopicId: 301520\ndashedName: use-body-parser-to-parse-post-requests\n--description--\nBesides GET, there is another common HTTP verb, it is POST POST is the default method used to send client data with HTML forms In REST convention, POST is used to send data to create new items in the database (a new user, or a new blog post) You don’t have a database in this project, but you are going to learn how to handle POST requests anyway In these kind of requests, the data doesn’t appear in the URL, it is hidden in the request body The body is a part of the HTTP request, also called the payload Even though the data is not visible in the URL, this does not mean that it is private To see why, look at the raw content of an HTTP POST request:\n```http\nPOST /path/subpath HTTP/1 0\nFrom: john@example com\nUser-Agent: someBrowser/1 0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 20\nname=John+Doe&age=25\n```\nAs you can see, the body is encoded like the query string This is the default format used by HTML forms With Ajax, you can also use JSON to handle data having a more complex structure There is also another type of encoding: multipart/form-data This one is used to upload binary files In this exercise, you will use a URL encoded body To parse the data coming from POST requests, you must use the body-parser package This package allows you to use a series of middleware, which can decode data in different formats --instructions--\nbody-parser has already been installed and is in your project's package json file require it at the top of the myApp js file and store it in a variable named bodyParser The middleware to handle URL encoded data is returned by bodyParser urlencoded({extended: false}) Pass the function returned by the previous method call to app use() As usual, the middleware must be mounted before all the routes that depend on it Note: extended is a configuration option that tells body-parser which parsing needs to be used When extended=false it uses the classic encoding querystring library When extended=true it uses qs library for parsing When using extended=false, values can be only strings or arrays",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-body-parser-to-parse-post-requests.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "55440555b5f4862981004cc72f2c73eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-body-parser-to-parse-post-requests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "data is returned by bodyParser urlencoded({extended: false}) Pass the function returned by the previous method call to app use() As usual, the middleware must be mounted before all the routes that depend on it Note: extended is a configuration option that tells body-parser which parsing needs to be used When extended=false it uses the classic encoding querystring library When extended=true it uses qs library for parsing When using extended=false, values can be only strings or arraysThe object returned when using querystring does not prototypically inherit from the default JavaScript Object, which means functions like hasOwnProperty, toString will not be available The extended version allows more data flexibility, but it is outmatched by JSON --hints--\nThe 'body-parser' middleware should be mounted\njs\n$ get(code + '/_api/add-body-parser') then(\n(data) => {\nassert isAbove(\ndata mountedAt,\n0,\n'\"body-parser\" is not mounted correctly'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-body-parser-to-parse-post-requests.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f7d00ee6ca733dc2fd820871f0684386",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-the-.env-file.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb1367417b2b2512bf2\ntitle: Use the env File\nchallengeType: 2\nforumTopicId: 301521\ndashedName: use-the--env-file\n--description--\nThe env file is a hidden file that is used to pass environment variables to your application This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden For example, you can store API keys from external services or your database URI You can also use it to store configuration options By setting configuration options, you can change the behavior of your application, without the need to rewrite some code The environment variables are accessible from the app as process env VAR_NAME The process env object is a global Node object, and variables are passed as strings By convention, the variable names are all uppercase, with words separated by an underscore The env is a shell file, so you don’t need to wrap names or values in quotes It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e g VAR_NAME=value Usually, you will put each variable definition on a separate line --instructions--\nLet's add an environment variable as a configuration option Create a env file in the root of your project directory, and store the variable MESSAGE_STYLE=uppercase in it Then, in the /json GET route handler you created in the last challenge access process env MESSAGE_STYLE and transform the response object's message to uppercase if the variable equals uppercase The response object should either be {\"message\": \"Hello json\"} or {\"message\": \"HELLO JSON\"}, depending on the MESSAGE_STYLE value Note that you must read the value of process env MESSAGE_STYLE inside the route handler, not outside of it, due to the way our tests run You will need to use the dotenv package It loads environment variables from your env file into process env The dotenv package has already been installed, and is in your project's package json file At the top of your myApp js file, add require('dotenv') config() to load the environment variables --hints--\nThe response of the endpoint /json should change according to the environment variable MESSAGE_STYLE\njs\n$ get(code + '/_api/use-env-vars') then(\n(data) => {\nassert isTrue(\ndata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2581,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-the-.env-file.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e3190631151abaa7e3f8ec2da9fb8cbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-the-.env-file.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will need to use the dotenv package It loads environment variables from your env file into process env The dotenv package has already been installed, and is in your project's package json file At the top of your myApp js file, add require('dotenv') config() to load the environment variables --hints-- The response of the endpoint /json should change according to the environment variable MESSAGE_STYLE js $ get(code + '/_api/use-env-vars') then( (data) => { assert isTrue( datapassed,\n'The response of \"/json\" does not change according to MESSAGE_STYLE'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2581,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-the-.env-file.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e4ecdb4cc8e1796d5b16031cbb12205c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\how-to-use-package.json-the-core-of-any-node.js-project-or-npm-package.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb3367417b2b2512bfb\ntitle: 'How to Use package.json, the Core of Any Node.js Project or npm Package'\nchallengeType: 2\nforumTopicId: 301528\ndashedName: how-to-use-package-json-the-core-of-any-node-js-project-or-npm-package\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\nThe package.json file is the center of any Node.js project or npm package. It stores information about your project. It consists of a single JSON object where information is stored in key-value pairs. There are only two required fields; name and version, but it’s good practice to provide additional information.\nYou can create the package.json file from the terminal using the npm init command. This will run a guided setup. Using npm init with the -y flag will generate the file without having it ask any questions, npm init -y.\nIf you look at the file tree of your project, you will find the package.json file on the top level of the tree. This is the file that you will be improving in the next couple of challenges.\nOne of the most common pieces of information in this file is the author field. It specifies who created the project, and can consist of a string or an object with contact or other details. An object is recommended for bigger projects, but a simple string like the following example will do for this project.\njson\n\"author\": \"Jane Doe\",\n--instructions--\nAdd your name as the author of the project in the package.json file.\nNote: Remember that you’re writing JSON, so all field names must use double-quotes (\") and be separated with a comma (,).\n--hints--\npackage.json should have a valid \"author\" key\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.exists(data.author, '\"author\" is missing');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2288,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\how-to-use-package.json-the-core-of-any-node.js-project-or-npm-package.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3877f08466dcad0e96e88cd67e508bb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-keywords-to-your-package.json.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb4367417b2b2512bfd\ntitle: Add Keywords to Your package.json\nchallengeType: 2\nforumTopicId: 301526\ndashedName: add-keywords-to-your-package-json\n--description--\nThe keywords field is where you can describe your project using related keywords. Here's an example:\njson\n\"keywords\": [ \"descriptive\", \"related\", \"words\" ],\nAs you can see, this field is structured as an array of double-quoted strings.\n--instructions--\nAdd an array of suitable strings to the keywords field in the package.json file of your project.\nOne of the keywords should be \"freecodecamp\".\n--hints--\npackage.json should have a valid \"keywords\" key\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.exists(data.keywords, '\"keywords\" is missing');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);\n\"keywords\" field should be an Array\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.isArray(data.keywords, '\"keywords\" is not an array');\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);\n\"keywords\" should include \"freecodecamp\"\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.include(\ndata.keywords,\n'freecodecamp',\n'\"keywords\" does not include \"freecodecamp\"'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-keywords-to-your-package.json.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cccc60d3219b8809cc6bcb00c09b249f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\expand-your-project-with-external-packages-from-npm.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb4367417b2b2512c00\ntitle: Expand Your Project with External Packages from npm\nchallengeType: 2\nforumTopicId: 301527\ndashedName: expand-your-project-with-external-packages-from-npm\n--description--\nOne of the biggest reasons to use a package manager, is their powerful dependency management. Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you. But how can npm know exactly what your project needs? Meet the dependencies section of your package.json file.\nIn this section, packages your project requires are stored using the following format:\n```json\n\"dependencies\": {\n\"package-name\": \"version\",\n\"express\": \"4.14.0\"\n}\n```\n--instructions--\nAdd version 1.1.0 of the @freecodecamp/example package to the dependencies field of your package.json file.\nNote: @freecodecamp/example is a faux package used as a learning tool.\n--hints--\n\"dependencies\" should include \"@freecodecamp/example\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.property(\ndata.dependencies,\n'@freecodecamp/example',\n'\"dependencies\" does not include \"@freecodecamp/example\"'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);\n\"@freecodecamp/example\" version should be \"1.1.0\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.match(\ndata.dependencies['@freecodecamp/example'],\n/^[\\^\\~]?1\\.1\\.0/,\n'Wrong version of \"@freecodecamp/example\" installed. It should be 1.1.0'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1853,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\expand-your-project-with-external-packages-from-npm.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a0a1427ec72f8581a20a1ab1e2a2347",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\remove-a-package-from-your-dependencies.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb5367417b2b2512c04\ntitle: Remove a Package from Your Dependencies\nchallengeType: 2\nforumTopicId: 301530\ndashedName: remove-a-package-from-your-dependencies\n--description--\nYou have now tested a few ways you can manage dependencies of your project by using the package.json's dependencies section. You have also included external packages by adding them to the file and even told npm what types of versions you want, by using special characters such as the tilde or the caret.\nBut what if you want to remove an external package that you no longer need? You might already have guessed it, just remove the corresponding key-value pair for that package from your dependencies.\nThis same method applies to removing other fields in your package.json as well.\n--instructions--\nRemove the @freecodecamp/example package from your dependencies.\nNote: Make sure you have the right amount of commas after removing it.\n--hints--\n\"dependencies\" should not include \"@freecodecamp/example\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.notProperty(\ndata.dependencies,\n'@freecodecamp/example',\n'\"dependencies\" still includes \"@freecodecamp/example\"'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\remove-a-package-from-your-dependencies.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8a884e50a8a707414104cc5cc5a2d95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-caret-character-to-use-the-latest-minor-version-of-a-dependency.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb5367417b2b2512c03\ntitle: Use the Caret-Character to Use the Latest Minor Version of a Dependency\nchallengeType: 2\nforumTopicId: 301531\ndashedName: use-the-caret-character-to-use-the-latest-minor-version-of-a-dependency\n--description--\nSimilar to how the tilde we learned about in the last challenge allows npm to install the latest PATCH for a dependency, the caret (^) allows npm to install future updates as well. The difference is that the caret will allow both MINOR updates and PATCHes.\nYour current version of @freecodecamp/example should be ~1.2.13 which allows npm to install to the latest 1.2.x version. If you were to use the caret (^) as a version prefix instead, npm would be allowed to update to any 1.x.x version.\njson\n\"package\": \"^1.3.8\"\nThis would allow updates to any 1.x.x version of the package.\n--instructions--\nUse the caret (^) to prefix the version of @freecodecamp/example in your dependencies and allow npm to update it to any new MINOR release.\nNote: The version numbers themselves should not be changed.\n--hints--\n\"dependencies\" should include \"@freecodecamp/example\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.property(\ndata.dependencies,\n'@freecodecamp/example',\n'\"dependencies\" does not include \"@freecodecamp/example\"'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);\n\"@freecodecamp/example\" version should match \"^1.x.x\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.match(\ndata.dependencies['@freecodecamp/example'],\n/^\\^1\\./,\n'Wrong version of \"@freecodecamp/example\". It should be ^1.2.13'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-caret-character-to-use-the-latest-minor-version-of-a-dependency.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d8a8146952547b8c7dd03f7ec3dd2268",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-tilde-character-to-always-use-the-latest-patch-version-of-a-dependency.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb5367417b2b2512c02\ntitle: Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency\nchallengeType: 2\nforumTopicId: 301532\ndashedName: use-the-tilde-character-to-always-use-the-latest-patch-version-of-a-dependency\n--description--\nIn the last challenge, you told npm to only include a specific version of a package. That’s a useful way to freeze your dependencies if you need to make sure that different parts of your project stay compatible with each other. But in most use cases, you don’t want to miss bug fixes since they often include important security patches and (hopefully) don’t break things in doing so.\nTo allow an npm dependency to update to the latest PATCH version, you can prefix the dependency’s version with the tilde (~) character. Here's an example of how to allow updates to any 1.3.x version.\njson\n\"package\": \"~1.3.8\"\n--instructions--\nIn the package.json file, your current rule for how npm may upgrade @freecodecamp/example is to use a specific version (1.2.13). But now, you want to allow the latest 1.2.x version.\nUse the tilde (~) character to prefix the version of @freecodecamp/example in your dependencies, and allow npm to update it to any new patch release.\nNote: The version numbers themselves should not be changed.\n--hints--\n\"dependencies\" should include \"@freecodecamp/example\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.property(\ndata.dependencies,\n'@freecodecamp/example',\n'\"dependencies\" does not include \"@freecodecamp/example\"'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);\n\"@freecodecamp/example\" version should match \"~1.2.13\".\njs\nfetch(code + '/_api/package.json')\n.then(response => response.json())\n.then(\ndata => {\nassert.match(\ndata.dependencies['@freecodecamp/example'],\n/^\\~1\\.2\\.13/,\n'Wrong version of \"@freecodecamp/example\". It should be ~1.2.13'\n);\n},\nerror => {\nthrow new Error(error.message || error.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-tilde-character-to-always-use-the-latest-patch-version-of-a-dependency.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "446f422acebef5530bdba1d2166f4104",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\manage-npm-dependencies-by-understanding-semantic-versioning.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb5367417b2b2512c01\ntitle: Manage npm Dependencies By Understanding Semantic Versioning\nchallengeType: 2\nforumTopicId: 301529\ndashedName: manage-npm-dependencies-by-understanding-semantic-versioning\n--description--\nVersions of the npm packages in the dependencies section of your package json file follow what’s called Semantic Versioning (SemVer), an industry standard for software versioning aiming to make it easier to manage dependencies Libraries, frameworks or other tools published on npm should use SemVer in order to clearly communicate what kind of changes projects can expect if they update Knowing SemVer can be useful when you develop software that uses external dependencies (which you almost always do) One day, your understanding of these numbers will save you from accidentally introducing breaking changes to your project without understanding why things that worked yesterday suddenly don’t work today This is how Semantic Versioning works according to the official website:\njson\n\"package\": \"MAJOR MINOR PATCH\"\nThe MAJOR version should increment when you make incompatible API changes The MINOR version should increment when you add functionality in a backwards-compatible manner The PATCH version should increment when you make backwards-compatible bug fixes This means that PATCHes are bug fixes and MINORs add new features but neither of them break what worked before Finally, MAJORs add changes that won’t work with earlier versions --instructions--\nIn the dependencies section of your package json file, change the version of @freecodecamp/example to match MAJOR version 1, MINOR version 2 and PATCH version 13\n--hints--\n\"dependencies\" should include \"@freecodecamp/example\" js\nfetch(code + '/_api/package json') then(response => response json()) then(\ndata => {\nassert property(\ndata dependencies,\n'@freecodecamp/example',\n'\"dependencies\" does not include \"@freecodecamp/example\"'\n);\n},\nerror => {\nthrow new Error(error message || error responseText);\n}\n);\n\"@freecodecamp/example\" version should be \"1 2 13\" js\nfetch(code + '/_api/package json') then(response => response json()) then(\ndata => {\nassert equal(\ndata dependencies['@freecodecamp/example'],\n'1 2 13',\n'Wrong version of \"@freecodecamp/example\" It should be 1 2 13'\n);\n},\nerror => {\nthrow new Error(error message || error responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\manage-npm-dependencies-by-understanding-semantic-versioning.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3ac6b08d33abfe97774dd712231f4d4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-many-records-with-model.create.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb7367417b2b2512c0a\ntitle: Create Many Records with model.create()\nchallengeType: 2\nforumTopicId: 301537\ndashedName: create-many-records-with-model-create\n--description--\nSometimes you need to create many instances of your models, e.g. when seeding a database with initial data. Model.create() takes an array of objects like [{name: 'John', ...}, {...}, ...] as the first argument, and saves them all in the db.\n--instructions--\nModify the createManyPeople function to create many people using Model.create() with the argument arrayOfPeople.\nNote: You can reuse the model you instantiated in the previous exercise.\n--hints--\nCreating many db items at once should succeed\njs\n$.ajax({\nurl: code + '/_api/create-many-people',\ntype: 'POST',\ncontentType: 'application/json',\ndata: JSON.stringify([\n{ name: 'John', age: 24, favoriteFoods: ['pizza', 'salad'] },\n{ name: 'Mary', age: 21, favoriteFoods: ['onions', 'chicken'] }\n])\n}).then(\n(data) => {\nassert.isArray(data, 'the response should be an array');\nassert.equal(\ndata.length,\n2,\n'the response does not contain the expected number of items'\n);\nassert.equal(data[0].name, 'John', 'The first item is not correct');\nassert.equal(\ndata[0].__v,\n0,\n'The first item should be not previously edited'\n);\nassert.equal(data[1].name, 'Mary', 'The second item is not correct');\nassert.equal(\ndata[1].__v,\n0,\n'The second item should be not previously edited'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-many-records-with-model.create.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c2b5c6a81431efb4f3fcae6b1e07a03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-and-save-a-record-of-a-model.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb6367417b2b2512c09\ntitle: Create and Save a Record of a Model\nchallengeType: 2\nforumTopicId: 301536\ndashedName: create-and-save-a-record-of-a-model\n--description--\nIn this challenge you will have to create and save a record of a model.\n--instructions--\nWithin the createAndSavePerson function, create a document instance using the Person model constructor you built before. Pass to the constructor an object having the fields name, age, and favoriteFoods. Their types must conform to the ones in the personSchema. Then, call the method document.save() on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern; all the following CRUD methods take a callback function like this as the last argument.\n```js\n/ Example /\n// ...\nperson.save(function(err, data) {\n//   ...do your stuff here...\n});\n```\n--hints--\nCreating and saving a db item should succeed\njs\n$.get(code + '/_api/create-and-save-person').then(\n(data) => {\nassert.isString(data.name, '\"item.name\" should be a String');\nassert.isNumber(data.age, '28', '\"item.age\" should be a Number');\nassert.isArray(\ndata.favoriteFoods,\n'\"item.favoriteFoods\" should be an Array'\n);\nassert.equal(data.__v, 0, 'The db item should be not previously edited');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-and-save-a-record-of-a-model.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9031f49b4950d6cdd4660248781559b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-one-document-using-model.findbyidandremove.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb8367417b2b2512c10\ntitle: Delete One Document Using model.findByIdAndRemove\nchallengeType: 2\nforumTopicId: 301539\ndashedName: delete-one-document-using-model-findbyidandremove\n--description--\nfindByIdAndRemove and findOneAndRemove are like the previous update methods. They pass the removed document to the db. As usual, use the function argument personId as the search key.\n--instructions--\nModify the removeById function to delete one person by the person's _id. You should use one of the methods findByIdAndRemove() or findOneAndRemove().\n--hints--\nDeleting an item should succeed\njs\n$.post(code + '/_api/remove-one-person', {\nname: 'Jason Bourne',\nage: 36,\nfavoriteFoods: ['apples']\n}).then(\n(data) => {\nassert.equal(data.name, 'Jason Bourne', 'item.name is not what expected');\nassert.equal(data.age, 36, 'item.age is not what expected');\nassert.deepEqual(\ndata.favoriteFoods,\n['apples'],\n'item.favoriteFoods is not what expected'\n);\nassert.equal(data.__v, 0);\nassert.equal(data.count, 0, 'the db items count is not what expected');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-one-document-using-model.findbyidandremove.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a53a6077e8d06856b8d47785bd697046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-many-documents-with-model.remove.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb8367417b2b2512c11\ntitle: Delete Many Documents with model.remove()\nchallengeType: 2\nforumTopicId: 301538\ndashedName: delete-many-documents-with-model-remove\n--description--\nModel.remove() is useful to delete all the documents matching given criteria.\n--instructions--\nModify the removeManyPeople function to delete all the people whose name is within the variable nameToRemove, using Model.remove(). Pass it to a query document with the name field set, and a callback.\nNote: The Model.remove() doesn’t return the deleted document, but a JSON object containing the outcome of the operation, and the number of items affected. Don’t forget to pass it to the done() callback, since we use it in tests.\n--hints--\nDeleting many items at once should succeed\njs\n$.ajax({\nurl: code + '/_api/remove-many-people',\ntype: 'POST',\ncontentType: 'application/json',\ndata: JSON.stringify([\n{ name: 'Mary', age: 16, favoriteFoods: ['lollipop'] },\n{ name: 'Mary', age: 21, favoriteFoods: ['steak'] }\n])\n}).then(\n(data) => {\nassert.isTrue(!!data.ok, 'The mongo stats are not what expected');\nassert.equal(\ndata.n,\n2,\n'The number of items affected is not what expected'\n);\nassert.equal(data.count, 0, 'the db items count is not what expected');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-many-documents-with-model.remove.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aac8d12a7b71bf5921c353182627d14d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\chain-search-query-helpers-to-narrow-search-results.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb9367417b2b2512c12\ntitle: Chain Search Query Helpers to Narrow Search Results\nchallengeType: 2\nforumTopicId: 301533\ndashedName: chain-search-query-helpers-to-narrow-search-results\n--description--\nIf you don’t pass the callback as the last argument to Model find() (or to the other search methods), the query is not executed You can store the query in a variable for later use This kind of object enables you to build up a query using chaining syntax The actual db search is executed when you finally chain the method exec() You always need to pass your callback to this last method There are many query helpers, here we'll use the most commonly used --instructions--\nModify the queryChain function to find people who like the food specified by the variable named foodToSearch Sort them by name, limit the results to two documents, and hide their age Chain find(), sort(), limit(), select(), and then exec() Pass the done(err, data) callback to exec() --hints--\nChaining query helpers should succeed\njs\n$ ajax({\nurl: code + '/_api/query-tools',\ntype: 'POST',\ncontentType: 'application/json',\ndata: JSON stringify([\n{ name: 'Pablo', age: 26, favoriteFoods: ['burrito', 'hot-dog'] },\n{ name: 'Bob', age: 23, favoriteFoods: ['pizza', 'nachos'] },\n{ name: 'Ashley', age: 32, favoriteFoods: ['steak', 'burrito'] },\n{ name: 'Mario', age: 51, favoriteFoods: ['burrito', 'prosciutto'] }\n])\n}) then(\n(data) => {\nassert isArray(data, 'the response should be an Array');\nassert equal(\ndata length,\n2,\n'the data array length is not what expected'\n);\nassert notProperty(\ndata[0],\n'age',\n'The returned first item has too many properties'\n);\nassert equal(\ndata[0] name,\n'Ashley',\n'The returned first item name is not what expected'\n);\nassert notProperty(\ndata[1],\n'age',\n'The returned second item has too many properties'\n);\nassert equal(\ndata[1] name,\n'Mario',\n'The returned second item name is not what expected'\n);\n},\n(xhr) => {\nthrow new Error(xhr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\chain-search-query-helpers-to-narrow-search-results.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "104bbfa43297fe052dc3baa4c8da11b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\chain-search-query-helpers-to-narrow-search-results.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "equal( data length, 2, 'the data array length is not what expected' ); assert notProperty( data[0], 'age', 'The returned first item has too many properties' ); assert equal( data[0] name, 'Ashley', 'The returned first item name is not what expected' ); assert notProperty( data[1], 'age', 'The returned second item has too many properties' ); assert equal( data[1] name, 'Mario', 'The returned second item name is not what expected' ); }, (xhr) => { throw new Error(xhrresponseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\chain-search-query-helpers-to-narrow-search-results.md",
      "source_type": "git_repo"
    },
    "token_count": 127,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "43623a89c9dda5fde21beb93e3acbd38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-a-model.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb6367417b2b2512c07\ntitle: Create a Model\nchallengeType: 2\nforumTopicId: 301535\ndashedName: create-a-model\n--description--\nCRUD Part I - CREATE\nFirst of all, we need a Schema Each schema maps to a MongoDB collection It defines the shape of the documents within that collection Schemas are building blocks for Models They can be nested to create complex models, but in this case, we'll keep things simple A model allows you to create instances of your objects, called documents In servers, the interactions with the database happen in handler functions These functions are executed when some event happens (e g someone hits an endpoint on your API) We'll follow the same approach in these exercises The done() function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating, or deleting It's following the Node convention, and should be called as done(null, data) on success, or done(err) on error Warning - When interacting with remote services, errors may occur ```js\n/ Example /\nconst someFunc = function(done) {\n// do something (risky) if (error) return done(error);\ndone(null, result);\n};\n```\n--instructions--\nCreate a person schema called personSchema with the following shape:\nA required name field of type String\nAn age field of type Number\nA favoriteFoods field of type [String]\nUse the Mongoose basic schema types If you want you can also add more fields, use simple validators like required or unique, and set default values See our Mongoose article Now, create a model from the personSchema and assign it to the existing variable Person --hints--\nCreating an instance from a mongoose schema should succeed\njs\n$ post(code + '/_api/mongoose-model', {\nname: 'Mike',\nage: 28,\nfavoriteFoods: ['pizza', 'cheese']\n}) then(\n(data) => {\nassert equal(data name, 'Mike', '\"model name\" is not what expected');\nassert equal(data age, '28', '\"model age\" is not what expected');\nassert isArray(\ndata favoriteFoods,\n'\"model favoriteFoods\" is not an Array'\n);\nassert include(\ndata favoriteFoods,\n'pizza',\n'\"model favoriteFoods\" does not include the expected items'\n);\nassert include(\ndata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2714,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-a-model.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d223aaba060ebb85285a73a34f51239f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-a-model.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--hints-- Creating an instance from a mongoose schema should succeed js $ post(code + '/_api/mongoose-model', { name: 'Mike', age: 28, favoriteFoods: ['pizza', 'cheese'] }) then( (data) => { assert equal(data name, 'Mike', '\"model name\" is not what expected'); assert equal(data age, '28', '\"model age\" is not what expected'); assert isArray( data favoriteFoods, '\"model favoriteFoods\" is not an Array' ); assert include( data favoriteFoods, 'pizza', '\"model favoriteFoods\" does not include the expected items' ); assert include( datafavoriteFoods,\n'cheese',\n'\"model favoriteFoods\" does not include the expected items'\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2714,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-a-model.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7904b58dd854bfb98d04311595c1d299",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-classic-updates-by-running-find-edit-then-save.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb8367417b2b2512c0e\ntitle: 'Perform Classic Updates by Running Find, Edit, then Save'\nchallengeType: 2\nforumTopicId: 301541\ndashedName: perform-classic-updates-by-running-find-edit-then-save\n--description--\nIn the good old days, this was what you needed to do if you wanted to edit a document, and be able to use it somehow (e.g. sending it back in a server response). Mongoose has a dedicated updating method: Model.update(). It is bound to the low-level mongo driver. It can bulk-edit many documents matching certain criteria, but it doesn’t send back the updated document, only a 'status' message. Furthermore, it makes model validations difficult, because it just directly calls the mongo driver.\n--instructions--\nModify the findEditThenSave function to find a person by _id (use any of the above methods) with the parameter personId as search key. Add \"hamburger\" to the list of the person's favoriteFoods (you can use Array.push()). Then - inside the find callback - save() the updated Person.\nNote: This may be tricky, if in your Schema, you declared favoriteFoods as an Array, without specifying the type (i.e. [String]). In that case, favoriteFoods defaults to Mixed type, and you have to manually mark it as edited using document.markModified('edited-field'). See our Mongoose article.\n--hints--\nFind-edit-update an item should succeed\njs\n$.post(code + '/_api/find-edit-save', {\nname: 'Poldo',\nage: 40,\nfavoriteFoods: ['spaghetti']\n}).then(\n(data) => {\nassert.equal(data.name, 'Poldo', 'item.name is not what is expected');\nassert.equal(data.age, 40, 'item.age is not what expected');\nassert.deepEqual(\ndata.favoriteFoods,\n['spaghetti', 'hamburger'],\n'item.favoriteFoods is not what expected'\n);\nassert.equal(data.__v, 1, 'The item should be previously edited');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2142,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-classic-updates-by-running-find-edit-then-save.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b869dc7a896d405f89eee29988da57e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\install-and-set-up-mongoose.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb6367417b2b2512c06\ntitle: Install and Set Up Mongoose\nchallengeType: 2\nforumTopicId: 301540\ndashedName: install-and-set-up-mongoose\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\nIn this challenge, you will set up a MongoDB Atlas database and import the required packages to connect to it.\nFollow this tutorial to set up a hosted database on MongoDB Atlas.\n--instructions--\nmongoose@^5.11.15 has been added to your project’s package.json file. First, require mongoose as mongoose in myApp.js. Next, create a .env file and add a MONGO_URI variable to it. Its value should be your MongoDB Atlas database URI. Be sure to surround the URI with single or double quotes, and remember that you can't use spaces around the = in environment variables. For example, MONGO_URI='VALUE'.\nWhen you are done, connect to the database by calling the connect method within your myApp.js file by using the following syntax:\njs\nmongoose.connect(<Your URI>, { useNewUrlParser: true, useUnifiedTopology: true });\n--hints--\n\"mongoose version ^5.11.15\" dependency should be in package.json\njs\n$.get(code + '/_api/file/package.json').then(\n(data) => {\nvar packJson = JSON.parse(data);\nassert.property(packJson.dependencies, 'mongoose');\nassert.match(\npackJson.dependencies.mongoose,\n/^\\^5\\.11\\.15/,\n'Wrong version of \"mongoose\". It should be ^5.11.15'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\n\"mongoose\" should be connected to a database\njs\n$.get(code + '/_api/is-mongoose-ok').then(\n(data) => {\nassert.isTrue(data.isMongooseOk, 'mongoose is not connected');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2299,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\install-and-set-up-mongoose.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8dac4a5cf94fa4cc7ec25c5ec584d329",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-new-updates-on-a-document-using-model.findoneandupdate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb8367417b2b2512c0f\ntitle: Perform New Updates on a Document Using model.findOneAndUpdate()\nchallengeType: 2\nforumTopicId: 301542\ndashedName: perform-new-updates-on-a-document-using-model-findoneandupdate\n--description--\nRecent versions of Mongoose have methods to simplify documents updating. Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the classic method is still useful in many situations. findByIdAndUpdate() can be used when searching by id.\n--instructions--\nModify the findAndUpdate function to find a person by Name and set the person's age to 20. Use the function parameter personName as the search key.\nNote: You should return the updated document. To do that, you need to pass the options document { new: true } as the 3rd argument to findOneAndUpdate(). By default, these methods return the unmodified object.\n--hints--\nfindOneAndUpdate an item should succeed\njs\n$.post(code + '/_api/find-one-update', {\nname: 'Dorian Gray',\nage: 35,\nfavoriteFoods: ['unknown']\n}).then(\n(data) => {\nassert.equal(data.name, 'Dorian Gray', 'item.name is not what expected');\nassert.equal(data.age, 20, 'item.age is not what expected');\nassert.deepEqual(\ndata.favoriteFoods,\n['unknown'],\n'item.favoriteFoods is not what expected'\n);\nassert.equal(\ndata.__v,\n0,\n'findOneAndUpdate does not increment version by design!'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-new-updates-on-a-document-using-model.findoneandupdate.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "727652d834eeee488f320397890ba853",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.find-to-search-your-database.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb7367417b2b2512c0b\ntitle: Use model.find() to Search Your Database\nchallengeType: 2\nforumTopicId: 301543\ndashedName: use-model-find-to-search-your-database\n--description--\nIn its simplest usage, Model.find() accepts a query document (a JSON object) as the first argument, then a callback. It returns an array of matches. It supports an extremely wide range of search options. Read more in the docs.\n--instructions--\nModify the findPeopleByName function to find all the people having a given name, using Model.find() -> [Person]\nUse the function argument personName as the search key.\n--hints--\nFind all items corresponding to a criteria should succeed\njs\n$.post(code + '/_api/find-all-by-name', {\nname: 'r@nd0mN4m3',\nage: 24,\nfavoriteFoods: ['pizza']\n}).then(\n(data) => {\nassert.isArray(data, 'the response should be an Array');\nassert.equal(\ndata[0].name,\n'r@nd0mN4m3',\n'item.name is not what expected'\n);\nassert.equal(data[0].__v, 0, 'The item should be not previously edited');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.find-to-search-your-database.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a57b2e14afdbc063ce194e992d00aa04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findbyid-to-search-your-database-by-id.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb7367417b2b2512c0d\ntitle: Use model.findById() to Search Your Database By _id\nchallengeType: 2\nforumTopicId: 301544\ndashedName: use-model-findbyid-to-search-your-database-by-id\n--description--\nWhen saving a document, MongoDB automatically adds the field _id, and set it to a unique alphanumeric key. Searching by _id is an extremely frequent operation, so Mongoose provides a dedicated method for it.\n--instructions--\nModify the findPersonById to find the only person having a given _id, using Model.findById() -> Person. Use the function argument personId as the search key.\n--hints--\nFind an item by Id should succeed\njs\n$.get(code + '/_api/find-by-id').then(\n(data) => {\nassert.equal(data.name, 'test', 'item.name is not what expected');\nassert.equal(data.age, 0, 'item.age is not what expected');\nassert.deepEqual(\ndata.favoriteFoods,\n['none'],\n'item.favoriteFoods is not what expected'\n);\nassert.equal(data.__v, 0, 'The item should be not previously edited');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findbyid-to-search-your-database-by-id.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b735251fded9ca3036a5b6fe4ad31cef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findone-to-return-a-single-matching-document-from-your-database.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fb7367417b2b2512c0c\ntitle: Use model.findOne() to Return a Single Matching Document from Your Database\nchallengeType: 2\nforumTopicId: 301545\ndashedName: use-model-findone-to-return-a-single-matching-document-from-your-database\n--description--\nModel.findOne() behaves like Model.find(), but it returns only one document (not an array), even if there are multiple items. It is especially useful when searching by properties that you have declared as unique.\n--instructions--\nModify the findOneByFood function to find just one person which has a certain food in the person's favorites, using Model.findOne() -> Person. Use the function argument food as search key.\n--hints--\nFind one item should succeed\njs\n$.post(code + '/_api/find-one-by-food', {\nname: 'Gary',\nage: 46,\nfavoriteFoods: ['chicken salad']\n}).then(\n(data) => {\nassert.equal(data.name, 'Gary', 'item.name is not what expected');\nassert.deepEqual(\ndata.favoriteFoods,\n['chicken salad'],\n'item.favoriteFoods is not what expected'\n);\nassert.equal(data.__v, 0, 'The item should be not previously edited');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findone-to-return-a-single-matching-document-from-your-database.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2e2ea16ee65550d59c1fbd50dfd12bc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-choropleth-map.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa6367417b2b2512bbf\ntitle: Visualize Data with a Choropleth Map\nchallengeType: 3\nforumTopicId: 301465\ndashedName: visualize-data-with-a-choropleth-map\n--description--\nObjective: Build an app that is functionally similar to this: https://choropleth-map freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library Required DOM elements are queried on the moment of each test If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects User Story #1: My choropleth should have a title with a corresponding id=\"title\" User Story #2: My choropleth should have a description element with a corresponding id=\"description\" User Story #3: My choropleth should have counties with a corresponding class=\"county\" that represent the data User Story #4: There should be at least 4 different fill colors used for the counties User Story #5: My counties should each have data-fips and data-education properties containing their corresponding fips and education values User Story #6: My choropleth should have a county for each provided data point User Story #7: The counties should have data-fips and data-education values that match the sample data User Story #8: My choropleth should have a legend with a corresponding id=\"legend\" User Story #9: There should be at least 4 different fill colors used for the legend User Story #10: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #11: My tooltip should have a data-education property that corresponds to the data-education of the active area Here are the datasets you will need to complete this project:\nUS Education Data:https://cdn freecodecamp org/testable-projects-fcc/data/choropleth_map/for_user_education json\nUS County Data:https://cdn freecodecamp org/testable-projects-fcc/data/choropleth_map/counties",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-choropleth-map.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0fb8cd85e6f5a5c5f851e089e5a4fb24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-choropleth-map.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "be at least 4 different fill colors used for the legend User Story #10: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #11: My tooltip should have a data-education property that corresponds to the data-education of the active area Here are the datasets you will need to complete this project: US Education Data:https://cdn freecodecamp org/testable-projects-fcc/data/choropleth_map/for_user_education json US County Data:https://cdn freecodecamp org/testable-projects-fcc/data/choropleth_map/countiesjson\nYou can build your project by using this CodePen template and clicking Save to create your own pen Or you can use this CDN link to run the tests in any environment you like: https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-choropleth-map.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "85bb675e760e58ce52d402a2c92ab4db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-bar-chart.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7168d8c242eddfaeb5bd13\ntitle: Visualize Data with a Bar Chart\nchallengeType: 3\nforumTopicId: 301464\ndashedName: visualize-data-with-a-bar-chart\n--description--\nObjective: Build an app that is functionally similar to this: https://bar-chart freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements You will find information about generating axes at https://d3js org/d3-axis Required DOM elements are queried on the moment of each test If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects User Story #1: My chart should have a title with a corresponding id=\"title\" User Story #2: My chart should have a g element x-axis with a corresponding id=\"x-axis\" User Story #3: My chart should have a g element y-axis with a corresponding id=\"y-axis\" User Story #4: Both axes should contain multiple tick labels, each with a corresponding class=\"tick\" User Story #5: My chart should have a rect element for each data point with a corresponding class=\"bar\" displaying the data User Story #6: Each bar should have the properties data-date and data-gdp containing date and GDP values User Story #7: The bar elements' data-date properties should match the order of the provided data User Story #8: The bar elements' data-gdp properties should match the order of the provided data User Story #9: Each bar element's height should accurately represent the data's corresponding GDP User Story #10: The data-date attribute and its corresponding bar element should align with the corresponding value on the x-axis User Story #11: The data-gdp attribute and its corresponding bar element should align with the corresponding value on the y-axis User Story #12: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-bar-chart.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "02711c5ed12104abafe589940d04544d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-bar-chart.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "#9: Each bar element's height should accurately represent the data's corresponding GDP User Story #10: The data-date attribute and its corresponding bar element should align with the corresponding value on the x-axis User Story #11: The data-gdp attribute and its corresponding bar element should align with the corresponding value on the y-axis User Story #12: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the areaUser Story #13: My tooltip should have a data-date property that corresponds to the data-date of the active area Here is the dataset you will need to complete this project: https://raw githubusercontent com/freeCodeCamp/ProjectReferenceData/master/GDP-data json\nYou can build your project by using this CodePen template and clicking Save to create your own pen Or you can use this CDN link to run the tests in any environment you like: https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js Once you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-bar-chart.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ca892fe9f8baa44241fd764ae1696f7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-heat-map.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7188d8c242eddfaeb5bd13\ntitle: Visualize Data with a Heat Map\nchallengeType: 3\nforumTopicId: 301466\ndashedName: visualize-data-with-a-heat-map\n--description--\nObjective: Build an app that is functionally similar to this: https://heat-map freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library Required DOM elements are queried on the moment of each test If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects User Story #1: My heat map should have a title with a corresponding id=\"title\" User Story #2: My heat map should have a description with a corresponding id=\"description\" User Story #3: My heat map should have an x-axis with a corresponding id=\"x-axis\" User Story #4: My heat map should have a y-axis with a corresponding id=\"y-axis\" User Story #5: My heat map should have rect elements with a class=\"cell\" that represent the data User Story #6: There should be at least 4 different fill colors used for the cells User Story #7: Each cell will have the properties data-month, data-year, data-temp containing their corresponding month, year, and temperature values User Story #8: The data-month, data-year of each cell should be within the range of the data User Story #9: My heat map should have cells that align with the corresponding month on the y-axis User Story #10: My heat map should have cells that align with the corresponding year on the x-axis User Story #11: My heat map should have multiple tick labels on the y-axis with the full month name User Story #12: My heat map should have multiple tick labels on the x-axis with the years between 1754 and 2015 User Story #13: My heat map should have a legend with a corresponding id=\"legend\" User Story #14: My legend should contain rect elements User Story #15: The rect elements in the legend should use at least 4 different fill colors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3316,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-heat-map.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8e77a878d54f6c08c3ebf7465bfcff9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-heat-map.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "heat map should have multiple tick labels on the y-axis with the full month name User Story #12: My heat map should have multiple tick labels on the x-axis with the years between 1754 and 2015 User Story #13: My heat map should have a legend with a corresponding id=\"legend\" User Story #14: My legend should contain rect elements User Story #15: The rect elements in the legend should use at least 4 different fill colorsUser Story #16: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #17: My tooltip should have a data-year property that corresponds to the data-year of the active area Here is the dataset you will need to complete this project: https://raw githubusercontent com/freeCodeCamp/ProjectReferenceData/master/global-temperature json\nYou can build your project by using this CodePen template and clicking Save to create your own pen Or you can use this CDN link to run the tests in any environment you like: https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3316,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-heat-map.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f60d570ab63d0438219fcd16702aeecf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-a-hover-effect-to-a-d3-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faa367417b2b2512bd4\ntitle: Add a Hover Effect to a D3 Element\nchallengeType: 6\nforumTopicId: 301469\ndashedName: add-a-hover-effect-to-a-d3-element\n--description--\nIt's possible to add effects that highlight a bar when the user hovers over it with the mouse. So far, the styling for the rectangles is applied with the built-in D3 and SVG methods, but you can use CSS as well.\nYou set the CSS class on the SVG elements with the attr() method. Then the :hover pseudo-class for your new class holds the style rules for any hover effects.\n--instructions--\nUse the attr() method to add a class of bar to all the rect elements. This changes the fill color of the bar to brown when you mouse over it.\n--hints--\nYour rect elements should have a class of bar.\njs\nassert.isTrue(document.querySelector('rect')?.classList.contains('bar'));\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-a-hover-effect-to-a-d3-element.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6885e397bd8f5ddbb977bfcec2d5803e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-a-tooltip-to-a-d3-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faa367417b2b2512bd6\ntitle: Add a Tooltip to a D3 Element\nchallengeType: 6\nforumTopicId: 301470\ndashedName: add-a-tooltip-to-a-d3-element\n--description--\nA tooltip shows more information about an item on a page when the user hovers over that item. There are several ways to add a tooltip to a visualization. This challenge uses the SVG title element.\ntitle pairs with the text() method to dynamically add data to the bars.\n--instructions--\nAppend a title element under each rect node. Then call the text() method with a callback function so the text displays the data value.\n--hints--\nYour code should have 9 title elements.\njs\nassert.lengthOf(document.querySelectorAll('title'), 9);\nThe first title element should have tooltip text of 12.\njs\nassert.strictEqual(document.querySelectorAll('title')[0]?.textContent, '12');\nThe second title element should have tooltip text of 31.\njs\nassert.strictEqual(document.querySelectorAll('title')[1]?.textContent, '31');\nThe third title element should have tooltip text of 22.\njs\nassert.strictEqual(document.querySelectorAll('title')[2]?.textContent, '22');\nThe fourth title element should have tooltip text of 17.\njs\nassert.strictEqual(document.querySelectorAll('title')[3]?.textContent, '17');\nThe fifth title element should have tooltip text of 25.\njs\nassert.strictEqual(document.querySelectorAll('title')[4]?.textContent, '25');\nThe sixth title element should have tooltip text of 18.\njs\nassert.strictEqual(document.querySelectorAll('title')[5]?.textContent, '18');\nThe seventh title element should have tooltip text of 29.\njs\nassert.strictEqual(document.querySelectorAll('title')[6]?.textContent, '29');\nThe eighth title element should have tooltip text of 14.\njs\nassert.strictEqual(document.querySelectorAll('title')[7]?.textContent, '14');\nThe ninth title element should have tooltip text of 9.\njs\nassert.strictEqual(document.querySelectorAll('title')[8]?.textContent, '9');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-a-tooltip-to-a-d3-element.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dc242df5d90d21ebe5091b73749ea101",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-treemap-diagram.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa6367417b2b2512bc0\ntitle: Visualize Data with a Treemap Diagram\nchallengeType: 3\nforumTopicId: 301468\ndashedName: visualize-data-with-a-treemap-diagram\n--description--\nObjective: Build an app that is functionally similar to this: https://treemap-diagram freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements You will find information about generating axes at https://d3js org/d3-axis Required DOM elements are queried on the moment of each test If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects User Story #1: My tree map should have a title with a corresponding id=\"title\" User Story #2: My tree map should have a description with a corresponding id=\"description\" User Story #3: My tree map should have rect elements with a corresponding class=\"tile\" that represent the data User Story #4: There should be at least 2 different fill colors used for the tiles User Story #5: Each tile should have the properties data-name, data-category, and data-value containing their corresponding name, category, and value User Story #6: The area of each tile should correspond to the data-value amount: tiles with a larger data-value should have a bigger area User Story #7: My tree map should have a legend with corresponding id=\"legend\" User Story #8: My legend should have rect elements with a corresponding class=\"legend-item\" User Story #9: The rect elements in the legend should use at least 2 different fill colors User Story #10: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #11: My tooltip should have a data-value property that corresponds to the data-value of the active area",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-treemap-diagram.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7b5e6525fa16738d68e7a2e436bcf865",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-treemap-diagram.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with corresponding id=\"legend\" User Story #8: My legend should have rect elements with a corresponding class=\"legend-item\" User Story #9: The rect elements in the legend should use at least 2 different fill colors User Story #10: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #11: My tooltip should have a data-value property that corresponds to the data-value of the active areaFor this project you can use any of the following datasets:\nKickstarter Pledges: https://cdn freecodecamp org/testable-projects-fcc/data/tree_map/kickstarter-funding-data json\nMovie Sales: https://cdn freecodecamp org/testable-projects-fcc/data/tree_map/movie-data json\nVideo Game Sales: https://cdn freecodecamp org/testable-projects-fcc/data/tree_map/video-game-sales-data json\nYou can build your project by using this CodePen template and clicking Save to create your own pen Or you can use this CDN link to run the tests in any environment you like: https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-treemap-diagram.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "30b5547df71e97c10187304fa679fcf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-scatterplot-graph.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7178d8c242eddfaeb5bd13\ntitle: Visualize Data with a Scatterplot Graph\nchallengeType: 3\nforumTopicId: 301467\ndashedName: visualize-data-with-a-scatterplot-graph\n--description--\nObjective: Build an app that is functionally similar to this: https://scatterplot-graph freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements You will find information about generating axes at https://d3js org/d3-axis Required DOM elements are queried on the moment of each test If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects User Story #1: I can see a title element that has a corresponding id=\"title\" User Story #2: I can see an x-axis that has a corresponding id=\"x-axis\" User Story #3: I can see a y-axis that has a corresponding id=\"y-axis\" User Story #4: I can see dots, that each have a class of dot, which represent the data being plotted User Story #5: Each dot should have the properties data-xvalue and data-yvalue containing their corresponding x and y values User Story #6: The data-xvalue and data-yvalue of each dot should be within the range of the actual data and in the correct data format For data-xvalue, integers (full years) or Date objects are acceptable for test evaluation For data-yvalue (minutes), use Date objects User Story #7: The data-xvalue and its corresponding dot should align with the corresponding point/value on the x-axis User Story #8: The data-yvalue and its corresponding dot should align with the corresponding point/value on the y-axis User Story #9: I can see multiple tick labels on the y-axis with %M:%S time format User Story #10: I can see multiple tick labels on the x-axis that show the year",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-scatterplot-graph.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d6d5f24b21dd628351b1a1248f1d4b58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-scatterplot-graph.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test evaluation For data-yvalue (minutes), use Date objects User Story #7: The data-xvalue and its corresponding dot should align with the corresponding point/value on the x-axis User Story #8: The data-yvalue and its corresponding dot should align with the corresponding point/value on the y-axis User Story #9: I can see multiple tick labels on the y-axis with %M:%S time format User Story #10: I can see multiple tick labels on the x-axis that show the yearUser Story #11: I can see that the range of the x-axis labels are within the range of the actual x-axis data User Story #12: I can see that the range of the y-axis labels are within the range of the actual y-axis data User Story #13: I can see a legend containing descriptive text that has id=\"legend\" User Story #14: I can mouse over an area and see a tooltip with a corresponding id=\"tooltip\" which displays more information about the area User Story #15: My tooltip should have a data-year property that corresponds to the data-xvalue of the active area Here is the dataset you will need to complete this project: https://raw githubusercontent com/freeCodeCamp/ProjectReferenceData/master/cyclist-data json\nYou can build your project by using this CodePen template and clicking Save to create your own pen Or you can use this CDN link to run the tests in any environment you like: https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-projects\\visualize-data-with-a-scatterplot-graph.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fd2140e4d702deed8f18b19fabe7243b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-classes-with-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa7367417b2b2512bc8\ntitle: Add Classes with D3\nchallengeType: 6\nforumTopicId: 301473\ndashedName: add-classes-with-d3\n--description--\nUsing a lot of inline styles on HTML elements gets hard to manage, even for smaller apps. It's easier to add a class to elements and style that class one time using CSS rules. D3 has the attr() method to add any HTML attribute to an element, including a class name.\nThe attr() method works the same way that style() does. It takes comma-separated values, and can use a callback function. Here's an example to add a class of container to a selection:\njs\nselection.attr('class', 'container');\nNote that the class parameter will remain the same whenever you need to add a class and only the container parameter will change.\n--instructions--\nAdd the attr() method to the code in the editor and put a class of bar on the div elements.\n--hints--\nYour div elements should have a class of bar.\njs\nassert.isTrue(document.querySelector('div')?.classList.contains('bar'));\nYour code should use the attr() method.\njs\nassert.match(code, /\\.attr/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-classes-with-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "235dfbddd45dcbf56ce95c44733a301c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-inline-styling-to-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa7367417b2b2512bc6\ntitle: Add Inline Styling to Elements\nchallengeType: 6\nforumTopicId: 301475\ndashedName: add-inline-styling-to-elements\n--description--\nD3 lets you add inline CSS styles on dynamic elements with the style() method.\nThe style() method takes a comma-separated key-value pair as an argument. Here's an example to set the selection's text color to blue:\njs\nselection.style('color', 'blue');\n--instructions--\nAdd the style() method to the code in the editor to make all the displayed text have a font-family of verdana.\n--hints--\nYour h2 elements should have a font-family of verdana.\njs\nconst headingTwo = document.querySelector('h2');\nassert.exists(headingTwo);\nconst fontFamily = window.getComputedStyle(headingTwo)['font-family'];\nassert.strictEqual(fontFamily, 'verdana');\nYour code should use the style() method.\njs\nassert.match(code, /\\.style/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-inline-styling-to-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "05ff4a916d8b46f8b62554d47c84b8cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-axes-to-a-visualization.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fad367417b2b2512bdf\ntitle: Add Axes to a Visualization\nchallengeType: 6\nforumTopicId: 301472\ndashedName: add-axes-to-a-visualization\n--description--\nAnother way to improve the scatter plot is to add an x-axis and a y-axis D3 has two methods, axisLeft() and axisBottom(), to render the y-axis and x-axis, respectively Here's an example to create the x-axis based on the xScale in the previous challenges:\njs\nconst xAxis = d3 axisBottom(xScale);\nThe next step is to render the axis on the SVG To do so, you can use a general SVG component, the g element The g stands for group Unlike rect, circle, and text, an axis is just a straight line when it's rendered Because it is a simple shape, using g works The last step is to apply a transform attribute to position the axis on the SVG in the right place Otherwise, the line would render along the border of the SVG and wouldn't be visible SVG supports different types of transforms, but positioning an axis needs translate When it's applied to the g element, it moves the whole group over and down by the given amounts Here's an example:\n```js\nconst xAxis = d3 axisBottom(xScale);\nsvg append('g') attr('transform', 'translate(0, ' + (h - padding) + ')') call(xAxis);\n```\nThe above code places the x-axis at the bottom of the SVG Then it's passed as an argument to the call() method The y-axis works in the same way, except the translate argument is in the form (x, 0) Because translate is a string in the attr() method above, you can use concatenation to include variable values for its arguments --instructions--\nThe scatter plot now has an x-axis Create a y-axis in a variable named yAxis using the axisLeft() method Then render the axis using a g element Make sure to use a transform attribute to translate the axis by the amount of padding units right, and 0 units down Remember to call() the axis --hints--\nYour code should use the axisLeft() method with yScale passed as the argument js\nassert match(code, /\\ axisLeft\\(yScale\\)/g);\nThe y-axis g element should have a transform attribute to translate the axis by (60, 0)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5303,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-axes-to-a-visualization.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c8a0d95c1a6d34d428195dc19152f980",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-axes-to-a-visualization.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "named yAxis using the axisLeft() method Then render the axis using a g element Make sure to use a transform attribute to translate the axis by the amount of padding units right, and 0 units down Remember to call() the axis --hints-- Your code should use the axisLeft() method with yScale passed as the argument js assert match(code, /\\ axisLeft\\(yScale\\)/g); The y-axis g element should have a transform attribute to translate the axis by (60, 0)js\nconst yAxis = document querySelectorAll('g')[10];\nassert match(yAxis getAttribute('transform'), /translate\\(60\\s*,\\s*0\\)/g);\nYour code should call the yAxis js\nassert match(code, /\\ call\\(\\s*yAxis\\s*\\)/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5303,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-axes-to-a-visualization.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4ea606c5c0e88c624c5d6bc269b39393",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-document-elements-with-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa6367417b2b2512bc2\ntitle: Add Document Elements with D3\nchallengeType: 6\nforumTopicId: 301474\ndashedName: add-document-elements-with-d3\n--description--\nD3 has several methods that let you add and change elements in your document The select() method selects one element from the document It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name Here's an example:\njs\nconst anchor = d3 select('a');\nThe above example finds the first anchor tag on the page and saves an HTML node for it in the variable anchor You can use the selection with other methods The d3 part of the example is a reference to the D3 object, which is how you access D3 methods Two other useful methods are append() and text() The append() method takes an argument for the element you want to add to the document It appends an HTML node to a selected item, and returns a handle to that node The text() method either sets the text of the selected node, or gets the current text To set the value, you pass a string as an argument inside the parentheses of the method Here's an example that selects an unordered list, appends a list item, and adds text:\njs\nd3 select('ul') append('li') text('Very important item');\nD3 allows you to chain several methods together with periods to perform a number of actions in a row --instructions--\nUse the select method to select the body tag in the document Then append an h1 tag to it, and add the text Learning D3 into the h1 element --hints--\nThe body should have one h1 element js\nconst body = document querySelector('body');\nconst headers = body querySelectorAll('h1');\nassert lengthOf(headers, 1);\nThe h1 element should have the text Learning D3 in it js\nassert strictEqual(document querySelector('h1') textContent, 'Learning D3');\nYour code should access the d3 object js\nassert match(code, /d3/g);\nYour code should use the select method js\nassert match(code, /\\ select/g);\nYour code should use the append method js\nassert match(code, /\\ append/g);\nYour code should use the text method js\nassert match(code, /\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-document-elements-with-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "da3f29ac6ebe4221c3675f34212eb213",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-document-elements-with-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "body = document querySelector('body'); const headers = body querySelectorAll('h1'); assert lengthOf(headers, 1); The h1 element should have the text Learning D3 in it js assert strictEqual(document querySelector('h1') textContent, 'Learning D3'); Your code should access the d3 object js assert match(code, /d3/g); Your code should use the select method js assert match(code, /\\ select/g); Your code should use the append method js assert match(code, /\\ append/g); Your code should use the text method js assert match(code, /\\text/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-document-elements-with-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d4c23046d1fa28c3dfcd97fe9d077ca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fab367417b2b2512bd8\ntitle: Add Attributes to the Circle Elements\nchallengeType: 6\nforumTopicId: 301471\ndashedName: add-attributes-to-the-circle-elements\n--description--\nThe last challenge created the circle elements for each point in the dataset, and appended them to the SVG But D3 needs more information about the position and size of each circle to display them correctly A circle in SVG has three main attributes The cx and cy attributes are the coordinates They tell D3 where to position the center of the shape on the SVG The radius (r attribute) gives the size of the circle Just like the rect y coordinate, the cy attribute for a circle is measured from the top of the SVG, not from the bottom All three attributes can use a callback function to set their values dynamically Remember that all methods chained after data(dataset) run once per item in dataset The d parameter in the callback function refers to the current item in dataset, which is an array for each point You use bracket notation, like d[0], to access the values in that array --instructions--\nAdd cx, cy, and r attributes to the circle elements The cx value should be the first number in the array for each item in dataset The cy value should be based off the second number in the array, but make sure to show the chart right-side-up and not inverted The r value should be 5 for all circles --hints--\nYour code should have 10 circle elements js\nassert lengthOf(document querySelectorAll('circle'), 10);\nThe first circle element should have a cx value of 34, a cy value of 422, and an r value of 5 js\nconst circle1 = document querySelector('circle');\nassert strictEqual(circle1 getAttribute('cx'), '34');\nassert strictEqual(circle1 getAttribute('cy'), '422');\nassert strictEqual(circle1 getAttribute('r'), '5');\nThe second circle element should have a cx value of 109, a cy value of 220, and an r value of 5 js\nconst circle2 = document querySelectorAll('circle')[1];\nassert strictEqual(circle2 getAttribute('cx'), '109');\nassert strictEqual(circle2 getAttribute('cy'), '220');\nassert strictEqual(circle2 getAttribute('r'), '5');\nThe third circle element should have a cx value of 310, a cy value of 380, and an r value of 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6199,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "58d7d832ac17860ba6eef8e6d1f7b617",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "document querySelector('circle'); assert strictEqual(circle1 getAttribute('cx'), '34'); assert strictEqual(circle1 getAttribute('cy'), '422'); assert strictEqual(circle1 getAttribute('r'), '5'); The second circle element should have a cx value of 109, a cy value of 220, and an r value of 5 js const circle2 = document querySelectorAll('circle')[1]; assert strictEqual(circle2 getAttribute('cx'), '109'); assert strictEqual(circle2 getAttribute('cy'), '220'); assert strictEqual(circle2 getAttribute('r'), '5'); The third circle element should have a cx value of 310, a cy value of 380, and an r value of 5js\nconst circle3 = document querySelectorAll('circle')[2];\nassert strictEqual(circle3 getAttribute('cx'), '310');\nassert strictEqual(circle3 getAttribute('cy'), '380');\nassert strictEqual(circle3 getAttribute('r'), '5');\nThe fourth circle element should have a cx value of 79, a cy value of 89, and an r value of 5 js\nconst circle4 = document querySelectorAll('circle')[3];\nassert strictEqual(circle4 getAttribute('cx'), '79');\nassert strictEqual(circle4 getAttribute('cy'), '89');\nassert strictEqual(circle4 getAttribute('r'), '5');\nThe fifth circle element should have a cx value of 420, a cy value of 280, and an r value of 5 js\nconst circle5 = document querySelectorAll('circle')[4];\nassert strictEqual(circle5 getAttribute('cx'), '420');\nassert strictEqual(circle5 getAttribute('cy'), '280');\nassert strictEqual(circle5 getAttribute('r'), '5');\nThe sixth circle element should have a cx value of 233, a cy value of 355, and an r value of 5 js\nconst circle6 = document querySelectorAll('circle')[5];\nassert strictEqual(circle6 getAttribute('cx'), '233');\nassert strictEqual(circle6 getAttribute('cy'), '355');\nassert strictEqual(circle6 getAttribute('r'), '5');\nThe seventh circle element should have a cx value of 333, a cy value of 404, and an r value of 5 js\nconst circle7 = document querySelectorAll('circle')[6];\nassert strictEqual(circle7 getAttribute('cx'), '333');\nassert strictEqual(circle7 getAttribute('cy'), '404');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6199,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 518,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4e131c94ce032b74a5529a51e4b72847",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sixth circle element should have a cx value of 233, a cy value of 355, and an r value of 5 js const circle6 = document querySelectorAll('circle')[5]; assert strictEqual(circle6 getAttribute('cx'), '233'); assert strictEqual(circle6 getAttribute('cy'), '355'); assert strictEqual(circle6 getAttribute('r'), '5'); The seventh circle element should have a cx value of 333, a cy value of 404, and an r value of 5 js const circle7 = document querySelectorAll('circle')[6]; assert strictEqual(circle7 getAttribute('cx'), '333'); assert strictEqual(circle7 getAttribute('cy'), '404'); assertstrictEqual(circle7 getAttribute('r'), '5');\nThe eighth circle element should have a cx value of 222, a cy value of 167, and an r value of 5 js\nconst circle8 = document querySelectorAll('circle')[7];\nassert strictEqual(circle8 getAttribute('cx'), '222');\nassert strictEqual(circle8 getAttribute('cy'), '167');\nassert strictEqual(circle8 getAttribute('r'), '5');\nThe ninth circle element should have a cx value of 78, a cy value of 180, and an r value of 5 js\nconst circle9 = document querySelectorAll('circle')[8];\nassert strictEqual(circle9 getAttribute('cx'), '78');\nassert strictEqual(circle9 getAttribute('cy'), '180');\nassert strictEqual(circle9 getAttribute('r'), '5');\nThe tenth circle element should have a cx value of 21, a cy value of 377, and an r value of 5 js\nconst circle10 = document querySelectorAll('circle')[9];\nassert strictEqual(circle10 getAttribute('cx'), '21');\nassert strictEqual(circle10 getAttribute('cy'), '377');\nassert strictEqual(circle10 getAttribute('r'), '5');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6199,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-attributes-to-the-circle-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "963c42f95f303d281341acd1b910e536",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-color-of-an-svg-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa9367417b2b2512bd1\ntitle: Change the Color of an SVG Element\nchallengeType: 6\nforumTopicId: 301480\ndashedName: change-the-color-of-an-svg-element\n--description--\nThe bars are in the right position, but they are all the same black color. SVG has a way to change the color of the bars.\nIn SVG, a rect shape is colored with the fill attribute. It supports hex codes, color names, and rgb values, as well as more complex options like gradients and transparency.\n--instructions--\nAdd an attr() method to set the fill of all the bars to the color navy.\n--hints--\nThe bars should all have a fill color of navy.\njs\nconst rect = document.querySelector('rect');\nassert.exists(rect);\nconst fill = window.getComputedStyle(rect)['fill'];\nassert.strictEqual(fill, 'rgb(0, 0, 128)');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1955,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-color-of-an-svg-element.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "86c55ab071bd9c930f627006b9a718bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-d3-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faa367417b2b2512bd2\ntitle: Add Labels to D3 Elements\nchallengeType: 6\nforumTopicId: 301476\ndashedName: add-labels-to-d3-elements\n--description--\nD3 lets you label a graph element, such as a bar, using the SVG text element Like the rect element, a text element needs to have x and y attributes, to place it on the SVG It also needs to access the data to display those values D3 gives you a high level of control over how you label your bars --instructions--\nThe code in the editor already binds the data to each new text element First, append text nodes to the svg Next, add attributes for the x and y coordinates They should be calculated the same way as the rect ones, except the y value for the text should make the label sit 3 units higher than the bar Finally, use the D3 text() method to set the label equal to the data point value Note: For the label to sit higher than the bar, decide if the y value for the text should be 3 greater or 3 less than the y value for the bar --hints--\nThe first text element should have a label of 12 and a y value of 61 js\nassert strictEqual(document querySelectorAll('text')[0] textContent, '12');\nassert strictEqual(\ndocument querySelectorAll('text')[0] getAttribute('y'),\n'61'\n);\nThe second text element should have a label of 31 and a y value of 4 js\nassert strictEqual(document querySelectorAll('text')[1] textContent, '31');\nassert strictEqual(\ndocument querySelectorAll('text')[1] getAttribute('y'),\n'4'\n);\nThe third text element should have a label of 22 and a y value of 31 js\nassert strictEqual(document querySelectorAll('text')[2] textContent, '22');\nassert strictEqual(\ndocument querySelectorAll('text')[2] getAttribute('y'),\n'31'\n);\nThe fourth text element should have a label of 17 and a y value of 46 js\nassert strictEqual(document querySelectorAll('text')[3] textContent, '17');\nassert strictEqual(\ndocument querySelectorAll('text')[3] getAttribute('y'),\n'46'\n);\nThe fifth text element should have a label of 25 and a y value of 22 js\nassert strictEqual(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-d3-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "75672268d5bf80fddd823e464a1527df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-d3-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "third text element should have a label of 22 and a y value of 31 js assert strictEqual(document querySelectorAll('text')[2] textContent, '22'); assert strictEqual( document querySelectorAll('text')[2] getAttribute('y'), '31' ); The fourth text element should have a label of 17 and a y value of 46 js assert strictEqual(document querySelectorAll('text')[3] textContent, '17'); assert strictEqual( document querySelectorAll('text')[3] getAttribute('y'), '46' ); The fifth text element should have a label of 25 and a y value of 22 js assert strictEqual(documentquerySelectorAll('text')[4] textContent, '25');\nassert strictEqual(\ndocument querySelectorAll('text')[4] getAttribute('y'),\n'22'\n);\nThe sixth text element should have a label of 18 and a y value of 43 js\nassert strictEqual(document querySelectorAll('text')[5] textContent, '18');\nassert strictEqual(\ndocument querySelectorAll('text')[5] getAttribute('y'),\n'43'\n);\nThe seventh text element should have a label of 29 and a y value of 10 js\nassert strictEqual(document querySelectorAll('text')[6] textContent, '29');\nassert strictEqual(\ndocument querySelectorAll('text')[6] getAttribute('y'),\n'10'\n);\nThe eighth text element should have a label of 14 and a y value of 55 js\nassert strictEqual(document querySelectorAll('text')[7] textContent, '14');\nassert strictEqual(\ndocument querySelectorAll('text')[7] getAttribute('y'),\n'55'\n);\nThe ninth text element should have a label of 9 and a y value of 70 js\nassert strictEqual(document querySelectorAll('text')[8] textContent, '9');\nassert strictEqual(\ndocument querySelectorAll('text')[8] getAttribute('y'),\n'70'\n);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-d3-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e88de79a499d7b269f6fe8e014d6c4f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-bar-for-each-data-point-in-the-set.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa8367417b2b2512bcd\ntitle: Create a Bar for Each Data Point in the Set\nchallengeType: 6\nforumTopicId: 301482\ndashedName: create-a-bar-for-each-data-point-in-the-set\n--description--\nThe last challenge added only one rectangle to the svg element to represent a bar. Here, you'll combine what you've learned so far about data(), enter(), and SVG shapes to create and append a rectangle for each data point in dataset.\nA previous challenge showed the format for how to create and append a div for each item in dataset:\njs\nd3.select('body')?.selectAll('div').data(dataset).enter().append('div');\nThere are a few differences working with rect elements instead of div elements. The rect elements must be appended to an svg element, not directly to the body. Also, you need to tell D3 where to place each rect within the svg area. The bar placement will be covered in the next challenge.\n--instructions--\nUse the data(), enter(), and append() methods to create and append a rect for each item in dataset. The bars should display all on top of each other; this will be fixed in the next challenge.\n--hints--\nYour document should have 9 rect elements.\njs\nassert.lengthOf(document.querySelectorAll('rect'), 9);\nYour code should use the data() method.\njs\nassert.match(code, /\\.data/g);\nYour code should use the enter() method.\njs\nassert.match(code, /\\.enter/g);\nYour code should use the append() method.\njs\nassert.match(code, /\\.append/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-bar-for-each-data-point-in-the-set.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b81c071ec69a8c561326f37317802536",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-linear-scale-with-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fab367417b2b2512bda\ntitle: Create a Linear Scale with D3\nchallengeType: 6\nforumTopicId: 301483\ndashedName: create-a-linear-scale-with-d3\n--description--\nThe bar and scatter plot charts both plotted data directly onto the SVG. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.\nIn D3, there are scales to help plot data. scales are functions that tell the program how to map a set of raw data points onto the pixels of the SVG.\nFor example, say you have a 100x500-sized SVG and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.\nIt's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the x and y values fit your SVG width and height.\nD3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method scaleLinear():\njs\nconst scale = d3.scaleLinear();\nBy default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.\n--instructions--\nChange the scale variable to create a linear scale. Then set the output variable to the scale called with an input argument of 50.\n--hints--\nThe text in the h2 should be 50.\njs\nassert.strictEqual(document.querySelector('h2')?.textContent, '50');\nYour code should use the scaleLinear() method.\njs\nassert.match(code, /\\.scaleLinear/g);\nThe output variable should call scale with an argument of 50.\njs\nassert.strictEqual(output, 50);\nassert.match(code, /scale\\(\\s*50\\s*\\)/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2401,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-linear-scale-with-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a828e0548c0507bcecd986e90a9b04de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-styles-based-on-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa7367417b2b2512bc7\ntitle: Change Styles Based on Data\nchallengeType: 6\nforumTopicId: 301479\ndashedName: change-styles-based-on-data\n--description--\nD3 is about visualization and presentation of data It's likely you'll want to change the styling of elements based on the data For example, you may want to color a data point blue if it has a value less than 20, and red otherwise You can use a callback function in the style() method and include the conditional logic The callback function uses the d parameter to represent the data point:\njs\nselection style('color', d => {});\nThe style() method is not limited to setting the color - it can be used with other CSS properties as well --instructions--\nAdd the style() method to the code in the editor to set the color of the h2 elements conditionally Write the callback function so if the data value is less than 20, it returns red, otherwise it returns green Note: You can use if-else logic, or the ternary operator --hints--\nThe first h2 should have a color of red js\nconst headingTwoFirst = document querySelector('h2');\nassert exists(headingTwoFirst);\nconst color = window getComputedStyle(headingTwoFirst)['color'];\nassert strictEqual(color, 'rgb(255, 0, 0)');\nThe second h2 should have a color of green js\nconst headingTwoSecond = document querySelectorAll('h2')[1];\nassert exists(headingTwoSecond);\nconst color = window getComputedStyle(headingTwoSecond)['color'];\nassert strictEqual(color, 'rgb(0, 128, 0)');\nThe third h2 should have a color of green js\nconst headingTwoThird = document querySelectorAll('h2')[2];\nassert exists(headingTwoThird);\nconst color = window getComputedStyle(headingTwoThird)['color'];\nassert strictEqual(color, 'rgb(0, 128, 0)');\nThe fourth h2 should have a color of red js\nconst headingTwoFourth = document querySelectorAll('h2')[3];\nassert exists(headingTwoFourth);\nconst color = window getComputedStyle(headingTwoFourth)['color'];\nassert strictEqual(color, 'rgb(255, 0, 0)');\nThe fifth h2 should have a color of green js\nconst headingTwoFifth = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-styles-based-on-data.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "61687af46856eafda826b1da5b94a4bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-styles-based-on-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= window getComputedStyle(headingTwoSecond)['color']; assert strictEqual(color, 'rgb(0, 128, 0)'); The third h2 should have a color of green js const headingTwoThird = document querySelectorAll('h2')[2]; assert exists(headingTwoThird); const color = window getComputedStyle(headingTwoThird)['color']; assert strictEqual(color, 'rgb(0, 128, 0)'); The fourth h2 should have a color of red js const headingTwoFourth = document querySelectorAll('h2')[3]; assert exists(headingTwoFourth); const color = window getComputedStyle(headingTwoFourth)['color']; assert strictEqual(color, 'rgb(255, 0, 0)'); The fifth h2 should have a color of green js const headingTwoFifth = documentquerySelectorAll('h2')[4];\nassert exists(headingTwoFifth);\nconst color = window getComputedStyle(headingTwoFifth)['color'];\nassert strictEqual(color, 'rgb(0, 128, 0)');\nThe sixth h2 should have a color of red js\nconst headingTwoSixth = document querySelectorAll('h2')[5];\nassert exists(headingTwoSixth);\nconst color = window getComputedStyle(headingTwoSixth)['color'];\nassert strictEqual(color, 'rgb(255, 0, 0)');\nThe seventh h2 should have a color of green js\nconst headingTwoSeventh = document querySelectorAll('h2')[6];\nassert exists(headingTwoSeventh);\nconst color = window getComputedStyle(headingTwoSeventh)['color'];\nassert strictEqual(color, 'rgb(0, 128, 0)');\nThe eighth h2 should have a color of red js\nconst headingTwoEighth = document querySelectorAll('h2')[7];\nassert exists(headingTwoEighth);\nconst color = window getComputedStyle(headingTwoEighth)['color'];\nassert strictEqual(color, 'rgb(255, 0, 0)');\nThe ninth h2 should have a color of red js\nconst headingTwoNinth = document querySelectorAll('h2')[8];\nassert exists(headingTwoNinth);\nconst color = window getComputedStyle(headingTwoNinth)['color'];\nassert strictEqual(color, 'rgb(255, 0, 0)');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-styles-based-on-data.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1f1bd6b39aea4bab250e78f5cf0e2bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fab367417b2b2512bd9\ntitle: Add Labels to Scatter Plot Circles\nchallengeType: 6\nforumTopicId: 301477\ndashedName: add-labels-to-scatter-plot-circles\n--description--\nYou can add text to create labels for the points in a scatter plot The goal is to display the comma-separated values for the first (x) and second (y) fields of each item in dataset The text nodes need x and y attributes to position it on the SVG In this challenge, the y value (which determines height) can use the same value that the circle uses for its cy attribute The x value can be slightly larger than the cx value of the circle, so the label is visible This will push the label to the right of the plotted point --instructions--\nLabel each point on the scatter plot using the text elements The text of the label should be the two values separated by a comma and a space For example, the label for the first point is 34, 78 Set the x attribute so it's 5 units more than the value you used for the cx attribute on the circle Set the y attribute the same way that's used for the cy value on the circle --hints--\nYour code should have 10 text elements js\nassert lengthOf(document querySelectorAll('text'), 10);\nThe first label should have text of 34, 78, an x value of 39, and a y value of 422 js\nconst labelOne = document querySelector('text');\nassert strictEqual(labelOne textContent, '34, 78');\nassert strictEqual(labelOne getAttribute('x'), '39');\nassert strictEqual(labelOne getAttribute('y'), '422');\nThe second label should have text of 109, 280, an x value of 114, and a y value of 220 js\nconst labelTwo = document querySelectorAll('text')[1];\nassert strictEqual(labelTwo textContent, '109, 280');\nassert strictEqual(labelTwo getAttribute('x'), '114');\nassert strictEqual(labelTwo getAttribute('y'), '220');\nThe third label should have text of 310, 120, an x value of 315, and a y value of 380 js\nconst labelThree = document querySelectorAll('text')[2];\nassert strictEqual(labelThree textContent, '310, 120');\nassert strictEqual(labelThree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6170,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ec8a8dd3f592fca8ac46b2047c754db0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert strictEqual(labelOne getAttribute('y'), '422'); The second label should have text of 109, 280, an x value of 114, and a y value of 220 js const labelTwo = document querySelectorAll('text')[1]; assert strictEqual(labelTwo textContent, '109, 280'); assert strictEqual(labelTwo getAttribute('x'), '114'); assert strictEqual(labelTwo getAttribute('y'), '220'); The third label should have text of 310, 120, an x value of 315, and a y value of 380 js const labelThree = document querySelectorAll('text')[2]; assert strictEqual(labelThree textContent, '310, 120'); assert strictEqual(labelThreegetAttribute('x'), '315');\nassert strictEqual(labelThree getAttribute('y'), '380');\nThe fourth label should have text of 79, 411, an x value of 84, and a y value of 89 js\nconst labelFour = document querySelectorAll('text')[3];\nassert strictEqual(labelFour textContent, '79, 411');\nassert strictEqual(labelFour getAttribute('x'), '84');\nassert strictEqual(labelFour getAttribute('y'), '89');\nThe fifth label should have text of 420, 220, an x value of 425, and a y value of 280 js\nconst labelFive = document querySelectorAll('text')[4];\nassert strictEqual(labelFive textContent, '420, 220');\nassert strictEqual(labelFive getAttribute('x'), '425');\nassert strictEqual(labelFive getAttribute('y'), '280');\nThe sixth label should have text of 233, 145, an x value of 238, and a y value of 355 js\nconst labelSix = document querySelectorAll('text')[5];\nassert strictEqual(labelSix textContent, '233, 145');\nassert strictEqual(labelSix getAttribute('x'), '238');\nassert strictEqual(labelSix getAttribute('y'), '355');\nThe seventh label should have text of 333, 96, an x value of 338, and a y value of 404 js\nconst labelSeven = document querySelectorAll('text')[6];\nassert strictEqual(labelSeven textContent, '333, 96');\nassert strictEqual(labelSeven getAttribute('x'), '338');\nassert strictEqual(labelSeven",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6170,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "28ebcbd9a9e0d0cfebe884ed27611709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The sixth label should have text of 233, 145, an x value of 238, and a y value of 355 js const labelSix = document querySelectorAll('text')[5]; assert strictEqual(labelSix textContent, '233, 145'); assert strictEqual(labelSix getAttribute('x'), '238'); assert strictEqual(labelSix getAttribute('y'), '355'); The seventh label should have text of 333, 96, an x value of 338, and a y value of 404 js const labelSeven = document querySelectorAll('text')[6]; assert strictEqual(labelSeven textContent, '333, 96'); assert strictEqual(labelSeven getAttribute('x'), '338'); assert strictEqual(labelSevengetAttribute('y'), '404');\nThe eighth label should have text of 222, 333, an x value of 227, and a y value of 167 js\nconst labelEight = document querySelectorAll('text')[7];\nassert strictEqual(labelEight textContent, '222, 333');\nassert strictEqual(labelEight getAttribute('x'), '227');\nassert strictEqual(labelEight getAttribute('y'), '167');\nThe ninth label should have text of 78, 320, an x value of 83, and a y value of 180 js\nconst labelNine = document querySelectorAll('text')[8];\nassert strictEqual(labelNine textContent, '78, 320');\nassert strictEqual(labelNine getAttribute('x'), '83');\nassert strictEqual(labelNine getAttribute('y'), '180');\nThe tenth label should have text of 21, 123, an x value of 26, and a y value of 377 js\nconst labelTen = document querySelectorAll('text')[9];\nassert strictEqual(labelTen textContent, '21, 123');\nassert strictEqual(labelTen getAttribute('x'), '26');\nassert strictEqual(labelTen getAttribute('y'), '377');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6170,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\add-labels-to-scatter-plot-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2da286873fad0decb8ff90c8fe41bb1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-scatterplot-with-svg-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fab367417b2b2512bd7\ntitle: Create a Scatterplot with SVG Circles\nchallengeType: 6\nforumTopicId: 301484\ndashedName: create-a-scatterplot-with-svg-circles\n--description--\nA scatter plot is another type of visualization. It usually uses circles to map data points, which have two values each. These values tie to the x and y axes, and are used to position the circle in the visualization.\nSVG has a circle tag to create the circle shape. It works a lot like the rect elements you used for the bar chart.\n--instructions--\nUse the data(), enter(), and append() methods to bind dataset to new circle elements that are appended to the SVG.\nNote: The circles won't be visible because we haven't set their attributes yet. We'll do that in the next challenge.\n--hints--\nYour code should have 10 circle elements.\njs\nassert.lengthOf(document.querySelectorAll('circle'), 10);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1963,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\create-a-scatterplot-with-svg-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7df0e5c7d46e18ce9be1ec25d0de00cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-change-the-height-of-each-bar.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa9367417b2b2512bcf\ntitle: Dynamically Change the Height of Each Bar\nchallengeType: 6\nforumTopicId: 301486\ndashedName: dynamically-change-the-height-of-each-bar\n--description--\nThe height of each bar can be set to the value of the data point in the array, similar to how the x value was set dynamically.\njs\nselection.attr('property', (d, i) => {});\nHere d would be the data point value, and i would be the index of the data point in the array.\n--instructions--\nChange the callback function for the height attribute to return the data value times 3.\nNote: Remember that multiplying all data points by the same constant scales the data (like zooming in). It helps to see the differences between bar values in this example.\n--hints--\nThe first rect should have a height of 36.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[0]?.getAttribute('height'),\n'36'\n);\nThe second rect should have a height of 93.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[1]?.getAttribute('height'),\n'93'\n);\nThe third rect should have a height of 66.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[2]?.getAttribute('height'),\n'66'\n);\nThe fourth rect should have a height of 51.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[3]?.getAttribute('height'),\n'51'\n);\nThe fifth rect should have a height of 75.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[4]?.getAttribute('height'),\n'75'\n);\nThe sixth rect should have a height of 54.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[5]?.getAttribute('height'),\n'54'\n);\nThe seventh rect should have a height of 87.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[6]?.getAttribute('height'),\n'87'\n);\nThe eighth rect should have a height of 42.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[7]?.getAttribute('height'),\n'42'\n);\nThe ninth rect should have a height of 27.\njs\nassert.strictEqual(\ndocument.querySelectorAll('rect')[8]?.getAttribute('height'),\n'27'\n);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-change-the-height-of-each-bar.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e0cd9cde2c3f7ae150c594ba335b8545",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa8367417b2b2512bca\ntitle: Change the Presentation of a Bar Chart\nchallengeType: 6\nforumTopicId: 301481\ndashedName: change-the-presentation-of-a-bar-chart\n--description--\nThe last challenge created a bar chart, but there are a couple of formatting changes that could improve it:\nAdd space between each bar to visually separate them, which is done by adding a margin to the CSS for the bar class\nIncrease the height of the bars to better show the difference in values, which is done by multiplying the value by a number to scale the height\n--instructions--\nFirst, add a margin of 2px to the bar class in the style tag Next, change the callback function in the style() method so it returns a value 10 times the original data value (plus the px) Note: Multiplying each data point by the same constant only alters the scale It's like zooming in, and it doesn't change the meaning of the underlying data --hints--\nThe first div should have a height of 120 pixels and a margin of 2 pixels js\nconst firstDiv = document querySelector('div');\nassert exists(firstDiv);\nconst height = window getComputedStyle(firstDiv)['height'];\nconst margin = window getComputedStyle(firstDiv)['margin-right'];\nassert strictEqual(height, '120px');\nassert strictEqual(margin, '2px');\nThe second div should have a height of 310 pixels and a margin of 2 pixels js\nconst secondDiv = document querySelectorAll('div')[1];\nassert exists(secondDiv);\nconst height = window getComputedStyle(secondDiv)['height'];\nconst margin = window getComputedStyle(secondDiv)['margin-right'];\nassert strictEqual(height, '310px');\nassert strictEqual(margin, '2px');\nThe third div should have a height of 220 pixels and a margin of 2 pixels js\nconst thirdDiv = document querySelectorAll('div')[2];\nassert exists(thirdDiv);\nconst height = window getComputedStyle(thirdDiv)['height'];\nconst margin = window getComputedStyle(thirdDiv)['margin-right'];\nassert strictEqual(height, '220px');\nassert strictEqual(margin, '2px');\nThe fourth div should have a height of 170 pixels and a margin of 2 pixels js\nconst fourthDiv = document querySelectorAll('div')[3];\nassert exists(fourthDiv);\nconst height = window",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0178da93541df962bdb2ad5367160bad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "window getComputedStyle(secondDiv)['margin-right']; assert strictEqual(height, '310px'); assert strictEqual(margin, '2px'); The third div should have a height of 220 pixels and a margin of 2 pixels js const thirdDiv = document querySelectorAll('div')[2]; assert exists(thirdDiv); const height = window getComputedStyle(thirdDiv)['height']; const margin = window getComputedStyle(thirdDiv)['margin-right']; assert strictEqual(height, '220px'); assert strictEqual(margin, '2px'); The fourth div should have a height of 170 pixels and a margin of 2 pixels js const fourthDiv = document querySelectorAll('div')[3]; assert exists(fourthDiv); const height = windowgetComputedStyle(fourthDiv)['height'];\nconst margin = window getComputedStyle(fourthDiv)['margin-right'];\nassert strictEqual(height, '170px');\nassert strictEqual(margin, '2px');\nThe fifth div should have a height of 250 pixels and a margin of 2 pixels js\nconst fifthDiv = document querySelectorAll('div')[4];\nassert exists(fifthDiv);\nconst height = window getComputedStyle(fifthDiv)['height'];\nconst margin = window getComputedStyle(fifthDiv)['margin-right'];\nassert strictEqual(height, '250px');\nassert strictEqual(margin, '2px');\nThe sixth div should have a height of 180 pixels and a margin of 2 pixels js\nconst sixthDiv = document querySelectorAll('div')[5];\nassert exists(sixthDiv);\nconst height = window getComputedStyle(sixthDiv)['height'];\nconst margin = window getComputedStyle(sixthDiv)['margin-right'];\nassert strictEqual(height, '180px');\nassert strictEqual(margin, '2px');\nThe seventh div should have a height of 290 pixels and a margin of 2 pixels js\nconst seventhDiv = document querySelectorAll('div')[6];\nassert exists(seventhDiv);\nconst height = window getComputedStyle(seventhDiv)['height'];\nconst margin = window getComputedStyle(seventhDiv)['margin-right'];\nassert strictEqual(height, '290px');\nassert strictEqual(margin, '2px');\nThe eighth div should have a height of 140 pixels and a margin of 2 pixels js\nconst eighthDiv = document querySelectorAll('div')[7];\nassert exists(eighthDiv);\nconst height = window getComputedStyle(eighthDiv)['height'];\nconst margin = window",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "668756a1a091900929b1d6eefb9dbd1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert strictEqual(margin, '2px'); The seventh div should have a height of 290 pixels and a margin of 2 pixels js const seventhDiv = document querySelectorAll('div')[6]; assert exists(seventhDiv); const height = window getComputedStyle(seventhDiv)['height']; const margin = window getComputedStyle(seventhDiv)['margin-right']; assert strictEqual(height, '290px'); assert strictEqual(margin, '2px'); The eighth div should have a height of 140 pixels and a margin of 2 pixels js const eighthDiv = document querySelectorAll('div')[7]; assert exists(eighthDiv); const height = window getComputedStyle(eighthDiv)['height']; const margin = windowgetComputedStyle(eighthDiv)['margin-right'];\nassert strictEqual(height, '140px');\nassert strictEqual(margin, '2px');\nThe ninth div should have a height of 90 pixels and a margin of 2 pixels js\nconst ninthDiv = document querySelectorAll('div')[8];\nassert exists(ninthDiv);\nconst height = window getComputedStyle(ninthDiv)['height'];\nconst margin = window getComputedStyle(ninthDiv)['margin-right'];\nassert strictEqual(height, '90px');\nassert strictEqual(margin, '2px');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\change-the-presentation-of-a-bar-chart.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "90b951d9e3ddb303cd2328440d3fc11b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\display-shapes-with-svg.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa8367417b2b2512bcc\ntitle: Display Shapes with SVG\nchallengeType: 6\nforumTopicId: 301485\ndashedName: display-shapes-with-svg\n--description--\nThe last challenge created an svg element with a given width and height, which was visible because it had a background-color applied to it in the style tag The code made space for the given width and height The next step is to create a shape to put in the svg area There are a number of supported shapes in SVG, such as rectangles and circles They are used to display data For example, a rectangle (<rect>) SVG shape could create a bar in a bar chart When you place a shape into the svg area, you can specify where it goes with x and y coordinates The origin point of (0, 0) is in the upper-left corner Positive values for x push the shape to the right, and positive values for y push the shape down from the origin point To place a shape in the middle of the 500 (width) x 100 (height) svg from last challenge, the x coordinate would be 250 and the y coordinate would be 50 An SVG rect has four attributes There are the x and y coordinates for where it is placed in the svg area It also has a height and width to specify the size --instructions--\nAdd a rect shape to the svg using append(), and give it a width attribute of 25 and height attribute of 100 Also, give the rect x and y attributes each set to 0 --hints--\nYour document should have 1 rect element js\nassert lengthOf(document querySelectorAll('rect'), 1);\nThe rect element should have a width attribute set to 25 js\nassert strictEqual(document querySelector('rect') getAttribute('width'), '25');\nThe rect element should have a height attribute set to 100 js\nassert strictEqual(\ndocument querySelector('rect') getAttribute('height'),\n'100'\n);\nThe rect element should have an x attribute set to 0 js\nassert strictEqual(document querySelector('rect') getAttribute('x'), '0');\nThe rect element should have a y attribute set to 0 js\nassert strictEqual(document querySelector('rect') getAttribute('y'), '0');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\display-shapes-with-svg.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f9adac944a15ddec1c16be408c6b865",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\learn-about-svg-in-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa8367417b2b2512bcb\ntitle: Learn About SVG in D3\nchallengeType: 6\nforumTopicId: 301489\ndashedName: learn-about-svg-in-d3\n--description--\nSVG stands for Scalable Vector Graphics.\nHere \"scalable\" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.\nSVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML svg tag.\nCSS can be scalable when styles use relative units (such as vh, vw, or percentages), but using SVG is more flexible to build data visualizations.\n--instructions--\nAdd an svg node to the body using append(). Give it a width attribute set to the provided w constant and a height attribute set to the provided h constant using the attr() or style() methods for each. You'll see it in the output because there's a background-color of pink applied to it in the style tag.\nNote: When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.\n--hints--\nYour document should have 1 svg element.\njs\nassert.lengthOf(document.querySelectorAll('svg'), 1);\nThe svg element should have a width attribute set to 500 or styled to have a width of 500px.\njs\nconst svg = document.querySelector('svg');\nassert.exists(svg);\nconst width = window.getComputedStyle(svg)['width'];\nassert.isTrue(svg?.getAttribute('width') === '500' || width === '500px');\nThe svg element should have a height attribute set to 100 or styled to have a height of 100px.\njs\nconst svg = document.querySelector('svg');\nassert.exists(svg);\nconst height = window.getComputedStyle(svg)['height'];\nassert.isTrue(svg?.getAttribute('height') === '100' || height === '100px');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2753,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\learn-about-svg-in-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "048c18e1946e31e2a519bbd30fa8ccf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-set-the-coordinates-for-each-bar.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa9367417b2b2512bce\ntitle: Dynamically Set the Coordinates for Each Bar\nchallengeType: 6\nforumTopicId: 301487\ndashedName: dynamically-set-the-coordinates-for-each-bar\n--description--\nThe last challenge created and appended a rectangle to the svg element for each point in dataset to represent a bar Unfortunately, they were all stacked on top of each other The placement of a rectangle is handled by the x and y attributes They tell D3 where to start drawing the shape in the svg area The last challenge set them each to 0, so every bar was placed in the upper-left corner For a bar chart, all of the bars should sit on the same vertical level, which means the y value stays the same (at 0) for all bars The x value, however, needs to change as you add new bars Remember that larger x values push items farther to the right As you go through the array elements in dataset, the x value should increase The attr() method in D3 accepts a callback function to dynamically set that attribute The callback function takes two arguments, one for the data point itself (usually d) and one for the index of the data point in the array The second argument for the index is optional Here's the format:\njs\nselection attr('property', (d, i) => {});\nIt's important to note that you do NOT need to write a for loop or use forEach() to iterate over the items in the data set Recall that the data() method parses the data set, and any method that's chained after data() is run once for each item in the data set --instructions--\nChange the x attribute callback function so it returns the index times 30 Note: Each bar has a width of 25, so increasing each x value by 30 adds some space between the bars Any value greater than 25 would work in this example --hints--\nThe first rect should have an x value of 0 js\nassert strictEqual(\ndocument querySelectorAll('rect')[0] getAttribute('x'),\n'0'\n);\nThe second rect should have an x value of 30 js\nassert strictEqual(\ndocument querySelectorAll('rect')[1] getAttribute('x'),\n'30'\n);\nThe third rect should have an x value of 60 js\nassert strictEqual(\ndocument querySelectorAll('rect')[2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-set-the-coordinates-for-each-bar.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "76fadb2fa08562f3c093374daf5d4a4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-set-the-coordinates-for-each-bar.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "25, so increasing each x value by 30 adds some space between the bars Any value greater than 25 would work in this example --hints-- The first rect should have an x value of 0 js assert strictEqual( document querySelectorAll('rect')[0] getAttribute('x'), '0' ); The second rect should have an x value of 30 js assert strictEqual( document querySelectorAll('rect')[1] getAttribute('x'), '30' ); The third rect should have an x value of 60 js assert strictEqual( document querySelectorAll('rect')[2]getAttribute('x'),\n'60'\n);\nThe fourth rect should have an x value of 90 js\nassert strictEqual(\ndocument querySelectorAll('rect')[3] getAttribute('x'),\n'90'\n);\nThe fifth rect should have an x value of 120 js\nassert strictEqual(\ndocument querySelectorAll('rect')[4] getAttribute('x'),\n'120'\n);\nThe sixth rect should have an x value of 150 js\nassert strictEqual(\ndocument querySelectorAll('rect')[5] getAttribute('x'),\n'150'\n);\nThe seventh rect should have an x value of 180 js\nassert strictEqual(\ndocument querySelectorAll('rect')[6] getAttribute('x'),\n'180'\n);\nThe eighth rect should have an x value of 210 js\nassert strictEqual(\ndocument querySelectorAll('rect')[7] getAttribute('x'),\n'210'\n);\nThe ninth rect should have an x value of 240 js\nassert strictEqual(\ndocument querySelectorAll('rect')[8] getAttribute('x'),\n'240'\n);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\dynamically-set-the-coordinates-for-each-bar.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "be3a1c6654f0b122a1c5a90e707bc46d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\set-a-domain-and-a-range-on-a-scale.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fac367417b2b2512bdb\ntitle: Set a Domain and a Range on a Scale\nchallengeType: 6\nforumTopicId: 301491\ndashedName: set-a-domain-and-a-range-on-a-scale\n--description--\nBy default, scales use the identity relationship. This means the input value maps to the output value. However, scales can be much more flexible and interesting.\nSay a dataset has values ranging from 50 to 480. This is the input information for a scale, also known as the domain.\nYou want to map those points along the x axis on the SVG, between 10 units and 500 units. This is the output information, also known as the range.\nThe domain() and range() methods set these values for the scale. Both methods take an array of at least two elements as an argument. Here's an example:\njs\nscale.domain([50, 480]);\nscale.range([10, 500]);\nscale(50);\nscale(480);\nscale(325);\nscale(750);\nd3.scaleLinear();\nIn order, the following values would be displayed in the console: 10, 500, 323.37, and 807.67.\nNotice that the scale uses the linear relationship between the domain and range values to figure out what the output should be for a given number. The minimum value in the domain (50) maps to the minimum value (10) in the range.\n--instructions--\nCreate a scale and set its domain to [250, 500] and range to [10, 150].\nNote: You can chain the domain() and range() methods onto the scale variable.\n--hints--\nYour code should use the domain() method.\njs\nassert.match(code, /\\.domain/g);\nThe domain() of the scale should be set to [250, 500].\njs\nassert.deepEqual(scale.domain(), [250, 500]);\nYour code should use the range() method.\njs\nassert.match(code, /\\.range/g);\nThe range() of the scale should be set to [10, 150].\njs\nassert.deepEqual(scale.range(), [10, 150]);\nThe text in the h2 should be -102.\njs\nassert.strictEqual(document.querySelector('h2')?.textContent, '-102');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\set-a-domain-and-a-range-on-a-scale.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46ee80144d68190bd8e41ca68d7bc5bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\select-a-group-of-elements-with-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa6367417b2b2512bc3\ntitle: Select a Group of Elements with D3\nchallengeType: 6\nforumTopicId: 301490\ndashedName: select-a-group-of-elements-with-d3\n--description--\nD3 also has the selectAll() method to select a group of elements. It returns an array of HTML nodes for all the items in the document that match the input string. Here's an example to select all the anchor tags in a document:\njs\nconst anchors = d3.selectAll('a');\nLike the select() method, selectAll() supports method chaining, and you can use it with other methods.\n--instructions--\nSelect all of the li tags in the document, and change their text to the string list item by chaining the .text() method.\n--hints--\nThere should be 3 li elements on the page, and the text in each one should say list item. Capitalization and spacing should match exactly.\njs\nconst listItems = document.querySelectorAll('li');\nassert.lengthOf(listItems, 3);\nfor (let i = 0; i < listItems.length; i++) {\nassert.match(listItems[i]?.textContent, /list item/g);\n}\nYour code should access the d3 object.\njs\nassert.match(code, /d3/g);\nYour code should use the selectAll method.\njs\nassert.match(code, /\\.selectAll/g);\n--seed--\n--seed-contents--\n```html\nExample\nExample\nExample\n```\n--solutions--\n```html\nExample\nExample\nExample\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\select-a-group-of-elements-with-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ea74578a59a058974062bf4f6892e6eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\style-d3-labels.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faa367417b2b2512bd3\ntitle: Style D3 Labels\nchallengeType: 6\nforumTopicId: 301492\ndashedName: style-d3-labels\n--description--\nD3 methods can add styles to the bar labels. The fill attribute sets the color of the text for a text node. The style() method sets CSS rules for other styles, such as font-family or font-size.\n--instructions--\nSet the font-size of the text elements to 25px, and the color of the text to red.\n--hints--\nThe labels should all have a fill color of red.\njs\nconst text = document.querySelector('text');\nassert.exists(text);\nconst fill = window.getComputedStyle(text)['fill'];\nassert.strictEqual(fill, 'rgb(255, 0, 0)');\nThe labels should all have a font-size of 25 pixels.\njs\nconst text = document.querySelector('text');\nassert.exists(text);\nconst fontSize = window.getComputedStyle(text)['font-size'];\nassert.strictEqual(fontSize, '25px');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\style-d3-labels.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50cdd620c849f7ff317738b256ff5700",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\invert-svg-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa9367417b2b2512bd0\ntitle: Invert SVG Elements\nchallengeType: 6\nforumTopicId: 301488\ndashedName: invert-svg-elements\n--description--\nYou may have noticed the bar chart looked like it's upside-down, or inverted This is because of how SVG uses (x, y) coordinates In SVG, the origin point for the coordinates is in the upper-left corner An x coordinate of 0 places a shape on the left edge of the SVG area A y coordinate of 0 places a shape on the top edge of the SVG area Higher x values push the rectangle to the right Higher y values push the rectangle down To make the bars right-side-up, you need to change the way the y coordinate is calculated It needs to account for both the height of the bar and the total height of the SVG area The height of the SVG area is 100 If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top) To do this, the y coordinate needs a value of 100 If the data point value were 1, you would start with a y coordinate of 100 to set the bar at the bottom Then you need to account for the height of the bar of 1, so the final y coordinate would be 99 The y coordinate that is y = heightOfSVG - heightOfBar would place the bars right-side-up --instructions--\nChange the callback function for the y attribute to set the bars right-side-up Remember that the height of the bar is 3 times the data value d Note: In general, the relationship is y = h - m * d, where m is the constant that scales the data points --hints--\nThe first rect should have a y value of 64 js\nassert strictEqual(\ndocument querySelectorAll('rect')[0] getAttribute('y'),\n(h - dataset[0] * 3) toString()\n);\nThe second rect should have a y value of 7 js\nassert strictEqual(\ndocument querySelectorAll('rect')[1] getAttribute('y'),\n(h - dataset[1] * 3) toString()\n);\nThe third rect should have a y value of 34 js\nassert strictEqual(\ndocument querySelectorAll('rect')[2] getAttribute('y'),\n(h - dataset[2] * 3)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\invert-svg-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a5953b9d31550bbdd41a485c34ce7616",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\invert-svg-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is the constant that scales the data points --hints-- The first rect should have a y value of 64 js assert strictEqual( document querySelectorAll('rect')[0] getAttribute('y'), (h - dataset[0] * 3) toString() ); The second rect should have a y value of 7 js assert strictEqual( document querySelectorAll('rect')[1] getAttribute('y'), (h - dataset[1] * 3) toString() ); The third rect should have a y value of 34 js assert strictEqual( document querySelectorAll('rect')[2] getAttribute('y'), (h - dataset[2] * 3)toString()\n);\nThe fourth rect should have a y value of 49 js\nassert strictEqual(\ndocument querySelectorAll('rect')[3] getAttribute('y'),\n(h - dataset[3] * 3) toString()\n);\nThe fifth rect should have a y value of 25 js\nassert strictEqual(\ndocument querySelectorAll('rect')[4] getAttribute('y'),\n(h - dataset[4] * 3) toString()\n);\nThe sixth rect should have a y value of 46 js\nassert strictEqual(\ndocument querySelectorAll('rect')[5] getAttribute('y'),\n(h - dataset[5] * 3) toString()\n);\nThe seventh rect should have a y value of 13 js\nassert strictEqual(\ndocument querySelectorAll('rect')[6] getAttribute('y'),\n(h - dataset[6] * 3) toString()\n);\nThe eighth rect should have a y value of 58 js\nassert strictEqual(\ndocument querySelectorAll('rect')[7] getAttribute('y'),\n(h - dataset[7] * 3) toString()\n);\nThe ninth rect should have a y value of 73 js\nassert strictEqual(\ndocument querySelectorAll('rect')[8] getAttribute('y'),\n(h - dataset[8] * 3) toString()\n);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\invert-svg-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "346af9c874bdd609931c41355b1d83c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\update-the-height-of-an-element-dynamically.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa8367417b2b2512bc9\ntitle: Update the Height of an Element Dynamically\nchallengeType: 6\nforumTopicId: 301493\ndashedName: update-the-height-of-an-element-dynamically\n--description--\nThe previous challenges covered how to display data from an array and how to add CSS classes. You can combine these lessons to create a simple bar chart. There are two steps to this:\nCreate a div for each data point in the array\nGive each div a dynamic height, using a callback function in the style() method that sets height equal to the data value\nRecall the format to set a style using a callback function:\njs\nselection.style('cssProperty', d => d);\n--instructions--\nAdd the style() method to the code in the editor to set the height property for each element. Use a callback function to return the value of the data point with the string px added to it.\n--hints--\nThe first div should have a height of 12 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[0]?.style.height, '12px');\nThe second div should have a height of 31 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[1]?.style.height, '31px');\nThe third div should have a height of 22 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[2]?.style.height, '22px');\nThe fourth div should have a height of 17 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[3]?.style.height, '17px');\nThe fifth div should have a height of 25 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[4]?.style.height, '25px');\nThe sixth div should have a height of 18 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[5]?.style.height, '18px');\nThe seventh div should have a height of 29 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[6]?.style.height, '29px');\nThe eighth div should have a height of 14 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[7]?.style.height, '14px');\nThe ninth div should have a height of 9 pixels.\njs\nassert.strictEqual(document.querySelectorAll('div')[8]?.style.height, '9px');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\update-the-height-of-an-element-dynamically.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4971c57e8daf15ec20e9c4e432c7d031",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-dynamic-scales.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fac367417b2b2512bdd\ntitle: Use Dynamic Scales\nchallengeType: 6\nforumTopicId: 301495\ndashedName: use-dynamic-scales\n--description--\nThe D3 min() and max() methods are useful to help set the scale Given a complex data set, one priority is to set the scale so the visualization fits the SVG container's width and height You want all the data plotted inside the SVG so it's visible on the web page The example below sets the x-axis scale for scatter plot data The domain() method passes information to the scale about the raw data values for the plot The range() method gives it information about the actual space on the web page for the visualization In the example, the domain goes from 0 to the maximum in the set It uses the max() method with a callback function based on the x values in the arrays The range uses the SVG's width (w), but it includes some padding, too This puts space between the scatter plot dots and the edge of the SVG ```js\nconst dataset = [\n[34, 78],\n[109, 280],\n[310, 120],\n[79, 411],\n[420, 220],\n[233, 145],\n[333, 96],\n[222, 333],\n[78, 320],\n[21, 123]\n];\nconst w = 500;\nconst h = 500;\nconst padding = 30;\nconst xScale = d3 scaleLinear() domain([0, d3 max(dataset, d => d[0])]) range([padding, w - padding]);\n```\nThe padding may be confusing at first Picture the x-axis as a horizontal line from 0 to 500 (the width value for the SVG) Including the padding in the range() method forces the plot to start at 30 along that line (instead of 0), and end at 470 (instead of 500) --instructions--\nUse the yScale variable to create a linear y-axis scale The domain should start at zero and go to the maximum y value in the set The range should use the SVG height (h) and include padding Note: Remember to keep the plot right-side-up When you set the range for the y coordinates, the higher value (height minus padding) is the first argument, and the lower value is the second argument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3846,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-dynamic-scales.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e92442f9dd2cf02d36d2b073f79da9d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-dynamic-scales.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "470 (instead of 500) --instructions-- Use the yScale variable to create a linear y-axis scale The domain should start at zero and go to the maximum y value in the set The range should use the SVG height (h) and include padding Note: Remember to keep the plot right-side-up When you set the range for the y coordinates, the higher value (height minus padding) is the first argument, and the lower value is the second argument--hints--\nThe text in the h2 should be 30 js\nassert strictEqual(output, 30);\nassert strictEqual(document querySelector('h2') textContent, '30');\nThe domain() of yScale should be equivalent to [0, 411] js\nassert deepEqual(yScale domain(), [0, 411]);\nThe range() of yScale should be equivalent to [470, 30] js\nassert deepEqual(yScale range(), [470, 30]);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3846,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-dynamic-scales.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "341dc65fa2be457071d7ab654480440a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-data-in-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa7367417b2b2512bc4\ntitle: Work with Data in D3\nchallengeType: 6\nforumTopicId: 301497\ndashedName: work-with-data-in-d3\n--description--\nThe D3 library focuses on a data-driven approach When you have a set of data, you can apply D3 methods to display it on the page Data comes in many formats, but this challenge uses a simple array of numbers The first step is to make D3 aware of the data The data() method is used on a selection of DOM elements to attach the data to those elements The data set is passed as an argument to the method A common workflow pattern is to create a new element in the document for each piece of data in the set D3 has the enter() method for this purpose When enter() is combined with the data() method, it looks at the selected elements from the page and compares them to the number of data items in the set If there are fewer elements than data items, it creates the missing elements Here is an example that selects a ul element and creates a new list item based on the number of entries in the array:\n```html\n```\nIt may seem confusing to select elements that don't exist yet This code is telling D3 to first select the ul on the page Next, select all list items, which returns an empty selection Then the data() method reviews the dataset and runs the following code three times, once for each item in the array The enter() method sees there are no li elements on the page, but it needs 3 (one for each piece of data in dataset) New li elements are appended to the ul and have the text New item --instructions--\nSelect the body node, then select all h2 elements Have D3 create and append an h2 tag for each item in the dataset array The text in the h2 should say New Title Your code should use the data() and enter() methods --hints--\nYour document should have 9 h2 elements js\nassert lengthOf(document querySelectorAll('h2'), 9);\nThe text in the h2 elements should say New Title The capitalization and spacing should match exactly js\nconst h2Elements = document querySelectorAll('h2');\nfor (let i = 0; i < h2Elements length; i++) {\nassert match(h2Elements[i]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3101,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-data-in-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a7b66406f1b159e14fb4dc5c879cb3b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-data-in-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "h2 tag for each item in the dataset array The text in the h2 should say New Title Your code should use the data() and enter() methods --hints-- Your document should have 9 h2 elements js assert lengthOf(document querySelectorAll('h2'), 9); The text in the h2 elements should say New Title The capitalization and spacing should match exactly js const h2Elements = document querySelectorAll('h2'); for (let i = 0; i < h2Elements length; i++) { assert match(h2Elements[i]textContent, /New Title/g);\n}\nYour code should use the data() method js\nassert match(code, /\\ data/g);\nYour code should use the enter() method js\nassert match(code, /\\ enter/g);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3101,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-data-in-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "512a5adfc707ec5457017ded2c46e191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-the-d3.max-and-d3.min-functions-to-find-minimum-and-maximum-values-in-a-dataset.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fac367417b2b2512bdc\ntitle: >-\nUse the d3 max and d3 min Functions to Find Minimum and Maximum Values in a\nDataset\nchallengeType: 6\nforumTopicId: 301496\ndashedName: >-\nuse-the-d3-max-and-d3-min-functions-to-find-minimum-and-maximum-values-in-a-dataset\n--description--\nThe D3 methods domain() and range() set that information for your scale based on the data There are a couple methods to make that easier Often when you set the domain, you'll want to use the minimum and maximum values within the data set Trying to find these values manually, especially in a large data set, may cause errors D3 has two methods - min() and max() to return this information Here's an example:\njs\nconst exampleData = [34, 234, 73, 90, 6, 52];\nd3 min(exampleData);\nd3 max(exampleData);\nA dataset may have nested arrays, like the [x, y] coordinate pairs that were in the scatter plot example In that case, you need to tell D3 how to calculate the maximum and minimum Fortunately, both the min() and max() methods take a callback function In this example, the callback function's argument d is for the current inner array The callback needs to return the element from the inner array (the x or y value) over which you want to compute the maximum or minimum Here's an example for how to find the min and max values with an array of arrays:\njs\nconst locationData = [\n[1, 7],\n[6, 3],\n[8, 3]\n];\nconst minX = d3 min(locationData, d => d[0]);\nminX would have the value 1 --instructions--\nThe positionData array holds sub arrays of x, y, and z coordinates Use a D3 method to find the maximum value of the z coordinate (the third value) from the arrays and save it in the output variable --hints--\nThe text in the h2 should be 8 js\nassert strictEqual(output, 8);\nassert strictEqual(document querySelector('h2') textContent, '8');\nYour code should use the max() method js\nassert match(\ncode,\n/\\ max/g,\n'Your code should use the <code>max()</code> method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-the-d3.max-and-d3.min-functions-to-find-minimum-and-maximum-values-in-a-dataset.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5903bed389d67edb67a63b96cad7a97d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-the-d3.max-and-d3.min-functions-to-find-minimum-and-maximum-values-in-a-dataset.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The positionData array holds sub arrays of x, y, and z coordinates Use a D3 method to find the maximum value of the z coordinate (the third value) from the arrays and save it in the output variable --hints-- The text in the h2 should be 8 js assert strictEqual(output, 8); assert strictEqual(document querySelector('h2') textContent, '8'); Your code should use the max() method js assert match( code, /\\ max/g, 'Your code should use the <code>max()</code> method'\n);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-the-d3.max-and-d3.min-functions-to-find-minimum-and-maximum-values-in-a-dataset.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "76a5bb8d0dbb533785bdad7bb6f0d12f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\change-text-with-click-events.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fad367417b2b2512be2\ntitle: Change Text with click Events\nchallengeType: 6\nforumTopicId: 301500\ndashedName: change-text-with-click-events\n--description--\nWhen the click event happens, you can use JavaScript to update an HTML element.\nFor example, when a user clicks the Get Message button, it changes the text of the element with the class message to say Here is the message.\nThis works by adding the following code within the click event:\njs\ndocument.getElementsByClassName('message')[0].textContent =\n'Here is the message';\n--instructions--\nAdd code inside the onclick event handler to change the text inside the message element to say Here is the message.\n--hints--\nYour code should use the document.getElementsByClassName method to select the element with class message and set its textContent to the given string.\njs\nassert.match(\ncode,\n/document\\s*\\.getElementsByClassName\\(\\s*?('|\")message\\1\\s*?\\)\\[0\\]\\s*\\.textContent\\s*?=\\s*?('|\")Here is the message\\2/g\n);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\change-text-with-click-events.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0e23ca227a964e5ebe10bafd11089626",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\access-the-json-data-from-an-api.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fae367417b2b2512be4\ntitle: Access the JSON Data from an API\nchallengeType: 6\nforumTopicId: 301499\ndashedName: access-the-json-data-from-an-api\n--description--\nIn the previous challenge, you saw how to get JSON data from the freeCodeCamp Cat Photo API Now you'll take a closer look at the returned data to better understand the JSON format Recall some notation in JavaScript:\n[ ] -> Square brackets represent an array { } -> Curly brackets represent an object \" \" -> Double quotes represent a string They are also used for key names in JSON Understanding the structure of the data that an API returns is important because it influences how you retrieve the values you need On the right, click the Get Message button to load the freeCodeCamp Cat Photo API JSON into the HTML The first and last character you see in the JSON data are square brackets [ ] This means that the returned data is an array The second character in the JSON data is a curly { bracket, which starts an object Looking closely, you can see that there are three separate objects The JSON data is an array of three objects, where each object contains information about a cat photo You learned earlier that objects contain \"key-value pairs\" that are separated by commas In the Cat Photo example, the first object has \"id\":0 where id is a key and 0 is its corresponding value Similarly, there are keys for imageLink, altText, and codeNames Each cat photo object has these same keys, but with different values Another interesting \"key-value pair\" in the first object is \"codeNames\":[\"Juggernaut\",\"Mrs Wallace\",\"ButterCup\"] Here codeNames is the key and its value is an array of three strings It's possible to have arrays of objects as well as a key with an array as a value Remember how to access data in arrays and objects Arrays use bracket notation to access a specific index of an item Objects use either bracket or dot notation to access the value of a given property Here's an example that prints the altText property of the first cat photo - note that the parsed JSON data in the editor is saved in a variable called json:\njs\nconsole log(json[0] altText);\nThe console would display the string A white cat wearing a green helmet shaped melon on its head",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\access-the-json-data-from-an-api.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6064dbed9998d654aa4ed2aeab207fcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\access-the-json-data-from-an-api.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "notation to access a specific index of an item Objects use either bracket or dot notation to access the value of a given property Here's an example that prints the altText property of the first cat photo - note that the parsed JSON data in the editor is saved in a variable called json: js console log(json[0] altText); The console would display the string A white cat wearing a green helmet shaped melon on its head--instructions--\nFor the cat with the id of 2, print to the console the second value in the codeNames array You should use bracket and dot notation on the object (which is saved in the variable json) to access the value --hints--\nYour code should use bracket and dot notation to access the proper code name, and print Loki to the console js\nassert match(\ncode,\n/console\\s*\\ \\s*log\\s*\\(\\s*json\\s*\\[2\\]\\s*(\\ \\s*codeNames|\\[\\s*('|`|\")codeNames\\2\\s*\\])\\s*\\[\\s*1\\s*\\]\\s*\\)/g\n);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\access-the-json-data-from-an-api.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "033645ee26a285d43e25765a978726e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-dynamic-data-in-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa7367417b2b2512bc5\ntitle: Work with Dynamic Data in D3\nchallengeType: 6\nforumTopicId: 301498\ndashedName: work-with-dynamic-data-in-d3\n--description--\nThe last two challenges cover the basics of displaying data dynamically with D3 using the data() and enter() methods These methods take a data set and, together with the append() method, create a new DOM element for each entry in the data set In the previous challenge, you created a new h2 element for each item in the dataset array, but they all contained the same text, New Title This is because you have not made use of the data that is bound to each of the h2 elements The D3 text() method can take a string or a callback function as an argument:\njs\nselection text(d => d);\nIn the example above, the parameter d refers to a single entry in the dataset that a selection is bound to Using the current example as context, the first h2 element is bound to 12, the second h2 element is bound to 31, the third h2 element is bound to 22, and so on --instructions--\nChange the text() method so that each h2 element displays the corresponding value from the dataset array with a single space and the string USD For example, the first heading should be 12 USD --hints--\nThe first h2 should have the text 12 USD js\nassert strictEqual(document querySelectorAll('h2')[0] textContent, '12 USD');\nThe second h2 should have the text 31 USD js\nassert strictEqual(document querySelectorAll('h2')[1] textContent, '31 USD');\nThe third h2 should have the text 22 USD js\nassert strictEqual(document querySelectorAll('h2')[2] textContent, '22 USD');\nThe fourth h2 should have the text 17 USD js\nassert strictEqual(document querySelectorAll('h2')[3] textContent, '17 USD');\nThe fifth h2 should have the text 25 USD js\nassert strictEqual(document querySelectorAll('h2')[4] textContent, '25 USD');\nThe sixth h2 should have the text 18 USD js\nassert strictEqual(document querySelectorAll('h2')[5] textContent, '18 USD');\nThe seventh h2 should have the text 29 USD js\nassert strictEqual(document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-dynamic-data-in-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "91dd1c31842470ed56d9c139e14d5049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-dynamic-data-in-d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The third h2 should have the text 22 USD js assert strictEqual(document querySelectorAll('h2')[2] textContent, '22 USD'); The fourth h2 should have the text 17 USD js assert strictEqual(document querySelectorAll('h2')[3] textContent, '17 USD'); The fifth h2 should have the text 25 USD js assert strictEqual(document querySelectorAll('h2')[4] textContent, '25 USD'); The sixth h2 should have the text 18 USD js assert strictEqual(document querySelectorAll('h2')[5] textContent, '18 USD'); The seventh h2 should have the text 29 USD js assert strictEqual(documentquerySelectorAll('h2')[6] textContent, '29 USD');\nThe eighth h2 should have the text 14 USD js\nassert strictEqual(document querySelectorAll('h2')[7] textContent, '14 USD');\nThe ninth h2 should have the text 9 USD js\nassert strictEqual(document querySelectorAll('h2')[8] textContent, '9 USD');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\work-with-dynamic-data-in-d3.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aaa436d6422ad1d0ee3710ea252f5e9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-geolocation-data-to-find-a-users-gps-coordinates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faf367417b2b2512be8\ntitle: Get Geolocation Data to Find A User's GPS Coordinates\nchallengeType: 6\nforumTopicId: 18188\ndashedName: get-geolocation-data-to-find-a-users-gps-coordinates\n--description--\nAnother cool thing you can do is access your user's current location. Every browser has a built in navigator that can give you this information.\nThe navigator will get the user's current longitude and latitude.\nYou will see a prompt to allow or block this site from knowing your current location. The challenge can be completed either way, as long as the code is correct.\nBy selecting allow, you will see the text on the output phone change to your latitude and longitude.\nHere's code that does this:\njs\nif (navigator.geolocation) {\nnavigator.geolocation.getCurrentPosition(function (position) {\ndocument.getElementById('data').innerHTML =\n'latitude: ' +\nposition.coords.latitude +\n'<br>longitude: ' +\nposition.coords.longitude;\n});\n}\nFirst, it checks if the navigator.geolocation object exists. If it does, the getCurrentPosition method on that object is called, which initiates an asynchronous request for the user's position. If the request is successful, the callback function in the method runs. This function accesses the position object's values for latitude and longitude using dot notation and updates the HTML.\n--instructions--\nAdd the example code inside the script tags to check a user's current location and insert it into the HTML.\n--hints--\nYour code should use navigator.geolocation to access the user's current location.\njs\nassert.match(code, /navigator\\.geolocation\\.getCurrentPosition/g);\nYour code should use position.coords.latitude to display the user's latitudinal location.\njs\nassert.match(code, /position\\.coords\\.latitude/g);\nYour code should use position.coords.longitude to display the user's longitudinal location.\njs\nassert.match(code, /position\\.coords\\.longitude/g);\nYou should display the user's position within the div element with id=\"data\".\njs\nassert.match(\ncode,\n/document\\.getElementById\\(\\s*('|\")data\\1\\s*\\)\\.innerHTML/g\n);\n--seed--\n--seed-contents--\n```html\nYou are here:\n```\n--solutions--\n```html\nYou are here:\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-geolocation-data-to-find-a-users-gps-coordinates.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f714f87d4d51d0807feb4178d687c24a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\convert-json-data-to-html.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fae367417b2b2512be5\ntitle: Convert JSON Data to HTML\nchallengeType: 6\nforumTopicId: 16807\ndashedName: convert-json-data-to-html\n--description--\nNow that you're getting data from a JSON API, you can display it in the HTML You can use a forEach method to loop through the data since the cat photo objects are held in an array As you get to each item, you can modify the HTML elements First, declare an html variable with let html = \"\"; Then, loop through the JSON, adding HTML to the variable that wraps the key names in strong tags, followed by the value When the loop is finished, you render it Here's the code that does this:\njs\nlet html = '';\njson forEach(function (val) {\nconst keys = Object keys(val);\nhtml += \"<div class = 'cat'>\";\nkeys forEach(function (key) {\nhtml += '<strong>' + key + '</strong>: ' + val[key] + '<br>';\n});\nhtml += '</div><br>';\n});\nNote: For this challenge, you need to add new HTML elements to the page, so you cannot rely on textContent Instead, you need to use innerHTML, which can make a site vulnerable to cross-site scripting attacks --instructions--\nAdd a forEach method to loop over the JSON data and create the HTML elements to display it Here is some example JSON:\njson\n[\n{\n\"id\": 0,\n\"imageLink\": \"https://cdn freecodecamp org/curriculum/legacy-json-apis-ajax/funny-cat jpg\",\n\"altText\": \"A white cat wearing a green helmet shaped melon on its head \",\n\"codeNames\": [\"Juggernaut\", \"Mrs Wallace\", \"Buttercup\"]\n}\n]\n--hints--\nYour code should store the data in the html variable\njs\nassert match(__helpers removeWhiteSpace(code), /html(\\+=|=html\\+)/g);\nYour code should use a forEach method to loop over the JSON data from the API js\nassert match(code, /json\\ forEach/g);\nYour code should wrap the key names in strong tags js\nassert match(code, /<strong>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4599,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\convert-json-data-to-html.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aeabdc3e495d654c46718786fdbe4349",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\convert-json-data-to-html.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"https://cdn freecodecamp org/curriculum/legacy-json-apis-ajax/funny-cat jpg\", \"altText\": \"A white cat wearing a green helmet shaped melon on its head \", \"codeNames\": [\"Juggernaut\", \"Mrs Wallace\", \"Buttercup\"] } ] --hints-- Your code should store the data in the html variable js assert match(__helpers removeWhiteSpace(code), /html(\\+=|=html\\+)/g); Your code should use a forEach method to loop over the JSON data from the API js assert match(code, /json\\ forEach/g); Your code should wrap the key names in strong tags js assert match(code, /<strong>+<\\/strong>/g);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4599,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\convert-json-data-to-html.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "052771b0ea29240cbc5bd9d0e2decbd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\handle-click-events-with-javascript-using-the-onclick-property.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fad367417b2b2512be1\ntitle: Handle Click Events with JavaScript using the onclick property\nchallengeType: 6\nforumTopicId: 301503\ndashedName: handle-click-events-with-javascript-using-the-onclick-property\n--description--\nYou want your code to execute only once your page has finished loading. For that purpose, you can attach a JavaScript event to the document called DOMContentLoaded. Here's the code that does this:\njs\ndocument.addEventListener('DOMContentLoaded', function () {});\nYou can implement event handlers that go inside of the DOMContentLoaded function. You can implement an onclick event handler which triggers when the user clicks on the #getMessage element, by adding the following code:\njs\ndocument.getElementById('getMessage').onclick = function () {};\n--instructions--\nAdd a click event handler inside of the DOMContentLoaded function for the element with id of getMessage.\n--hints--\nYour code should use the document.getElementById method to select the element whose id is getMessage.\njs\nassert.match(code, /document\\s*\\.getElementById\\(\\s*('|\")getMessage\\1\\s*\\)/g);\nYour code should add an onclick event handler.\njs\nassert.isFunction(document.getElementById('getMessage').onclick);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2962,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\handle-click-events-with-javascript-using-the-onclick-property.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1a909155170354f334398f0e65f3e115",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-fetch-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5ccfad82bb2dc6c965a848e5\ntitle: Get JSON with the JavaScript fetch method\nchallengeType: 6\nforumTopicId: 301501\ndashedName: get-json-with-the-javascript-fetch-method\n--description--\nAnother way to request external data is to use the JavaScript fetch() method It is equivalent to XMLHttpRequest, but the syntax is considered easier to understand Here is the code for making a GET request to /json/cats json\njs\nfetch('/json/cats json') then(response => response json()) then(data => {\ndocument getElementById('message') innerHTML = JSON stringify(data);\n});\nNote: The fetch() method uses GET as the default HTTP method This means you don’t need to specify it explicitly for basic data retrieval Take a look at each piece of this code The first line is the one that makes the request So, fetch(URL) makes a GET request to the URL specified The method returns a Promise After a Promise is returned, if the request was successful, the then method is executed, which takes the response and converts it to JSON format The then method also returns a Promise, which is handled by the next then method The argument in the second then is the JSON object you are looking for Now, it selects the element that will receive the data by using document getElementById() Then it modifies the HTML code of the element by inserting a string created from the JSON object returned from the request --instructions--\nUpdate the code to create and send a GET request to the freeCodeCamp Cat Photo API But this time, using the fetch method instead of XMLHttpRequest --hints--\nYour code should use the fetched data to replace the inner HTML\njs\nconst catData = 'dummy data';\nconst ref = fetch;\nfetch = () => Promise resolve({ json: () => catData });\nasync () => {\ntry {\ndocument getElementById('getMessage') click();\nawait new Promise((resolve, reject) => setTimeout(() => resolve(), 250));\n} catch (error) {\nconsole log(error);\n} finally {\nfetch = ref;\nassert equal(\ndocument getElementById('message') textContent,\nJSON stringify(catData)\n);\n}\n};\nYour code should make a GET request with fetch js\nassert match(code, /fetch\\s*\\(\\s*('|\")\\/json\\/cats\\ json\\1\\s*\\)/g);\nYour code should use then to convert the response to JSON js\nassert match(\ncode,\n/\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4784,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-fetch-method.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3a3ba77c7e59fad0f0352405bf8b1100",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-fetch-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "resolve({ json: () => catData }); async () => { try { document getElementById('getMessage') click(); await new Promise((resolve, reject) => setTimeout(() => resolve(), 250)); } catch (error) { console log(error); } finally { fetch = ref; assert equal( document getElementById('message') textContent, JSON stringify(catData) ); } }; Your code should make a GET request with fetch js assert match(code, /fetch\\s*\\(\\s*('|\")\\/json\\/cats\\ json\\1\\s*\\)/g); Your code should use then to convert the response to JSON js assert match( code, /\\then\\s*\\(\\s*\\( ( <var>\\w+)\\) \\s*=>\\s*\\k<var>\\s*\\ json\\s*\\(\\s*\\)\\s*\\)/g\n);\nYour code should use then to handle the data converted to JSON by the other then js\nassert match(__helpers removeWhiteSpace(code), /\\ then\\(\\( \\w+\\) =>{[^}]*}\\)/g);\nYour code should get the element with id message and change its inner HTML to the string of JSON data js\nassert match(\n__helpers removeWhiteSpace(code),\n/document\\ getElementById\\(('|\")message\\1\\)\\ innerHTML=JSON\\ stringify\\( \\w+\\)/g\n);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4784,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-fetch-method.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9df2451ce546800f9218b236a10c9d94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-xmlhttprequest-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fae367417b2b2512be3\ntitle: Get JSON with the JavaScript XMLHttpRequest Method\nchallengeType: 6\nforumTopicId: 301502\ndashedName: get-json-with-the-javascript-xmlhttprequest-method\n--description--\nYou can also request data from an external source This is where APIs come into play Remember that APIs - or Application Programming Interfaces - are tools that computers use to communicate with one another You'll learn how to update HTML with the data we get from APIs using a technology called AJAX Most web APIs transfer data in a format called JSON JSON stands for JavaScript Object Notation JSON syntax looks very similar to JavaScript object literal notation JSON has object properties and their current values, sandwiched between a { and a } These properties and their values are often referred to as \"key-value pairs\" However, JSON transmitted by APIs are sent as bytes, and your application receives it as a string These can be converted into JavaScript objects, but they are not JavaScript objects by default The JSON parse method parses the string and constructs the JavaScript object described by it You can request the JSON from freeCodeCamp's Cat Photo API Here's the code you can put in your click event to do this:\njs\nconst req = new XMLHttpRequest();\nreq open('GET', '/json/cats json', true);\nreq send();\nreq onload = function () {\nconst json = JSON parse(req responseText);\ndocument getElementsByClassName('message')[0] innerHTML =\nJSON stringify(json);\n};\nHere's a review of what each piece is doing The JavaScript XMLHttpRequest object has a number of properties and methods that are used to transfer data First, an instance of the XMLHttpRequest object is created and saved in the req variable Next, the open method initializes a request - this example is requesting data from an API, therefore is a GET request The second argument for open is the URL of the API you are requesting data from The third argument is a Boolean value where true makes it an asynchronous request The send method sends the request Finally, the onload event handler parses the returned data and applies the JSON stringify method to convert the JavaScript object into a string This string is then inserted as the message text --instructions--\nUpdate the code to create and send a GET request to the freeCodeCamp Cat Photo API Then click the Get Message button Your AJAX function will replace the The message will go here text with the raw JSON output from the API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5575,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-xmlhttprequest-method.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f8e69e7482d51c592d4bcec74e58ce88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-xmlhttprequest-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "request Finally, the onload event handler parses the returned data and applies the JSON stringify method to convert the JavaScript object into a string This string is then inserted as the message text --instructions-- Update the code to create and send a GET request to the freeCodeCamp Cat Photo API Then click the Get Message button Your AJAX function will replace the The message will go here text with the raw JSON output from the API--hints--\nYour code should create a new XMLHttpRequest js\nassert match(code, /new\\s+ XMLHttpRequest\\(\\s* \\)/g);\nYour code should use the open method to initialize a GET request to the freeCodeCamp Cat Photo API js\nassert match(\ncode,\n/\\ open\\(\\s*('|\")GET\\1\\s*,\\s*('|\")\\/json\\/cats\\ json\\2\\s*,\\s*true\\s*\\)/g\n);\nYour code should use the send method to send the request js\nassert match(code, /\\ send\\(\\s*\\)/g);\nYour code should have an onload event handler set to a function js\nassert match(\ncode,\n/\\ onload\\s*=\\s*(function|\\(\\s*\\))\\s*(\\(\\s*\\)|\\=\\>)\\s*{/g\n);\nYour code should use the JSON parse method to parse the responseText js\nassert match(code, /JSON\\s*\\ parse\\(\\s* *\\ responseText\\s*\\)/g);\nYour code should get the element with class message and change its inner HTML to the string of JSON data js\nassert match(\ncode,\n/document\\s*\\ getElementsByClassName\\(\\s* ('|\")message\\1\\s* \\)\\[0\\]\\s*\\ innerHTML\\s* =\\s* JSON\\ stringify\\( + \\)/g\n);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5575,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\get-json-with-the-javascript-xmlhttprequest-method.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "202d263643c6e87363e928310ae7c189",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\pre-filter-json-to-get-the-data-you-need.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fae367417b2b2512be7\ntitle: Pre-filter JSON to Get the Data You Need\nchallengeType: 6\nforumTopicId: 18257\ndashedName: pre-filter-json-to-get-the-data-you-need\n--description--\nIf you don't want to render every cat photo you get from the freeCodeCamp Cat Photo API, you can pre-filter the JSON before looping through it.\nGiven that the JSON data is stored in an array, you can use the filter method to filter out the cat whose id key has a value of 1.\nHere's the code to do this:\njs\njson = json.filter(function (val) {\nreturn val.id !== 1;\n});\n--instructions--\nAdd code to filter the json data to remove the cat with the id value of 1.\n--hints--\nYour code should use the filter method.\njs\nassert.match(code, /json\\.filter/g);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\pre-filter-json-to-get-the-data-you-need.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e35aa18c9defef013c1e94f6625abe86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\render-images-from-data-sources.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fae367417b2b2512be6\ntitle: Render Images from Data Sources\nchallengeType: 6\nforumTopicId: 18265\ndashedName: render-images-from-data-sources\n--description--\nThe last few challenges showed that each object in the JSON array contains an imageLink key with a value that is the URL of a cat's image.\nWhen you're looping through these objects, you can use this imageLink property to display this image in an img element.\nHere's the code that does this:\njs\nhtml += \"<img src = '\" + val.imageLink + \"' \" + \"alt='\" + val.altText + \"'>\";\n--instructions--\nAdd code to use the imageLink and altText properties in an img tag.\n--hints--\nYou should use the imageLink property to display the images.\njs\nassert.match(code, /val\\.imageLink/g);\nYou should use the altText for the alt attribute values of the images.\njs\nassert.match(code, /val\\.altText/g);\n--seed--\n--seed-contents--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```\n--solutions--\n```html\nCat Photo Finder\nThe message will go here\nGet Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3684,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\render-images-from-data-sources.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "535cc5e4e278e3009ad7f762072454d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fac367417b2b2512bde\ntitle: Use a Pre-Defined Scale to Place Elements\nchallengeType: 6\nforumTopicId: 301494\ndashedName: use-a-pre-defined-scale-to-place-elements\n--description--\nWith the scales set up, it's time to map the scatter plot again The scales are like processing functions that turn the x and y raw data into values that fit and render correctly on the SVG They keep the data within the screen's plotting area You set the coordinate attribute values for an SVG shape with the scaling function This includes x and y attributes for rect or text elements, or cx and cy for circles Here's an example:\njs\nshape attr('x', d => xScale(d[0]));\nScales set shape coordinate attributes to place the data points onto the SVG You don't need to apply scales when you display the actual data value, for example, in the text() method for a tooltip or label --instructions--\nUse xScale and yScale to position both the circle and text shapes onto the SVG For the circles, apply the scales to set the cx and cy attributes Give them a radius of 5 units, too For the text elements, apply the scales to set the x and y attributes The labels should be offset to the right of the dots To do this, add 10 units to the x data value before passing it to the xScale --hints--\nYour code should have 10 circle elements js\nassert lengthOf(document querySelectorAll('circle'), 10);\nThe first circle element should have a cx value of approximately 91 and a cy value of approximately 368 after applying the scales It should also have an r value of 5 js\nconst firstCircle = document querySelectorAll('circle')[0];\nassert strictEqual(Math round(firstCircle getAttribute('cx')), 91);\nassert strictEqual(Math round(firstCircle getAttribute('cy')), 368);\nassert strictEqual(Math round(firstCircle getAttribute('r')), 5);\nThe second circle element should have a cx value of approximately 159 and a cy value of approximately 181 after applying the scales It should also have an r value of 5 js\nconst secondCircle = document querySelectorAll('circle')[1];\nassert strictEqual(Math round(secondCircle getAttribute('cx')), 159);\nassert strictEqual(Math round(secondCircle getAttribute('cy')), 181);\nassert strictEqual(Math round(secondCircle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "50696fd0bb95d72ca56b2639dcc11137",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "r value of 5 js const firstCircle = document querySelectorAll('circle')[0]; assert strictEqual(Math round(firstCircle getAttribute('cx')), 91); assert strictEqual(Math round(firstCircle getAttribute('cy')), 368); assert strictEqual(Math round(firstCircle getAttribute('r')), 5); The second circle element should have a cx value of approximately 159 and a cy value of approximately 181 after applying the scales It should also have an r value of 5 js const secondCircle = document querySelectorAll('circle')[1]; assert strictEqual(Math round(secondCircle getAttribute('cx')), 159); assert strictEqual(Math round(secondCircle getAttribute('cy')), 181); assert strictEqual(Math round(secondCirclegetAttribute('r')), 5);\nThe third circle element should have a cx value of approximately 340 and a cy value of approximately 329 after applying the scales It should also have an r value of 5 js\nconst thirdCircle = document querySelectorAll('circle')[2];\nassert strictEqual(Math round(thirdCircle getAttribute('cx')), 340);\nassert strictEqual(Math round(thirdCircle getAttribute('cy')), 329);\nassert strictEqual(Math round(thirdCircle getAttribute('r')), 5);\nThe fourth circle element should have a cx value of approximately 131 and a cy value of approximately 60 after applying the scales It should also have an r value of 5 js\nconst fourthCircle = document querySelectorAll('circle')[3];\nassert strictEqual(Math round(fourthCircle getAttribute('cx')), 131);\nassert strictEqual(Math round(fourthCircle getAttribute('cy')), 60);\nassert strictEqual(Math round(fourthCircle getAttribute('r')), 5);\nThe fifth circle element should have a cx value of approximately 440 and a cy value of approximately 237 after applying the scales It should also have an r value of 5 js\nconst fifthCircle = document querySelectorAll('circle')[4];\nassert strictEqual(Math round(fifthCircle getAttribute('cx')), 440);\nassert strictEqual(Math round(fifthCircle getAttribute('cy')), 237);\nassert strictEqual(Math round(fifthCircle getAttribute('r')), 5);\nThe sixth circle element should have a cx value of approximately 271 and a cy value of approximately 306 after applying the scales It should also have an r value of 5 js\nconst sixthCircle = document querySelectorAll('circle')[5];\nassert strictEqual(Math round(sixthCircle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "833416ef7faeb06ede176d59cb9692e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "237 after applying the scales It should also have an r value of 5 js const fifthCircle = document querySelectorAll('circle')[4]; assert strictEqual(Math round(fifthCircle getAttribute('cx')), 440); assert strictEqual(Math round(fifthCircle getAttribute('cy')), 237); assert strictEqual(Math round(fifthCircle getAttribute('r')), 5); The sixth circle element should have a cx value of approximately 271 and a cy value of approximately 306 after applying the scales It should also have an r value of 5 js const sixthCircle = document querySelectorAll('circle')[5]; assert strictEqual(Math round(sixthCirclegetAttribute('cx')), 271);\nassert strictEqual(Math round(sixthCircle getAttribute('cy')), 306);\nassert strictEqual(Math round(sixthCircle getAttribute('r')), 5);\nThe seventh circle element should have a cx value of approximately 361 and a cy value of approximately 351 after applying the scales It should also have an r value of 5 js\nconst seventhCircle = document querySelectorAll('circle')[6];\nassert strictEqual(Math round(seventhCircle getAttribute('cx')), 361);\nassert strictEqual(Math round(seventhCircle getAttribute('cy')), 351);\nassert strictEqual(Math round(seventhCircle getAttribute('r')), 5);\nThe eighth circle element should have a cx value of approximately 261 and a cy value of approximately 132 after applying the scales It should also have an r value of 5 js\nconst eighthCircle = document querySelectorAll('circle')[7];\nassert strictEqual(Math round(eighthCircle getAttribute('cx')), 261);\nassert strictEqual(Math round(eighthCircle getAttribute('cy')), 132);\nassert strictEqual(Math round(eighthCircle getAttribute('r')), 5);\nThe ninth circle element should have a cx value of approximately 131 and a cy value of approximately 144 after applying the scales It should also have an r value of 5 js\nconst ninthCircle = document querySelectorAll('circle')[8];\nassert strictEqual(Math round(ninthCircle getAttribute('cx')), 131);\nassert strictEqual(Math round(ninthCircle getAttribute('cy')), 144);\nassert strictEqual(Math round(ninthCircle getAttribute('r')), 5);\nThe tenth circle element should have a cx value of approximately 79 and a cy value of approximately 326 after applying the scales It should also have an r value of 5 js\nconst tenthCircle = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ff1ebad541c54983991c2d32c2a2e089",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "cy value of approximately 144 after applying the scales It should also have an r value of 5 js const ninthCircle = document querySelectorAll('circle')[8]; assert strictEqual(Math round(ninthCircle getAttribute('cx')), 131); assert strictEqual(Math round(ninthCircle getAttribute('cy')), 144); assert strictEqual(Math round(ninthCircle getAttribute('r')), 5); The tenth circle element should have a cx value of approximately 79 and a cy value of approximately 326 after applying the scales It should also have an r value of 5 js const tenthCircle = documentquerySelectorAll('circle')[9];\nassert strictEqual(Math round(tenthCircle getAttribute('cx')), 79);\nassert strictEqual(Math round(tenthCircle getAttribute('cy')), 326);\nassert strictEqual(Math round(tenthCircle getAttribute('r')), 5);\nYour code should have 10 text elements js\nassert lengthOf(document querySelectorAll('text'), 10);\nThe first label should have an x value of approximately 100 and a y value of approximately 368 after applying the scales js\nconst firstLabel = document querySelectorAll('text')[0];\nassert strictEqual(Math round(firstLabel getAttribute('x')), 100);\nassert strictEqual(Math round(firstLabel getAttribute('y')), 368);\nThe second label should have an x value of approximately 168 and a y value of approximately 181 after applying the scales js\nconst secondLabel = document querySelectorAll('text')[1];\nassert strictEqual(Math round(secondLabel getAttribute('x')), 168);\nassert strictEqual(Math round(secondLabel getAttribute('y')), 181);\nThe third label should have an x value of approximately 350 and a y value of approximately 329 after applying the scales js\nconst thirdLabel = document querySelectorAll('text')[2];\nassert strictEqual(Math round(thirdLabel getAttribute('x')), 350);\nassert strictEqual(Math round(thirdLabel getAttribute('y')), 329);\nThe fourth label should have an x value of approximately 141 and a y value of approximately 60 after applying the scales js\nconst fourthLabel = document querySelectorAll('text')[3];\nassert strictEqual(Math round(fourthLabel getAttribute('x')), 141);\nassert strictEqual(Math round(fourthLabel getAttribute('y')), 60);\nThe fifth label should have an x value of approximately 449 and a y value of approximately 237 after applying the scales js\nconst fifthLabel = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "dae3b3e58e29c6f487e3dfddfa846cf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "querySelectorAll('text')[2]; assert strictEqual(Math round(thirdLabel getAttribute('x')), 350); assert strictEqual(Math round(thirdLabel getAttribute('y')), 329); The fourth label should have an x value of approximately 141 and a y value of approximately 60 after applying the scales js const fourthLabel = document querySelectorAll('text')[3]; assert strictEqual(Math round(fourthLabel getAttribute('x')), 141); assert strictEqual(Math round(fourthLabel getAttribute('y')), 60); The fifth label should have an x value of approximately 449 and a y value of approximately 237 after applying the scales js const fifthLabel = documentquerySelectorAll('text')[4];\nassert strictEqual(Math round(fifthLabel getAttribute('x')), 449);\nassert strictEqual(Math round(fifthLabel getAttribute('y')), 237);\nThe sixth label should have an x value of approximately 280 and a y value of approximately 306 after applying the scales js\nconst sixthLabel = document querySelectorAll('text')[5];\nassert strictEqual(Math round(sixthLabel getAttribute('x')), 280);\nassert strictEqual(Math round(sixthLabel getAttribute('y')), 306);\nThe seventh label should have an x value of approximately 370 and a y value of approximately 351 after applying the scales js\nconst seventhLabel = document querySelectorAll('text')[6];\nassert strictEqual(Math round(seventhLabel getAttribute('x')), 370);\nassert strictEqual(Math round(seventhLabel getAttribute('y')), 351);\nThe eighth label should have an x value of approximately 270 and a y value of approximately 132 after applying the scales js\nconst eighthLabel = document querySelectorAll('text')[7];\nassert strictEqual(Math round(eighthLabel getAttribute('x')), 270);\nassert strictEqual(Math round(eighthLabel getAttribute('y')), 132);\nThe ninth label should have an x value of approximately 140 and a y value of approximately 144 after applying the scales js\nconst ninthLabel = document querySelectorAll('text')[8];\nassert strictEqual(Math round(ninthLabel getAttribute('x')), 140);\nassert strictEqual(Math round(ninthLabel getAttribute('y')), 144);\nThe tenth label should have an x value of approximately 88 and a y value of approximately 326 after applying the scales js\nconst tenthLabel = document querySelectorAll('text')[9];\nassert strictEqual(Math round(tenthLabel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "01fabb62fb379d374838fbd1de645d3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "getAttribute('x')), 270); assert strictEqual(Math round(eighthLabel getAttribute('y')), 132); The ninth label should have an x value of approximately 140 and a y value of approximately 144 after applying the scales js const ninthLabel = document querySelectorAll('text')[8]; assert strictEqual(Math round(ninthLabel getAttribute('x')), 140); assert strictEqual(Math round(ninthLabel getAttribute('y')), 144); The tenth label should have an x value of approximately 88 and a y value of approximately 326 after applying the scales js const tenthLabel = document querySelectorAll('text')[9]; assert strictEqual(Math round(tenthLabelgetAttribute('x')), 88);\nassert strictEqual(Math round(tenthLabel getAttribute('y')), 326);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\data-visualization-with-d3\\use-a-pre-defined-scale-to-place-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "7a650822a221310354aab281d49930c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-elements-within-your-bootstrap-wells.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908849\ntitle: Add Elements within Your Bootstrap Wells\nchallengeType: 0\nforumTopicId: 16636\ndashedName: add-elements-within-your-bootstrap-wells\n--description--\nNow we're several div elements deep on each column of our row. This is as deep as we'll need to go. Now we can add our button elements.\nNest three button elements within each of your div elements having the class name well.\n--hints--\nThree button elements should be nested within each of your div elements with class well.\n``js\nconst buttonOne = document.querySelectorAll('div.well')?.[0];\nconst buttonOneChildren = buttonOne?.querySelectorAll(:scope ${'button'}`);\nassert.lengthOf(buttonOneChildren,3);\nconst buttonTwo = document.querySelectorAll('div.well')?.[1]\nconst buttonTwoChildren = buttonTwo?.querySelectorAll(:scope ${'button'});\nassert.lengthOf(buttonTwoChildren,3);\n```\nYou should have a total of 6 button elements.\njs\nassert.lengthOf(document.querySelectorAll('button'), 6);\nAll of your button elements should have closing tags.\njs\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length,code.match(/<button/g).length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-elements-within-your-bootstrap-wells.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e61bb9f8f9e8376cc67d807ace44ab2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\post-data-with-the-javascript-xmlhttprequest-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7faf367417b2b2512be9\ntitle: Post Data with the JavaScript XMLHttpRequest Method\nchallengeType: 6\nforumTopicId: 301504\ndashedName: post-data-with-the-javascript-xmlhttprequest-method\n--description--\nIn the previous examples, you received data from an external resource You can also send data to an external resource, as long as that resource supports AJAX requests and you know the URL JavaScript's XMLHttpRequest method is also used to post data to a server Here's an example:\njs\nconst xhr = new XMLHttpRequest();\nxhr open('POST', url, true);\nxhr setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\nxhr onreadystatechange = function () {\nif (xhr readyState === 4 && xhr status === 201) {\nconst serverResponse = JSON parse(xhr response);\ndocument getElementsByClassName('message')[0] textContent =\nserverResponse userName + serverResponse suffix;\n}\n};\nconst body = JSON stringify({ userName: userName, suffix: ' loves cats ' });\nxhr send(body);\nYou've seen several of these methods before Here the open method initializes the request as a POST to the given URL of the external resource, and passes true as the third parameter - indicating to perform the operation asynchronously The setRequestHeader method sets the value of an HTTP request header, which contains information about the sender and the request It must be called after the open method, but before the send method The two parameters are the name of the header and the value to set as the body of that header Next, the onreadystatechange event listener handles a change in the state of the request A readyState of 4 means the operation is complete, and a status of 201 means it was a successful request Therefore, the document's HTML can be updated Finally, the send method sends the request with the body value The body consists of a userName and a suffix key --instructions--\nUpdate the code so it makes a POST request to the API endpoint Then type your name in the input field and click Send Message Your AJAX function should replace Reply from Server will be here with data from the server Format the response to display your name appended with the text loves cats --hints--\nYour code should create a new XMLHttpRequest js\nassert match(code, /new\\s*XMLHttpRequest\\(\\s*\\)/g);\nYour code should use the open method to initialize a POST request to the server js\nassert match(code, /\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6034,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\post-data-with-the-javascript-xmlhttprequest-method.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f871797192526788f99dfc96065dad04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\post-data-with-the-javascript-xmlhttprequest-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to the API endpoint Then type your name in the input field and click Send Message Your AJAX function should replace Reply from Server will be here with data from the server Format the response to display your name appended with the text loves cats --hints-- Your code should create a new XMLHttpRequest js assert match(code, /new\\s*XMLHttpRequest\\(\\s*\\)/g); Your code should use the open method to initialize a POST request to the server js assert match(code, /\\open\\(\\s*('|\")POST\\1\\s*,\\s*url\\s*,\\s*true\\s*\\)/g);\nYour code should use the setRequestHeader method js\nassert match(\ncode,\n/\\ setRequestHeader\\(\\s*('|\")Content-Type\\1\\s*,\\s*('|\")application\\/json;\\s*charset=UTF-8\\2\\s*\\)/g\n);\nYour code should have an onreadystatechange event handler set to a function js\nassert match(code, /\\ onreadystatechange\\s*=/g);\nYour code should get the element with class message and change its textContent to userName loves cats\njs\nassert match(\ncode,\n/document\\ getElementsByClassName\\(\\s*('|\")message\\1\\s*\\)\\[0\\]\\ textContent\\s*=\\s* + \\ userName\\s*\\+\\s* + \\ suffix/g\n);\nYour code should use the send method js\nassert match(code, /\\ send\\(\\s*body\\s*\\)/g);\n--seed--\n--seed-contents--\n```html\nCat Friends\nReply from Server will be here\nYour name:\nSend Message\n```\n--solutions--\n```html\nCat Friends\nReply from Server will be here\nYour name:\nSend Message\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6034,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\04-data-visualization\\json-apis-and-ajax\\post-data-with-the-javascript-xmlhttprequest-method.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c9d0db570805829c81bdd3e16489f78a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-id-attributes-to-bootstrap-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908853\ntitle: Add id Attributes to Bootstrap Elements\nchallengeType: 0\nforumTopicId: 16639\ndashedName: add-id-attributes-to-bootstrap-elements\n--description--\nRecall that in addition to class attributes, you can give each of your elements an id attribute.\nEach id must be unique to a specific element and used only once per page.\nLet's give a unique id to each of our div elements of class well.\nRemember that you can give an element an id like this:\n```html\n```\nGive the well on the left the id of `left-well`. Give the well on the right the id of `right-well`.\n# --hints--\nYour left `well` should have the id of `left-well`.\n```js\nconst column = document.querySelectorAll('.col-xs-6')[0];\nconst leftWall = column?.querySelectorAll(`:scope ${'#left-well'}`);\nassert.lengthOf(leftWall,1)\n```\nYour right `well` should have the id of `right-well`.\n```js\nconst column = document.querySelectorAll('.col-xs-6')[1];\nconst rightWall = column?.querySelectorAll(`:scope ${'#right-well'}`);\nassert.lengthOf(rightWall,1)\n```\n# --seed--\n## --seed-contents--\n```html\njQuery Playground\n```\n# --solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2452,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-id-attributes-to-bootstrap-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fa5fe0c2fe7b434077e372d039932ae8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\apply-the-default-bootstrap-button-style.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908850\ntitle: Apply the Default Bootstrap Button Style\nchallengeType: 0\nforumTopicId: 16657\ndashedName: apply-the-default-bootstrap-button-style\n--description--\nBootstrap has another button class called btn-default.\nApply both the btn and btn-default classes to each of your button elements.\n--hints--\nYou should apply the btn class to each of your button elements.\njs\nassert.lengthOf(document.querySelectorAll('.btn'),6);\nYou should apply the btn-default class to each of your button elements.\njs\nassert.lengthOf(document.querySelectorAll('.btn-default'), 6);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\apply-the-default-bootstrap-button-style.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c1221b4ec5d0f801eb69bd2ee0ad451",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\call-out-optional-actions-with-btn-info.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348cd8acef08813\ntitle: Call out Optional Actions with btn-info\nchallengeType: 0\nforumTopicId: 16770\ndashedName: call-out-optional-actions-with-btn-info\n--description--\nBootstrap comes with several pre-defined colors for buttons. The btn-info class is used to call attention to optional actions that the user can take.\nCreate a new block-level Bootstrap button below your Like button with the text Info, and add Bootstrap's btn-info class to it.\nNote that these buttons still need the btn and btn-block classes.\n--hints--\nYou should create a new button element with the text Info.\njs\nconst infoButton = document.querySelectorAll('button')?.[1];\nassert.match(infoButton.textContent,/info/gi);\nBoth of your Bootstrap buttons should have the btn and btn-block classes.\njs\nassert.lengthOf(document.querySelectorAll('button.btn-block.btn'),2);\nYour new button should have the class btn-info.\njs\nconst infoButton = [...document.querySelectorAll('button')].at(1);\nassert.isTrue(infoButton?.classList?.contains('btn-info'));\nAll of your button elements should have closing tags.\n```js\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g)?.length,code.match(/<button/g)?.length);\n```\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nInfo\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\call-out-optional-actions-with-btn-info.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1872973d52d1f159ef1b0cc3be9e97a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\center-text-with-bootstrap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd8acde08812\ntitle: Center Text with Bootstrap\nchallengeType: 0\nforumTopicId: 16771\ndashedName: center-text-with-bootstrap\n--description--\nNow that we're using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class text-center to our h2 element.\nRemember that you can add several classes to the same element by separating each of them with a space, like this:\n```html\nyour text\n```\n--hints--\nYour h2 element should be centered by applying the class text-center\njs\nassert.isTrue(document.querySelector('h2')?.classList?.contains('text-center'));\nYour h2 element should still have the class red-text\njs\nassert.isTrue(document.querySelector('h2')?.classList?.contains('red-text'));\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\center-text-with-bootstrap.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "698f81f85de5a8f0a7d9aa0b21d7ae02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-all-of-our-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aedc08845\ntitle: Add Font Awesome Icons to all of our Buttons\nchallengeType: 0\nforumTopicId: 16637\nrequired:\n- link: 'https://use fontawesome com/releases/v5 8 1/css/all css'\nraw: true\ndashedName: add-font-awesome-icons-to-all-of-our-buttons\n--description--\nFont Awesome is a convenient library of icons These icons can be web fonts or vector graphics These icons are treated just like fonts You can specify their size using pixels, and they will assume the font size of their parent HTML elements --instructions--\nUse Font Awesome to add an info-circle icon to your info button and a trash icon to your delete button Note: You can use either i or span elements to complete this challenge --hints--\nYou should add a <i class=\"fas fa-info-circle\"></i> within your info button element js\nassert isTrue(\ndocument querySelector(' btn-info > i') classList value === 'fas fa-info-circle' ||\ndocument querySelector(' btn-info > span') classList value === 'fas fa-info-circle'\n);\nYou should add a <i class=\"fas fa-trash\"></i> within your delete button element js\nassert isTrue(\ndocument querySelector(' btn-danger > i') classList value === 'fas fa-trash' ||\ndocument querySelector(' btn-danger > span') classList value === 'fas fa-trash'\n);\nEach of your i elements should have a closing tag and <i class=\"fas fa-thumbs-up\"></i> is in your like button element js\nassert match(code,/<\\/i>|<\\/span/g);\nassert lengthOf(code match(/<\\/i|<\\/span>/g),4)\nassert isTrue(\ndocument querySelector(' btn-primary > i') classList value === 'fas fa-thumbs-up' ||\ndocument querySelector(' btn-primary > span') classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-all-of-our-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f8909be61d86ca1c8ab3a290c9dbf550",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-all-of-our-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "fa-trash\"></i> within your delete button element js assert isTrue( document querySelector(' btn-danger > i') classList value === 'fas fa-trash' || document querySelector(' btn-danger > span') classList value === 'fas fa-trash' ); Each of your i elements should have a closing tag and <i class=\"fas fa-thumbs-up\"></i> is in your like button element js assert match(code,/<\\/i>|<\\/span/g); assert lengthOf(code match(/<\\/i|<\\/span>/g),4) assert isTrue( document querySelector(' btn-primary > i') classList value === 'fas fa-thumbs-up' || document querySelector(' btn-primary > span') classListvalue === 'fas fa-thumbs-up'\n);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-all-of-our-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1c1f73b5c6a090a26393573da063c19b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-button.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348cd8acdf08812\ntitle: Create a Bootstrap Button\nchallengeType: 0\nforumTopicId: 16811\ndashedName: create-a-bootstrap-button\n--description--\nBootstrap has its own styles for button elements, which look much better than the plain HTML ones.\nCreate a new button element below your large kitten photo. Give it the btn and btn-default classes, as well as the text of Like.\n--hints--\nYou should create a new button element with the text Like.\njs\nassert.match(document.querySelector('button')?.textContent, /like/gi);\nassert.lengthOf(document.querySelectorAll('img.img-responsive + button.btn'),1)\nYour new button should have two classes: btn and btn-default.\njs\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn') )\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-default'));\nAll of your button elements should have closing tags.\njs\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length ,code.match(/<button/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4711,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-button.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f00d83e1a1c5d2e186f345a45d0781c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-headline.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908846\ntitle: Create a Bootstrap Headline\nchallengeType: 0\nforumTopicId: 16812\ndashedName: create-a-bootstrap-headline\n--description--\nNow let's build something from scratch to practice our HTML, CSS and Bootstrap skills.\nWe'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.\nTo start with, create an h3 element, with the text jQuery Playground.\nColor your h3 element with the text-primary Bootstrap class, and center it with the text-center Bootstrap class.\n--hints--\nYou should add an h3 element to your page.\njs\nassert.lengthOf(document.querySelectorAll('h3'),1);\nYour h3 element should have a closing tag.\njs\nassert.match(code,/<\\/h3>/g);\nassert.match(code,/<h3/g);\nassert.equal( code.match(/<\\/h3>/g).length , code.match(/<h3/g).length);\nYour h3 element should be colored by applying the class text-primary\njs\nassert.isTrue(document.querySelector('h3')?.classList?.contains('text-primary'));\nYour h3 element should be centered by applying the class text-center\njs\nassert.isTrue(document.querySelector('h3')?.classList?.contains('text-center'));\nYour h3 element should have the text jQuery Playground.\njs\nassert.match(document.querySelector('h3')?.textContent, /jquery(\\s)+playground/gi);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-headline.md",
      "source_type": "git_repo"
    },
    "token_count": 327,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "77220cc7d46d710ed3fa9e19c398bc12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-block-element-bootstrap-button.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348cd8acef08812\ntitle: Create a Block Element Bootstrap Button\nchallengeType: 0\nforumTopicId: 16810\ndashedName: create-a-block-element-bootstrap-button\n--description--\nNormally, your button elements with the btn and btn-default classes are only as wide as the text that they contain. For example:\nhtml\n<button class=\"btn btn-default\">Submit</button>\nThis button would only be as wide as the word Submit.\nSubmit\nBy making them block elements with the additional class of btn-block, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a \"new line\" below the block.\nhtml\n<button class=\"btn btn-default btn-block\">Submit</button>\nThis button would take up 100% of the available width.\nSubmit\nNote that these buttons still need the btn class.\nAdd Bootstrap's btn-block class to your Bootstrap button.\n--hints--\nYour button should still have the btn and btn-default classes.\njs\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn'));\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-default'));\nYour button should have the class btn-block.\njs\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-block'));\nAll of your button elements should have closing tags.\njs\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length, code.match(/<button/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-block-element-bootstrap-button.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e69ee00e75182bd4b5b523a4ce5923b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-row.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9bec908846\ntitle: Create a Bootstrap Row\nchallengeType: 0\nforumTopicId: 16813\ndashedName: create-a-bootstrap-row\n--description--\nNow we'll create a Bootstrap row for our inline elements.\nCreate a div element below the h3 tag, with a class of row.\n--hints--\nYou should add a div element below your h3 element.\njs\nassert.lengthOf(document.querySelectorAll('div'),2);\nassert.lengthOf(document.querySelectorAll('div.row h3.text-primary'),0);\nassert.lengthOf(document.querySelectorAll('div.row + h3.text-primary'),0)\nassert.lengthOf(document.querySelectorAll('h3.text-primary + div.row'),1);\nYour div element should have the class row\njs\nconst newDiv = document.querySelectorAll('div')?.[1];\nassert.isTrue(newDiv?.classList?.contains('row'));\nYour row div should be nested inside the container-fluid div\njs\nassert.lengthOf(document.querySelectorAll('div.container-fluid div.row'),1);\nYour div element should have a closing tag.\njs\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-row.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "73938cdc5d7fe81451046ada7949c1e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-class-to-target-with-jquery-selectors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908852\ntitle: Create a Class to Target with jQuery Selectors\nchallengeType: 0\nforumTopicId: 16815\ndashedName: create-a-class-to-target-with-jquery-selectors\n--description--\nNot every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.\nGive each of your button elements the class target.\n--hints--\nYou should apply the target class to each of your button elements.\njs\nassert.lengthOf(document.querySelectorAll('.target'),6);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1848,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-class-to-target-with-jquery-selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 148,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9fb0ffe157d54d54feb6a3fe383dffe3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-bootstrap-wells.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908848\ntitle: Create Bootstrap Wells\nchallengeType: 0\nforumTopicId: 16825\ndashedName: create-bootstrap-wells\n--description--\nBootstrap has a class called well that can create a visual sense of depth for your columns.\nNest one div element with the class well within each of your col-xs-6 div elements.\n--hints--\nYou should add a div element with the class well inside each of your div elements with the class col-xs-6\njs\nconst wells = document.querySelectorAll('div.col-xs-6 > div.well');\nassert.lengthOf( wells,2 );\nBoth of your div elements with the class col-xs-6 should be nested within your div element with the class row.\njs\nassert.lengthOf(document.querySelectorAll('div.row > div.col-xs-6'),2);\nAll your div elements should have closing tags.\njs\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g)?.length , code.match(/<div/g)?.length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-bootstrap-wells.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "993b4a984d45c0314fe8a52ff770a3ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\ditch-custom-css-for-bootstrap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1347bd9aedf08845\ntitle: Ditch Custom CSS for Bootstrap\nchallengeType: 0\nforumTopicId: 17565\ndashedName: ditch-custom-css-for-bootstrap\n--description--\nWe can clean up our code and make our Cat Photo App look more conventional by using Bootstrap's built-in styles instead of the custom styles we created earlier.\nDon't worry - there will be plenty of time to customize our CSS later.\nDelete the .red-text, p, and .smaller-image CSS declarations from your style element so that the only declarations left in your style element are h2 and thick-green-border.\nThen delete the p element that contains a dead link. Then remove the red-text class from your h2 element and replace it with the text-primary Bootstrap class.\nFinally, remove the smaller-image class from your first img element and replace it with the img-responsive class.\n--hints--\nYour h2 element should no longer have the class red-text.\njs\nassert.isFalse(document.querySelector('h2')?.classList?.contains('red-text'));\nYour h2 element should now have the class text-primary.\njs\nassert.isTrue(document.querySelector('h2')?.classList?.contains('text-primary'));\nYour paragraph elements should no longer use the font Monospace.\njs\nconst paragraphElement = document.querySelector('p');\nconst paragraphFontFamily = window.getComputedStyle(paragraphElement)[\"font-family\"];\nassert.notMatch(paragraphFontFamily,/monospace/i);\nThe smaller-image class should be removed from your top image.\njs\nassert.isFalse(document.querySelector('img')?.classList?.contains('smaller-image'));\nYou should add the img-responsive class to your top image.\njs\nassert.lengthOf(document.querySelectorAll('.img-responsive'),2);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\ditch-custom-css-for-bootstrap.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "723bcb5b0dea4f6c9e22f006afac5bf9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-our-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aedd08845\ntitle: Add Font Awesome Icons to our Buttons\nchallengeType: 0\nforumTopicId: 16638\nrequired:\n- link: 'https://use fontawesome com/releases/v5 8 1/css/all css'\nraw: true\ndashedName: add-font-awesome-icons-to-our-buttons\n--description--\nFont Awesome is a convenient library of icons These icons can be webfonts or vector graphics These icons are treated just like fonts You can specify their size using pixels, and they will assume the font size of their parent HTML elements You can include Font Awesome in any app by adding the following code to the top of your HTML:\nhtml\n<link rel=\"stylesheet\" href=\"https://use fontawesome com/releases/v5 8 1/css/all css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\nIn this case, we've already added it for you to this page behind the scenes The i element was originally used to make other elements italic, but is now commonly used for icons You can add the Font Awesome classes to the i element to turn it into an icon, for example:\nhtml\n<i class=\"fas fa-info-circle\"></i>\nNote that the span element is also acceptable for use with icons --instructions--\nUse Font Awesome to add a thumbs-up icon to your like button by giving it an i element with the classes fas and fa-thumbs-up Make sure to keep the text Like next to the icon --hints--\nYou should add an i element with the classes fas and fa-thumbs-up js\nassert isTrue(document querySelector('i') classList value === 'fas fa-thumbs-up' || document querySelector('span') classList value === 'fas fa-thumbs-up');\nYour fa-thumbs-up icon should be located within the Like button js\nconst iconTextContent = document querySelector('i fa-thumbs-up') parentNode textContent;\nconst spanTextContent = document querySelector('span fa-thumbs-up') parentNode textContent;\nassert isTrue(\n(iconTextContent match(/Like/gi) &&\ndocument querySelector(' btn-primary > i') === document querySelector(' fas fa-thumbs-up')) ||\n(spanTextContent match(/Like/gi) &&\ndocument querySelector('",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-our-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d0dde8cdef5afdc012a3b1a14ac9df26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-our-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should add an i element with the classes fas and fa-thumbs-up js assert isTrue(document querySelector('i') classList value === 'fas fa-thumbs-up' || document querySelector('span') classList value === 'fas fa-thumbs-up'); Your fa-thumbs-up icon should be located within the Like button js const iconTextContent = document querySelector('i fa-thumbs-up') parentNode textContent; const spanTextContent = document querySelector('span fa-thumbs-up') parentNode textContent; assert isTrue( (iconTextContent match(/Like/gi) && document querySelector(' btn-primary > i') === document querySelector(' fas fa-thumbs-up')) || (spanTextContent match(/Like/gi) && document querySelector('btn-primary > span') === document querySelector(' fas fa-thumbs-up')));\nYour i element should be nested within your button element js\nconst button = document querySelector('button');\nconst i = button querySelectorAll(\"i\");\nconst span =  button querySelectorAll(\"span\");\nassert(i length > 0 ||span length > 0);\nYour icon element should have a closing tag js\nassert match(code, /(<\\/i>|<\\/span>)\\s*Like\\s*<\\/button>/g);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-our-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "45fa88523219cfb1e60187c15a6c1cfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-custom-heading.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aede08845\ntitle: Create a Custom Heading\nchallengeType: 0\nforumTopicId: 16816\ndashedName: create-a-custom-heading\n--description--\nWe will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row Remember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element's relative width Most of Bootstrap's classes can be applied to a div element Nest your first image and your h2 element within a single <div class=\"row\"> element Nest your h2 element within a <div class=\"col-xs-8\"> and your image in a <div class=\"col-xs-4\"> so that they are on the same line Notice how the image is now just the right size to fit along the text --hints--\nYour h2 element and topmost img element should both be nested together within a div element with the class row js\nconst row = document querySelector('div row');\nconst h2 = row querySelectorAll(`:scope ${'h2'}`)\nconst image = row querySelectorAll(`:scope ${'img'}`)\nassert lengthOf(h2,1);\nassert lengthOf(image ,1);\nYour topmost img element should be nested within a div with the class col-xs-4 js\nconst column = document querySelector('div col-xs-4');\nconst div = column querySelectorAll(`:scope ${'div'}`);\nconst img = column querySelectorAll(`:scope ${'img'}`)\nassert isEmpty(div);\nassert lengthOf(img,1)\nYour h2 element should be nested within a div with the class col-xs-8 ``js\nconst column = document querySelector('div col-xs-8');\nconst div = column querySelectorAll(:scope ${'div'});\nconst h2 = column querySelectorAll(:scope ${'h2'}`)\nassert isEmpty(div);\nassert lengthOf(h2, 1);\n```\nAll of your div elements should have closing tags js\nassert match(code,/<\\/div>/g);\nassert match(code,/<div/g);\nassert equal(code match(/<\\/div>/g) length,code match(/<div/g)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-custom-heading.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f0fd0d4ef1b21759faf48f764bfb3bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-custom-heading.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "document querySelector('div col-xs-4'); const div = column querySelectorAll(`:scope ${'div'}`); const img = column querySelectorAll(`:scope ${'img'}`) assert isEmpty(div); assert lengthOf(img,1) Your h2 element should be nested within a div with the class col-xs-8 ``js const column = document querySelector('div col-xs-8'); const div = column querySelectorAll(:scope ${'div'}); const h2 = column querySelectorAll(:scope ${'h2'}`) assert isEmpty(div); assert lengthOf(h2, 1); ``` All of your div elements should have closing tags js assert match(code,/<\\/div>/g); assert match(code,/<div/g); assert equal(code match(/<\\/div>/g) length,code match(/<div/g)length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-custom-heading.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c78de027b90ecb9ea9ab2eb93a1a0ac5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\give-each-element-a-unique-id.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908855\ntitle: Give Each Element a Unique id\nchallengeType: 0\nforumTopicId: 18191\ndashedName: give-each-element-a-unique-id\n--description--\nWe will also want to be able to use jQuery to target each button by its unique id.\nGive each of your buttons a unique id, starting with target1 and ending with target6.\nMake sure that target1 to target3 are in #left-well, and target4 to target6 are in #right-well.\n--hints--\nOne button element should have the id target1.\njs\nconst leftWall = document.querySelector('#left-well');\nconst targetOne = leftWall?.querySelectorAll(`:scope ${'#target1'}`)\nassert.lengthOf(targetOne,1);\nOne button element should have the id target2.\njs\nconst leftWall = document.querySelector('#left-well');\nconst targetTwo = leftWall?.querySelectorAll(`:scope ${'#target2'}`)\nassert.lengthOf(targetTwo,1);\nOne button element should have the id target3.\njs\nconst leftWall = document.querySelector('#left-well');\nconst targetThree = leftWall?.querySelectorAll(`:scope ${'#target3'}`)\nassert.lengthOf(targetThree,1);\nOne button element should have the id target4.\njs\nconst leftWall = document.querySelector('#right-well');\nconst targetFour = leftWall?.querySelectorAll(`:scope ${'#target4'}`)\nassert.lengthOf(targetFour,1);\nOne button element should have the id target5.\njs\nconst leftWall = document.querySelector('#right-well');\nconst targetFive = leftWall?.querySelectorAll(`:scope ${'#target5'}`)\nassert.lengthOf(targetFive,1);\nOne button element should have the id target6.\njs\nconst leftWall = document.querySelector('#right-well');\nconst targetSix = leftWall?.querySelectorAll(`:scope ${'#target6'}`)\nassert.lengthOf(targetSix,1);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#right-well\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#right-well\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\give-each-element-a-unique-id.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "006593bf31419ff38205635a6774d334",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\house-our-page-within-a-bootstrap-container-fluid-div.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908746\ntitle: House our page within a Bootstrap container-fluid div\nchallengeType: 0\nforumTopicId: 18198\ndashedName: house-our-page-within-a-bootstrap-container-fluid-div\n--description--\nNow let's make sure all the content on your page is mobile-responsive.\nLet's nest your h3 element within a div element with the class container-fluid.\n--hints--\nYour div element should have the class container-fluid.\njs\nassert.isTrue(document.querySelector('div')?.classList?.contains('container-fluid'));\nEach of your div elements should have closing tags.\n```js\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);\n```\nYour h3 element should be nested inside a div element.\njs\nconst divElement = document.querySelector('div');\nconst divChildren = divElement?.querySelectorAll(`:scope ${'h3'}`)\nassert.lengthOf(divChildren,1);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\house-our-page-within-a-bootstrap-container-fluid-div.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad54f6000b776ffba039f691e14223bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-wells.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908854\ntitle: Label Bootstrap Wells\nchallengeType: 0\nforumTopicId: 18223\ndashedName: label-bootstrap-wells\n--description--\nFor the sake of clarity, let's label both of our wells with their ids.\nAbove your left-well, inside its col-xs-6 div element, add an h4 element with the text #left-well.\nAbove your right-well, inside its col-xs-6 div element, add an h4 element with the text #right-well.\n--hints--\nYou should add an h4 element to each of your <div class=\"col-xs-6\"> elements.\n``js\nconst columnSixes = document.querySelectorAll('.col-xs-6');\nconst columnSixOneChildren = columnSixes?.[0]?.querySelectorAll(:scope ${'h4'}`);\nassert.lengthOf(columnSixOneChildren,1);\nconst columnSixTwoChildren = columnSixes?.[1]?.querySelectorAll(:scope ${'h4'});\nassert.lengthOf(columnSixTwoChildren,1);\n```\nOne h4 element should have the text #left-well.\njs\nconst firstH4 = document.querySelectorAll('h4')?.[0];\nassert.match(firstH4?.textContent,/#left-well/gi);\nOne h4 element should have the text #right-well.\njs\nconst secondH4 = document.querySelectorAll('h4')?.[1];\nassert.match(secondH4?.textContent,/#right-well/gi);\nAll of your h4 elements should have closing tags.\njs\nassert.match(code,/<\\/h4>/g);\nassert.match(code,/<h4/g);\nassert.equal(code.match(/<\\/h4>/g).length , code.match(/<h4/g).length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#right-well\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-wells.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f9ccda53545b4583bb40d5a7b0f7b7b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908856\ntitle: Label Bootstrap Buttons\nchallengeType: 0\nforumTopicId: 18222\ndashedName: label-bootstrap-buttons\n--description--\nJust like we labeled our wells, we want to label our buttons.\nGive each of your button elements text that corresponds to its id selector.\n--hints--\nYour button element with the id target1 should have the text #target1.\njs\nassert.match(document.querySelector('#target1')?.textContent,/#target1/gi)\nYour button element with the id target2 should have the text #target2.\njs\nassert.match(document.querySelector('#target2')?.textContent,/#target2/gi)\nYour button element with the id target3 should have the text #target3.\njs\nassert.match(document.querySelector('#target3')?.textContent,/#target3/gi)\nYour button element with the id target4 should have the text #target4.\njs\nassert.match(document.querySelector('#target4')?.textContent,/#target4/gi)\nYour button element with the id target5 should have the text #target5.\njs\nassert.match(document.querySelector('#target5')?.textContent,/#target5/gi)\nYour button element with the id target6 should have the text #target6.\njs\nassert.match(document.querySelector('#target6')?.textContent,/#target6/gi)\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#right-well\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bbcc9490e00d439ef95b0d4844749a1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\make-images-mobile-responsive.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9acde08812\ntitle: Make Images Mobile Responsive\nchallengeType: 0\nforumTopicId: 18232\ndashedName: make-images-mobile-responsive\n--description--\nFirst, add a new image below the existing one. Set its src attribute to https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg.\nIt would be great if this image could be exactly the width of our phone's screen.\nFortunately, with Bootstrap, all we need to do is add the img-responsive class to your image. Do this, and the image should perfectly fit the width of your page.\n--hints--\nYou should have a total of two images.\njs\nassert.lengthOf(document.querySelectorAll('img'), 2);\nYour new image should be below your old one and have the class img-responsive.\njs\nassert.isTrue(document.querySelectorAll('img')?.[1]?.classList?.contains('img-responsive'));\nYour new image should not have the class smaller-image.\njs\nassert.isFalse(document.querySelectorAll('img')?.[1]?.classList?.contains('smaller-image'));\nYour new image should have a src of https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg.\njs\nassert.equal(document.querySelectorAll('img')?.[1]?.getAttribute('src') , 'https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg');\nYour new img element should have a closing angle bracket.\njs\nassert.match(code,/<img/g);\nassert.lengthOf(code.match(/<img[^<]*>/g), 2);\nassert.lengthOf(code.match(/<img/g), 2);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\make-images-mobile-responsive.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cbb0982891621bb057436a5b23c7f2ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-checkboxes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aeda08845\ntitle: Responsively Style Checkboxes\nchallengeType: 0\nforumTopicId: 18269\nrequired:\n- link: >-\nhttps://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css\nraw: true\ndashedName: responsively-style-checkboxes\n--description--\nSince Bootstrap's col-xs-* classes are applicable to all form elements, you can use them on your checkboxes too! This way, the checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.\n--instructions--\nNest all three of your checkboxes in a <div class=\"row\"> element. Then nest each of them in a <div class=\"col-xs-4\"> element.\n--hints--\nAll of your checkboxes should be nested inside one div with the class row.\njs\nconst checkboxes = document.querySelectorAll(`div.row input[type=\"checkbox\"]`);\nassert.lengthOf(checkboxes,3);\nEach of your checkboxes should be nested inside its own div with the class col-xs-4.\njs\nconst checkboxes = document.querySelectorAll(`div.col-xs-4 input[type=\"checkbox\"]`);\nassert.lengthOf(checkboxes,3);\nAll of your div elements should have closing tags.\njs\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-checkboxes.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13bccd82d4a65e3b6d55d49445f51057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\split-your-bootstrap-row.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908847\ntitle: Split Your Bootstrap Row\nchallengeType: 0\nforumTopicId: 18306\ndashedName: split-your-bootstrap-row\n--description--\nNow that we have a Bootstrap Row, let's split it into two columns to house our elements.\nCreate two div elements within your row, both with the class col-xs-6.\n--hints--\nTwo div class=\"col-xs-6\" elements should be nested within your div class=\"row\" element.\njs\nassert.lengthOf(document.querySelectorAll('div.row > div.col-xs-6'),2);\nAll your div elements should have closing tags.\njs\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length , code.match(/<div/g).length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n```\n--solutions--\n```html\njQuery Playground\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\split-your-bootstrap-row.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "48a6818e8e95c3f02b0639fc16d0df62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\style-text-inputs-as-form-controls.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed908845\ntitle: Style Text Inputs as Form Controls\nchallengeType: 0\nforumTopicId: 18312\nrequired:\n- link: >-\nhttps://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css\nraw: true\ndashedName: style-text-inputs-as-form-controls\n--description--\nYou can add the fa-paper-plane Font Awesome icon by adding <i class=\"fa fa-paper-plane\"></i> within your submit button element.\nGive your form's text input field a class of form-control. Give your form's submit button the classes btn btn-primary. Also give this button the Font Awesome icon of fa-paper-plane.\nAll textual <input>, <textarea>, and <select> elements with the class .form-control have a width of 100%.\n--hints--\nThe submit button in your form should have the classes btn btn-primary.\njs\nassert.isTrue(document.querySelector('button[type=\"submit\"]')?.classList?.contains('btn'));\nassert.isTrue(document.querySelector('button[type=\"submit\"]')?.classList?.contains('btn-primary'));\nYou should add a <i class=\"fa fa-paper-plane\"></i> within your submit button element.\n```js\nconst submitButton = document.querySelector('button[type=\"submit\"]');\nconst fontIcon = submitButton?.querySelectorAll('i.fa.fa-paper-plane');\nassert.lengthOf(fontIcon ,1);\n```\nThe text input in your form should have the class form-control.\njs\nassert.isTrue(document.querySelector('input[type=\"text\"]')?.classList?.contains('form-control'));\nEach of your i elements should have a closing tag.\njs\nassert.match(code,/<\\/i>/g);\nassert.lengthOf(code.match(/<\\/i/g),4);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6441,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\style-text-inputs-as-form-controls.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "317ff2703874a0735204dbc45fda3053",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-radio-buttons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aedb08845\ntitle: Responsively Style Radio Buttons\nchallengeType: 0\nforumTopicId: 18270\nrequired:\n- link: >-\nhttps://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css\nraw: true\ndashedName: responsively-style-radio-buttons\n--description--\nYou can use Bootstrap's col-xs-* classes on form elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.\nNest both your radio buttons within a <div class=\"row\"> element. Then nest each of them within a <div class=\"col-xs-6\"> element.\nNote: As a reminder, radio buttons are input elements of type radio.\n--hints--\nAll of your radio buttons should be nested inside one div with the class row.\njs\nconst radioButtons = document.querySelectorAll(`div.row input[type=radio]`);\nassert.lengthOf(radioButtons , 2);\nEach of your radio buttons should be nested inside its own div with the class col-xs-6.\njs\nconst radioButtons = document.querySelectorAll(`div.col-xs-6 input[type=radio]`);\nassert.lengthOf(radioButtons , 2);\nAll of your div elements should have closing tags.\njs\nassert.match(code,/<\\/div>/);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length,code.match(/<div/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-radio-buttons.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3904ec4ddfc307a131c998146420fd59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\taste-the-bootstrap-button-color-rainbow.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348cd8acef08811\ntitle: Taste the Bootstrap Button Color Rainbow\nchallengeType: 0\nforumTopicId: 18323\ndashedName: taste-the-bootstrap-button-color-rainbow\n--description--\nThe btn-primary class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.\nReplace Bootstrap's btn-default class with btn-primary in your button.\nNote that this button will still need the btn and btn-block classes.\n--hints--\nYour button should have the class btn-primary.\njs\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-primary'));\nYour button should still have the btn and btn-block classes.\njs\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-block'));\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn'));\nAll your button elements should have closing tags.\njs\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length , code.match(/<button/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4586,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\taste-the-bootstrap-button-color-rainbow.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a9bdc95f4ee253917bb47add9a9d3a3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-a-span-to-target-inline-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aedf08845\ntitle: Use a span to Target Inline Elements\nchallengeType: 0\nforumTopicId: 18370\ndashedName: use-a-span-to-target-inline-elements\n--description--\nYou can use spans to create inline elements. Remember when we used the btn-block class to make the button fill the entire row?\nnormal button\nbtn-block button\nThat illustrates the difference between an \"inline\" element and a \"block\" element.\nBy using the inline span element, you can put several elements on the same line, and even style different parts of the same line differently.\nUsing a span element, nest the word love inside the p element that currently has the text Things cats love. Then give the span the class text-danger to make the text red.\nHere's how you would do this for the p element that has the text Top 3 things cats hate:\n```html\nTop 3 things cats hate:\n```\n--hints--\nYour span element should be inside your p element.\njs\nassert.lengthOf(document.querySelectorAll('p span'),1);\nYour span element should have just the text love.\njs\nassert.match(document.querySelector('p span')?.textContent,/love/i);\nassert.notMatch(document.querySelector('p span')?.textContent, /Things cats/i);\nYour span element should have class text-danger.\njs\nassert.isTrue(document.querySelector('span')?.classList?.contains('text-danger'));\nYour span element should have a closing tag.\njs\nassert.match(code,/<\\/span>/g);\nassert.match(code,/<span/g);\nassert.equal(code.match(/<\\/span>/g).length,code.match(/<span/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5542,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-a-span-to-target-inline-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "26e31f192b494c67d2c9c064cb218635",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\line-up-form-elements-responsively-with-bootstrap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908845\ntitle: Line up Form Elements Responsively with Bootstrap\nchallengeType: 0\nforumTopicId: 18225\nrequired:\n- link: >-\nhttps://cdnjs cloudflare com/ajax/libs/font-awesome/4 2 0/css/font-awesome css\nraw: true\ndashedName: line-up-form-elements-responsively-with-bootstrap\n--description--\nNow let's get your form input and your submission button on the same line We'll do this the same way we have previously: by using a div element with the class row, and other div elements within it using the col-xs-* class Nest both your form's text input and submit button within a div with the class row Nest your form's text input within a div with the class of col-xs-7 Nest your form's submit button in a div with the class col-xs-5 This is the last challenge we'll do for our Cat Photo App for now We hope you've enjoyed learning Font Awesome, Bootstrap, and responsive design --hints--\nYour form submission button and text input should be nested in a div with class row js\nconst textInput = document querySelectorAll('div row input[type=\"text\"]');\nconst submitInput = document querySelectorAll('div row button[type=\"submit\"]');\nassert lengthOf(textInput,1);\nassert lengthOf(submitInput, 1);\nYour form text input should be nested in a div with the class col-xs-7 js\nconst textInput = document querySelectorAll('div col-xs-7 input[type=\"text\"]');\nassert lengthOf(textInput ,1);\nYour form submission button should be nested in a div with the class col-xs-5 js\nconst submitInput  = document querySelectorAll('div col-xs-5 button[type=\"submit\"]');\nassert lengthOf(submitInput ,1);\nAll of your div elements should have closing tags ```js\nassert match(code,/<\\/div>/g);\nassert match(code,/<div/g);\nassert equal(code match(/<\\/div>/g) length,code match(/<div/g)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\line-up-form-elements-responsively-with-bootstrap.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6206702e050ad4d1037fbd1ce3965251",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\line-up-form-elements-responsively-with-bootstrap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row button[type=\"submit\"]'); assert lengthOf(textInput,1); assert lengthOf(submitInput, 1); Your form text input should be nested in a div with the class col-xs-7 js const textInput = document querySelectorAll('div col-xs-7 input[type=\"text\"]'); assert lengthOf(textInput ,1); Your form submission button should be nested in a div with the class col-xs-5 js const submitInput = document querySelectorAll('div col-xs-5 button[type=\"submit\"]'); assert lengthOf(submitInput ,1); All of your div elements should have closing tags ```js assert match(code,/<\\/div>/g); assert match(code,/<div/g); assert equal(code match(/<\\/div>/g) length,code match(/<div/g)length);\n```\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\line-up-form-elements-responsively-with-bootstrap.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b063911b4c86d485e76456af4dd4e985",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-comments-to-clarify-code.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aec908857\ntitle: Use Comments to Clarify Code\nchallengeType: 0\nforumTopicId: 18347\ndashedName: use-comments-to-clarify-code\n--description--\nWhen we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.\nLet's make sure that everyone knows they shouldn't actually modify any of this code directly.\nRemember that you can start a comment with <!-- and end a comment with -->\nAdd a comment at the top of your HTML that says Code below this line should not be changed\n--hints--\nYou should start a comment with <!-- at the top of your HTML.\njs\nassert.match(code,(/^\\s*<!--/));\nYour comment should have the text Code below this line should not be changed.\njs\nassert.match(code,(/<!--(?!(>|->|.*-->.*this line))\\s*.*this line.*\\s*-->/gi));\nYou should close your comment with -->.\njs\nassert.match(code,(/-->.*\\n+.+/g));\nYou should have the same number of comment openers and closers.\njs\nassert.equal(code.match(/<!--/g).length,code.match(/-->/g).length);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-comments-to-clarify-code.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3cbb25e7bd28d98a99bb104961a4595e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\warn-your-users-of-a-dangerous-action-with-btn-danger.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348ce8acef08814\ntitle: Warn Your Users of a Dangerous Action with btn-danger\nchallengeType: 0\nforumTopicId: 18375\ndashedName: warn-your-users-of-a-dangerous-action-with-btn-danger\n--description--\nBootstrap comes with several pre-defined colors for buttons. The btn-danger class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.\nCreate a button with the text Delete and give it the class btn-danger.\nNote that these buttons still need the btn and btn-block classes.\n--hints--\nYou should create a new button element with the text Delete.\njs\nconst deleteButton = document.querySelectorAll('button')?.[2];\nassert.match(deleteButton?.textContent ,/delete/gi);\nAll of your Bootstrap buttons should have the btn and btn-block classes.\njs\nassert.lengthOf(document.querySelectorAll('button.btn-block.btn'),3);\nYour new button should have the class btn-danger.\njs\nconst deleteButton = document.querySelectorAll('button')?.[2];\nassert.isTrue(deleteButton?.classList?.contains('btn-danger'));\nAll of your button elements should have closing tags.\njs\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length,code.match(/<button/g).length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nInfo\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos.\nLike\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5017,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\warn-your-users-of-a-dangerous-action-with-btn-danger.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ca3480264d4f74f16bb177fa501aea10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-the-bootstrap-grid-to-put-elements-side-by-side.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad88fee1348ce8acef08815\ntitle: Use the Bootstrap Grid to Put Elements Side By Side\nchallengeType: 0\nforumTopicId: 18371\ndashedName: use-the-bootstrap-grid-to-put-elements-side-by-side\n--description--\nBootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width Most of Bootstrap's classes can be applied to a div element Bootstrap has different column width attributes that it uses depending on how wide the user's screen is For example, phones have narrow screens, and laptops have wider screens Take for example Bootstrap's col-md-* class Here, md means medium, and * is a number specifying how many columns wide the element should be In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified In the Cat Photo App that we're building, we'll use col-xs-*, where xs means extra small (like an extra-small mobile phone screen), and * is the number of columns specifying how many columns wide the element should be Put the Like, Info and Delete buttons side-by-side by nesting all three of them within one <div class=\"row\"> element, then each of them within a <div class=\"col-xs-4\"> element The row class is applied to a div, and the buttons themselves can be nested within it --hints--\nYour buttons should all be nested within the same div element with the class row js\nconst row = document querySelector('div row');\nconst rowChildren = row querySelectorAll(`:scope ${'button'}`);\nassert lengthOf(rowChildren, 3);\nEach of your Bootstrap buttons should be nested within its own div element with the class col-xs-4 ```js\nconst columns = document querySelectorAll('div col-xs-4');\nconst firstButton = columns [0] querySelectorAll(:scope ${'button'})\nassert lengthOf(firstButton,1);\nconst secondButton = columns [1] querySelectorAll(:scope ${'button'})\nassert lengthOf(secondButton,1);\nconst thirdButton = columns [2] querySelectorAll(:scope ${'button'})\nassert lengthOf(thirdButton,1);\n```\nEach of your button elements should have a closing tag js\nassert match(code,/<\\/button>/g);\nassert match(code,/<button/g);\nassert equal(code match(/<\\/button>/g) length , code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-the-bootstrap-grid-to-put-elements-side-by-side.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1c892447f7a7cd2518f304267b4479c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-the-bootstrap-grid-to-put-elements-side-by-side.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert lengthOf(rowChildren, 3); Each of your Bootstrap buttons should be nested within its own div element with the class col-xs-4 ```js const columns = document querySelectorAll('div col-xs-4'); const firstButton = columns [0] querySelectorAll(:scope ${'button'}) assert lengthOf(firstButton,1); const secondButton = columns [1] querySelectorAll(:scope ${'button'}) assert lengthOf(secondButton,1); const thirdButton = columns [2] querySelectorAll(:scope ${'button'}) assert lengthOf(thirdButton,1); ``` Each of your button elements should have a closing tag js assert match(code,/<\\/button>/g); assert match(code,/<button/g); assert equal(code match(/<\\/button>/g) length , codematch(/<button/g) length);\nEach of your div elements should have a closing tag js\nassert match(code,/<\\/div>/g);\nassert match(code,/<div/g);\nassert equal(code match(/<\\/div>/g) length , code match(/<div/g) length);\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos Like\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos Like\nInfo\nDelete\nThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-the-bootstrap-grid-to-put-elements-side-by-side.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "57420d8a88ae5c85e5b3742a9225634e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-responsive-design-with-bootstrap-fluid-containers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9acde08712\ntitle: Use Responsive Design with Bootstrap Fluid Containers\nchallengeType: 0\nforumTopicId: 18362\ndashedName: use-responsive-design-with-bootstrap-fluid-containers\n--description--\nIn the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App Now let's go back to it This time, we'll style it using the popular Bootstrap responsive CSS framework Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name responsive design With responsive design, there is no need to design a mobile version of your website It will look good on devices with screens of any width You can add Bootstrap to any app by adding the following code to the top of your HTML:\nhtml\n<link rel=\"stylesheet\" href=\"https://maxcdn bootstrapcdn com/bootstrap/3 3 7/css/bootstrap min css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/>\nIn this case, we've already added it for you to this page behind the scenes Note that using either > or /> to close the link tag is acceptable To get started, we should nest all of our HTML (except the link tag and the style element) in a div element with the class container-fluid --hints--\nYour div element should have the class container-fluid js\nassert isTrue(document querySelector('div') classList contains('container-fluid'));\nYour div element should have a closing tag js\nassert match(code,/<\\/div>/g);\nassert match(code,/<div/g);\nassert equal(code match(/<\\/div>/g) length ,code match(/<div/g) length);\nAll HTML elements after the closing style tag should be nested in container-fluid ``js\nconst fluidContainer = document querySelector(' container-fluid');\nconst possibleStyleElements = fluidContainer querySelectorAll(:scope ${'style'});\nconst possibleLinkElements = fluidContainer querySelectorAll(:scope ${'link'}`);\nassert lengthOf(fluidContainer children,8);\nassert isEmpty(possibleStyleElements);\nassert isEmpty(possibleLinkElements);\n```\n--seed--\n--seed-contents--\n```html\nCatPhotoApp\nClick here for cat photos",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5042,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-responsive-design-with-bootstrap-fluid-containers.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1191a7e16ca2a7ef19d81a76386280a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-responsive-design-with-bootstrap-fluid-containers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "container-fluid js assert isTrue(document querySelector('div') classList contains('container-fluid')); Your div element should have a closing tag js assert match(code,/<\\/div>/g); assert match(code,/<div/g); assert equal(code match(/<\\/div>/g) length ,code match(/<div/g) length); All HTML elements after the closing style tag should be nested in container-fluid ``js const fluidContainer = document querySelector(' container-fluid'); const possibleStyleElements = fluidContainer querySelectorAll(:scope ${'style'}); const possibleLinkElements = fluidContainer querySelectorAll(:scope ${'link'}`); assert lengthOf(fluidContainer children,8); assert isEmpty(possibleStyleElements); assert isEmpty(possibleLinkElements); ``` --seed-- --seed-contents-- ```html CatPhotoApp Click here for cat photosThings cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```\n--solutions--\n```html\nCatPhotoApp\nClick here for cat photos Things cats love:\ncatnip\nlaser pointers\nlasagna\nTop 3 things cats hate:\nflea treatment\nthunder\nother cats\nIndoor\nOutdoor\nLoving\nLazy\nCrazy\nSubmit\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5042,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-responsive-design-with-bootstrap-fluid-containers.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c7f08be92df75d2ee5015fa40b41365e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-drum-machine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbc367417b2b2512bae\ntitle: Build a Drum Machine\nchallengeType: 3\nforumTopicId: 301370\ndashedName: build-a-drum-machine\n--description--\nNote: React 18 has known incompatibilities with the tests for this project (see issue)\nObjective: Build an app that is functionally similar to this: https://drum-machine freecodecamp rocks/ Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project You should use a frontend framework (like React for example) because this section is about learning frontend frameworks Additional technologies not listed above are not recommended and using them is at your own risk We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported We will accept and try to fix all issue reports that use the suggested technology stack for this project Happy coding User Story #1: I should be able to see an outer container with a corresponding id=\"drum-machine\" that contains all other elements User Story #2: Within #drum-machine I can see an element with a corresponding id=\"display\" User Story #3: Within #drum-machine I can see 9 clickable drum pad elements, each with a class name of drum-pad, a unique id that describes the audio clip the drum pad will be set up to trigger, and an inner text that corresponds to one of the following keys on the keyboard: Q, W, E, A, S, D, Z, X, C The drum pads MUST be in this order User Story #4: Within each drum-pad, there should be an HTML5 audio element which has a src attribute pointing to an audio clip, a class name of clip, and an id corresponding to the inner text of its parent drum-pad (e g id=\"Q\", id=\"W\", id=\"E\" etc ) User Story #5: When I click on a drum-pad element, the audio clip contained in its child audio element should be triggered User Story #6: When I press the trigger key associated with each drum-pad, the audio clip contained in its child audio element should be triggered (e g",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-drum-machine.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "93fcf424a8185062608d271d14551ce6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-drum-machine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an audio clip, a class name of clip, and an id corresponding to the inner text of its parent drum-pad (e g id=\"Q\", id=\"W\", id=\"E\" etc ) User Story #5: When I click on a drum-pad element, the audio clip contained in its child audio element should be triggered User Story #6: When I press the trigger key associated with each drum-pad, the audio clip contained in its child audio element should be triggered (e gpressing the Q key should trigger the drum pad which contains the string Q, pressing the W key should trigger the drum pad which contains the string W, etc ) User Story #7: When a drum-pad is triggered, a string describing the associated audio clip is displayed as the inner text of the #display element (each string must be unique) Here are some audio samples you can use for your drum machine:\nHeater 1\nHeater 2\nHeater 3\nHeater 4\nClap\nOpen-HH\nKick-n'-Hat\nKick\nClosed-HH\nYou can build your project by using this CodePen template and clicking Save to create your own pen If you prefer to use another environment, then put this <script> tag into the body of your index html file: <script src=\"https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\"></script>\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-drum-machine.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "389ef4a52208d53b66f92f5eb12f3f09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-markdown-previewer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7157d8c242eddfaeb5bd13\ntitle: Build a Markdown Previewer\nchallengeType: 3\nforumTopicId: 301372\ndashedName: build-a-markdown-previewer\n--description--\nNote: React 18 has known incompatibilities with the tests for this project (see issue)\nObjective: Build an app that is functionally similar to this: https://markdown-previewer freecodecamp rocks/ Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project You should use a frontend framework (like React for example) because this section is about learning frontend frameworks Additional technologies not listed above are not recommended and using them is at your own risk We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported We will accept and try to fix all issue reports that use the suggested technology stack for this project Happy coding User Story #1: I can see a textarea element with a corresponding id=\"editor\" User Story #2: I can see an element with a corresponding id=\"preview\" User Story #3: When I enter text into the #editor element, the #preview element is updated as I type to display the content of the textarea User Story #4: When I enter GitHub flavored markdown into the #editor element, the text is rendered as HTML in the #preview element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs com/libraries/marked) User Story #5: When my markdown previewer first loads, the default text in the #editor field should contain valid markdown that represents at least one of each of the following elements: a heading element (H1 size), a sub heading element (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text User Story #6: When my markdown previewer first loads, the default markdown in the #editor field should be rendered as HTML in the #preview element Optional Bonus (you do not need to make this test pass): My markdown previewer interprets carriage returns and renders them as br (line break) elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-markdown-previewer.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "947a515f8d5b22e49e809acfba24c67b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-markdown-previewer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "element (H1 size), a sub heading element (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text User Story #6: When my markdown previewer first loads, the default markdown in the #editor field should be rendered as HTML in the #preview element Optional Bonus (you do not need to make this test pass): My markdown previewer interprets carriage returns and renders them as br (line break) elementsYou can build your project by using this CodePen template and clicking Save to create your own pen If you prefer to use another environment, then put this <script> tag into the body of your index html file: <script src=\"https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\"></script>\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-markdown-previewer.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c5fdfa82046d55d1c28a60653dbd5a04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd17\ntitle: Build a JavaScript Calculator\nchallengeType: 3\nforumTopicId: 301371\ndashedName: build-a-javascript-calculator\n--description--\nNote: React 18 has known incompatibilities with the tests for this project (see issue)\nObjective: Build an app that is functionally similar to this: https://javascript-calculator freecodecamp rocks/ Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project You should use a frontend framework (like React for example) because this section is about learning frontend frameworks Additional technologies not listed above are not recommended and using them is at your own risk We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported We will accept and try to fix all issue reports that use the suggested technology stack for this project Happy coding User Story #1: My calculator should contain a clickable element containing an = (equal sign) with a corresponding id=\"equals\" User Story #2: My calculator should contain 10 clickable elements containing one number each from 0-9, with the following corresponding IDs: id=\"zero\", id=\"one\", id=\"two\", id=\"three\", id=\"four\", id=\"five\", id=\"six\", id=\"seven\", id=\"eight\", and id=\"nine\" User Story #3: My calculator should contain 4 clickable elements each containing one of the 4 primary mathematical operators with the following corresponding IDs: id=\"add\", id=\"subtract\", id=\"multiply\", id=\"divide\" User Story #4: My calculator should contain a clickable element containing a (decimal point) symbol with a corresponding id=\"decimal\" User Story #5: My calculator should contain a clickable element with an id=\"clear\" User Story #6: My calculator should contain an element to display values with a corresponding id=\"display\" User Story #7: At any time, pressing the clear button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of display User Story #8: As I input numbers, I should be able to see my input in the element with the id of display",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5186,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "afff82f1e411ef678ae009e661f9fdfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id=\"clear\" User Story #6: My calculator should contain an element to display values with a corresponding id=\"display\" User Story #7: At any time, pressing the clear button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of display User Story #8: As I input numbers, I should be able to see my input in the element with the id of displayUser Story #9: In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, and when I hit =, the correct result should be shown in the element with the id of display User Story #10: When inputting numbers, my calculator should not allow a number to begin with multiple zeros User Story #11: When the decimal element is clicked, a should append to the currently displayed value; two in one number should not be accepted User Story #12: I should be able to perform any operation (+, -, *, /) on numbers containing decimal points User Story #13: If 2 or more operators are entered consecutively, the operation performed should be the last operator entered (excluding the negative (-) sign) For example, if 5 + * 7 = is entered, the result should be 35 (i e 5 * 7); if 5 * - 5 = is entered, the result should be -25 (i e 5 * (-5)) User Story #14: Pressing an operator immediately following = should start a new calculation that operates on the result of the previous evaluation User Story #15: My calculator should have several decimal places of precision when it comes to rounding (note that there is no exact standard, but you should be able to handle calculations like 2 / 7 with reasonable precision to at least 4 decimal places) Note On Calculator Logic: It should be noted that there are two main schools of thought on calculator input logic: immediate execution logic and formula logic Our example utilizes formula logic and observes order of operation precedence, immediate execution does not Either is acceptable, but please note that depending on which you choose, your calculator may yield different results than ours for certain equations (see below example) As long as your math can be verified by another production calculator, please do not consider this a bug EXAMPLE: 3 + 5 x 6 - 2 / 4 =\nImmediate Execution Logic: 11",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5186,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1264881c702640f0adb820b4d2424060",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "logic Our example utilizes formula logic and observes order of operation precedence, immediate execution does not Either is acceptable, but please note that depending on which you choose, your calculator may yield different results than ours for certain equations (see below example) As long as your math can be verified by another production calculator, please do not consider this a bug EXAMPLE: 3 + 5 x 6 - 2 / 4 = Immediate Execution Logic: 115\nFormula/Expression Logic: 32 5\nYou can build your project by using this CodePen template and clicking Save to create your own pen If you prefer to use another environment, then put this <script> tag into the body of your index html file: <script src=\"https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\"></script>\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5186,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9e11249c0fafce6abcb8b20e8ceb5a3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd0f\ntitle: Build a 25 + 5 Clock\nchallengeType: 3\nforumTopicId: 301373\ndashedName: build-a-25--5-clock\n--description--\nNote: React 18 has known incompatibilities with the tests for this project (see issue)\nObjective: Build an app that is functionally similar to this: https://25--5-clock freecodecamp rocks Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project You should use a frontend framework (like React for example) because this section is about learning frontend frameworks Additional technologies not listed above are not recommended and using them is at your own risk We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported We will accept and try to fix all issue reports that use the suggested technology stack for this project Happy coding User Story #1: I can see an element with id=\"break-label\" that contains a string (e g \"Break Length\") User Story #2: I can see an element with id=\"session-label\" that contains a string (e g \"Session Length\") User Story #3: I can see two clickable elements with corresponding IDs: id=\"break-decrement\" and id=\"session-decrement\" User Story #4: I can see two clickable elements with corresponding IDs: id=\"break-increment\" and id=\"session-increment\" User Story #5: I can see an element with a corresponding id=\"break-length\", which by default (on load) displays a value of 5 User Story #6: I can see an element with a corresponding id=\"session-length\", which by default displays a value of 25 User Story #7: I can see an element with a corresponding id=\"timer-label\", that contains a string indicating a session is initialized (e g \"Session\") User Story #8: I can see an element with corresponding id=\"time-left\" NOTE: Paused or running, the value in this field should always be displayed in mm:ss format (i e 25:00) User Story #9: I can see a clickable element with a corresponding id=\"start_stop\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6286,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c1c7ca2613961c777506865b795502ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id=\"session-length\", which by default displays a value of 25 User Story #7: I can see an element with a corresponding id=\"timer-label\", that contains a string indicating a session is initialized (e g \"Session\") User Story #8: I can see an element with corresponding id=\"time-left\" NOTE: Paused or running, the value in this field should always be displayed in mm:ss format (i e 25:00) User Story #9: I can see a clickable element with a corresponding id=\"start_stop\"User Story #10: I can see a clickable element with a corresponding id=\"reset\" User Story #11: When I click the element with the id of reset, any running timer should be stopped, the value within id=\"break-length\" should return to 5, the value within id=\"session-length\" should return to 25, and the element with id=\"time-left\" should reset to its default state User Story #12: When I click the element with the id of break-decrement, the value within id=\"break-length\" decrements by a value of 1, and I can see the updated value User Story #13: When I click the element with the id of break-increment, the value within id=\"break-length\" increments by a value of 1, and I can see the updated value User Story #14: When I click the element with the id of session-decrement, the value within id=\"session-length\" decrements by a value of 1, and I can see the updated value User Story #15: When I click the element with the id of session-increment, the value within id=\"session-length\" increments by a value of 1, and I can see the updated value User Story #16: I should not be able to set a session or break length to <= 0 User Story #17: I should not be able to set a session or break length to > 60 User Story #18: When I first click the element with id=\"start_stop\", the timer should begin running from the value currently displayed in id=\"session-length\", even if the value has been incremented or decremented from the original value of 25",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6286,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6713ced2b548d1ac79922ef46b0147c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "updated value User Story #16: I should not be able to set a session or break length to <= 0 User Story #17: I should not be able to set a session or break length to > 60 User Story #18: When I first click the element with id=\"start_stop\", the timer should begin running from the value currently displayed in id=\"session-length\", even if the value has been incremented or decremented from the original value of 25User Story #19: If the timer is running, the element with the id of time-left should display the remaining time in mm:ss format (decrementing by a value of 1 and updating the display every 1000ms) User Story #20: If the timer is running and I click the element with id=\"start_stop\", the countdown should pause User Story #21: If the timer is paused and I click the element with id=\"start_stop\", the countdown should resume running from the point at which it was paused User Story #22: When a session countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of timer-label should display a string indicating a break has begun User Story #23: When a session countdown reaches zero (NOTE: timer MUST reach 00:00), a new break countdown should begin, counting down from the value currently displayed in the id=\"break-length\" element User Story #24: When a break countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of timer-label should display a string indicating a session has begun User Story #25: When a break countdown reaches zero (NOTE: timer MUST reach 00:00), a new session countdown should begin, counting down from the value currently displayed in the id=\"session-length\" element User Story #26: When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play This should utilize an HTML5 audio tag and have a corresponding id=\"beep\" User Story #27: The audio element with id=\"beep\" must be 1 second or longer User Story #28: The audio element with id of beep must stop playing and be rewound to the beginning when the element with the id of reset is clicked You can build your project by using this CodePen template and clicking Save to create your own pen",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6286,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "97072a4222d002c27c5ee8b11d3f0167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "up should play This should utilize an HTML5 audio tag and have a corresponding id=\"beep\" User Story #27: The audio element with id=\"beep\" must be 1 second or longer User Story #28: The audio element with id of beep must stop playing and be rewound to the beginning when the element with the id of reset is clicked You can build your project by using this CodePen template and clicking Save to create your own penIf you prefer to use another environment, then put this <script> tag into the body of your index html file: <script src=\"https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\"></script>\nOnce you're done, submit the URL to your working project with all its tests passing --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6286,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1b357c17bca2558a0d34298cc12fb5a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-random-quote-machine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd13\ntitle: Build a Random Quote Machine\nchallengeType: 3\nforumTopicId: 301374\ndashedName: build-a-random-quote-machine\n--description--\nNote: React 18 has known incompatibilities with the tests for this project (see issue)\nObjective: Build an app that is functionally similar to this: https://random-quote-machine freecodecamp rocks/ Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project You should use a frontend framework (like React for example) because this section is about learning frontend frameworks Additional technologies not listed above are not recommended and using them is at your own risk We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported We will accept and try to fix all issue reports that use the suggested technology stack for this project Happy coding User Story #1: I can see a wrapper element with a corresponding id=\"quote-box\" User Story #2: Within #quote-box, I can see an element with a corresponding id=\"text\" User Story #3: Within #quote-box, I can see an element with a corresponding id=\"author\" User Story #4: Within #quote-box, I can see a clickable element with a corresponding id=\"new-quote\" User Story #5: Within #quote-box, I can see a clickable a element with a corresponding id=\"tweet-quote\" User Story #6: On first load, my quote machine displays a random quote in the element with id=\"text\" User Story #7: On first load, my quote machine displays the random quote's author in the element with id=\"author\" User Story #8: When the #new-quote button is clicked, my quote machine should fetch a new quote and display it in the #text element User Story #9: My quote machine should fetch the new quote's author when the #new-quote button is clicked and display it in the #author element User Story #10: I can tweet the current quote by clicking on the #tweet-quote a element This a element should include the \"twitter com/intent/tweet\" path in its href attribute to tweet the current quote",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-random-quote-machine.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "85f33258ba745936cde3900619302091",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-random-quote-machine.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is clicked, my quote machine should fetch a new quote and display it in the #text element User Story #9: My quote machine should fetch the new quote's author when the #new-quote button is clicked and display it in the #author element User Story #10: I can tweet the current quote by clicking on the #tweet-quote a element This a element should include the \"twitter com/intent/tweet\" path in its href attribute to tweet the current quoteUser Story #11: The #quote-box wrapper element should be horizontally centered Please run tests with browser's zoom level at 100% and page maximized You can build your project by using this CodePen template and clicking Save to create your own pen If you prefer to use another environment, then put this <script> tag into the body of your index html file: <script src=\"https://cdn freecodecamp org/testable-projects-fcc/v1/bundle js\"></script>\nOnce you're done, submit the URL to your working project with all its tests passing Note: Twitter does not allow links to be loaded in an iframe Try using the target=\"_blank\" or target=\"_top\" attribute on the #tweet-quote element if your tweet won't load target=\"_top\" will replace the current tab so make sure your work is saved --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-random-quote-machine.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "559f70f1700efd24027524b36c02694f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-the-css-of-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed908826\ntitle: Change the CSS of an Element Using jQuery\nchallengeType: 6\nforumTopicId: 16776\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: change-the-css-of-an-element-using-jquery\n--description--\nWe can also change the CSS of an HTML element directly with jQuery.\njQuery has a function called .css() that allows you to change the CSS of an element.\nHere's how we would change its color to blue:\njs\n$(\"#target1\").css(\"color\", \"blue\");\nThis is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.\nDelete your jQuery selectors, leaving an empty document ready function.\nSelect target1 and change its color to red.\n--hints--\nYour target1 element should have red text.\njs\nassert($('#target1').css('color') === 'rgb(255, 0, 0)');\nYou should only use jQuery to add these classes to the element.\njs\nassert(!code.match(/class.*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-the-css-of-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "83f4ea17dad6b570b6337047a7577e82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\clone-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed508826\ntitle: Clone an Element Using jQuery\nchallengeType: 6\nforumTopicId: 16780\ndashedName: clone-an-element-using-jquery\n--description--\nIn addition to moving elements, you can also copy them from one place to another.\njQuery has a function called clone() that makes a copy of an element.\nFor example, if we wanted to copy target2 from our left-well to our right-well, we would use:\njs\n$(\"#target2\").clone().appendTo(\"#right-well\");\nDid you notice this involves sticking two jQuery functions together? This is called function chaining and it's a convenient way to get things done with jQuery.\nClone your target5 element and append it to your left-well.\n--hints--\nYour target5 element should be inside your right-well.\njs\nassert($('#right-well').children('#target5').length > 0);\nA copy of your target5 element should also be inside your left-well.\njs\nassert($('#left-well').children('#target5').length > 0);\nYou should only use jQuery to move these elements.\njs\nassert(!code.match(/class.*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3412,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\clone-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11d97d3cc8adee4979a90636835fe7cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\disable-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed808826\ntitle: Disable an Element Using jQuery\nchallengeType: 6\nforumTopicId: 17563\ndashedName: disable-an-element-using-jquery\n--description--\nYou can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.\nWhen you disable a button, it will become grayed-out and can no longer be clicked.\njQuery has a function called .prop() that allows you to adjust the properties of elements.\nHere's how you would disable all buttons:\njs\n$(\"button\").prop(\"disabled\", true);\nDisable only the target1 button.\n--hints--\nYour target1 button should be disabled.\njs\nassert(\n$('#target1') &&\n$('#target1').prop('disabled') &&\ncode.match(/[\"']disabled[\"'],( true|true)/g)\n);\nNo other buttons should be disabled.\njs\nassert($('#target2') && !$('#target2').prop('disabled'));\nYou should only use jQuery to add these classes to the element.\njs\nassert(!code.match(/disabled[^<]*>/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\disable-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 327,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8b95f89dba19bc5cdf28efc5d3d0c08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\delete-your-jquery-functions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aeda08726\ntitle: Delete Your jQuery Functions\nchallengeType: 6\nforumTopicId: 17561\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: delete-your-jquery-functions\n--description--\nThese animations were cool at first, but now they're getting kind of distracting.\nDelete all three of these jQuery functions from your document ready function, but leave your document ready function itself intact.\n--hints--\nAll three of your jQuery functions should be deleted from your document ready function.\njs\nassert(code.match(/\\{\\s*\\}\\);/g));\nYou should leave your script element intact.\njs\nassert(code.match(/<script>/g));\nYou should leave your $(document).ready(function() { at the beginning of your script element.\njs\nassert(code.match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\s?\\{/g));\nYou should leave the document.ready function's closing }) intact.\njs\nassert(code.match(/.*\\s*\\}\\);/g));\nYou should leave your script element closing tag intact.\njs\nassert(\ncode.match(/<\\/script>/g) &&\ncode.match(/<script/g) &&\ncode.match(/<\\/script>/g).length === code.match(/<script/g).length\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\delete-your-jquery-functions.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5b0d940a546289069d2c5065ad9dd96e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-text-inside-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 564944c91be2204b269d51e3\ntitle: Change Text Inside an Element Using jQuery\nchallengeType: 6\nforumTopicId: 16773\ndashedName: change-text-inside-an-element-using-jquery\n--description--\nUsing jQuery, you can change the text between the start and end tags of an element You can even change HTML markup jQuery has a function called html() that lets you add HTML tags and text within an element Any content previously within the element will be completely replaced with the content you provide using this function Here's how you would rewrite and emphasize the text of our heading:\njs\n$(\"h3\") html(\"<em>jQuery Playground</em>\");\njQuery also has a similar function called text() that only alters text without adding tags In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with Change the button with id target4 by emphasizing its text View our news article for <em> to learn the difference between <i> and <em> and their uses Note that while the <i> tag has traditionally been used to emphasize text, it has since been adopted for use as a tag for icons The <em> tag is now widely accepted as the tag for emphasis Either will work for this challenge --hints--\nYou should emphasize the text in your target4 button by adding HTML tags js\nassert isTrue(\n/<em>|<i>\\s*#target4\\s*<\\/em>|<\\/i>/gi test($('#target4') html())\n);\nThe text should otherwise remain unchanged js\nassert($('#target4') && $('#target4') text() trim() === '#target4');\nYou should not alter any other text js\nassert isFalse(/<em>|<i>/gi test($('h3') html()));\nYou should be using html() and not text() js\nassert(code match(/\\ html\\(/g));\nYou should select button id=\"target4\" with jQuery js\nassert(code match(/\\$\\(\\s* (\\\"|\\')#target4(\\\"|\\')\\s* \\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-text-inside-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "633e3c21caff10efd5f1089c7d4d677c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-text-inside-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will work for this challenge --hints-- You should emphasize the text in your target4 button by adding HTML tags js assert isTrue( /<em>|<i>\\s*#target4\\s*<\\/em>|<\\/i>/gi test($('#target4') html()) ); The text should otherwise remain unchanged js assert($('#target4') && $('#target4') text() trim() === '#target4'); You should not alter any other text js assert isFalse(/<em>|<i>/gi test($('h3') html())); You should be using html() and not text() js assert(code match(/\\ html\\(/g)); You should select button id=\"target4\" with jQuery js assert(code match(/\\$\\(\\s* (\\\"|\\')#target4(\\\"|\\')\\s* \\)\\html\\(/));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-text-inside-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6f56fcf7e0d8a83aafc0ed5476f02cf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed708826\ntitle: Remove an Element Using jQuery\nchallengeType: 6\nforumTopicId: 18262\ndashedName: remove-an-element-using-jquery\n--description--\nNow let's remove an HTML element from your page using jQuery.\njQuery has a function called .remove() that will remove an HTML element entirely.\nRemove the #target4 element from the page by using the .remove() function.\n--hints--\nYou should use jQuery to remove your target4 element from your page.\njs\nassert(\n$('#target4').length === 0 && code.match(/\\$\\([\"']#target4[\"']\\).remove\\(\\)/g)\n);\nYou should only use jQuery to remove this element.\njs\nassert(\ncode.match(/id=\"target4/g) &&\n!code.match(/<!--.*id=\"target4\".*-->/g) &&\n$('#right-well').length > 0\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2911,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2616a2bf6b51bb95ec8134817cdc116",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-classes-from-an-element-with-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed918626\ntitle: Remove Classes from an Element with jQuery\nchallengeType: 6\nforumTopicId: 18264\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: remove-classes-from-an-element-with-jquery\n--description--\nIn the same way you can add classes to an element with jQuery's addClass() function, you can remove them with jQuery's removeClass() function.\nHere's how you would do this for a specific button:\njs\n$(\"#target2\").removeClass(\"btn-default\");\nLet's remove the btn-default class from all of our button elements.\n--hints--\nThe btn-default class should be removed from all of your button elements.\njs\nassert($('.btn-default').length === 0);\nYou should only use jQuery to remove this class from the element.\njs\nassert(code.match(/btn btn-default/g));\nYou should only remove the btn-default class.\njs\nassert(\ncode.match(\n/\\.[\\v\\s]*removeClass[\\s\\v]*\\([\\s\\v]*('|\")\\s*btn-default\\s*('|\")[\\s\\v]*\\)/gm\n)\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-classes-from-an-element-with-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aba860df8155328ea5f5e9605202ef05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-class-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aedc08826\ntitle: Target Elements by Class Using jQuery\nchallengeType: 6\nforumTopicId: 18316\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: target-elements-by-class-using-jquery\n--description--\nYou see how we made all of your button elements bounce? We selected them with $(\"button\"), then we added some CSS classes to them with .addClass(\"animated bounce\");.\nYou just used jQuery's .addClass() function, which allows you to add classes to elements.\nFirst, let's target your div elements with the class well by using the $(\".well\") selector.\nNote that, just like with CSS declarations, you type a . before the class's name.\nThen use jQuery's .addClass() function to add the classes animated and shake.\nFor example, you could make all the elements with the class text-primary shake by adding the following to your document ready function:\njs\n$(\".text-primary\").addClass(\"animated shake\");\n--hints--\nYou should use the jQuery addClass() function to give the classes animated and shake to all your elements with the class well.\njs\nassert($('.well').hasClass('animated') && $('.well').hasClass('shake'));\nYou should only use jQuery to add these classes to the element.\njs\nassert(!code.match(/class\\.\\*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-class-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c529c2a8bfc9aa899f343dd5a4096def",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-a-specific-child-of-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed108826\ntitle: Target a Specific Child of an Element Using jQuery\nchallengeType: 6\nforumTopicId: 18315\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: target-a-specific-child-of-an-element-using-jquery\n--description--\nYou've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.\nFortunately, jQuery has some other tricks for targeting the right elements.\njQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector allows you to select all the nth elements with the target class or element type.\nHere's how you would give the third element in each well the bounce class:\njs\n$(\".target:nth-child(3)\").addClass(\"animated bounce\");\nMake the second child in each of your well elements bounce. You must select the elements' children with the target class.\n--hints--\nThe second element in your target elements should bounce.\njs\nassert(\n$('.target:nth-child(2)').hasClass('animated') &&\n$('.target:nth-child(2)').hasClass('bounce')\n);\nOnly two elements should bounce.\njs\nassert($('.animated.bounce').length === 2);\nYou should use the :nth-child() selector to modify these elements.\njs\nassert(code.match(/\\:nth-child\\(/g));\nYou should only use jQuery to add these classes to the element.\njs\nassert(\ncode.match(/\\$\\(\".target:nth-child\\(2\\)\"\\)/g) ||\ncode.match(/\\$\\('.target:nth-child\\(2\\)'\\)/g) ||\ncode.match(/\\$\\(\".target\"\\).filter\\(\":nth-child\\(2\\)\"\\)/g) ||\ncode.match(/\\$\\('.target'\\).filter\\(':nth-child\\(2\\)'\\)/g)\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4320,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-a-specific-child-of-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "98682c1fa96ed780a544ded6815c27f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-even-elements-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed008826\ntitle: Target Even Elements Using jQuery\nchallengeType: 6\nforumTopicId: 18318\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: target-even-elements-using-jquery\n--description--\nYou can also target elements based on their positions using :odd or :even selectors.\nNote that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, :odd selects the second element (position 1), fourth element (position 3), and so on.\nHere's how you would target all the odd elements with class target and give them classes:\njs\n$(\".target:odd\").addClass(\"animated shake\");\nTry selecting all the even target elements and giving them the classes of animated and shake. Remember that even refers to the position of elements with a zero-based system in mind.\n--hints--\nAll of the target elements that jQuery considers to be even should shake.\njs\nassert(\n$('.target:even').hasClass('animated') && $('.target:even').hasClass('shake')\n);\nYou should use the :even selector to modify these elements.\njs\nassert(code.match(/\\:even/g));\nYou should only use jQuery to add these classes to the element.\njs\nassert(\ncode.match(/\\$\\(\".target:even\"\\)/g) ||\ncode.match(/\\$\\('.target:even'\\)/g) ||\ncode.match(/\\$\\(\".target\"\\).filter\\(\":even\"\\)/g) ||\ncode.match(/\\$\\('.target'\\).filter\\(':even'\\)/g)\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-even-elements-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70d1c00125608c01d7c89928aacf2a2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-html-elements-with-selectors-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9bedc08826\ntitle: Target HTML Elements with Selectors Using jQuery\nchallengeType: 6\nforumTopicId: 18319\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: target-html-elements-with-selectors-using-jquery\n--description--\nNow we have a document ready function.\nNow let's write our first jQuery statement. All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling.\njQuery often selects an HTML element with a selector, then does something to that element.\nFor example, let's make all of your button elements bounce. Just add this code inside your document ready function:\njs\n$(\"button\").addClass(\"animated bounce\");\nNote that we've already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor. So you are using jQuery to apply the Animate.css bounce class to your button elements.\n--hints--\nYou should use the jQuery addClass() function to give the classes animated and bounce to your button elements.\njs\nassert($('button').hasClass('animated') && $('button').hasClass('bounce'));\nYou should only use jQuery to add these classes to the element.\njs\nassert(!code.match(/class.*animated/g));\nYour jQuery code should be within the $(document).ready(); function.\njs\nassert(\ncode.replace(/\\s/g, '').match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\{\\$/g)\n);\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3494,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-html-elements-with-selectors-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0e5dad160f4bbf50e89de513d7a9dcc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-id-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aeda08826\ntitle: Target Elements by id Using jQuery\nchallengeType: 6\nforumTopicId: 18317\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: target-elements-by-id-using-jquery\n--description--\nYou can also target elements by their id attributes.\nFirst target your button element with the id target3 by using the $(\"#target3\") selector.\nNote that, just like with CSS declarations, you type a # before the id's name.\nThen use jQuery's .addClass() function to add the classes animated and fadeOut.\nHere's how you'd make the button element with the id target6 fade out:\njs\n$(\"#target6\").addClass(\"animated fadeOut\");\n--hints--\nYou should select the button element with the id of target3 and use the jQuery addClass() function to give it the class of animated.\njs\nassert($('#target3').hasClass('animated'));\nYou should target the element with the id target3 and use the jQuery addClass() function to give it the class fadeOut.\njs\nassert(\n($('#target3').hasClass('fadeOut') || $('#target3').hasClass('fadeout')) &&\ncode.match(/\\$\\(\\s*.#target3.\\s*\\)/g)\n);\nYou should only use jQuery to add these classes to the element.\njs\nassert(!code.match(/class.*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3491,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-id-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d02f82c04adf40396c4c49f91165decd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\learn-how-script-tags-and-document-ready-work.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9acdd08826\ntitle: Learn How Script Tags and Document Ready Work\nchallengeType: 6\nforumTopicId: 18224\ndashedName: learn-how-script-tags-and-document-ready-work\n--description--\nNow we're ready to learn jQuery, the most popular JavaScript tool of all time Before we can start using jQuery, we need to add some things to our HTML First, add a script element at the top of your page Be sure to close it on the following line Your browser will run any JavaScript inside a script element, including jQuery Inside your script element, add this code: $(document) ready(function() { to your script Then close it on the following line (still inside your script element) with: });\nWe'll learn more about functions later The important thing to know is that code you put inside this function will run as soon as your browser has loaded your page This is important because without your document ready function, your code may run before your HTML is rendered, which would cause bugs --hints--\nYou should create a script element making sure it is valid and has a closing tag js\nassert(\ncode match(/<\\/script\\s*>/g) &&\ncode match(\n/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g\n) &&\ncode match(/<\\/script\\s*>/g) length ===\ncode match(\n/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g\n) length\n);\nYou should add $(document) ready(function() { to the beginning of your script element js\nassert(\ncode match(\n/\\$\\s* \\(\\s* document\\s* \\)\\ ready\\s* \\(\\s* function\\s* \\(\\s* \\)\\s* \\{/g\n)\n);\nYou should close your $(document) ready(function() { function with });\njs\nassert(code match(/\\n* \\s* \\}\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\learn-how-script-tags-and-document-ready-work.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "996ce927730732c96bc6e8626bd54bef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\learn-how-script-tags-and-document-ready-work.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "script element making sure it is valid and has a closing tag js assert( code match(/<\\/script\\s*>/g) && code match( /<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g ) && code match(/<\\/script\\s*>/g) length === code match( /<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g ) length ); You should add $(document) ready(function() { to the beginning of your script element js assert( code match( /\\$\\s* \\(\\s* document\\s* \\)\\ ready\\s* \\(\\s* function\\s* \\(\\s* \\)\\s* \\{/g ) ); You should close your $(document) ready(function() { function with }); js assert(code match(/\\n* \\s* \\}\\s*\\);/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\learn-how-script-tags-and-document-ready-work.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f31a575bef7c0bd9e9df859059d558ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-children-of-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed208826\ntitle: Target the Children of an Element Using jQuery\nchallengeType: 6\nforumTopicId: 18320\ndashedName: target-the-children-of-an-element-using-jquery\n--description--\nWhen HTML elements are placed one level below another they are called children of that element. For example, the button elements in this challenge with the text #target1, #target2, and #target3 are all children of the <div class=\"well\" id=\"left-well\"> element.\njQuery has a function called children() that allows you to access the children of whichever element you've selected.\nHere's an example of how you would use the children() function to give the children of your left-well element the color blue:\njs\n$(\"#left-well\").children().css(\"color\", \"blue\")\n--instructions--\nGive all the children of your right-well element the color orange.\n--hints--\nAll children of #right-well should have orange text.\njs\nassert($('#right-well').children().css('color') === 'rgb(255, 165, 0)');\nYou should use the children() function to modify these elements.\njs\nassert(code.match(/\\.children\\(\\)\\.css/g));\nYou should only use jQuery to add these classes to the element.\njs\nassert(code.match(/<div class=\"well\" id=\"right-well\">/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-children-of-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8e8938bce6b258ef7b2758508bc3f6bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-appendto-to-move-elements-with-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed608826\ntitle: Use appendTo to Move Elements with jQuery\nchallengeType: 6\nforumTopicId: 18340\ndashedName: use-appendto-to-move-elements-with-jquery\n--description--\nNow let's try moving elements from one div to another.\njQuery has a function called appendTo() that allows you to select HTML elements and append them to another element.\nFor example, if we wanted to move target4 from our right well to our left well, we would use:\njs\n$(\"#target4\").appendTo(\"#left-well\");\nMove your target2 element from your left-well to your right-well.\n--hints--\nYour target2 element should not be inside your left-well.\njs\nassert($('#left-well').children('#target2').length === 0);\nYour target2 element should be inside your right-well.\njs\nassert($('#right-well').children('#target2').length > 0);\nYou should only use jQuery to move these elements.\njs\nassert(!code.match(/class.*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-appendto-to-move-elements-with-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2cf06d1fbeda9feae18116335e3a126",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-jquery-to-modify-the-entire-page.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aecb08826\ntitle: Use jQuery to Modify the Entire Page\nchallengeType: 6\nforumTopicId: 18361\nrequired:\n- link: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css'\ndashedName: use-jquery-to-modify-the-entire-page\n--description--\nWe're done playing with our jQuery playground. Let's tear it down!\njQuery can target the body element as well.\nHere's how we would make the entire body fade out: $(\"body\").addClass(\"animated fadeOut\");\nBut let's do something more dramatic. Add the classes animated and hinge to your body element.\n--hints--\nYou should add the classes animated and hinge to your body element.\njs\nassert($('body').hasClass('animated') && $('body').hasClass('hinge'));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-jquery-to-modify-the-entire-page.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3369c9c9c6f695c033b0b58232b8e378",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-parent-of-an-element-using-jquery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed308826\ntitle: Target the Parent of an Element Using jQuery\nchallengeType: 6\nforumTopicId: 18321\ndashedName: target-the-parent-of-an-element-using-jquery\n--description--\nEvery HTML element has a parent element from which it inherits properties For example, the h3 element in your jQuery Playground has the parent element of <div class=\"container-fluid\">, which itself has the parent element of body jQuery has a function called parent() that allows you to access the parent of whichever element you've selected Here's an example of how you would use the parent() function if you wanted to give the parent element of the left-well element a background color of blue:\njs\n$(\"#left-well\") parent() css(\"background-color\", \"blue\")\nGive the parent of the #target1 element a background-color of red --hints--\nYour left-well element should have a red background js\nassert(\n$('#left-well') css('background-color') === 'red' ||\n$('#left-well') css('background-color') === 'rgb(255, 0, 0)' ||\n$('#left-well') css('background-color') toLowerCase() === '#ff0000' ||\n$('#left-well') css('background-color') toLowerCase() === '#f00'\n);\nYou should use the parent() function to modify this element js\nassert(code match(/\\ parent\\s*\\(\\s*\\)\\s*\\ css/g));\nThe parent() method should be called on the #target1 element js\nassert(\ncode match(/\\$\\s* \\(\\s* ( :'|\")\\s* #target1\\s* ( :'|\")\\s* \\)\\s* \\ parent/gi)\n);\nYou should only use jQuery to add these classes to the element js\nassert(code match(/<div class=\"well\" id=\"left-well\">/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-parent-of-an-element-using-jquery.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8e00fcb6b13b8e5a86a5302666d6c495",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-comments-in-jsx.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24bbe0dba28a8d3cbd4c5e\ntitle: Add Comments in JSX\nchallengeType: 6\nforumTopicId: 301376\ndashedName: add-comments-in-jsx\n--description--\nJSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this.\nTo put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.\n--instructions--\nThe code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.\n--hints--\nThe constant JSX should return a div element.\njs\nassert(JSX.type === 'div');\nThe div should contain an h1 tag as the first element.\njs\nassert(JSX.props.children[0].type === 'h1');\nThe div should contain a p tag as the second element.\njs\nassert(JSX.props.children[1].type === 'p');\nThe existing h1 and p elements should not be modified.\njs\nassert(\nJSX.props.children[0].props.children === 'This is a block of JSX' &&\nJSX.props.children[1].props.children === \"Here's a subtitle\"\n);\nThe JSX should use valid comment syntax.\njs\nassert(/<div>[\\s\\S]*{\\s*\\/\\*[\\s\\S]*\\*\\/\\s*}[\\s\\S]*<\\/div>/.test(code));\n--seed--\n--after-user-code--\njsx\nReactDOM.render(JSX, document.getElementById('root'))\n--seed-contents--\n```jsx\nconst JSX = (\nThis is a block of JSX\nHere's a subtitle\n);\n```\n--solutions--\n```jsx\nconst JSX = (\nThis is a block of JSX\n{ /* this is a JSX comment */ }\nHere's a subtitle\n);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-comments-in-jsx.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11769d5057441338c1be348798e53f8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-same-element-with-multiple-jquery-selectors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bad87fee1348bd9aed908626\ntitle: Target the Same Element with Multiple jQuery Selectors\nchallengeType: 6\nforumTopicId: 18322\nrequired:\n- link: 'https://cdnjs cloudflare com/ajax/libs/animate css/3 2 0/animate css'\ndashedName: target-the-same-element-with-multiple-jquery-selectors\n--description--\nNow you know three ways of targeting elements: by type: $(\"button\"), by class: $(\" btn\"), and by id $(\"#target1\") Although it is possible to add multiple classes in a single addClass() call, let's add them to the same element in three separate ways Using addClass(), add only one class at a time to the same element, three different ways:\nAdd the animated class to all elements with type button Add the shake class to all the buttons with class btn Add the btn-primary class to the button with id #target1 Note: You should only be targeting one element and adding only one class at a time Altogether, your three individual selectors will end up adding the three classes shake, animated, and btn-primary to #target1 --hints--\nYour code should use the $(\"button\") selector js\nassert(code match(/\\$\\s* \\(\\s* ( :'|\")\\s* button\\s* ( :'|\")/gi));\nYour code should use the $(\" btn\") selector js\nassert(code match(/\\$\\s* \\(\\s* ( :'|\")\\s* \\ btn\\s* ( :'|\")/gi));\nYour code should use the $(\"#target1\") selector js\nassert(code match(/\\$\\s* \\(\\s* ( :'|\")\\s* #target1\\s* ( :'|\")/gi));\nYou should only add one class with each of your three selectors js\nassert(\ncode match(/addClass/g) &&\ncode match(/addClass\\s* \\(\\s* ('|\")\\s* [\\w-]+\\s* \\1\\s* \\)/g) length > 2\n);\nYour #target1 element should have the classes animated‚ shake and btn-primary js\nassert(\n$('#target1') hasClass('animated') &&\n$('#target1') hasClass('shake') &&\n$('#target1') hasClass('btn-primary')\n);\nYou should only use jQuery to add these classes to the element js\nassert( code match(/class",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-same-element-with-multiple-jquery-selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "17713c01c6616de4971d514bca6e9698",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-same-element-with-multiple-jquery-selectors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "selector js assert(code match(/\\$\\s* \\(\\s* ( :'|\")\\s* #target1\\s* ( :'|\")/gi)); You should only add one class with each of your three selectors js assert( code match(/addClass/g) && code match(/addClass\\s* \\(\\s* ('|\")\\s* [\\w-]+\\s* \\1\\s* \\)/g) length > 2 ); Your #target1 element should have the classes animated‚ shake and btn-primary js assert( $('#target1') hasClass('animated') && $('#target1') hasClass('shake') && $('#target1') hasClass('btn-primary') ); You should only use jQuery to add these classes to the element js assert( code match(/class*animated/g));\n--seed--\n--seed-contents--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```\n--solutions--\n```html\njQuery Playground\n#left-well\n#target1\n#target2\n#target3\n#right-well\n#target4\n#target5\n#target6\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-same-element-with-multiple-jquery-selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "36e0e6736df59d13fab16bfeeb6d9609",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\access-props-using-this.props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616e\ntitle: Access Props Using this props\nchallengeType: 6\nforumTopicId: 301375\ndashedName: access-props-using-this-props\n--description--\nThe last several challenges covered the basic ways to pass props to child components But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component The ES6 class component uses a slightly different convention to access props Anytime you refer to a class component within itself, you use the this keyword To access props within a class component, you preface the code that you use to access it with this For example, if an ES6 class component has a prop called data, you write {this props data} in JSX --instructions--\nRender an instance of the Welcome component in the parent component App Here, give Welcome a prop of name and assign it a value of a string Within the child, Welcome, access the name prop within the strong tags --hints--\nThe App component should return a single div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(App));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe child of App should be the Welcome component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(App));\nreturn (\nmockedComponent children() childAt(0) name() === 'Welcome'\n);\n})()\n);\nThe Welcome component should have a prop called name js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(App));\nreturn mockedComponent find('Welcome') props() name;\n})()\n);\nThe Welcome component should display the string you pass as the name prop within strong tags js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(App));\nreturn (\nmockedComponent find('strong') text() ===\nmockedComponent find('Welcome') props() name\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<App />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass App extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\nclass Welcome extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\access-props-using-this.props.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "886ba9b3e698cfea962afcab7df9473d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\access-props-using-this.props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "within strong tags js assert( (function () { const mockedComponent = Enzyme mount(React createElement(App)); return ( mockedComponent find('strong') text() === mockedComponent find('Welcome') props() name ); })() ); --seed-- --after-user-code-- jsx ReactDOM render(<App />, document getElementById('root')) --seed-contents-- ```jsx class App extends React Component { constructor(props) { super(props); } render() { return ( { / Change code below this line / } { / Change code above this line / } ); } }; class Welcome extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n{ / Change code below this line / }\nHello, { / Change code above this line / }\n);\n}\n};\n```\n--solutions--\n```jsx\nclass Welcome extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n{ / Change code below this line / }\nHello, {this props name} { / Change code above this line / }\n);\n}\n};\nclass App extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\access-props-using-this.props.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "30d90c7f9bc727aa9d5bcc56ece16073",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-inline-styles-in-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036182\ntitle: Add Inline Styles in React\nchallengeType: 6\nforumTopicId: 301378\ndashedName: add-inline-styles-in-react\n--description--\nYou may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the style attribute set to a JavaScript object First, the names of certain CSS style properties use camel case For example, the last challenge set the size of the font with fontSize instead of font-size Hyphenated words like font-size are invalid syntax for JavaScript object properties, so React uses camel case As a rule, any hyphenated style properties are written using camel case in JSX All property value length units (like height, width, and fontSize) are assumed to be in px unless otherwise specified If you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: \"4em\"} Other than the length values that default to px, all other property values should be wrapped in quotes --instructions--\nIf you have a large set of styles, you can assign a style object to a constant to keep your code organized Declare your styles constant as a global variable at the top of the file Initialize styles constant and assign an object with three style properties and their values to it Give the div a color of purple, a font-size of 40, and a border of 2px solid purple Then set the style attribute equal to the styles constant --hints--\nThe styles variable should be an object with three properties js\nassert(Object keys(styles) length === 3);\nThe styles variable should have a color property set to a value of purple js\nassert(styles color === 'purple');\nThe styles variable should have a fontSize property set to a value of 40 js\nassert(styles fontSize == 40);\nThe styles variable should have a border property set to a value of 2px solid purple js\nassert(styles border === '2px solid purple');\nThe component should render a div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme shallow(React createElement(Colorful));\nreturn mockedComponent type() === 'div';\n})()\n);\nThe div element should have its styles defined by the styles object js\nassert(\n(function () {\nconst mockedComponent = Enzyme shallow(React createElement(Colorful));\nreturn (\nmockedComponent props() style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3382,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-inline-styles-in-react.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a78bb780b122814a8018b648ea3502d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-inline-styles-in-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The styles variable should have a border property set to a value of 2px solid purple js assert(styles border === '2px solid purple'); The component should render a div element js assert( (function () { const mockedComponent = Enzyme shallow(React createElement(Colorful)); return mockedComponent type() === 'div'; })() ); The div element should have its styles defined by the styles object js assert( (function () { const mockedComponent = Enzyme shallow(React createElement(Colorful)); return ( mockedComponent props() stylecolor === 'purple' &&\nmockedComponent props() style fontSize == 40 &&\nmockedComponent props() style border === '2px solid purple'\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Colorful />, document getElementById('root'))\n--seed-contents--\njsx\n// Change code above this line\nclass Colorful extends React Component {\nrender() {\n// Change code below this line\nreturn (\n<div style={{color: \"yellow\", fontSize: 24}}>Style Me </div>\n);\n// Change code above this line\n}\n};\n--solutions--\njsx\nconst styles = {\ncolor: \"purple\",\nfontSize: 40,\nborder: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React Component {\nrender() {\n// Change code below this line\nreturn (\n<div style={styles}>Style Me </div>\n);\n// Change code above this line\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3382,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-inline-styles-in-react.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c1807cf6ca3a7ee7f555b09d5f3f4816",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403617e\ntitle: Add Event Listeners\nchallengeType: 6\nforumTopicId: 301377\ndashedName: add-event-listeners\n--description--\nThe componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality React provides a synthetic event system which wraps the native event system present in browsers This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers You've already been using some of these synthetic event handlers such as onClick() React's synthetic event system is great to use for most interactions you'll manage on DOM elements However, if you want to attach an event handler to the document or window objects, you have to do this directly --instructions--\nAttach an event listener in the componentDidMount() method for keydown events and have these events trigger the callback handleKeyPress() You can use document addEventListener() which takes the event (in quotes) as the first argument and the callback as the second argument Then, in componentWillUnmount(), remove this same event listener You can pass the same arguments to document removeEventListener() It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed Removing event listeners is an example of one such clean up action --hints--\nMyComponent should render a div element which wraps an h1 tag js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent find('div') children() find('h1') length === 1;\n})()\n);\nA keydown listener should be attached to the document in componentDidMount js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst didMountString = mockedComponent instance() componentDidMount toString();\nreturn new RegExp(\n'document addEventListener( |\\n|\\r)+keydown( |\\n|\\r)+this handleKeyPress'\n) test(didMountString);\n})()\n);\nThe keydown listener should be removed from the document in componentWillUnmount js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst willUnmountString = mockedComponent instance() componentWillUnmount toString();\nreturn new RegExp(\n'document removeEventListener( |\\n|\\r)+keydown( |\\n|\\r)+this handleKeyPress'\n)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "00ee53732656bf36d17711f98518735b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should be attached to the document in componentDidMount js assert( (() => { const mockedComponent = Enzyme mount(React createElement(MyComponent)); const didMountString = mockedComponent instance() componentDidMount toString(); return new RegExp( 'document addEventListener( |\\n|\\r)+keydown( |\\n|\\r)+this handleKeyPress' ) test(didMountString); })() ); The keydown listener should be removed from the document in componentWillUnmount js assert( (() => { const mockedComponent = Enzyme mount(React createElement(MyComponent)); const willUnmountString = mockedComponent instance() componentWillUnmount toString(); return new RegExp( 'document removeEventListener( |\\n|\\r)+keydown( |\\n|\\r)+this handleKeyPress' )test(willUnmountString);\n})()\n);\nOnce the component has mounted, pressing enter should update its state and the rendered h1 tag js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst beforeState = mockedComponent state('message');\nconst beforeText = mockedComponent find('h1') text();\nconst pressEnterKey = () => {\nmockedComponent instance() handleKeyPress({ keyCode: 13 });\nreturn waitForIt(() => {\nmockedComponent update();\nreturn {\nstate: mockedComponent state('message'),\ntext: mockedComponent find('h1') text()\n};\n});\n};\nconst afterKeyPress = await pressEnterKey();\nassert(\nbeforeState == afterKeyPress state && beforeText == afterKeyPress text\n);\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nmessage: ''\n};\nthis handleEnter = this handleEnter bind(this);\nthis handleKeyPress = this handleKeyPress bind(this);\n}\n// Change code below this line\ncomponentDidMount() {\n}\ncomponentWillUnmount() {\n}\n// Change code above this line\nhandleEnter() {\nthis setState((state) => ({\nmessage: state message + 'You pressed the enter key '\n}));\n}\nhandleKeyPress(event) {\nif (event keyCode === 13) {\nthis handleEnter();\n}\n}\nrender() {\nreturn (\n{this state message}\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2562cf99e5e6d4b18fe89670589ff78f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= this handleEnter bind(this); this handleKeyPress = this handleKeyPress bind(this); } // Change code below this line componentDidMount() { } componentWillUnmount() { } // Change code above this line handleEnter() { this setState((state) => ({ message: state message + 'You pressed the enter key ' })); } handleKeyPress(event) { if (event keyCode === 13) { this handleEnter(); } } render() { return ( {this state message} ); } }; ``` --solutions-- jsx class MyComponent extends ReactComponent {\nconstructor(props) {\nsuper(props);\nthis state = {\nmessage: ''\n};\nthis handleKeyPress = this handleKeyPress bind(this);\nthis handleEnter = this handleEnter bind(this);  }\ncomponentDidMount() {\n// Change code below this line\ndocument addEventListener('keydown', this handleKeyPress);\n// Change code above this line\n}\ncomponentWillUnmount() {\n// Change code below this line\ndocument removeEventListener('keydown', this handleKeyPress);\n// Change code above this line\n}\nhandleEnter() {\nthis setState((state) => ({\nmessage: state message + 'You pressed the enter key '\n}));\n}\nhandleKeyPress(event) {\nif (event keyCode === 13) {\nthis handleEnter();\n}\n}\nrender() {\nreturn (\n<div>\n<h1>{this state message}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cbcf11a32cd9d28416343e68b6a86046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036174\ntitle: Bind 'this' to a Class Method\nchallengeType: 6\nforumTopicId: 301379\ndashedName: bind-this-to-a-class-method\n--description--\nIn addition to setting and updating state, you can also define methods for your component class A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method There are a few ways to allow your class methods to access this One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized You may have noticed the last challenge used this handleClick = this handleClick bind(this) for its handleClick method in the constructor Then, when you call a function like this setState() within your class method, this refers to the class and will not be undefined Note: The this keyword is one of the most confusing aspects of JavaScript but it plays an important role in React Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of this so please refer to other lessons if the above is confusing --instructions--\nThe code editor has a component with a state that keeps track of the text It also has a method which allows you to set the text to You clicked However, the method doesn't work because it's using the this keyword that is undefined Fix it by explicitly binding this to the handleClick() method in the component's constructor Next, add a click handler to the button element in the render method It should trigger the handleClick() method when the button receives a click event Remember that the method you pass to the onClick handler needs curly braces because it should be interpreted directly as JavaScript Once you complete the above steps you should be able to click the button and see You clicked --hints--\nMyComponent should return a div element which wraps two elements, a button and an h1 element, in that order js\nassert(\nEnzyme mount(React createElement(MyComponent)) find('div') length === 1 &&\nEnzyme mount(React createElement(MyComponent)) find('div') childAt(0) type() === 'button' &&\nEnzyme mount(React createElement(MyComponent)) find('div') childAt(1) type() === 'h1'\n);\nThe state of MyComponent should initialize with the key value pair { text: \"Hello\" }",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f9ad75544457f116e5b2a9826a5700bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "steps you should be able to click the button and see You clicked --hints-- MyComponent should return a div element which wraps two elements, a button and an h1 element, in that order js assert( Enzyme mount(React createElement(MyComponent)) find('div') length === 1 && Enzyme mount(React createElement(MyComponent)) find('div') childAt(0) type() === 'button' && Enzyme mount(React createElement(MyComponent)) find('div') childAt(1) type() === 'h1' ); The state of MyComponent should initialize with the key value pair { text: \"Hello\" }js\nassert(\nEnzyme mount(React createElement(MyComponent)) state('text') === 'Hello'\n);\nClicking the button element should run the handleClick method and set the state text to You clicked js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ text: 'Hello' });\nreturn waitForIt(() => mockedComponent state('text'));\n};\nconst second = () => {\nmockedComponent find('button') simulate('click');\nreturn waitForIt(() => mockedComponent state('text'));\n};\nconst firstValue = await first();\nconst secondValue = await second();\nassert(firstValue === 'Hello' && secondValue === 'You clicked ');\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ntext: \"Hello\"\n};\n// Change code below this line\n// Change code above this line\n}\nhandleClick() {\nthis setState({\ntext: \"You clicked \"\n});\n}\nrender() {\nreturn (\n{ / Change code below this line / }\nClick Me\n{ / Change code above this line / }\n{this state text}\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ntext: \"Hello\"\n};\nthis handleClick = this handleClick bind(this);\n}\nhandleClick() {\nthis setState({\ntext: \"You clicked \"\n});\n}\nrender() {\nreturn (\n<div>\n<button onClick = {this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c0bdab5e46939a58d1b38fdde6412a62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} render() { return ( { / Change code below this line / } Click Me { / Change code above this line / } {this state text} ); } }; ``` --solutions-- jsx class MyComponent extends React Component { constructor(props) { super(props); this state = { text: \"Hello\" }; this handleClick = this handleClick bind(this); } handleClick() { this setState({ text: \"You clicked \" }); } render() { return ( <div> <button onClick = {thishandleClick}>Click Me</button>\n<h1>{this state text}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fb1d168b2596cd7eaf5edf9293bde2f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036166\ntitle: Compose React Components\nchallengeType: 6\nforumTopicId: 301381\ndashedName: compose-react-components\n--description--\nAs the challenges continue to use more complex compositions with React components and JSX, there is one important point to note Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges You can render JSX elements, stateless functional components, and ES6 class components within other components --instructions--\nIn the code editor, the TypesOfFood component is already rendering a component called Vegetables Also, there is the Fruits component from the last challenge Nest two components inside of Fruits — first NonCitrus, and then Citrus Both of these components are provided for you behind the scenes Next, nest the Fruits class component into the TypesOfFood component, below the h1 heading element and above Vegetables The result should be a series of nested components, which uses two different component types --hints--\nThe TypesOfFood component should return a single div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe TypesOfFood component should return the Fruits component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() childAt(1) name() === 'Fruits';\n})()\n);\nThe Fruits component should return the NonCitrus component and the Citrus component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn (\nmockedComponent find('Fruits') children() find('NonCitrus') length ===\n1 &&\nmockedComponent find('Fruits') children() find('Citrus') length === 1\n);\n})()\n);\nThe TypesOfFood component should return the Vegetables component below the Fruits component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() childAt(2) name() === 'Vegetables';\n})()\n);\n--seed--\n--before-user-code--\njsx\nclass NonCitrus extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c62be9a1c7349c2f8fb4e1e6bf6a9f7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "NonCitrus component and the Citrus component js assert( (function () { const mockedComponent = Enzyme mount(React createElement(TypesOfFood)); return ( mockedComponent find('Fruits') children() find('NonCitrus') length === 1 && mockedComponent find('Fruits') children() find('Citrus') length === 1 ); })() ); The TypesOfFood component should return the Vegetables component below the Fruits component js assert( (function () { const mockedComponent = Enzyme mount(React createElement(TypesOfFood)); return mockedComponent children() childAt(2) name() === 'Vegetables'; })() ); --seed-- --before-user-code-- jsx class NonCitrus extends ReactComponent {\nrender() {\nreturn (\n<div>\n<h4>Non-Citrus:</h4>\n<ul>\n<li>Apples</li>\n<li>Blueberries</li>\n<li>Strawberries</li>\n<li>Bananas</li>\n</ul>\n</div>\n);\n}\n};\nclass Citrus extends React Component {\nrender() {\nreturn (\n<div>\n<h4>Citrus:</h4>\n<ul>\n<li>Lemon</li>\n<li>Lime</li>\n<li>Orange</li>\n<li>Grapefruit</li>\n</ul>\n</div>\n);\n}\n};\nclass Vegetables extends React Component {\nrender() {\nreturn (\n<div>\n<h2>Vegetables:</h2>\n<ul>\n<li>Brussel Sprouts</li>\n<li>Broccoli</li>\n<li>Squash</li>\n</ul>\n</div>\n);\n}\n};\n--after-user-code--\njsx\nReactDOM render(<TypesOfFood />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass Fruits extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nFruits:\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\nclass TypesOfFood extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n<Vegetables />\n</div>\n);\n}\n};\n```\n--solutions--\n```jsx\nclass Fruits extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0de8c78d985efedf28362caa79326bd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} render() { return ( Fruits: { / Change code below this line / } { /* Change code above this line */ } </div> ); } }; class TypesOfFood extends React Component { constructor(props) { super(props); } render() { return ( Types of Food: { / Change code below this line / } { /* Change code above this line */ } <Vegetables /> </div> ); } }; ``` --solutions-- ```jsx class Fruits extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nFruits:\n{ / Change code below this line / }\n{ / Change code above this line / }\n)\n}\n}\nclass TypesOfFood extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "124eafa7921736a6db69a0eb804add46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-complex-jsx-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24bbe0dba28a8d3cbd4c5d\ntitle: Create a Complex JSX Element\nchallengeType: 6\nforumTopicId: 301382\ndashedName: create-a-complex-jsx-element\n--description--\nThe last challenge was a simple example of JSX, but JSX can represent more complex HTML as well One important thing to know about nested JSX is that it must return a single element This one parent element would wrap all of the other levels of nested elements For instance, several JSX elements written as siblings with no parent wrapper element will not transpile Here's an example:\nValid JSX:\n```jsx\nParagraph One\nParagraph Two\nParagraph Three\n```\nInvalid JSX:\n```jsx\nParagraph One\nParagraph Two\nParagraph Three\n```\n--instructions--\nDefine a new constant JSX that renders a div which contains the following elements in order:\nAn h1, a p, and an unordered list that contains three li items You can include any text you want within each element Note: When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required Also notice this challenge uses a div tag to wrap all the child elements within a single parent element If you remove the div, the JSX will no longer transpile Keep this in mind, since it will also apply when you return JSX elements in React components --hints--\nThe constant JSX should return a div element js\nassert(JSX type === 'div');\nThe div should contain an h1 tag as the first element js\nassert(JSX props children[0] type === 'h1');\nThe div should contain a p tag as the second element js\nassert(JSX props children[1] type === 'p');\nThe div should contain a ul tag as the third element js\nassert(JSX props children[2] type === 'ul');\nThe ul should contain three li elements js\nassert(\nJSX props children filter((ele) => ele type === 'ul')[0] props children filter((ele) => ele type === 'li') length === 3\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(JSX, document getElementById('root'))\n--seed-contents--\n```jsx\n```\n--solutions--\n```jsx\nconst JSX = (\nHello JSX Some info\nAn item\nAnother item\nA third item\n);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-complex-jsx-element.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "190eab6a8f064d63e0a88ebf58e7cddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036189\ntitle: Change Inline CSS Conditionally Based on Component State\nchallengeType: 6\nforumTopicId: 301380\ndashedName: change-inline-css-conditionally-based-on-component-state\n--description--\nAt this point, you've seen several applications of conditional rendering and the use of inline styles Here's one more example that combines both of these topics You can also render CSS conditionally based on the state of a React component To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method This paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example) In that approach, you must keep track of when elements change and also handle the actual manipulation directly It can become difficult to keep track of changes, potentially making your UI unpredictable When you set a style object based on a condition, you describe how the UI should look as a function of the application's state There is a clear flow of information that only moves in one direction This is the preferred method when writing applications with React --instructions--\nThe code editor has a simple controlled input component with a styled border You want to style this border red if the user types more than 15 characters of text in the input box Add a condition to check for this and, if the condition is valid, set the input border style to 3px solid red You can try it out by entering text in the input --hints--\nThe GateKeeper component should render a div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(GateKeeper));\nreturn mockedComponent find('div') length === 1;\n})()\n);\nThe GateKeeper component should be initialized with a state key input set to an empty string js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(GateKeeper));\nreturn mockedComponent state() input === '';\n})()\n);\nThe GateKeeper component should render an h3 tag and an input tag js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(GateKeeper));\nreturn (\nmockedComponent find('h3') length === 1 &&\nmockedComponent find('input')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5364,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "32e050205436542591aa7824c703bbfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return mockedComponent find('div') length === 1; })() ); The GateKeeper component should be initialized with a state key input set to an empty string js assert( (function () { const mockedComponent = Enzyme mount(React createElement(GateKeeper)); return mockedComponent state() input === ''; })() ); The GateKeeper component should render an h3 tag and an input tag js assert( (function () { const mockedComponent = Enzyme mount(React createElement(GateKeeper)); return ( mockedComponent find('h3') length === 1 && mockedComponent find('input')length === 1\n);\n})()\n);\nThe input tag should initially have a style of 1px solid black for the border property js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(GateKeeper));\nreturn (\nmockedComponent find('input') props() style border === '1px solid black'\n);\n})()\n);\nThe input tag should be styled with a border of 3px solid red if the input value in state is longer than 15 characters js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\nconst mockedComponent = Enzyme mount(React createElement(GateKeeper));\nconst simulateChange = (el, value) =>\nel simulate('change', { target: { value } });\nlet initialStyle = mockedComponent find('input') props() style border;\nconst state_1 = () => {\nmockedComponent setState({ input: 'this is 15 char' });\nreturn waitForIt(() => mockedComponent find('input') props() style border);\n};\nconst state_2 = () => {\nmockedComponent setState({\ninput: 'A very long string longer than 15 characters '\n});\nreturn waitForIt(() => mockedComponent find('input') props() style border);\n};\nconst style_1 = await state_1();\nconst style_2 = await state_2();\nassert(\ninitialStyle === '1px solid black' &&\nstyle_1 === '1px solid black' &&\nstyle_2 === '3px solid red'\n);\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<GateKeeper />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass GateKeeper extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: ''\n};\nthis handleChange = this handleChange",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5364,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "de797667baf5ab42333dd118c6c419fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "longer than 15 characters ' }); return waitForIt(() => mockedComponent find('input') props() style border); }; const style_1 = await state_1(); const style_2 = await state_2(); assert( initialStyle === '1px solid black' && style_1 === '1px solid black' && style_2 === '3px solid red' ); }; --seed-- --after-user-code-- jsx ReactDOM render(<GateKeeper />, document getElementById('root')) --seed-contents-- ```jsx class GateKeeper extends React Component { constructor(props) { super(props); this state = { input: '' }; this handleChange = this handleChangebind(this);\n}\nhandleChange(event) {\nthis setState({ input: event target value })\n}\nrender() {\nlet inputStyle = {\nborder: '1px solid black'\n};\n// Change code below this line\n// Change code above this line\nreturn (\n<div>\n<h3>Don't Type Too Much:</h3>\n<input\ntype=\"text\"\nstyle={inputStyle}\nvalue={this state input}\nonChange={this handleChange} />\n</div>\n);\n}\n};\n```\n--solutions--\njsx\nclass GateKeeper extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: ''\n};\nthis handleChange = this handleChange bind(this);\n}\nhandleChange(event) {\nthis setState({ input: event target value })\n}\nrender() {\nlet inputStyle = {\nborder: '1px solid black'\n};\nif (this state input length > 15) {\ninputStyle border = '3px solid red';\n};\nreturn (\n<div>\n<h3>Don't Type Too Much:</h3>\n<input\ntype=\"text\"\nstyle={inputStyle}\nvalue={this state input}\nonChange={this handleChange} />\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5364,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4969edc521827103df24b04cfff7a2fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-component-with-composition.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036164\ntitle: Create a Component with Composition\nchallengeType: 6\nforumTopicId: 301383\ndashedName: create-a-component-with-composition\n--description--\nNow we will look at how we can compose multiple React components together Imagine you are building an app and have created three components: a Navbar, Dashboard, and Footer To compose these components together, you could create an App parent component which renders each of these three components as children To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX For example, in the render method you could write:\n```jsx\nreturn (\n)\n```\nWhen React encounters a custom HTML tag that references another component (a component name wrapped in < /> like in this example), it renders the markup for that component in the location of the tag This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer --instructions--\nIn the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent Compose the two together by rendering the ChildComponent within the ParentComponent Make sure to close the ChildComponent tag with a forward slash Note: ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React --hints--\nThe React component should return a single div element js\nassert(\n(function () {\nvar shallowRender = Enzyme shallow(React createElement(ParentComponent));\nreturn shallowRender type() === 'div';\n})()\n);\nThe component should return two nested elements js\nassert(\n(function () {\nvar shallowRender = Enzyme shallow(React createElement(ParentComponent));\nreturn shallowRender children() length === 2;\n})()\n);\nThe component should return the ChildComponent as its second child js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ParentComponent));\nreturn (\nmockedComponent find('ParentComponent') find('ChildComponent') length ===\n1\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<ParentComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst ChildComponent = () => {\nreturn (\nI am the child\n);\n};\nclass ParentComponent extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-component-with-composition.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7dfba5adf8821a67d47d92aeb7d31b5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-component-with-composition.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() { var shallowRender = Enzyme shallow(React createElement(ParentComponent)); return shallowRender children() length === 2; })() ); The component should return the ChildComponent as its second child js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ParentComponent)); return ( mockedComponent find('ParentComponent') find('ChildComponent') length === 1 ); })() ); --seed-- --after-user-code-- jsx ReactDOM render(<ParentComponent />, document getElementById('root')) --seed-contents-- ```jsx const ChildComponent = () => { return ( I am the child ); }; class ParentComponent extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nI am the parent\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\n```\n--solutions--\n```jsx\nconst ChildComponent = () => {\nreturn (\nI am the child\n);\n};\nclass ParentComponent extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nI am the parent\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-component-with-composition.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bc507a8e11f72e98701045da7285a868",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-simple-jsx-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbc367417b2b2512bb1\ntitle: Create a Simple JSX Element\nchallengeType: 6\nforumTopicId: 301390\ndashedName: create-a-simple-jsx-element\n--description--\nReact is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.\nReact uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.\nFor instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }. Keep this in mind, since it's used in several future challenges.\nHowever, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.\nIt's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root')). This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.\n--instructions--\nThe current code uses JSX to assign a div element to the constant JSX. Replace the div with an h1 element and add the text Hello JSX! inside it.\n--hints--\nThe constant JSX should return an h1 element.\njs\nassert(JSX.type === 'h1');\nThe h1 tag should include the text Hello JSX!\njs\nassert(Enzyme.shallow(JSX).contains('Hello JSX!'));\n--seed--\n--after-user-code--\njsx\nReactDOM.render(JSX, document.getElementById('root'))\n--seed-contents--\njsx\nconst JSX = <div></div>;\n--solutions--\njsx\nconst JSX = <h1>Hello JSX!</h1>;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-simple-jsx-element.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb84551e327f7414a2c7a6e36eeb105c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036178\ntitle: Create a Controlled Input\nchallengeType: 6\nforumTopicId: 301385\ndashedName: create-a-controlled-input\n--description--\nYour application may have more complex interactions between state and the rendered UI For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM as the user types With React, you can move this mutable state into a React component's state The user's input becomes part of the application state, so React controls the value of that input field Typically, if you have React components with input fields the user can type into, it will be a controlled input form --instructions--\nThe code editor has the skeleton of a component called ControlledInput to create a controlled input element The component's state is already initialized with an input property that holds an empty string This value represents the text a user types into the input field First, create a method called handleChange() that has a parameter called event When the method is called, it receives an event object that contains a string of text from the input element You can access this string with event target value inside the method Update the input property of the component's state with this new string In the render method, create the input element above the h4 tag Add a value attribute which is equal to the input property of the component's state Then add an onChange property set to the handleChange() event handler method When you type in the input box, that text is processed by the handleChange() method, set as the input property in the local state, and rendered as the value in the input box on the page The component state is the single source of truth regarding the input data Last but not least, don't forget to add the necessary bindings in the constructor --hints--\nControlledInput should return a div element which contains an input and a p tag js\nassert(\nEnzyme mount(React createElement(ControlledInput)) find('div') children() find('input') length === 1 &&\nEnzyme mount(React createElement(ControlledInput)) find('div') children() find('p') length === 1\n);\nThe state of ControlledInput should initialize with an input property set to an empty string js\nassert strictEqual(\nEnzyme mount(React createElement(ControlledInput))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d5a8697883bf85992e76258e26bead75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "regarding the input data Last but not least, don't forget to add the necessary bindings in the constructor --hints-- ControlledInput should return a div element which contains an input and a p tag js assert( Enzyme mount(React createElement(ControlledInput)) find('div') children() find('input') length === 1 && Enzyme mount(React createElement(ControlledInput)) find('div') children() find('p') length === 1 ); The state of ControlledInput should initialize with an input property set to an empty string js assert strictEqual( Enzyme mount(React createElement(ControlledInput))state('input'),\n''\n);\nTyping in the input element should update the state and the value of the input, and the p element should render this state as you type js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(ControlledInput));\nconst _1 = () => {\nmockedComponent setState({ input: '' });\nreturn waitForIt(() => mockedComponent state('input'));\n};\nconst _2 = () => {\nmockedComponent find('input') simulate('change', { target: { value: 'TestInput' } });\nreturn waitForIt(() => ({\nstate: mockedComponent state('input'),\ntext: mockedComponent find('p') text(),\ninputVal: mockedComponent find('input') props() value\n}));\n};\nconst before = await _1();\nconst after = await _2();\nassert(\nbefore === '' &&\nafter state === 'TestInput' &&\nafter text === 'TestInput' &&\nafter inputVal === 'TestInput'\n);\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<ControlledInput />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass ControlledInput extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: ''\n};\n// Change code below this line\n// Change code above this line\n}\n// Change code below this line\n// Change code above this line\nrender() {\nreturn (\n{ / Change code below this line /}\n{ /* Change code above this line */}\n<h4>Controlled Input:</h4>\n<p>{this state input}</p>\n</div>\n);\n}\n};\n```\n--solutions--\n```jsx\nclass ControlledInput extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cb1a6dad886d538441d9839485203d30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ControlledInput extends React Component { constructor(props) { super(props); this state = { input: '' }; // Change code below this line // Change code above this line } // Change code below this line // Change code above this line render() { return ( { / Change code below this line /} { /* Change code above this line */} <h4>Controlled Input:</h4> <p>{this state input}</p> </div> ); } }; ``` --solutions-- ```jsx class ControlledInput extends ReactComponent {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: ''\n};\nthis handleChange = this handleChange bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nrender() {\nreturn (\nControlled Input:\n<p>{this state input}</p>\n</div>\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "27b04a6f2129d647637bcee31b35ed24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036179\ntitle: Create a Controlled Form\nchallengeType: 6\nforumTopicId: 301384\ndashedName: create-a-controlled-form\n--description--\nThe last challenge showed that React can control the internal state for certain elements like input and textarea, which makes them controlled components This applies to other form elements as well, including the regular HTML form element --instructions--\nThe MyForm component is set up with an empty form with a submit handler The submit handler will be called when the form is submitted We've added a button which submits the form You can see it has the type set to submit indicating it is the button controlling the form Add the input element in the form and set its value and onChange() attributes like the last challenge You should then complete the handleSubmit method so that it sets the component state property submit to the current input value in the local state Note: You also must call event preventDefault() in the submit handler, to prevent the default form submit behavior which will refresh the web page For camper convenience, the default behavior has been disabled here to prevent refreshes from resetting challenge code Finally, create an h1 tag after the form which renders the submit value from the component's state You can then type in the form and click the button (or press enter), and you should see your input rendered to the page --hints--\nMyForm should return a div element which contains a form and an h1 tag The form should include an input and a button js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyForm));\nreturn (\nmockedComponent find('div') children() find('form') length === 1 &&\nmockedComponent find('div') children() find('h1') length === 1 &&\nmockedComponent find('form') children() find('input') length === 1 &&\nmockedComponent find('form') children() find('button') length === 1\n);\n})()\n);\nThe state of MyForm should initialize with input and submit properties, both set to empty strings js\nassert(\nEnzyme mount(React createElement(MyForm)) state('input') === '' &&\nEnzyme mount(React createElement(MyForm)) state('submit') === ''\n);\nTyping in the input element should update the input property of the component's state js\n(() => {\nconst mockedComponent = Enzyme mount(React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "48e1f6e736b58cabf7bfeecfd4e5a22b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=== 1 && mockedComponent find('form') children() find('input') length === 1 && mockedComponent find('form') children() find('button') length === 1 ); })() ); The state of MyForm should initialize with input and submit properties, both set to empty strings js assert( Enzyme mount(React createElement(MyForm)) state('input') === '' && Enzyme mount(React createElement(MyForm)) state('submit') === '' ); Typing in the input element should update the input property of the component's state js (() => { const mockedComponent = Enzyme mount(ReactcreateElement(MyForm));\nconst _1 = () => {\nmockedComponent setState({ input: '' });\nreturn mockedComponent state('input');\n};\nconst _2 = () => {\nmockedComponent find('input') simulate('change', { target: { value: 'TestInput' } });\nreturn {\nstate: mockedComponent state('input'),\ninputVal: mockedComponent find('input') props() value\n};\n};\nconst before = _1();\nconst after = _2();\nassert(\nbefore === '' &&\nafter state === 'TestInput' &&\nafter inputVal === 'TestInput'\n);\n})();\nSubmitting the form should run handleSubmit which should set the submit property in state equal to the current input js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyForm));\nconst _1 = () => {\nmockedComponent setState({ input: '' });\nmockedComponent setState({ submit: '' });\nmockedComponent find('input') simulate('change', { target: { value: 'SubmitInput' } });\nreturn mockedComponent state('submit');\n};\nconst _2 = () => {\nmockedComponent find('form') simulate('submit');\nreturn mockedComponent state('submit');\n};\nconst before = _1();\nconst after = _2();\nassert(before === '' && after === 'SubmitInput');\n})();\nhandleSubmit should call event preventDefault\njs\nassert(\n__helpers isCalledWithNoArgs(\n'event preventDefault',\nMyForm prototype handleSubmit toString()\n)\n);\nThe h1 heading element should render the value of the submit field from the component's state js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyForm));\nconst _1 = () => {\nmockedComponent setState({ input: '' });\nmockedComponent setState({ submit: '' });\nmockedComponent find('input')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f2c70101882e37b85fcba498718102e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "before = _1(); const after = _2(); assert(before === '' && after === 'SubmitInput'); })(); handleSubmit should call event preventDefault js assert( __helpers isCalledWithNoArgs( 'event preventDefault', MyForm prototype handleSubmit toString() ) ); The h1 heading element should render the value of the submit field from the component's state js (() => { const mockedComponent = Enzyme mount(React createElement(MyForm)); const _1 = () => { mockedComponent setState({ input: '' }); mockedComponent setState({ submit: '' }); mockedComponent find('input')simulate('change', { target: { value: 'TestInput' } });\nreturn mockedComponent find('h1') text();\n};\nconst _2 = () => {\nmockedComponent find('form') simulate('submit');\nreturn mockedComponent find('h1') text();\n};\nconst before = _1();\nconst after = _2();\nassert(before === '' && after === 'TestInput');\n})();\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyForm />, document getElementById('root'));\n--seed-contents--\n```jsx\nclass MyForm extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nsubmit: ''\n};\nthis handleChange = this handleChange bind(this);\nthis handleSubmit = this handleSubmit bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nhandleSubmit(event) {\n// Change code below this line\n// Change code above this line\n}\nrender() {\nreturn (\n{/ Change code below this line /}\n{/* Change code above this line */}\n<button type='submit'>Submit </button>\n</form>\n{/* Change code below this line */}\n{/* Change code above this line */}\n</div>\n);\n}\n}\n```\n--solutions--\njsx\nclass MyForm extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nsubmit: ''\n};\nthis handleChange = this handleChange bind(this);\nthis handleSubmit = this handleSubmit bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nhandleSubmit(event) {\nevent preventDefault();\nthis setState(state => ({\nsubmit: state input\n}));\n}\nrender() {\nreturn (\n<div>\n<form onSubmit={this handleSubmit}>\n<input value={this state input} onChange={this handleChange} />\n<button type='submit'>Submit </button>\n</form>\n<h1>{this state submit}</h1>\n</div>\n);\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bb78e0ba00f94b70b6a45b9bc95fab2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-react-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036163\ntitle: Create a React Component\nchallengeType: 6\nforumTopicId: 301386\ndashedName: create-a-react-component\n--description--\nThe other way to define a React component is with the ES6 class syntax In the following example, Kitten extends React Component:\n```jsx\nclass Kitten extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nHi\n);\n}\n}\n```\nThis creates an ES6 class Kitten which extends the React Component class So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks Don't worry if you aren't familiar with these terms yet, they will be covered in greater detail in later challenges Also notice the Kitten class has a constructor defined within it that calls super() It uses super() to call the constructor of the parent class, in this case React Component The constructor is a special method used during the initialization of objects that are created with the class keyword It is best practice to call a component's constructor with super, and pass props to both This makes sure the component is initialized properly For now, know that it is standard for this code to be included Soon you will see other uses for the constructor as well as props --instructions--\nMyComponent is defined in the code editor using class syntax Finish writing the render method so it returns a div element that contains an h1 with the text Hello React --hints--\nThe React component should return a div element js\nassert(Enzyme shallow(React createElement(MyComponent)) type() === 'div');\nThe returned div should render an h1 heading element within it js\nassert(\n/<div><h1> *<\\/h1><\\/div>/ test(\nEnzyme shallow(React createElement(MyComponent)) html()\n)\n);\nThe h1 heading element should contain the string Hello React js\nassert(\nEnzyme shallow(React createElement(MyComponent)) html() ===\n'<div><h1>Hello React </h1></div>'\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2697,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-react-component.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "58d9f371511c485d7ade0081d2608ac6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-react-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "text Hello React --hints-- The React component should return a div element js assert(Enzyme shallow(React createElement(MyComponent)) type() === 'div'); The returned div should render an h1 heading element within it js assert( /<div><h1> *<\\/h1><\\/div>/ test( Enzyme shallow(React createElement(MyComponent)) html() ) ); The h1 heading element should contain the string Hello React js assert( Enzyme shallow(React createElement(MyComponent)) html() === '<div><h1>Hello React </h1></div>' ); --seed-- --after-user-code-- jsx ReactDOM render(<MyComponent />, document getElementById('root')) --seed-contents-- ```jsx class MyComponent extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n// Change code below this line\n// Change code above this line\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n// Change code below this line\nreturn (\n<div>\n<h1>Hello React </h1>\n</div>\n);\n// Change code above this line\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2697,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-react-component.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7d0ec07a5bcd0b13866a21a833947ab1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\define-an-html-class-in-jsx.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036160\ntitle: Define an HTML Class in JSX\nchallengeType: 6\nforumTopicId: 301393\ndashedName: define-an-html-class-in-jsx\n--description--\nNow that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.\nSo far, it may seem that HTML and JSX are exactly the same.\nOne key difference in JSX is that you can no longer use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className.\nIn fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.\n--instructions--\nApply a class of myDiv to the div provided in the JSX code.\n--hints--\nThe constant JSX should return a div element.\njs\nassert.strictEqual(JSX.type, 'div');\nThe div should have a class of myDiv.\njs\nassert.strictEqual(JSX.props.className, 'myDiv');\n--seed--\n--after-user-code--\njsx\nReactDOM.render(JSX, document.getElementById('root'))\n--seed-contents--\n```jsx\nconst JSX = (\nAdd a class to this div\n);\n```\n--solutions--\n```jsx\nconst JSX = (\nAdd a class to this div\n);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1438,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\define-an-html-class-in-jsx.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7fec3792abdc1ad99c63494240047772",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateful-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036170\ntitle: Create a Stateful Component\nchallengeType: 6\nforumTopicId: 301391\ndashedName: create-a-stateful-component\n--description--\nOne of the most important topics in React is state State consists of any data your application needs to know about, that can change over time You want your apps to respond to state changes and present an updated UI when necessary React offers a nice solution for the state management of modern web applications You create state in a React component by declaring a state property on the component class in its constructor This initializes the component with state when it is created The state property must be set to a JavaScript object Declaring it looks like this:\n```jsx\nthis state = {\n}\n```\nYou have access to the state object throughout the life of your component You can update it, render it in your UI, and pass it as props to child components The state object can be as complex or as simple as you need it to be Note that you must create a class component by extending React Component in order to create state like this --instructions--\nThere is a component in the code editor that is trying to render a firstName property from its state However, there is no state defined Initialize the component with state in the constructor and assign your name to a property of firstName --hints--\nStatefulComponent should exist and render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(\nReact createElement(StatefulComponent)\n);\nreturn mockedComponent find('StatefulComponent') length === 1;\n})()\n);\nStatefulComponent should render a div and an h1 element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(\nReact createElement(StatefulComponent)\n);\nreturn (\nmockedComponent find('div') length === 1 &&\nmockedComponent find('h1') length === 1\n);\n})()\n);\nThe state of StatefulComponent should be initialized with a property firstName set to a string js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(\nReact createElement(StatefulComponent)\n);\nconst initialState = mockedComponent state();\nreturn (\ntypeof initialState === 'object' && typeof initialState firstName === 'string'\n);\n})()\n);\nThe property firstName in the state of StatefulComponent should render in the h1 element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(\nReact",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3471,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateful-component.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0f5726f1eec9f6f075632f93695420e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateful-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "); })() ); The state of StatefulComponent should be initialized with a property firstName set to a string js assert( (function () { const mockedComponent = Enzyme mount( React createElement(StatefulComponent) ); const initialState = mockedComponent state(); return ( typeof initialState === 'object' && typeof initialState firstName === 'string' ); })() ); The property firstName in the state of StatefulComponent should render in the h1 element js assert( (function () { const mockedComponent = Enzyme mount( ReactcreateElement(StatefulComponent)\n);\nconst initialState = mockedComponent state();\nreturn mockedComponent find('h1') text() === initialState firstName;\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<StatefulComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass StatefulComponent extends React Component {\nconstructor(props) {\nsuper(props);\n// Only change code below this line\n// Only change code above this line\n}\nrender() {\nreturn (\n{this state firstName}\n);\n}\n};\n```\n--solutions--\njsx\nclass StatefulComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nfirstName: 'freeCodeCamp '\n}\n}\nrender() {\nreturn (\n<div>\n<h1>{this state firstName}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3471,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateful-component.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1b4beeb378297f54f5e8f59569cca965",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateless-functional-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036162\ntitle: Create a Stateless Functional Component\nchallengeType: 6\nforumTopicId: 301392\ndashedName: create-a-stateless-functional-component\n--description--\nComponents are the core of React Everything in React is a component and here you will learn how to create one There are two ways to create a React component The first way is to use a JavaScript function Defining a component in this way creates a stateless functional component The concept of state in an application will be covered in later challenges For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data (We'll cover the second way to create a React component in the next challenge )\nTo create a component with a function, you simply write a JavaScript function that returns either JSX or null One important thing to note is that React requires your function name to begin with a capital letter Here's an example of a stateless functional component that assigns an HTML class in JSX:\njsx\nconst DemoComponent = function() {\nreturn (\n<div className='customClass' />\n);\n};\nAfter being transpiled, the <div> will have a CSS class of customClass Because a JSX component represents HTML, you could put several components together to create a more complex HTML page This is one of the key advantages of the component architecture React provides It allows you to compose your UI from many separate, isolated components This makes it easier to build and maintain complex user interfaces --instructions--\nThe code editor has a function called MyComponent Complete this function so it returns a single div element which contains some string of text Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag --hints--\nMyComponent should return JSX js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent length === 1;\n})()\n);\nMyComponent should return a div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe div element should contain a string of text js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent find('div') text()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateless-functional-component.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "65b6cb380edf63ba80658e9665255bcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateless-functional-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "use a self-closing tag --hints-- MyComponent should return JSX js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyComponent)); return mockedComponent length === 1; })() ); MyComponent should return a div element js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyComponent)); return mockedComponent children() type() === 'div'; })() ); The div element should contain a string of text js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyComponent)); return mockedComponent find('div') text()== '';\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst MyComponent = function() {\n// Change code below this line\n// Change code above this line\n}\n```\n--solutions--\njsx\nconst MyComponent = function() {\n// Change code below this line\nreturn (\n<div>\nDemo Solution\n</div>\n);\n// Change code above this line\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateless-functional-component.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f04b742de86d8d1b221b9ed0e0d2d37d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\learn-about-self-closing-jsx-tags.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036161\ntitle: Learn About Self-Closing JSX Tags\nchallengeType: 6\nforumTopicId: 301396\ndashedName: learn-about-self-closing-jsx-tags\n--description--\nSo far, you’ve seen how JSX differs from HTML in a key way with the use of className vs class for defining HTML classes Another important way in which JSX differs from HTML is in the idea of the self-closing tag In HTML, almost all tags have both an opening and closing tag: <div></div>; the closing tag always has a forward slash before the tag name that you are closing However, there are special instances in HTML called void elements, or elements that don’t require both an opening and closing tag before another element can start For example the line-break tag can be written as <br> or as <br />, but should never be written as <br></br>, since it doesn't contain any content In JSX, the rules are a little different Any JSX element can be written with a self-closing tag, and every element must be closed The line-break tag, for example, must always be written as <br /> in order to be valid JSX that can be transpiled A <div>, on the other hand, can be written as <div /> or <div></div> The difference is that in the first syntax version there is no way to include anything in the <div /> You will see in later challenges that this syntax is useful when rendering React components --instructions--\nFix the errors in the code editor so that it is valid JSX and successfully transpiles Make sure you don't change any of the content - you only need to close tags where they are needed --hints--\nThe constant JSX should return a div element js\nassert strictEqual(JSX type, 'div');\nThe div should contain a br tag js\nassert(Enzyme shallow(JSX) find('br') length === 1);\nThe div should contain an hr tag js\nassert(Enzyme shallow(JSX) find('hr') length === 1);\n--seed--\n--after-user-code--\njsx\nReactDOM render(JSX, document getElementById('root'))\n--seed-contents--\n```jsx\nconst JSX = (\nWelcome to React Be sure to close all tags );\n```\n--solutions--\n```jsx\nconst JSX = (\nWelcome to React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\learn-about-self-closing-jsx-tags.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2718ec533d91019423eda6844833bb8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\learn-about-self-closing-jsx-tags.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "needed --hints-- The constant JSX should return a div element js assert strictEqual(JSX type, 'div'); The div should contain a br tag js assert(Enzyme shallow(JSX) find('br') length === 1); The div should contain an hr tag js assert(Enzyme shallow(JSX) find('hr') length === 1); --seed-- --after-user-code-- jsx ReactDOM render(JSX, document getElementById('root')) --seed-contents-- ```jsx const JSX = ( Welcome to React Be sure to close all tags ); ``` --solutions-- ```jsx const JSX = ( Welcome to ReactBe sure to close all tags );\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\learn-about-self-closing-jsx-tags.md",
      "source_type": "git_repo"
    },
    "token_count": 138,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aef7ba15a26ab57aa53f6efe992c9559",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\introducing-inline-styles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036181\ntitle: Introducing Inline Styles\nchallengeType: 6\nforumTopicId: 301395\ndashedName: introducing-inline-styles\n--description--\nThere are other complex concepts that add powerful capabilities to your React code But you may be wondering about the more simple problem of how to style those JSX elements you create in React You likely know that it won't be exactly the same as working with HTML because of the way you apply classes to JSX elements If you import styles from a stylesheet, it isn't much different at all You apply a class to your JSX element using the className attribute, and apply styles to the class in your stylesheet Another option is to apply inline styles, which are very common in ReactJS development You apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences Here's an example of an inline style in HTML:\n```jsx\nMellow Yellow\n```\nJSX elements use the style attribute, but because of the way JSX is transpiled, you can't set the value to a string Instead, you set it equal to a JavaScript object Here's an example:\n```jsx\nMellow Yellow\n```\nNotice how we camelCase the fontSize property This is because React will not accept kebab-case keys in the style object React will apply the correct property name for us in the HTML --instructions--\nAdd a style attribute to the div in the code editor to give the text a color of red and font size of 72px Note that you can optionally set the font size to be a number, omitting the units px, or write it as \"72px\" --hints--\nThe component should render a div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Colorful));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe div element should have a color of red js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Colorful));\nreturn mockedComponent children() props() style color === 'red';\n})()\n);\nThe div element should have a font size of 72px js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Colorful));\nreturn (\nmockedComponent children() props() style fontSize === 72 ||\nmockedComponent children() props() style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\introducing-inline-styles.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "59cc738c68451dfc7fd0607443ffbe98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\introducing-inline-styles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Enzyme mount(React createElement(Colorful)); return mockedComponent children() type() === 'div'; })() ); The div element should have a color of red js assert( (function () { const mockedComponent = Enzyme mount(React createElement(Colorful)); return mockedComponent children() props() style color === 'red'; })() ); The div element should have a font size of 72px js assert( (function () { const mockedComponent = Enzyme mount(React createElement(Colorful)); return ( mockedComponent children() props() style fontSize === 72 || mockedComponent children() props() stylefontSize === '72' ||\nmockedComponent children() props() style fontSize === '72px'\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Colorful />, document getElementById('root'))\n--seed-contents--\njsx\nclass Colorful extends React Component {\nrender() {\nreturn (\n<div>Big Red</div>\n);\n}\n};\n--solutions--\njsx\nclass Colorful extends React Component {\nrender() {\nreturn (\n<div style={{color: \"red\", fontSize: 72}}>Big Red</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\introducing-inline-styles.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b267a2e11c2ee3b051264351c5273060",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\give-sibling-elements-a-unique-key-attribute.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403618b\ntitle: Give Sibling Elements a Unique Key Attribute\nchallengeType: 6\nforumTopicId: 301394\ndashedName: give-sibling-elements-a-unique-key-attribute\n--description--\nThe last challenge showed how the map method is used to dynamically render a number of elements based on user input However, there was an important piece missing from that example When you create an array of elements, each one needs a key attribute set to a unique value React uses these keys to keep track of which items are added, changed, or removed This helps make the re-rendering process more efficient when the list is modified in any way Note: Keys only need to be unique between sibling elements, they don't need to be globally unique in your application --instructions--\nThe code editor has an array with some front end frameworks and a stateless functional component named Frameworks() Frameworks() needs to map the array to an unordered list, much like in the last challenge Finish writing the map callback to return an li element for each framework in the frontEndFrameworks array This time, make sure to give each li a key attribute, set to a unique value The li elements should also contain text from frontEndFrameworks Normally, you want to make the key something that uniquely identifies the element being rendered As a last resort the array index may be used, but typically you should try to use a unique identification --hints--\nThe Frameworks component should exist and render to the page js\nassert(\nEnzyme mount(React createElement(Frameworks)) find('Frameworks') length === 1\n);\nFrameworks should render an h1 element js\nassert(Enzyme mount(React createElement(Frameworks)) find('h1') length === 1);\nFrameworks should render a ul element js\nassert(Enzyme mount(React createElement(Frameworks)) find('ul') length === 1);\nThe ul tag should render 6 child li elements js\nassert(\nEnzyme mount(React createElement(Frameworks)) find('ul') children() length ===\n6 &&\nEnzyme mount(React createElement(Frameworks)) find('ul') childAt(0) name() === 'li' &&\nEnzyme mount(React createElement(Frameworks)) find('li') length === 6\n);\nEach list item element should have a unique key attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\give-sibling-elements-a-unique-key-attribute.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c753e9ccbd4658d5416aa7bd5ae02966",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\give-sibling-elements-a-unique-key-attribute.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "); Frameworks should render an h1 element js assert(Enzyme mount(React createElement(Frameworks)) find('h1') length === 1); Frameworks should render a ul element js assert(Enzyme mount(React createElement(Frameworks)) find('ul') length === 1); The ul tag should render 6 child li elements js assert( Enzyme mount(React createElement(Frameworks)) find('ul') children() length === 6 && Enzyme mount(React createElement(Frameworks)) find('ul') childAt(0) name() === 'li' && Enzyme mount(React createElement(Frameworks)) find('li') length === 6 ); Each list item element should have a unique key attributejs\nassert(\n(() => {\nconst ul = Enzyme mount(React createElement(Frameworks)) find('ul');\nconst keys = new Set([\nul childAt(0) key(),\nul childAt(1) key(),\nul childAt(2) key(),\nul childAt(3) key(),\nul childAt(4) key(),\nul childAt(5) key()\n]);\nreturn keys size === 6;\n})()\n);\nEach list item element should contain text from frontEndFrameworks js\nassert(\n(() => {\nconst li = Enzyme mount(React createElement(Frameworks)) find('ul') children();\nreturn [ Array(5)] every((_, i) =>\nfrontEndFrameworks includes(li at(i) text())\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Frameworks />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst frontEndFrameworks = [\n'React',\n'Angular',\n'Ember',\n'Knockout',\n'Backbone',\n'Vue'\n];\nfunction Frameworks() {\nconst renderFrameworks = null; // Change this line\nreturn (\nPopular Front End JavaScript Frameworks\n{renderFrameworks}\n);\n};\n```\n--solutions--\n```jsx\nconst frontEndFrameworks = [\n'React',\n'Angular',\n'Ember',\n'Knockout',\n'Backbone',\n'Vue'\n];\nfunction Frameworks() {\nconst renderFrameworks = frontEndFrameworks map((fw, i) => {fw});\nreturn (\nPopular Front End JavaScript Frameworks\n{renderFrameworks}\n);\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\give-sibling-elements-a-unique-key-attribute.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1d5e58d3ac4a8596245198d5d5738f19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\override-default-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616c\ntitle: Override Default Props\nchallengeType: 6\nforumTopicId: 301399\ndashedName: override-default-props\n--description--\nThe ability to set default props is a useful feature in React The way to override the default props is to explicitly set the prop values for a component --instructions--\nThe ShoppingCart component now renders a child component Items This Items component has a default prop quantity set to the integer 0 Override the default prop by passing in a value of 10 for quantity Note: Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes However, since the value for quantity is an integer, it won't go in quotes but it should be wrapped in curly braces For example, {100} This syntax tells JSX to interpret the value within the braces directly as JavaScript --hints--\nThe component ShoppingCart should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ShoppingCart));\nreturn mockedComponent find('ShoppingCart') length === 1;\n})()\n);\nThe component Items should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ShoppingCart));\nreturn mockedComponent find('Items') length === 1;\n})()\n);\nThe Items component should have a prop of { quantity: 10 } passed from the ShoppingCart component js\n() =>\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ShoppingCart));\nreturn (\nmockedComponent find('Items') props() quantity == 10 &&\ncode replace(/ /g, '') includes('<Itemsquantity={10}/>')\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<ShoppingCart />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst Items = (props) => {\nreturn Current Quantity of Items in Cart: {props quantity}\n}\nItems defaultProps = {\nquantity: 0\n}\nclass ShoppingCart extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n{ / Change code below this line / }\nreturn\n{ / Change code above this line / }\n}\n};\n```\n--solutions--\n```jsx\nconst Items = (props) => {\nreturn Current Quantity of Items in Cart: {props quantity}\n}\nItems defaultProps = {\nquantity: 0\n}\nclass ShoppingCart extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\override-default-props.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0df3021a47c9ed2b2d7589ccf2e36308",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\override-default-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Items in Cart: {props quantity} } Items defaultProps = { quantity: 0 } class ShoppingCart extends React Component { constructor(props) { super(props); } render() { { / Change code below this line / } return { / Change code above this line / } } }; ``` --solutions-- ```jsx const Items = (props) => { return Current Quantity of Items in Cart: {props quantity} } Items defaultProps = { quantity: 0 } class ShoppingCart extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n{ / Change code below this line / }\nreturn\n{ / Change code above this line / }\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\override-default-props.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a931f467390841627cba57c21bd7aa05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036180\ntitle: Optimize Re-Renders with shouldComponentUpdate\nchallengeType: 6\nforumTopicId: 301398\ndashedName: optimize-re-renders-with-shouldcomponentupdate\n--description--\nSo far, if any component receives new state or new props, it re-renders itself and all its children This is usually okay But React provides a lifecycle method you can call when child components receive new state or props, and declare specifically if the components should update or not The method is shouldComponentUpdate(), and it takes nextProps and nextState as parameters This method is a useful way to optimize performance For example, the default behavior is that your component re-renders when it receives new props, even if the props haven't changed You can use shouldComponentUpdate() to prevent this by comparing the props The method must return a boolean value that tells React whether or not to update the component You can compare the current props (this props) to the next props (nextProps) to determine if you need to update or not, and return true or false accordingly --instructions--\nThe shouldComponentUpdate() method is added in a component called OnlyEvens Currently, this method returns true so OnlyEvens re-renders every time it receives new props Modify the method so OnlyEvens updates only if the value of its new props is even Click the Add button and watch the order of events in your browser's console as the lifecycle hooks are triggered --hints--\nThe Controller component should render the OnlyEvens component as a child js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(Controller));\nreturn (\nmockedComponent find('Controller') length === 1 &&\nmockedComponent find('OnlyEvens') length === 1\n);\n})()\n);\nThe shouldComponentUpdate method should be defined on the OnlyEvens component js\nassert(\n(() => {\nconst child = React createElement(OnlyEvens) type prototype shouldComponentUpdate toString() replace(/s/g, '');\nreturn child == 'undefined';\n})()\n);\nThe OnlyEvens component should return an h1 tag which renders the value of this props value js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(Controller));\nconst first = () => {\nmockedComponent setState({ value: 1000 });\nreturn mockedComponent find('h1')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "37bd22e75360ec0c53c964dfa0e45433",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 ); })() ); The shouldComponentUpdate method should be defined on the OnlyEvens component js assert( (() => { const child = React createElement(OnlyEvens) type prototype shouldComponentUpdate toString() replace(/s/g, ''); return child == 'undefined'; })() ); The OnlyEvens component should return an h1 tag which renders the value of this props value js (() => { const mockedComponent = Enzyme mount(React createElement(Controller)); const first = () => { mockedComponent setState({ value: 1000 }); return mockedComponent find('h1')html();\n};\nconst second = () => {\nmockedComponent setState({ value: 10 });\nreturn mockedComponent find('h1') html();\n};\nconst firstValue = first();\nconst secondValue = second();\nassert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>');\n})();\nOnlyEvens should re-render only when nextProps value is even js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(Controller));\nconst first = () => {\nmockedComponent setState({ value: 8 });\nreturn mockedComponent find('h1') text();\n};\nconst second = () => {\nmockedComponent setState({ value: 7 });\nreturn mockedComponent find('h1') text();\n};\nconst third = () => {\nmockedComponent setState({ value: 42 });\nreturn mockedComponent find('h1') text();\n};\nconst firstValue = first();\nconst secondValue = second();\nconst thirdValue = third();\nassert(firstValue === '8' && secondValue === '8' && thirdValue === '42');\n})();\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Controller />, document getElementById('root'));\n--seed-contents--\n```jsx\nclass OnlyEvens extends React Component {\nconstructor(props) {\nsuper(props);\n}\nshouldComponentUpdate(nextProps, nextState) {\nconsole log('Should I update ');\n// Change code below this line\nreturn true;\n// Change code above this line\n}\ncomponentDidUpdate() {\nconsole log('Component re-rendered ');\n}\nrender() {\nreturn {this props value};\n}\n}\nclass Controller extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nvalue: 0\n};\nthis addValue = this addValue bind(this);\n}\naddValue() {\nthis setState(state => ({\nvalue: state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "29dfb5034b092811cc844bb86b57d9a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "React Component { constructor(props) { super(props); } shouldComponentUpdate(nextProps, nextState) { console log('Should I update '); // Change code below this line return true; // Change code above this line } componentDidUpdate() { console log('Component re-rendered '); } render() { return {this props value}; } } class Controller extends React Component { constructor(props) { super(props); this state = { value: 0 }; this addValue = this addValue bind(this); } addValue() { this setState(state => ({ value: statevalue + 1\n}));\n}\nrender() {\nreturn (\nAdd\n);\n}\n}\n```\n--solutions--\n```jsx\nclass OnlyEvens extends React Component {\nconstructor(props) {\nsuper(props);\n}\nshouldComponentUpdate(nextProps, nextState) {\nconsole log('Should I update ');\n// Change code below this line\nreturn nextProps value % 2 === 0;\n// Change code above this line\n}\ncomponentDidUpdate() {\nconsole log('Component re-rendered ');\n}\nrender() {\nreturn {this props value};\n}\n}\nclass Controller extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nvalue: 0\n};\nthis addValue = this addValue bind(this);\n}\naddValue() {\nthis setState(state => ({\nvalue: state value + 1\n}));\n}\nrender() {\nreturn (\nAdd\n);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "38530c6b59547a37e0a0ae53d42c55f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403617b\ntitle: Pass a Callback as Props\nchallengeType: 6\nforumTopicId: 301400\ndashedName: pass-a-callback-as-props\n--description--\nYou can pass state as props to child components, but you're not limited to passing data You can also pass handler functions or any method that's defined on a React component to a child component This is how you allow child components to interact with their parent components You pass methods to a child just like a regular prop It's assigned a name and you have access to that method name under this props in the child component --instructions--\nThere are three components outlined in the code editor The MyApp component is the parent that will render the GetInput and RenderInput child components Add the GetInput component to the render method in MyApp, then pass it a prop called input assigned to inputValue from MyApp's state Also create a prop called handleChange and pass the input handler handleChange to it Next, add RenderInput to the render method in MyApp, then create a prop called input and pass the inputValue from state to it Once you are finished you will be able to type in the input field in the GetInput component, which then calls the handler method in its parent via props This updates the input in the state of the parent, which is passed as props to both children Observe how the data flows between the components and how the single source of truth remains the state of the parent component Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components --hints--\nThe MyApp component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nreturn mockedComponent find('MyApp') length === 1;\n})()\n);\nThe GetInput component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nreturn mockedComponent find('GetInput') length === 1;\n})()\n);\nThe RenderInput component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nreturn mockedComponent find('RenderInput') length === 1;\n})()\n);\nThe GetInput component should receive the MyApp state property inputValue as props and contain an input element which modifies MyApp state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5a326fada25b95f9e7b21b0f89cc2ede",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mockedComponent find('MyApp') length === 1; })() ); The GetInput component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyApp)); return mockedComponent find('GetInput') length === 1; })() ); The RenderInput component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyApp)); return mockedComponent find('RenderInput') length === 1; })() ); The GetInput component should receive the MyApp state property inputValue as props and contain an input element which modifies MyApp statejs\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nconst state_1 = () => {\nmockedComponent setState({ inputValue: '' });\nreturn waitForIt(() => mockedComponent state());\n};\nconst state_2 = () => {\nmockedComponent find('input') simulate('change', { target: { value: 'TestInput' } });\nreturn waitForIt(() => mockedComponent state());\n};\nconst updated_1 = await state_1();\nconst updated_2 = await state_2();\nassert(updated_1 inputValue === '' && updated_2 inputValue === 'TestInput');\n};\nThe RenderInput component should receive the MyApp state property inputValue as props js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nconst state_1 = () => {\nmockedComponent setState({ inputValue: 'TestName' });\nreturn waitForIt(() => mockedComponent);\n};\nconst updated_1 = await state_1();\nassert(updated_1 find('p') text() includes('TestName'));\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyApp />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyApp extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninputValue: ''\n}\nthis handleChange = this handleChange bind(this);\n}\nhandleChange(event) {\nthis setState({\ninputValue: event target",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b1cb5e5b4045b9103714a0241a903dcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme mount(React createElement(MyApp)); const state_1 = () => { mockedComponent setState({ inputValue: 'TestName' }); return waitForIt(() => mockedComponent); }; const updated_1 = await state_1(); assert(updated_1 find('p') text() includes('TestName')); }; --seed-- --after-user-code-- jsx ReactDOM render(<MyApp />, document getElementById('root')) --seed-contents-- ```jsx class MyApp extends React Component { constructor(props) { super(props); this state = { inputValue: '' } this handleChange = this handleChange bind(this); } handleChange(event) { this setState({ inputValue: event targetvalue\n});\n}\nrender() {\nreturn (\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\nclass GetInput extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nGet Input:\n);\n}\n};\nclass RenderInput extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nInput Render:\n{this props input}\n);\n}\n};\n```\n--solutions--\n```jsx\nclass MyApp extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninputValue: ''\n}\nthis handleChange = this handleChange bind(this);\n}\nhandleChange(event) {\nthis setState({\ninputValue: event target value\n});\n}\nrender() {\nreturn (\n);\n}\n};\nclass GetInput extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nGet Input:\n);\n}\n};\nclass RenderInput extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nInput Render:\n{this props input}\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1bb30295163683bcffb23722c4de6878",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036169\ntitle: Pass Props to a Stateless Functional Component\nchallengeType: 6\nforumTopicId: 301402\ndashedName: pass-props-to-a-stateless-functional-component\n--description--\nThe previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React With this foundation, it's time to look at another feature very common in React: props In React, you can pass props, or properties, to child components Say you have an App component which renders a child component called Welcome which is a stateless functional component You can pass Welcome a user property by writing:\njsx\n<App>\n<Welcome user='Mark' />\n</App>\nYou use custom HTML attributes created by you and supported by React to be passed to the component In this case, the created property user is passed to the component Welcome Since Welcome is a stateless functional component, it has access to this value like so:\njsx\nconst Welcome = (props) => <h1>Hello, {props user} </h1>\nIt is standard to call this value props and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX You can access the value of the argument in the function body With class components, you will see this is a little different --instructions--\nThere are Calendar and CurrentDate components in the code editor When rendering CurrentDate from the Calendar component, pass in a property of date assigned to the current date from JavaScript's Date object Then access this prop in the CurrentDate component, showing its value within the p tags Note that for prop values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance date={Date()} --hints--\nThe Calendar component should return a single div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Calendar));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe second child of the Calendar component should be the CurrentDate component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Calendar));\nreturn mockedComponent children() childAt(1) name() === 'CurrentDate';\n})()\n);\nThe CurrentDate component should have a prop called date js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Calendar));\nreturn mockedComponent children()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4604,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f15255166e22152f658425329ae65b21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "div element js assert( (function () { const mockedComponent = Enzyme mount(React createElement(Calendar)); return mockedComponent children() type() === 'div'; })() ); The second child of the Calendar component should be the CurrentDate component js assert( (function () { const mockedComponent = Enzyme mount(React createElement(Calendar)); return mockedComponent children() childAt(1) name() === 'CurrentDate'; })() ); The CurrentDate component should have a prop called date js assert( (function () { const mockedComponent = Enzyme mount(React createElement(Calendar)); return mockedComponent children()childAt(1) props() date;\n})()\n);\nThe date prop of the CurrentDate should contain a string of text js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(Calendar));\nconst prop = mockedComponent children() childAt(1) props() date;\nreturn typeof prop === 'string' && prop length > 0;\n})()\n);\nThe date prop should be generated by calling Date()\njs\nassert(/<CurrentDatedate={Date\\(\\)}\\/>/ test(__helpers removeWhiteSpace(code)));\nThe CurrentDate component should render the value from the date prop in the p tag js\nlet date = 'dummy date';\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(\nReact createElement(CurrentDate, { date })\n);\nreturn mockedComponent find('p') html() includes(date);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Calendar />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst CurrentDate = (props) => {\nreturn (\n{ / Change code below this line / }\nThe current date is:\n{ / Change code above this line / }\n);\n};\nclass Calendar extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nWhat date is it { / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```\n--solutions--\n```jsx\nconst CurrentDate = (props) => {\nreturn (\n{ / Change code below this line / }\nThe current date is: {props date}\n{ / Change code above this line / }\n);\n};\nclass Calendar extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nWhat date is it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4604,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "02f058e0f03b9013b1d9115e1c239a17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ / Change code below this line / } { / Change code above this line / } ); } }; ``` --solutions-- ```jsx const CurrentDate = (props) => { return ( { / Change code below this line / } The current date is: {props date} { / Change code above this line / } ); }; class Calendar extends React Component { constructor(props) { super(props); } render() { return ( What date is it{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4604,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md",
      "source_type": "git_repo"
    },
    "token_count": 113,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "492d9a0aecdabd1629ce59283a6dfd67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616a\ntitle: Pass an Array as Props\nchallengeType: 6\nforumTopicId: 301401\ndashedName: pass-an-array-as-props\n--description--\nThe last challenge demonstrated how to pass information from a parent component to a child component as props or properties This challenge looks at how arrays can be passed as props To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces jsx\n<ParentComponent>\n<ChildComponent colors={[\"green\", \"blue\", \"red\"]} />\n</ParentComponent>\nThe child component then has access to the array property colors Array methods such as join() can be used when accessing the property jsx\nconst ChildComponent = (props) => <p>{props colors join(', ')}</p>\nThis will join all colors array items into a comma separated string and produce: <p>green, blue, red</p> Later, we will learn about other common methods to render arrays of data in React --instructions--\nThere are List and ToDo components in the code editor When rendering each List from the ToDo component, pass in a tasks property assigned to an array of to-do tasks, for example [\"walk dog\", \"workout\"] Then access this tasks array in the List component, showing its value within the p element Use join(\", \") to display the props tasks array in the p element as a comma-separated list Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks --hints--\nThe ToDo component should return a single outer div js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn mockedComponent children() first() type() === 'div';\n})()\n);\nThe third child of the ToDo component should be an instance of the List component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn mockedComponent children() first() childAt(2) name() === 'List';\n})()\n);\nThe fifth child of the ToDo component should be an instance of the List component js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn mockedComponent children() first() childAt(4) name() === 'List';\n})()\n);\nBoth instances of the List component should have a property called tasks and tasks should be of type array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f110a9b5056acd875897e79eee4db6d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ToDo)); return mockedComponent children() first() childAt(2) name() === 'List'; })() ); The fifth child of the ToDo component should be an instance of the List component js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ToDo)); return mockedComponent children() first() childAt(4) name() === 'List'; })() ); Both instances of the List component should have a property called tasks and tasks should be of type arrayjs\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn (\nArray isArray(mockedComponent find('List') get(0) props tasks) &&\nArray isArray(mockedComponent find('List') get(1) props tasks)\n);\n})()\n);\nThe first List component representing the tasks for today should have 2 or more items js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn mockedComponent find('List') get(0) props tasks length >= 2;\n})()\n);\nThe second List component representing the tasks for tomorrow should have 3 or more items js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn mockedComponent find('List') get(1) props tasks length >= 3;\n})()\n);\nThe List component should render the value from the tasks prop in the p tag js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ToDo));\nreturn (\nmockedComponent find('p') get(0) props children replace(/\\s*,\\s*/g, ',') ===\nmockedComponent find('List') get(0) props tasks join(',') replace(/\\s*,\\s*/g, ',') &&\nmockedComponent find('p') get(1) props children replace(/\\s*,\\s*/g, ',') ===\nmockedComponent find('List') get(1) props tasks join(',') replace(/\\s*,\\s*/g, ',')\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<ToDo />, document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5487e4a39b583cd8d1e7ea85327465f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "length >= 3; })() ); The List component should render the value from the tasks prop in the p tag js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ToDo)); return ( mockedComponent find('p') get(0) props children replace(/\\s*,\\s*/g, ',') === mockedComponent find('List') get(0) props tasks join(',') replace(/\\s*,\\s*/g, ',') && mockedComponent find('p') get(1) props children replace(/\\s*,\\s*/g, ',') === mockedComponent find('List') get(1) props tasks join(',') replace(/\\s*,\\s*/g, ',') ); })() ); --seed-- --after-user-code-- jsx ReactDOM render(<ToDo />, documentgetElementById('root'))\n--seed-contents--\n```jsx\nconst List = (props) => {\n{ / Change code below this line / }\nreturn {}\n{ / Change code above this line / }\n};\nclass ToDo extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTo Do Lists\nToday\n{ / Change code below this line / }\nTomorrow\n{ / Change code above this line / }\n);\n}\n};\n```\n--solutions--\n```jsx\nconst List= (props) => {\nreturn {props tasks join(', ')}\n};\nclass ToDo extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTo Do Lists\nToday\nTomorrow\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "af366ebf2b1684d483daedae7551c967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403617a\ntitle: Pass State as Props to Child Components\nchallengeType: 6\nforumTopicId: 301403\ndashedName: pass-state-as-props-to-child-components\n--description--\nYou saw a lot of examples that passed props to child JSX elements and child React components in previous challenges You may be wondering where those props come from A common pattern is to have a stateful component containing the state important to your app, that then renders child components You want these components to have access to some pieces of that state, which are passed in as props For example, maybe you have an App component that renders a Navbar, among other components In your App, you have state that contains a lot of user information, but the Navbar only needs access to the user's username so it can display it You pass that piece of state to the Navbar component as a prop This pattern illustrates some important paradigms in React The first is unidirectional data flow State flows in one direction down the tree of your application's components, from the stateful parent component to child components The child components only receive the state data they need The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component The rest of your components simply receive state from the parent as props, and render a UI from that state It begins to create a separation where state management is handled in one part of code and UI rendering in another This principle of separating state logic from UI logic is one of React's key principles When it's used correctly, it makes the design of complex, stateful applications much easier to manage --instructions--\nThe MyApp component is stateful and renders a Navbar component as a child Pass the name property in its state down to the child component, then show the name in the h1 tag that's part of the Navbar render method name should appear after the text Hello, my name is: --hints--\nThe MyApp component should render with a Navbar component inside js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nreturn (\nmockedComponent find('MyApp') length === 1 &&\nmockedComponent find('Navbar') length === 1\n);\n})()\n);\nThe Navbar component should receive the MyApp state property name as props",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0d84354678e765735474c18e21e28e42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "component, then show the name in the h1 tag that's part of the Navbar render method name should appear after the text Hello, my name is: --hints-- The MyApp component should render with a Navbar component inside js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyApp)); return ( mockedComponent find('MyApp') length === 1 && mockedComponent find('Navbar') length === 1 ); })() ); The Navbar component should receive the MyApp state property name as propsjs\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nconst setState = () => {\nmockedComponent setState({ name: 'TestName' });\nreturn waitForIt(() => mockedComponent find('Navbar') props());\n};\nconst navProps = await setState();\nassert(navProps name === 'TestName');\n};\nThe h1 element in Navbar should render the name prop js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyApp));\nconst navH1Before = mockedComponent find('Navbar') find('h1') text();\nconst setState = () => {\nmockedComponent setState({ name: 'TestName' });\nreturn waitForIt(() => mockedComponent find('Navbar') find('h1') text());\n};\nconst navH1After = await setState();\nassert(new RegExp('TestName') test(navH1After) && navH1After == navH1Before);\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyApp />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyApp extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'CamperBot'\n}\n}\nrender() {\nreturn (\n{/ Change code below this line /}\n{/ Change code above this line /}\n);\n}\n};\nclass Navbar extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n{/ Change code below this line /}\nHello, my name is:\n{/ Change code above this line /}\n);\n}\n};\n```\n--solutions--\njsx\nclass MyApp extends React Component {\nconstructor(props) {\nsuper(props);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4287061caccef73584236b68d3b05a6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "state = { name: 'CamperBot' } } render() { return ( {/ Change code below this line /} {/ Change code above this line /} ); } }; class Navbar extends React Component { constructor(props) { super(props); } render() { return ( {/ Change code below this line /} Hello, my name is: {/ Change code above this line /} ); } }; ``` --solutions-- jsx class MyApp extends React Component { constructor(props) { super(props); thisstate = {\nname: 'CamperBot'\n}\n}\nrender() {\nreturn (\n<div>\n<Navbar name={this state name}/>\n</div>\n);\n}\n};\nclass Navbar extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n<div>\n<h1>Hello, my name is: {this props name}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "769a65352f089abeca0a245cb9dac79d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-html-elements-to-the-dom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24bbe0dba28a8d3cbd4c5f\ntitle: Render HTML Elements to the DOM\nchallengeType: 6\nforumTopicId: 301406\ndashedName: render-html-elements-to-the-dom\n--description--\nSo far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.\nReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.\nAs you would expect, ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.\n--instructions--\nThe code editor has a simple JSX component. Use the ReactDOM.render() method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use document.getElementById() to select the DOM node to render them to. There is a div with id='challenge-node' available for you to use. Make sure you don't change the JSX constant.\n--hints--\nThe constant JSX should return a div element.\njs\nassert(JSX.type === 'div');\nThe div should contain an h1 tag as the first element.\njs\nassert(JSX.props.children[0].type === 'h1');\nThe div should contain a p tag as the second element.\njs\nassert(JSX.props.children[1].type === 'p');\nThe provided JSX element should render to the DOM node with id challenge-node.\njs\nassert(\ndocument.getElementById('challenge-node').childNodes[0].innerHTML ===\n'<h1>Hello World</h1><p>Lets render this to the DOM</p>'\n);\n--seed--\n--seed-contents--\n```jsx\nconst JSX = (\nHello World\nLets render this to the DOM\n);\n// Add your code below this line\n```\n--solutions--\n```jsx\nconst JSX = (\nHello World\nLets render this to the DOM\n);\n// Add your code below this line\nReactDOM.render(JSX, document.getElementById('challenge-node'));\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-html-elements-to-the-dom.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f9ce6571ba971eb98bd189e46c7f1059",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-react-on-the-server-with-rendertostring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403618d\ntitle: Render React on the Server with renderToString\nchallengeType: 6\nforumTopicId: 301407\ndashedName: render-react-on-the-server-with-rendertostring\n--description--\nSo far, you have been rendering React components on the client Normally, this is what you will always do However, there are some use cases where it makes sense to render a React component on the server Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible In fact, React provides a renderToString() method you can use for this purpose There are two key reasons why rendering on the server may be used in a real world app First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser This may not be ideal for search engines that are trying to index the content of your pages so people can find you If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app React will still be able to recognize your app and manage it after the initial load --instructions--\nThe renderToString() method is provided on ReactDOMServer, which is available here as a global object The method takes one argument which is a React element Use this to render App to a string --hints--\nThe App component should render to a string using ReactDOMServer renderToString js\n() =>\nassert(\ncode replace(/ /g, '') includes('ReactDOMServer renderToString(<App/>)') &&\nEnzyme mount(React createElement(App)) children() name() === 'div'\n);\n--seed--\n--before-user-code--\njsx\nvar ReactDOMServer = { renderToString(x) { return null; } };\n--after-user-code--\njsx\nReactDOM render(<App />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass App extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn\n}\n};\n// Change code below this line\n```\n--solutions--\n```jsx\nclass App extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-react-on-the-server-with-rendertostring.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ce1be59a20b6b17d881c26c5b7cb1357",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-react-on-the-server-with-rendertostring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "render to a string using ReactDOMServer renderToString js () => assert( code replace(/ /g, '') includes('ReactDOMServer renderToString(<App/>)') && Enzyme mount(React createElement(App)) children() name() === 'div' ); --seed-- --before-user-code-- jsx var ReactDOMServer = { renderToString(x) { return null; } }; --after-user-code-- jsx ReactDOM render(<App />, document getElementById('root')) --seed-contents-- ```jsx class App extends React Component { constructor(props) { super(props); } render() { return } }; // Change code below this line ``` --solutions-- ```jsx class App extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn\n}\n};\n// Change code below this line\nReactDOMServer renderToString();\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-react-on-the-server-with-rendertostring.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aadc4da33f346ac5ce8f730bdd4748c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036167\ntitle: Render a Class Component to the DOM\nchallengeType: 6\nforumTopicId: 301404\ndashedName: render-a-class-component-to-the-dom\n--description--\nYou may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM The process for rendering React components will look very similar The past few challenges focused on components and composition, so the rendering was done for you behind the scenes However, none of the React code you write will render to the DOM without making a call to the ReactDOM API Here's a refresher on the syntax: ReactDOM render(componentToRender, targetNode) The first argument is the React component that you want to render The second argument is the DOM node that you want to render that component within React components are passed into ReactDOM render() a little differently than JSX elements For JSX elements, you pass in the name of the element that you want to render However, for React components, you need to use the same syntax as if you were rendering a nested component, for example ReactDOM render(<ComponentToRender />, targetNode) You use this syntax for both ES6 class components and functional components --instructions--\nBoth the Fruits and Vegetables components are defined for you behind the scenes Render both components as children of the TypesOfFood component, then render TypesOfFood to the DOM There is a div with id='challenge-node' available for you to use --hints--\nThe TypesOfFood component should return a single div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() type() === 'div';\n})()\n);\nThe TypesOfFood component should render the Fruits component after the h1 element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() childAt(1) name() === 'Fruits';\n})()\n);\nThe TypesOfFood component should render the Vegetables component after Fruits js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(TypesOfFood));\nreturn mockedComponent children() childAt(2) name() === 'Vegetables';\n})()\n);\nThe TypesOfFood component should render to the DOM within the div with the id challenge-node js\nassert(\n(function () {\nconst html = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1a3c912c785e4637847070cce22654f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "h1 element js assert( (function () { const mockedComponent = Enzyme mount(React createElement(TypesOfFood)); return mockedComponent children() childAt(1) name() === 'Fruits'; })() ); The TypesOfFood component should render the Vegetables component after Fruits js assert( (function () { const mockedComponent = Enzyme mount(React createElement(TypesOfFood)); return mockedComponent children() childAt(2) name() === 'Vegetables'; })() ); The TypesOfFood component should render to the DOM within the div with the id challenge-node js assert( (function () { const html = documentgetElementById('challenge-node') childNodes[0] innerHTML;\nreturn (\nhtml includes(\n'<div><h2>Fruits:</h2><h4>Non-Citrus:</h4><ul><li>Apples</li><li>Blueberries</li><li>Strawberries</li><li>Bananas</li></ul><h4>Citrus:</h4><ul><li>Lemon</li><li>Lime</li><li>Orange</li><li>Grapefruit</li></ul></div>'\n) &&\nhtml includes(\n'<div><h2>Vegetables:</h2><ul><li>Brussel Sprouts</li><li>Broccoli</li><li>Squash</li></ul></div>'\n)\n);\n})()\n);\n--seed--\n--before-user-code--\njsx\nconst Fruits = () => {\nreturn (\n<div>\n<h2>Fruits:</h2>\n<h4>Non-Citrus:</h4>\n<ul>\n<li>Apples</li>\n<li>Blueberries</li>\n<li>Strawberries</li>\n<li>Bananas</li>\n</ul>\n<h4>Citrus:</h4>\n<ul>\n<li>Lemon</li>\n<li>Lime</li>\n<li>Orange</li>\n<li>Grapefruit</li>\n</ul>\n</div>\n);\n};\nconst Vegetables = () => {\nreturn (\n<div>\n<h2>Vegetables:</h2>\n<ul>\n<li>Brussel Sprouts</li>\n<li>Broccoli</li>\n<li>Squash</li>\n</ul>\n</div>\n);\n};\n--seed-contents--\n```jsx\nclass TypesOfFood extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "eea1ccdce077d2616f85ad0cae477552",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const html = documentgetElementById('challenge-node') childNodes[0] innerHTML; return ( html includes( '<div><h2>Fruits:</h2><h4>Non-Citrus:</h4><ul><li>Apples</li><li>Blueberries</li><li>Strawberries</li><li>Bananas</li></ul><h4>Citrus:</h4><ul><li>Lemon</li><li>Lime</li><li>Orange</li><li>Grapefruit</li></ul></div>' ) && html includes( '<div><h2>Vegetables:</h2><ul><li>Brussel Sprouts</li><li>Broccoli</li><li>Squash</li></ul></div>' ) ); })() ); --seed-- --before-user-code-- jsx const Fruits = () => { return ( <div> <h2>Fruits:</h2> <h4>Non-Citrus:</h4> <ul> <li>Apples</li> <li>Blueberries</li> <li>Strawberries</li> <li>Bananas</li> </ul> <h4>Citrus:</h4> <ul> <li>Lemon</li> <li>Lime</li> <li>Orange</li> <li>Grapefruit</li> </ul> </div> ); }; const Vegetables = () => { return ( <div> <h2>Vegetables:</h2> <ul> <li>Brussel Sprouts</li> <li>Broccoli</li> <li>Squash</li> </ul> </div> ); }; --seed-contents-- ```jsx class TypesOfFood extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{/ Change code below this line /}\n{/* Change code above this line */}\n</div>\n);\n}\n};\n// Change code below this line\n```\n--solutions--\n```jsx\nclass TypesOfFood extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{/ Change code below this line /}\n{/ Change code above this line /}\n);\n}\n};\n// Change code below this line\nReactDOM render(, document getElementById('challenge-node'));\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7bae5eae68b92cdbf1f13dac4c3bded8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface-another-way.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036172\ntitle: Render State in the User Interface Another Way\nchallengeType: 6\nforumTopicId: 301408\ndashedName: render-state-in-the-user-interface-another-way\n--description--\nThere is another way to access state in a component In the render() method, before the return statement, you can write JavaScript directly For example, you could declare functions, access data from state or props, perform computations on this data, and so on Then, you can assign any data to variables, which you have access to in the return statement --instructions--\nIn the MyComponent render method, define a const called name and set it equal to the name value in the component's state Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces Next, in the return statement, render this value in an h1 tag using the variable name Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement --hints--\nMyComponent should have a key name with value freeCodeCamp stored in its state js\nassert(\nEnzyme mount(React createElement(MyComponent)) state('name') ===\n'freeCodeCamp'\n);\nMyComponent should render an h1 heading element enclosed in a single div js\nassert(\n/<div><h1> *<\\/h1><\\/div>/ test(\nEnzyme mount(React createElement(MyComponent)) html()\n)\n);\nThe rendered h1 tag should include a reference to {name} js\nassert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/ test(code));\nThe rendered h1 heading element should contain text rendered from the component's state js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ name: 'TestName' });\nreturn waitForIt(() => mockedComponent html());\n};\nconst firstValue = await first();\nassert(firstValue === '<div><h1>TestName</h1></div>');\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface-another-way.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6c3096c52747fa4bf7a28b30bfb9e3ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface-another-way.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reference to {name} js assert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/ test(code)); The rendered h1 heading element should contain text rendered from the component's state js async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme mount(React createElement(MyComponent)); const first = () => { mockedComponent setState({ name: 'TestName' }); return waitForIt(() => mockedComponent html()); }; const firstValue = await first(); assert(firstValue === '<div><h1>TestName</h1></div>'); }; --seed-- --after-user-code-- jsx ReactDOM render(<MyComponent />, documentgetElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'freeCodeCamp'\n}\n}\nrender() {\n// Change code below this line\n// Change code above this line\nreturn (\n<div>\n{ /* Change code below this line */ }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'freeCodeCamp'\n}\n}\nrender() {\n// Change code below this line\nconst name = this state name;\n// Change code above this line\nreturn (\n<div>\n{ /* Change code below this line */ }\n<h1>{name}</h1>\n{ /* Change code above this line */ }\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface-another-way.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8deb501024120382e3e3eed4314a7595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036171\ntitle: Render State in the User Interface\nchallengeType: 6\nforumTopicId: 301409\ndashedName: render-state-in-the-user-interface\n--description--\nOnce you define a component's initial state, you can display any part of it in the UI that is rendered If a component is stateful, it will always have access to the data in state in its render() method You can access the data with this state If you want to access a state value within the return of the render method, you have to enclose the value in curly braces state is one of the most powerful features of components in React It allows you to track important data in your app and render a UI in response to changes in this data If your data changes, your UI will change React uses what is called a virtual DOM, to keep track of changes behind the scenes When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop React updates the actual DOM, but only where necessary This means you don't have to worry about changing the DOM You simply declare what the UI should look like Note that if you make a component stateful, no other components are aware of its state Its state is completely encapsulated, or local to that component, unless you pass state data to a child component as props This notion of encapsulated state is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code --instructions--\nIn the code editor, MyComponent is already stateful Define an h1 tag in the component's render method which renders the value of name from the component's state Note: The h1 should only render the value from state and nothing else In JSX, any code you write with curly braces { } will be treated as JavaScript So to access the value from state just enclose the reference in curly braces --hints--\nMyComponent should have a key name with value freeCodeCamp stored in its state js\nassert(\nEnzyme mount(React createElement(MyComponent)) state('name') ===\n'freeCodeCamp'\n);\nMyComponent should render an h1 heading element enclosed in a single div js\nassert(\n/<div><h1> *<\\/h1><\\/div>/ test(\nEnzyme mount(React createElement(MyComponent))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8737b2dce6ed592b405e55ab33dd9816",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and nothing else In JSX, any code you write with curly braces { } will be treated as JavaScript So to access the value from state just enclose the reference in curly braces --hints-- MyComponent should have a key name with value freeCodeCamp stored in its state js assert( Enzyme mount(React createElement(MyComponent)) state('name') === 'freeCodeCamp' ); MyComponent should render an h1 heading element enclosed in a single div js assert( /<div><h1> *<\\/h1><\\/div>/ test( Enzyme mount(React createElement(MyComponent))html()\n)\n);\nThe rendered h1 heading element should only contain text rendered from the component's state js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ name: 'TestName' });\nreturn waitForIt(() => mockedComponent html());\n};\nconst firstValue = await first();\nconst getValue = firstValue replace(/\\s/g, '');\nassert(getValue === '<div><h1>TestName</h1></div>');\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'freeCodeCamp'\n}\n}\nrender() {\nreturn (\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'freeCodeCamp'\n}\n}\nrender() {\nreturn (\n<div>\n{ /* Change code below this line */ }\n<h1>{this state name}</h1>\n{ /* Change code above this line */ }\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "165d8829cd591b263521c11fb2acf82a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-with-an-if-else-condition.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036184\ntitle: Render with an If-Else Condition\nchallengeType: 6\nforumTopicId: 301410\ndashedName: render-with-an-if-else-condition\n--description--\nAnother application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition When the condition is true, one view renders When it's false, it's a different view You can do this with a standard if/else statement in the render() method of a React component --instructions--\nMyComponent contains a boolean in its state which tracks whether you want to display some element in the UI or not The button toggles the state of this value Currently, it renders the same UI every time Rewrite the render() method with an if/else statement so that if display is true, you return the current markup Otherwise, return the markup without the h1 element Note: You must write an if/else to pass the tests Use of the ternary operator will not pass here --hints--\nMyComponent should exist and render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent find('MyComponent') length === 1;\n})()\n);\nWhen display is set to true, a div, button, and h1 should render js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst state_1 = () => {\nmockedComponent setState({ display: true });\nreturn waitForIt(() => mockedComponent);\n};\nconst updated = await state_1();\nassert(\nmockedComponent find('div') length === 1 &&\nmockedComponent find('div') children() length === 2 &&\nmockedComponent find('button') length === 1 &&\nmockedComponent find('h1') length === 1\n);\n};\nWhen display is set to false, only a div and button should render js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst state_1 = () => {\nmockedComponent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-with-an-if-else-condition.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8ba9664665ea9b419881ba4b912ce410",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-with-an-if-else-condition.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const updated = await state_1(); assert( mockedComponent find('div') length === 1 && mockedComponent find('div') children() length === 2 && mockedComponent find('button') length === 1 && mockedComponent find('h1') length === 1 ); }; When display is set to false, only a div and button should render js async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme mount(React createElement(MyComponent)); const state_1 = () => { mockedComponentsetState({ display: false });\nreturn waitForIt(() => mockedComponent);\n};\nconst updated = await state_1();\nassert(\nmockedComponent find('div') length === 1 &&\nmockedComponent find('div') children() length === 1 &&\nmockedComponent find('button') length === 1 &&\nmockedComponent find('h1') length === 0\n);\n};\nThe render method should use an if/else statement to check the condition of this state display js\nassert(code includes('if') && code includes('else'));\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ndisplay: true\n}\nthis toggleDisplay = this toggleDisplay bind(this);\n}\ntoggleDisplay() {\nthis setState((state) => ({\ndisplay: state display\n}));\n}\nrender() {\n// Change code below this line\nreturn (\n<div>\n<button onClick={this toggleDisplay}>Toggle Display</button>\n<h1>Displayed </h1>\n</div>\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ndisplay: true\n}\nthis toggleDisplay = this toggleDisplay bind(this);\n}\ntoggleDisplay() {\nthis setState((state) => ({\ndisplay: state display\n}));\n}\nrender() {\n// Change code below this line\nif (this state display) {\nreturn (\n<div>\n<button onClick={this toggleDisplay}>Toggle Display</button>\n<h1>Displayed </h1>\n</div>\n);\n} else {\nreturn (\n<div>\n<button onClick={this toggleDisplay}>Toggle Display</button>\n</div>\n);\n}\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-with-an-if-else-condition.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a448ad5ec2fc0b89197f890ee20191a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036188\ntitle: Render Conditionally from Props\nchallengeType: 6\nforumTopicId: 301405\ndashedName: render-conditionally-from-props\n--description--\nSo far, you've seen how to use if/else, &&, and the ternary operator (condition expressionIfTrue : expressionIfFalse) to make conditional decisions about what to render and when However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props Using props to conditionally render code is very common with React developers — that is, they use the value of a given prop to automatically make decisions about what to render In this challenge, you'll set up a child component to make rendering decisions based on props You'll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context --instructions--\nThe code editor has two components that are partially defined for you: a parent called GameOfChance, and a child called Results They are used to create a simple game where the user presses a button to see if they win or lose First, you'll need a simple expression that randomly returns a different value every time it is run You can use Math random() This method returns a value between 0 (inclusive) and 1 (exclusive) each time it is called So for 50/50 odds, use Math random() >= 5 in your expression Statistically speaking, this expression will return true 50% of the time, and false the other 50% In the render method, replace null with the above expression to complete the variable declaration Now you have an expression that you can use to make a randomized decision in the code Next you need to implement this Render the Results component as a child of GameOfChance, and pass in expression as a prop called fiftyFifty In the Results component, write a ternary expression to render the h1 element with the text You Win or You Lose based on the fiftyFifty prop that's being passed in from GameOfChance Finally, make sure the handleClick() method is correctly counting each turn so the user knows how many times they've played This also serves to let the user know the component has actually updated in case they win or lose twice in a row",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "13bc1302669060c3bee447ee19db8ff7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "fiftyFifty In the Results component, write a ternary expression to render the h1 element with the text You Win or You Lose based on the fiftyFifty prop that's being passed in from GameOfChance Finally, make sure the handleClick() method is correctly counting each turn so the user knows how many times they've played This also serves to let the user know the component has actually updated in case they win or lose twice in a row--hints--\nThe GameOfChance component should exist and render to the page js\nassert strictEqual(\nEnzyme mount(React createElement(GameOfChance)) find('GameOfChance') length,\n1\n);\nGameOfChance should return a single button element js\nassert strictEqual(\nEnzyme mount(React createElement(GameOfChance)) find('button') length,\n1\n);\nGameOfChance should return a single instance of the Results component, which has a prop called fiftyFifty js\nassert(\nEnzyme mount(React createElement(GameOfChance)) find('Results') length ===\n1 &&\nEnzyme mount(React createElement(GameOfChance)) find('Results') props() hasOwnProperty('fiftyFifty') === true\n);\nGameOfChance state should be initialized with a property of counter set to a value of 1 js\nassert strictEqual(\nEnzyme mount(React createElement(GameOfChance)) state() counter,\n1\n);\nWhen the GameOfChance component is first rendered to the DOM, a p element should be returned with the inner text of Turn: 1 js\nassert strictEqual(\nEnzyme mount(React createElement(GameOfChance)) find('p') text(),\n'Turn: 1'\n);\nEach time the button is clicked, the counter state should be incremented by a value of 1, and a single p element should be rendered to the DOM that contains the text Turn: N, where N is the value of the counter state js\n(() => {\nconst comp = Enzyme mount(React createElement(GameOfChance));\nconst simulate = () => {\ncomp find('button') simulate('click');\n};\nconst result = () => ({\ncount: comp state('counter'),\ntext: comp find('p')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a2acab2c0aeb04e4e83e75dc09ad2793",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "); Each time the button is clicked, the counter state should be incremented by a value of 1, and a single p element should be rendered to the DOM that contains the text Turn: N, where N is the value of the counter state js (() => { const comp = Enzyme mount(React createElement(GameOfChance)); const simulate = () => { comp find('button') simulate('click'); }; const result = () => ({ count: comp state('counter'), text: comp find('p')text()\n});\nconst _1 = () => {\nsimulate();\nreturn result();\n};\nconst _2 = () => {\nsimulate();\nreturn result();\n};\nconst _3 = () => {\nsimulate();\nreturn result();\n};\nconst _4 = () => {\nsimulate();\nreturn result();\n};\nconst _5 = () => {\nsimulate();\nreturn result();\n};\nconst _1_val = _1();\nconst _2_val = _2();\nconst _3_val = _3();\nconst _4_val = _4();\nconst _5_val = _5();\nassert(\n_1_val count === 2 &&\n_1_val text === 'Turn: 2' &&\n_2_val count === 3 &&\n_2_val text === 'Turn: 3' &&\n_3_val count === 4 &&\n_3_val text === 'Turn: 4' &&\n_4_val count === 5 &&\n_4_val text === 'Turn: 5' &&\n_5_val count === 6 &&\n_5_val text === 'Turn: 6'\n);\n})();\nWhen the GameOfChance component is first mounted to the DOM and each time the button is clicked thereafter, a single h1 element should be returned that randomly renders either You Win or You Lose Note: this can fail randomly If that happens, please try again js\n(() => {\nconst comp = Enzyme mount(React createElement(GameOfChance));\nconst simulate = () => {\ncomp find('button') simulate('click');\n};\nconst result = () => ({\nh1: comp find('h1') length,\ntext: comp find('h1')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "1b35208587c0d316ca8593f0284ea16a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "GameOfChance component is first mounted to the DOM and each time the button is clicked thereafter, a single h1 element should be returned that randomly renders either You Win or You Lose Note: this can fail randomly If that happens, please try again js (() => { const comp = Enzyme mount(React createElement(GameOfChance)); const simulate = () => { comp find('button') simulate('click'); }; const result = () => ({ h1: comp find('h1') length, text: comp find('h1')text()\n});\nconst _1 = result();\nconst _2 = () => {\nsimulate();\nreturn result();\n};\nconst _3 = () => {\nsimulate();\nreturn result();\n};\nconst _4 = () => {\nsimulate();\nreturn result();\n};\nconst _5 = () => {\nsimulate();\nreturn result();\n};\nconst _6 = () => {\nsimulate();\nreturn result();\n};\nconst _7 = () => {\nsimulate();\nreturn result();\n};\nconst _8 = () => {\nsimulate();\nreturn result();\n};\nconst _9 = () => {\nsimulate();\nreturn result();\n};\nconst _10 = () => {\nsimulate();\nreturn result();\n};\nconst _2_val = _2();\nconst _3_val = _3();\nconst _4_val = _4();\nconst _5_val = _5();\nconst _6_val = _6();\nconst _7_val = _7();\nconst _8_val = _8();\nconst _9_val = _9();\nconst _10_val = _10();\nconst __text = new Set([\n_1 text,\n_2_val text,\n_3_val text,\n_4_val text,\n_5_val text,\n_6_val text,\n_7_val text,\n_8_val text,\n_9_val text,\n_10_val text\n]);\nconst __h1 = new Set([\n_1 h1,\n_2_val h1,\n_3_val h1,\n_4_val h1,\n_5_val h1,\n_6_val h1,\n_7_val h1,\n_8_val h1,\n_9_val h1,\n_10_val h1\n]);\nassert(__text size === 2 && __h1 size === 1);\n})();\n--seed--\n--after-user-code--\njsx\nReactDOM render(<GameOfChance />, document getElementById('root'));\n--seed-contents--\n```jsx\nclass Results extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "b76dbfcb5ea4345b4e82bfa7a0fc144d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const __text = new Set([ _1 text, _2_val text, _3_val text, _4_val text, _5_val text, _6_val text, _7_val text, _8_val text, _9_val text, _10_val text ]); const __h1 = new Set([ _1 h1, _2_val h1, _3_val h1, _4_val h1, _5_val h1, _6_val h1, _7_val h1, _8_val h1, _9_val h1, _10_val h1 ]); assert(__text size === 2 && __h1 size === 1); })(); --seed-- --after-user-code-- jsx ReactDOM render(<GameOfChance />, document getElementById('root')); --seed-contents-- ```jsx class Results extends ReactComponent {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n{/ Change code below this line /}\nreturn ;\n{/ Change code above this line /}\n}\n}\nclass GameOfChance extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ncounter: 1\n};\nthis handleClick = this handleClick bind(this);\n}\nhandleClick() {\nthis setState(prevState => {\n// Complete the return statement:\nreturn {\ncounter: prevState\n}\n});\n}\nrender() {\nconst expression = null; // Change this line\nreturn (\nPlay Again\n{/ Change code below this line /}\n{/* Change code above this line */}\n<p>{'Turn: ' + this state counter}</p>\n</div>\n);\n}\n}\n```\n--solutions--\n```jsx\n// We want this to be deterministic for testing purposes const randomSequence = [true, false, false, true, true, false, false, true, true, false];\nlet index = 0;\nconst fiftyFifty = () => randomSequence[index++ % randomSequence length];\nclass Results extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn {this props fiftyFifty 'You Win ' : 'You Lose '};\n}\n}\nclass GameOfChance extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ncounter: 1\n};\nthis handleClick = this handleClick bind(this);\n}\nhandleClick() {\nthis setState(prevState => {\nreturn {\ncounter: prevState counter + 1\n}\n});\n}\nrender() {\nreturn (\nPlay Again\n{'Turn: ' + this state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "21a61449cc60f8f8c7d922d7c4be9849",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "length]; class Results extends React Component { constructor(props) { super(props); } render() { return {this props fiftyFifty 'You Win ' : 'You Lose '}; } } class GameOfChance extends React Component { constructor(props) { super(props); this state = { counter: 1 }; this handleClick = this handleClick bind(this); } handleClick() { this setState(prevState => { return { counter: prevState counter + 1 } }); } render() { return ( Play Again {'Turn: ' + this statecounter}\n);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md",
      "source_type": "git_repo"
    },
    "token_count": 112,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "724160977d58fab3544f3cd6ad3c4d16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036173\ntitle: Set State with this setState\nchallengeType: 6\nforumTopicId: 301412\ndashedName: set-state-with-this-setstate\n--description--\nThe previous challenges covered component state and how to initialize state in the constructor There is also a way to change the component's state React provides a method for updating component state called setState You call the setState method within your component class like so: this setState(), passing in an object with key-value pairs The keys are your state properties and the values are the updated state data For instance, if we were storing a username in state and wanted to update it, it would look like this:\njsx\nthis setState({\nusername: 'Lewis'\n});\nReact expects you to never modify state directly, instead always use this setState() when state changes occur Also, you should note that React may batch multiple state updates in order to improve performance What this means is that state updates through the setState method can be asynchronous There is an alternative syntax for the setState method which provides a way around this problem This is rarely needed but it's good to keep it in mind Please consult our React article for further details --instructions--\nThere is a button element in the code editor which has an onClick() handler This handler is triggered when the button receives a click event in the browser, and runs the handleClick method defined on MyComponent Within the handleClick method, update the component state using this setState() Set the name property in state to equal the string React Rocks Click the button and watch the rendered state update Don't worry if you don't fully understand how the click handler code works at this point It's covered in upcoming challenges --hints--\nThe state of MyComponent should initialize with the key value pair { name: Initial State } js\nassert(\nEnzyme mount(React createElement(MyComponent)) state('name') ===\n'Initial State'\n);\nMyComponent should render an h1 heading element js\nassert(Enzyme mount(React createElement(MyComponent)) find('h1') length === 1);\nThe rendered h1 heading element should contain text rendered from the component's state js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "897be84e9ad614e0bf5e330d467e2574",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "value pair { name: Initial State } js assert( Enzyme mount(React createElement(MyComponent)) state('name') === 'Initial State' ); MyComponent should render an h1 heading element js assert(Enzyme mount(React createElement(MyComponent)) find('h1') length === 1); The rendered h1 heading element should contain text rendered from the component's state js async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme mount(React createElement(MyComponent)); const first = () => { mockedComponentsetState({ name: 'TestName' });\nreturn waitForIt(() => mockedComponent html());\n};\nconst firstValue = await first();\nassert(/<h1>TestName<\\/h1>/ test(firstValue));\n};\nCalling the handleClick method on MyComponent should set the name property in state to equal React Rocks js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ name: 'Before' });\nreturn waitForIt(() => mockedComponent state('name'));\n};\nconst second = () => {\nmockedComponent instance() handleClick();\nreturn waitForIt(() => mockedComponent state('name'));\n};\nconst firstValue = await first();\nconst secondValue = await second();\nassert(firstValue === 'Before' && secondValue === 'React Rocks ');\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'Initial State'\n};\nthis handleClick = this handleClick bind(this);\n}\nhandleClick() {\n// Change code below this line\n// Change code above this line\n}\nrender() {\nreturn (\nClick Me\n{this state name}\n);\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nname: 'Initial State'\n};\nthis handleClick = this handleClick bind(this);\n}\nhandleClick() {\n// Change code below this line\nthis setState({\nname: 'React Rocks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2db36c47793d4e408f9afdae21525740",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "State' }; this handleClick = this handleClick bind(this); } handleClick() { // Change code below this line // Change code above this line } render() { return ( Click Me {this state name} ); } }; ``` --solutions-- jsx class MyComponent extends React Component { constructor(props) { super(props); this state = { name: 'Initial State' }; this handleClick = this handleClick bind(this); } handleClick() { // Change code below this line this setState({ name: 'React Rocks'\n});\n// Change code above this line\n}\nrender() {\nreturn (\n<div>\n<button onClick = {this handleClick}>Click Me</button>\n<h1>{this state name}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4dfa6fbb15482a34cbf3e014ee7ee634",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\review-using-props-with-stateless-functional-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616f\ntitle: Review Using Props with Stateless Functional Components\nchallengeType: 6\nforumTopicId: 301411\ndashedName: review-using-props-with-stateless-functional-components\n--description--\nExcept for the last challenge, you've been passing props to stateless functional components These components act like pure functions They accept props as input and return the same view every time they are passed the same props You may be wondering what state is, and the next challenge will cover it in more detail Before that, here's a review of the terminology for components A stateless functional component is any function you write which accepts props and returns JSX A stateless component, on the other hand, is a class that extends React Component, but does not use internal state (covered in the next challenge) Finally, a stateful component is a class component that does maintain its own internal state You may see stateful components referred to simply as components or React components A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible This helps contain your state management to a specific area of your application In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior --instructions--\nThe code editor has a CampSite component that renders a Camper component as a child Define the Camper component and assign it default props of { name: 'CamperBot' } Inside the Camper component, render any code that you want, but make sure to have one p element that includes only the name value that is passed in as a prop Finally, define propTypes on the Camper component to require name to be provided as a prop and verify that it is of type string --hints--\nThe CampSite component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(CampSite));\nreturn mockedComponent find('CampSite') length === 1;\n})()\n);\nThe Camper component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(CampSite));\nreturn mockedComponent find('Camper') length === 1;\n})()\n);\nThe Camper component should include default props which assign the string CamperBot to the key name js\nassert(\n/Camper defaultProps={name:(['\"`])CamperBot\\1, }/ test(\n__helpers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\review-using-props-with-stateless-functional-components.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1c76153eee93cb86477d1d9dda5580eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\review-using-props-with-stateless-functional-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is of type string --hints-- The CampSite component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(CampSite)); return mockedComponent find('CampSite') length === 1; })() ); The Camper component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(CampSite)); return mockedComponent find('Camper') length === 1; })() ); The Camper component should include default props which assign the string CamperBot to the key name js assert( /Camper defaultProps={name:(['\"`])CamperBot\\1, }/ test( __helpersremoveWhiteSpace(code)\n)\n);\nThe Camper component should include prop types which require the name prop to be of type string js\nassert(\n/Camper propTypes={name:PropTypes string isRequired, }/ test(\n__helpers removeWhiteSpace(code)\n)\n);\nThe Camper component should contain a p element with only the text from the name prop js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(CampSite));\nreturn (\nmockedComponent find('p') text() ===\nmockedComponent find('Camper') props() name\n);\n})()\n);\n--seed--\n--before-user-code--\njsx\nvar PropTypes = {\nstring: { isRequired: true }\n};\n--after-user-code--\njsx\nReactDOM render(<CampSite />, document getElementById('root'))\n--seed-contents--\njsx\nclass CampSite extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n<div>\n<Camper/>\n</div>\n);\n}\n};\n// Change code below this line\n--solutions--\n```jsx\nclass CampSite extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n);\n}\n};\n// Change code below this line\nconst Camper = (props) => {\nreturn (\n{props name}\n);\n};\nCamper propTypes = {\nname: PropTypes string isRequired\n};\nCamper defaultProps = {\nname: 'CamperBot'\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\review-using-props-with-stateless-functional-components.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a7e5aec785fc875ddd384557a9bd59e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use--for-a-more-concise-conditional.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036185\ntitle: Use && for a More Concise Conditional\nchallengeType: 6\nforumTopicId: 301413\ndashedName: use--for-a-more-concise-conditional\n--description--\nThe if/else statements worked in the last challenge, but there's a more concise way to achieve the same result Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions If you write a lot of else if statements to return slightly different UIs, you may repeat code which leaves room for error Instead, you can use the && logical operator to perform conditional logic in a more concise way This is possible because you want to check if a condition is true, and if it is, return some markup Here's an example:\njsx\n{condition && <p>markup</p>}\nIf the condition is true, the markup will be returned If the condition is false, the operation will immediately return false after evaluating the condition and return nothing You can include these statements directly in your JSX and string multiple conditions together by writing && after each one This allows you to handle more complex conditional logic in your render() method without repeating a lot of code --instructions--\nSolve the previous example again, so the h1 only renders if display is true, but use the && logical operator instead of an if/else statement --hints--\nMyComponent should exist and render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn mockedComponent find('MyComponent') length;\n})()\n);\nWhen display is set to true, a div, button, and h1 should render js\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst state_1 = () => {\nmockedComponent setState({ display: true });\nreturn waitForIt(() => mockedComponent);\n};\nconst updated = await state_1();\nassert(\nupdated find('div') length === 1 &&\nupdated find('div') children() length === 2 &&\nupdated find('button') length === 1 &&\nupdated find('h1') length === 1\n);\n};\nWhen display is set to false, only a div and button should render",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use--for-a-more-concise-conditional.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "44c8e6acf51bdd8e66aed02da47df548",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use--for-a-more-concise-conditional.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme mount(React createElement(MyComponent)); const state_1 = () => { mockedComponent setState({ display: true }); return waitForIt(() => mockedComponent); }; const updated = await state_1(); assert( updated find('div') length === 1 && updated find('div') children() length === 2 && updated find('button') length === 1 && updated find('h1') length === 1 ); }; When display is set to false, only a div and button should renderjs\nasync () => {\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst state_1 = () => {\nmockedComponent setState({ display: false });\nreturn waitForIt(() => mockedComponent);\n};\nconst updated = await state_1();\nassert(\nupdated find('div') length === 1 &&\nupdated find('div') children() length === 1 &&\nupdated find('button') length === 1 &&\nupdated find('h1') length === 0\n);\n};\nThe render method should use the && logical operator to check the condition of this state display js\nassert(code includes('&&'));\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'))\n--seed-contents--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ndisplay: true\n}\nthis toggleDisplay = this toggleDisplay bind(this);\n}\ntoggleDisplay() {\nthis setState(state => ({\ndisplay: state display\n}));\n}\nrender() {\n// Change code below this line\nreturn (\n<div>\n<button onClick={this toggleDisplay}>Toggle Display</button>\n<h1>Displayed </h1>\n</div>\n);\n}\n};\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ndisplay: true\n}\nthis toggleDisplay = this toggleDisplay bind(this);\n}\ntoggleDisplay() {\nthis setState(state => ({\ndisplay: state display\n}));\n}\nrender() {\n// Change code below this line\nreturn (\n<div>\n<button onClick={this toggleDisplay}>Toggle Display</button>\n{this state display && <h1>Displayed </h1>}\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use--for-a-more-concise-conditional.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b46579d7a3b279114341dfbe04ac028d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036187\ntitle: Use a Ternary Expression for Conditional Rendering\nchallengeType: 6\nforumTopicId: 301414\ndashedName: use-a-ternary-expression-for-conditional-rendering\n--description--\nBefore moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the ternary operator The ternary operator is often utilized as a shortcut for if/else statements in JavaScript They're not quite as robust as traditional if/else statements, but they are very popular among React developers One reason for this is because of how JSX is compiled, if/else statements can't be inserted directly into JSX code You might have noticed this a couple challenges ago — when an if/else statement was required, it was always outside the return statement Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX Recall that a ternary operator has three parts, but you can combine several ternary expressions together Here's the basic syntax:\njsx\ncondition expressionIfTrue : expressionIfFalse;\n--instructions--\nThe code editor has three constants defined within the CheckUserAge component's render() method They are called buttonOne, buttonTwo, and buttonThree Each of these is assigned a simple JSX expression representing a button element First, initialize the state of CheckUserAge with input and userAge both set to values of an empty string Once the component is rendering information to the page, users should have a way to interact with it Within the component's return statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, buttonOne, to the page Then, when a user enters their age and clicks the button, render a different button based on the age If a user enters a number less than 18, render buttonThree If a user enters a number greater than or equal to 18, render buttonTwo --hints--\nThe CheckUserAge component should render with a single input element and a single button element js\nassert(\nEnzyme mount(React createElement(CheckUserAge)) find('div') find('input') length === 1 &&\nEnzyme mount(React createElement(CheckUserAge)) find('div') find('button')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "fcb3d834c8ac40e772bd5fb3712dd2aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Then, when a user enters their age and clicks the button, render a different button based on the age If a user enters a number less than 18, render buttonThree If a user enters a number greater than or equal to 18, render buttonTwo --hints-- The CheckUserAge component should render with a single input element and a single button element js assert( Enzyme mount(React createElement(CheckUserAge)) find('div') find('input') length === 1 && Enzyme mount(React createElement(CheckUserAge)) find('div') find('button')length === 1\n);\nThe CheckUserAge component's state should be initialized with a property of userAge and a property of input, both set to a value of an empty string js\nassert(\nEnzyme mount(React createElement(CheckUserAge)) state() input === '' &&\nEnzyme mount(React createElement(CheckUserAge)) state() userAge === ''\n);\nWhen the CheckUserAge component is first rendered to the DOM, the button's inner text should be Submit js\nassert(\nEnzyme mount(React createElement(CheckUserAge)) find('button') text() ===\n'Submit'\n);\nWhen a number of less than 18 is entered into the input element and the button is clicked, the button's inner text should read You Shall Not Pass js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(CheckUserAge));\nconst initialButton = mockedComponent find('button') text();\nconst enter3AndClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '3' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst enter17AndClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '17' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "b5437c0c4db60c38b0717880707792bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the button's inner text should read You Shall Not Pass js (() => { const mockedComponent = Enzyme mount(React createElement(CheckUserAge)); const initialButton = mockedComponent find('button') text(); const enter3AndClickButton = () => { mockedComponent find('input') simulate('change', { target: { value: '3' } }); mockedComponent find('button') simulate('click'); mockedComponent update(); return mockedComponent find('button') text(); }; const enter17AndClickButton = () => { mockedComponent find('input') simulate('change', { target: { value: '17' } }); mockedComponent find('button') simulate('click'); mockedComponent update(); return mockedComponent find('button')text();\n};\nconst userAge3 = enter3AndClickButton();\nconst userAge17 = enter17AndClickButton();\nassert(\ninitialButton === 'Submit' &&\nuserAge3 === 'You Shall Not Pass' &&\nuserAge17 === 'You Shall Not Pass'\n);\n})();\nWhen a number greater than or equal to 18 is entered into the input element and the button is clicked, the button's inner text should read You May Enter js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(CheckUserAge));\nconst initialButton = mockedComponent find('button') text();\nconst enter18AndClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '18' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst enter35AndClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '35' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst userAge18 = enter18AndClickButton();\nconst userAge35 = enter35AndClickButton();\nassert(\ninitialButton === 'Submit' &&\nuserAge18 === 'You May Enter' &&\nuserAge35 === 'You May Enter'\n);\n})();\nOnce a number has been submitted, and the value of the input is once again changed, the button should return to reading Submit js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(CheckUserAge));\nconst enter18AndClickButton = () => {\nmockedComponent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0d141771e09856283509c46449481043",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mockedComponent find('button') simulate('click'); mockedComponent update(); return mockedComponent find('button') text(); }; const userAge18 = enter18AndClickButton(); const userAge35 = enter35AndClickButton(); assert( initialButton === 'Submit' && userAge18 === 'You May Enter' && userAge35 === 'You May Enter' ); })(); Once a number has been submitted, and the value of the input is once again changed, the button should return to reading Submit js (() => { const mockedComponent = Enzyme mount(React createElement(CheckUserAge)); const enter18AndClickButton = () => { mockedComponentfind('input') simulate('change', { target: { value: '18' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst changeInputDontClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '5' } });\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst enter10AndClickButton = () => {\nmockedComponent find('input') simulate('change', { target: { value: '10' } });\nmockedComponent find('button') simulate('click');\nmockedComponent update();\nreturn mockedComponent find('button') text();\n};\nconst userAge18 = enter18AndClickButton();\nconst changeInput1 = changeInputDontClickButton();\nconst userAge10 = enter10AndClickButton();\nconst changeInput2 = changeInputDontClickButton();\nassert(\nuserAge18 === 'You May Enter' &&\nchangeInput1 === 'Submit' &&\nuserAge10 === 'You Shall Not Pass' &&\nchangeInput2 === 'Submit'\n);\n})();\nYour code should not contain any if/else statements js\nassert(\nnew RegExp(/(\\s|;)if(\\s|\\()/) test(\ncode\n) === false\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<CheckUserAge />, document getElementById('root'));\n--seed-contents--\n```jsx\nconst inputStyle = {\nwidth: 235,\nmargin: 5\n};\nclass CheckUserAge extends React Component {\nconstructor(props) {\nsuper(props);\n// Change code below this line\n// Change code above this line\nthis submit = this submit bind(this);\nthis handleChange = this handleChange",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "1b4f8aaf0b96825e73eecba8dff7c163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Pass' && changeInput2 === 'Submit' ); })(); Your code should not contain any if/else statements js assert( new RegExp(/(\\s|;)if(\\s|\\()/) test( code ) === false ); --seed-- --after-user-code-- jsx ReactDOM render(<CheckUserAge />, document getElementById('root')); --seed-contents-- ```jsx const inputStyle = { width: 235, margin: 5 }; class CheckUserAge extends React Component { constructor(props) { super(props); // Change code below this line // Change code above this line this submit = this submit bind(this); this handleChange = this handleChangebind(this);\n}\nhandleChange(e) {\nthis setState({\ninput: e target value,\nuserAge: ''\n});\n}\nsubmit() {\nthis setState(state => ({\nuserAge: state input\n}));\n}\nrender() {\nconst buttonOne = Submit;\nconst buttonTwo = You May Enter;\nconst buttonThree = You Shall Not Pass;\nreturn (\nEnter Your Age to Continue\n{/ Change code below this line /}\n{/* Change code above this line */}\n</div>\n);\n}\n}\n```\n--solutions--\n```jsx\nconst inputStyle = {\nwidth: 235,\nmargin: 5\n};\nclass CheckUserAge extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nuserAge: '',\ninput: ''\n};\nthis submit = this submit bind(this);\nthis handleChange = this handleChange bind(this);\n}\nhandleChange(e) {\nthis setState({\ninput: e target value,\nuserAge: ''\n});\n}\nsubmit() {\nthis setState(state => ({\nuserAge: state input\n}));\n}\nrender() {\nconst buttonOne = Submit;\nconst buttonTwo = You May Enter;\nconst buttonThree = You Shall Not Pass;\nreturn (\nEnter Your Age to Continue\n{this state userAge === '' buttonOne\n: this state userAge >= 18 buttonTwo\n: buttonThree}\n);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "db8bc153920c2454454e39e01485fad8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403618a\ntitle: Use Array map() to Dynamically Render Elements\nchallengeType: 6\nforumTopicId: 301417\ndashedName: use-array-map-to-dynamically-render-elements\n--description--\nConditional rendering is useful, but you may need your components to render an unknown number of elements Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program Programmers need to write their code to correctly handle that unknown state ahead of time Using Array map() in React illustrates this concept For example, you create a simple \"To Do List\" app As the programmer, you have no way of knowing how many items a user might have on their list You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day --instructions--\nThe code editor has most of the MyToDoList component set up Some of this code should look familiar if you completed the controlled form challenge You'll notice a textarea and a button, along with a couple of methods that track their states, but nothing is rendered to the page yet Inside the constructor, create a this state object and define two states: userInput should be initialized as an empty string, and toDoList should be initialized as an empty array Next, delete the null value in the render() method next to the items variable In its place, map over the toDoList array stored in the component's internal state and dynamically render a li for each item Try entering the string eat, code, sleep, repeat into the textarea, then click the button and see what happens Note: You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique key attribute Don't worry, this is the topic of the next challenge --hints--\nThe MyToDoList component should exist and render to the page js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nreturn mockedComponent find('MyToDoList') length === 1;\n})()\n);\nThe first child of MyToDoList should be a textarea element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nreturn (\nmockedComponent find('MyToDoList') children() childAt(0)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "69b93e9818b48c5673f986d433cb4c20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "need to be supplied with a unique key attribute Don't worry, this is the topic of the next challenge --hints-- The MyToDoList component should exist and render to the page js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyToDoList)); return mockedComponent find('MyToDoList') length === 1; })() ); The first child of MyToDoList should be a textarea element js assert( (function () { const mockedComponent = Enzyme mount(React createElement(MyToDoList)); return ( mockedComponent find('MyToDoList') children() childAt(0)type() ===\n'textarea'\n);\n})()\n);\nThe second child of MyToDoList should be a br element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nreturn (\nmockedComponent find('MyToDoList') children() childAt(1) type() === 'br'\n);\n})()\n);\nThe third child of MyToDoList should be a button element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nreturn (\nmockedComponent find('MyToDoList') children() childAt(2) type() ===\n'button'\n);\n})()\n);\nThe state of MyToDoList should be initialized with toDoList as an empty array js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nconst initialState = mockedComponent state();\nreturn (\nArray isArray(initialState toDoList) === true &&\ninitialState toDoList length === 0\n);\n})()\n);\nThe state of MyToDoList should be initialized with userInput as an empty string js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nconst initialState = mockedComponent state();\nreturn (\ntypeof initialState userInput === 'string' &&\ninitialState userInput length === 0\n);\n})()\n);\nWhen the Create List button is clicked, the MyToDoList component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the textarea element js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyToDoList));\nconst simulateChange = (el, value) =>\nel simulate('change', { target: { value } });\nconst state_1 = () => {\nreturn mockedComponent find('ul')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "51606dadd90b223e7edf882805183ea4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "&& initialState userInput length === 0 ); })() ); When the Create List button is clicked, the MyToDoList component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the textarea element js (() => { const mockedComponent = Enzyme mount(React createElement(MyToDoList)); const simulateChange = (el, value) => el simulate('change', { target: { value } }); const state_1 = () => { return mockedComponent find('ul')find('li');\n};\nconst setInput = () => {\nreturn simulateChange(\nmockedComponent find('textarea'),\n'testA, testB, testC'\n);\n};\nconst click = () => {\nreturn mockedComponent find('button') simulate('click');\n};\nconst state_2 = () => {\nconst nodes = mockedComponent find('ul') find('li');\nreturn { nodes, text: nodes reduce((t, n) => t + n text() trim(), '') };\n};\nconst setInput_2 = () => {\nreturn simulateChange(\nmockedComponent find('textarea'),\n't1, t2, t3, t4, t5, t6'\n);\n};\nconst click_1 = () => {\nreturn mockedComponent find('button') simulate('click');\n};\nconst state_3 = () => {\nconst nodes = mockedComponent find('ul') find('li');\nreturn { nodes, text: nodes reduce((t, n) => t + n text() trim(), '') };\n};\nconst awaited_state_1 = state_1();\nconst awaited_setInput = setInput();\nconst awaited_click = click();\nconst awaited_state_2 = state_2();\nconst awaited_setInput_2 = setInput_2();\nconst awaited_click_1 = click_1();\nconst awaited_state_3 = state_3();\nassert(\nawaited_state_1 length === 0 &&\nawaited_state_2 nodes length === 3 &&\nawaited_state_3 nodes length === 6 &&\nawaited_state_2 text === 'testAtestBtestC' &&\nawaited_state_3 text === 't1t2t3t4t5t6'\n);\n})();\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyToDoList />, document getElementById('root'));\n--seed-contents--\n```jsx\nconst textAreaStyles = {\nwidth: 235,\nmargin: 5\n};\nclass MyToDoList extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d7d3482a5ab566a7e2cd785a0d57e6f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const awaited_setInput = setInput(); const awaited_click = click(); const awaited_state_2 = state_2(); const awaited_setInput_2 = setInput_2(); const awaited_click_1 = click_1(); const awaited_state_3 = state_3(); assert( awaited_state_1 length === 0 && awaited_state_2 nodes length === 3 && awaited_state_3 nodes length === 6 && awaited_state_2 text === 'testAtestBtestC' && awaited_state_3 text === 't1t2t3t4t5t6' ); })(); --seed-- --after-user-code-- jsx ReactDOM render(<MyToDoList />, document getElementById('root')); --seed-contents-- ```jsx const textAreaStyles = { width: 235, margin: 5 }; class MyToDoList extends ReactComponent {\nconstructor(props) {\nsuper(props);\n// Change code below this line\n// Change code above this line\nthis handleSubmit = this handleSubmit bind(this);\nthis handleChange = this handleChange bind(this);\n}\nhandleSubmit() {\nconst itemsArray = this state userInput split(',');\nthis setState({\ntoDoList: itemsArray\n});\n}\nhandleChange(e) {\nthis setState({\nuserInput: e target value\n});\n}\nrender() {\nconst items = null; // Change this line\nreturn (\nCreate List\nMy \"To Do\" List:\n{items}\n);\n}\n}\n```\n--solutions--\n```jsx\nconst textAreaStyles = {\nwidth: 235,\nmargin: 5\n};\nclass MyToDoList extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ntoDoList: [],\nuserInput: ''\n};\nthis handleSubmit = this handleSubmit bind(this);\nthis handleChange = this handleChange bind(this);\n}\nhandleSubmit() {\nconst itemsArray = this state userInput split(',');\nthis setState({\ntoDoList: itemsArray\n});\n}\nhandleChange(e) {\nthis setState({\nuserInput: e target value\n});\n}\nrender() {\nconst items = this state toDoList map((item, i) => {\nreturn {item};\n});\nreturn (\nCreate List\nMy \"To Do\" List:\n{items}\n);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "15ed3dd03370443fb1a852af6deaff3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-default-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616b\ntitle: Use Default Props\nchallengeType: 6\nforumTopicId: 301418\ndashedName: use-default-props\n--description--\nReact also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare MyComponent.defaultProps = { location: 'San Francisco' }, you have defined a location prop that's set to the string San Francisco, unless you specify otherwise. React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null.\n--instructions--\nThe code editor shows a ShoppingCart component. Define default props on this component which specify a prop items with a value of 0.\n--hints--\nThe ShoppingCart component should render.\njs\nassert(\n(function () {\nconst mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\nreturn mockedComponent.find('ShoppingCart').length === 1;\n})()\n);\nThe ShoppingCart component should have a default prop of { items: 0 }.\njs\nassert(\n(function () {\nconst mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\nmockedComponent.setProps({ items: undefined });\nreturn mockedComponent.find('ShoppingCart').props().items === 0;\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM.render(<ShoppingCart />, document.getElementById('root'))\n--seed-contents--\njsx\nconst ShoppingCart = (props) => {\nreturn (\n<div>\n<h1>Shopping Cart Component</h1>\n</div>\n)\n};\n// Change code below this line\n--solutions--\n```jsx\nconst ShoppingCart = (props) => {\nreturn (\nShopping Cart Component\n)\n};\n// Change code below this line\nShoppingCart.defaultProps = {\nitems: 0\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-default-props.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ddc55edcb364ebb5efe1748caa60d0a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036183\ntitle: Use Advanced JavaScript in React Render Method\nchallengeType: 6\nforumTopicId: 301415\ndashedName: use-advanced-javascript-in-react-render-method\n--description--\nIn previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, { }, for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components You can also write JavaScript directly in your render methods, before the return statement, without inserting it inside of curly braces This is because it is not yet within the JSX code When you want to use a variable later in the JSX code inside the return statement, you place the variable name inside curly braces --instructions--\nIn the code provided, the render method has an array that contains 20 phrases to represent the answers found in the classic 1980's Magic Eight Ball toy The button click event is bound to the ask method, so each time the button is clicked a random number will be generated and stored as the randomIndex in state On line 52, delete the string change me and reassign the answer const so your code randomly accesses a different index of the possibleAnswers array each time the component updates Finally, insert the answer const inside the p tags --hints--\nThe MagicEightBall component should exist and should render to the page js\nassert strictEqual(\nEnzyme mount(React createElement(MagicEightBall)) find('MagicEightBall') length,\n1\n);\nMagicEightBall's first child should be an input element js\nassert strictEqual(\nEnzyme mount(React createElement(MagicEightBall)) children() childAt(0) name(),\n'input'\n);\nMagicEightBall's third child should be a button element js\nassert strictEqual(\nEnzyme mount(React createElement(MagicEightBall)) children() childAt(2) name(),\n'button'\n);\nMagicEightBall's state should be initialized with a property of userInput and a property of randomIndex both set to a value of an empty string js\nassert(\nEnzyme mount(React createElement(MagicEightBall)) state('randomIndex') ===\n'' &&\nEnzyme mount(React createElement(MagicEightBall))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a9a35e6bb188408a5c1515dcb1201a0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 ); MagicEightBall's first child should be an input element js assert strictEqual( Enzyme mount(React createElement(MagicEightBall)) children() childAt(0) name(), 'input' ); MagicEightBall's third child should be a button element js assert strictEqual( Enzyme mount(React createElement(MagicEightBall)) children() childAt(2) name(), 'button' ); MagicEightBall's state should be initialized with a property of userInput and a property of randomIndex both set to a value of an empty string js assert( Enzyme mount(React createElement(MagicEightBall)) state('randomIndex') === '' && Enzyme mount(React createElement(MagicEightBall))state('userInput') === ''\n);\nWhen MagicEightBall is first mounted to the DOM, it should return an empty p element js\nassert(\nEnzyme mount(React createElement(MagicEightBall)) find('p') length === 1 &&\nEnzyme mount(React createElement(MagicEightBall)) find('p') text() === ''\n);\nWhen text is entered into the input element and the button is clicked, the MagicEightBall component should return a p element that contains a random element from the possibleAnswers array js\n(() => {\nconst comp = Enzyme mount(React createElement(MagicEightBall));\nconst simulate = () => {\ncomp find('input') simulate('change', { target: { value: 'test ' } });\ncomp find('button') simulate('click');\n};\nconst result = () => comp find('p')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7d5c2fa2c3bf52aeb684f4aac7807295",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Enzyme mount(React createElement(MagicEightBall)) find('p') text() === '' ); When text is entered into the input element and the button is clicked, the MagicEightBall component should return a p element that contains a random element from the possibleAnswers array js (() => { const comp = Enzyme mount(React createElement(MagicEightBall)); const simulate = () => { comp find('input') simulate('change', { target: { value: 'test ' } }); comp find('button') simulate('click'); }; const result = () => comp find('p')text();\nconst _1 = () => {\nsimulate();\nreturn result();\n};\nconst _2 = () => {\nsimulate();\nreturn result();\n};\nconst _3 = () => {\nsimulate();\nreturn result();\n};\nconst _4 = () => {\nsimulate();\nreturn result();\n};\nconst _5 = () => {\nsimulate();\nreturn result();\n};\nconst _6 = () => {\nsimulate();\nreturn result();\n};\nconst _7 = () => {\nsimulate();\nreturn result();\n};\nconst _8 = () => {\nsimulate();\nreturn result();\n};\nconst _9 = () => {\nsimulate();\nreturn result();\n};\nconst _10 = () => {\nsimulate();\nreturn result();\n};\nconst _1_val = _1();\nconst _2_val = _2();\nconst _3_val = _3();\nconst _4_val = _4();\nconst _5_val = _5();\nconst _6_val = _6();\nconst _7_val = _7();\nconst _8_val = _8();\nconst _9_val = _9();\nconst _10_val = _10();\nconst actualAnswers = [\n_1_val,\n_2_val,\n_3_val,\n_4_val,\n_5_val,\n_6_val,\n_7_val,\n_8_val,\n_9_val,\n_10_val\n];\nconst hasIndex = actualAnswers filter(\n(answer, i) => possibleAnswers indexOf(answer) == -1\n);\nconst notAllEqual = new Set(actualAnswers);\nassert(notAllEqual size > 1 && hasIndex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d496d24d477c4b46c93c04ce4351417d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "_1(); const _2_val = _2(); const _3_val = _3(); const _4_val = _4(); const _5_val = _5(); const _6_val = _6(); const _7_val = _7(); const _8_val = _8(); const _9_val = _9(); const _10_val = _10(); const actualAnswers = [ _1_val, _2_val, _3_val, _4_val, _5_val, _6_val, _7_val, _8_val, _9_val, _10_val ]; const hasIndex = actualAnswers filter( (answer, i) => possibleAnswers indexOf(answer) == -1 ); const notAllEqual = new Set(actualAnswers); assert(notAllEqual size > 1 && hasIndexlength === 10);\n})();\n--seed--\n--after-user-code--\njsx\nvar possibleAnswers = [\n'It is certain',\n'It is decidedly so',\n'Without a doubt',\n'Yes, definitely',\n'You may rely on it',\n'As I see it, yes',\n'Outlook good',\n'Yes',\n'Signs point to yes',\n'Reply hazy try again',\n'Ask again later',\n'Better not tell you now',\n'Cannot predict now',\n'Concentrate and ask again',\n\"Don't count on it\",\n'My reply is no',\n'My sources say no',\n'Outlook not so good',\n'Very doubtful',\n'Most likely'\n];\nReactDOM render(<MagicEightBall />, document getElementById('root'));\n--seed-contents--\n```jsx\nconst inputStyle = {\nwidth: 235,\nmargin: 5\n};\nclass MagicEightBall extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nuserInput: '',\nrandomIndex: ''\n};\nthis ask = this ask bind(this);\nthis handleChange = this handleChange bind(this);\n}\nask() {\nif (this state userInput) {\nthis setState({\nrandomIndex: Math floor(Math random() * 20),\nuserInput: ''\n});\n}\n}\nhandleChange(event) {\nthis setState({\nuserInput: event target",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2c76bab2311a9b08a2a8d54f81f1c6fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "likely' ]; ReactDOM render(<MagicEightBall />, document getElementById('root')); --seed-contents-- ```jsx const inputStyle = { width: 235, margin: 5 }; class MagicEightBall extends React Component { constructor(props) { super(props); this state = { userInput: '', randomIndex: '' }; this ask = this ask bind(this); this handleChange = this handleChange bind(this); } ask() { if (this state userInput) { this setState({ randomIndex: Math floor(Math random() * 20), userInput: '' }); } } handleChange(event) { this setState({ userInput: event targetvalue\n});\n}\nrender() {\nconst possibleAnswers = [\n'It is certain',\n'It is decidedly so',\n'Without a doubt',\n'Yes, definitely',\n'You may rely on it',\n'As I see it, yes',\n'Outlook good',\n'Yes',\n'Signs point to yes',\n'Reply hazy try again',\n'Ask again later',\n'Better not tell you now',\n'Cannot predict now',\n'Concentrate and ask again',\n\"Don't count on it\",\n'My reply is no',\n'My sources say no',\n'Most likely',\n'Outlook not so good',\n'Very doubtful'\n];\nconst answer = 'change me '; // Change this line\nreturn (\nAsk the Magic Eight Ball Answer:\n{/ Change code below this line /}\n{/* Change code above this line */}\n</p>\n</div>\n);\n}\n}\n```\n--solutions--\n```jsx\nconst inputStyle = {\nwidth: 235,\nmargin: 5\n};\nclass MagicEightBall extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nuserInput: '',\nrandomIndex: ''\n};\nthis ask = this ask bind(this);\nthis handleChange = this handleChange bind(this);\n}\nask() {\nif (this state userInput) {\nthis setState({\nrandomIndex: Math floor(Math random() * 20),\nuserInput: ''\n});\n}\n}\nhandleChange(event) {\nthis setState({\nuserInput: event target",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "91170c8074dd4b82f5523946edb7487e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "*/} </p> </div> ); } } ``` --solutions-- ```jsx const inputStyle = { width: 235, margin: 5 }; class MagicEightBall extends React Component { constructor(props) { super(props); this state = { userInput: '', randomIndex: '' }; this ask = this ask bind(this); this handleChange = this handleChange bind(this); } ask() { if (this state userInput) { this setState({ randomIndex: Math floor(Math random() * 20), userInput: '' }); } } handleChange(event) { this setState({ userInput: event targetvalue\n});\n}\nrender() {\nconst possibleAnswers = [\n'It is certain',\n'It is decidedly so',\n'Without a doubt',\n'Yes, definitely',\n'You may rely on it',\n'As I see it, yes',\n'Outlook good',\n'Yes',\n'Signs point to yes',\n'Reply hazy try again',\n'Ask again later',\n'Better not tell you now',\n'Cannot predict now',\n'Concentrate and ask again',\n\"Don't count on it\",\n'My reply is no',\n'My sources say no',\n'Outlook not so good',\n'Very doubtful',\n'Most likely'\n];\nconst answer = possibleAnswers[this state randomIndex];\nreturn (\nAsk the Magic Eight Ball Answer:\n{answer}\n);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "0bbd03d098854ce49f50c7f719d80364",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403618c\ntitle: Use Array filter() to Dynamically Filter an Array\nchallengeType: 6\nforumTopicId: 301416\ndashedName: use-array-filter-to-dynamically-filter-an-array\n--description--\nThe map array method is a powerful tool that you will use often when working with React Another method related to map is filter, which filters the contents of an array based on a condition, then returns a new array For example, if you have an array of users that all have a property online which can be set to true or false, you can filter only those users that are online by writing:\njs\nlet onlineUsers = users filter(user => user online);\n--instructions--\nIn the code editor, MyComponent's state is initialized with an array of users Some users are online and some aren't Filter the array so you see only the users who are online To do this, first use filter to return a new array containing only the users whose online property is true Then, in the renderOnline variable, map over the filtered array, and return a li element for each user that contains the text of their username Be sure to include a unique key as well, like in the last challenges --hints--\nMyComponent should exist and render to the page js\nassert strictEqual(\nEnzyme mount(React createElement(MyComponent)) find('MyComponent') length,\n1\n);\nMyComponent's state should be initialized to an array of six users js\nassert(\nArray isArray(\nEnzyme mount(React createElement(MyComponent)) state('users')\n) === true &&\nEnzyme mount(React createElement(MyComponent)) state('users') length === 6\n);\nMyComponent should return a div, an h1, and then an unordered list containing li elements for every user whose online status is set to true js\n(() => {\nconst comp = Enzyme mount(React createElement(MyComponent));\nconst users = (bool) => ({\nusers: [\n{ username: 'Jeff', online: bool },\n{ username: 'Alan', online: bool },\n{ username: 'Mary', online: bool },\n{ username: 'Jim', online: bool },\n{ username: 'Laura', online: bool }\n]\n});\nconst result = () => comp find('li') length;\nconst _1 = result();\nconst _2 = () => {\ncomp",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6506b907806253eba945bdd9930422a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "whose online status is set to true js (() => { const comp = Enzyme mount(React createElement(MyComponent)); const users = (bool) => ({ users: [ { username: 'Jeff', online: bool }, { username: 'Alan', online: bool }, { username: 'Mary', online: bool }, { username: 'Jim', online: bool }, { username: 'Laura', online: bool } ] }); const result = () => comp find('li') length; const _1 = result(); const _2 = () => { compsetState(users(true));\nreturn result();\n};\nconst _3 = () => {\ncomp setState(users(false));\nreturn result();\n};\nconst _4 = () => {\ncomp setState({ users: [] });\nreturn result();\n};\nconst _2_val = _2();\nconst _3_val = _3();\nconst _4_val = _4();\nassert(\ncomp find('div') length === 1 &&\ncomp find('h1') length === 1 &&\ncomp find('ul') length === 1 &&\n_1 === 4 &&\n_2_val === 5 &&\n_3_val === 0 &&\n_4_val === 0\n);\n})();\nMyComponent should render li elements that contain the username of each online user js\n(() => {\nconst comp = Enzyme mount(React createElement(MyComponent));\nconst users = (bool) => ({\nusers: [\n{ username: 'Jeff', online: bool },\n{ username: 'Alan', online: bool },\n{ username: 'Mary', online: bool },\n{ username: 'Jim', online: bool },\n{ username: 'Laura', online: bool }\n]\n});\nconst ul = () => {\ncomp setState(users(true));\nreturn comp find('ul') html();\n};\nconst html = ul();\nassert(\nhtml ===\n'<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>'\n);\n})();\nEach list item element should have a unique key attribute js\nassert(\n(() => {\nconst ul = Enzyme mount(React createElement(MyComponent)) find('ul');\nconsole log(ul debug());\nconst keys = new Set([\nul childAt(0) key(),\nul childAt(1) key(),\nul childAt(2) key(),\nul childAt(3) key()\n]);\nreturn keys",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "25ed08c3e1d417d1adbabea0b67692b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ username: 'Laura', online: bool } ] }); const ul = () => { comp setState(users(true)); return comp find('ul') html(); }; const html = ul(); assert( html === '<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>' ); })(); Each list item element should have a unique key attribute js assert( (() => { const ul = Enzyme mount(React createElement(MyComponent)) find('ul'); console log(ul debug()); const keys = new Set([ ul childAt(0) key(), ul childAt(1) key(), ul childAt(2) key(), ul childAt(3) key() ]); return keyssize === 4;\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'));\n--seed-contents--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nusers: [\n{\nusername: 'Jeff',\nonline: true\n},\n{\nusername: 'Alan',\nonline: false\n},\n{\nusername: 'Mary',\nonline: true\n},\n{\nusername: 'Jim',\nonline: false\n},\n{\nusername: 'Sara',\nonline: true\n},\n{\nusername: 'Laura',\nonline: true\n}\n]\n};\n}\nrender() {\nconst usersOnline = null; // Change this line\nconst renderOnline = null; // Change this line\nreturn (\n<div>\n<h1>Current Online Users:</h1>\n<ul>{renderOnline}</ul>\n</div>\n);\n}\n}\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nusers: [\n{\nusername: 'Jeff',\nonline: true\n},\n{\nusername: 'Alan',\nonline: false\n},\n{\nusername: 'Mary',\nonline: true\n},\n{\nusername: 'Jim',\nonline: false\n},\n{\nusername: 'Sara',\nonline: true\n},\n{\nusername: 'Laura',\nonline: true\n}\n]\n};\n}\nrender() {\nconst usersOnline = this state users filter(user => {\nreturn user online;\n});\nconst renderOnline = usersOnline map(user => {\nreturn <li key={user username}>{user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ecbe348a61e0b89c4e5644b408fe691e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Component { constructor(props) { super(props); this state = { users: [ { username: 'Jeff', online: true }, { username: 'Alan', online: false }, { username: 'Mary', online: true }, { username: 'Jim', online: false }, { username: 'Sara', online: true }, { username: 'Laura', online: true } ] }; } render() { const usersOnline = this state users filter(user => { return user online; }); const renderOnline = usersOnline map(user => { return <li key={user username}>{userusername}</li>;\n});\nreturn (\n<div>\n<h1>Current Online Users:</h1>\n<ul>{renderOnline}</ul>\n</div>\n);\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 150,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5a1be343e16b6efcbd9f25a828a8ad5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-react-to-render-nested-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036165\ntitle: Use React to Render Nested Components\nchallengeType: 6\nforumTopicId: 301420\ndashedName: use-react-to-render-nested-components\n--description--\nThe last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React Component composition is one of React's powerful features When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge You break down your UI into its basic building blocks, and those pieces become the components This helps to separate the code responsible for the UI from the code responsible for handling your application logic It can greatly simplify the development and maintenance of complex projects --instructions--\nThere are two functional components defined in the code editor, called TypesOfFruit and Fruits Take the TypesOfFruit component and compose it, or nest it, within the Fruits component Then take the Fruits component and nest it within the TypesOfFood component The result should be a child component, nested within a parent component, which is nested within a parent component of its own --hints--\nThe TypesOfFood component should return a single div element js\nassert(Enzyme shallow(React createElement(TypesOfFood)) type() === 'div');\nThe TypesOfFood component should return the Fruits component js\nassert(\nEnzyme shallow(React createElement(TypesOfFood)) props() children[1] type name === 'Fruits'\n);\nThe Fruits component should return the TypesOfFruit component js\nassert(\nEnzyme mount(React createElement(TypesOfFood)) find('h2') html() ===\n'<h2>Fruits:</h2>'\n);\nThe TypesOfFruit component should return the h2 and ul elements js\nassert(\nEnzyme mount(React createElement(TypesOfFood)) find('ul') text() ===\n'ApplesBlueberriesStrawberriesBananas'\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<TypesOfFood />, document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-react-to-render-nested-components.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7e6692941df76e2b9f6b99d6f8232640",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-react-to-render-nested-components.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a single div element js assert(Enzyme shallow(React createElement(TypesOfFood)) type() === 'div'); The TypesOfFood component should return the Fruits component js assert( Enzyme shallow(React createElement(TypesOfFood)) props() children[1] type name === 'Fruits' ); The Fruits component should return the TypesOfFruit component js assert( Enzyme mount(React createElement(TypesOfFood)) find('h2') html() === '<h2>Fruits:</h2>' ); The TypesOfFruit component should return the h2 and ul elements js assert( Enzyme mount(React createElement(TypesOfFood)) find('ul') text() === 'ApplesBlueberriesStrawberriesBananas' ); --seed-- --after-user-code-- jsx ReactDOM render(<TypesOfFood />, documentgetElementById('root'))\n--seed-contents--\n```jsx\nconst TypesOfFruit = () => {\nreturn (\nFruits:\nApples\nBlueberries\nStrawberries\nBananas\n);\n};\nconst Fruits = () => {\nreturn (\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n};\nclass TypesOfFood extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{ / Change code below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\n```\n--solutions--\n```jsx\nconst TypesOfFruit = () => {\nreturn (\nFruits:\nApples\nBlueberries\nStrawberries\nBananas\n);\n};\nconst Fruits = () => {\nreturn (\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n};\nclass TypesOfFood extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nTypes of Food:\n{ / Change code below this line / }\n{ / Change code above this line / }\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-react-to-render-nested-components.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eaab78057c1b6f4869455f7bce28e76d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-proptypes-to-define-the-props-you-expect.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403616d\ntitle: Use PropTypes to Define the Props You Expect\nchallengeType: 6\nforumTopicId: 301419\ndashedName: use-proptypes-to-define-the-props-you-expect\n--description--\nReact provides useful type-checking features to verify that components receive props of the correct type For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop You can set propTypes on your component to require the data to be of type array This will throw a useful warning when the data is of any other type It's considered a best practice to set propTypes when you know the type of a prop ahead of time You can define a propTypes property for a component in the same way you defined defaultProps Doing this will check that props of a given key are present with a given type Here's an example to require the type function for a prop called handleClick:\njs\nMyComponent propTypes = { handleClick: PropTypes func isRequired }\nIn the example above, the PropTypes func part checks that handleClick is a function Adding isRequired tells React that handleClick is a required property for that component You will see a warning if that prop isn't provided Also notice that func represents function Among the seven JavaScript primitive types, function and boolean (written as bool) are the only two that use unusual spelling In addition to the primitive types, there are other types available For example, you can check that a prop is a React element Please refer to the documentation for all of the options Note: As of React v15 5 0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types';\n--instructions--\nDefine propTypes for the Items component to require quantity as a prop and verify that it is of type number --hints--\nThe ShoppingCart component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ShoppingCart));\nreturn mockedComponent find('ShoppingCart') length === 1;\n})()\n);\nThe Items component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(ShoppingCart));\nreturn mockedComponent find('Items') length === 1;\n})()\n);\nThe Items component should include a propTypes check to require a value for quantity and ensure that its value is a number js\nconst noWhiteSpace = __helpers removeWhiteSpace(code);\nassert(noWhiteSpace",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3827,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-proptypes-to-define-the-props-you-expect.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8c1c1d3b64a990208375679a61e91526",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-proptypes-to-define-the-props-you-expect.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ShoppingCart component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ShoppingCart)); return mockedComponent find('ShoppingCart') length === 1; })() ); The Items component should render js assert( (function () { const mockedComponent = Enzyme mount(React createElement(ShoppingCart)); return mockedComponent find('Items') length === 1; })() ); The Items component should include a propTypes check to require a value for quantity and ensure that its value is a number js const noWhiteSpace = __helpers removeWhiteSpace(code); assert(noWhiteSpaceincludes('quantity:PropTypes number isRequired') && noWhiteSpace includes('Items propTypes='));\n--seed--\n--before-user-code--\njsx\nvar PropTypes = {\nnumber: { isRequired: true }\n};\n--after-user-code--\njsx\nReactDOM render(<ShoppingCart />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst Items = (props) => {\nreturn Current Quantity of Items in Cart: {props quantity}\n};\n// Change code below this line\n// Change code above this line\nItems defaultProps = {\nquantity: 0\n};\nclass ShoppingCart extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn\n}\n};\n```\n--solutions--\n```jsx\nconst Items = (props) => {\nreturn Current Quantity of Items in Cart: {props quantity}\n};\n// Change code below this line\nItems propTypes = {\nquantity: PropTypes number isRequired\n};\n// Change code above this line\nItems defaultProps = {\nquantity: 0\n};\nclass ShoppingCart extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3827,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-proptypes-to-define-the-props-you-expect.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "60c8691346429aa4dea65d4788c99fd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentwillmount.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403617c\ntitle: Use the Lifecycle Method componentWillMount\nchallengeType: 6\nforumTopicId: 301423\ndashedName: use-the-lifecycle-method-componentwillmount\n--description--\nReact components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods: componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount() The next several lessons will cover some of the basic use cases for these lifecycle methods.\nNote: The componentWillMount Lifecycle method will be deprecated in a future version of 16.X and removed in version 17. Learn more in this article\n--instructions--\nThe componentWillMount() method is called before the render() method when a component is being mounted to the DOM. Log something to the console within componentWillMount() - you may want to have your browser console open to see the output.\n--hints--\nMyComponent should render a div element.\njs\nassert(\n(function () {\nconst mockedComponent = Enzyme.mount(React.createElement(MyComponent));\nreturn mockedComponent.find('div').length === 1;\n})()\n);\nconsole.log should be called in componentWillMount.\njs\nassert(\n(function () {\nconst lifecycle = React.createElement(MyComponent)\n.type.prototype.componentWillMount.toString()\n.replace(/ /g, '');\nreturn lifecycle.includes('console.log(');\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM.render(<MyComponent />, document.getElementById('root'))\n--seed-contents--\n```jsx\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);\n}\ncomponentWillMount() {\n// Change code below this line\n// Change code above this line\n}\nrender() {\nreturn\n}\n};\n```\n--solutions--\njsx\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);\n}\ncomponentWillMount() {\n// Change code below this line\nconsole.log('Component is mounting...');\n// Change code above this line\n}\nrender() {\nreturn <div />\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentwillmount.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53799f17515ef2cb3d057622f0a01853",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-react-component-from-scratch.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036168\ntitle: Write a React Component from Scratch\nchallengeType: 6\nforumTopicId: 301424\ndashedName: write-a-react-component-from-scratch\n--description--\nNow that you've learned the basics of JSX and React components, it's time to write a component on your own. React components are the core building blocks of React applications so it's important to become very familiar with writing them. Remember, a typical React component is an ES6 class which extends React.Component. It has a render method that returns HTML (from JSX) or null. This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects.\n--instructions--\nDefine a class MyComponent that extends React.Component. Its render method should return a div that contains an h1 tag with the text: My First React Component! in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too.\nRender this component to the DOM using ReactDOM.render(). There is a div with id='challenge-node' available for you to use.\n--hints--\nThere should be a React component called MyComponent.\njs\nassert(__helpers.removeWhiteSpace(code).includes('classMyComponentextendsReact.Component{'));\nMyComponent should contain an h1 tag with text My First React Component! Case and punctuation matter.\njs\nassert(\n(function () {\nconst mockedComponent = Enzyme.mount(React.createElement(MyComponent));\nreturn mockedComponent.find('h1').text() === 'My First React Component!';\n})()\n);\nMyComponent should render to the DOM.\njs\nassert(document.getElementById('challenge-node').childNodes.length === 1);\nMyComponent should have a constructor calling super with props.\njs\nassert(\nMyComponent.toString().includes('MyComponent(props)') &&\nMyComponent.toString().includes('_super.call(this, props)')\n);\n--seed--\n--seed-contents--\njsx\n// Change code below this line\n--solutions--\n```jsx\n// Change code below this line\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\nMy First React Component!\n);\n}\n};\nReactDOM.render(, document.getElementById('challenge-node'));\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-react-component-from-scratch.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d44113c1f80d7efe23378cd43b738ca8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036176\ntitle: Use State to Toggle an Element\nchallengeType: 6\nforumTopicId: 301421\ndashedName: use-state-to-toggle-an-element\n--description--\nSometimes you might need to know the previous state when updating the state However, state updates may be asynchronous - this means React may batch multiple setState() calls into a single update This means you can't rely on the previous value of this state or this props when calculating the next value So, you should not use code like this:\njsx\nthis setState({\ncounter: this state counter + this props increment\n});\nInstead, you should pass setState a function that allows you to access state and props Using a function with setState guarantees you are working with the most current values of state and props This means that the above should be rewritten as:\njsx\nthis setState((state, props) => ({\ncounter: state counter + props increment\n}));\nYou can also use a form without props if you need only the state:\njsx\nthis setState(state => ({\ncounter: state counter + 1\n}));\nNote that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code --instructions--\nMyComponent has a visibility property which is initialized to false The render method returns one view if the value of visibility is true, and a different view if it is false Currently, there is no way of updating the visibility property in the component's state The value should toggle back and forth between true and false There is a click handler on the button which triggers a class method called toggleVisibility() Pass a function to setState to define this method so that the state of visibility toggles to the opposite value when the method is called If visibility is false, the method sets it to true, and vice versa Finally, click the button to see the conditional rendering of the component based on its state Hint: Don't forget to bind the this keyword to the method in the constructor --hints--\nMyComponent should return a div element which contains a button js\nassert strictEqual(\nEnzyme mount(React createElement(MyComponent)) find('div') find('button') length,\n1\n);\nThe state of MyComponent should initialize with a visibility property set to false js\nassert strictEqual(\nEnzyme mount(React createElement(MyComponent))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4e00e0ec4aabd624e7cabe3b2912824f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to true, and vice versa Finally, click the button to see the conditional rendering of the component based on its state Hint: Don't forget to bind the this keyword to the method in the constructor --hints-- MyComponent should return a div element which contains a button js assert strictEqual( Enzyme mount(React createElement(MyComponent)) find('div') find('button') length, 1 ); The state of MyComponent should initialize with a visibility property set to false js assert strictEqual( Enzyme mount(React createElement(MyComponent))state('visibility'),\nfalse\n);\nClicking the button element should toggle the visibility property in state between true and false and conditionally render the h1 element js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ visibility: false });\nreturn mockedComponent state('visibility');\n};\nconst second = () => {\nmockedComponent find('button') simulate('click');\nreturn mockedComponent state('visibility') && mockedComponent find('h1') exists();\n};\nconst third = () => {\nmockedComponent find('button') simulate('click');\nreturn mockedComponent state('visibility') && mockedComponent find('h1') exists();\n};\nconst firstValue = first();\nconst secondValue = second();\nconst thirdValue = third();\nassert( firstValue && secondValue && thirdValue);\n})();\nAn anonymous function should be passed to setState js\nconst paramRegex = '[a-zA-Z$_]\\\\w*(,[a-zA-Z$_]\\\\w*) ';\nassert(\nnew RegExp(\n'this\\\\ setState\\\\((function\\\\(' +\nparamRegex +\n'\\\\){|([a-zA-Z$_]\\\\w*|\\\\(' +\nparamRegex +\n'\\\\))=>)'\n) test(__helpers removeWhiteSpace(code))\n);\nthis should not be used inside setState\njs\nassert( /this\\ setState\\([^}]*this/ test(code));\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'));\n--seed-contents--\n```jsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nvisibility: false\n};\n// Change code below this line\n// Change code above this line\n}\n// Change code below this line\n// Change code above this line\nrender() {\nif (this state visibility) {\nreturn (\nClick Me\nNow you see me",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bd9a76afc5f3d4869a295d89d6845ce6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "not be used inside setState js assert( /this\\ setState\\([^}]*this/ test(code)); --seed-- --after-user-code-- jsx ReactDOM render(<MyComponent />, document getElementById('root')); --seed-contents-- ```jsx class MyComponent extends React Component { constructor(props) { super(props); this state = { visibility: false }; // Change code below this line // Change code above this line } // Change code below this line // Change code above this line render() { if (this state visibility) { return ( Click Me Now you see me);\n} else {\nreturn (\nClick Me\n);\n}\n}\n}\n```\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nvisibility: false\n};\nthis toggleVisibility = this toggleVisibility bind(this);\n}\ntoggleVisibility() {\nthis setState(state => ({\nvisibility: state visibility\n}));\n}\nrender() {\nif (this state visibility) {\nreturn (\n<div>\n<button onClick={this toggleVisibility}>Click Me</button>\n<h1>Now you see me </h1>\n</div>\n);\n} else {\nreturn (\n<div>\n<button onClick={this toggleVisibility}>Click Me</button>\n</div>\n);\n}\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b35988ca819cfc051b68e6548684334f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentdidmount.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403617d\ntitle: Use the Lifecycle Method componentDidMount\nchallengeType: 6\nforumTopicId: 301422\ndashedName: use-the-lifecycle-method-componentdidmount\n--description--\nMost web developers, at some point, need to call an API endpoint to retrieve data If you're working with React, it's important to know where to perform this action The best practice with React is to place API calls or any calls to your server in the lifecycle method componentDidMount() This method is called after a component is mounted to the DOM Any calls to setState() here will trigger a re-rendering of your component When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data --instructions--\nThere is a mock API call in componentDidMount() It sets state after 2 5 seconds to simulate calling a server to retrieve data This example requests the current total active users for a site In the render method, render the value of activeUsers in the h1 after the text Active Users: Watch what happens in the preview, and feel free to change the timeout to see the different effects --hints--\nMyComponent should render a div element which wraps an h1 tag js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn (\nmockedComponent find('div') length === 1 &&\nmockedComponent find('h1') length === 1\n);\n})()\n);\nComponent state should be updated with a timeout function in componentDidMount js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nreturn new RegExp('setTimeout( |\\n)+setState( |\\n)+activeUsers') test(\nString(mockedComponent instance() componentDidMount)\n);\n})()\n);\nThe h1 tag should render the activeUsers value from MyComponent's state js\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(MyComponent));\nconst first = () => {\nmockedComponent setState({ activeUsers: 1237 });\nreturn mockedComponent find('h1') text();\n};\nconst second = () => {\nmockedComponent setState({ activeUsers: 1000 });\nreturn mockedComponent find('h1') text();\n};\nassert(new RegExp('1237') test(first()) && new RegExp('1000')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentdidmount.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e83095f278c0fdece86c875eeae2cda9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentdidmount.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mockedComponent = Enzyme mount(React createElement(MyComponent)); return new RegExp('setTimeout( |\\n)+setState( |\\n)+activeUsers') test( String(mockedComponent instance() componentDidMount) ); })() ); The h1 tag should render the activeUsers value from MyComponent's state js (() => { const mockedComponent = Enzyme mount(React createElement(MyComponent)); const first = () => { mockedComponent setState({ activeUsers: 1237 }); return mockedComponent find('h1') text(); }; const second = () => { mockedComponent setState({ activeUsers: 1000 }); return mockedComponent find('h1') text(); }; assert(new RegExp('1237') test(first()) && new RegExp('1000')test(second()));\n})();\n--seed--\n--after-user-code--\njsx\nReactDOM render(<MyComponent />, document getElementById('root'));\n--seed-contents--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nactiveUsers: null\n};\n}\ncomponentDidMount() {\nsetTimeout(() => {\nthis setState({\nactiveUsers: 1273\n});\n}, 2500);\n}\nrender() {\nreturn (\n<div>\n{/* Change code below this line */}\n<h1>Active Users: </h1>\n{/* Change code above this line */}\n</div>\n);\n}\n}\n--solutions--\njsx\nclass MyComponent extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\nactiveUsers: null\n};\n}\ncomponentDidMount() {\nsetTimeout(() => {\nthis setState({\nactiveUsers: 1273\n});\n}, 2500);\n}\nrender() {\nreturn (\n<div>\n<h1>Active Users: {this state activeUsers}</h1>\n</div>\n);\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentdidmount.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "110faccfc9cf202977beeacc187001ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036147\ntitle: Connect Redux to React\nchallengeType: 6\nforumTopicId: 301426\ndashedName: connect-redux-to-react\n--description--\nNow that you've written both the mapStateToProps() and the mapDispatchToProps() functions, you can use them to map state and dispatch to the props of one of your React components The connect method from React Redux can handle this task This method takes two optional arguments, mapStateToProps() and mapDispatchToProps() They are optional because you may have a component that only needs access to state but doesn't need to dispatch any actions, or vice versa To use this method, pass in the functions as arguments, and immediately call the result with your component This syntax is a little unusual and looks like:\njs\nconnect(mapStateToProps, mapDispatchToProps)(MyComponent)\nNote: If you want to omit one of the arguments to the connect method, you pass null in its place --instructions--\nThe code editor has the mapStateToProps() and mapDispatchToProps() functions and a new React component called Presentational Connect this component to Redux with the connect method from the ReactRedux global object, and call it immediately on the Presentational component Assign the result to a new const called ConnectedComponent that represents the connected component That's it, now you're connected to Redux Try changing either of connect's arguments to null and observe the test results --hints--\nThe Presentational component should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('Presentational') length === 1;\n})()\n);\nThe Presentational component should receive a prop messages via connect js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst props = mockedComponent find('Presentational') props();\nreturn props messages === '__INITIAL__STATE__';\n})()\n);\nThe Presentational component should receive a prop submitNewMessage via connect js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst props = mockedComponent find('Presentational') props();\nreturn typeof props submitNewMessage === 'function';\n})()\n);\n--seed--\n--after-user-code--\njsx\nconst store = Redux createStore(\n(state = '__INITIAL__STATE__', action) => state\n);\nclass AppWrapper extends React Component {\nrender() {\nreturn (\n<ReactRedux",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-react.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dfd2bb1fcc35aadf9d78fd6deac53f18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mount(React createElement(AppWrapper)); const props = mockedComponent find('Presentational') props(); return props messages === '__INITIAL__STATE__'; })() ); The Presentational component should receive a prop submitNewMessage via connect js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); const props = mockedComponent find('Presentational') props(); return typeof props submitNewMessage === 'function'; })() ); --seed-- --after-user-code-- jsx const store = Redux createStore( (state = '__INITIAL__STATE__', action) => state ); class AppWrapper extends React Component { render() { return ( <ReactReduxProvider store = {store}>\n<ConnectedComponent/>\n</ReactRedux Provider>\n);\n}\n};\nReactDOM render(<AppWrapper />, document getElementById('root'))\n--seed-contents--\n```jsx\nconst addMessage = (message) => {\nreturn {\ntype: 'ADD',\nmessage: message\n}\n};\nconst mapStateToProps = (state) => {\nreturn {\nmessages: state\n}\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (message) => {\ndispatch(addMessage(message));\n}\n}\n};\nclass Presentational extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn This is a Presentational Component\n}\n};\nconst connect = ReactRedux connect;\n// Change code below this line\n```\n--solutions--\n```jsx\nconst addMessage = (message) => {\nreturn {\ntype: 'ADD',\nmessage: message\n}\n};\nconst mapStateToProps = (state) => {\nreturn {\nmessages: state\n}\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (message) => {\ndispatch(addMessage(message));\n}\n}\n};\nclass Presentational extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn This is a Presentational Component\n}\n};\nconst connect = ReactRedux connect;\n// Change code below this line\nconst ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-react.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4490e0e2a7fb85a1b0cfb6d250e7591b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-simple-counter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036177\ntitle: Write a Simple Counter\nchallengeType: 6\nforumTopicId: 301425\ndashedName: write-a-simple-counter\n--description--\nYou can design a more complex stateful component by combining the concepts covered so far These include initializing state, writing methods that set state, and assigning click handlers to trigger these methods --instructions--\nThe Counter component keeps track of a count value in state There are two buttons which call methods increment() and decrement() Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked Also, create a reset() method so when the reset button is clicked, the count is set to 0 Note: Make sure you don't modify the classNames of the buttons Also, remember to add the necessary bindings for the newly-created methods in the constructor --hints--\nCounter should return a div element which contains three buttons with text content in this order Increment , Decrement , Reset js\nassert(\n(() => {\nconst mockedComponent = Enzyme mount(React createElement(Counter));\nreturn (\nmockedComponent find(' inc') text() === 'Increment ' &&\nmockedComponent find(' dec') text() === 'Decrement ' &&\nmockedComponent find(' reset') text() === 'Reset'\n);\n})()\n);\nThe state of Counter should initialize with a count property set to 0 js\nconst mockedComponent = Enzyme mount(React createElement(Counter));\nassert(mockedComponent find('h1') text() === 'Current Count: 0');\nClicking the increment button should increment the count by 1 js\nconst mockedComponent = Enzyme mount(React createElement(Counter));\nmockedComponent find(' inc') simulate('click');\nassert(mockedComponent find('h1') text() === 'Current Count: 1');\nClicking the decrement button should decrement the count by 1 js\nconst mockedComponent = Enzyme mount(React createElement(Counter));\nmockedComponent find(' dec') simulate('click');\nassert(mockedComponent find('h1') text() === 'Current Count: -1');\nClicking the reset button should reset the count to 0 js\nconst mockedComponent = Enzyme mount(React createElement(Counter));\nmockedComponent setState({ count: 5 });\nconst currentCountElement = mockedComponent find('h1');\nassert(currentCountElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-simple-counter.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "009d84cfc68eed58591b4759780d1831",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-simple-counter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "by 1 js const mockedComponent = Enzyme mount(React createElement(Counter)); mockedComponent find(' inc') simulate('click'); assert(mockedComponent find('h1') text() === 'Current Count: 1'); Clicking the decrement button should decrement the count by 1 js const mockedComponent = Enzyme mount(React createElement(Counter)); mockedComponent find(' dec') simulate('click'); assert(mockedComponent find('h1') text() === 'Current Count: -1'); Clicking the reset button should reset the count to 0 js const mockedComponent = Enzyme mount(React createElement(Counter)); mockedComponent setState({ count: 5 }); const currentCountElement = mockedComponent find('h1'); assert(currentCountElementtext() === 'Current Count: 5');\nmockedComponent find(' reset') simulate('click');\nassert(currentCountElement text() === 'Current Count: 0');\n--seed--\n--after-user-code--\njsx\nReactDOM render(<Counter />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass Counter extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ncount: 0\n};\n// Change code below this line\n// Change code above this line\n}\n// Change code below this line\n// Change code above this line\nrender() {\nreturn (\nIncrement Decrement Reset\nCurrent Count: {this state count}\n);\n}\n};\n```\n--solutions--\njsx\nclass Counter extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ncount: 0\n};\nthis increment = this increment bind(this);\nthis decrement = this decrement bind(this);\nthis reset = this reset bind(this);\n}\nreset() {\nthis setState({\ncount: 0\n});\n}\nincrement() {\nthis setState(state => ({\ncount: state count + 1\n}));\n}\ndecrement() {\nthis setState(state => ({\ncount: state count - 1\n}));\n}\nrender() {\nreturn (\n<div>\n<button className='inc' onClick={this increment}>Increment </button>\n<button className='dec' onClick={this decrement}>Decrement </button>\n<button className='reset' onClick={this reset}>Reset</button>\n<h1>Current Count: {this state count}</h1>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-simple-counter.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3db1376b352a4b3e392d09ec142a8c46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-state-logic-to-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036143\ntitle: Extract State Logic to Redux\nchallengeType: 6\nforumTopicId: 301429\ndashedName: extract-state-logic-to-redux\n--description--\nNow that you finished the React component, you need to move the logic it's performing locally in its state into Redux This is the first step to connect the simple React app to Redux The only functionality your app has is to add new messages from the user to an unordered list The example is simple in order to demonstrate how React and Redux work together --instructions--\nFirst, define an action type ADD and set it to a const ADD Next, define an action creator addMessage() which creates the action to add a message You'll need to pass a message to this action creator and include the message in the returned action Then create a reducer called messageReducer() that handles the state for the messages The initial state should equal an empty array This reducer should add a message to the array of messages held in state, or return the current state Finally, create your Redux store and pass it the reducer --hints--\nThe const ADD should exist and hold a value equal to the string ADD\njs\nassert(ADD === 'ADD');\nThe action creator addMessage should return an object with type equal to ADD and message equal to the message that is passed in js\nassert(\n(function () {\nconst addAction = addMessage('__TEST__MESSAGE__');\nreturn addAction type === ADD && addAction message === '__TEST__MESSAGE__';\n})()\n);\nmessageReducer should be a function js\nassert(typeof messageReducer === 'function');\nThe store should exist and have an initial state set to an empty array js\nassert(\n(function () {\nconst initialState = store getState();\nreturn typeof store === 'object' && initialState length === 0;\n})()\n);\nDispatching addMessage against the store should immutably add a new message to the array of messages held in state js\nassert(\n(function () {\nconst initialState = store getState();\nconst isFrozen = DeepFreeze(initialState);\nstore dispatch(addMessage('__A__TEST__MESSAGE'));\nconst addState = store getState();\nreturn isFrozen && addState[0] === '__A__TEST__MESSAGE';\n})()\n);\nThe messageReducer should return the current state if called with any other actions js\nassert(\n(function () {\nconst addState = store getState();\nstore",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3059,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-state-logic-to-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ea59954d5feee64589c81202398ed18b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-state-logic-to-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=== 0; })() ); Dispatching addMessage against the store should immutably add a new message to the array of messages held in state js assert( (function () { const initialState = store getState(); const isFrozen = DeepFreeze(initialState); store dispatch(addMessage('__A__TEST__MESSAGE')); const addState = store getState(); return isFrozen && addState[0] === '__A__TEST__MESSAGE'; })() ); The messageReducer should return the current state if called with any other actions js assert( (function () { const addState = store getState(); storedispatch({ type: 'FAKE_ACTION' });\nconst testState = store getState();\nreturn addState === testState;\n})()\n);\n--seed--\n--seed-contents--\njsx\n// Define ADD, addMessage(), messageReducer(), and store here:\n--solutions--\n```jsx\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3059,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-state-logic-to-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "041c8203b9f0050f721e26c4d1e9c80a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036148\ntitle: Connect Redux to the Messages App\nchallengeType: 6\nforumTopicId: 301427\ndashedName: connect-redux-to-the-messages-app\n--description--\nNow that you understand how to use connect to connect React to Redux, you can apply what you've learned to your React component that handles messages In the last lesson, the component you connected to Redux was named Presentational, and this wasn't arbitrary This term generally refers to React components that are not directly connected to Redux They are simply responsible for the presentation of UI and do this as a function of the props they receive By contrast, container components are connected to Redux These are typically responsible for dispatching actions to the store and often pass store state to child components as props --instructions--\nThe code editor has all the code you've written in this section so far The only change is that the React component is renamed to Presentational Create a new component held in a constant called Container that uses connect to connect the Presentational component to Redux Then, in the AppWrapper, render the React Redux Provider component Pass Provider the Redux store as a prop and render Container as a child Once everything is set up, you will see the messages app rendered to the page again --hints--\nThe AppWrapper should render to the page js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('AppWrapper') length === 1;\n})()\n);\nThe Container component should be wrapped by a Provider\njs\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find(Provider) length === 1;\n})()\n);\nThe Presentational component should render to page js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('Presentational') length === 1;\n})()\n);\nThe Presentational component should render an h2, input, button, and ul elements js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nreturn (\nPresentationalComponent find('div') length === 1 &&\nPresentationalComponent find('h2') length === 1 &&\nPresentationalComponent find('button') length === 1 &&\nPresentationalComponent find('ul')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "221659dd44da46518bc1a44c40f71409",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The Presentational component should render to page js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); return mockedComponent find('Presentational') length === 1; })() ); The Presentational component should render an h2, input, button, and ul elements js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); const PresentationalComponent = mockedComponent find('Presentational'); return ( PresentationalComponent find('div') length === 1 && PresentationalComponent find('h2') length === 1 && PresentationalComponent find('button') length === 1 && PresentationalComponent find('ul')length === 1\n);\n})()\n);\nThe Presentational component should receive messages from the Redux store as a prop js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nconst props = PresentationalComponent props();\nreturn Array isArray(props messages);\n})()\n);\nThe Presentational component should receive the submitMessage action creator as a prop js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nconst props = PresentationalComponent props();\nreturn typeof props submitNewMessage === 'function';\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<AppWrapper />, document getElementById('root'))\n--seed-contents--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage: message\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nclass Presentational extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => {\nconst currentMessage = state input;\nreturn {\ninput: '',\nmessages: state messages concat(currentMessage)\n};\n});\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this state messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9a76ac6be2442b6b7ff3b2b5ef5d8a2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "class Presentational extends React Component { constructor(props) { super(props); this state = { input: '', messages: [] } this handleChange = this handleChange bind(this); this submitMessage = this submitMessage bind(this); } handleChange(event) { this setState({ input: event target value }); } submitMessage() { this setState((state) => { const currentMessage = state input; return { input: '', messages: state messages concat(currentMessage) }; }); } render() { return ( Type in a new Message: Submit {this state messagesmap( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\n// React-Redux:\nconst mapStateToProps = (state) => {\nreturn { messages: state }\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (newMessage) => {\ndispatch(addMessage(newMessage))\n}\n}\n};\nconst Provider = ReactRedux Provider;\nconst connect = ReactRedux connect;\n// Define the Container component here:\nclass AppWrapper extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\n// Complete the return statement:\nreturn (null);\n}\n};\n```\n--solutions--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage: message\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nclass Presentational extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => {\nconst currentMessage = state input;\nreturn {\ninput: '',\nmessages: state messages concat(currentMessage)\n};\n});\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this state messages map( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\n// React-Redux:\nconst mapStateToProps = (state) => {\nreturn { messages: state }\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (newMessage) => {\ndispatch(addMessage(newMessage))\n}\n}\n};\nconst Provider = ReactRedux",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ce325a6a71d96234c6a304363a7e1b52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "currentMessage = state input; return { input: '', messages: state messages concat(currentMessage) }; }); } render() { return ( Type in a new Message: Submit {this state messages map( (message, idx) => { return ( {message} ) }) } ); } }; // React-Redux: const mapStateToProps = (state) => { return { messages: state } }; const mapDispatchToProps = (dispatch) => { return { submitNewMessage: (newMessage) => { dispatch(addMessage(newMessage)) } } }; const Provider = ReactReduxProvider;\nconst connect = ReactRedux connect;\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\nclass AppWrapper extends React Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b186e2e59704029d631b6b0fbab4adef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\getting-started-with-react-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036141\ntitle: Getting Started with React Redux\nchallengeType: 6\nforumTopicId: 301430\ndashedName: getting-started-with-react-redux\n--description--\nThis series of challenges introduces how to use Redux with React First, here's a review of some of the key principles of each technology React is a view library that you provide with data, then it renders the view in an efficient, predictable way Redux is a state management framework that you can use to simplify the management of your application's state Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app Your React components subscribe to only the pieces of data in the store that are relevant to their role Then, you dispatch actions directly from React components, which then trigger store updates Although React components can manage their own state locally, when you have a complex app, it's generally better to keep the app state in a single location with Redux There are exceptions when individual components may have local state specific only to them Finally, because Redux is not designed to work with React out of the box, you need to use the react-redux package It provides a way for you to pass Redux state and dispatch to your React components as props Over the next few challenges, first, you'll create a simple React component which allows you to input new text messages These are added to an array that's displayed in the view This should be a nice review of what you learned in the React lessons Next, you'll create a Redux store and actions that manage the state of the messages array Finally, you'll use react-redux to connect the Redux store with your component, thereby extracting the local state into the Redux store --instructions--\nStart with a DisplayMessages component Add a constructor to this component and initialize it with a state that has two properties: input, that's set to an empty string, and messages, that's set to an empty array --hints--\nThe DisplayMessages component should render an empty div element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nreturn mockedComponent find('div') text() === '';\n})()\n);\nThe DisplayMessages constructor should be called properly with super, passing in props js\nassert(\n(function () {\nconst noWhiteSpace = __helpers removeWhiteSpace(code);\nreturn (\nnoWhiteSpace includes('constructor(props)') &&\nnoWhiteSpace",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\getting-started-with-react-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ff3c3f2d29dfd5ba99f983e5493e4b75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\getting-started-with-react-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that has two properties: input, that's set to an empty string, and messages, that's set to an empty array --hints-- The DisplayMessages component should render an empty div element js assert( (function () { const mockedComponent = Enzyme mount(React createElement(DisplayMessages)); return mockedComponent find('div') text() === ''; })() ); The DisplayMessages constructor should be called properly with super, passing in props js assert( (function () { const noWhiteSpace = __helpers removeWhiteSpace(code); return ( noWhiteSpace includes('constructor(props)') && noWhiteSpaceincludes('super(props')\n);\n})()\n);\nThe DisplayMessages component should have an initial state equal to {input: \"\", messages: []} js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst initialState = mockedComponent state();\nreturn (\ntypeof initialState === 'object' &&\ninitialState input === '' &&\nArray isArray(initialState messages) &&\ninitialState messages length === 0\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<DisplayMessages />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass DisplayMessages extends React Component {\n// Change code below this line\n// Change code above this line\nrender() {\nreturn\n}\n};\n```\n--solutions--\njsx\nclass DisplayMessages extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\n}\nrender() {\nreturn <div/>\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\getting-started-with-react-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "298cd0ec329dba9fb682197b2e1e62a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-state-to-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036145\ntitle: Map State to Props\nchallengeType: 6\nforumTopicId: 301433\ndashedName: map-state-to-props\n--description--\nThe Provider component allows you to provide state and dispatch to your React components, but you must specify exactly what state and actions you want. This way, you make sure that each component only has access to the state it needs. You accomplish this by creating two functions: mapStateToProps() and mapDispatchToProps().\nIn these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch. Once these functions are in place, you'll see how to use the React Redux connect method to connect them to your components in another challenge.\nNote: Behind the scenes, React Redux uses the store.subscribe() method to implement mapStateToProps().\n--instructions--\nCreate a function mapStateToProps(). This function should take state as an argument, then return an object which maps that state to specific property names. These properties will become accessible to your component via props. Since this example keeps the entire state of the app in a single array, you can pass that entire state to your component. Create a property messages in the object that's being returned, and set it to state.\n--hints--\nThe const state should be an empty array.\njs\nassert(Array.isArray(state) && state.length === 0);\nmapStateToProps should be a function.\njs\nassert(typeof mapStateToProps === 'function');\nmapStateToProps should return an object.\njs\nassert(typeof mapStateToProps() === 'object');\nPassing an array as state to mapStateToProps should return this array assigned to a key of messages.\njs\nassert(mapStateToProps(['messages']).messages.pop() === 'messages');\n--seed--\n--seed-contents--\n```jsx\nconst state = [];\n// Change code below this line\n```\n--solutions--\n```jsx\nconst state = [];\n// Change code below this line\nconst mapStateToProps = (state) => {\nreturn {\nmessages: state\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-state-to-props.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dce5ab914527f9a72aeee6e644d174db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-dispatch-to-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036146\ntitle: Map Dispatch to Props\nchallengeType: 6\nforumTopicId: 301432\ndashedName: map-dispatch-to-props\n--description--\nThe mapDispatchToProps() function is used to provide specific action creators to your React components so they can dispatch actions against the Redux store It's similar in structure to the mapStateToProps() function you wrote in the last challenge It returns an object that maps dispatch actions to property names, which become component props However, instead of returning a piece of state, each property returns a function that calls dispatch with an action creator and any relevant action data You have access to this dispatch because it's passed in to mapDispatchToProps() as a parameter when you define the function, just like you passed state to mapStateToProps() Behind the scenes, React Redux is using Redux's store dispatch() to conduct these dispatches with mapDispatchToProps() This is similar to how it uses store subscribe() for components that are mapped to state For example, you have a loginUser() action creator that takes a username as an action payload The object returned from mapDispatchToProps() for this action creator would look something like:\njsx\n{\nsubmitLoginUser: function(username) {\ndispatch(loginUser(username));\n}\n}\n--instructions--\nThe code editor provides an action creator called addMessage() Write the function mapDispatchToProps() that takes dispatch as an argument, then returns an object The object should have a property submitNewMessage set to the dispatch function, which takes a parameter for the new message to add when it dispatches addMessage() --hints--\naddMessage should return an object with keys type and message js\nassert(\n(function () {\nconst addMessageTest = addMessage();\nreturn (\naddMessageTest hasOwnProperty('type') &&\naddMessageTest hasOwnProperty('message')\n);\n})()\n);\nmapDispatchToProps should be a function js\nassert(typeof mapDispatchToProps === 'function');\nmapDispatchToProps should return an object js\nassert(typeof mapDispatchToProps() === 'object');\nDispatching addMessage with submitNewMessage from mapDispatchToProps should return a message to the dispatch function js\nassert(\n(function () {\nlet testAction;\nconst dispatch = (fn) => {\ntestAction = fn;\n};\nlet dispatchFn = mapDispatchToProps(dispatch);\ndispatchFn submitNewMessage('__TEST__MESSAGE__');\nreturn (\ntestAction type === 'ADD' && testAction",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3142,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-dispatch-to-props.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c2ea4ae53e9353c464c3e47606a815f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-dispatch-to-props.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "addMessage(); return ( addMessageTest hasOwnProperty('type') && addMessageTest hasOwnProperty('message') ); })() ); mapDispatchToProps should be a function js assert(typeof mapDispatchToProps === 'function'); mapDispatchToProps should return an object js assert(typeof mapDispatchToProps() === 'object'); Dispatching addMessage with submitNewMessage from mapDispatchToProps should return a message to the dispatch function js assert( (function () { let testAction; const dispatch = (fn) => { testAction = fn; }; let dispatchFn = mapDispatchToProps(dispatch); dispatchFn submitNewMessage('__TEST__MESSAGE__'); return ( testAction type === 'ADD' && testActionmessage === '__TEST__MESSAGE__'\n);\n})()\n);\n--seed--\n--seed-contents--\n```jsx\nconst addMessage = (message) => {\nreturn {\ntype: 'ADD',\nmessage: message\n}\n};\n// Change code below this line\n```\n--solutions--\n```jsx\nconst addMessage = (message) => {\nreturn {\ntype: 'ADD',\nmessage: message\n}\n};\n// Change code below this line\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: function(message) {\ndispatch(addMessage(message));\n}\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3142,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-dispatch-to-props.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0742ecd441f5a58616a4637c39739d58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\moving-forward-from-here.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614a\ntitle: Moving Forward From Here\nchallengeType: 6\nforumTopicId: 301434\ndashedName: moving-forward-from-here\n--description--\nCongratulations! You finished the lessons on React and Redux. There's one last item worth pointing out before you move on. Typically, you won't write React apps in a code editor like this. This challenge gives you a glimpse of what the syntax looks like if you're working with a file system on your own machine. The code should look similar, except for the use of import statements (these pull in all of the dependencies that have been provided for you in the challenges).\nFinally, writing React and Redux code generally requires some configuration. This can get complicated quickly. If you are interested in experimenting on your own machine, the Create React App comes configured and ready to go.\nAlternatively, you can enable Babel as a JavaScript Preprocessor in CodePen, add React and ReactDOM as external JavaScript resources, and work there as well.\n--instructions--\nLog the message 'Now I know React and Redux!' to the console.\n--hints--\nThe message Now I know React and Redux! should be logged to the console.\njs\n() =>\nassert(\n/console\\s*\\.\\s*log\\s*\\(\\s*('|\"|`)Now I know React and Redux!\\1\\s*\\)/.test(\ncode)\n);\n--seed--\n--seed-contents--\n```jsx\n/*\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, connect } from 'react-redux'\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './redux/reducers'\nimport App from './components/App'\nconst store = createStore(\nrootReducer,\napplyMiddleware(thunk)\n);\nReactDOM.render(\n,\ndocument.getElementById('root')\n);\n*/\n// Only change code below this line\n```\n--solutions--\njsx\nconsole.log('Now I know React and Redux!');",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\moving-forward-from-here.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2ad64ea0564554b869e4225b16cb0ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036142\ntitle: Manage State Locally First\nchallengeType: 6\nforumTopicId: 301431\ndashedName: manage-state-locally-first\n--description--\nHere you'll finish creating the DisplayMessages component --instructions--\nFirst, in the render() method, have the component render an input element, button element, and ul element When the input element changes, it should trigger a handleChange() method Also, the input element should render the value of input that's in the component's state The button element should trigger a submitMessage() method when it's clicked Second, write these two methods The handleChange() method should update the input with what the user is typing The submitMessage() method should concatenate the current message (stored in input) to the messages array in local state, and clear the value of the input Finally, use the ul to map over the array of messages and render it to the screen as a list of li elements --hints--\nThe DisplayMessages component should initialize with a state equal to { input: \"\", messages: [] } js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst initialState = mockedComponent state();\nreturn (\ntypeof initialState === 'object' &&\ninitialState input === '' &&\ninitialState messages length === 0\n);\n})()\n);\nThe DisplayMessages component should render a div containing an h2 element, a button element, a ul element, and li elements as children js\n() => {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst state = () => {\nmockedComponent setState({ messages: ['__TEST__MESSAGE'] });\nreturn mockedComponent;\n};\nconst updated = state();\nassert(\nupdated find('div') length === 1 &&\nupdated find('h2') length === 1 &&\nupdated find('button') length === 1 &&\nupdated find('ul') length === 1 &&\nupdated find('li') length > 0\n);\n}; map should be used on the messages array js\nassert(code match(/this\\ state\\ messages\\ map/g));\nThe input element should render the value of input in local state js\n() => {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst causeChange = (c, v) =>\nc find('input')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "957105e446bdadef023f7d2a3976e6cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert( updated find('div') length === 1 && updated find('h2') length === 1 && updated find('button') length === 1 && updated find('ul') length === 1 && updated find('li') length > 0 ); }; map should be used on the messages array js assert(code match(/this\\ state\\ messages\\ map/g)); The input element should render the value of input in local state js () => { const mockedComponent = Enzyme mount(React createElement(DisplayMessages)); const causeChange = (c, v) => c find('input')simulate('change', { target: { value: v } });\nconst testValue = '__TEST__EVENT__INPUT';\nconst changed = () => {\ncauseChange(mockedComponent, testValue);\nreturn mockedComponent;\n};\nconst updated = changed();\nassert(updated find('input') props() value === testValue);\n};\nCalling the method handleChange should update the input value in state to the current input js\n() => {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nconst initialState = mockedComponent state();\nconst testMessage = '__TEST__EVENT__MESSAGE__';\nconst changed = () => {\ncauseChange(mockedComponent, testMessage);\nreturn mockedComponent;\n};\nconst afterInput = changed();\nassert(\ninitialState input === '' &&\nafterInput state() input === '__TEST__EVENT__MESSAGE__'\n);\n};\nClicking the Add message button should call the method submitMessage which should add the current input to the messages array in state js\n() => {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nconst initialState = mockedComponent state();\nconst testMessage_1 = '__FIRST__MESSAGE__';\nconst firstChange = () => {\ncauseChange(mockedComponent, testMessage_1);\nreturn mockedComponent;\n};\nconst firstResult = firstChange();\nconst firstSubmit = () => {\nmockedComponent find('button') simulate('click');\nreturn mockedComponent;\n};\nconst afterSubmit_1 = firstSubmit();\nconst submitState_1 = afterSubmit_1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ac9e6335977b9b05aeff19ad4b2b5117",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to the messages array in state js () => { const mockedComponent = Enzyme mount(React createElement(DisplayMessages)); const causeChange = (c, v) => c find('input') simulate('change', { target: { value: v } }); const initialState = mockedComponent state(); const testMessage_1 = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage_1); return mockedComponent; }; const firstResult = firstChange(); const firstSubmit = () => { mockedComponent find('button') simulate('click'); return mockedComponent; }; const afterSubmit_1 = firstSubmit(); const submitState_1 = afterSubmit_1state();\nconst testMessage_2 = '__SECOND__MESSAGE__';\nconst secondChange = () => {\ncauseChange(mockedComponent, testMessage_2);\nreturn mockedComponent;\n};\nconst secondResult = secondChange();\nconst secondSubmit = () => {\nmockedComponent find('button') simulate('click');\nreturn mockedComponent;\n};\nconst afterSubmit_2 = secondSubmit();\nconst submitState_2 = afterSubmit_2 state();\nassert(\ninitialState messages length === 0 &&\nsubmitState_1 messages length === 1 &&\nsubmitState_2 messages length === 2 &&\nsubmitState_2 messages[1] === testMessage_2\n);\n};\nThe submitMessage method should clear the current input js\n() => {\nconst mockedComponent = Enzyme mount(React createElement(DisplayMessages));\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nconst initialState = mockedComponent state();\nconst testMessage = '__FIRST__MESSAGE__';\nconst firstChange = () => {\ncauseChange(mockedComponent, testMessage);\nreturn mockedComponent;\n};\nconst firstResult = firstChange();\nconst firstState = firstResult state();\nconst firstSubmit = () => {\nmockedComponent find('button') simulate('click');\nreturn mockedComponent;\n};\nconst afterSubmit = firstSubmit();\nconst submitState = afterSubmit state();\nassert(firstState input === testMessage && submitState input === '');\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<DisplayMessages />, document getElementById('root'))\n--seed-contents--\n```jsx\nclass DisplayMessages extends React Component {\nconstructor(props) {\nsuper(props);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4a6b5b078b3b2b72582fd33e80fd40d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "state(); const testMessage = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage); return mockedComponent; }; const firstResult = firstChange(); const firstState = firstResult state(); const firstSubmit = () => { mockedComponent find('button') simulate('click'); return mockedComponent; }; const afterSubmit = firstSubmit(); const submitState = afterSubmit state(); assert(firstState input === testMessage && submitState input === ''); }; --seed-- --after-user-code-- jsx ReactDOM render(<DisplayMessages />, document getElementById('root')) --seed-contents-- ```jsx class DisplayMessages extends React Component { constructor(props) { super(props); thisstate = {\ninput: '',\nmessages: []\n}\n}\n// Add handleChange() and submitMessage() methods here\nrender() {\nreturn (\nType in a new Message:\n{ / Render an input, button, and ul below this line / }\n{ /* Change code above this line */ }\n</div>\n);\n}\n};\n```\n--solutions--\njsx\nclass DisplayMessages extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => {\nconst currentMessage = state input;\nreturn {\ninput: '',\nmessages: state messages concat(currentMessage)\n};\n});\n}\nrender() {\nreturn (\n<div>\n<h2>Type in a new Message:</h2>\n<input\nvalue={this state input}\nonChange={this handleChange}/><br/>\n<button onClick={this submitMessage}>Submit</button>\n<ul>\n{this state messages map( (message, idx) => {\nreturn (\n<li key={idx}>{message}</li>\n)\n})\n}\n</ul>\n</div>\n);\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "75d301d2f8893b1a1d537fc67274f846",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036154\ntitle: Combine Multiple Reducers\nchallengeType: 6\nforumTopicId: 301436\ndashedName: combine-multiple-reducers\n--description--\nWhen the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces Instead, remember the first principle of Redux: all app state is held in a single state object in the store Therefore, Redux provides reducer composition as a solution for a complex state model You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer The root reducer is then passed into the Redux createStore() method In order to let us combine multiple reducers together, Redux provides the combineReducers() method This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions The name you give to the keys will be used by Redux as the name for the associated piece of state Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting For such an application, we might write the combineReducers() method like this:\njs\nconst rootReducer = Redux combineReducers({\nauth: authenticationReducer,\nnotes: notesReducer\n});\nNow, the key notes will contain all of the state associated with our notes and handled by our notesReducer This is how multiple reducers can be composed to manage more complex application state In this example, the state held in the Redux store would then be a single object containing auth and notes properties --instructions--\nThere are counterReducer() and authReducer() functions provided in the code editor, along with a Redux store Finish writing the rootReducer() function using the Redux combineReducers() method Assign counterReducer to a key called count and authReducer to a key called auth --hints--\nThe counterReducer should increment and decrement the state js\nassert(\n(function () {\nconst initialState = store getState() count;\nstore dispatch({ type: INCREMENT });\nstore dispatch({ type: INCREMENT });\nconst firstState = store getState() count;\nstore dispatch({ type: DECREMENT });\nconst secondState = store getState()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d0086ffc5dc2e0a0137aa441590566dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "editor, along with a Redux store Finish writing the rootReducer() function using the Redux combineReducers() method Assign counterReducer to a key called count and authReducer to a key called auth --hints-- The counterReducer should increment and decrement the state js assert( (function () { const initialState = store getState() count; store dispatch({ type: INCREMENT }); store dispatch({ type: INCREMENT }); const firstState = store getState() count; store dispatch({ type: DECREMENT }); const secondState = store getState()count;\nreturn firstState === initialState + 2 && secondState === firstState - 1;\n})()\n);\nThe authReducer should toggle the state of authenticated between true and false js\nassert(\n(function () {\nstore dispatch({ type: LOGIN });\nconst loggedIn = store getState() auth authenticated;\nstore dispatch({ type: LOGOUT });\nconst loggedOut = store getState() auth authenticated;\nreturn loggedIn === true && loggedOut === false;\n})()\n);\nThe store state should have two keys: count, which holds a number, and auth, which holds an object The auth object should have a property of authenticated, which holds a boolean js\nassert(\n(function () {\nconst state = store getState();\nreturn (\ntypeof state auth === 'object' &&\ntypeof state auth authenticated === 'boolean' &&\ntypeof state count === 'number'\n);\n})()\n);\nThe rootReducer should be a function that combines the counterReducer and the authReducer js\nassert(\n(function () {\nconst noWhiteSpace = __helpers removeWhiteSpace(code);\nreturn (\ntypeof rootReducer === 'function' &&\nnoWhiteSpace includes('Redux combineReducers')\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst counterReducer = (state = 0, action) => {\nswitch(action type) {\ncase INCREMENT:\nreturn state + 1;\ncase DECREMENT:\nreturn state - 1;\ndefault:\nreturn state;\n}\n};\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst authReducer = (state = {authenticated: false}, action) => {\nswitch(action type) {\ncase LOGIN:\nreturn {\nauthenticated: true\n}\ncase LOGOUT:\nreturn {\nauthenticated: false\n}\ndefault:\nreturn state;\n}\n};\nconst rootReducer = // Define the root reducer here\nconst store = Redux",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a5dc20ce7dfb34e586980a24a05d8d57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "action) => { switch(action type) { case INCREMENT: return state + 1; case DECREMENT: return state - 1; default: return state; } }; const LOGIN = 'LOGIN'; const LOGOUT = 'LOGOUT'; const authReducer = (state = {authenticated: false}, action) => { switch(action type) { case LOGIN: return { authenticated: true } case LOGOUT: return { authenticated: false } default: return state; } }; const rootReducer = // Define the root reducer here const store = ReduxcreateStore(rootReducer);\n```\n--solutions--\n```js\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst counterReducer = (state = 0, action) => {\nswitch(action type) {\ncase INCREMENT:\nreturn state + 1;\ncase DECREMENT:\nreturn state - 1;\ndefault:\nreturn state;\n}\n};\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst authReducer = (state = {authenticated: false}, action) => {\nswitch(action type) {\ncase LOGIN:\nreturn {\nauthenticated: true\n}\ncase LOGOUT:\nreturn {\nauthenticated: false\n}\ndefault:\nreturn state;\n}\n};\nconst rootReducer = Redux combineReducers({\ncount: counterReducer,\nauth: authReducer\n});\nconst store = Redux createStore(rootReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3422e6575acd80f2e88cf45e14616b7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036144\ntitle: Use Provider to Connect Redux to React\nchallengeType: 6\nforumTopicId: 301435\ndashedName: use-provider-to-connect-redux-to-react\n--description--\nIn the last challenge, you created a Redux store to handle the messages array and created an action for adding new messages The next step is to provide React access to the Redux store and the actions it needs to dispatch updates React Redux provides its react-redux package to help accomplish these tasks React Redux provides a small API with two key features: Provider and connect Another challenge covers connect The Provider is a wrapper component from React Redux that wraps your React app This wrapper then allows you to access the Redux store and dispatch functions throughout your component tree Provider takes two props, the Redux store and the child components of your app Defining the Provider for an App component might look like this:\njsx\n<Provider store={store}>\n<App/>\n</Provider>\n--instructions--\nThe code editor now shows all your Redux and React code from the past several challenges It includes the Redux store, actions, and the DisplayMessages component The only new piece is the AppWrapper component at the bottom Use this top level component to render the Provider from ReactRedux, and pass the Redux store as a prop Then render the DisplayMessages component as a child Once you are finished, you should see your React component rendered to the page Note: React Redux is available as a global variable here, so you can access the Provider with dot notation The code in the editor takes advantage of this and sets it to a constant Provider for you to use in the AppWrapper render method --hints--\nThe AppWrapper should render js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('AppWrapper') length === 1;\n})()\n);\nThe Provider wrapper component should have a prop of store passed to it, equal to the Redux store js\n() =>\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn __helpers removeWhiteSpace(code) includes('<Providerstore={store}>');\n})()\n);\nDisplayMessages should render as a child of AppWrapper js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn (\nmockedComponent find('AppWrapper') find('DisplayMessages')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "89090652737dfb8e3c34152fc1f398e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ const mockedComponent = Enzyme mount(React createElement(AppWrapper)); return mockedComponent find('AppWrapper') length === 1; })() ); The Provider wrapper component should have a prop of store passed to it, equal to the Redux store js () => assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); return __helpers removeWhiteSpace(code) includes('<Providerstore={store}>'); })() ); DisplayMessages should render as a child of AppWrapper js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); return ( mockedComponent find('AppWrapper') find('DisplayMessages')length === 1\n);\n})()\n);\nThe DisplayMessages component should render an h2, input, button, and ul element js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn (\nmockedComponent find('div') length === 1 &&\nmockedComponent find('h2') length === 1 &&\nmockedComponent find('button') length === 1 &&\nmockedComponent find('ul') length === 1\n);\n})()\n);\n--seed--\n--after-user-code--\njsx\nReactDOM render(<AppWrapper />, document getElementById('root'))\n--seed-contents--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nclass DisplayMessages extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => {\nconst currentMessage = state input;\nreturn {\ninput: '',\nmessages: state messages concat(currentMessage)\n};\n});\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this state messages map( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\nconst Provider = ReactRedux Provider;\nclass AppWrapper extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "212f63c454e41c16a053749eea21a75c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "bind(this); this submitMessage = this submitMessage bind(this); } handleChange(event) { this setState({ input: event target value }); } submitMessage() { this setState((state) => { const currentMessage = state input; return { input: '', messages: state messages concat(currentMessage) }; }); } render() { return ( Type in a new Message: Submit {this state messages map( (message, idx) => { return ( {message} ) }) } ); } }; const Provider = ReactRedux Provider; class AppWrapper extends ReactComponent {\n// Render the Provider below this line\n// Change code above this line\n};\n```\n--solutions--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nclass DisplayMessages extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => {\nconst currentMessage = state input;\nreturn {\ninput: '',\nmessages: state messages concat(currentMessage)\n};\n});\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this state messages map( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\nconst Provider = ReactRedux Provider;\nclass AppWrapper extends React Component {\n// Change code below this line\nrender() {\nreturn (\n);\n}\n// Change code above this line\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c1331c3ac022bb39e2db46b1bfb41c28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036149\ntitle: Extract Local State into Redux\nchallengeType: 6\nforumTopicId: 301428\ndashedName: extract-local-state-into-redux\n--description--\nYou're almost done Recall that you wrote all the Redux code so that Redux could control the state management of your React messages app Now that Redux is connected, you need to extract the state management out of the Presentational component and into Redux Currently, you have Redux connected, but you are handling the state locally within the Presentational component --instructions--\nIn the Presentational component, first, remove the messages property in the local state These messages will be managed by Redux Next, modify the submitMessage() method so that it dispatches submitNewMessage() from this props, and pass in the current message input from local state as an argument Because you removed messages from local state, remove the messages property from the call to this setState() here as well Finally, modify the render() method so that it maps over the messages received from props rather than state Once these changes are made, the app will continue to function the same, except Redux manages the state This example also illustrates how a component may have local state: your component still tracks user input locally in its own state You can see how Redux provides a useful state management framework on top of React You achieved the same result using only React's local state at first, and this is usually possible with simple apps However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves --hints--\nThe AppWrapper should render to the page js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('AppWrapper') length === 1;\n})()\n);\nThe Presentational component should render to page js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nreturn mockedComponent find('Presentational') length === 1;\n})()\n);\nThe Presentational component should render an h2, input, button, and ul elements js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nreturn (\nPresentationalComponent find('div') length === 1 &&\nPresentationalComponent find('h2') length === 1 &&\nPresentationalComponent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "27f3e26fb27e7c00275ba061d3c5befb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mockedComponent find('AppWrapper') length === 1; })() ); The Presentational component should render to page js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); return mockedComponent find('Presentational') length === 1; })() ); The Presentational component should render an h2, input, button, and ul elements js assert( (function () { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); const PresentationalComponent = mockedComponent find('Presentational'); return ( PresentationalComponent find('div') length === 1 && PresentationalComponent find('h2') length === 1 && PresentationalComponentfind('button') length === 1 &&\nPresentationalComponent find('ul') length === 1\n);\n})()\n);\nThe Presentational component should receive messages from the Redux store as a prop js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nconst props = PresentationalComponent props();\nreturn Array isArray(props messages);\n})()\n);\nThe Presentational component should receive the submitMessage action creator as a prop js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalComponent = mockedComponent find('Presentational');\nconst props = PresentationalComponent props();\nreturn typeof props submitNewMessage === 'function';\n})()\n);\nThe state of the Presentational component should contain one property, input, which is initialized to an empty string js\nassert(\n(function () {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst PresentationalState = mockedComponent find('Presentational') instance() state;\nreturn (\ntypeof PresentationalState input === 'string' &&\nObject keys(PresentationalState) length === 1\n);\n})()\n);\nTyping in the input element should update the state of the Presentational component js\nasync () => {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst testValue = '__MOCK__INPUT__';\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nlet initialInput = mockedComponent find('Presentational')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "9526125265aee6401ad8cf63c8f96598",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "typeof PresentationalState input === 'string' && Object keys(PresentationalState) length === 1 ); })() ); Typing in the input element should update the state of the Presentational component js async () => { const mockedComponent = Enzyme mount(React createElement(AppWrapper)); const testValue = '__MOCK__INPUT__'; const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c find('input') simulate('change', { target: { value: v } }); let initialInput = mockedComponent find('Presentational')find('input');\nconst changed = () => {\ncauseChange(mockedComponent, testValue);\nreturn waitForIt(() => mockedComponent);\n};\nconst updated = await changed();\nconst updatedInput = updated find('Presentational') find('input');\nassert(\ninitialInput props() value === '' &&\nupdatedInput props() value === '__MOCK__INPUT__'\n);\n};\nDispatching the submitMessage on the Presentational component should update Redux store and clear the input in local state js\nasync () => {\nconst mockedComponent = Enzyme mount(React createElement(AppWrapper));\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\nlet beforeProps = mockedComponent find('Presentational') props();\nconst testValue = '__TEST__EVENT__INPUT__';\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nconst changed = () => {\ncauseChange(mockedComponent, testValue);\nreturn waitForIt(() => mockedComponent);\n};\nconst clickButton = () => {\nmockedComponent find('button') simulate('click');\nreturn waitForIt(() => mockedComponent);\n};\nconst afterChange = await changed();\nconst afterChangeInput = afterChange find('input') props() value;\nconst afterClick = await clickButton();\nconst afterProps = mockedComponent find('Presentational') props();\nassert(\nbeforeProps messages length === 0 &&\nafterChangeInput === testValue &&\nafterProps messages pop() === testValue &&\nafterClick find('input') props() value === ''\n);\n};\nThe Presentational component should render the messages from the Redux store js\nasync () => {\nconst mockedComponent = Enzyme mount(React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "f5d9a7e418b5a36cdcea1202f4d24b78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find('button') simulate('click'); return waitForIt(() => mockedComponent); }; const afterChange = await changed(); const afterChangeInput = afterChange find('input') props() value; const afterClick = await clickButton(); const afterProps = mockedComponent find('Presentational') props(); assert( beforeProps messages length === 0 && afterChangeInput === testValue && afterProps messages pop() === testValue && afterClick find('input') props() value === '' ); }; The Presentational component should render the messages from the Redux store js async () => { const mockedComponent = Enzyme mount(ReactcreateElement(AppWrapper));\nconst waitForIt = (fn) =>\nnew Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\nlet beforeProps = mockedComponent find('Presentational') props();\nconst testValue = '__TEST__EVENT__INPUT__';\nconst causeChange = (c, v) =>\nc find('input') simulate('change', { target: { value: v } });\nconst changed = () => {\ncauseChange(mockedComponent, testValue);\nreturn waitForIt(() => mockedComponent);\n};\nconst clickButton = () => {\nmockedComponent find('button') simulate('click');\nreturn waitForIt(() => mockedComponent);\n};\nconst afterChange = await changed();\nconst afterChangeInput = afterChange find('input') props() value;\nconst afterClick = await clickButton();\nconst afterProps = mockedComponent find('Presentational') props();\nassert(\nbeforeProps messages length === 0 &&\nafterChangeInput === testValue &&\nafterProps messages pop() === testValue &&\nafterClick find('input') props() value === '' &&\nafterClick find('ul') childAt(0) text() === testValue\n);\n};\n--seed--\n--after-user-code--\njsx\nReactDOM render(<AppWrapper />, document getElementById('root'))\n--seed-contents--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage: message\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nconst Provider = ReactRedux Provider;\nconst connect = ReactRedux connect;\n// Change code below this line\nclass Presentational extends React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "3c0b4308b0a22135f8e174a5716c67ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "getElementById('root')) --seed-contents-- ```jsx // Redux: const ADD = 'ADD'; const addMessage = (message) => { return { type: ADD, message: message } }; const messageReducer = (state = [], action) => { switch (action type) { case ADD: return [ state, action message ]; default: return state; } }; const store = Redux createStore(messageReducer); // React: const Provider = ReactRedux Provider; const connect = ReactRedux connect; // Change code below this line class Presentational extends ReactComponent {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: '',\nmessages: []\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis setState((state) => ({\ninput: '',\nmessages: state messages concat(state input)\n}));\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this state messages map( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\n// Change code above this line\nconst mapStateToProps = (state) => {\nreturn {messages: state}\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (message) => {\ndispatch(addMessage(message))\n}\n}\n};\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\nclass AppWrapper extends React Component {\nrender() {\nreturn (\n);\n}\n};\n```\n--solutions--\n```jsx\n// Redux:\nconst ADD = 'ADD';\nconst addMessage = (message) => {\nreturn {\ntype: ADD,\nmessage: message\n}\n};\nconst messageReducer = (state = [], action) => {\nswitch (action type) {\ncase ADD:\nreturn [ state,\naction message\n];\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(messageReducer);\n// React:\nconst Provider = ReactRedux Provider;\nconst connect = ReactRedux connect;\n// Change code below this line\nclass Presentational extends React Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ninput: ''\n}\nthis handleChange = this handleChange bind(this);\nthis submitMessage = this submitMessage bind(this);\n}\nhandleChange(event) {\nthis setState({\ninput: event target value\n});\n}\nsubmitMessage() {\nthis props submitNewMessage(this state input);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "65f2dc51401ebd481cdcb46a86b7509b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "]; default: return state; } }; const store = Redux createStore(messageReducer); // React: const Provider = ReactRedux Provider; const connect = ReactRedux connect; // Change code below this line class Presentational extends React Component { constructor(props) { super(props); this state = { input: '' } this handleChange = this handleChange bind(this); this submitMessage = this submitMessage bind(this); } handleChange(event) { this setState({ input: event target value }); } submitMessage() { this props submitNewMessage(this state input); thissetState({\ninput: ''\n});\n}\nrender() {\nreturn (\nType in a new Message:\nSubmit\n{this props messages map( (message, idx) => {\nreturn (\n{message}\n)\n})\n}\n);\n}\n};\n// Change code above this line\nconst mapStateToProps = (state) => {\nreturn {messages: state}\n};\nconst mapDispatchToProps = (dispatch) => {\nreturn {\nsubmitNewMessage: (message) => {\ndispatch(addMessage(message))\n}\n}\n};\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\nclass AppWrapper extends React Component {\nrender() {\nreturn (\n);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "9501fcd52bb58d07fef50a63c65a7dfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\copy-an-object-with-object.assign.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403615b\ntitle: Copy an Object with Object assign\nchallengeType: 6\nforumTopicId: 301437\ndashedName: copy-an-object-with-object-assign\n--description--\nThe last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an object, too A useful tool for handling objects is the Object assign() utility Object assign() takes a target object and source objects and maps properties from the source objects to the target object Any matching properties are overwritten by properties in the source objects This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy Here's an example:\njs\nconst newObject = Object assign({}, obj1, obj2);\nThis creates newObject as a new object, which contains the properties that currently exist in obj1 and obj2 --instructions--\nThe Redux state and actions were modified to handle an object for the state Edit the code to return a new state object for actions with type ONLINE, which set the status property to the string online Try to use Object assign() to complete the challenge --hints--\nThe Redux store should exist and initialize with a state that is equivalent to the defaultState object declared on line 1 js\nconst expectedState = {\nuser: 'CamperBot',\nstatus: 'offline',\nfriends: '732,982',\ncommunity: 'freeCodeCamp'\n};\nconst initialState = store getState();\nassert deepEqual(expectedState, initialState);\nwakeUp and immutableReducer both should be functions js\nassert(typeof wakeUp === 'function' && typeof immutableReducer === 'function');\nDispatching an action of type ONLINE should update the property status in state to online and should NOT mutate state ```js\nconst initialState = store getState();\nconst isFrozen = DeepFreeze(initialState);\nstore dispatch({ type: 'ONLINE' });\nconst finalState = store getState();\nconst expectedState = {\nuser: 'CamperBot',\nstatus: 'online',\nfriends: '732,982',\ncommunity: 'freeCodeCamp'\n};\nassert(isFrozen);\nassert deepEqual(finalState, expectedState);\n```\nObject assign should be used to return new state js\nassert(code includes('Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\copy-an-object-with-object.assign.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d4b62d6b3de56d01a0a707e47cc5b737",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\copy-an-object-with-object.assign.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'function' && typeof immutableReducer === 'function'); Dispatching an action of type ONLINE should update the property status in state to online and should NOT mutate state ```js const initialState = store getState(); const isFrozen = DeepFreeze(initialState); store dispatch({ type: 'ONLINE' }); const finalState = store getState(); const expectedState = { user: 'CamperBot', status: 'online', friends: '732,982', community: 'freeCodeCamp' }; assert(isFrozen); assert deepEqual(finalState, expectedState); ``` Object assign should be used to return new state js assert(code includes('Objectassign'));\n--seed--\n--seed-contents--\n```js\nconst defaultState = {\nuser: 'CamperBot',\nstatus: 'offline',\nfriends: '732,982',\ncommunity: 'freeCodeCamp'\n};\nconst immutableReducer = (state = defaultState, action) => {\nswitch(action type) {\ncase 'ONLINE':\n// Don't mutate state here or the tests will fail\nreturn\ndefault:\nreturn state;\n}\n};\nconst wakeUp = () => {\nreturn {\ntype: 'ONLINE'\n}\n};\nconst store = Redux createStore(immutableReducer);\n```\n--solutions--\n```js\nconst defaultState = {\nuser: 'CamperBot',\nstatus: 'offline',\nfriends: '732,982',\ncommunity: 'freeCodeCamp'\n};\nconst immutableReducer = (state = defaultState, action) => {\nswitch(action type) {\ncase 'ONLINE':\nreturn Object assign({}, state, {\nstatus: 'online'\n});\ndefault:\nreturn state;\n}\n};\nconst wakeUp = () => {\nreturn {\ntype: 'ONLINE'\n}\n};\nconst store = Redux createStore(immutableReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\copy-an-object-with-object.assign.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8d3f4a3bcf282d9c0dccaad23e316245",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-a-redux-action.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614d\ntitle: Define a Redux Action\nchallengeType: 6\nforumTopicId: 301440\ndashedName: define-a-redux-action\n--description--\nSince Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a type property that specifies the 'type' of action that occurred.\nThink of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred.\n--instructions--\nWriting a Redux action is as simple as declaring an object with a type property. Declare an object action and give it a property type set to the string 'LOGIN'.\n--hints--\nAn action object should exist.\njs\nassert(\n(function () {\nreturn typeof action === 'object';\n})()\n);\nThe action object should have a key property type with value LOGIN.\njs\nassert(\n(function () {\nreturn action.type === 'LOGIN';\n})()\n);\n--seed--\n--seed-contents--\njs\n// Define an action here:\n--solutions--\njs\nconst action = {\ntype: 'LOGIN'\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-a-redux-action.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1a64bf31700cc67cc7ba2487865db9aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\create-a-redux-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614b\ntitle: Create a Redux Store\nchallengeType: 6\nforumTopicId: 301439\ndashedName: create-a-redux-store\n--description--\nRedux is a state management framework that can be used with a number of different web technologies, including React.\nIn Redux, there is a single state object that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux store. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.\nThis also means that any time any piece of your app wants to update state, it must do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.\n--instructions--\nThe Redux store is an object which holds and manages application state. There is a method called createStore() on the Redux object, which you use to create the Redux store. This method takes a reducer function as a required argument. The reducer function is covered in a later challenge, and is already defined for you in the code editor. It simply takes state as an argument and returns state.\nDeclare a store variable and assign it to the createStore() method, passing in the reducer as an argument.\nNote: The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of 5. If you're not familiar with default arguments, you can refer to the ES6 section in the Curriculum which covers this topic.\n--hints--\nThe Redux store should exist.\njs\nassert(typeof store.getState === 'function');\nThe Redux store should have a value of 5 for the state.\njs\nassert(store.getState() === 5);\n--seed--\n--seed-contents--\n```js\nconst reducer = (state = 5) => {\nreturn state;\n}\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:\n```\n--solutions--\n```js\nconst reducer = (state = 5) => {\nreturn state;\n}\nconst store = Redux.createStore(reducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\create-a-redux-store.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "38ddb36b6513ff019ecab02d7ad1d4c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\dispatch-an-action-event.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614f\ntitle: Dispatch an Action Event\nchallengeType: 6\nforumTopicId: 301442\ndashedName: dispatch-an-action-event\n--description--\ndispatch method is what you use to dispatch actions to the Redux store. Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store.\nRecall that action creators return an object with a type property that specifies the type of action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent, and both dispatch the action of type LOGIN:\njs\nstore.dispatch(actionCreator());\nstore.dispatch({ type: 'LOGIN' });\n--instructions--\nThe Redux store in the code editor has an initialized state that's an object containing a login property currently set to false. There's also an action creator called loginAction() which returns an action of type LOGIN. Dispatch the LOGIN action to the Redux store by calling the dispatch method, and pass in the action created by loginAction().\n--hints--\nCalling the function loginAction should return an object with type property set to the string LOGIN.\njs\nassert(loginAction().type === 'LOGIN');\nThe store should be initialized with an object with property login set to false.\njs\nassert(store.getState().login === false);\nThe store.dispatch() method should be used to dispatch an action of type LOGIN.\njs\nassert(\n(function () {\nlet noWhiteSpace = code.replace(/\\s/g, '');\nreturn (\nnoWhiteSpace.includes('store.dispatch(loginAction())') ||\nnoWhiteSpace.includes(\"store.dispatch({type: 'LOGIN'})\") === true\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst store = Redux.createStore(\n(state = {login: false}) => state\n);\nconst loginAction = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\n// Dispatch the action here:\n```\n--solutions--\n```js\nconst store = Redux.createStore(\n(state = {login: false}) => state\n);\nconst loginAction = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\nstore.dispatch(loginAction());\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\dispatch-an-action-event.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "80e3fe37529f27bf4da17a20dfc07883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-an-action-creator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614e\ntitle: Define an Action Creator\nchallengeType: 6\nforumTopicId: 301441\ndashedName: define-an-action-creator\n--description--\nAfter creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.\n--instructions--\nDefine a function named actionCreator() that returns the action object when called.\n--hints--\nThe function actionCreator should exist.\njs\nassert(typeof actionCreator === 'function');\nRunning the actionCreator function should return the action object.\njs\nassert(typeof action === 'object');\nThe returned action should have a key property type with value LOGIN.\njs\nassert(action.type === 'LOGIN');\n--seed--\n--seed-contents--\njs\nconst action = {\ntype: 'LOGIN'\n}\n// Define an action creator here:\n--solutions--\njs\nconst action = {\ntype: 'LOGIN'\n}\nconst actionCreator = () => {\nreturn action;\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1171,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-an-action-creator.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51be72f711a17e74fa91dde1f3c18708",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\get-state-from-the-redux-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403614c\ntitle: Get State from the Redux Store\nchallengeType: 6\nforumTopicId: 301443\ndashedName: get-state-from-the-redux-store\n--description--\nThe Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state held in the Redux store object with the getState() method.\n--instructions--\nThe code from the previous challenge is re-written more concisely in the code editor. Use store.getState() to retrieve the state from the store, and assign this to a new variable currentState.\n--hints--\nThe Redux store should have a value of 5 for the initial state.\njs\nassert(store.getState() === 5);\nA variable currentState should exist and should be assigned the current state of the Redux store.\njs\nassert(currentState === 5 && code.includes('store.getState()'));\n--seed--\n--seed-contents--\n```js\nconst store = Redux.createStore(\n(state = 5) => state\n);\n// Change code below this line\n```\n--solutions--\n```js\nconst store = Redux.createStore(\n(state = 5) => state\n);\n// Change code below this line\nconst currentState = store.getState();\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\get-state-from-the-redux-store.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "45abd8227e6085ac9bf4920699704e98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\handle-an-action-in-the-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036150\ntitle: Handle an Action in the Store\nchallengeType: 6\nforumTopicId: 301444\ndashedName: handle-an-action-in-the-store\n--description--\nAfter an action is created and dispatched, the Redux store needs to know how to respond to that action This is the job of a reducer function Reducers in Redux are responsible for the state modifications that take place in response to actions A reducer takes state and action as arguments, and it always returns a new state It is important to see that this is the only role of the reducer It has no side effects — it never calls an API endpoint and it never has any hidden surprises The reducer is simply a pure function that takes state and action, then returns new state Another key principle in Redux is that state is read-only In other words, the reducer function must always return a new copy of state and never modify state directly Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions You'll practice this in later challenges --instructions--\nThe code editor has the previous example as well as the start of a reducer function for you Fill in the body of the reducer function so that if it receives an action of type 'LOGIN' it returns a state object with login set to true Otherwise, it returns the current state Note that the current state and the dispatched action are passed to the reducer, so you can access the action's type directly with action type --hints--\nCalling the function loginAction should return an object with type property set to the string LOGIN js\nassert(loginAction() type === 'LOGIN');\nThe store should be initialized with an object with property login set to false js\nassert(store getState() login === false);\nDispatching loginAction should update the login property in the store state to true js\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch(loginAction());\nconst afterState = store getState();\nreturn initialState login === false && afterState login === true;\n})()\n);\nIf the action is not of type LOGIN, the store should return the current state js\nassert(\n(function () {\nstore dispatch({ type: '__TEST__ACTION__' });\nlet afterTest = store getState();\nreturn typeof afterTest === 'object' && afterTest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3151,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\handle-an-action-in-the-store.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "81b5933f05570d9e82d4da9b56bee5fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\handle-an-action-in-the-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "update the login property in the store state to true js assert( (function () { const initialState = store getState(); store dispatch(loginAction()); const afterState = store getState(); return initialState login === false && afterState login === true; })() ); If the action is not of type LOGIN, the store should return the current state js assert( (function () { store dispatch({ type: '__TEST__ACTION__' }); let afterTest = store getState(); return typeof afterTest === 'object' && afterTesthasOwnProperty('login');\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst defaultState = {\nlogin: false\n};\nconst reducer = (state = defaultState, action) => {\n// Change code below this line\n// Change code above this line\n};\nconst store = Redux createStore(reducer);\nconst loginAction = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\n```\n--solutions--\n```js\nconst defaultState = {\nlogin: false\n};\nconst reducer = (state = defaultState, action) => {\nif (action type === 'LOGIN') {\nreturn {login: true}\n}\nelse {\nreturn state\n}\n};\nconst store = Redux createStore(reducer);\nconst loginAction = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3151,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\handle-an-action-in-the-store.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1c3b0858b8807fbd296afc8767262c93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\never-mutate-state.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036158\ntitle: Never Mutate State\nchallengeType: 6\nforumTopicId: 301445\ndashedName: never-mutate-state\n--description--\nThese final challenges describe several methods of enforcing the key principle of state immutability in Redux Immutable state means that you never modify state directly, instead, you return a new copy of state If you took a snapshot of the state of a Redux app over time, you would see something like state 1, state 2, state 3,state 4, and so on where each state may be similar to the last, but each is a distinct piece of data This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a string, number, array, or object Note that strings and numbers are primitive values and are immutable by nature In other words, 3 is always 3 You cannot change the value of the number 3 An array or object, however, is mutable In practice, your state will probably consist of an array or object, as these are useful data structures for representing many types of information --instructions--\nThere is a store and reducer in the code editor for managing to-do items Finish writing the ADD_TO_DO case in the reducer to append a new to-do to the state There are a few ways to accomplish this with standard JavaScript or ES6 See if you can find a way to return a new array with the item from action todo appended to the end --hints--\nThe Redux store should exist and initialize with a state equal to the todos array in the code editor js\nassert(\n(function () {\nconst todos = [\n'Go to the store',\n'Clean the house',\n'Cook dinner',\n'Learn to code'\n];\nconst initialState = store getState();\nreturn (\nArray isArray(initialState) && initialState join(',') === todos join(',')\n);\n})()\n);\naddToDo and immutableReducer both should be functions js\nassert(typeof addToDo === 'function' && typeof immutableReducer === 'function');\nDispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\never-mutate-state.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f8e4170606c195eaaa534626cf199195",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\never-mutate-state.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert( (function () { const todos = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code' ]; const initialState = store getState(); return ( Array isArray(initialState) && initialState join(',') === todos join(',') ); })() ); addToDo and immutableReducer both should be functions js assert(typeof addToDo === 'function' && typeof immutableReducer === 'function'); Dispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate statejs\nconst initialState = store getState();\nconst isFrozen = DeepFreeze(initialState);\nstore dispatch(addToDo('__TEST__TO__DO__'));\nconst finalState = store getState();\nconst expectedState = [\n'Go to the store',\n'Clean the house',\n'Cook dinner',\n'Learn to code',\n'__TEST__TO__DO__'\n];\nassert(isFrozen);\nassert deepEqual(finalState, expectedState);\n--seed--\n--seed-contents--\n```js\nconst ADD_TO_DO = 'ADD_TO_DO';\n// A list of strings representing tasks to do:\nconst todos = [\n'Go to the store',\n'Clean the house',\n'Cook dinner',\n'Learn to code',\n];\nconst immutableReducer = (state = todos, action) => {\nswitch(action type) {\ncase ADD_TO_DO:\n// Don't mutate state here or the tests will fail\nreturn\ndefault:\nreturn state;\n}\n};\nconst addToDo = (todo) => {\nreturn {\ntype: ADD_TO_DO,\ntodo\n}\n}\nconst store = Redux createStore(immutableReducer);\n```\n--solutions--\n```js\nconst ADD_TO_DO = 'ADD_TO_DO';\nconst todos = [\n'Go to the store',\n'Clean the house',\n'Cook dinner',\n'Learn to code',\n];\nconst immutableReducer = (state = todos, action) => {\nswitch(action type) {\ncase ADD_TO_DO:\nreturn state concat(action todo);\ndefault:\nreturn state;\n}\n};\nconst addToDo = (todo) => {\nreturn {\ntype: ADD_TO_DO,\ntodo\n}\n}\nconst store = Redux createStore(immutableReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\never-mutate-state.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fa571327f3d00c69617ec61f1aea9393",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\remove-an-item-from-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d403615a\ntitle: Remove an Item from an Array\nchallengeType: 6\nforumTopicId: 301447\ndashedName: remove-an-item-from-an-array\n--description--\nTime to practice removing items from an array The spread operator can be used here as well Other useful JavaScript methods include slice() and concat() --instructions--\nThe reducer and action creator were modified to remove an item from an array based on the index of the item Finish writing the reducer so a new state array is returned with the item at the specific index removed --hints--\nThe Redux store should exist and initialize with a state equal to [0,1,2,3,4,5]\njs\nconst initialState = store getState();\nassert isArray(initialState)\nassert deepEqual(initialState, [0, 1, 2, 3, 4, 5])\nremoveItem and immutableReducer both should be functions js\nassert(\ntypeof removeItem === 'function' && typeof immutableReducer === 'function'\n);\nDispatching the removeItem action creator should remove items from the state and should NOT mutate state ```js\nconst initialState = store getState();\nconst isFrozen = DeepFreeze(initialState);\nstore dispatch(removeItem(3));\nconst state_1 = store getState();\nstore dispatch(removeItem(2));\nconst state_2 = store getState();\nstore dispatch(removeItem(0));\nstore dispatch(removeItem(0));\nstore dispatch(removeItem(0));\nconst state_3 = store getState();\nassert(isFrozen)\nassert deepEqual(state_1, [0, 1, 2, 4, 5])\nassert deepEqual(state_2, [0, 1, 4, 5])\nassert deepEqual(state_3, [5])\n```\n--seed--\n--seed-contents--\n```js\nconst immutableReducer = (state = [0,1,2,3,4,5], action) => {\nswitch(action type) {\ncase 'REMOVE_ITEM':\n// Don't mutate state here or the tests will fail\nreturn\ndefault:\nreturn state;\n}\n};\nconst removeItem = (index) => {\nreturn {\ntype: 'REMOVE_ITEM',\nindex\n}\n}\nconst store = Redux",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2373,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\remove-an-item-from-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a4c03230132426de3dfda632836abd88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\remove-an-item-from-an-array.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "dispatch(removeItem(0)); store dispatch(removeItem(0)); const state_3 = store getState(); assert(isFrozen) assert deepEqual(state_1, [0, 1, 2, 4, 5]) assert deepEqual(state_2, [0, 1, 4, 5]) assert deepEqual(state_3, [5]) ``` --seed-- --seed-contents-- ```js const immutableReducer = (state = [0,1,2,3,4,5], action) => { switch(action type) { case 'REMOVE_ITEM': // Don't mutate state here or the tests will fail return default: return state; } }; const removeItem = (index) => { return { type: 'REMOVE_ITEM', index } } const store = ReduxcreateStore(immutableReducer);\n```\n--solutions--\n```js\nconst immutableReducer = (state = [0,1,2,3,4,5], action) => {\nswitch(action type) {\ncase 'REMOVE_ITEM':\nreturn [ state slice(0, action index), state slice(action index + 1)\n];\ndefault:\nreturn state;\n}\n};\nconst removeItem = (index) => {\nreturn {\ntype: 'REMOVE_ITEM',\nindex\n}\n}\nconst store = Redux createStore(immutableReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2373,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\remove-an-item-from-an-array.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7f52f5717f19f15205f922c4710bedcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\register-a-store-listener.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036153\ntitle: Register a Store Listener\nchallengeType: 6\nforumTopicId: 301446\ndashedName: register-a-store-listener\n--description--\nAnother method you have access to on the Redux store object is store subscribe() This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated --instructions--\nWrite a callback function that increments the global variable count every time the store receives an action, and pass this function in to the store subscribe() method You'll see that store dispatch() is called three times in a row, each time directly passing in an action object Watch the console output between the action dispatches to see the updates take place --hints--\nDispatching the ADD action on the store should increment the state by 1 js\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch({ type: 'ADD' });\nconst newState = store getState();\nreturn newState === initialState + 1;\n})()\n);\nThere should be a listener function subscribed to the store using store subscribe js\nassert match(code, /store\\s*\\ \\s*subscribe\\(/gm);\nThe store subscribe should receive a function js\nassert match(code, /(\\s*function\\s*)|(\\s*\\(\\s*\\)\\s*=>)/gm);\nThe function passed to store subscribe should not be called js\nassert notMatch(code, /store\\ subscribe\\( +\\(\\)\\)/);\nThe callback to store subscribe should also increment the global count variable as the store is updated js\nassert strictEqual(store getState(), count);\n--seed--\n--before-user-code--\njs\ncount = 0;\n--seed-contents--\n```js\nconst ADD = 'ADD';\nconst reducer = (state = 0, action) => {\nswitch(action type) {\ncase ADD:\nreturn state + 1;\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(reducer);\n// Global count variable:\nlet count = 0;\n// Change code below this line\n// Change code above this line\nstore dispatch({type: ADD});\nconsole log(count);\nstore dispatch({type: ADD});\nconsole log(count);\nstore dispatch({type: ADD});\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2791,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\register-a-store-listener.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ed340ff57a359884c51eff571d55121f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\register-a-store-listener.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "getState(), count); --seed-- --before-user-code-- js count = 0; --seed-contents-- ```js const ADD = 'ADD'; const reducer = (state = 0, action) => { switch(action type) { case ADD: return state + 1; default: return state; } }; const store = Redux createStore(reducer); // Global count variable: let count = 0; // Change code below this line // Change code above this line store dispatch({type: ADD}); console log(count); store dispatch({type: ADD}); console log(count); store dispatch({type: ADD}); consolelog(count);\n```\n--solutions--\n```js\nconst ADD = 'ADD';\nconst reducer = (state = 0, action) => {\nswitch(action type) {\ncase ADD:\nreturn state + 1;\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(reducer);\nlet count = 0;\n// Change code below this line\nstore subscribe( () =>\n{\ncount++;\n}\n);\n// Change code above this line\nstore dispatch({type: ADD});\nstore dispatch({type: ADD});\nstore dispatch({type: ADD});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2791,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\register-a-store-listener.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6305528fd3821ab7fcb6833f10f600a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\send-action-data-to-the-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036155\ntitle: Send Action Data to the Store\nchallengeType: 6\nforumTopicId: 301448\ndashedName: send-action-data-to-the-store\n--description--\nBy now you've learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a type You can also send specific data along with your actions In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them The Redux store often needs to know about this data --instructions--\nThere's a basic notesReducer() and an addNoteText() action creator defined in the code editor Finish the body of the addNoteText() function so that it returns an action object The object should include a type property with a value of ADD_NOTE, and also a text property set to the note data that's passed into the action creator When you call the action creator, you'll pass in specific note information that you can access for the object Next, finish writing the switch statement in the notesReducer() You need to add a case that handles the addNoteText() actions This case should be triggered whenever there is an action of type ADD_NOTE and it should return the text property on the incoming action as the new state The action is dispatched at the bottom of the code Once you're finished, run the code and watch the console That's all it takes to send action-specific data to the store and use it when you update store state --hints--\nThe action creator addNoteText should return an object with keys type and text js\nassert(\n(function () {\nconst addNoteFn = addNoteText('__TEST__NOTE');\nreturn addNoteFn type === ADD_NOTE && addNoteFn text === '__TEST__NOTE';\n})()\n);\nDispatching an action of type ADD_NOTE with the addNoteText action creator should update the state to the string passed to the action creator js\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch(addNoteText('__TEST__NOTE'));\nconst newState = store getState();\nreturn initialState == newState && newState === '__TEST__NOTE';\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst ADD_NOTE = 'ADD_NOTE';\nconst notesReducer = (state = 'Initial State', action) => {\nswitch(action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\send-action-data-to-the-store.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a55ca08121a36ac587ec7f96e2e24dd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\send-action-data-to-the-store.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ADD_NOTE && addNoteFn text === '__TEST__NOTE'; })() ); Dispatching an action of type ADD_NOTE with the addNoteText action creator should update the state to the string passed to the action creator js assert( (function () { const initialState = store getState(); store dispatch(addNoteText('__TEST__NOTE')); const newState = store getState(); return initialState == newState && newState === '__TEST__NOTE'; })() ); --seed-- --seed-contents-- ```js const ADD_NOTE = 'ADD_NOTE'; const notesReducer = (state = 'Initial State', action) => { switch(actiontype) {\n// Change code below this line\n// Change code above this line\ndefault:\nreturn state;\n}\n};\nconst addNoteText = (note) => {\n// Change code below this line\n// Change code above this line\n};\nconst store = Redux createStore(notesReducer);\nconsole log(store getState());\nstore dispatch(addNoteText('Hello '));\nconsole log(store getState());\n```\n--solutions--\n```js\nconst ADD_NOTE = 'ADD_NOTE';\nconst notesReducer = (state = 'Initial State', action) => {\nswitch(action type) {\n// Change code below this line\ncase ADD_NOTE:\nreturn action text;\n// Change code above this line\ndefault:\nreturn state;\n}\n};\nconst addNoteText = (note) => {\n// Change code below this line\nreturn {\ntype: ADD_NOTE,\ntext: note\n}\n// Change code above this line\n};\nconst store = Redux createStore(notesReducer);\nconsole log(store getState());\nstore dispatch(addNoteText('Hello Redux '));\nconsole log(store getState());\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\send-action-data-to-the-store.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b0f6f3d2fd14b82593cc07c7808ce39d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-a-switch-statement-to-handle-multiple-actions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036151\ntitle: Use a Switch Statement to Handle Multiple Actions\nchallengeType: 6\nforumTopicId: 301449\ndashedName: use-a-switch-statement-to-handle-multiple-actions\n--description--\nYou can tell the Redux store how to handle multiple action types Say you are managing user authentication in your Redux store You want to have a state representation for when users are logged in and when they are logged out You represent this with a single state object with the property authenticated You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves --instructions--\nThe code editor has a store, actions, and action creators set up for you Fill in the reducer function to handle multiple authentication actions Use a JavaScript switch statement in the reducer to respond to different action events This is a standard pattern in writing Redux reducers The switch statement should switch over action type and return the appropriate authentication state Note: At this point, don't worry about state immutability, since it is small and simple in this example For each action, you can return a new object — for example, {authenticated: true} Also, don't forget to write a default case in your switch statement that returns the current state This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer In such a case, you want to make sure that you return the current state --hints--\nCalling the function loginUser should return an object with type property set to the string LOGIN js\nassert(loginUser() type === 'LOGIN');\nCalling the function logoutUser should return an object with type property set to the string LOGOUT js\nassert(logoutUser() type === 'LOGOUT');\nThe store should be initialized with an object with an authenticated property set to false js\nassert(store getState() authenticated === false);\nDispatching loginUser should update the authenticated property in the store state to true js\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch(loginUser());\nconst afterLogin = store getState();\nreturn (\ninitialState authenticated === false && afterLogin authenticated === true\n);\n})()\n);\nDispatching logoutUser should update the authenticated property in the store state to false js\nassert(\n(function () {\nstore dispatch(loginUser());\nconst loggedIn = store getState();\nstore dispatch(logoutUser());\nconst afterLogout = store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4012,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-a-switch-statement-to-handle-multiple-actions.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b8f4a4beb266f2412d440d2825072c3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-a-switch-statement-to-handle-multiple-actions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "false); Dispatching loginUser should update the authenticated property in the store state to true js assert( (function () { const initialState = store getState(); store dispatch(loginUser()); const afterLogin = store getState(); return ( initialState authenticated === false && afterLogin authenticated === true ); })() ); Dispatching logoutUser should update the authenticated property in the store state to false js assert( (function () { store dispatch(loginUser()); const loggedIn = store getState(); store dispatch(logoutUser()); const afterLogout = storegetState();\nreturn (\nloggedIn authenticated === true && afterLogout authenticated === false\n);\n})()\n);\nThe authReducer function should handle multiple action types with a switch statement js\nassert(\ncode toString() includes('switch') &&\ncode toString() includes('case') &&\ncode toString() includes('default')\n);\n--seed--\n--seed-contents--\n```js\nconst defaultState = {\nauthenticated: false\n};\nconst authReducer = (state = defaultState, action) => {\n// Change code below this line\n// Change code above this line\n};\nconst store = Redux createStore(authReducer);\nconst loginUser = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\nconst logoutUser = () => {\nreturn {\ntype: 'LOGOUT'\n}\n};\n```\n--solutions--\n```js\nconst defaultState = {\nauthenticated: false\n};\nconst authReducer = (state = defaultState, action) => {\nswitch (action type) {\ncase 'LOGIN':\nreturn {\nauthenticated: true\n}\ncase 'LOGOUT':\nreturn {\nauthenticated: false\n}\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(authReducer);\nconst loginUser = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\nconst logoutUser = () => {\nreturn {\ntype: 'LOGOUT'\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4012,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-a-switch-statement-to-handle-multiple-actions.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c961cd6f5bbad5a16ccd47772d132e3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-const-for-action-types.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036152\ntitle: Use const for Action Types\nchallengeType: 6\nforumTopicId: 301450\ndashedName: use-const-for-action-types\n--description--\nA common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used You can refactor the code you're working with to write the action types as const declarations --instructions--\nDeclare LOGIN and LOGOUT as const values and assign them to the strings 'LOGIN' and 'LOGOUT', respectively Then, edit the authReducer() and the action creators to reference these constants instead of string values Note: It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well --hints--\nCalling the function loginUser should return an object with type property set to the string LOGIN js\nassert(loginUser() type === 'LOGIN');\nCalling the function logoutUser should return an object with type property set to the string LOGOUT js\nassert(logoutUser() type === 'LOGOUT');\nThe store should be initialized with an object with property login set to false js\nassert(store getState() authenticated === false);\nDispatching loginUser should update the login property in the store state to true js\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch(loginUser());\nconst afterLogin = store getState();\nreturn (\ninitialState authenticated === false && afterLogin authenticated === true\n);\n})()\n);\nDispatching logoutUser should update the login property in the store state to false js\nassert(\n(function () {\nstore dispatch(loginUser());\nconst loggedIn = store getState();\nstore dispatch(logoutUser());\nconst afterLogout = store getState();\nreturn (\nloggedIn authenticated === true && afterLogout authenticated === false\n);\n})()\n);\nThe authReducer function should handle multiple action types with a switch statement js\nassert(\n(function () {\nreturn (\ntypeof authReducer === 'function' &&\ncode toString() includes('switch') &&\ncode toString() includes('case') &&\ncode toString() includes('default')\n);\n})()\n);\nLOGIN and LOGOUT should be declared as const values and should be assigned strings of LOGINand LOGOUT js\nconst noWhiteSpace = __helpers removeWhiteSpace(code);\nassert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT')\nassert(noWhiteSpace includes('const'))\nThe action creators and the reducer should reference the LOGIN and LOGOUT constants",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-const-for-action-types.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c17baad5bb6dfd39e9d0f3846da244cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-const-for-action-types.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "types with a switch statement js assert( (function () { return ( typeof authReducer === 'function' && code toString() includes('switch') && code toString() includes('case') && code toString() includes('default') ); })() ); LOGIN and LOGOUT should be declared as const values and should be assigned strings of LOGINand LOGOUT js const noWhiteSpace = __helpers removeWhiteSpace(code); assert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT') assert(noWhiteSpace includes('const')) The action creators and the reducer should reference the LOGIN and LOGOUT constantsjs\nassert(\n(function () {\nconst noWhiteSpace = __helpers removeWhiteSpace(\ncode toString()\n);\nreturn (\nnoWhiteSpace includes('caseLOGIN:') &&\nnoWhiteSpace includes('caseLOGOUT:') &&\nnoWhiteSpace includes('type:LOGIN') &&\nnoWhiteSpace includes('type:LOGOUT')\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst defaultState = {\nauthenticated: false\n};\nconst authReducer = (state = defaultState, action) => {\nswitch (action type) {\ncase 'LOGIN':\nreturn {\nauthenticated: true\n}\ncase 'LOGOUT':\nreturn {\nauthenticated: false\n}\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(authReducer);\nconst loginUser = () => {\nreturn {\ntype: 'LOGIN'\n}\n};\nconst logoutUser = () => {\nreturn {\ntype: 'LOGOUT'\n}\n};\n```\n--solutions--\n```js\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst defaultState = {\nauthenticated: false\n};\nconst authReducer = (state = defaultState, action) => {\nswitch (action type) {\ncase LOGIN:\nreturn {\nauthenticated: true\n}\ncase LOGOUT:\nreturn {\nauthenticated: false\n}\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(authReducer);\nconst loginUser = () => {\nreturn {\ntype: LOGIN\n}\n};\nconst logoutUser = () => {\nreturn {\ntype: LOGOUT\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-const-for-action-types.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0d91312b37092bbd0e02d43963505a05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-the-spread-operator-on-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036159\ntitle: Use the Spread Operator on Arrays\nchallengeType: 6\nforumTopicId: 301452\ndashedName: use-the-spread-operator-on-arrays\n--description--\nOne solution from ES6 to help enforce state immutability in Redux is the spread operator: The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array This is relatively new, but commonly used syntax For example, if you have an array myArray and write:\njs\nlet newArray = [ myArray];\nnewArray is now a clone of myArray Both arrays still exist separately in memory If you perform a mutation like newArray push(5), myArray doesn't change The effectively spreads out the values in myArray into a new array To clone an array but add additional values in the new array, you could write [ myArray, 'new value'] This would return a new array composed of the values in myArray and the string new value as the last value The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow copy of the array That is to say, it only provides immutable array operations for one-dimensional arrays --instructions--\nUse the spread operator to return a new copy of state when a to-do is added --hints--\nThe Redux store should exist and initialize with a state equal to [\"Do not mutate state \"] js\nassert(\n(function () {\nconst initialState = store getState();\nreturn (\nArray isArray(initialState) === true &&\ninitialState[0] === 'Do not mutate state '\n);\n})()\n);\naddToDo and immutableReducer both should be functions js\nassert(typeof addToDo === 'function' && typeof immutableReducer === 'function');\nDispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate state js\nconst initialState = store getState();\nconst isFrozen = DeepFreeze(initialState);\nstore dispatch(addToDo('__TEST__TO__DO__'));\nconst finalState = store getState();\nconst expectedState = ['Do not mutate state ', '__TEST__TO__DO__'];\nassert(isFrozen)\nassert deepEqual(finalState, expectedState);\nThe spread operator should be used to return new state js\nassert(code includes('",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3149,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-the-spread-operator-on-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6fab1f418830f8999614bc7f430e7918",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-the-spread-operator-on-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should be functions js assert(typeof addToDo === 'function' && typeof immutableReducer === 'function'); Dispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate state js const initialState = store getState(); const isFrozen = DeepFreeze(initialState); store dispatch(addToDo('__TEST__TO__DO__')); const finalState = store getState(); const expectedState = ['Do not mutate state ', '__TEST__TO__DO__']; assert(isFrozen) assert deepEqual(finalState, expectedState); The spread operator should be used to return new state js assert(code includes('state'));\n--seed--\n--seed-contents--\n```js\nconst immutableReducer = (state = ['Do not mutate state '], action) => {\nswitch(action type) {\ncase 'ADD_TO_DO':\n// Don't mutate state here or the tests will fail\nreturn\ndefault:\nreturn state;\n}\n};\nconst addToDo = (todo) => {\nreturn {\ntype: 'ADD_TO_DO',\ntodo\n}\n}\nconst store = Redux createStore(immutableReducer);\n```\n--solutions--\n```js\nconst immutableReducer = (state = ['Do not mutate state '], action) => {\nswitch(action type) {\ncase 'ADD_TO_DO':\nreturn [ state,\naction todo\n];\ndefault:\nreturn state;\n}\n};\nconst addToDo = (todo) => {\nreturn {\ntype: 'ADD_TO_DO',\ntodo\n}\n}\nconst store = Redux createStore(immutableReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3149,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-the-spread-operator-on-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "006b3cb0742add78aab13bb7f7cb18e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\write-a-counter-with-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036157\ntitle: Write a Counter with Redux\nchallengeType: 6\nforumTopicId: 301453\ndashedName: write-a-counter-with-redux\n--description--\nNow you've learned all the core principles of Redux You've seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers You've even seen how to manage complex state with reducer composition and handle asynchronous actions These examples are simplistic, but these concepts are the core principles of Redux If you understand them well, you're ready to start building your own Redux app The next challenges cover some of the details regarding state immutability, but first, here's a review of everything you've learned so far --instructions--\nIn this lesson, you'll implement a simple counter with Redux from scratch The basics are provided in the code editor, but you'll have to fill in the details Use the names that are provided and define incAction and decAction action creators, the counterReducer(), INCREMENT and DECREMENT action types, and finally the Redux store Once you're finished you should be able to dispatch INCREMENT or DECREMENT actions to increment or decrement the state held in the store Good luck building your first Redux app --hints--\nThe action creator incAction should return an action object with type equal to the value of INCREMENT\njs\nassert(incAction() type === INCREMENT);\nThe action creator decAction should return an action object with type equal to the value of DECREMENT\njs\nassert(decAction() type === DECREMENT);\nRunning store getState() should return a number\njs\nassert(typeof store getState() === 'number');\nThe Redux store should initialize with a state of 0 js\nassert(_store getState() === 0);\nDispatching incAction on the Redux store should increment the state by 1 js\nassert(\n(function () {\nconst initialState = _store getState();\n_store dispatch(incAction());\nconst incState = _store getState();\nreturn initialState + 1 === incState;\n})()\n);\nDispatching decAction on the Redux store should decrement the state by 1 js\nassert(\n(function () {\nconst initialState = _store getState();\n_store dispatch(decAction());\nconst decState = _store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\write-a-counter-with-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a825d06e23749f3b6d62597e9d89d826",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\write-a-counter-with-redux.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "initialize with a state of 0 js assert(_store getState() === 0); Dispatching incAction on the Redux store should increment the state by 1 js assert( (function () { const initialState = _store getState(); _store dispatch(incAction()); const incState = _store getState(); return initialState + 1 === incState; })() ); Dispatching decAction on the Redux store should decrement the state by 1 js assert( (function () { const initialState = _store getState(); _store dispatch(decAction()); const decState = _storegetState();\nreturn initialState - 1 === decState;\n})()\n);\ncounterReducer should be a function\njs\nassert(typeof counterReducer === 'function');\n--seed--\n--seed-contents--\n```js\nconst INCREMENT = null; // Define a constant for increment action types\nconst DECREMENT = null; // Define a constant for decrement action types\nconst counterReducer = null; // Define the counter reducer which will increment or decrement the state based on the action it receives\nconst incAction = null; // Define an action creator for incrementing\nconst decAction = null; // Define an action creator for decrementing\nconst store = null; // Define the Redux store here, passing in your reducers\n```\n--after-user-code--\njs\nconst _store = Redux createStore(counterReducer)\n--solutions--\n```js\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\nconst counterReducer = (state = 0, action) => {\nswitch(action type) {\ncase INCREMENT:\nreturn state + 1;\ncase DECREMENT:\nreturn state - 1;\ndefault:\nreturn state;\n}\n};\nconst incAction = () => {\nreturn {\ntype: INCREMENT\n}\n};\nconst decAction = () => {\nreturn {\ntype: DECREMENT\n}\n};\nconst store = Redux createStore(counterReducer);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\write-a-counter-with-redux.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d8c77453aaf865df7aaab96362842629",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a24c314108439a4d4036156\ntitle: Use Middleware to Handle Asynchronous Actions\nchallengeType: 6\nforumTopicId: 301451\ndashedName: use-middleware-to-handle-asynchronous-actions\n--description--\nSo far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware Here's a brief description how to use this with Redux To include Redux Thunk middleware, you pass it as an argument to Redux applyMiddleware() This statement is then provided as a second optional parameter to the createStore() function Take a look at the code at the bottom of the editor to see this Then, to create an asynchronous action, you return a function in the action creator that takes dispatch as an argument Within this function, you can dispatch actions and perform asynchronous requests In this example, an asynchronous request is simulated with a setTimeout() call It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance) Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed Remember that you're passing dispatch as a parameter to this special action creator This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest --instructions--\nWrite both dispatches in the handleAsync() action creator Dispatch requestingData() before the setTimeout() (the simulated API call) Then, after you receive the (pretend) data, dispatch the receivedData() action, passing in this data Now you know how to handle asynchronous actions in Redux Everything else continues to behave as before --hints--\nThe requestingData action creator should return an object of type equal to the value of REQUESTING_DATA js\nassert(requestingData() type === REQUESTING_DATA);\nThe receivedData action creator should return an object of type equal to the value of RECEIVED_DATA js\nassert(receivedData('data') type === RECEIVED_DATA);\nasyncDataReducer should be a function js\nassert(typeof asyncDataReducer === 'function');\nDispatching the requestingData action creator should update the store state property of fetching to true",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "244cf2f444249014f78e3f6b69966743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Redux Everything else continues to behave as before --hints-- The requestingData action creator should return an object of type equal to the value of REQUESTING_DATA js assert(requestingData() type === REQUESTING_DATA); The receivedData action creator should return an object of type equal to the value of RECEIVED_DATA js assert(receivedData('data') type === RECEIVED_DATA); asyncDataReducer should be a function js assert(typeof asyncDataReducer === 'function'); Dispatching the requestingData action creator should update the store state property of fetching to truejs\nassert(\n(function () {\nconst initialState = store getState();\nstore dispatch(requestingData());\nconst reqState = store getState();\nreturn initialState fetching === false && reqState fetching === true;\n})()\n);\nDispatching handleAsync should dispatch the data request action and then dispatch the received data action after a delay js\nassert(\n(function () {\nconst noWhiteSpace = __helpers removeWhiteSpace(handleAsync toString());\nreturn (\nnoWhiteSpace includes('dispatch(requestingData())') === true &&\nnoWhiteSpace includes('dispatch(receivedData(data))') === true\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nconst REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data users} }\nconst handleAsync = () => {\nreturn function(dispatch) {\n// Dispatch request action here\nsetTimeout(function() {\nlet data = {\nusers: ['Jeff', 'William', 'Alice']\n}\n// Dispatch received data action here\n}, 2500);\n}\n};\nconst defaultState = {\nfetching: false,\nusers: []\n};\nconst asyncDataReducer = (state = defaultState, action) => {\nswitch(action type) {\ncase REQUESTING_DATA:\nreturn {\nfetching: true,\nusers: []\n}\ncase RECEIVED_DATA:\nreturn {\nfetching: false,\nusers: action users\n}\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(\nasyncDataReducer,\nRedux applyMiddleware(ReduxThunk",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2852bb5156ddddf2f18ad219d3240a94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "action here setTimeout(function() { let data = { users: ['Jeff', 'William', 'Alice'] } // Dispatch received data action here }, 2500); } }; const defaultState = { fetching: false, users: [] }; const asyncDataReducer = (state = defaultState, action) => { switch(action type) { case REQUESTING_DATA: return { fetching: true, users: [] } case RECEIVED_DATA: return { fetching: false, users: action users } default: return state; } }; const store = Redux createStore( asyncDataReducer, Redux applyMiddleware(ReduxThunkdefault)\n);\n```\n--solutions--\n```js\nconst REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data users} }\nconst handleAsync = () => {\nreturn function(dispatch) {\ndispatch(requestingData());\nsetTimeout(function() {\nlet data = {\nusers: ['Jeff', 'William', 'Alice']\n}\ndispatch(receivedData(data));\n}, 2500);\n}\n};\nconst defaultState = {\nfetching: false,\nusers: []\n};\nconst asyncDataReducer = (state = defaultState, action) => {\nswitch(action type) {\ncase REQUESTING_DATA:\nreturn {\nfetching: true,\nusers: []\n}\ncase RECEIVED_DATA:\nreturn {\nfetching: false,\nusers: action users\n}\ndefault:\nreturn state;\n}\n};\nconst store = Redux createStore(\nasyncDataReducer,\nRedux applyMiddleware(ReduxThunk default)\n);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "63237deacb247793fcaf7168c22aaef6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\apply-a-style-until-a-condition-is-met-with-while.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbf367417b2b2512bbb\ntitle: Apply a Style Until a Condition is Met with @while\nchallengeType: 0\nforumTopicId: 301454\ndashedName: apply-a-style-until-a-condition-is-met-with-while\n--description--\nThe @while directive is an option with similar functionality to the JavaScript while loop It creates CSS rules until a condition is met The @for challenge gave an example to create a simple grid system This can also work with @while scss\n$x: 1;\n@while $x < 13 { col-#{$x} { width: 100%/12 * $x;}\n$x: $x + 1;\n}\nFirst, define a variable $x and set it to 1 Next, use the @while directive to create the grid system while $x is less than 13 After setting the CSS rule for width, $x is incremented by 1 to avoid an infinite loop --instructions--\nUse @while to create a series of classes with different font-sizes There should be 5 different classes from text-1 to text-5 Then set font-size to 15px multiplied by the current index number Make sure to avoid an infinite loop --hints--\nYour code should use the @while directive js\nassert(code match(/@while /g));\nYour code should use an index variable which starts at an index of 1 js\nassert(code match(/\\$ *:\\s* 1;/gi));\nYour code should increment the counter variable js\nassert(code match(/\\$( *)\\s* :\\s*\\$\\1\\s*\\+\\s*1\\s*;/gi));\nYour text-1 class should have a font-size of 15px js\nassert($(' text-1') css('font-size') == '15px');\nYour text-2 class should have a font-size of 30px js\nassert($(' text-2') css('font-size') == '30px');\nYour text-3 class should have a font-size of 45px js\nassert($(' text-3') css('font-size') == '45px');\nYour text-4 class should have a font-size of 60px js\nassert($(' text-4') css('font-size') == '60px');\nYour text-5 class should have a font-size of 75px js\nassert($(' text-5')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\apply-a-style-until-a-condition-is-met-with-while.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e870cf383c4efab96cb8d7a04921cadd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\apply-a-style-until-a-condition-is-met-with-while.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert(code match(/\\$( *)\\s* :\\s*\\$\\1\\s*\\+\\s*1\\s*;/gi)); Your text-1 class should have a font-size of 15px js assert($(' text-1') css('font-size') == '15px'); Your text-2 class should have a font-size of 30px js assert($(' text-2') css('font-size') == '30px'); Your text-3 class should have a font-size of 45px js assert($(' text-3') css('font-size') == '45px'); Your text-4 class should have a font-size of 60px js assert($(' text-4') css('font-size') == '60px'); Your text-5 class should have a font-size of 75px js assert($(' text-5')css('font-size') == '75px');\n--seed--\n--seed-contents--\n```html\nHello\nHello\nHello\nHello\nHello\n```\n--solutions--\n```html\nHello\nHello\nHello\nHello\nHello\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\apply-a-style-until-a-condition-is-met-with-while.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4f571c85d8934845bebfa3f0257f773f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\extend-one-set-of-css-styles-to-another-element.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7fa5367417b2b2512bbd\ntitle: Extend One Set of CSS Styles to Another Element\nchallengeType: 0\nforumTopicId: 301456\ndashedName: extend-one-set-of-css-styles-to-another-element\n--description--\nSass has a feature called extend that makes it easy to borrow the CSS rules from one element and build upon them in another.\nFor example, the below block of CSS rules style a .panel class. It has a background-color, height and border.\nscss\n.panel{\nbackground-color: red;\nheight: 70px;\nborder: 2px solid green;\n}\nNow you want another panel called .big-panel. It has the same base properties as .panel, but also needs a width and font-size. It's possible to copy and paste the initial CSS rules from .panel, but the code becomes repetitive as you add more types of panels. The extend directive is a simple way to reuse the rules written for one element, then add more for another:\nscss\n.big-panel{\n@extend .panel;\nwidth: 150px;\nfont-size: 2em;\n}\nThe .big-panel will have the same properties as .panel in addition to the new styles.\n--instructions--\nMake a class .info-important that extends .info and also has a background-color set to magenta.\n--hints--\nYour info-important class should have a background-color set to magenta.\njs\nassert(\ncode.match(\n/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi\n)\n);\nYour info-important class should use @extend to inherit the styling from the info class.\njs\nassert(\ncode.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi)\n);\n--seed--\n--seed-contents--\n```html\nPosts\nThis is an important post. It should extend the class \".info\" and have its own CSS styles.\nThis is a simple post. It has basic styling and can be extended for other uses.\n```\n--solutions--\n```html\nPosts\nThis is an important post. It should extend the class \".info\" and have its own CSS styles.\nThis is a simple post. It has basic styling and can be extended for other uses.\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\extend-one-set-of-css-styles-to-another-element.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f7251699c4e251887c2ce03fbbe225cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\split-your-styles-into-smaller-chunks-with-partials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbf367417b2b2512bbc\ntitle: Split Your Styles into Smaller Chunks with Partials\nchallengeType: 0\nforumTopicId: 301459\ndashedName: split-your-styles-into-smaller-chunks-with-partials\n--description--\nPartials in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.\nNames for partials start with the underscore (_) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the .scss file extension. To bring the code in the partial into another Sass file, use the @import directive.\nFor example, if all your mixins are saved in a partial named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:\nscss\n@import 'mixins'\nNote that the underscore and file extension are not needed in the import statement - Sass understands it is a partial. Once a partial is imported into a file, all variables, mixins, and other code are available to use.\n--instructions--\nWrite an @import statement to import a partial named _variables.scss into the main.scss file.\n--hints--\nYour code should use the @import directive, and should not include the underscore in the file name.\njs\nassert(code.match(/@import\\s+?('|\")variables\\1/gi));\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\nhtml\n@import 'variables'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1554,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\split-your-styles-into-smaller-chunks-with-partials.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d4ad118671826561cdd3d349bc7f3272",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\nest-css-with-sass.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbd367417b2b2512bb5\ntitle: Nest CSS with Sass\nchallengeType: 0\nforumTopicId: 301457\ndashedName: nest-css-with-sass\n--description--\nSass allows nesting of CSS rules, which is a useful way of organizing a style sheet.\nNormally, each element is targeted on a different line to style it, like so:\n```scss\narticle {\nheight: 200px;\n}\narticle p {\ncolor: white;\n}\narticle ul {\ncolor: blue;\n}\n```\nFor a large project, the CSS file will have many lines and rules. This is where nesting can help organize your code by placing child style rules within the respective parent elements:\n```scss\narticle {\nheight: 200px;\np {\ncolor: white;\n}\nul {\ncolor: blue;\n}\n}\n```\n--instructions--\nUse the nesting technique shown above to re-organize the CSS rules for both children of .blog-post element. For testing purposes, the h1 should come before the p element.\n--hints--\nYour code should re-organize the CSS rules so the h1 and p are nested in the .blog-post parent element.\njs\nassert(\ncode.match(\n/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi\n)\n);\n--seed--\n--seed-contents--\n```html\nBlog Title\nThis is a paragraph\n```\n--solutions--\n```html\nBlog Title\nThis is a paragraph\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\nest-css-with-sass.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ba6490f6fbe0e29f914a3c474c8741c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\store-data-with-sass-variables.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbd367417b2b2512bb4\ntitle: Store Data with Sass Variables\nchallengeType: 0\nforumTopicId: 301460\ndashedName: store-data-with-sass-variables\n--description--\nOne feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.\nIn JavaScript, variables are defined using the let and const keywords. In Sass, variables start with a $ followed by the variable name.\nHere are a couple examples:\nscss\n$main-fonts: Arial, sans-serif;\n$headings-color: green;\nAnd to use the variables:\nscss\nh1 {\nfont-family: $main-fonts;\ncolor: $headings-color;\n}\nOne example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value.\n--instructions--\nCreate a variable $text-color and set it to red. Then change the value of the color property for the .blog-post and h2 to the $text-color variable.\n--hints--\nYour code should have a Sass variable declared for $text-color with a value of red.\njs\nassert(code.match(/\\$text-color\\s*:\\s*?red\\s*;/g));\nYour code should use the $text-color variable to change the color for the .blog-post and h2 items.\njs\nassert(code.match(/color\\s*:\\s*\\$text-color\\s*;?/g));\nYour .blog-post element should have a color of red.\njs\nassert($('.blog-post').css('color') == 'rgb(255, 0, 0)');\nYour h2 elements should have a color of red.\njs\nassert($('h2').css('color') == 'rgb(255, 0, 0)');\n--seed--\n--seed-contents--\n```html\nLearn Sass\nSome random title\nThis is a paragraph with some random text in it\nHeader #2\nHere is some more random text.\nHere is another header\nEven more random text within a paragraph\n```\n--solutions--\n```html\nLearn Sass\nSome random title\nThis is a paragraph with some random text in it\nHeader #2\nHere is some more random text.\nHere is another header\nEven more random text within a paragraph\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\store-data-with-sass-variables.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6859c72db0ce2785c7ee77f4511d62e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\use-each-to-map-over-items-in-a-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbf367417b2b2512bba\ntitle: Use @each to Map Over Items in a List\nchallengeType: 0\nforumTopicId: 301461\ndashedName: use-each-to-map-over-items-in-a-list\n--description--\nThe last challenge showed how the @for directive uses a starting and ending value to loop a certain number of times. Sass also offers the @each directive which loops over each item in a list or map. On each iteration, the variable gets assigned to the current value from the list or map.\nscss\n@each $color in blue, red, green {\n.#{$color}-text {color: $color;}\n}\nA map has slightly different syntax. Here's an example:\n```scss\n$colors: (color1: blue, color2: red, color3: green);\n@each $key, $color in $colors {\n.#{$color}-text {color: $color;}\n}\n```\nNote that the $key variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have color1, color2... in it. Both of the above code examples are converted into the following CSS:\n```scss\n.blue-text {\ncolor: blue;\n}\n.red-text {\ncolor: red;\n}\n.green-text {\ncolor: green;\n}\n```\n--instructions--\nWrite an @each directive that goes through a list: blue, black, red and assigns each variable to a .color-bg class, where the color part changes for each item to the respective color. Each class should set the background-color to the respective color as well.\n--hints--\nYour code should use the @each directive.\njs\nassert(code.match(/@each /g));\nYour .blue-bg class should have a background-color of blue.\njs\nassert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)');\nYour .black-bg class should have a background-color of black.\njs\nassert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)');\nYour .red-bg class should have a background-color of red.\njs\nassert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)');\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\use-each-to-map-over-items-in-a-list.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b599082fb6953edc5cb9afd6059cff3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d7dbd367417b2b2512bb6\ntitle: Create Reusable CSS with Mixins\nchallengeType: 0\nforumTopicId: 301455\ndashedName: create-reusable-css-with-mixins\n--description--\nIn Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet The definition starts with the @mixin at-rule, followed by a custom name You apply the mixin using the @include at-rule ```scss\n@mixin reset-list {\nmargin: 0;\npadding: 0;\nlist-style: none;\n}\nnav ul {\n@include reset-list;\n}\n```\nCompiles to:\ncss\nnav ul {\nmargin: 0;\npadding: 0;\nlist-style: none;\n}\nYour mixins can also take arguments, which allows their behavior to be customized The arguments are required when using the mixin ```scss\n@mixin prose($font-size, $spacing) {\nfont-size: $font-size;\nmargin: 0;\nmargin-block-end: $spacing;\n}\np {\n@include prose(1 25rem, 1rem);\n}\nh2 {\n@include prose(2 4rem, 1 5rem);\n}\n```\nYou can make arguments optional by giving the parameters default values ```scss\n@mixin text-color($color: black) {\ncolor: $color;\n}\np {\n@include text-color(); / color: black /\n}\nnav a {\n@include text-color(orange);\n}\n```\n--instructions--\nWrite a mixin named shape and give it 3 parameters: $w, $h, and $bg-color Use the shape mixin to give the #square element a width and height of 50px, and the background color red For the #rect-a element add a width of 100px, a height of 50px, and the background color blue Finally, for the #rect-b element add a width of 50px, a height of 100px, and the background color orange --hints--\nYou should declare a mixin named shape with 3 parameters: $w, $h, and $bg-color js\nassert match(code, /@mixin\\s+shape\\s*\\(\\s*\\$w,\\s*\\$h,\\s*\\$bg-color\\s*\\)\\s*{/gi);\nYour mixin should include a width property that uses the $w parameter js\nassert match(__helpers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a5c4aba8c3c99bff2577f2a2896cafc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and the background color red For the #rect-a element add a width of 100px, a height of 50px, and the background color blue Finally, for the #rect-b element add a width of 50px, a height of 100px, and the background color orange --hints-- You should declare a mixin named shape with 3 parameters: $w, $h, and $bg-color js assert match(code, /@mixin\\s+shape\\s*\\(\\s*\\$w,\\s*\\$h,\\s*\\$bg-color\\s*\\)\\s*{/gi); Your mixin should include a width property that uses the $w parameter js assert match(__helpersremoveWhiteSpace(code), /width:\\$w;/gi);\nYour mixin should include a height property that uses the $h parameter js\nassert match(__helpers removeWhiteSpace(code), /height:\\$h;/gi);\nYour mixin should include a background-color property that uses the $bg-color parameter js\nassert match(__helpers removeWhiteSpace(code), /background-color:\\$bg\\-color;/gi);\nYou should replace the styles inside the #square selector with a call to the shape mixin using the @include keyword Setting a width and height of 50px, and the background color red js\nassert match(code, /#square\\s*{\\s*@include\\s+shape\\s*\\(\\s*50px\\s*,\\s*50px\\s*,\\s*red\\s*\\)\\s*;\\s*}/gi);\nYou should replace the styles inside the #rect-a selector with a call to the shape mixin using the @include keyword Setting a width of 100px, a height of 50px, and the background color blue js\nassert match(code, /#rect-a\\s*{\\s*@include\\s+shape\\s*\\(\\s*100px\\s*,\\s*50px\\s*,\\s*blue\\s*\\)\\s*;\\s*}/gi);\nYou should replace the styles inside the #rect-b selector with a call to the shape mixin using the @include keyword Setting a width of 50px, a height of 100px, and the background color orange js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f1f84cee083f9d1b4d910b1cf19ee773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "match(code, /#square\\s*{\\s*@include\\s+shape\\s*\\(\\s*50px\\s*,\\s*50px\\s*,\\s*red\\s*\\)\\s*;\\s*}/gi); You should replace the styles inside the #rect-a selector with a call to the shape mixin using the @include keyword Setting a width of 100px, a height of 50px, and the background color blue js assert match(code, /#rect-a\\s*{\\s*@include\\s+shape\\s*\\(\\s*100px\\s*,\\s*50px\\s*,\\s*blue\\s*\\)\\s*;\\s*}/gi); You should replace the styles inside the #rect-b selector with a call to the shape mixin using the @include keyword Setting a width of 50px, a height of 100px, and the background color orange js assertmatch(code, /#rect-b\\s*{\\s*@include\\s+shape\\s*\\(\\s*50px\\s*,\\s*100px\\s*,\\s*orange\\s*\\)\\s*;\\s*}/gi);\n--seed--\n--seed-contents--\n```html\n```\n--solutions--\n```html\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9fe62ca6f77c3c9de65945c7930683bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\boo-who.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: a77dbc43c33f39daa4429b4f\ntitle: Boo who\nchallengeType: 1\nforumTopicId: 16000\ndashedName: boo-who\n--description--\nCheck if a value is classified as a boolean primitive. Return true or false.\nBoolean primitives are true and false.\n--hints--\nbooWho(true) should return true.\njs\nassert.isTrue(booWho(true));\nbooWho(false) should return true.\njs\nassert.isTrue(booWho(false));\nbooWho([1, 2, 3]) should return false.\njs\nassert.isFalse(booWho([1, 2, 3]));\nbooWho([].slice) should return false.\njs\nassert.isFalse(booWho([].slice));\nbooWho({ \"a\": 1 }) should return false.\njs\nassert.isFalse(booWho({ a: 1 }));\nbooWho(1) should return false.\njs\nassert.isFalse(booWho(1));\nbooWho(NaN) should return false.\njs\nassert.isFalse(booWho(NaN));\nbooWho(\"a\") should return false.\njs\nassert.isFalse(booWho('a'));\nbooWho(\"true\") should return false.\njs\nassert.isFalse(booWho('true'));\nbooWho(\"false\") should return false.\njs\nassert.isFalse(booWho('false'));\n--seed--\n--seed-contents--\n```js\nfunction booWho(bool) {\nreturn bool;\n}\nbooWho(null);\n```\n--solutions--\n```js\nfunction booWho(bool) {\nreturn typeof bool === 'boolean';\n}\nbooWho(null);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1299,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\boo-who.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  }
]