[
  {
    "id": "b5c40c31b0edcd880da75b49bfca84f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 612,
    "chunk_index": 23,
    "total_chunks": 95
  },
  {
    "id": "e4b4a7f2da8c24a0ef7de82504e22e0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 24,
    "total_chunks": 95
  },
  {
    "id": "5198176dbacae944d5d921c688b8c815",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 616,
    "chunk_index": 25,
    "total_chunks": 95
  },
  {
    "id": "a1ea2cf95643cbf3a794ce08136d9866",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 628,
    "chunk_index": 26,
    "total_chunks": 95
  },
  {
    "id": "23225c690ebef68586ad03758197e007",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 27,
    "total_chunks": 95
  },
  {
    "id": "ce254d53d79f2eb86e71656ad06f968b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 28,
    "total_chunks": 95
  },
  {
    "id": "dd9236256975f941e1987b73eff236a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 29,
    "total_chunks": 95
  },
  {
    "id": "cfe976689cc0861ec6c678afa5584cfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/) Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/)\nYou should add an err parameter to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 30,
    "total_chunks": 95
  },
  {
    "id": "82bec4f1ab888b0dbfb36f14a130fc29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "Your second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 31,
    "total_chunks": 95
  },
  {
    "id": "5a2b60263577255689a3bd4e3c30e2c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "second then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 558,
    "chunk_index": 32,
    "total_chunks": 95
  },
  {
    "id": "a02d2b18b28d5d2b12dc155d250f9006",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "then() method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 572,
    "chunk_index": 33,
    "total_chunks": 95
  },
  {
    "id": "554bffdc523bca295e19556ebbce4630",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 575,
    "chunk_index": 34,
    "total_chunks": 95
  },
  {
    "id": "f7b3329baf4a6f9508386c7c2747d52e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 35,
    "total_chunks": 95
  },
  {
    "id": "e7e0291e897c47e49346440c2cad9632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 36,
    "total_chunks": 95
  },
  {
    "id": "3d247c70407a2917d40ef4ae7ca5b35f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 619,
    "chunk_index": 37,
    "total_chunks": 95
  },
  {
    "id": "e0cb8808eb88259caa5c30b1566ab89c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 630,
    "chunk_index": 38,
    "total_chunks": 95
  },
  {
    "id": "da0006d2d69b151bdb59aca4d182896d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 39,
    "total_chunks": 95
  },
  {
    "id": "5c524e63bba37ba0ad583b2fac0deef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 657,
    "chunk_index": 40,
    "total_chunks": 95
  },
  {
    "id": "24082f930b3e3f1527b7f5483c31465c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 659,
    "chunk_index": 41,
    "total_chunks": 95
  },
  {
    "id": "56168c9d27a8d4077291595f2a26b526",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 671,
    "chunk_index": 42,
    "total_chunks": 95
  },
  {
    "id": "241702a7407e4496fcd2270fa0fcfb34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 672,
    "chunk_index": 43,
    "total_chunks": 95
  },
  {
    "id": "f634991c8fb6d2c2e7d011e7231ffb39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 44,
    "total_chunks": 95
  },
  {
    "id": "29ad8a8af6e23b96cc74cca7a4c2e58e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 681,
    "chunk_index": 45,
    "total_chunks": 95
  },
  {
    "id": "11176cb561e41814fdcdb02ca07ef678",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "method should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/)\nYour",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 46,
    "total_chunks": 95
  },
  {
    "id": "8def0a0aea737d11dd5dcaea52cd6eaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "should have curly braces js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntax",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 706,
    "chunk_index": 47,
    "total_chunks": 95
  },
  {
    "id": "e76f3fae32cd6f3caae09a9a00a0790c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "/fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 48,
    "total_chunks": 95
  },
  {
    "id": "428ec3ffd52ede00f5bdb27da33e0f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 49,
    "total_chunks": 95
  },
  {
    "id": "a6172ddd8c273997b92a2b3144822b87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 50,
    "total_chunks": 95
  },
  {
    "id": "9a5448fe19a52a2ea09c86982ee703c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 715,
    "chunk_index": 51,
    "total_chunks": 95
  },
  {
    "id": "356c0f60994cd5c10decdcd609b28d95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 723,
    "chunk_index": 52,
    "total_chunks": 95
  },
  {
    "id": "5e29073cf341798ad9016b343c86dfc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 53,
    "total_chunks": 95
  },
  {
    "id": "ad9fa13b8ea2f2f956358b523c02b595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 757,
    "chunk_index": 54,
    "total_chunks": 95
  },
  {
    "id": "6776e81db6f320840cd24537ec99c769",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 782,
    "chunk_index": 55,
    "total_chunks": 95
  },
  {
    "id": "989bca104ea5074364fa8123ba4961b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 56,
    "total_chunks": 95
  },
  {
    "id": "ec685b2440d8bed012c486bd3616983d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 57,
    "total_chunks": 95
  },
  {
    "id": "593eca23db963d6e97888be5e463611a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 798,
    "chunk_index": 58,
    "total_chunks": 95
  },
  {
    "id": "672ab4068eaf9fd8817707ec46972336",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 59,
    "total_chunks": 95
  },
  {
    "id": "5cc71f427e524b07fc0352c25a9d7ed9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 806,
    "chunk_index": 60,
    "total_chunks": 95
  },
  {
    "id": "c1643e751df66897569ed10bfc599a22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 61,
    "total_chunks": 95
  },
  {
    "id": "cfcea0b91e07fe02e6eb511a300b4a65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 830,
    "chunk_index": 62,
    "total_chunks": 95
  },
  {
    "id": "1d8a7bf55837e7ab58adcd42b88b7399",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/)\nYour",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 832,
    "chunk_index": 63,
    "total_chunks": 95
  },
  {
    "id": "b04bbf40cc35587cddbc25ee47a3da59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s*/) Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 64,
    "total_chunks": 95
  },
  {
    "id": "c0e5c84ff675e3d7a5af7ade8c089bc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "Your second then() method should log data to the console js assert match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\ freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 65,
    "total_chunks": 95
  },
  {
    "id": "e37c96a94db540e466d188c3491d7f34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\ json\\(\\s*\\)\\s*\\)\\s*\\ then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 753,
    "chunk_index": 66,
    "total_chunks": 95
  },
  {
    "id": "0583f6af4da848f955daf7e1e5188915",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n \\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 67,
    "total_chunks": 95
  },
  {
    "id": "49f2b13067668d62e65ae4a325532796",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "\\s* console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 68,
    "total_chunks": 95
  },
  {
    "id": "3efbd9d25c72b2dd84c32a4b0dd56f62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 688,
    "chunk_index": 69,
    "total_chunks": 95
  },
  {
    "id": "09709c258da06a5890040817547b294d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 701,
    "chunk_index": 70,
    "total_chunks": 95
  },
  {
    "id": "d855a1e85ce3c82fd9b5581e95bfa5c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 709,
    "chunk_index": 71,
    "total_chunks": 95
  },
  {
    "id": "74c3adc46366fb8aa62446656b305c09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 732,
    "chunk_index": 72,
    "total_chunks": 95
  },
  {
    "id": "436a1c3fc1f57d1982aca945e272c5ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 743,
    "chunk_index": 73,
    "total_chunks": 95
  },
  {
    "id": "d301f09a64cf177604af7ba2d4f4bb6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 768,
    "chunk_index": 74,
    "total_chunks": 95
  },
  {
    "id": "815099258a9556994e65262a97839f9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 770,
    "chunk_index": 75,
    "total_chunks": 95
  },
  {
    "id": "f590586275b274d10b725dd09a114d8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 772,
    "chunk_index": 76,
    "total_chunks": 95
  },
  {
    "id": "66e439e00ebea2829aeb822a8ec763df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 77,
    "total_chunks": 95
  },
  {
    "id": "f728d6282a83d4880d9876acc2e8583b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 785,
    "chunk_index": 78,
    "total_chunks": 95
  },
  {
    "id": "196fe306c3662161f89bd174304e6aa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 792,
    "chunk_index": 79,
    "total_chunks": 95
  },
  {
    "id": "ea71a99e23d99303b23e01cdd5f4a2d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 794,
    "chunk_index": 80,
    "total_chunks": 95
  },
  {
    "id": "bb59b4c5dce3058f16d4ef5d0b1464ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 816,
    "chunk_index": 81,
    "total_chunks": 95
  },
  {
    "id": "db286403d287502ade2554dd6772040a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 82,
    "total_chunks": 95
  },
  {
    "id": "aadbdf4e8255bc213a59665d57ef8526",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 820,
    "chunk_index": 83,
    "total_chunks": 95
  },
  {
    "id": "d275deefe13f041c019bcfa79dc293ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 822,
    "chunk_index": 84,
    "total_chunks": 95
  },
  {
    "id": "3f82c34fb13e0598965b461369f6e370",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 838,
    "chunk_index": 85,
    "total_chunks": 95
  },
  {
    "id": "c853130e8c85fcede5aa890ca31ce4a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 854,
    "chunk_index": 86,
    "total_chunks": 95
  },
  {
    "id": "d6978674ade7cf8492e29028e2e305fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 855,
    "chunk_index": 87,
    "total_chunks": 95
  },
  {
    "id": "c5dda9f2016ceea6c3306c1f2138d85c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 858,
    "chunk_index": 88,
    "total_chunks": 95
  },
  {
    "id": "1296efab3de881cf24907773e00f9b2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 860,
    "chunk_index": 89,
    "total_chunks": 95
  },
  {
    "id": "e94ff73aa5725861015487cea16ea4d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)\\}\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 866,
    "chunk_index": 90,
    "total_chunks": 95
  },
  {
    "id": "f800b03a623aea384a6ffebadea838e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "console\\log\\(\\s*data\\s*\\)\\s*; \\n \\s*\\}\\s*\\)/) Your second then() should not have a semicolon js assert notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\ org\\/curriculum\\/news\\-author\\-page\\/authors\\ json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\s*;/) You should chain thecatch() method to the secondthen() you already havejs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(/) You should add an err parameter to yourcatch() methodjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)/) Yourcatch() method should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)\\}\\s*\\)\\s*;/)\n--seed--\n--seed-contents--\n```html\nfreeCodeCamp News Author Page\nfreeCodeCamp News Author Page\nLoad More Authors\n```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #1b1b32;\n--light-grey: #f5f6f7;\n--dark-purple: #5a01a7;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 985,
    "chunk_index": 91,
    "total_chunks": 95
  },
  {
    "id": "7474fa6a25c503fbbfccbea1e04a49b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "should have an arrow function syntaxjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{/) Yourcatch() method should use consoleerror() to log err to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)\\}\\s*\\)\\s*;/) --seed-- --seed-contents-- ```html freeCodeCamp News Author Page freeCodeCamp News Author Page Load More Authors ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #1b1b32; --light-grey: #f5f6f7; --dark-purple: #5a01a7; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); text-align: center; }title {\ncolor: var(--light-grey);\nmargin: 20px 0;\n}\nauthor-container {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 92,
    "total_chunks": 95
  },
  {
    "id": "e611b944b3631ceb56b4930a995c1e2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "to the console with the text `There was an error: ${err}`Don't forget to use backticksjs assertmatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\freecodecamp\\org\\/curriculum\\/news\\-author\\-page\\/authors\\json\\1\\s*\\)\\s*\\then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\json\\(\\s*\\)\\s*\\)\\s*\\then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n\\s*console\\log\\(\\s*data\\s*\\)\\s*;\\n\\s*\\}\\s*\\)\\n\\s*\\catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{\\n(\\s*)console\\error\\(\\s*`There\\swas\\san\\serror:\\s\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;\\n(\\s*)\\}\\s*\\)\\s*;/) --seed-- --seed-contents-- ```html freeCodeCamp News Author Page freeCodeCamp News Author Page Load More Authors ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #1b1b32; --light-grey: #f5f6f7; --dark-purple: #5a01a7; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); text-align: center; }title { color: var(--light-grey); margin: 20px 0; } author-container { display: flex; flex-wrap: wrap; justify-content: center; }user-card {\nborder-radius: 15px;\nwidth: 300px;\nheight: 350px;\nbackground-color: var(--light-grey);\nmargin: 20px;\n} user-img {\nwidth: 150px;\nheight: 150px;\nobject-fit: cover;\n} purple-divider {\nbackground-color: var(--dark-purple);\nwidth: 100%;\nheight: 15px;\n} author-name {\nmargin: 10px;\n} bio {\nmargin: 20px;\n} error-msg {\ncolor: var(--light-grey);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 93,
    "total_chunks": 95
  },
  {
    "id": "623e62f24138621279e70713fc7e0e8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp News Author Page",
    "content": "#1b1b32; --light-grey: #f5f6f7; --dark-purple: #5a01a7; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); text-align: center; }title { color: var(--light-grey); margin: 20px 0; } author-container { display: flex; flex-wrap: wrap; justify-content: center; }user-card { border-radius: 15px; width: 300px; height: 350px; background-color: var(--light-grey); margin: 20px; } user-img { width: 150px; height: 150px; object-fit: cover; } purple-divider { background-color: var(--dark-purple); width: 100%; height: 15px; } author-name { margin: 10px; } bio { margin: 20px; } error-msg { color: var(--light-grey); }btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px;\ncolor: var(--main-bg-color);\nfont-size: 14px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}\n```\n```js\nconst authorContainer = document getElementById('author-container');\nconst loadMoreBtn = document getElementById('load-more-btn');\nfetch('https://cdn freecodecamp org/curriculum/news-author-page/authors json') then((res) => res json()) then((data) => {\nconsole log(data);\n})\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\641da51a9810e74411262fcc.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 94,
    "total_chunks": 95
  },
  {
    "id": "7e91686e12983ffd8ddcf9f045e2c5d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a92fd148d3264d5322b.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5a92fd148d3264d5322b\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nNumber inputs only allow the e to occur between two digits To match any number, you can use the character class [0-9] This will match any digit between 0 and 9 Add this character class before and after e in your pattern --hints--\nYou should add the [0-9] character class before e in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\[0-9\\]e/);\nYou should add the [0-9] character class after e in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\[0-9\\]e\\[0-9\\]\\//);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a92fd148d3264d5322b.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "41eece0bb6452a84a18da3369264a817",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a92fd148d3264d5322b.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\nfunction isInvalidInput(str) {\nconst regex = /e/i;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a92fd148d3264d5322b.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c4ee48f4a405f2e0c40b202ef314ad91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a518d54f63181ab639a.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5a518d54f63181ab639a\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nThe e in a number input can also be an uppercase E Regex has a flag for this, however – the i flag, which stands for \"insensitive\" js\n/Hello/i\nThe regex above would match hello, Hello, HELLO, and even hElLo because of the i flag This flag makes your pattern case-insensitive Add the i flag to your regex pattern --hints--\nYour regex value should have the i flag js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/e\\/i/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a518d54f63181ab639a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "55a164a71bd995bf40da3a5d9d24f326",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a518d54f63181ab639a.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; }hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\nfunction isInvalidInput(str) {\nconst regex = /e/;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5a518d54f63181ab639a.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "854cb6b97825afafbea191d127e177d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5bcfebff0734593fad19.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5bcfebff0734593fad19\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nThere is a shorthand character class to match any digit: \\d Replace your [0-9] character classes with this shorthand --hints--\nYou should replace the [0-9] character class before e with \\d in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\\\d\\+e/);\nYou should replace the [0-9] character class after e with \\d in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\\\d\\+e\\\\d\\+\\//);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5bcfebff0734593fad19.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7e3eea45c7e39928e83448443e1f80e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5bcfebff0734593fad19.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\nfunction isInvalidInput(str) {\nconst regex = /[0-9]+e[0-9]+/i;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5bcfebff0734593fad19.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "56a0989a306169273f9832c936299e47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5adfe2981b332eb007b6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5adfe2981b332eb007b6\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nThe + modifier in a regex allows you to match a pattern that occurs one or more times To match your digit pattern one or more times, add a plus after each of the digit character classes For example: [0-9]+ --hints--\nYou should add the + modifier to the character class before e in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\[0-9\\]\\+e/);\nYou should add the + modifier to the character class after e in your regular expression js\nassert match(isInvalidInput toString(), /regex\\s*=\\s*\\/\\[0-9\\]\\+e\\[0-9\\]\\+\\//);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4709,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5adfe2981b332eb007b6.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3398f2f5101eaa9b0d6996c25e5ac2ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5adfe2981b332eb007b6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\nfunction isInvalidInput(str) {\nconst regex = /[0-9]e[0-9]/i;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4709,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5adfe2981b332eb007b6.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "86f3b26dcbf21c4d4d36f2749ccedb4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5c438f523a359769106c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5c438f523a359769106c\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nStrings have a match() method, which takes a regex argument match() will return an array of match results – containing either the first match, or all matches if the global flag is used js\nconst str = 'example string';\nconst regex = /example/;\nconst result = str match(regex); // Returns ['example']\nReturn the result of calling the match() method on str and passing your regex variable as the argument You'll use this match result later on --hints--\nYour isInvalidInput function should call the match() method on str js\nassert match(isInvalidInput toString(), /str\\ match\\(/);\nYou should pass regex as the argument to the match() method js\nassert match(isInvalidInput toString(), /str\\ match\\(\\s*regex\\s*\\)/);\nYour isInvalidInput function should directly return the result of the match() call js\nassert match(isInvalidInput toString(), /return\\s+str\\ match\\(\\s*regex\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5c438f523a359769106c.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f1573529f01956a442623343374fa3ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5c438f523a359769106c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5c438f523a359769106c.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eb242e48ad71dd5630c29095b30c7a19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5cf03b50bf36cfbe94ea.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63bf5cf03b50bf36cfbe94ea\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nNow that you have finished testing the value of entryDropdown value, you can remove the console log statement Your next step is to allow users to add entries to the calorie counter Declare an empty function addEntry This function should not take any parameters --hints--\nYou should remove the console log statement js\nassert notMatch(code, /console\\ log\\s*\\( *\\)/)\nYou should declare an addEntry function js\nassert isFunction(addEntry);\nYour addEntry function should not take any parameters js\nassert match(addEntry toString(), /\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5cf03b50bf36cfbe94ea.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "426641adb1755dbb1fb82dae6c86a5b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5cf03b50bf36cfbe94ea.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; }hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nconsole log(entryDropdown value)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63bf5cf03b50bf36cfbe94ea.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "633e275328622106db2d3c334bde8c42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1dfbd56c71e278800010c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c1dfbd56c71e278800010c\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nYou'll need to know which category the entry goes in Thankfully, you added a dropdown for the user to select a category Remember that you queried that dropdown earlier in your JavaScript and assigned it to the entryDropdown variable You can use the value property to get the value of the selected option Use concatenation to add a # to the beginning of the value property of entryDropdown, and assign that result to a targetId variable --hints--\nYour addEntry function should have a targetId variable js\nassert match(addEntry toString(), /targetId\\s*=/);\nYour targetId variable should start with the string # js\nassert match(addEntry toString(), /targetId\\s*=\\s*('|\")#\\1/);\nYou should use concatenation to add entryDropdown value after your # string js\nassert match(addEntry toString(), /targetId\\s*=\\s*('|\")#\\1\\s*\\+\\s*entryDropdown\\ value/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5089,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1dfbd56c71e278800010c.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ddbbd36f398098b42f89e3ac93fb265f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1dfbd56c71e278800010c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5089,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1dfbd56c71e278800010c.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6c545e13008064d2bb0405b3af9ff92b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c1e0af28078f2dfad9eb3e\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nNow you need to target the input-container element within the element that has your targetId Declare a new targetInputContainer variable, and assign it the value of document querySelector() Use concatenation to separate targetId and ' input-container' with a space, and pass that string to querySelector() --hints--\nYour addEntry function should have a targetInputContainer variable js\nassert match(addEntry toString(), /targetInputContainer\\s*=/);\nYour targetInputContainer variable should be set to document querySelector() js\nassert match(addEntry toString(), /targetInputContainer\\s*=\\s*document\\ querySelector\\(/);\nYou should pass targetId to your querySelector() method js\nassert match(addEntry toString(), /targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*targetId\\s*/);\nYou should concatenate ' input-container' to targetId Remember to include the space at the beginning of input-container js\nassert match(addEntry toString(), /targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*targetId\\s*\\s*\\+\\s*('|\")\\s\\ input-container\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "cfa516bd374b1d0381432eb105d44f1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "--seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container,output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8cf53bcda3ca613ec277ffab94433b0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return strmatch(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetId = '#' + entryDropdown value;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e0af28078f2dfad9eb3e.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "302fd881a90b4d9f8bc917bbf86d5c54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c1e1965a898d302e0af4e3\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nJavaScript has a feature called template literals, which allow you to interpolate variables directly within a string Template literals are denoted with backticks ``, as opposed to single or double quotes Variables can be passed in to a template literal by surrounding the variable with ${} – the value of the variable will be inserted into the string For example:\njs\nconst name = \"Naomi\";\nconst templateLiteral = `Hello, my name is ${name}~ `;\nconsole log(templateLiteral);\nThe console will show the string \"Hello, my name is Naomi~ \" Replace your concatenated string in the querySelector with a template literal – be sure to keep the space between your targetId variable and input-container --hints--\nYou should use a template literal in your querySelector method js\nassert match(code, /const\\s+targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*` *`\\s*\\)/);\nYour template literal should have the value ${targetId} input-container js\nassert match(code, /const\\s+targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*`\\$\\{targetId\\}\\s\\ input-container`\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fc7a9376fc745687e873948ce32a3bca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "--seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container,output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b86e61ba97cbfad6a780a8eac4de5789",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return strmatch(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetId = '#' + entryDropdown value;\nconst targetInputContainer = document querySelector(targetId + ' input-container');\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e1965a898d302e0af4e3.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "27ad06c485959dd4071e2ccc658a1946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c1e5b4b3c8a031def3bd65\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nThanks to template literals, you actually don't need the targetId variable at all Remove that variable, and update your template literal to replace targetId with entryDropdown value – remember to add # before that, in the string --hints--\nYou should remove the targetId variable js\nassert notMatch(addEntry toString(), /targetId\\s*=/);\nYou should replace the targetId reference in your template literal with entryDropdown value js\nassert match(code, /const\\s+targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*`# \\$\\{entryDropdown\\ value\\}\\s\\ input-container`\\s*\\)/);\nYou should add # at the beginning of your template literal js\nassert match(code, /const\\s+targetInputContainer\\s*=\\s*document\\ querySelector\\(\\s*`#\\$\\{entryDropdown\\ value\\}\\s\\ input-container`\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ece7e11d9e1931b91786b9fb77efa936",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetId = '#' + entryDropdown value;\nconst targetInputContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e64cddab877a67afc30159aa42b2ec45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetId = '#' + entryDropdown value; const targetInputContainer = documentquerySelector(${targetId} input-container);\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e5b4b3c8a031def3bd65.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "26409ebb35a3d88d741438ab68ad9171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c1e704ee12703347625900\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nYou will want to number the entries a user adds To get all of the number inputs, you can use the querySelectorAll() method The querySelectorAll() method returns a NodeList of all the elements that match the selector A NodeList is an array-like object, so you can access the elements using bracket notation Declare an entryNumber variable and give it the value of targetInputContainer querySelectorAll() You do not need to pass an argument to the query selector yet --hints--\nYou should have an entryNumber variable js\nassert match(addEntry toString(), /entryNumber\\s*=/);\nYour entryNumber variable should have the value of targetInputContainer querySelectorAll() js\nassert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(/);\nYou should not pass an argument to querySelectorAll() js\nassert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f5e438a49ad7a6dfa3da60d503579720",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "11b768aa6077ddfb4a0dfc0738a854d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c1e704ee12703347625900.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "58f9ffa81f5ce11f3110ecfbd33714d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c216da562fbb3957b9cb2c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c216da562fbb3957b9cb2c\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nNow you need to build your dynamic HTML string to add to the webpage Declare a new HTMLString variable, and assign it an empty template literal string --hints--\nYour addEntry function should have an HTMLString variable js\nassert match(addEntry toString(), /HTMLString\\s*=/)\nYour HTMLString should be an empty template literal js\nassert match(code, /HTMLString\\s*=\\s*`\\n \\s*`/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c216da562fbb3957b9cb2c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0453a56e97426f18e595ad8b622e6b55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c216da562fbb3957b9cb2c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; }surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c216da562fbb3957b9cb2c.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8128f85d93b5814bec1b7352be22a904",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2171c1e5b6e3aa51768d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c2171c1e5b6e3aa51768d0\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nInside your template literal, create a label element and give it the text Entry # Name Using your template literal syntax, replace # with the value of entryNumber --hints--\nYou should have a label element inside your template literal js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label> *<\\/label>/);\nYour label element should have the text Entry ${entryNumber} Name js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label>\\s*Entry\\s\\$\\{entryNumber\\}\\sName\\s*<\\/label>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2171c1e5b6e3aa51768d0.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "24496e195e142bd699da5b738ccf94d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2171c1e5b6e3aa51768d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = `\n--fcc-editable-region--\n--fcc-editable-region--\n`;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2171c1e5b6e3aa51768d0.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "381291cb7194fef4ce86e3dc601480e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c2164c0df38a382062c4af\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nEach entry will have a text input for the entry's name, and a number input for the calories To get a count of the number of entries, you can query by text inputs Pass the string input[type=\"text\"] to the querySelectorAll() method Remember that if you use single quotes for your string, you must also use double quotes within it (or vice-versa) This will return a NodeList of all the text inputs in the form You can then access the length property of the NodeList to get the number of entries Do this on the same line --hints--\nYou should pass the string input[type=\"text\"] to the querySelectorAll() method js\nassert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*(\"|')\\s*input\\s*\\[\\s*type\\s*=\\s*(\"|')text\\2\\s*]\\s*\\1\\s*\\)/)\nYou should access the length property of your querySelectorAll() js\nassert match(addEntry toString(), /\\ querySelectorAll\\( *\\)\\ ( =(length))(\\1$|\\1\\s*;)/)\nYour entryNumber variable should be the length of the querySelectorAll js\nassert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*(\"|')\\s*input\\s*\\[\\s*type\\s*=\\s*(\"|')text\\2\\s*]\\s*\\1\\s*\\)\\ (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2ecf84d596b1b2704de42c8034e708ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "the form You can then access the length property of the NodeList to get the number of entries Do this on the same line --hints-- You should pass the string input[type=\"text\"] to the querySelectorAll() method js assert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*(\"|')\\s*input\\s*\\[\\s*type\\s*=\\s*(\"|')text\\2\\s*]\\s*\\1\\s*\\)/) You should access the length property of your querySelectorAll() js assert match(addEntry toString(), /\\ querySelectorAll\\( *\\)\\ ( =(length))(\\1$|\\1\\s*;)/) Your entryNumber variable should be the length of the querySelectorAll js assert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*(\"|')\\s*input\\s*\\[\\s*type\\s*=\\s*(\"|')text\\2\\s*]\\s*\\1\\s*\\)\\ (=(length))(\\3$|\\3\\s*;)/)\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "17a54dc53bb4a80c2ba45204e4a8b4dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "38134f5a2f2f4aeacd500e1702a466ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll();\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5576,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2164c0df38a382062c4af.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "330c7e7de2d5279271962488147776a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21774193de43bbc6a769f\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nGive your label element a for attribute with the value X-#-name, where X is the value of the entryDropdown element and # is the value of entryNumber Remember that HTML attributes should be wrapped in double quotes --hints--\nYour label element should have a for attribute set to ${entryDropdown value}-${entryNumber}-name js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\ value\\}-\\$\\{entryNumber\\}-name\"\\s*>/)\nYour label element should have the same text as before js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\ value\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eac65f899c443bfef1cf4aeebda0a9cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4024e613a9fd7ff4247e0c0eb7bd9825",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = --fcc-editable-region--\n<label>Entry ${entryNumber} Name</label>;\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21774193de43bbc6a769f.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7a5c86d825beed13e45e3ececd9dc787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c217ccd939053ce4fa16d6\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nAfter your label element, and on a new line in your template string, create an input element Give it a type attribute set to text, a placeholder attribute set to Name, and an id attribute that matches the for attribute of your label element --hints--\nYou should not modify your label element js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\ value\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>/);\nYou should add an input element on a new line js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\ value\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>\\n\\s*<input/);\nYour input element should have a type attribute set to text js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+ */)[0];\nassert match(inputAttributes, /type\\s*=\\s*\"text\"/);\nYour input element should have a placeholder attribute set to Name js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+ */)[0];\nassert match(inputAttributes, /placeholder\\s*=\\s*\"Name\"/);\nYour input element should have an id attribute set to ${entryDropdown value}-${entryNumber}-name js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+ */)[0];\nassert match(inputAttributes, /id\\s*=\\s*\"\\${entryDropdown value}-\\${entryNumber}-name\"/);\nYou should not have a closing input tag in your code js\nassert notMatch(code, /<\\/input>/);\nThe input element should have the closing > js\nassert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a8aabaa41ccde72de842ac1c1145f64e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "a placeholder attribute set to Name js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const inputAttributes = HTMLstring match(/<input\\s+ */)[0]; assert match(inputAttributes, /placeholder\\s*=\\s*\"Name\"/); Your input element should have an id attribute set to ${entryDropdown value}-${entryNumber}-name js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const inputAttributes = HTMLstring match(/<input\\s+ */)[0]; assert match(inputAttributes, /id\\s*=\\s*\"\\${entryDropdown value}-\\${entryNumber}-name\"/); You should not have a closing input tag in your code js assert notMatch(code, /<\\/input>/); The input element should have the closing > js assert match(code, /HTMLString\\s*=\\s*`\\n\\s*<label\\s+for\\s*=\\s*\"\\$\\{entryDropdown\\value\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>\\n\\s*<input\\s+[^>]*>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "84b83618096d3dc6c7af507fc8c7b98e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2c235ce046bb2b61b95154a400d13e78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c217ccd939053ce4fa16d6.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f3b507e4daf34c5423800ac93ffa7548",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21839f56eaf3ef4e027c4\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nCreate another label element (on a new line) at the end of your HTMLString This label should have the text Entry # Calories, using your template literal syntax to replace # with the value of entryNumber, and the for attribute set to X-#-calories, where X is the value of entryDropdown and # is the value of entryNumber --hints--\nYou should have two label elements in your HTMLString js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nassert equal(HTMLstring match(/<label/g) length, 2);\nYour new label element should be on a new line js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nassert equal(HTMLstring match(/\\n\\s*<label/g) length, 2);\nYour new label element should come after your input element js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputIndex = HTMLstring indexOf(\"<input\");\nconst labelIndex = HTMLstring lastIndexOf(\"<label\");\nassert isBelow(inputIndex, labelIndex);\nYour new label element should have a for attribute set to ${entryDropdown value}-${entryNumber}-calories js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst label = HTMLstring match(/<label *> *<\\/label>/g)[1];\nassert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>/)\nYour new label element should have the text Entry ${entryNumber} Calories js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst label = HTMLstring match(/<label *> *<\\/label>/g)[1];\nassert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sCalories<\\/label>/);\nYou should not modify your existing elements js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nassert match(HTMLstring, /`\\n\\s*<label\\s+for=\"\\$\\{entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "75c16d146e742d000adee93b777ecdcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "isBelow(inputIndex, labelIndex); Your new label element should have a for attribute set to ${entryDropdown value}-${entryNumber}-calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const label = HTMLstring match(/<label *> *<\\/label>/g)[1]; assert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>/) Your new label element should have the text Entry ${entryNumber} Calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const label = HTMLstring match(/<label *> *<\\/label>/g)[1]; assert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sCalories<\\/label>/); You should not modify your existing elements js const HTMLstring = code split(/HTMLString\\s*=/)[1]; assert match(HTMLstring, /`\\n\\s*<label\\s+for=\"\\$\\{entryDropdownvalue\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>\\n\\s*<input\\stype=\"text\"\\sid=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-name\"\\splaceholder=\"Name\"\\s\\/>\\n\\s*<label\\s+for=\"\\$\\{entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4530678cf4786ee4b23f2e5fd8b7c75a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "labelIndex); Your new label element should have a for attribute set to ${entryDropdown value}-${entryNumber}-calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const label = HTMLstring match(/<label *> *<\\/label>/g)[1]; assert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>/) Your new label element should have the text Entry ${entryNumber} Calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const label = HTMLstring match(/<label *> *<\\/label>/g)[1]; assert match(label, /<label\\s+for=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-calories\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sCalories<\\/label>/); You should not modify your existing elements js const HTMLstring = code split(/HTMLString\\s*=/)[1]; assert match(HTMLstring, /`\\n\\s*<label\\s+for=\"\\$\\{entryDropdownvalue\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>\\n\\s*<input\\stype=\"text\"\\sid=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-name\"\\splaceholder=\"Name\"\\s\\/>\\n\\s*<label\\s+for=\"\\$\\{entryDropdownvalue\\}-\\$\\{entryNumber\\}-calories\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sCalories<\\/label>/)\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "bb40ae640f428b6763d5cd76e4c5f9fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "HTMLstring = code split(/HTMLString\\s*=/)[1]; assert match(HTMLstring, /`\\n\\s*<label\\s+for=\"\\$\\{entryDropdownvalue\\}-\\$\\{entryNumber\\}-name\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sName<\\/label>\\n\\s*<input\\stype=\"text\"\\sid=\"\\$\\{entryDropdown value\\}-\\$\\{entryNumber\\}-name\"\\splaceholder=\"Name\"\\s\\/>\\n\\s*<label\\s+for=\"\\$\\{entryDropdownvalue\\}-\\$\\{entryNumber\\}-calories\"\\s*>Entry\\s\\$\\{entryNumber\\}\\sCalories<\\/label>/) --seed-- --seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; }container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a5e7b18d7b1c9b343ce260f88c1a0153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; }surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21839f56eaf3ef4e027c4.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a222525a0ec38f947458daed2a547d45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c218c028c56a411b2a379a\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nTo see your new HTML content for the targetInputContainer, you will need to use the innerHTML property The innerHTML property sets or returns the HTML content inside an element Here is a form element with a label and input element nested inside ```html\nFirst name\n```\nIf you want to add another label and input element inside the form, then you can use the innerHTML property as shown below:\njs\nconst formElement = document getElementById(\"form\");\nconst formContent = `\n<label for=\"last-name\">Last name</label>\n<input id=\"last-name\" type=\"text\">\n`;\nformElement innerHTML += formContent;\nUse the addition assignment operator += to append your HTMLString variable to targetInputContainer innerHTML --hints--\nYour addEntry function should access the innerHTML property of targetInputContainer js\nassert match(addEntry toString(), /targetInputContainer\\ innerHTML/);\nYou should use the += operator on targetInputContainer innerHTML js\nassert match(addEntry toString(), /targetInputContainer\\ innerHTML\\s*\\+=/);\nYou should add your HTMLString to the innerHTML of the targetInputContainer element js\nassert match(addEntry toString(), /targetInputContainer\\ innerHTML\\s*\\+=\\s*HTMLString/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3cef045e051ce1587b33c2d991d54e85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "targetInputContainer element js assert match(addEntry toString(), /targetInputContainer\\ innerHTML\\s*\\+=\\s*HTMLString/); --seed-- --seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; }container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1aec83bafa5eea3d22b127347ebc510d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return strreplace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c218c028c56a411b2a379a.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c00b61ceecebbe4929e229b63bb487ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c2187f55eb0f400269568f\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nFinally, on a new line after your second label, create another input element Give this one a type attribute set to number, a min attribute set to 0 (to ensure negative calories cannot be added), a placeholder attribute set to Calories, and an id attribute that matches the for attribute of your second label element --hints--\nYou should have two input elements in your HTMLString js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nassert equal(HTMLstring match(/<input/g) length, 2);\nYour new input element should be on a new line js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nassert equal(HTMLstring match(/\\n\\s*<input/g) length, 2);\nYour new input element should come after your second label element js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputIndex = HTMLstring lastIndexOf(\"<input\");\nconst labelIndex = HTMLstring lastIndexOf(\"<label\");\nassert isAbove(inputIndex, labelIndex);\nYour new input element should have a type attribute set to number js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+[^>]*>/g)[1];\nassert match(inputAttributes, /type\\s*=\\s*\"number\"/);\nYour input element should have a placeholder attribute set to Calories js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+[^>]*>/g)[1];\nassert match(inputAttributes, /placeholder\\s*=\\s*\"Calories\"/);\nYour input element should have an id attribute set to ${entryDropdown value}-${entryNumber}-calories js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring match(/<input\\s+[^>]*>/g)[1];\nassert match(inputAttributes, /id\\s*=\\s*\"\\${entryDropdown value}-\\${entryNumber}-calories\"/);\nYour input element should have a min attribute set to 0 js\nconst HTMLstring = code split(/HTMLString\\s*=/)[1];\nconst inputAttributes = HTMLstring",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6d4770936e80646465fc21e6c3ee749e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "assert match(inputAttributes, /type\\s*=\\s*\"number\"/); Your input element should have a placeholder attribute set to Calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const inputAttributes = HTMLstring match(/<input\\s+[^>]*>/g)[1]; assert match(inputAttributes, /placeholder\\s*=\\s*\"Calories\"/); Your input element should have an id attribute set to ${entryDropdown value}-${entryNumber}-calories js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const inputAttributes = HTMLstring match(/<input\\s+[^>]*>/g)[1]; assert match(inputAttributes, /id\\s*=\\s*\"\\${entryDropdown value}-\\${entryNumber}-calories\"/); Your input element should have a min attribute set to 0 js const HTMLstring = code split(/HTMLString\\s*=/)[1]; const inputAttributes = HTMLstringmatch(/<input\\s+[^>]*>/g)[1];\nassert match(inputAttributes, /min\\s*=\\s*\"0\"/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a6f96334b556d43916d0559f4cb10757",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "fc0949c1fdb2d1b09b23d5afe2d28d10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2187f55eb0f400269568f.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f39ca527a1c56b090e05cdae1b51fda1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c2194dce265f429300c8b1\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nTry adding a couple of entries to the Breakfast category, and you may notice some bugs The first thing we need to fix is the entry counts – the first entry should have a count of 1, not 0 This bug occurs because you are querying for input[type=\"text\"] elements before adding the new entry to the page To fix this, update your entryNumber variable to be the value of the length of the query plus 1 Add this on your declaration line, not in your template strings --hints--\nYou should add 1 to the length of your querySelectorAll() method js\nassert match(addEntry toString(), /entryNumber\\s*=\\s*targetInputContainer\\ querySelectorAll\\(\\s*'\\s*input\\s*\\[\\s*type\\s*=\\s*\"text\"\\s*]\\s*'\\s*\\)\\ length\\s*\\+\\s*1/)\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "17b44e29214d1abe5b7719a21ebccb0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e388bf96d0d35831b44eb7a1ebded2d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer innerHTML += HTMLString;\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c2194dce265f429300c8b1.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "970acc3e66fcaed9b61a4f4660464fd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21c17fa8fd6447ff0389d\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nYour other bug occurs if you add a Breakfast entry, fill it in, then add a second Breakfast entry You'll see that the values you added disappeared This is because you are updating innerHTML directly, which does not preserve your input content Change your innerHTML assignment to use the insertAdjacentHTML() method of targetInputContainer instead Do not pass any arguments yet --hints--\nYou should not access the innerHTML property of targetInputContainer js\nassert notMatch(addEntry toString(), /targetInputContainer\\ innerHTML/);\nYou should call the insertAdjacentHTML() method of targetInputContainer js\nassert match(addEntry toString(), /targetInputContainer\\ insertAdjacentHTML\\(/);\nYou should not pass any arguments to insertAdjacentHTML() js\nassert match(addEntry toString(), /targetInputContainer\\ insertAdjacentHTML\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a05dd706622bd0ac2f6056363c67b859",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f735f0aeb3c640b17b7599e0abcdb32c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer innerHTML += HTMLString;\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21c17fa8fd6447ff0389d.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a8a60f9dd35eed8b760973efb3ccbccf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21cd2c34541469f5700a9\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nThe insertAdjacentHtml method takes two arguments The first argument is a string that specifies the position of the inserted element The second argument is a string containing the HTML to be inserted For the first argument, pass the string \"beforeend\" to insert the new element as the last child of targetInputContainer For the second argument, pass your HTMLString variable --hints--\nYou should pass the string \"beforeend\" as the first argument to insertAdjacentHTML js\nassert match(addEntry toString(), /insertAdjacentHTML\\(\\s*('|\")beforeend\\1/);\nYou should pass your HTMLString variable as the second argument to insertAdjacentHTML js\nassert match(addEntry toString(), /insertAdjacentHTML\\(\\s*('|\")beforeend\\1\\s*,\\s*HTMLString\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "db6b7c66fd4962572daafae126f363cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e0e80b3ed2ea26672f3eadffa4ea53df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } --fcc-editable-region-- function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value}input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML();\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21cd2c34541469f5700a9.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f50a894567fcfabc797c867accedf539",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21d4f48267a47c2946788\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nGreat Now you can add entries without losing your previous inputs Your next step is to write a function that will get the calorie counts from the user's entries Declare a getCaloriesFromInputs function, and give it a parameter called list --hints--\nYou should declare a getCaloriesFromInputs variable js\nassert isDefined(getCaloriesFromInputs);\nYour getCaloriesFromInputs variable should be a function js\nassert isFunction(getCaloriesFromInputs);\nYour getCaloriesFromInputs function should take a parameter called list js\nassert match(getCaloriesFromInputs toString(), /\\(\\s*list\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4053c1ca45e0197b3463d28d9841e2c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b5a28d91dc658cb0172348ea4cd7413c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdownvalue}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21d4f48267a47c2946788.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "13db2babe21d6b13ba2ba59ffbbd1e14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c21dea919c8e4adb0df8e8\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nIn the Role Playing Game project, you learned how to set a button's behavior by editing its onclick property You can also edit an element's behavior by adding an event listener The following example uses the addEventListener method to add a click event to a button When the button is clicked, the printName function is called html\n<button class=\"btn\">Print name</button>\njs\nconst button = document querySelector(' btn');\nfunction printName() {\nconsole log(\"Jessica\");\n}\nbutton addEventListener('click', printName);\nThe addEventListener method takes two arguments The first is the event to listen to (Ex 'click') The second is the callback function, or the function that runs when the event is triggered Call the addEventListener() method on the addEntryButton Pass in the string \"click\" for the first argument and the addEntry function for the second argument Note that you should not call addEntry, but pass the variable (or function reference) directly --hints--\nYou should call the addEventListener() method of the addEntryButton js\nassert match(code, /addEntryButton\\ addEventListener\\(/);\nYou should pass \"click\" as the first argument to the addEventListener() method js\nassert match(code, /addEntryButton\\ addEventListener\\(\\s*('|\")click\\1\\s*/);\nYou should pass addEntry as the second argument to the addEventListener() method js\nassert match(code, /addEntryButton\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "340e4e2993a25c84a4d41b99dd18379a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "\"click\" for the first argument and the addEntry function for the second argument Note that you should not call addEntry, but pass the variable (or function reference) directly --hints-- You should call the addEventListener() method of the addEntryButton js assert match(code, /addEntryButton\\ addEventListener\\(/); You should pass \"click\" as the first argument to the addEventListener() method js assert match(code, /addEntryButton\\ addEventListener\\(\\s*('|\")click\\1\\s*/); You should pass addEntry as the second argument to the addEventListener() method js assert match(code, /addEntryButton\\addEventListener\\(\\s*('|\")click\\1\\s*,\\s*addEntry\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "196c09b46ea0cf3cc38f391f0fad1fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; }hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer innerHTML += HTMLString;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c21dea919c8e4adb0df8e8.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "43817811b416b9a317184b2ba1b352d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8ab51214c8c1f1b9a49f7\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nIn your new function, declare a calories variable and assign it the value 0 Use let to declare it, since you will be reassigning it later --hints--\nYou should declare a calories variable js\nassert match(getCaloriesFromInputs toString(), /calories\\s*=/);\nYour calories variable should be assigned the value 0 js\nassert match(getCaloriesFromInputs toString(), /calories\\s*=\\s*0/);\nYou should declare your calories variable with let js\n// babel transforms the code, so we gotta do a hack here\nconst getCaloriesFromInputsString = code split('function getCaloriesFromInputs')[1];\nassert match(getCaloriesFromInputsString, /let\\s+calories\\s*=\\s*0/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5658,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "61e220536d3b5ba58d8aedd89f81ed99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5658,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a4f631143fdcc40200bd211e3de65009",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5658,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ab51214c8c1f1b9a49f7.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e28f0b1cb4375edd536744dafa93bb68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8ad0cd8f1e5201c4ef2e4\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nThe list parameter is going to be the result of a query selector, which will return a NodeList A NodeList is a list of elements like an array It contains the elements that match the query selector You will need to loop through these elements in the list In previous steps, you learned how to loop through an array using a for loop You can also use a for of loop to loop through an array and a NodeList A for of loop is used to iterate over elements in an iterable object like an array The variable declared in the loop represents the current element being iterated over js\nfor (const element of elementArray) {\nconsole log(element);\n}\nCreate a for of loop that loops through the list For the loop's variable name, use const to declare a variable called item --hints--\nYou should have a for of loop that loops through the list parameter Use item for the loop's variable name js\nassert match(code, /for\\s*\\(\\s*const\\s+item\\s+of\\s+list\\s*\\)\\s*\\{/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6a04604d34ec26585b1fc71d70eccac3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "685e2a1566ff3ba3a9c7214c1b2d6b8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8ad0cd8f1e5201c4ef2e4.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c033b8b413039c93c83f0701d19740e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8be904ffff922f3c6f8d0\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nRemember that you wrote a function earlier to clean the user's input You'll need to use that function here Update your currVal declaration to be the result of calling cleanInputString with item value --hints--\nYou should call the cleanInputString function inside the getCaloriesFromInputs function js\nassert match(getCaloriesFromInputs toString(), /cleanInputString\\(/);\nYou should pass item value as the argument for cleanInputString function js\nassert match(getCaloriesFromInputs toString(), /cleanInputString\\(\\s*item\\ value\\s*\\)/);\nYou should assign the result of your cleanInputString call to your currVal variable js\nassert match(code, /const\\s+currVal\\s*=\\s*cleanInputString\\(\\s*item\\ value\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "26da2edaeaae116529426709a9572325",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "783ec722c28d1ff3deebb00c69d5b0cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\n--fcc-editable-region--\nconst currVal = item value;\n--fcc-editable-region--\n}\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8be904ffff922f3c6f8d0.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "241031c5c62f621262d9b70395bbf69a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8b0187cceff21c8389543\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nThe NodeList values you will pass to list will consist of input elements So you will want to look at the value attribute of each element Assign item value to a const variable called currVal --hints--\nYou should use const to declare a new variable called currVal js\nassert match(code, /const\\s+currVal\\s*=/);\nYou should assign item value to currVal js\nassert match(code, /const\\s+currVal\\s*=\\s*item\\ value/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e9fc191e3c07fc881a00b6f11423ea4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; }output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "88784b2bb02d5d95875a0db1150c3328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainerinsertAdjacentHTML('beforeend', HTMLString);\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\n--fcc-editable-region--\nfor (const item of list) {\n}\n--fcc-editable-region--\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8b0187cceff21c8389543.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a8b2f7d12602e5cece063bf9c6c135fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8c00bfb671b23f9de4159\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nYou also need to confirm the input is valid Declare an invalidInputMatch variable, and assign it the result of calling your isInvalidInput function with currVal as the argument --hints--\nYou should declare an invalidInputMatch variable js\nassert match(getCaloriesFromInputs toString(), /invalidInputMatch\\s*=/);\nYou should assign the result of calling isInvalidInput to your invalidInputMatch variable js\nassert match(getCaloriesFromInputs toString(), /invalidInputMatch\\s*=\\s*isInvalidInput\\(/);\nYou should pass currVal as the argument to isInvalidInput js\nassert match(getCaloriesFromInputs toString(), /invalidInputMatch\\s*=\\s*isInvalidInput\\(\\s*currVal\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d7096669dcd1b7b3da64137ccca811e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ab7c9943665023ac7096650654595bde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c00bfb671b23f9de4159.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "870cceb68133730c9448bb2a82242ef3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bc53735149084390e5d0\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nBrowsers have a built in alert() function, which you can use to display a pop-up message to the user The message to display is passed as the argument to the alert() function Using a template literal, in your if block, call the alert() function to tell the user \"Invalid Input: \", followed by the first value in the invalidInputMatch array --hints--\nYou should call the alert() function in your if block js\nassert match(getCaloriesFromInputs toString(), /if\\s*\\(\\s*invalidInputMatch\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(/);\nYou should use a template literal to pass the \"Invalid Input: \" message to the alert() function js\n// because it transforms template literals assert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ ) alert\\(\\s*`Invalid Input: /);\nYou should display the first element of the invalidInputMatch array after the \"Invalid Input: \" text by using a template literal js\nassert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6313,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6362707593ee51694cf4a59a75221c20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "in your if block js assert match(getCaloriesFromInputs toString(), /if\\s*\\(\\s*invalidInputMatch\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(/); You should use a template literal to pass the \"Invalid Input: \" message to the alert() function js // because it transforms template literals assert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ ) alert\\(\\s*`Invalid Input: /); You should display the first element of the invalidInputMatch array after the \"Invalid Input: \" text by using a template literal js assert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ )alert\\(\\s*`Invalid Input: \\${invalidInputMatch\\s*\\[\\s*0\\s*\\]\\s*}`\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6313,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0e106f3c7406bdf912a445b7d2470563",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6313,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8827208ac9bd42d9f271f9af57693b92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\n}\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6313,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bc53735149084390e5d0.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e62d13c9a4f9c6592cc42da0fac37341",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c8c15fd337ad24b9b68049\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nRemember that your isInvalidInput function returns String match, which is an array of matches or null if no matches are found In JavaScript, values can either be truthy or falsy A value is truthy if it evaluates to true when converted to a Boolean A value is falsy if it evaluates to false when converted to a Boolean null is an example of a falsy value You need to check if invalidInputMatch is truthy – you can do this by passing the variable directly to your if condition (without a comparison operator) Here's an example of checking the truthiness of helloWorld ```js\nif (helloWorld) {\n}\n```\nAdd an if statement that checks if invalidInputMatch is truthy --hints--\nYou should add an if statement to your getCaloriesFromInputs function js\nconst functionCode = code split(/getCaloriesFromInputs/) [1] split(/\\}\\s*\\}/) [0];\nassert match(functionCode, /if\\s*\\(/);\nYou should check the truthiness of invalidInputMatch in your if condition js\nassert match(getCaloriesFromInputs toString(), /if\\s*\\(\\s*invalidInputMatch\\s*\\)/);\nYour if statement should be inside your for loop js\nconst forCode = code split(/getCaloriesFromInputs/) [1] split(/for\\s*\\(/) [1] split(/\\}/) [0];\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e52fce61ecb7e8c0e81e8cfdd17da9e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "```js if (helloWorld) { } ``` Add an if statement that checks if invalidInputMatch is truthy --hints-- You should add an if statement to your getCaloriesFromInputs function js const functionCode = code split(/getCaloriesFromInputs/) [1] split(/\\}\\s*\\}/) [0]; assert match(functionCode, /if\\s*\\(/); You should check the truthiness of invalidInputMatch in your if condition js assert match(getCaloriesFromInputs toString(), /if\\s*\\(\\s*invalidInputMatch\\s*\\)/); Your if statement should be inside your for loop js const forCode = code split(/getCaloriesFromInputs/) [1] split(/for\\s*\\(/) [1] split(/\\}/) [0]; assertmatch(forCode, /if\\s*\\(\\s*invalidInputMatch\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "aa0dc37aff2c77bc2c9d3419ffc3a8d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f087441351fe8f4bc1ecfc689813e65b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdownvalue}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c8c15fd337ad24b9b68049.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d16200180535641b7091db169b4cfd0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bcc26219e7090da0f549\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nIn programming, null is meant to represent the absence of a value In this case, if the user enters an invalid input, you want to alert them and then return null to indicate that the function has failed Still within your if block, set isError to true and return null --hints--\nAfter your alert, you should set isError to true js\nassert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ ) alert\\(\\s*`Invalid Input: \\${invalidInputMatch\\s*\\[\\s*0\\s*\\]\\s*}`\\s*\\)\\s*; \\s*isError\\s*=\\s*true/);\nAfter you modify isError, you should return the value null js\nassert match(code split(/function\\s+getCaloriesFromInputs/)[1], /( :window\\ |globalThis\\ ) alert\\(\\s*`Invalid Input: \\${invalidInputMatch\\s*\\[\\s*0\\s*\\]\\s*}`\\s*\\)\\s*; \\s*isError\\s*=\\s*true\\s*; \\s*return\\s+null\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7be26569c3d5a23403bf4d44f2f879e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "--seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container,output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c12d04bfc363a1f613bdf0af563d1944",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = documentquerySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\n}\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bcc26219e7090da0f549.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3a9e096cb40cd1a626e60dfbdde5039a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bce376ca4f09c15a3768\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nRemember that return ends the execution of a function After your if block, you need to handle the logic for when the input is valid Because your if statement returns a value, you do not need an else statement Use the addition assignment operator to add currVal to your calories total You'll need to use the Number constructor to convert currVal to a number The Number constructor is a function that converts a value to a number If the value cannot be converted, it returns NaN which stands for \"Not a Number\" Here is an example:\njs\nNumber('10'); // returns the number 10\nNumber('abc'); // returns NaN\n--hints--\nYou should not add an else statement js\nassert notMatch(getCaloriesFromInputs toString(), /else/);\nAfter your if statement, you should use the addition assignment operator on calories js\nassert match(getCaloriesFromInputs toString(), /if *}\\s*calories\\s*\\+=/s);\nYou should pass currVal to the Number() constructor js\nassert match(getCaloriesFromInputs toString(), /Number\\(\\s*currVal\\s*\\)/);\nYou should add the value of Number(currVal) to calories js\nassert match(getCaloriesFromInputs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2122a66266daf9f5d232677756b88c24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "for \"Not a Number\" Here is an example: js Number('10'); // returns the number 10 Number('abc'); // returns NaN --hints-- You should not add an else statement js assert notMatch(getCaloriesFromInputs toString(), /else/); After your if statement, you should use the addition assignment operator on calories js assert match(getCaloriesFromInputs toString(), /if *}\\s*calories\\s*\\+=/s); You should pass currVal to the Number() constructor js assert match(getCaloriesFromInputs toString(), /Number\\(\\s*currVal\\s*\\)/); You should add the value of Number(currVal) to calories js assert match(getCaloriesFromInputstoString(), /calories\\s*\\+=\\s*Number\\(\\s*currVal\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f4b1c7589597e0799e5b400410abb5bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "81b67337da18edbfa3c9955e8299e638",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdownvalue}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bce376ca4f09c15a3768.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "279082a3c95681c4271884d8f035e118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bdd916e0c10af01ed8d7\ntitle: Step 67\nchallengeType: 0\ndashedName: step-67\n--description--\nAfter your for loop has completed, return the calories value --hints--\nYou should return the calories value js\nassert match(getCaloriesFromInputs toString(), /return\\s+calories/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5493,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "01046e33aa0aee42c0a3481f3ed389ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "{ cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = documentgetElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5493,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ed8dde6351eed4eaf7fb2d565b162ec0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5493,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bdd916e0c10af01ed8d7.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a4cd4dc60ca308fc06c9480424240a0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9be334f4a050c0b94bc93\ntitle: Step 68\nchallengeType: 0\ndashedName: step-68\n--description--\nNow it's time to start putting it all together Declare an empty calculateCalories function, which takes a parameter named e This function will be another event listener, so the first argument passed will be the browser event – e is a common name for this parameter --hints--\nYou should declare a calculateCalories variable js\nassert isDefined(calculateCalories);\nYour calculateCalories variable should be a function js\nassert isFunction(calculateCalories);\nYour calculateCalories function should take an e argument js\nassert match(calculateCalories toString(), /\\(\\s*e\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5b98409caee9bb1582cbb863c1e1d047",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "357ed775be4de393934d2d4a1551d1b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdownvalue}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9be334f4a050c0b94bc93.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "085e32ffb6232eafea5c256f54eb5414",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bef7fec05c0d38853828\ntitle: Step 69\nchallengeType: 0\ndashedName: step-69\n--description--\nYou will be attaching this function to the submit event of the form The submit event is triggered when the form is submitted The default action of the submit event is to reload the page You need to prevent this default action using the preventDefault() method of your e parameter Add a line to your calculateCalories function that calls the preventDefault() method on the e parameter Then, reset your global error flag isError to false --hints--\nYour calculateCalories function should call e preventDefault() js\nassert match(calculateCalories toString(), /e\\ preventDefault\\(\\s*\\)/);\nYour calculateCalories function should reset the global error flag isError to false js\nassert match(calculateCalories toString(), /isError\\s*=\\s*false/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4c103eb59a8424d204bda5393801cfb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4fc68bab2731e63b3157f8f3886447de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bef7fec05c0d38853828.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "03b94f83a21d7d57d1de5a9e84ab5a59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9bf80558d780e848b2987\ntitle: Step 70\nchallengeType: 0\ndashedName: step-70\n--description--\nYour function needs to get the values from the entries the user has added Declare a breakfastNumberInputs variable, and give it the value of calling document querySelectorAll() with the selector #breakfast input[type='number'] This will return any number inputs that are in the #breakfast element --hints--\nYou should declare a breakfastNumberInputs variable js\nassert match(calculateCalories toString(), /breakfastNumberInputs\\s*=/);\nYou should call document querySelectorAll() with #breakfast input[type='number'] js\nassert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#breakfast input\\[\\s*type=(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should assign the result of your document querySelectorAll() call to breakfastNumberInputs js\nassert match(calculateCalories toString(), /breakfastNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#breakfast input\\[\\s*type=(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dc719c58c787ad75250ff8aed605045c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "--seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container,output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8d0529194cb9e89176ab685c20f20e8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = documentquerySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9bf80558d780e848b2987.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "795a04ed5181caf7312ab162455b8ad4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9c09a7daa4f0ff92c4023\ntitle: Step 71\nchallengeType: 0\ndashedName: step-71\n--description--\nUsing that same syntax, query your number inputs in the #lunch element and assign them to lunchNumberInputs --hints--\nYou should declare a lunchNumberInputs variable js\nassert match(calculateCalories toString(), /lunchNumberInputs\\s*=/);\nYou should call document querySelectorAll() with #lunch input[type='number'] js\nassert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#lunch input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should assign the result of your document querySelectorAll() call to lunchNumberInputs js\nassert match(calculateCalories toString(), /lunchNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#lunch input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b358db466e0077f23d559257b2a1c041",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "59b073d6fbbd204287768230791760f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c09a7daa4f0ff92c4023.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dc8546e42e69c7f72b709e9b3dfd7636",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9c11a0a090311dff55564\ntitle: Step 73\nchallengeType: 0\ndashedName: step-73\n--description--\nNow that you have your lists of elements, you can pass them to your getCaloriesFromInputs function to extract the calorie total Declare a breakfastCalories variable, and assign it the result of calling getCaloriesFromInputs with breakfastNumberInputs as the argument --hints--\nYour calculateCalories function should have a breakfastCalories variable js\nassert match(calculateCalories toString(), /breakfastCalories\\s*=/);\nYou should call getCaloriesFromInputs with breakfastNumberInputs as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*breakfastNumberInputs\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to breakfastCalories js\nassert match(calculateCalories toString(), /breakfastCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*breakfastNumberInputs\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a727e72cdd95ce4b55b7f7a4040b0524",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ccf9887f9886897c64de555592db2b36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6702,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c11a0a090311dff55564.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "355d7a2065ce38766ec47fec67317a22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9c16dd75dd212dc12363c\ntitle: Step 74\nchallengeType: 0\ndashedName: step-74\n--description--\nNow declare a lunchCalories variable, and give it the value of calling getCaloriesFromInputs with your lunchNumberInputs --hints--\nYour calculateCalories function should have a lunchCalories variable js\nassert match(calculateCalories toString(), /lunchCalories\\s*=/);\nYou should call getCaloriesFromInputs with lunchNumberInputs as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*lunchNumberInputs\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to lunchCalories js\nassert match(calculateCalories toString(), /lunchCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*lunchNumberInputs\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "db46b16d5a6296de02f0439ab5c4980c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9acd4f70c0b31a3bcc2c9bec4a01763a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "08afbd09728c287b0e2845e9761e6989",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\"); const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(item value); const invalidInputMatch = isInvalidInput(currVal); if (invalidInputMatch) { alert(`Invalid Input: ${invalidInputMatch[0]}`); isError = true; return null; } calories += Number(currVal); } return calories; } addEntryButtonaddEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c16dd75dd212dc12363c.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "36caa9cf0db6d92032dcae9fd085b550",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9c0d0857f0a10a57af936\ntitle: Step 72\nchallengeType: 0\ndashedName: step-72\n--description--\nFollowing the same pattern, query for your number inputs in the #dinner, #snacks, and #exercise elements Assign them to variables following the naming scheme of the previous two --hints--\nYou should declare a dinnerNumberInputs variable js\nassert match(calculateCalories toString(), /dinnerNumberInputs\\s*=/);\nYou should call document querySelectorAll() with #dinner input[type='number'] js\nassert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#dinner input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should assign the result of your document querySelectorAll() call to dinnerNumberInputs js\nassert match(calculateCalories toString(), /dinnerNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#dinner input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should declare a snacksNumberInputs variable js\nassert match(calculateCalories toString(), /snacksNumberInputs\\s*=/);\nYou should call document querySelectorAll() with #snacks input[type='number'] js\nassert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should assign the result of your document querySelectorAll() call to snacksNumberInputs js\nassert match(calculateCalories toString(), /snacksNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should declare a exerciseNumberInputs variable js\nassert match(calculateCalories toString(), /exerciseNumberInputs\\s*=/);\nYou should call document querySelectorAll() with #exercise input[type='number'] js\nassert match(calculateCalories toString(), /document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "34a403a35532e08e843cdcc0689e8b94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "toString(), /dinnerNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#dinner input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should declare a snacksNumberInputs variable js assert match(calculateCalories toString(), /snacksNumberInputs\\s*=/); You should call document querySelectorAll() with #snacks input[type='number'] js assert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should assign the result of your document querySelectorAll() call to snacksNumberInputs js assert match(calculateCalories toString(), /snacksNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should declare a exerciseNumberInputs variable js assert match(calculateCalories toString(), /exerciseNumberInputs\\s*=/); You should call document querySelectorAll() with #exercise input[type='number'] js assert match(calculateCalories toString(), /document\\querySelectorAll\\(\\s*('|\"|`)#exercise input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/);\nYou should assign the result of your document querySelectorAll() call to exerciseNumberInputs js\nassert match(calculateCalories toString(), /exerciseNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#exercise input\\[\\s*type\\s*=\\s*(('|\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "005a99971c5d5d69a4ce65d8ea639456",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "with #snacks input[type='number'] js assert match(calculateCalories toString(), /document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should assign the result of your document querySelectorAll() call to snacksNumberInputs js assert match(calculateCalories toString(), /snacksNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#snacks input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should declare a exerciseNumberInputs variable js assert match(calculateCalories toString(), /exerciseNumberInputs\\s*=/); You should call document querySelectorAll() with #exercise input[type='number'] js assert match(calculateCalories toString(), /document\\querySelectorAll\\(\\s*('|\"|`)#exercise input\\[\\s*type\\s*=\\s*(('|\") )number\\2\\s*\\]\\s*\\1\\s*\\)/); You should assign the result of your document querySelectorAll() call to exerciseNumberInputs js assert match(calculateCalories toString(), /exerciseNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#exercise input\\[\\s*type\\s*=\\s*(('|\"))number\\2\\s*\\]\\s*\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7863f5f21d4c141e6981758baa543b2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "exerciseNumberInputs js assert match(calculateCalories toString(), /exerciseNumberInputs\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\"|`)#exercise input\\[\\s*type\\s*=\\s*(('|\"))number\\2\\s*\\]\\s*\\1\\s*\\)/); --seed-- --seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; }container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "e7cc4b7bc4fd6cf374ca28dac98c7c6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = documentgetElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "f723d706471984c0f13252a84d5dd7db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c0d0857f0a10a57af936.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "61c313d5339300a479c45180e59117b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9c1ef134f3513e751c975\ntitle: Step 75\nchallengeType: 0\ndashedName: step-75\n--description--\nFollowing this same pattern, declare variables for the number inputs in the #dinner, #snacks, and #exercise elements Assign them the appropriate getCaloriesFromInputs calls --hints--\nYour calculateCalories function should have a dinnerCalories variable js\nassert match(calculateCalories toString(), /dinnerCalories\\s*=/);\nYou should call getCaloriesFromInputs with dinnerNumberInputs as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*dinnerNumberInputs\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to dinnerCalories js\nassert match(calculateCalories toString(), /dinnerCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*dinnerNumberInputs\\s*\\)/);\nYour calculateCalories function should have a snacksCalories variable js\nassert match(calculateCalories toString(), /snacksCalories\\s*=/);\nYou should call getCaloriesFromInputs with snacksNumberInputs as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*snacksNumberInputs\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to snacksCalories js\nassert match(calculateCalories toString(), /snacksCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*snacksNumberInputs\\s*\\)/);\nYour calculateCalories function should have a exerciseCalories variable js\nassert match(calculateCalories toString(), /exerciseCalories\\s*=/);\nYou should call getCaloriesFromInputs with exerciseNumberInputs as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*exerciseNumberInputs\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to exerciseCalories js\nassert match(calculateCalories",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "7f376c0d3b144e78d6c60ed65f024740",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "have a snacksCalories variable js assert match(calculateCalories toString(), /snacksCalories\\s*=/); You should call getCaloriesFromInputs with snacksNumberInputs as the argument js assert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*snacksNumberInputs\\s*\\)/); You should assign the result of getCaloriesFromInputs to snacksCalories js assert match(calculateCalories toString(), /snacksCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*snacksNumberInputs\\s*\\)/); Your calculateCalories function should have a exerciseCalories variable js assert match(calculateCalories toString(), /exerciseCalories\\s*=/); You should call getCaloriesFromInputs with exerciseNumberInputs as the argument js assert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*exerciseNumberInputs\\s*\\)/); You should assign the result of getCaloriesFromInputs to exerciseCalories js assert match(calculateCaloriestoString(), /exerciseCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*exerciseNumberInputs\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6da60d130221b761a0dc00cf4699741a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0b04c29131ef82007545309c6de58a52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "dcda733aa1af193ba668fda1c195c231",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\"); const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9c1ef134f3513e751c975.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "1d516ed7a9d0549520b9c08301589670",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e45519caf31b987fbb5f\ntitle: Step 77\nchallengeType: 0\ndashedName: step-77\n--description--\nYour getCaloriesFromInputs function will set the global error flag isError to true if an invalid input is detected Add an if statement to your calculateCalories function that checks the truthiness of your global error flag, and if it is truthy then use return to end the function execution --hints--\nYour calculateCalories function should have an if statement that checks the truthiness of the isError variable js\nassert match(calculateCalories toString(), /if\\s*\\(\\s*isError\\s*\\)/);\nYour if statement should use return to end the function execution js\nassert match(calculateCalories toString(), /if\\s*\\(\\s*isError\\s*\\)\\s*\\{ \\s*return\\s*; \\s*\\} \\s*/);\nYour if statement should be placed after the last getCaloriesFromInputs function call js\nassert match(code, /if\\s*\\(\\s*isError\\s*\\)\\s*\\{ \\s*return\\s*; \\s*\\} \\s*\\}\\s*function\\s+/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "db1b26293a453e9b2ab2411dbc07eccd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2cd17a6bf274469a348ddef524c0287f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9256e1746bbb13dbd3c17942f645e6d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e45519caf31b987fbb5f.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2eb31c71ecbd9397af3487c5f5ecb5d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e4d2ff41811dd640504f\ntitle: Step 78\nchallengeType: 0\ndashedName: step-78\n--description--\nIt is time to start preparing your calculations Start by declaring a consumedCalories variable, and assign it the sum of breakfastCalories, lunchCalories, dinnerCalories, and snacksCalories (note that order matters for the tests) Be sure to do this after your if statement --hints--\nYour function should have a consumedCalories variable js\nassert match(calculateCalories toString(), /consumedCalories\\s*=/);\nYour consumedCalories variable should come after your if statement js\nassert isAbove(calculateCalories toString() indexOf('consumedCalories'), calculateCalories toString() indexOf('if'));\nYou should calculate the sum of breakfastCalories, lunchCalories, dinnerCalories, and snacksCalories, in order js\nassert match(calculateCalories toString(), /breakfastCalories\\s*\\+\\s*lunchCalories\\s*\\+\\s*dinnerCalories\\s*\\+\\s*snacksCalories\\s*; \\s*$/m);\nYou should assign the sum of breakfastCalories, lunchCalories, dinnerCalories, and snacksCalories to consumedCalories js\nassert match(calculateCalories toString(), /consumedCalories\\s*=\\s*breakfastCalories\\s*\\+\\s*lunchCalories\\s*\\+\\s*dinnerCalories\\s*\\+\\s*snacksCalories\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "8351e49c10e5306e459743eb38388573",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Be sure to do this after your if statement --hints-- Your function should have a consumedCalories variable js assert match(calculateCalories toString(), /consumedCalories\\s*=/); Your consumedCalories variable should come after your if statement js assert isAbove(calculateCalories toString() indexOf('consumedCalories'), calculateCalories toString() indexOf('if')); You should calculate the sum of breakfastCalories, lunchCalories, dinnerCalories, and snacksCalories, in order js assert match(calculateCalories toString(), /breakfastCalories\\s*\\+\\s*lunchCalories\\s*\\+\\s*dinnerCalories\\s*\\+\\s*snacksCalories\\s*; \\s*$/m); You should assign the sum of breakfastCalories, lunchCalories, dinnerCalories, and snacksCalories to consumedCalories js assert match(calculateCalories toString(), /consumedCalories\\s*=\\s*breakfastCalories\\s*\\+\\s*lunchCalories\\s*\\+\\s*dinnerCalories\\s*\\+\\s*snacksCalories\\s*;\\s*$/m);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "70ac581448c9f63c355e9feecfa580e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "26a85bbeb9b75d8ace8ce7e4daf99398",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "b4fe321428b92bf3a796b6a942d7136a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e4d2ff41811dd640504f.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "30727d7c971a7b75dbc037997c25ef8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e51b3a007a1eba1cd0f6\ntitle: Step 79\nchallengeType: 0\ndashedName: step-79\n--description--\nNow declare a remainingCalories variable, and give it the value of subtracting consumedCalories from budgetCalories and adding exerciseCalories --hints--\nYour calculateCalories function should have a remainingCalories variable js\nassert match(calculateCalories toString(), /remainingCalories\\s*=/);\nYou should find the value of budgetCalories - consumedCalories + exerciseCalories js\nassert match(calculateCalories toString(), /budgetCalories\\s*-\\s*consumedCalories\\s*\\+\\s*exerciseCalories/);\nYou should assign the value of budgetCalories - consumedCalories + exerciseCalories to remainingCalories js\nassert match(calculateCalories toString(), /remainingCalories\\s*=\\s*budgetCalories\\s*-\\s*consumedCalories\\s*\\+\\s*exerciseCalories/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7166,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a5b46290d39aa28360cfd90940603d4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7166,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a5ac8d79974935c0adbea01dc8438e39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7166,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "95584bd428860241adba29d81d7c638a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7166,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e51b3a007a1eba1cd0f6.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fb294f4afc10a2ca7efd6ffbdde6c4be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e3a83bb3e61a80eea564\ntitle: Step 76\nchallengeType: 0\ndashedName: step-76\n--description--\nYou also need to get the value of your #budget input You already queried this at the top of your code, and set it to the budgetNumberInput variable However, you used getElementById, which returns an Element, not a NodeList A NodeList is an array-like object, which means you can iterate through it and it shares some common methods with an array For your getCaloriesFromInputs function, an array will work for the argument just as well as a NodeList does Declare a budgetCalories variable and set it to the result of calling getCaloriesFromInputs – pass an array containing your budgetNumberInput as the argument --hints--\nYour calculateCalories function should have a budgetCalories variable js\nassert match(calculateCalories toString(), /budgetCalories\\s*=/);\nYou should call getCaloriesFromInputs with [budgetNumberInput] as the argument js\nassert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*\\[\\s*budgetNumberInput\\s*\\]\\s*\\)/);\nYou should assign the result of getCaloriesFromInputs to budgetCalories js\nassert match(calculateCalories",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c144224af5f5beea02723e3003d4c076",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "array will work for the argument just as well as a NodeList does Declare a budgetCalories variable and set it to the result of calling getCaloriesFromInputs – pass an array containing your budgetNumberInput as the argument --hints-- Your calculateCalories function should have a budgetCalories variable js assert match(calculateCalories toString(), /budgetCalories\\s*=/); You should call getCaloriesFromInputs with [budgetNumberInput] as the argument js assert match(calculateCalories toString(), /getCaloriesFromInputs\\s*\\(\\s*\\[\\s*budgetNumberInput\\s*\\]\\s*\\)/); You should assign the result of getCaloriesFromInputs to budgetCalories js assert match(calculateCaloriestoString(), /budgetCalories\\s*=\\s*getCaloriesFromInputs\\s*\\(\\s*\\[\\s*budgetNumberInput\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7a9d4095b4ea36fc8ac470014f25a34b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7917eb5617f2e7ca8c638574fe3df459",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "30665d07fb79330cdf56a5d7d4cd4585",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\"); const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e3a83bb3e61a80eea564.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "5601b73de5c0765c995b88b918ca1445",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e55b4b06c11fff555c64\ntitle: Step 80\nchallengeType: 0\ndashedName: step-80\n--description--\nYou need to know if the user is in a caloric surplus or deficit A caloric surplus is when you consume more calories than you burn, and a caloric deficit is when you burn more calories than you consume Burning as many calories as you consume is called maintenance, and can be thought of as a surplus or deficit of 0, depending on your goals Declare a surplusOrDeficit variable Then use a ternary operator to set surplusOrDeficit to the string \"Surplus\" or \"Deficit\" depending on whether remainingCalories is less than 0 If it is less than 0, then surplusOrDeficit should be \"Surplus\" Otherwise, it should be \"Deficit\" --hints--\nYour calculateCalories function should have a surplusOrDeficit variable js\nassert match(calculateCalories toString(), /surplusOrDeficit\\s*=/g);\nYou should have a ternary operator that checks if remainingCalories is less 0 js\nassert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ /g);\nYour ternary operator should return the string \"Surplus\" if remainingCalories is less than 0 js\nassert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ \\s*('|\")Surplus\\1\\s*:/g);\nYour ternary operator should return the string \"Deficit\" if remainingCalories is not less than 0 js\nassert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ \\s*('|\")Surplus\\1\\s*:\\s*('|\")Deficit\\2/g);\nYou should assign the result of your ternary operator to surplusOrDeficit js\nassert match(calculateCalories toString(), /surplusOrDeficit\\s*=\\s*remainingCalories\\s*<\\s*0\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f0465e199ef1f5b72b729f744455892d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "You should have a ternary operator that checks if remainingCalories is less 0 js assert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ /g); Your ternary operator should return the string \"Surplus\" if remainingCalories is less than 0 js assert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ \\s*('|\")Surplus\\1\\s*:/g); Your ternary operator should return the string \"Deficit\" if remainingCalories is not less than 0 js assert match(calculateCalories toString(), /remainingCalories\\s*<\\s*0\\s*\\ \\s*('|\")Surplus\\1\\s*:\\s*('|\")Deficit\\2/g); You should assign the result of your ternary operator to surplusOrDeficit js assert match(calculateCalories toString(), /surplusOrDeficit\\s*=\\s*remainingCalories\\s*<\\s*0\\s*\\\\s*('|\")Surplus\\1\\s*:\\s*('|\")Deficit\\2/g);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "98fda4fbabf44ac23b2fb4cf3789f7e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "639c9f882e8518d2beb3a46b18444113",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "18e279c7b8884cf1aacc6d071c45e36f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e55b4b06c11fff555c64.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "43a0b6164b385066b719b00db36f330b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e5eea8261d22856ead1c\ntitle: Step 81\nchallengeType: 0\ndashedName: step-81\n--description--\nYou need to construct the HTML string that will be displayed in the output element Start by assigning an empty template literal to the innerHTML property of the output element on a new line at the end of the function --hints--\nYou should access the innerHTML property of the output element js\nassert match(calculateCalories toString(), /output\\s*\\ \\s*innerHTML/);\nYou should assign an empty template literal to the innerHTML property of the output element js\n// again, template literals don't play well with the parser so we have to look at the raw code const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/\\s*; \\s*\\}/)[0];\nassert equal(htmlString, '``');\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4bf224c056e63fcc1d0fbf3ee2d9df6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3c186f8f5625ebfc2e071f83897a10a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "c95a4a655ba9b56950cdeff161fc7550",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5ee995c396b1c6ee13ca660d21cb574a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "input[type='number']\"); const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e5eea8261d22856ead1c.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "76554371cf15dab13aa0598caf44c845",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e63bb1e32d23b6adbe44\ntitle: Step 82\nchallengeType: 0\ndashedName: step-82\n--description--\nWhen you need to lower case a string, you can use the toLowerCase() method This method returns the calling string value converted to lower case js\nconst firstName = 'JESSICA';\nconsole log(firstName toLowerCase()); // Output: jessica\nYour output innerHTML string will need a span element Create that, and give it a class attribute set to the surplusOrDeficit variable Your surplusOrDeficit variable should be converted to lower case using the toLowerCase() method Do not give your span any text yet --hints--\nYou should create a span element in your template literal js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span/);\nYour span element should have a class attribute js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span\\s+class\\s*=/);\nYour span should have the class attribute set to surplusOrDeficit toLowerCase() js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\ toLowerCase\\(\\s*\\)\\}\"\\s*>/);\nYour span should not have any text js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1b991f41f0bc24e498fc6e37ebfb13af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "element in your template literal js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<span/); Your span element should have a class attribute js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<span\\s+class\\s*=/); Your span should have the class attribute set to surplusOrDeficit toLowerCase() js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\ toLowerCase\\(\\s*\\)\\}\"\\s*>/); Your span should not have any text js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\toLowerCase\\(\\s*\\)\\}\"\\s*><\\/span>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a8861192dcbbfbdcbf17d2ab0098ea32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "9cd2abebdb30de807e2e6fe26c1538f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "be8f7560b3cd29571b59200f486f8d5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = ``;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "85a63ed3354bdec3b92d7b28785b91d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ``; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e63bb1e32d23b6adbe44.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "fcce744397677d388cef47bcc28fe883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e769df38c92635c158ba\ntitle: Step 84\nchallengeType: 0\ndashedName: step-84\n--description--\nWhen the user has a calorie surplus, the remainingCalories value will be negative You don't want to display a negative number in the result string Math abs() is a built-in JavaScript method that will return the absolute value of a number js\nconst num = -5;\nMath abs(num); // 5\nIn your span text, wrap your remainingCalories reference in Math abs() to ensure that the value is positive --hints--\nYou should wrap the remainingCalories variable in Math abs() js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /Math\\ abs\\(\\s*remainingCalories\\s*\\)/);\nYour span should have the text ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\ toLowerCase\\(\\s*\\)\\}\"\\s*>\\$\\{Math\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "4358add94eecddbfe792caf0e7c016f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "absolute value of a number js const num = -5; Math abs(num); // 5 In your span text, wrap your remainingCalories reference in Math abs() to ensure that the value is positive --hints-- You should wrap the remainingCalories variable in Math abs() js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /Math\\ abs\\(\\s*remainingCalories\\s*\\)/); Your span should have the text ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\ toLowerCase\\(\\s*\\)\\}\"\\s*>\\$\\{Math\\abs\\(\\s*remainingCalories\\s*\\)\\} Calorie \\$\\{surplusOrDeficit\\}<\\/span>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "d3ccbfcc598a3f30787ed6b46f1da9d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "3127a13bfb6659ec7288f9a286c0e851",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "b29209f4849d7fd0f392c3cc8c8b3c67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = <span class=\"${surplusOrDeficit toLowerCase()}\">${remainingCalories} Calorie ${surplusOrDeficit}</span>;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "1ee1c562ac41ab0f281fb7bc1c24af91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = <span class=\"${surplusOrDeficit toLowerCase()}\">${remainingCalories} Calorie ${surplusOrDeficit}</span>; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e769df38c92635c158ba.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "c55dc591838f2c3003a767c2fa356d40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e6b7c0303524af2d0bc2\ntitle: Step 83\nchallengeType: 0\ndashedName: step-83\n--description--\nGive your span the text remainingCalories Calorie surplusOrDeficit, using interpolation to replace remainingCalories and surplusOrDeficit with the appropriate variables --hints--\nYour span should have the text ${remainingCalories} Calorie ${surplusOrDeficit} js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<span\\s+class\\s*=\\s*\"\\$\\{surplusOrDeficit\\s*\\ toLowerCase\\(\\s*\\)\\}\"\\s*>\\s*\\$\\{remainingCalories\\} Calorie \\$\\{surplusOrDeficit\\}\\s*<\\/span>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7158,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ff75e0fbf71e43b3df5ae038253824ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7158,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e92e742e9a91f3a133c37c7faace85e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7158,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "355458b79d43dc329e4a9734dcc066bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = <span class=\"${surplusOrDeficit toLowerCase()}\"></span>;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7158,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "cf0ce124c8681a220b0b76cdcd19693c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = <span class=\"${surplusOrDeficit toLowerCase()}\"></span>; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7158,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e6b7c0303524af2d0bc2.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "0a9254b639eca38cd698a1269b89ea0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e7d5b21eee2776ecc226\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nAfter your span element, add an hr element to create a horizontal line To keep your code clean and readable, you should add this on a new line in the template literal --hints--\nYou should add an hr element to your output innerHTML string js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<hr\\s*\\/ >/);\nYour hr element should come after your span element js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert isAbove(htmlString indexOf('<hr'), htmlString indexOf('<span'));\nYour hr element should be on a new line js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /\\n\\s*<hr\\s*\\/ >/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "1a52592b7bd9677da90a110d2b28e21e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ce003abb4c1b46469be834f1741c8bbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d094db7e0eb8505278a1d85742f137f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n`;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "93a60214d7e58b61f3d4d3feeed6e039",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} `; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e7d5b21eee2776ecc226.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a2cfe8d964df47b8c1be051ac62d6552",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e84c9fe8ca28c4101189\ntitle: Step 86\nchallengeType: 0\ndashedName: step-86\n--description--\nNow create a p element with the text budgetCalories Calories Budgeted, using interpolation to replace budgetCalories with the appropriate variable This should come after your hr element --hints--\nYou should create a p element js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /<p>/);\nYour p element should come after your hr element js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert isAbove(htmlString indexOf('<p'), htmlString indexOf('<hr'));\nYour p element should be on a new line js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert match(htmlString, /\\n\\s*<p/);\nYour p element should have the text ${budgetCalories} Calories Budgeted js\nconst htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1];\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a44bbe9e603290171bb2f9b00fa10ded",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "create a p element js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /<p>/); Your p element should come after your hr element js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert isAbove(htmlString indexOf('<p'), htmlString indexOf('<hr')); Your p element should be on a new line js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assert match(htmlString, /\\n\\s*<p/); Your p element should have the text ${budgetCalories} Calories Budgeted js const htmlString = code split(/output\\s*\\ \\s*innerHTML\\s*=\\s*/)[1] split(/`/)[1]; assertmatch(htmlString, /<p>\\$\\{budgetCalories\\}\\s*Calories\\s*Budgeted<\\/p>/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2afeed674c8db078c5547d76808736e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "9ca7fa9bd991df88674013fb7c65d1ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "5a0996f240486a7be94a05e229891bac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n`;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "f9fe220857e6312e767074c28cc3e814",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} `; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e84c9fe8ca28c4101189.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "d42667add2950dc06124ccb73bd6017a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e8fe3a6f022a05a04675\ntitle: Step 87\nchallengeType: 0\ndashedName: step-87\n--description--\nUsing the same interpolation syntax, add a second p element with the text consumedCalories Calories Consumed and a third with the text exerciseCalories Calories Burned Remember to replace your consumedCalories and exerciseCalories variables with the appropriate values --hints--\nYou should add a second p element to your template literal ```js\nconst entryDropdownElement = document getElementById('entry-dropdown');\nbudgetNumberInput value = 2000;\naddEntry();\nconst breakfastValueElement = document getElementById(\"breakfast-1-calories\");\nbreakfastValueElement value = 300;\nentryDropdownElement value = \"lunch\";\naddEntry();\nconst lunchValueElement = document getElementById(\"lunch-1-calories\");\nlunchValueElement value = 600;\nentryDropdownElement value = \"dinner\";\naddEntry();\nconst dinnerValueElement = document getElementById(\"dinner-1-calories\");\ndinnerValueElement value = 700;\nentryDropdownElement value = \"snacks\";\naddEntry();\nconst snacksValueElement = document getElementById(\"snacks-1-calories\");\nsnacksValueElement value = 200;\nentryDropdownElement value = \"exercise\";\naddEntry();\nconst exerciseValueElement = document getElementById(\"exercise-1-calories\");\nexerciseValueElement value = 300;\nconst fakeEvent = { preventDefault: () => {} };\ncalculateCalories(fakeEvent);\nconst output = document getElementById('output');\nassert isAtLeast(output children length, 4);\n```\nYour second p element should have the text ${consumedCalories} Calories Consumed ```js\nconst entryDropdownElement = document getElementById('entry-dropdown');\nbudgetNumberInput value = 2000;\naddEntry();\nconst breakfastValueElement = document getElementById(\"breakfast-1-calories\");\nbreakfastValueElement value = 300;\nentryDropdownElement value = \"lunch\";\naddEntry();\nconst lunchValueElement = document getElementById(\"lunch-1-calories\");\nlunchValueElement value = 600;\nentryDropdownElement value = \"dinner\";\naddEntry();\nconst dinnerValueElement = document getElementById(\"dinner-1-calories\");\ndinnerValueElement value = 700;\nentryDropdownElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "e1aa347d78473fe32eaf8d2877c4ba8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "() => {} }; calculateCalories(fakeEvent); const output = document getElementById('output'); assert isAtLeast(output children length, 4); ``` Your second p element should have the text ${consumedCalories} Calories Consumed ```js const entryDropdownElement = document getElementById('entry-dropdown'); budgetNumberInput value = 2000; addEntry(); const breakfastValueElement = document getElementById(\"breakfast-1-calories\"); breakfastValueElement value = 300; entryDropdownElement value = \"lunch\"; addEntry(); const lunchValueElement = document getElementById(\"lunch-1-calories\"); lunchValueElement value = 600; entryDropdownElement value = \"dinner\"; addEntry(); const dinnerValueElement = document getElementById(\"dinner-1-calories\"); dinnerValueElement value = 700; entryDropdownElementvalue = \"snacks\";\naddEntry();\nconst snacksValueElement = document getElementById(\"snacks-1-calories\");\nsnacksValueElement value = 200;\nentryDropdownElement value = \"exercise\";\naddEntry();\nconst exerciseValueElement = document getElementById(\"exercise-1-calories\");\nexerciseValueElement value = 300;\nconst fakeEvent = { preventDefault: () => {} };\ncalculateCalories(fakeEvent);\nassert strictEqual(output children[3] innerText,\"1800 Calories Consumed\");\ndinnerValueElement value = 300;\ncalculateCalories(fakeEvent);\nassert strictEqual(output children[3] innerText,\"1400 Calories Consumed\");\n```\nYou should add a third p element to your template literal ```js\nconst entryDropdownElement = document getElementById('entry-dropdown');\nbudgetNumberInput value = 2000;\naddEntry();\nconst breakfastValueElement = document getElementById(\"breakfast-1-calories\");\nbreakfastValueElement value = 300;\nentryDropdownElement value = \"lunch\";\naddEntry();\nconst lunchValueElement = document getElementById(\"lunch-1-calories\");\nlunchValueElement value = 600;\nentryDropdownElement value = \"dinner\";\naddEntry();\nconst dinnerValueElement = document getElementById(\"dinner-1-calories\");\ndinnerValueElement value = 700;\nentryDropdownElement value = \"snacks\";\naddEntry();\nconst snacksValueElement = document getElementById(\"snacks-1-calories\");\nsnacksValueElement value = 200;\nentryDropdownElement value = \"exercise\";\naddEntry();\nconst exerciseValueElement = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "be2f0b0bc55fbe575c6ab7ad60449812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "element to your template literal ```js const entryDropdownElement = document getElementById('entry-dropdown'); budgetNumberInput value = 2000; addEntry(); const breakfastValueElement = document getElementById(\"breakfast-1-calories\"); breakfastValueElement value = 300; entryDropdownElement value = \"lunch\"; addEntry(); const lunchValueElement = document getElementById(\"lunch-1-calories\"); lunchValueElement value = 600; entryDropdownElement value = \"dinner\"; addEntry(); const dinnerValueElement = document getElementById(\"dinner-1-calories\"); dinnerValueElement value = 700; entryDropdownElement value = \"snacks\"; addEntry(); const snacksValueElement = document getElementById(\"snacks-1-calories\"); snacksValueElement value = 200; entryDropdownElement value = \"exercise\"; addEntry(); const exerciseValueElement = documentgetElementById(\"exercise-1-calories\");\nexerciseValueElement value = 300;\nconst fakeEvent = { preventDefault: () => {} };\ncalculateCalories(fakeEvent);\nassert lengthOf(output children,5);\n```\nYour third p element should have the text ${exerciseCalories} Calories Burned ```js\nconst entryDropdownElement = document getElementById('entry-dropdown');\nbudgetNumberInput value = 2000;\naddEntry();\nconst breakfastValueElement = document getElementById(\"breakfast-1-calories\");\nbreakfastValueElement value = 300;\nentryDropdownElement value = \"lunch\";\naddEntry();\nconst lunchValueElement = document getElementById(\"lunch-1-calories\");\nlunchValueElement value = 600;\nentryDropdownElement value = \"dinner\";\naddEntry();\nconst dinnerValueElement = document getElementById(\"dinner-1-calories\");\ndinnerValueElement value = 700;\nentryDropdownElement value = \"snacks\";\naddEntry();\nconst snacksValueElement = document getElementById(\"snacks-1-calories\");\nsnacksValueElement value = 200;\nentryDropdownElement value = \"exercise\";\naddEntry();\nconst exerciseValueElement = document getElementById(\"exercise-1-calories\");\nexerciseValueElement value = 300;\nconst fakeEvent = { preventDefault: () => {} };\ncalculateCalories(fakeEvent);\nassert strictEqual(output children[4] innerText,\"300 Calories Burned\");\nexerciseValueElement value = Math floor(Math random() * 500);\ncalculateCalories(fakeEvent);\nassert strictEqual(output children[4]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "7f246692c932c061cc2e97a4981029c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "document getElementById(\"lunch-1-calories\"); lunchValueElement value = 600; entryDropdownElement value = \"dinner\"; addEntry(); const dinnerValueElement = document getElementById(\"dinner-1-calories\"); dinnerValueElement value = 700; entryDropdownElement value = \"snacks\"; addEntry(); const snacksValueElement = document getElementById(\"snacks-1-calories\"); snacksValueElement value = 200; entryDropdownElement value = \"exercise\"; addEntry(); const exerciseValueElement = document getElementById(\"exercise-1-calories\"); exerciseValueElement value = 300; const fakeEvent = { preventDefault: () => {} }; calculateCalories(fakeEvent); assert strictEqual(output children[4] innerText,\"300 Calories Burned\"); exerciseValueElement value = Math floor(Math random() * 500); calculateCalories(fakeEvent); assert strictEqual(output children[4]innerText, exerciseValueElement value toString() + \" Calories Burned\");\n```\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "3754d60614ab8d13c50f5a88973288e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "117a54a3461f413a4d85cab31a02cedc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "05f1cdd2fb130338e9f101e4942e546c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\n--fcc-editable-region--\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n`;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "fb9d112ece0a7f48df48c332dceae2a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } --fcc-editable-region-- const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted `; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e8fe3a6f022a05a04675.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "4807c26636658cccaf57d88d54605592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9e94e9df7d72aed1c24bd\ntitle: Step 88\nchallengeType: 0\ndashedName: step-88\n--description--\nFinally, you need to make the #output element visible so the user can see your text Your output variable is an Element, which has a classList property This property has a remove() method, which accepts a string representing the class to remove from the element js\nconst paragraphElement = document getElementById('paragraph');\nparagraphElement classList remove('hide');\nUse the remove() method of the output variable's classList property to remove the hide class Don't forget to place the word hide inside quotes --hints--\nYou should access the classList property of the output element js\nassert match(calculateCalories toString(), /output\\ classList/);\nYou should call the remove() method of the classList property js\nassert match(calculateCalories toString(), /output\\ classList\\ remove\\(/);\nYou should pass hide as the argument to the remove() method js\nassert match(calculateCalories toString(), /output\\ classList\\ remove\\(\\s*('|\")hide\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c23d7a92c4a221e9d9a3e766be11912b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0f2b139a7e29d822e112dbbc13f88472",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\n--fcc-editable-region--\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "63d06cba076b6b45ec568251bb89ad87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } --fcc-editable-region-- function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\n}\n--fcc-editable-region--\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "56a3ed1082718ea5461129e1bef2ab1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; } --fcc-editable-region-- function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9e94e9df7d72aed1c24bd.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9bebd17c1916c24f8177a4fe30ee9e44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9ea23dbadbf2c2764e3f5\ntitle: Step 89\nchallengeType: 0\ndashedName: step-89\n--description--\nIf you click on your Calculate Remaining Calories button, you'll see that nothing happens You still need to mount the event listener Add an event listener to your calorieCounter element The event type should be submit, and the callback function should be calculateCalories --hints--\nYou should use the addEventListener() method of your calorieCounter element js\nassert match(code, /calorieCounter\\ addEventListener\\(/);\nYou should pass submit as the first argument to addEventListener() js\nassert match(code, /calorieCounter\\ addEventListener\\(\\s*('|\")submit\\1\\s*/);\nYou should pass calculateCalories as the second argument to addEventListener() js\nassert match(code, /calorieCounter\\ addEventListener\\(\\s*('|\")submit\\1\\s*,\\s*calculateCalories\\s*/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "374f3ab9344fae757c018ad9ddcd6481",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "fe0d90e7e6af374c5a4535e35b01ea70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8cf58b93c097191ef751787e8ae9927b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "94c887792385eb1a3c44901422fa7b08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\naddEntryButton addEventListener(\"click\", addEntry);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea23dbadbf2c2764e3f5.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "bc75edb18bc21be7e299aa7936d7ea90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9ea9b16430f2d54522464\ntitle: Step 90\nchallengeType: 0\ndashedName: step-90\n--description--\nYour final feature to add is the ability for a user to clear the form Start by declaring an empty function called clearForm – it should not take any arguments --hints--\nYou should declare a clearForm variable js\nassert isDefined(clearForm);\nYour clearForm variable should be a function js\nassert isFunction(clearForm);\nYour clearForm function should not take any arguments js\nassert match(clearForm toString(), /\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e2e9a814b5e09782613a54e067e8b2c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 12em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9f31acd28612dc1ed3fb9e8ce09153ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = documentquerySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d4ef511116f633faf7d67fc413a9e9b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classListremove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ea9b16430f2d54522464.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "aeda48f4c9e1b1a5cacb42d9cd0a4834",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9eb09bcfaa72e3da820a1\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nYou need to get all of the input containers Declare an inputContainers variable, and assign it to the value of querying the document for all elements with the class input-container --hints--\nYou should declare an inputContainers variable in your clearForm function js\nassert match(clearForm toString(), /inputContainers\\s*=/);\nYou should use the querySelectorAll method to get all of the elements with the class input-container js\nassert match(clearForm toString(), /document\\ querySelectorAll\\(\\s*('|\")\\ input-container\\1\\s*\\)/);\nYou should assign the value of the querySelectorAll method to the inputContainers variable js\nassert match(clearForm toString(), /inputContainers\\s*=\\s*document\\ querySelectorAll\\(\\s*('|\")\\ input-container\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6c30c887c6a5d83bb4f6cc48ef051200",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "762e290c8e5e788abda5d1c271401f9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6767ad3e734217e0713f3d2435cafb1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5cfbf01c29af44c3bdc0753b6d7104f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb09bcfaa72e3da820a1.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9a56c50ce13df449126b2b029d4c5ec6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9ebb7b12bca3025b0a935\ntitle: Step 93\nchallengeType: 0\ndashedName: step-93\n--description--\nIt is time for another loop Create a for of loop with a variable called container to iterate through the inputContainers array Inside the loop, set the innerHTML property of the container to an empty string This will clear all of the contents of that input container --hints--\nYour for of loop should iterate through the inputContainers array The loop's variable name should be container js\nconst clearForm = code split(\"function clearForm()\")[1];\nassert match(clearForm, /for\\s*\\(\\s*(const|let|var)\\s+container\\s+of\\s+inputContainers\\s*\\)/);\nYour for of loop should set the innerHTML property of container to an empty string js\nconst clearForm = code split(\"function clearForm()\")[1];\nconst forOfLoop = clearForm split(\"for\")[1];\nassert match(forOfLoop, /container\\s*\\ \\s*innerHTML\\s*=\\s*(`|'|\")\\1\\s*/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ac9510ec53f9c6a9870409594d69c4eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ba82d7478eb9edcf2766832625cf85f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "00f5753a7a0df360b9c33758e8852b4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e1ea9e503cc5ff8e24a10b3c57779e28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ebb7b12bca3025b0a935.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c42c7df87a5653b38c954541f3856f5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9eb4a5d68f12f32d9b440\ntitle: Step 92\nchallengeType: 0\ndashedName: step-92\n--description--\nRemember that document querySelectorAll returns a NodeList, which is array-like but is not an array However, the Array object has a from() method that accepts an array-like and returns an array This is helpful when you want access to more robust array methods, which you will learn about in a future project The following example takes a NodeList of li elements and converts it to an array of li elements:\n```html\nList 1\nList 2\nList 3\n```\n```js\nconst listItemsArray = Array from(document querySelectorAll('li'));\nconsole log(listItemsArray); //Output: (3) [li, li, li]\n```\nWrap your inputContainers query selector in Array from() Do this on the same line as your declaration --hints--\nYou should wrap your querySelectorAll in Array from() js\nassert match(clearForm, /Array\\ from\\(\\s*document\\ querySelectorAll\\(\\s*('|\")\\ input-container*\\1\\s*\\)\\s*\\)/);\nYou should assign the result of Array from() to your inputContainers variable js\nassert match(clearForm, /inputContainers\\s*=\\s*Array\\ from\\(\\s*document\\ querySelectorAll\\(\\s*('|\")\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "5f13b6751878ab0dac26867076b26027",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "li elements: ```html List 1 List 2 List 3 ``` ```js const listItemsArray = Array from(document querySelectorAll('li')); console log(listItemsArray); //Output: (3) [li, li, li] ``` Wrap your inputContainers query selector in Array from() Do this on the same line as your declaration --hints-- You should wrap your querySelectorAll in Array from() js assert match(clearForm, /Array\\ from\\(\\s*document\\ querySelectorAll\\(\\s*('|\")\\ input-container*\\1\\s*\\)\\s*\\)/); You should assign the result of Array from() to your inputContainers variable js assert match(clearForm, /inputContainers\\s*=\\s*Array\\ from\\(\\s*document\\ querySelectorAll\\(\\s*('|\")\\input-container*\\1\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "58f005d683a2acba0cbda777d40565f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "16e0794fd3294f843172442a3d0eb552",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "d42e6d18336e57145336aae09d638e3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "db52cc6afe2291bce3de123a27fc586b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\nconst inputContainers = document querySelectorAll(' input-container');\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9eb4a5d68f12f32d9b440.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "df93508904572c782a51958e0743bc56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9ec044acedf312c4974ff\ntitle: Step 94\nchallengeType: 0\ndashedName: step-94\n--description--\nAfter your loop completes, you need to clear the budgetNumberInput Set the value property of budgetNumberInput to an empty string --hints--\nYour clearForm function should access the value property of the budgetNumberInput element js\nassert match(clearForm toString(), /budgetNumberInput\\ value/);\nYour clearForm function should set the value property of the budgetNumberInput element to an empty string js\nassert match(clearForm toString(), /budgetNumberInput\\ value\\s*=\\s*('|\"|`)\\1/);\nYou should modify the budgetNumberInput after your for loop js\nconst clearForm = code split(\"function clearForm()\")[1];\nconst afterLoop = clearForm split(\"}\")[1];\nassert match(afterLoop, /budgetNumberInput\\ value/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "502389affde9ae1706c2ba664231948d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6a8220347455118d436125f539e237cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "c3f3dc3c2ddabeb4decc832ad01a1ed8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "ae01bcabe0e59ed7b8c7f5233fcc4d61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\nfor (const container of inputContainers) {\ncontainer innerHTML = '';\n}\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9ec044acedf312c4974ff.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a350ddaa94b27c9ab7e65f2a9efc8833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9f24afbc9cf324dcaa9a4\ntitle: Step 95\nchallengeType: 0\ndashedName: step-95\n--description--\nYou also need to clear the output element's text You can do this by setting the innerText property to an empty string The difference between innerText and innerHTML is that innerText will not render HTML elements, but will display the tags and content as raw text --hints--\nYour clearForm function should access the innerText property of the output element js\nassert match(clearForm toString(), /output\\ innerText/);\nYour clearForm function should set the innerText property of the output element to an empty string js\nassert match(clearForm toString(), /output\\ innerText\\s*=\\s*('|\"|`)\\1/);\nYou should modify output after modifying budgetNumberInput js\nassert isAbove(clearForm toString() indexOf('output'), clearForm toString() indexOf('budgetNumberInput'));\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4ac7404d29e4ca0bcfa9b75b4544330f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1f386f54ea7bc4a9df9d66e5269dae7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a18b3572ac8527095910c6e18793df5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e80fe73ff5cfec18cd3d40b659f50c39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\nfor (const container of inputContainers) {\ncontainer innerHTML = '';\n}\nbudgetNumberInput value = '';\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f24afbc9cf324dcaa9a4.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "f1c092095b4f1797742cd3bbd15dde83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603ac77cd4899599a98a1fe.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 6603ac77cd4899599a98a1fe\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nNow it is time to test out your cleanInputString function Inside your cleanInputString function, add a console log() statement with two arguments The first argument should be the string \"original string: \" and the second argument should be the str parameter --hints--\nYou should have a console log(\"original string: \", str) statement inside your cleanInputString function Be mindful of spacing js\nassert match(cleanInputString toString(), /console\\ log\\(('|\")original\\s+string:\\s+\\1,\\s*str\\); /);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603ac77cd4899599a98a1fe.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7606e878e9f4f1b982dee6a0def8a5ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603ac77cd4899599a98a1fe.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "} h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; } output { border: 2px solid var(--light-grey); padding: 10px; text-align: center; }hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\n--fcc-editable-region--\n--fcc-editable-region--\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603ac77cd4899599a98a1fe.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f8cb077f3f88098118e3af4a2cc5971a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603aeb33cbbbd5bbbc79b2e.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 6603aeb33cbbbd5bbbc79b2e\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nTo see the results from the cleanInputString function, you will need to add a console log() statement Inside that console statement, call the cleanInputString function with the string value of \"+-99\" as an argument Open up the console and you should see the original string followed by the cleaned string value with the +- removed --hints--\nYou should have a console log(cleanInputString(\"+-99\")) statement js\nassert match(code, /console\\ log\\(\\s*cleanInputString\\(\\s*('|\")\\s*\\+\\-9\\s*9\\s*\\1\\s*\\)\\s*\\); /);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603aeb33cbbbd5bbbc79b2e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "746ba5776ddf798fa5980230fc137f96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603aeb33cbbbd5bbbc79b2e.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconsole log(\"original string: \", str);\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603aeb33cbbbd5bbbc79b2e.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3ee4047622da46332052d39b2a8a022a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9f28bda3e3f336e21b6b4\ntitle: Step 96\nchallengeType: 0\ndashedName: step-96\n--description--\nTo finish off this function, you need to restore the hide class to the output element The classList property has an add() method which is the opposite of the remove() method It accepts a string representing the class to add to the element Add the hide class to your output --hints--\nYou should access the classList property of the output element js\nassert match(clearForm toString(), /output\\ classList/);\nYou should call the add() method on the classList property of the output element js\nassert match(clearForm toString(), /output\\ classList\\ add/);\nYou should pass \"hide\" as the argument to the add() method js\nassert match(clearForm toString(), /output\\ classList\\ add\\(\\s*('|\")hide\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b9d89f7d37a6a1dca522629d78de4186",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "28856fce0f3ee0db74f0cdf7632c0a81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "962909930749509789b3eadd41ca70a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a62e89b53f78e71162f458e8b5ed4f77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\n--fcc-editable-region--\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\nfor (const container of inputContainers) {\ncontainer innerHTML = '';\n}\nbudgetNumberInput value = '';\noutput innerText = '';\n}\n--fcc-editable-region--\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter addEventListener(\"submit\", calculateCalories);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f28bda3e3f336e21b6b4.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e7c06ef7af11ee199c5ffa119e08157d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603b0bcba0eb95e5256b1e2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 6603b0bcba0eb95e5256b1e2\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nOnce you have finished testing your cleanInputString function, you can remove both of your console statements --hints--\nYou should not have a console log(cleanInputString(\"+-99\")); in your code js\nassert notMatch(code, /console\\ log\\(\\s*cleanInputString\\(\\s*('|\")\\s*\\+\\-9\\s*9\\s*\\1\\s*\\)\\s*\\); /)\nYou should not have a console log(\"original string: \", str); in your code js\nassert notMatch(cleanInputString toString(), /console\\ log\\(('|\")original\\s+string:\\s+\\1,\\s*str\\); /);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603b0bcba0eb95e5256b1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "90c2f4402a6772a6c0e1ff9bb5671ba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603b0bcba0eb95e5256b1e2.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\n--fcc-editable-region--\nfunction cleanInputString(str) {\nconsole log(\"original string: \", str);\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nconsole log(cleanInputString(\"+-99\"));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6603b0bcba0eb95e5256b1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "515c85839b2c375dda3f15196a406ce8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\660404511dbf1b90eb23b617.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 660404511dbf1b90eb23b617\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nNow it is time to test your isInvalidInput function For this test, you want to check if the function can detect scientific notation like 1e3 or 10e2 While this is a valid way to represent numbers, it is not a valid input for your calorie counter project Below your isInvalidInput function, add a console statement Inside that console statement, call the isInvalidInput function with an argument of \"1e3\" Open up the console to see the result In the next step, you will learn more about what that result means --hints--\nYou should have a console log below your isInvalidInput function js\nassert match(code, /console log\\(/);\nYour console statement should have the value of isInvalidInput(\"1e3\") ```js\nassert match(code, /console log(isInvalidInput(('|\")1e3\\s*\\1); )/);\n```\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4968,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\660404511dbf1b90eb23b617.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3b1822250e82040fcccb1435965fe632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\660404511dbf1b90eb23b617.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4968,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\660404511dbf1b90eb23b617.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "20fac6cc737a5c1809a43bd3c79d3a67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\66040ae710de0e96c26a0201.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 66040ae710de0e96c26a0201\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nWhen you open the console, you should see the result of null The match method returns null when no match is found In this case, the isInvalidInput function should return null when the input is a valid number without any scientific notation null in JavaScript is a special primitive that represents the intentional absence of a value In a boolean context, null is considered falsy which evaluates to false in a conditional statement Now that you have finished testing your isInvalidInput function, you can remove the console log statement --hints--\nYou should remove your console log(isInvalidInput(\"10\")); js\nassert notMatch(code, /console log\\(isInvalidInput\\(\"10\"\\)\\); /g)\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4899,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\66040ae710de0e96c26a0201.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2b409c069f4fa8e029cf53b130c8a18f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\66040ae710de0e96c26a0201.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nconsole log(isInvalidInput(\"10\"));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4899,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\66040ae710de0e96c26a0201.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "61a018e94ddfd848e132c8136a948df9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 6604080b66ff6e942d8225b1\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nWhen you open the console, you should see this result:\njs\n[ '1e3', index: 0, input: '1e3', groups: undefined ]\nThe match method returns an array with any matches found in the string Here is a complete breakdown of that information:\n\"1e3\" is the matched value against the /\\d+e\\d+/i regex index: 0 is the index of the matched value in the string input: '1e3' is the original string that was matched groups: undefined are the matched groups, which are not used in this case You will learn more about groups in a later project Now it is time to test for a valid input Update your console statement to the following: console log(isInvalidInput(\"10\")) Open up the console to see the result You will learn more about what this result means in the next step --hints--\nYou should have a console log below your isInvalidInput function js\nassert match(code, /console log\\(/);\nYour console statement should have the value of isInvalidInput(\"10\") ```js\nassert match(code, /console log(isInvalidInput(('|\")10\\s*\\1); )/);\n```\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3ec26282ccadad9096e31d3c0b2edcac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "isInvalidInput(\"10\") ```js assert match(code, /console log(isInvalidInput(('|\")10\\s*\\1); )/); ``` --seed-- --seed-contents-- ```html Calorie Counter Calorie Counter Budget Breakfast Lunch Dinner Snacks Exercise Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; }container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8660f5599b8ff3232c0992c41bb525ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "solid var(--light-grey); padding: 10px; text-align: center; } hide { display: none; } output span { font-weight: bold; font-size: 1 2em; } surplus { color: var(--light-pink); } deficit { color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return strreplace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\nconsole log(isInvalidInput(\"1e3\"));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\6604080b66ff6e942d8225b1.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dfca2a79cfdc5c2105524a42de92550a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\670ea2c4f42def724c77e3c7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 670ea2c4f42def724c77e3c7\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nNow you need to retrieve the value of entryDropdown value to get the currently selected option from the dropdown Print entryDropdown value to the console to see its value Since entryDropdown value is in a static context (outside of an event listener), it only shows the value at the moment the code runs This means it won't automatically update as the user interacts with the dropdown It will capture the initial value (in this case, \"breakfast\") and won't reflect any changes the user makes afterward --hints--\nYou should use console log(entryDropdown value) to get the value of entryDropdown\njs\nassert match(code, /console\\ log\\([^\\)]*entryDropdown\\ value[^\\)]*\\)/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\670ea2c4f42def724c77e3c7.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7a7606e5d79082edf8cd0c61a7b9d808",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\670ea2c4f42def724c77e3c7.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\670ea2c4f42def724c77e3c7.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8a65676ace20dfee937614e147a7dbe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642ddfdea4200e313f80a4b6.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642ddfdea4200e313f80a4b6\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nRemember that the document object has a .createElement() method which allows you to dynamically create new HTML elements.\nIn your createLabel function, declare a label variable and assign it a new div element.\n--hints--\nYou should declare a label variable in your createLabel function.\njs\nassert.match(code, /const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>\\s*\\{\\s*(?:const|let|var)\\s+label/);\nYour label variable should be declared with const.\njs\nassert.match(code, /const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>\\s*\\{\\s*const\\s+label/);\nYou should use the .createElement() method of the document object.\njs\nassert.match(code, /document\\.createElement\\(/);\nYou should pass the string \"div\" to the .createElement() method.\njs\nassert.match(code, /document\\.createElement\\(\\s*('|\"|`)div\\1\\s*\\)/);\nYou should assign your new div element to label.\njs\nassert.match(code, /const\\s+label\\s*=\\s*document\\.createElement\\(\\s*('|\"|`)div\\1\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1986,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642ddfdea4200e313f80a4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b692b8a24bc72fbda45010446adf5737",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642def66e6a60432c9a0371e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642def66e6a60432c9a0371e\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nSet the className of the label element to \"label\", and set the textContent to the name parameter.\n--hints--\nYou should access the className property of the label element.\njs\nassert.match(code, /label\\.className/);\nYou should set the className property to the string \"label\".\njs\nassert.match(code, /label\\.className\\s*=\\s*('|\"|`)label\\1/);\nYou should access the textContent property of the label element.\njs\nassert.match(code, /label\\.textContent/);\nYou should set the textContent property to the value of name.\njs\nassert.match(code, /label\\.textContent\\s*=\\s*name/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642def66e6a60432c9a0371e.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d1cb4575c92fc32c5b57c758650b7e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642db8c409d9991d0b3b2f0d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642db8c409d9991d0b3b2f0d\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nYour project starts with a basic HTML container and some corresponding CSS Your first task will be to programmatically generate the cells for your spreadsheet The global window object represents the browser window (or tab) It has an onload property which allows you to define behavior when the window has loaded the entire page, including stylesheets and scripts Start by setting the onload property of window to an arrow function with no parameters In the function, declare a container variable and assign it the value of getting the element by the id of \"container\" --hints--\nYou should access the onload property of the window object js\nassert match(code, /window\\ onload/);\nYou should set the onload property to a function js\nassert isFunction(window onload);\nYou should use arrow syntax js\nassert match(code, /window\\ onload\\s*=\\s*\\(/);\nYour onload function should not take any parameters js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)/);\nYou should declare a container variable in your onload function js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*( :let|var|const)\\s+container/);\nYour container variable should be declared with const js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container/);\nYou should use document getElementById()\njs\nassert match(code, /document\\ getElementById\\(/);\nYou should get the element with the id of \"container\" js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)/);\nYou should assign the #container element to container js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642db8c409d9991d0b3b2f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4c63223cd493b02d0703b500c318c840",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642db8c409d9991d0b3b2f0d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "not take any parameters js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)/); You should declare a container variable in your onload function js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*( :let|var|const)\\s+container/); Your container variable should be declared with const js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container/); You should use document getElementById() js assert match(code, /document\\ getElementById\\(/); You should get the element with the id of \"container\" js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)/); You should assign the #container element to container js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)container\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642db8c409d9991d0b3b2f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "501055d5099853b2071c8dc1bf2fcfa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df32c0c2db433d8b46d46.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642df32c0c2db433d8b46d46\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nFinally, use the .appendChild() method to add your label element to the container element.\n--hints--\nYou should access the .appendChild() method of the container element.\njs\nassert.match(code, /container\\.appendChild\\(/);\nYou should pass your label element to the .appendChild() method.\njs\nassert.match(code, /container\\.appendChild\\(\\s*label\\s*\\)/);\nYou should append label after setting the attributes.\njs\nassert.match(code, /const\\s+label\\s*=\\s*document\\.createElement\\(\\s*('|\"|`)div\\1\\s*\\)\\s*;?\\s*label\\.className\\s*=\\s*('|\"|`)label\\2\\s*;?\\s*label\\.textContent\\s*=\\s*name\\s*;?\\s*container\\.appendChild\\(\\s*label\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df32c0c2db433d8b46d46.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "361a0c4b16bf01d36cd93bb91c5c589f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dfb07e7fa6736251541c8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642dfb07e7fa6736251541c8\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nYour array will need to be the size of the range. You can calculate this by finding the difference between end and start, and adding 1 to the result.\nPass this calculation as the argument for your Array() constructor.\n--hints--\nYou should subtract start from end.\njs\nassert.match(code, /end\\s*-\\s*start/);\nYou should add 1 to your end - start calculation.\njs\nassert.match(code, /end\\s*-\\s*start\\s*\\+\\s*1/);\nYou should pass your calculation to the Array() constructor.\njs\nassert.match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst range = (start, end) => Array();\n--fcc-editable-region--\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1781,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dfb07e7fa6736251541c8.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a78a9e4c90addc110064be3258812474",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e0011c45c893845842058.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642e0011c45c893845842058\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nThe Array() constructor has a .fill() method which can be used to fill an array with a value. You can use this to fill your array with the start value.\nChain the .fill() method to your Array() constructor, and pass it the start value.\n--hints--\nYou should use the .fill() method.\njs\nassert.match(code, /\\.fill\\(/);\nYou should call the .fill() method on your Array() constructor.\njs\nassert.match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\.fill\\(/);\nYou should pass start to the .fill() method.\njs\nassert.match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\.fill\\(\\s*start\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1);\n--fcc-editable-region--\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e0011c45c893845842058.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a632f8c12af22e2c296c6903e001af37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "id: 63c9f2bff625af342023512c\ntitle: Step 97\nchallengeType: 0\ndashedName: step-97\n--description--\nTo complete this project, add an event listener to the clearButton button When the button is clicked, it should call the clearForm function Congratulations Your project is complete --hints--\nYou should add an event listener to the clearButton button js\nassert match(code, /clearButton\\s*\\ addEventListener\\s*\\(/);\nYou should pass \"click\" as the first argument to addEventListener() js\nassert match(code, /clearButton\\s*\\ addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*/);\nYou should pass clearForm as the second argument to addEventListener() js\nassert match(code, /clearButton\\s*\\ addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,\\s*clearForm\\s*\\)\\s*; \\s*/);\n--seed--\n--seed-contents--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "f7b6ea4ea4ee8fd224a3c96e82c6b2b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "Add food or exercise: Breakfast Lunch Dinner Snacks Exercise Add Entry Calculate Remaining Calories Clear ``` ```css :root { --light-grey: #f5f6f7; --dark-blue: #0a0a23; --fcc-blue: #1b1b32; --light-yellow: #fecc4c; --dark-yellow: #feac32; --light-pink: #ffadad; --dark-red: #850000; --light-green: #acd157; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; }input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n} output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "6bf34ffe0f4a168b73f2ccea4e08fe4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "color: var(--light-green); } ``` ```js const calorieCounter = document getElementById('calorie-counter'); const budgetNumberInput = document getElementById('budget'); const entryDropdown = document getElementById('entry-dropdown'); const addEntryButton = document getElementById('add-entry'); const clearButton = document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown value}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "261ff9a63ce89ffd90723275d62af82e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainerquerySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdown value}-${entryNumber}-calories\" placeholder=\"Calories\" />; targetInputContainer insertAdjacentHTML('beforeend', HTMLString); } function calculateCalories(e) { e preventDefault(); isError = false; const breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\"); const lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\"); const dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = documentquerySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math abs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "32db3ac06d6ed858e7f6505f7ca166fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Math abs(remainingCalories)} Calorie ${surplusOrDeficit} ${budgetCalories} Calories Budgeted ${consumedCalories} Calories Consumed ${exerciseCalories} Calories Burned `; output classList remove('hide'); } function getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\nfor (const container of inputContainers) {\ncontainer innerHTML = '';\n}\nbudgetNumberInput value = '';\noutput innerText = '';\noutput classList add('hide');\n}\naddEntryButton addEventListener(\"click\", addEntry);\ncalorieCounter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "97222a68a65b5216dad7ad916abb356e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "getCaloriesFromInputs(list) { let calories = 0; for (const item of list) { const currVal = cleanInputString(itemvalue); const invalidInputMatch = isInvalidInput(currVal); if (invalidInputMatch) { alert(`Invalid Input: ${invalidInputMatch[0]}`); isError = true; return null; } calories += Number(currVal); } return calories; } function clearForm() { const inputContainers = Array from(document querySelectorAll(' input-container')); for (const container of inputContainers) { container innerHTML = ''; } budgetNumberInput value = ''; output innerText = ''; output classList add('hide'); } addEntryButton addEventListener(\"click\", addEntry); calorieCounteraddEventListener(\"submit\", calculateCalories);\n--fcc-editable-region--\n--fcc-editable-region--\n```\n--solutions--\n```html\nCalorie Counter\nCalorie Counter\nBudget\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd food or exercise:\nBreakfast\nLunch\nDinner\nSnacks\nExercise\nAdd Entry\nCalculate Remaining Calories\nClear\n```\n```css\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #0a0a23;\n--fcc-blue: #1b1b32;\n--light-yellow: #fecc4c;\n--dark-yellow: #feac32;\n--light-pink: #ffadad;\n--dark-red: #850000;\n--light-green: #acd157;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--fcc-blue);\ncolor: var(--light-grey);\n}\nh1 {\ntext-align: center;\n} container {\nwidth: 90%;\nmax-width: 680px;\n}\nh1, container, output {\nmargin: 20px auto;\n}\nlabel,\nlegend {\nfont-weight: bold;\n} input-container {\ndisplay: flex;\nflex-direction: column;\n}\nbutton {\ncursor: pointer;\ntext-decoration: none;\nbackground-color: var(--light-yellow);\nborder: 2px solid var(--dark-yellow);\n}\nbutton,\ninput,\nselect {\nmin-height: 24px;\ncolor: var(--dark-blue);\n}\nfieldset,\nlabel,\nbutton,\ninput,\nselect {\nmargin-bottom: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "bcc82c235085171cfd86c19fc23bd5f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--fcc-blue); color: var(--light-grey); } h1 { text-align: center; } container { width: 90%; max-width: 680px; } h1, container, output { margin: 20px auto; } label, legend { font-weight: bold; } input-container { display: flex; flex-direction: column; } button { cursor: pointer; text-decoration: none; background-color: var(--light-yellow); border: 2px solid var(--dark-yellow); } button, input, select { min-height: 24px; color: var(--dark-blue); } fieldset, label, button, input, select { margin-bottom: 10px; }output {\nborder: 2px solid var(--light-grey);\npadding: 10px;\ntext-align: center;\n} hide {\ndisplay: none;\n} output span {\nfont-weight: bold;\nfont-size: 1 2em;\n} surplus {\ncolor: var(--light-pink);\n} deficit {\ncolor: var(--light-green);\n}\n```\n```js\nconst calorieCounter = document getElementById('calorie-counter');\nconst budgetNumberInput = document getElementById('budget');\nconst entryDropdown = document getElementById('entry-dropdown');\nconst addEntryButton = document getElementById('add-entry');\nconst clearButton = document getElementById('clear');\nconst output = document getElementById('output');\nlet isError = false;\nfunction cleanInputString(str) {\nconst regex = /[+-\\s]/g;\nreturn str replace(regex, '');\n}\nfunction isInvalidInput(str) {\nconst regex = /\\d+e\\d+/i;\nreturn str match(regex);\n}\nfunction addEntry() {\nconst targetInputContainer = document querySelector(#${entryDropdown value} input-container);\nconst entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1;\nconst HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label>\n<input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" />\n<label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label>\n<input\ntype=\"number\"\nmin=\"0\"\nid=\"${entryDropdown",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "bdf24555fbcef8ea19242b1f1f7d5299",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "= document getElementById('clear'); const output = document getElementById('output'); let isError = false; function cleanInputString(str) { const regex = /[+-\\s]/g; return str replace(regex, ''); } function isInvalidInput(str) { const regex = /\\d+e\\d+/i; return str match(regex); } function addEntry() { const targetInputContainer = document querySelector(#${entryDropdown value} input-container); const entryNumber = targetInputContainer querySelectorAll('input[type=\"text\"]') length + 1; const HTMLString = <label for=\"${entryDropdown value}-${entryNumber}-name\">Entry ${entryNumber} Name</label> <input type=\"text\" id=\"${entryDropdown value}-${entryNumber}-name\" placeholder=\"Name\" /> <label for=\"${entryDropdown value}-${entryNumber}-calories\">Entry ${entryNumber} Calories</label> <input type=\"number\" min=\"0\" id=\"${entryDropdownvalue}-${entryNumber}-calories\"\nplaceholder=\"Calories\"\n/>;\ntargetInputContainer insertAdjacentHTML('beforeend', HTMLString);\n}\nfunction calculateCalories(e) {\ne preventDefault();\nisError = false;\nconst breakfastNumberInputs = document querySelectorAll(\"#breakfast input[type='number']\");\nconst lunchNumberInputs = document querySelectorAll(\"#lunch input[type='number']\");\nconst dinnerNumberInputs = document querySelectorAll(\"#dinner input[type='number']\");\nconst snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\");\nconst exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\");\nconst breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs);\nconst lunchCalories = getCaloriesFromInputs(lunchNumberInputs);\nconst dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs);\nconst snacksCalories = getCaloriesFromInputs(snacksNumberInputs);\nconst exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs);\nconst budgetCalories = getCaloriesFromInputs([budgetNumberInput]);\nif (isError) {\nreturn;\n}\nconst consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories;\nconst remainingCalories = budgetCalories - consumedCalories + exerciseCalories;\nconst surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit';\noutput innerHTML = `\n${Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "fc202457020879d34f6debff48ba2297",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
    "source_type": "git_repo",
    "title": "Calorie Counter",
    "content": "document querySelectorAll(\"#dinner input[type='number']\"); const snacksNumberInputs = document querySelectorAll(\"#snacks input[type='number']\"); const exerciseNumberInputs = document querySelectorAll(\"#exercise input[type='number']\"); const breakfastCalories = getCaloriesFromInputs(breakfastNumberInputs); const lunchCalories = getCaloriesFromInputs(lunchNumberInputs); const dinnerCalories = getCaloriesFromInputs(dinnerNumberInputs); const snacksCalories = getCaloriesFromInputs(snacksNumberInputs); const exerciseCalories = getCaloriesFromInputs(exerciseNumberInputs); const budgetCalories = getCaloriesFromInputs([budgetNumberInput]); if (isError) { return; } const consumedCalories = breakfastCalories + lunchCalories + dinnerCalories + snacksCalories; const remainingCalories = budgetCalories - consumedCalories + exerciseCalories; const surplusOrDeficit = remainingCalories < 0 'Surplus' : 'Deficit'; output innerHTML = ` ${Mathabs(remainingCalories)} Calorie ${surplusOrDeficit}\n${budgetCalories} Calories Budgeted\n${consumedCalories} Calories Consumed\n${exerciseCalories} Calories Burned\n`;\noutput classList remove('hide');\n}\nfunction getCaloriesFromInputs(list) {\nlet calories = 0;\nfor (const item of list) {\nconst currVal = cleanInputString(item value);\nconst invalidInputMatch = isInvalidInput(currVal);\nif (invalidInputMatch) {\nalert(`Invalid Input: ${invalidInputMatch[0]}`);\nisError = true;\nreturn null;\n}\ncalories += Number(currVal);\n}\nreturn calories;\n}\nfunction clearForm() {\nconst inputContainers = Array from(document querySelectorAll(' input-container'));\nfor (const container of inputContainers) {\ncontainer innerHTML = '';\n}\nbudgetNumberInput value = '';\noutput innerText = '';\noutput classList add('hide');\n}\naddEntryButton addEventListener('click', addEntry);\ncalorieCounter addEventListener('submit', calculateCalories);\nclearButton addEventListener('click', clearForm);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-form-validation-by-building-a-calorie-counter\\63c9f2bff625af342023512c.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "ba4b4536e93eba55b04944e9af830847",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df9df4b5216350de7b0d2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642df9df4b5216350de7b0d2\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nYou will need a function to generate a range of numbers Declare an empty range function which takes a start and end parameter Use the Array() constructor and implicitly return an empty array --hints--\nYou should declare a range variable js\nassert match(code, /( :let|var|const)\\s+range/);\nYou should use const to declare your range variable js\nassert match(code, /const\\s+range/);\nYour range variable should be a function js\nassert isFunction(range);\nYour range function should use arrow syntax js\nassert match(code, /const\\s+range\\s*=\\s*\\( *\\)\\s*=>/);\nYour range function should take a start parameter first js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start/)\nYour range function should take an end parameter second js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)/);\nYour range function should use an implicit return Remember that this means you will not use curly brackets js\nassert notMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*{/);\nYour range function should use the Array() constructor Primitive constructors do not need the new keyword js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(/);\nYou should not pass anything to the Array() constructor js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df9df4b5216350de7b0d2.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d7824a4118d6d15d49918be3ae0f178c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df9df4b5216350de7b0d2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)/); Your range function should use an implicit return Remember that this means you will not use curly brackets js assert notMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*{/); Your range function should use the Array() constructor Primitive constructors do not need the new keyword js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(/); You should not pass anything to the Array() constructor js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642df9df4b5216350de7b0d2.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8523c7e899a66acf8ebe72b06775d0aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642dccb78549c9285835ebc2\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nFunctions are ideal for reusable logic When a function itself needs to reuse logic, you can declare a nested function to handle that logic Here is an example of a nested function:\n```js\nconst outer = () => {\nconst inner = () => {\n};\n};\n```\nDeclare a nested createLabel function using arrow syntax It should take a name parameter --hints--\nYou should declare a createLabel variable in your onload function js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*( :const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; ) \\s*( :let|var|const)\\s+createLabel/);\nYour createLabel variable should be declared after your container variable js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*( :let|var|const)\\s+createLabel/);\nYour createLabel variable should be declared with const js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel/);\nYour createLabel variable should be an arrow function js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour createLabel function should have a name parameter js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a92be4edfe5fd42479a6e2738e24e00b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "in your onload function js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*( :const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; ) \\s*( :let|var|const)\\s+createLabel/); Your createLabel variable should be declared after your container variable js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*( :let|var|const)\\s+createLabel/); Your createLabel variable should be declared with const js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel/); Your createLabel variable should be an arrow function js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your createLabel function should have a name parameter js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>/);\nYour createLabel function should be empty js\nassert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7f30ee7f2cca6d5c1e4e88bbb454e9d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":let|var|const)\\s+createLabel/); Your createLabel variable should be declared after your container variable js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*( :let|var|const)\\s+createLabel/); Your createLabel variable should be declared with const js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel/); Your createLabel variable should be an arrow function js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your createLabel function should have a name parameter js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>/); Your createLabel function should be empty js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*;\\s*const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "28fd93350197aa87a0a3bd282a7bbdb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "createLabel variable should be declared with const js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel/); Your createLabel variable should be an arrow function js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your createLabel function should have a name parameter js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*; \\s*const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>/); Your createLabel function should be empty js assert match(code, /window\\ onload\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+container\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)container\\1\\s*\\)\\s*;\\s*const\\s+createLabel\\s*=\\s*(\\(\\s*name\\s*\\)|name)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642dccb78549c9285835ebc2.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5da51977d0767ae38fd1590e9c3929a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434552bcc0a951a0a99df3b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6434552bcc0a951a0a99df3b\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nYour range function expects numbers, but your start and end values will be strings (specifically, they will be single characters such as A) Convert your start and end values in your range() call to numbers by using the charCodeAt() method on them, passing the number 0 as the argument to that method --hints--\nYou should use the charCodeAt() method js\nassert match(code, /\\ charCodeAt\\(/);\nYou should call the charCodeAt() method on start js\nassert match(code, /start\\ charCodeAt\\(/);\nYou should pass 0 to the charCodeAt() method of start js\nassert match(code, /start\\ charCodeAt\\(\\s*0\\s*\\)/);\nYou should call the charCodeAt() method on end js\nassert match(code, /end\\ charCodeAt\\(/);\nYou should pass 0 to the charCodeAt() method of end js\nassert match(code, /end\\ charCodeAt\\(\\s*0\\s*\\)/);\nYou should use the charCodeAt() methods directly in your range call js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\n--fcc-editable-region--\nconst charRange = (start, end) => range(start, end);\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434552bcc0a951a0a99df3b.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "45917ee0679ae84f126015a83fdfc0f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434552bcc0a951a0a99df3b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); --fcc-editable-region-- const charRange = (start, end) => range(start, end); --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = documentcreateElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434552bcc0a951a0a99df3b.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5001923a6c7359ebe321eb3ab5a9b5f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e02be7845f13b014cd2b0.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642e02be7845f13b014cd2b0\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nNow that you have a range function, you can use it to create a range of letters as well Declare a charRange function using const and arrow syntax It should take a start and end parameter The function should implicitly return the result of calling range() with start and end as the arguments --hints--\nYou should declare a charRange variable js\nassert match(code, /( :let|const|var)\\s+charRange/);\nYour charRange variable should be declared with const js\nassert match(code, /const\\s+charRange/);\nYour charRange variable should be a function js\nassert isFunction(charRange);\nYour charRange function should use arrow syntax js\nassert match(code, /const\\s+charRange\\s*=\\s*\\( *\\)\\s*=>/);\nYour charRange function should take start as the first parameter js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start/);\nYour charRange function should take end as the second parameter js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)/);\nYour charRange function should use an implicit return js\nassert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*{/);\nYour charRange function should call your range function js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(/);\nYou should pass start and end as the arguments to your range call js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\s*,\\s*end\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e02be7845f13b014cd2b0.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8d9745d21b72d32ef0a147d6dc77d654",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e02be7845f13b014cd2b0.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+charRange\\s*=\\s*\\(\\s*start/); Your charRange function should take end as the second parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)/); Your charRange function should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*{/); Your charRange function should call your range function js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(/); You should pass start and end as the arguments to your range call js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\s*,\\s*end\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\n--fcc-editable-region--\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e02be7845f13b014cd2b0.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "55b0819f5b5478c4bc26f3e9ff22b413",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345c560591891f64976f7a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64345c560591891f64976f7a\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nNow that your helper functions are complete, back in your onload event handler you should declare a letters variable. Assign it the result of calling charRange() with the letters \"A\" and \"J\" as arguments.\n--hints--\nYou should declare a letters variable.\njs\nassert.match(code, /(?:let|const|var)\\s+letters/);\nYou should use const to declare your letters variable.\njs\nassert.match(code, /const\\s+letters/);\nYou should assign a charRange() call to your letters variable.\njs\nassert.match(code, /const\\s+letters\\s*=\\s*charRange\\(/);\nYou should pass \"A\" as the first argument to your charRange() call.\njs\nassert.match(code, /const\\s+letters\\s*=\\s*charRange\\(\\s*('|\"|`)A\\1/);\nYou should pass \"J\" as the second argument to your charRange() call.\njs\nassert.match(code, /const\\s+letters\\s*=\\s*charRange\\(\\s*('|\"|`)A\\1\\s*,\\s*('|\"|`)J\\2\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map(code => String.fromCharCode(code));\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345c560591891f64976f7a.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "04a5a1066a1c2246565c94ef4662a5ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 642e004130958c3975aa3a4a\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nCurrently your range function returns an array with the correct length, but all of the values are the value of start To fix this, chain the map() method to your fill() method Pass the map() method a callback which takes element and index as parameters and returns the sum of those parameters --hints--\nYou should use the map() method js\nassert match(code, /\\ map\\(/);\nYou should chain the map() method to your fill() method js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(/);\nYou should pass a callback function to map() using arrow syntax js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\( *\\)\\s*=>/);\nYour map() callback should take element as the first parameter js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element/);\nYour map() callback should take index as the second parameter js\nassert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/);\nYour map() callback should use an implicit return js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "aa2157bab50666331f3f89f3bbef09fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should chain the map() method to your fill() method js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(/); You should pass a callback function to map() using arrow syntax js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\( *\\)\\s*=>/); Your map() callback should take element as the first parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element/); Your map() callback should take index as the second parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/); Your map() callback should use an implicit return js assertnotMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{/);\nYour map() callback should implicitly return the sum of element and index js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "e144f014e9de99db1bdcbf57cf106935",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should pass a callback function to map() using arrow syntax js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\( *\\)\\s*=>/); Your map() callback should take element as the first parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element/); Your map() callback should take index as the second parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/); Your map() callback should use an implicit return js assertnotMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{/); Your map() callback should implicitly return the sum of element and index js assertmatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b3fa0edc2a2619262971fa34141230a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a callback function to map() using arrow syntax js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\( *\\)\\s*=>/); Your map() callback should take element as the first parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element/); Your map() callback should take index as the second parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/); Your map() callback should use an implicit return js assertnotMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{/); Your map() callback should implicitly return the sum of element and index js assertmatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*(element\\s*\\+\\s*index|index\\s*\\+\\s*element)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 543,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "24d247e3e0c1875306f5365dbf27ba87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "element as the first parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element/); Your map() callback should take index as the second parameter js assert match(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/); Your map() callback should use an implicit return js assertnotMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{/); Your map() callback should implicitly return the sum of element and index js assertmatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*(element\\s*\\+\\s*index|index\\s*\\+\\s*element)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "0983f9d80f88e8e61d8183891b7a58c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>/); Your map() callback should use an implicit return js assertnotMatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\ map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{/); Your map() callback should implicitly return the sum of element and index js assertmatch(code, /const\\s+range\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*Array\\(\\s*end\\s*-\\s*start\\s*\\+\\s*1\\s*\\)\\ fill\\(\\s*start\\s*\\)\\map\\(\\s*\\(\\s*element\\s*,\\s*index\\s*\\)\\s*=>\\s*(element\\s*\\+\\s*index|index\\s*\\+\\s*element)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js --fcc-editable-region-- const range = (start, end) => Array(end - start + 1)fill(start);\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\642e004130958c3975aa3a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "4e529dc4e41a894568376506f41fe308",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64347464f78cd9209545f35c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64347464f78cd9209545f35c\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nNow call the .forEach() method of your letters array, and pass your createLabel function reference as the callback.\nYou should see some letters appear across the top of your spreadsheet.\n--hints--\nYou should call the .forEach() method on your letters array.\njs\nassert.match(code, /letters\\.forEach\\(/);\nYou should pass your createLabel function reference to the .forEach() method.\njs\nassert.match(code, /letters\\.forEach\\(\\s*(?:\\(\\s*([\\S]*)\\s*\\)|\\s*([\\S]*))\\s*=>\\s*createLabel\\(\\s*\\1\\2\\s*\\)\\s*\\)|letters\\.forEach\\(\\s*createLabel\\s*\\)/);\nYou should not pass a createLabel function call.\njs\nassert.notMatch(code, /letters\\.forEach\\(\\s*createLabel\\(\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map(code => String.fromCharCode(code));\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\n--fcc-editable-region--\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2082,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64347464f78cd9209545f35c.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6995eb954ad89bd6386f1e110acd3afe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434750c53db16218f41e6e1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6434750c53db16218f41e6e1\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nRemember that range() returns an array, so you can chain array methods directly to the function call Call range() with 1 and 99 as the arguments, and chain the forEach() method Pass the forEach() method an empty callback which takes number as the parameter --hints--\nYou should call your range() function js\nassert lengthOf(code match(/range\\(/g), 2);\nYou should pass 1 as the first argument to your range() call js\nassert match(code, /range\\(\\s*1/);\nYou should pass 99 as the second argument to your range() call js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)/);\nYou should chain the forEach() method to your range() call js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)\\ forEach\\(/);\nYou should pass a callback function to forEach() using arrow syntax js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)\\ forEach\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour callback function should have number as the only parameter js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)\\ forEach\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434750c53db16218f41e6e1.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "27b1e3761bc8687d5ee0c3570284a72a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434750c53db16218f41e6e1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "forEach\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = documentgetElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\n--fcc-editable-region--\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434750c53db16218f41e6e1.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "23217362c7055af20d456d8f283fab58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643475e13dc727231acd0f72.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 643475e13dc727231acd0f72\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nNow in your nested forEach() call, declare an input variable Use the createElement() method of the document object to create an input element Set the type attribute to \"text\" and the id attribute to letter + number --hints--\nYou should declare an input variable js\nassert match(code, /( :var|let|const)\\s+input/)\nYou should use const to declare your input variable js\nassert match(code, /const\\s+input/)\nYou should call the createElement() method of the document object js\nassert lengthOf(code match(/document\\ createElement\\(/g), 2)\nYou should pass the string \"input\" to the createElement() method js\nassert match(code, /document\\ createElement\\(\\s*('|\"|`)input\\1\\s*\\)/)\nYou should assign your new input element to your input variable js\nassert match(code, /const\\s+input\\s*=\\s*document\\ createElement\\(\\s*('|\"|`)input\\1\\s*\\)/)\nYou should access the type property of your input element js\nassert match(code, /input\\ type/);\nYou should set the type attribute of your input element to \"text\" js\nassert match(code, /input\\ type\\s*=\\s*('|\"|`)text\\1/)\nYou should access the id property of your input element js\nassert match(code, /input\\ id/);\nYou should set the id attribute of your input element to letter + number js\nassert match(code, /input\\ id\\s*=\\s*letter\\s\\+\\snumber/)\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2940,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643475e13dc727231acd0f72.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "176f235197429a1f7a5576527cd7ad02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643475e13dc727231acd0f72.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your input element to letter + number js assert match(code, /input\\ id\\s*=\\s*letter\\s\\+\\snumber/) --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\n--fcc-editable-region--\nletters forEach(letter => {\n})\n--fcc-editable-region--\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2940,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643475e13dc727231acd0f72.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5ae7869fc4a40e2360163c99ae7bef7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498328cb52026123e2b91.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 643498328cb52026123e2b91\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nAppend the input element to your container element as a child.\nYou should now be able to see the cells of your spreadsheet.\n--hints--\nYou should call the .appendChild() method on your container element.\njs\nassert.lengthOf(code.match(/container\\.appendChild\\(/g), 2);\nYou should pass your input element to the .appendChild() method.\njs\nassert.match(code, /container\\.appendChild\\(\\s*input\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}\n.label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map(code => String.fromCharCode(code));\nwindow.onload = () => {\nconst container = document.getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document.createElement(\"div\");\nlabel.className = \"label\";\nlabel.textContent = name;\ncontainer.appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters.forEach(createLabel);\nrange(1, 99).forEach(number => {\ncreateLabel(number);\n--fcc-editable-region--\nletters.forEach(letter => {\nconst input = document.createElement(\"input\");\ninput.type = \"text\";\ninput.id = letter + number;\ninput.ariaLabel = letter + number;\n})\n--fcc-editable-region--\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2096,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498328cb52026123e2b91.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aca62c115515bdd7dc8f5dc534446bb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6434759f78ec812264ff8f34\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nIn your callback, you will need to make two function calls Start by calling createLabel() and pass number as the argument You should see some numbers appear in your spreadsheet Then call the forEach() method on your letters array Pass an empty callback function which takes a letter parameter --hints--\nYou should call your createLabel() function js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)\\ forEach\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>\\s*\\{\\s*createLabel\\(/);\nYou should pass number to your createLabel() call js\nassert match(code, /range\\(\\s*1\\s*,\\s*99\\s*\\)\\ forEach\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>\\s*\\{\\s*createLabel\\(/)\nYou should call the forEach() method on your letters array js\nassert lengthOf(code match(/letters\\ forEach\\(/g), 2)\nYou should pass a callback function with arrow syntax to your forEach() method js\nassert match(code, /letters\\ forEach\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>\\s*\\{/)\nYour callback function should have a letter parameter js\nassert match(code, /letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{/)\nYour callback function should be empty js\nassert match(code, /letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{\\s*\\}/)\nYour letters forEach() callback function should be nested inside the range(1, 99) forEach(number => {} callback function js\nassert match(code, /range\\s*\\(\\s*1\\s*,\\s*99\\s*\\)\\s* forEach\\s*\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>\\s*\\{\\s*[^}]*letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{\\s*\\}\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "da7618444a6cd73a0c1ace01d5a74f80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method on your letters array js assert lengthOf(code match(/letters\\ forEach\\(/g), 2) You should pass a callback function with arrow syntax to your forEach() method js assert match(code, /letters\\ forEach\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>\\s*\\{/) Your callback function should have a letter parameter js assert match(code, /letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{/) Your callback function should be empty js assert match(code, /letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{\\s*\\}/) Your letters forEach() callback function should be nested inside the range(1, 99) forEach(number => {} callback function js assert match(code, /range\\s*\\(\\s*1\\s*,\\s*99\\s*\\)\\s* forEach\\s*\\(\\s*(\\(\\s*number\\s*\\)|number)\\s*=>\\s*\\{\\s*[^}]*letters\\ forEach\\(\\s*(\\(\\s*letter\\s*\\)|letter)\\s*=>\\s*\\{\\s*\\}\\s*\\)\\s*;\\s*\\}\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\n--fcc-editable-region--\nrange(1, 99)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5982886865d575e7b3666e8736577577",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "```js const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); --fcc-editable-region-- range(1, 99)forEach(number => {\n})\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6434759f78ec812264ff8f34.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c9a58222baa7f65b42a40f878964bf83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437124c4c03dd4c8fb35d56.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6437124c4c03dd4c8fb35d56\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nDeclare an isEven function, which takes a num parameter and returns true if the number is even, and false otherwise Use the modulo operator % to determine if a number is even or odd --hints--\nYou should declare an isEven variable js\nassert match(code, /( :let|const|var)\\s+isEven/);\nYou should use const to declare your isEven variable js\nassert match(code, /const\\s+isEven/);\nYour isEven variable should be a function js\nassert isFunction(isEven);\nYour isEven function should use arrow syntax js\nassert match(code, /const\\s+isEven\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour isEven function should have a num parameter js\nassert match(code, /const\\s+isEven\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour isEven function should use the modulo operator % js\nassert match(isEven toString(),  /%/);\nYour isEven function should return true for even numbers js\nassert isTrue(isEven(2));\nassert isTrue(isEven(1000));\nassert isTrue(isEven(42));\nYour isEven function should return false for odd numbers js\nassert isFalse(isEven(1));\nassert isFalse(isEven(333));\nassert isFalse(isEven(777777777));\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437124c4c03dd4c8fb35d56.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "53dbabfa325f576234c8620ab7955956",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437124c4c03dd4c8fb35d56.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js --fcc-editable-region-- --fcc-editable-region-- const sum = nums => nums reduce((acc, el) => acc + el, 0); const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0))map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437124c4c03dd4c8fb35d56.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3e70e8f8ea45fb124d7c60e28ba90996",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437133052eaf04d7300e622.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6437133052eaf04d7300e622\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nDeclare an average function which takes an array of numbers as the nums parameter It should return the average of all the numbers in the array The average can be calculated by dividing the sum of all the numbers in the array by the length of the array Remember that you have a sum function you can use --hints--\nYou should declare an average variable js\nassert match(code, /( :let|const|var)\\s+average/);\nYou should use const to declare your average variable js\nassert match(code, /const\\s+average/);\nYour average variable should be a function js\nassert isFunction(average);\nYour average function should use arrow syntax js\nassert match(code, /const\\s+average\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour average function should have a nums parameter js\nassert match(code, /const\\s+average\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)/);\nYour average function should use an implicit return js\nassert notMatch(code, /const\\s+average\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*{/);\nYour average function should return the average value of the nums array js\nassert equal(average([1,2,3]), 2);\nassert equal(average([1,2,3,4,5]), 3);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\n--fcc-editable-region--\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437133052eaf04d7300e622.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7a58caa1c47b73be54b9f2b603eeacdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437133052eaf04d7300e622.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); --fcc-editable-region-- --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(startcharCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6437133052eaf04d7300e622.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fe292a406a57f2cc0d7b808e454d442c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64345b810a6e481e5e326849\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nrange() will return an array of numbers, which you need to convert back into characters Chain the map() method to your range() call Pass a callback function that takes code as the parameter and implicitly returns the value of passing code to the String fromCharCode() method --hints--\nYou should use the map() method js\nassert lengthOf(code match(/\\ map\\(/g), 2);\nYou should chain the map() method to your range call js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/);\nYou should use arrow syntax for the map() callback js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour map() callback should take a code parameter js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/);\nYour map() callback should use an implicit return js\nassert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "f0479c122145235467c6c9f709da10c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should use the map() method js assert lengthOf(code match(/\\ map\\(/g), 2); You should chain the map() method to your range call js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/);\nYour map() callback should return the result of calling String fromCharCode() js\nassert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "4fcdcaef0443e3a062a42edb841f536c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the map() method to your range call js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "9a1f02e7da8d0f91c378dceb964f7d64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() method to your range call js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/);\nYou should pass the variable code to String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "2ddf12364ae8b77f95e8464b9da6bc8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "e103067a9f2c87e7542de70faa55c613",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "0dab08fb692ef2845747dd73336522b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 545,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "106384ffdb991dab17f1b5bd10ffc067",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 525,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "10680311e9a5546eb5b9ef17b7ef2d4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "129a7645041291dae5cd46b56d4fdc08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "6edfa71ba6b3b04d88b0cc340634193d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(/); You should use arrow syntax for the map() callback js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(\\s*code\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "e4508d35b60f3bf1afe2ea85a5ba7186",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your map() callback should take a code parameter js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>/); Your map() callback should use an implicit return js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(\\s*code\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst range = (start, end) => Array(end - start + 1)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 536,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "540b5c1f85136ed47a10fb48212bf4fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\ charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*\\{/); Your map() callback should return the result of calling String fromCharCode() js assert match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\ charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\ map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(/); You should pass the variable code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(\\s*code\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const range = (start, end) => Array(end - start + 1)fill(start) map((element, index) => element + index);\n--fcc-editable-region--\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0));\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "291cae4f00f180b4310b1c9a1ffb5913",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "code to StringfromCharCode()js assertmatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\charCodeAt\\(\\s*0\\s*\\)\\s*\\)\\map\\(\\s*(\\(\\s*code\\s*\\)|code)\\s*=>\\s*String\\fromCharCode\\(\\s*code\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const range = (start, end) => Array(end - start + 1)fill(start) map((element, index) => element + index); --fcc-editable-region-- const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)); --fcc-editable-region-- window onload = () => { const container = documentgetElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64345b810a6e481e5e326849.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "e1cd7004e71a47e0801f162393cbd3cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498755d54c6279ba09078.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 643498755d54c6279ba09078\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nMost spreadsheet programs include built-in functions for calculation Declare a sum function that takes a nums parameter, which will be an array of numbers It should return the result of calling reduce on the array to sum all of the numbers --hints--\nYou should declare a sum variable js\nassert match(code, /( :let|const|var)\\s+sum/);\nYou should use const to declare your sum variable js\nassert match(code, /const\\s+sum/);\nYour sum variable should be a function js\nassert isFunction(sum);\nYour sum function should use arrow syntax js\nassert match(code, /const\\s+sum\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour sum function should have a nums parameter js\nassert match(code, /const\\s+sum\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>/);\nYour sum function should use an implicit return js\nassert notMatch(code, /const\\s+sum\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*{/);\nYour sum function should return the result of calling reduce() on nums js\nassert match(code, /const\\s+sum\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*nums\\ reduce\\(/);\nYour sum function should return the sum of all numbers in nums js\nconst numbers = [1, 2, 3, 4, 5];\nassert equal(sum(numbers), 15);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498755d54c6279ba09078.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6173f149b54fb9dc471be2f90aa5568f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498755d54c6279ba09078.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "all numbers in nums js const numbers = [1, 2, 3, 4, 5]; assert equal(sum(numbers), 15); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js --fcc-editable-region-- --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(startcharCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643498755d54c6279ba09078.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fba58015980f25206237e3b97cea2ff2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 643715013330824ecaa70442\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nYour next function will calculate the median value of an array of numbers Start by declaring a median arrow function that takes a nums parameter In the function, declare a sorted variable and assign it the value of sorting a copy of the nums array You should use the slice() method for creating a shallow copy of the array --hints--\nYou should declare a median variable js\nassert match(code, /( :let|const|var)\\s+median/);\nYou should use const to declare your median variable js\nassert match(code, /const\\s+median/);\nYour median variable should be a function js\nassert isFunction(median);\nYour median function should use arrow syntax js\nassert match(code, /const\\s+median\\s*=\\s*\\( /);\nYour median function should have a nums parameter js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)/);\nYour median function should not use an implicit return js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{/);\nYour median function should have a sorted variable js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*( :let|var|const)\\s+sorted/);\nYou should use const to declare your sorted variable js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted/);\nYou should use slice() to assign a copy of the nums array to sorted js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)/);\nYou should chain the sort() method to your slice() method js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9006a1d0f0185ce766c57785d3f43a54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)/); Your median function should not use an implicit return js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{/); Your median function should have a sorted variable js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*( :let|var|const)\\s+sorted/); You should use const to declare your sorted variable js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted/); You should use slice() to assign a copy of the nums array to sorted js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)/); You should chain the sort() method to your slice() method js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\ sort\\(/);\nYou should pass a callback function to your sort method to accurately sort the numbers in ascending order Use an implicit return for clarity js\nassert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2f45bbc49707a504a107b73276c0d3b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the nums array to sorted js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)/); You should chain the sort() method to your slice() method js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\ sort\\(/); You should pass a callback function to your sort method to accurately sort the numbers in ascending order Use an implicit return for clarity js assert match(code, /const\\s+median\\s*=\\s*(\\(\\s*nums\\s*\\)|nums)\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\n--fcc-editable-region--\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3cd61a3787083383278f57d238f0030a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "el, 0); const average = nums => sum(nums) / nums length; --fcc-editable-region-- --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; containerappendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3967,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\643715013330824ecaa70442.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "096ae0e6d0ddcd23c8f72ec53ce78f97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d80bc174a158c973080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64496d80bc174a158c973080\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nCheck if length is even using your isEven function If it is, return the average of the number at the middle index and the number after that If it's odd, return the number at the middle index – you'll need to round the middle value up --hints--\nYou should return a value from the median function js\nassert exists(median([2,4,6,8]));\nIf length is even, you should return the average of the number at the middle index and the number after it js\nassert strictEqual(median([2,4,6,8]),5);\nassert strictEqual(median([6,12,18,24]),15);\nIf length is odd, you should return the value at the middle index js\nassert strictEqual(median([2,4,6,8,10]),6);\nassert strictEqual(median([3,6,9,12,15]),9);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\n--fcc-editable-region--\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d80bc174a158c973080.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7b01248729679735ab283ca33d4d285b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d80bc174a158c973080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = documentcreateElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d80bc174a158c973080.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d6e27a8ef586d40dc8e789a9e0a1e9d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64496df724dd3716a71fe971\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nObject properties consist of key/value pairs You can use shorthand property names when declaring an object literal When using the shorthand property name syntax, the name of the variable becomes the property key and its value the property value The following example declares a user object with the properties userId, firstName, and loggedIn ```js\nconst userId = 1;\nconst firstName = \"John\";\nconst loggedIn = true;\nconst user = {\nuserId,\nfirstName,\nloggedIn,\n};\nconsole log(user); // { userId: 1, firstName: 'John', loggedIn: true }\n```\nTo keep track of all of your spreadsheet's functions, declare a spreadsheetFunctions object Using the shorthand notation syntax, set sum, average, and median as properties on the spreadsheetFunctions object --hints--\nYou should declare a spreadsheetFunctions variable js\nassert match(code, /( :const|let|var)\\s+spreadsheetFunctions/);\nYou should use const to declare your spreadsheetFunctions variable js\nassert match(code, /const\\s+spreadsheetFunctions/);\nYour spreadsheetFunctions variable should be an object js\nassert isObject(spreadsheetFunctions);\nYour spreadsheetFunctions object should have a sum property js\nassert property(spreadsheetFunctions, \"sum\");\nYour sum property should be your sum function js\nassert equal(spreadsheetFunctions sum, sum);\nYour spreadsheetFunctions object should have an average property js\nassert property(spreadsheetFunctions, \"average\");\nYour average property should be your average function js\nassert equal(spreadsheetFunctions average, average);\nYour spreadsheetFunctions object should have a median property js\nassert property(spreadsheetFunctions, \"median\");\nYour median property should be your median function js\nassert equal(spreadsheetFunctions median, median);\nYou should use destructuring syntax to assign your properties js\nconst objectText = code replace(/ *const\\s+spreadsheetFunctions\\s*=\\s*\\{([^}]*)} */s, \"$1\");\nassert include(objectText, \"sum\");\nassert include(objectText, \"average\");\nassert include(objectText, \"median\");\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "74417f99f41e69abb5e7bb7ec93480c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "object should have an average property js assert property(spreadsheetFunctions, \"average\"); Your average property should be your average function js assert equal(spreadsheetFunctions average, average); Your spreadsheetFunctions object should have a median property js assert property(spreadsheetFunctions, \"median\"); Your median property should be your median function js assert equal(spreadsheetFunctions median, median); You should use destructuring syntax to assign your properties js const objectText = code replace(/ *const\\s+spreadsheetFunctions\\s*=\\s*\\{([^}]*)} */s, \"$1\"); assert include(objectText, \"sum\"); assert include(objectText, \"average\"); assert include(objectText, \"median\"); assertnotInclude(objectText, \":\");\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7a8dc7a7fc8ea7305cf8c59440219eb4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--fcc-editable-region-- --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99)forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496df724dd3716a71fe971.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3d5eb91909473542314bfb9ee0149d1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496e9c6d7a2e189948e441.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64496e9c6d7a2e189948e441\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nNow you can start using your spreadsheet functions Begin by declaring an update arrow function It should take an event parameter --hints--\nYou should declare an update variable js\nassert match(code, /( :let|const|var)\\s+update/);\nYou should use const to declare your update variable js\nassert match(code, /const\\s+update/);\nYour update variable should be a function js\nassert isFunction(update);\nYour update function should take an event parameter js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>/);\nYour update function should be empty js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496e9c6d7a2e189948e441.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "687c8c055b328a72ab3d9a157493df4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496e9c6d7a2e189948e441.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = documentgetElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496e9c6d7a2e189948e441.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f10852df1b825f16b243f7dfde59d5e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449749d20436c1f1dfadcf2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449749d20436c1f1dfadcf2\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nIn your window onload function, you need to tell your input elements to call the update function when the value changes You can do this by directly setting the onchange property Set the onchange property to be a reference to your update function --hints--\nYour window onload function should access the onchange property of the input element js\nassert match(window onload toString(), /input\\ onchange/);\nYour window onload function should set the onchange property to update js\nassert match(window onload toString(), /input\\ onchange\\s*=\\s*update/);\nYour window onload function should not call your update function js\nassert notMatch(window onload toString(), /update\\(\\s*\\)/);\nYour input elements should all have your update function as the onchange property js\nconst inputs = document querySelectorAll('input');\ninputs forEach(input => {\nassert property(input, 'onchange');\nassert equal(input onchange, update);\n})\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3195,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449749d20436c1f1dfadcf2.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a0023d5db40c71af1701d3ce0ed7cc9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449749d20436c1f1dfadcf2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\n--fcc-editable-region--\n--fcc-editable-region--\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3195,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449749d20436c1f1dfadcf2.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0cd8e604fdd2b99bde17072ad3dd6552",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449755666005520330cec5b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449755666005520330cec5b\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nSince your update event is running as a change event listener, the event parameter will be a change event The target property of the change event represents the element that changed Assign the target property to a new variable called element --hints--\nYou should declare an element variable in your update function js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+element/);\nYou should use const to declare your element variable js\nassert match(code, /const\\s+update\\s*=\\s*(\\( \\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element/);\nYou should assign the target property of the event parameter to your element variable js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449755666005520330cec5b.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "84c2d0e92b8fd26f8029839690276c42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449755666005520330cec5b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start)map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449755666005520330cec5b.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a06c87223f8983fff5bcc3ddd3922347",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64497da4062602213ecf32e7\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nBecause the change event is triggering on an input element, the element will have a value property that represents the current value of the input Assign the value property of element to a new variable called value, and use replace() to remove all whitespace --hints--\nYou should declare a value variable after your element variable js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*( :const|let|var)\\s+value/);\nYou should use const to declare your value variable js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value/);\nYou should assign the value property of element to your value variable js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value/);\nYou should call the replace() method on the value property of the element js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(/);\nYou should pass a regular expression to match whitespace to your replace() method Use the \\s character class js\nassert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\//);\nYou should make your regular expression global js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7de7945d0ffbaf6ba00b2836f0fd150a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+value/); You should assign the value property of element to your value variable js assert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value/); You should call the replace() method on the value property of the element js assert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(/); You should pass a regular expression to match whitespace to your replace() method Use the \\s character class js assert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\//); You should make your regular expression global js assertmatch(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g/);\nYou should pass an empty string as your second argument to the replace() method js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8f54bf4fb8a7c9be5353966990527d5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the value property of the element js assert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(/); You should pass a regular expression to match whitespace to your replace() method Use the \\s character class js assert match(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\//); You should make your regular expression global js assertmatch(code, /const\\s+update\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g/); You should pass an empty string as your second argument to the replace() method js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6f090dbf4f0bf0cfc4189656f7749d56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "value\\replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = numsslice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497da4062602213ecf32e7.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4a56283939371629a6d4cfaebbe53314",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64497de936a2f322327e5c58\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nNow you need to check if the value does not include the id of the element Create an if condition to do so --hints--\nYou should create an if block js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(/);\nYour if condition should check that value does not include the id of the element js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s* value\\ includes\\(\\s*element\\ id\\s*\\)/);\nYour if block should be empty js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s* value\\ includes\\(\\s*element\\ id\\s*\\)\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3374,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a0220e70735852c523087ab34524acb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(/); Your if condition should check that value does not include the id of the element js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s* value\\ includes\\(\\s*element\\ id\\s*\\)/); Your if block should be empty js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s* value\\ includes\\(\\s*element\\ id\\s*\\)\\s*\\)\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3374,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7f47e9fa5f110988c80efadbfc90c67b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*\\)\\s*\\)\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice()sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3374,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497de936a2f322327e5c58.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "06e265108a68a98ab8ddf8a606bc7656",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64496d1e5af8c0148fbef96d\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nNow declare a length variable and assign it the length of your sorted array, and a middle variable that has the value of the length divided by 2, subtracted by 1 --hints--\nYou should declare a length variable after your sorted variable js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/);\nYou should use const to declare your length variable js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/);\nYou should assign the length of the sorted array to your length variable js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /);\nYou should declare a middle variable after your length variable js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 21
  },
  {
    "id": "49ce62410cd04736fd458e2bbf1e173f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a length variable after your sorted variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/); You should use const to declare your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/);\nYou should use const to declare your middle variable js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 21
  },
  {
    "id": "40b15563534f85c70d30253644ffe1a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/); You should use const to declare your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 21
  },
  {
    "id": "98cc0c799e4035ee125d0b75f094b0cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/); You should use const to declare your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 3,
    "total_chunks": 21
  },
  {
    "id": "71f589d79a51bd88381a351f19d32378",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/); You should use const to declare your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 4,
    "total_chunks": 21
  },
  {
    "id": "81d99c2acf19ecfb2ce73e1ab5993d85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*( :var|let|const)\\s+length/); You should use const to declare your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/);\nYou should assign middle the value of dividing your length variable by 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 537,
    "chunk_index": 5,
    "total_chunks": 21
  },
  {
    "id": "5b3353ff914ee5cec2175c8f29c7777a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js\nassert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 6,
    "total_chunks": 21
  },
  {
    "id": "ee5dccbbd4c08a9e101a898d448946ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 7,
    "total_chunks": 21
  },
  {
    "id": "f46dce4913f45ca21f46370eebde0002",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 526,
    "chunk_index": 8,
    "total_chunks": 21
  },
  {
    "id": "a4e8c110586849348269c102aac9fa60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 9,
    "total_chunks": 21
  },
  {
    "id": "94ff14ed33842b9276c8c948f12cd43b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length/); You should assign the length of the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/);\nYou should subtract 1 from your length / 2 calculation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 10,
    "total_chunks": 21
  },
  {
    "id": "11803fdb9227fd8e40484bfe318f5c65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 11,
    "total_chunks": 21
  },
  {
    "id": "37d68e5f072a35a437e68b43388338b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "sorted array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 12,
    "total_chunks": 21
  },
  {
    "id": "0ab8bf3de6365c34539cdc5cc590984a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 13,
    "total_chunks": 21
  },
  {
    "id": "11466edbb2e1f9a80aeffe9666b1faa4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 551,
    "chunk_index": 14,
    "total_chunks": 21
  },
  {
    "id": "071453a5b733b2fd87a7cdd2d318c9a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 15,
    "total_chunks": 21
  },
  {
    "id": "81862cd489a579635104d7cffb853872",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 568,
    "chunk_index": 16,
    "total_chunks": 21
  },
  {
    "id": "558d1319c0cb8c1ae221b1ee58e4e4b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "array to your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; /); You should declare a middle variable after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2\\s*-\\s*1/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 17,
    "total_chunks": 21
  },
  {
    "id": "f616cea410d47de433f7af35e17bbc49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your length variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*; \\s*const\\s+length\\s*=\\s*sorted\\ length\\s*; \\s*(:var|let|const)\\s+middle/); You should use const to declare your middle variable js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle/); You should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2\\s*-\\s*1/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 18,
    "total_chunks": 21
  },
  {
    "id": "c1d27b1e1b3afcc8f11e6394067d467a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should assign middle the value of dividing your length variable by 2js assert match(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\ slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2/); You should subtract 1 from your length / 2 calculationjs assertmatch(code, /const\\s+median\\s*=\\s*nums\\s*=>\\s*\\{\\s*const\\s+sorted\\s*=\\s*nums\\slice\\(\\s*\\)\\sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\s*\\)\\s*\\s*;\\s*const\\s+length\\s*=\\s*sorted\\length\\s*;\\s*const\\s+middle\\s*=\\s*length\\s*\\/\\s*2\\s*-\\s*1/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\n--fcc-editable-region--\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 19,
    "total_chunks": 21
  },
  {
    "id": "ecf90e0f8c2964fbdb779edae1dc0e50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> acc + el, 0); const average = nums => sum(nums) / nums length; --fcc-editable-region-- const median = nums => { const sorted = nums slice() sort((a, b) => a - b); } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); window onload = () => { const container = documentgetElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ncontainer appendChild(input);\n})\n})\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64496d1e5af8c0148fbef96d.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 20,
    "total_chunks": 21
  },
  {
    "id": "b32ed130e7d3e88609fb77d8abfd257b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e764135bd24b7960dd3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64497e764135bd24b7960dd3\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nIn order to run your spreadsheet functions, you need to be able to parse and evaluate the input string This is a great time to use another function Declare an evalFormula arrow function which takes the parameters x and cells --hints--\nYou should declare an evalFormula variable js\nassert match(code, /( :let|const|var)\\s+evalFormula/);\nYou should use const to declare your evalFormula variable js\nassert match(code, /const\\s+evalFormula/);\nYour evalFormula variable should be a function js\nassert isFunction(evalFormula);\nYour evalFormula function should use arrow syntax js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(/);\nYour evalFormula function should have x as the first parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x/);\nYour evalFormula function should have cells as the second parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>/);\nYour evalFormula function should be empty js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e764135bd24b7960dd3.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50a310a3b24cd2505120640df47b48d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e764135bd24b7960dd3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e764135bd24b7960dd3.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "473b1a67069c27cc9089334159ce92e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64497e0e5e5a2c2329785af4\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nSpreadsheet software typically uses = at the beginning of a cell to indicate a calculation should be used, and spreadsheet functions should be evaluated Use the && operator to add a second condition to your if statement that also checks if the first character of value is \"=\" --hints--\nYou should use the && operator to add a second condition to your if statement that also checks if the first character of value is \"=\" You may use [0], startsWith(), or charAt(0) js\nassert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ac7d3a476f3e9fc0ae6744c3909ee98c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should use the && operator to add a second condition to your if statement that also checks if the first character of value is \"=\" You may use [0], startsWith(), or charAt(0) js assert match(code, /const\\s+update\\s*=\\s*( :\\(\\s*event\\s*\\)|event)\\s*=>\\s*\\{\\s*const\\s+element\\s*=\\s*event\\ target\\s*; \\s*const\\s+value\\s*=\\s*element\\ value\\ replace\\(\\s*\\/\\\\s\\/g\\s*,\\s*('|\"|`)\\1\\s*\\)\\s*; \\s*if\\s*\\(\\s*( value\\ includes\\(\\s*element\\ id\\s*\\)\\s*&&\\s*( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\3|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\4|value\\ startsWith\\(\\s*('|\"|`)=\\5\\s*\\))|( :value\\s*\\[\\s*0\\s*\\]\\s*===\\s*('|\"|`)=\\6|value\\ charAt\\(\\s*0\\s*\\)\\s*===\\s*('|\"|`)=\\7|value\\ startsWith\\(\\s*('|\"|`)=\\8\\s*\\))\\s*\\|\\|\\s* value\\ includes\\(\\s*element\\ id\\s*\\))\\s*\\)\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3119a465433e42929d2343e8d29c7b7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "{ background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\n--fcc-editable-region--\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id)) {\n}\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64497e0e5e5a2c2329785af4.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d78fe2bf9571cb3fe56e2e3fe826feca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498473a17adc26ef0ecc2d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498473a17adc26ef0ecc2d\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nYour idToText function currently returns an input element Update it to return the value of that input element --hints--\nYou should return the value property of the return value of the find() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2934,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498473a17adc26ef0ecc2d.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "db4dcded748fc403ad9c9785fb01e419",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498473a17adc26ef0ecc2d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); --fcc-editable-region-- const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cellid === id);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2934,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498473a17adc26ef0ecc2d.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "25be4714850a1ff122f88776aef4dcba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449860d84c9e22cbd7b497c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449860d84c9e22cbd7b497c\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nRanges are separated by a colon After your two capture groups, your rangeRegex should look for a colon --hints--\nYou should add a colon after your second capture group js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\/\\s*; /);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449860d84c9e22cbd7b497c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "046b17c2c654cffae17ac48a73e98fe0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449860d84c9e22cbd7b497c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0))map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] )/;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449860d84c9e22cbd7b497c.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4423a1063bc7d0eea70233e97af785a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449842c6f6c84261075e4c9\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nIn your evalFormula, declare an idToText arrow function which takes an id parameter Your idToText function should return the result of calling find() on the cells array with a callback function that takes an cell parameter and returns cell id === id Both of your functions should use implicit returns --hints--\nYou should declare an idToText variable in your evalFormula function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*( :const|let|var)\\s+idToText/);\nYou should use const to declare your idToText variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText/);\nYour idToText variable should be an arrow function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour idToText function should have an id parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>/);\nYour idToText function should return the result of calling the find() method on your cells array Your callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "43e7aed84e1f9c9b73b31e861f42bc2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "idToText variable in your evalFormula function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*( :const|let|var)\\s+idToText/); You should use const to declare your idToText variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText/); Your idToText variable should be an arrow function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your idToText function should have an id parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>/); Your idToText function should return the result of calling the find() method on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/);\nYour idToText function should use an implicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/);\nYou should pass a callback function to your find() method Use arrow syntax js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "08ae933f3b1fad97b1763df49901d02c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be an arrow function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your idToText function should have an id parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>/); Your idToText function should return the result of calling the find() method on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/); Your idToText function should use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour callback function should have a cell parameter js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "bfed7ba5d4f4fa822ff693a2f17147d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have an id parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>/); Your idToText function should return the result of calling the find() method on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/); Your idToText function should use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your callback function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/);\nYour callback function should return whether cell id is strictly equal to id js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "d488b6b155f8a590e5d72a1cee0751ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the find() method on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/); Your idToText function should use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your callback function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/); Your callback function should return whether cell id is strictly equal to id js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "e436a8355ea04b773757a0924e55778e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/); Your idToText function should use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your callback function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/); Your callback function should return whether cell id is strictly equal to id js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "98fd3fc053a3b74951ccdc026ca7a58b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "on your cells array Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*\\{/); Your idToText function should use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your callback function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/); Your callback function should return whether cell id is strictly equal to id js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "bf3879473e61bb8181b3e6c016f5cb01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "use an implicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(/); You should pass a callback function to your find() method Use arrow syntax js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your callback function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/); Your callback function should return whether cell id is strictly equal to id js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "7a7f63c62b99894c7fc4c0ec7716be8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function should have a cell parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>/); Your callback function should return whether cell id is strictly equal to id js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "025e6da4deccfcedea4931148b12b3d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449842c6f6c84261075e4c9.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "457bb1f7ef7634609c6c90cddcb1425f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "c23f53268a37281593582a04a90f42d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "ee74b1ebd20b07600a22f3eacd082c5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "065100a074b6d60c60411b136561aca2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "58fe1b27d131a7fa3d1687f5f500c857",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 552,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "3e9e4b26ccba6da76232e0c2bfc7a834",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "9e0ef0d4c02f1eb38cf1ba2afe5112dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "f395c6b74fe4d0061347ce816f2666a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 595,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "cdd9dbc3183926fae7d452a5f62241d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 616,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "815bac6a315eff52fedca0fff4acd402",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449874d5191562eb3313b3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nFinally, make your rangeRegex global and case-insensitive --hints--\nYour rangeRegex should be case-insensitive js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/);\nYour rangeRegex should be global js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/);\nYour rangeRegex should be both global and case-insensitive js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "420fa1eb81115a549a2bd6a9e1d224ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Finally, make your rangeRegex global and case-insensitive --hints-- Your rangeRegex should be case-insensitive js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/g i/); Your rangeRegex should be global js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/); Your rangeRegex should be both global and case-insensitive js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 686,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "14758f4dac9715b4da2821650eaf6592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeRegex should be global js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/); Your rangeRegex should be both global and case-insensitive js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "6ca26a765f19ba742249625bfeaa3460",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/i g/); Your rangeRegex should be both global and case-insensitive js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "7286849d45f9fcaa0981fa9247eb82cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449874d5191562eb3313b3f.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "56233d3574ba94afa40f97ee1c49266d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449863f592af72d9be0959e\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nAfter your rangeRegex finds the :, it needs to look for the same letter and number pattern as it did before Copy your two existing capture groups and paste them after the colon --hints--\nYou should add a third capture group to your rangeRegex, after the colon js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/);\nYour third capture group should use a character class js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/);\nYour third capture group should match the characters A through J js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 28
  },
  {
    "id": "e96c49a498b7cadfb1d26b59b725f48a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "did before Copy your two existing capture groups and paste them after the colon --hints-- You should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 28
  },
  {
    "id": "a966e45e6aea77f64738a723a9b451f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "two existing capture groups and paste them after the colon --hints-- You should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 2,
    "total_chunks": 28
  },
  {
    "id": "c051ee24da964274cf2a043fcc1a9fba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "two existing capture groups and paste them after the colon --hints-- You should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/);\nYou should add a fourth capture group to your rangeRegex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 537,
    "chunk_index": 3,
    "total_chunks": 28
  },
  {
    "id": "e5f22dec7f0b86c197c790fb3b2267e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 4,
    "total_chunks": 28
  },
  {
    "id": "4b3e29a05a49aa0b43b763127c9b9f2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 5,
    "total_chunks": 28
  },
  {
    "id": "103f41c84e2953acc5d50f1462b15fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 610,
    "chunk_index": 6,
    "total_chunks": 28
  },
  {
    "id": "d9a71a332bf82dbde1aeae30f35163f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 613,
    "chunk_index": 7,
    "total_chunks": 28
  },
  {
    "id": "5dd90d0eff245ff1c0fb770f98c02ff3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 631,
    "chunk_index": 8,
    "total_chunks": 28
  },
  {
    "id": "387d2e27a2c038a6528f84172cdee545",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 9,
    "total_chunks": 28
  },
  {
    "id": "0ac03f25894f12eb45e8bfebae1b794e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 640,
    "chunk_index": 10,
    "total_chunks": 28
  },
  {
    "id": "93c228880df0903cfa747d824800e9a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 674,
    "chunk_index": 11,
    "total_chunks": 28
  },
  {
    "id": "0470c4f8409b5b08366b957429790445",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 12,
    "total_chunks": 28
  },
  {
    "id": "b8595552061174d1216654da00ee385d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a third capture group to your rangeRegex, after the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/);\nYour fourth capture group should match one or two digits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 13,
    "total_chunks": 28
  },
  {
    "id": "67da0e12e2aa47d1801eddf690741c81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 687,
    "chunk_index": 14,
    "total_chunks": 28
  },
  {
    "id": "2d629783994e8ce72dd3a657fd5467d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "colon js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 749,
    "chunk_index": 15,
    "total_chunks": 28
  },
  {
    "id": "e529cdc80466566233798b7b248bbeb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 769,
    "chunk_index": 16,
    "total_chunks": 28
  },
  {
    "id": "492f87af604c7c4d59f5d5473f709ea7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 772,
    "chunk_index": 17,
    "total_chunks": 28
  },
  {
    "id": "c8896bcf38b35d72196e5e55184d5bf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 18,
    "total_chunks": 28
  },
  {
    "id": "9107e597f1fa405afc62f0ac18454fda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 795,
    "chunk_index": 19,
    "total_chunks": 28
  },
  {
    "id": "cc9c76ef8b18cacc91f93c9417f06b0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 20,
    "total_chunks": 28
  },
  {
    "id": "9e7c7c07c4b66a48f6d1f6c752ff7815",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 833,
    "chunk_index": 21,
    "total_chunks": 28
  },
  {
    "id": "03a719ce5455e271bd64fd301eee840e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 854,
    "chunk_index": 22,
    "total_chunks": 28
  },
  {
    "id": "313ea7cd61a04558c0aa405e5b9f9afd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\( *\\)/); Your third capture group should use a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 911,
    "chunk_index": 23,
    "total_chunks": 28
  },
  {
    "id": "ea6e3a2e7ab1845afe63eab09fbd9967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[ *\\]\\)/); Your third capture group should match the characters A through J js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 792,
    "chunk_index": 24,
    "total_chunks": 28
  },
  {
    "id": "5ded93b13e64a96f58a5127115fef8f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)/); You should add a fourth capture group to your rangeRegexjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 25,
    "total_chunks": 28
  },
  {
    "id": "0d4a7a6e51b4e79a82acd5a5cef890ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(*\\)/); Your fourth capture group should match one or two digitsjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 26,
    "total_chunks": 28
  },
  {
    "id": "a006ee61a2c32387a77b4b4b85ea246c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):/;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449863f592af72d9be0959e.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 27,
    "total_chunks": 28
  },
  {
    "id": "a69d9f25fa3e2d2e41e33ecadb17f9c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449849b78f43527be1e8a98\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nYou need to be able to match cell ranges in a formula Cell ranges can look like A1:B12 or A3:A25 You can use a regular expression to match these patterns Start by declaring a rangeRegex variable and assign it a regular expression that matches A through J (the range of columns in your spreadsheet) Use a capture group with a character class to achieve this --hints--\nYou should declare a rangeRegex variable after your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/);\nYou should use const to declare your rangeRegex variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/);\nYour rangeRegex variable should be a regular expression js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 34
  },
  {
    "id": "66a75781aacd1db7367370d522354f3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "matches A through J (the range of columns in your spreadsheet) Use a capture group with a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /);\nYour rangeRegex should use a capture group js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 34
  },
  {
    "id": "9d43af170cf429dce1bcd1bc2633de3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 2,
    "total_chunks": 34
  },
  {
    "id": "546681035d617d7417cc41f3f589ecf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 3,
    "total_chunks": 34
  },
  {
    "id": "3b3841cbda5a3b6e76c6dd804abfaa15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 4,
    "total_chunks": 34
  },
  {
    "id": "17d83d74942e086e6bb54317499f45bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 5,
    "total_chunks": 34
  },
  {
    "id": "3ec5fd91d29f98e8a366d41aac87d43c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 6,
    "total_chunks": 34
  },
  {
    "id": "0e3dfe61e2aefefe433f60459f1e8007",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 565,
    "chunk_index": 7,
    "total_chunks": 34
  },
  {
    "id": "4b62879873d695c4b4bc7fb4c07ee37d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 8,
    "total_chunks": 34
  },
  {
    "id": "ce01ccbbfb053f3d0470ced64457c0e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 9,
    "total_chunks": 34
  },
  {
    "id": "8d5dd454b9e432b26b35ae7da72e53f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class to achieve this --hints-- You should declare a rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/);\nYour rangeRegex should use a character class in the capture group",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 599,
    "chunk_index": 10,
    "total_chunks": 34
  },
  {
    "id": "587fc2c15704a2e5dcf1e44e7c1a3276",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeRegex variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 11,
    "total_chunks": 34
  },
  {
    "id": "26367cfc6eaaeec92942f3ad00d42cfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 12,
    "total_chunks": 34
  },
  {
    "id": "7cddbec8f9becb77f142a210ed3d6b51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 13,
    "total_chunks": 34
  },
  {
    "id": "d550bf75a2daa54e430e37cc0e1733c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 673,
    "chunk_index": 14,
    "total_chunks": 34
  },
  {
    "id": "81d207764da321b025e956708343cb8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 15,
    "total_chunks": 34
  },
  {
    "id": "341c2408665eb87725e70131e353eb2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 16,
    "total_chunks": 34
  },
  {
    "id": "3ae7e4343bab7e69873b156274213879",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 17,
    "total_chunks": 34
  },
  {
    "id": "f7e4082fbec06ec30c979ede7de0d02d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 716,
    "chunk_index": 18,
    "total_chunks": 34
  },
  {
    "id": "a775cd4ab71fbce6bd3ba4f45b0c28c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 724,
    "chunk_index": 19,
    "total_chunks": 34
  },
  {
    "id": "e2d6f79dd6209a3ec3a7c42f4d06235e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "after your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/);\nYour rangeRegex should use a character class to match A through J",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 738,
    "chunk_index": 20,
    "total_chunks": 34
  },
  {
    "id": "363442d5bff91c65a816a6cb580e7f9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "value\\s*; \\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 21,
    "total_chunks": 34
  },
  {
    "id": "3a4fe057b18d81792174758cc9cbdf88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*( :var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 680,
    "chunk_index": 22,
    "total_chunks": 34
  },
  {
    "id": "a66a08256a7f4591458fe1a3dd7ef218",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 699,
    "chunk_index": 23,
    "total_chunks": 34
  },
  {
    "id": "8b69ea8ae6cdcdb34a781f176ed613bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 24,
    "total_chunks": 34
  },
  {
    "id": "6d6dea898266c7fe5e1f53317aacf3a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 720,
    "chunk_index": 25,
    "total_chunks": 34
  },
  {
    "id": "5ac910dbb089a7f21a4ef72faa8d2d34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 725,
    "chunk_index": 26,
    "total_chunks": 34
  },
  {
    "id": "c75fffa046e04998e521610ad7216b35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 729,
    "chunk_index": 27,
    "total_chunks": 34
  },
  {
    "id": "c118e9f5fc8f9767f1a6437a028b03c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 755,
    "chunk_index": 28,
    "total_chunks": 34
  },
  {
    "id": "ceb437b78516e1776a9d89491bbe5910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":var|let|const)\\s+rangeRegex/); You should use const to declare your rangeRegex variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex/); Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\/\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 811,
    "chunk_index": 29,
    "total_chunks": 34
  },
  {
    "id": "f06bfe7492344499b6b32b5a50c8130d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your rangeRegex variable should be a regular expression js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/ *\\/\\s*; /); Your rangeRegex should use a capture group js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 30,
    "total_chunks": 34
  },
  {
    "id": "931c2dd12149326fd2722266b6215e1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(*\\)\\/\\s*;/); Your rangeRegex should use a character class in the capture groupjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[*\\]\\)\\/\\s*;/); Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 31,
    "total_chunks": 34
  },
  {
    "id": "c6dadb6670526b63d5052a5ae8833c0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your rangeRegex should use a character class to match A through Jjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 32,
    "total_chunks": 34
  },
  {
    "id": "e6079acfbe7874fd8b35f353a16ec580",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); --fcc-editable-region-- const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); labelclassName = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449849b78f43527be1e8a98.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 33,
    "total_chunks": 34
  },
  {
    "id": "b3c104876fdbcaa78f6f668dc506aa37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498542cab69128ab24e4de\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nAfter matching a cell letter successfully, your rangeRegex needs to match the cell number Cell numbers in your sheet range from 1 to 99 Add a capture group after your letter capture group Your new capture group should match one or two digits – the first digit should be 1 through 9, and the second digit should be 0 through 9 The second digit should be optional --hints--\nYou should add a second capture group to your rangeRegex js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /);\nYour second capture group should have a character class js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /);\nYour second capture group should have two character classes js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 39
  },
  {
    "id": "fd0c0835b55fd27012759837e4f24ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should be 1 through 9, and the second digit should be 0 through 9 The second digit should be optional --hints-- You should add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 39
  },
  {
    "id": "676c213dce85301fd0a917af5d34100e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "second digit should be 0 through 9 The second digit should be optional --hints-- You should add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 39
  },
  {
    "id": "7892f5b731a7c8e17e4cd473533f1793",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should be 0 through 9 The second digit should be optional --hints-- You should add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/);\nYour first new character class should match the digits 1 through 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 3,
    "total_chunks": 39
  },
  {
    "id": "170e30eb37e49bcedb4cd5e4431a78ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 39
  },
  {
    "id": "7460f3ee1258d5f40ba52fadc7b513d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 5,
    "total_chunks": 39
  },
  {
    "id": "975da7b26507a7e0128dc5435d47c826",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 583,
    "chunk_index": 6,
    "total_chunks": 39
  },
  {
    "id": "5506a369cd65fb438261b942db544bf9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 7,
    "total_chunks": 39
  },
  {
    "id": "fe691691d6bb738b30cfb20cf72ce3c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 8,
    "total_chunks": 39
  },
  {
    "id": "221a876b15a40c65dd69461ec4e1807f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 609,
    "chunk_index": 9,
    "total_chunks": 39
  },
  {
    "id": "ace8fe30455c57a81cfa4bfba0baf487",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 613,
    "chunk_index": 10,
    "total_chunks": 39
  },
  {
    "id": "c94f79fec5528ce69e1812fe4c75d449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 11,
    "total_chunks": 39
  },
  {
    "id": "7bf786da4c6f9fd6f8978d7bb1899b57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 644,
    "chunk_index": 12,
    "total_chunks": 39
  },
  {
    "id": "d08f393777ab264408e56c644006a27c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 13,
    "total_chunks": 39
  },
  {
    "id": "f17395e4ad7cc25f3db2b87f810be421",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "add a second capture group to your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/);\nYour second new character class should match the digits 0 through 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 665,
    "chunk_index": 14,
    "total_chunks": 39
  },
  {
    "id": "526571aa02930bf3f330f9104bdbac43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 593,
    "chunk_index": 15,
    "total_chunks": 39
  },
  {
    "id": "bf4fddcacb371695cb8cb195d81a798c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 635,
    "chunk_index": 16,
    "total_chunks": 39
  },
  {
    "id": "ef1d574569a7e4791161a60b710f825e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 653,
    "chunk_index": 17,
    "total_chunks": 39
  },
  {
    "id": "30fe22a994114b882cb684baca1eb896",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 656,
    "chunk_index": 18,
    "total_chunks": 39
  },
  {
    "id": "e2bd2ebdb6170c4e2e2d9f7ee139a5f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 674,
    "chunk_index": 19,
    "total_chunks": 39
  },
  {
    "id": "e5b9f5e4c2671504ab46c19023ad9a72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 20,
    "total_chunks": 39
  },
  {
    "id": "88a70897284c57638f746cecd246a7a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 21,
    "total_chunks": 39
  },
  {
    "id": "0b1ef0c40ee9b6526a2c812dc3966024",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 717,
    "chunk_index": 22,
    "total_chunks": 39
  },
  {
    "id": "bdc4c1e276dcd29e547122f0becc0390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 723,
    "chunk_index": 23,
    "total_chunks": 39
  },
  {
    "id": "accf883c80643144b6db153c5ab6b743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\( *\\)\\/\\s*; /); Your second capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/);\nYour second new character class should be optional",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 732,
    "chunk_index": 24,
    "total_chunks": 39
  },
  {
    "id": "3e7813c566084e2c6babdb99ba7bb280",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 674,
    "chunk_index": 25,
    "total_chunks": 39
  },
  {
    "id": "f3372724d92597d9a3d5584358d46f71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "group should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 736,
    "chunk_index": 26,
    "total_chunks": 39
  },
  {
    "id": "7c759aa0fc6fbd113845d7719d25200f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 756,
    "chunk_index": 27,
    "total_chunks": 39
  },
  {
    "id": "b67120a1e74e8d1a9f24f1e92fe76fda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 759,
    "chunk_index": 28,
    "total_chunks": 39
  },
  {
    "id": "80efe84543d257c8de56e8497ee143b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 777,
    "chunk_index": 29,
    "total_chunks": 39
  },
  {
    "id": "36e45d3a9226f391dd9f5ff77c70a7bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 782,
    "chunk_index": 30,
    "total_chunks": 39
  },
  {
    "id": "21dfe315b81427687e630bdad4de47b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 31,
    "total_chunks": 39
  },
  {
    "id": "b72680b4c86fd29f2ccd8ce821be1df4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 820,
    "chunk_index": 32,
    "total_chunks": 39
  },
  {
    "id": "1c3feb0a8577a48d746488ffe8c7ba61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 826,
    "chunk_index": 33,
    "total_chunks": 39
  },
  {
    "id": "b288501addf9478cdc3c0372633bbdf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should have a character class js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[ *\\]\\ \\)\\/\\s*; /); Your second capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 882,
    "chunk_index": 34,
    "total_chunks": 39
  },
  {
    "id": "634af448df0ebf32bdb26c4f93b046a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture group should have two character classes js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[*\\]\\[ *\\]\\ \\)\\/\\s*;/); Your first new character class should match the digits 1 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 770,
    "chunk_index": 35,
    "total_chunks": 39
  },
  {
    "id": "fcce4c131192b0c8a14a77f73f838020",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[*\\]\\\\)\\/\\s*;/); Your second new character class should match the digits 0 through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 620,
    "chunk_index": 36,
    "total_chunks": 39
  },
  {
    "id": "995d40aff5868c7303d4e3b795ffafe4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "through 9js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); Your second new character class should be optionaljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 37,
    "total_chunks": 39
  },
  {
    "id": "41361a6024b164eda697e907eae20ca6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])/;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498542cab69128ab24e4de.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 38,
    "total_chunks": 39
  },
  {
    "id": "5855f9a58884a4ebcb824d75396992b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498b085028fc30a58bb6a7\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nDeclare a function elemValue which takes a num parameter The function should be empty --hints--\nYou should declare an elemValue variable after your rangeFromString() function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/);\nYou should use const to declare your elemValue variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 47
  },
  {
    "id": "b6f0b8d38c97c2e0ea456ebd7da5715f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498b085028fc30a58bb6a7\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nDeclare a function elemValue which takes a num parameter The function should be empty --hints--\nYou should declare an elemValue variable after your rangeFromString() function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/);\nYou should use const to declare your elemValue variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 1,
    "total_chunks": 47
  },
  {
    "id": "9e51b82817aea6188ca988426343764b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498b085028fc30a58bb6a7\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nDeclare a function elemValue which takes a num parameter The function should be empty --hints--\nYou should declare an elemValue variable after your rangeFromString() function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/);\nYou should use const to declare your elemValue variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 2,
    "total_chunks": 47
  },
  {
    "id": "9973353d21a8a6ce083ab147bd16c2d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498b085028fc30a58bb6a7\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nDeclare a function elemValue which takes a num parameter The function should be empty --hints--\nYou should declare an elemValue variable after your rangeFromString() function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/);\nYou should use const to declare your elemValue variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 3,
    "total_chunks": 47
  },
  {
    "id": "45c251abb7ed2ed7d357002d34972e53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 64498b085028fc30a58bb6a7\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nDeclare a function elemValue which takes a num parameter The function should be empty --hints--\nYou should declare an elemValue variable after your rangeFromString() function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/);\nYou should use const to declare your elemValue variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/);\nYour elemValue variable should be an arrow function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 616,
    "chunk_index": 4,
    "total_chunks": 47
  },
  {
    "id": "00ab359a673f3e36459796bf526658d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "64498b085028fc30a58bb6a7 title: Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 609,
    "chunk_index": 5,
    "total_chunks": 47
  },
  {
    "id": "851d94ffad6f6d26f639dc4b67ff84b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "title: Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 659,
    "chunk_index": 6,
    "total_chunks": 47
  },
  {
    "id": "42fa5ec982b857e29c3448f2121be076",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 678,
    "chunk_index": 7,
    "total_chunks": 47
  },
  {
    "id": "06eb8a75e6618101c04f6d6bc098df62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 681,
    "chunk_index": 8,
    "total_chunks": 47
  },
  {
    "id": "02f970cdec9f801772cdf697b0df2053",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 699,
    "chunk_index": 9,
    "total_chunks": 47
  },
  {
    "id": "ddc4a29168a0c4b9639de053144176b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 10,
    "total_chunks": 47
  },
  {
    "id": "f69222d5843407b1a9d73a118468928e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 11,
    "total_chunks": 47
  },
  {
    "id": "9f734b47e7ec85f2242821420ba4d70c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 742,
    "chunk_index": 12,
    "total_chunks": 47
  },
  {
    "id": "d44f0d04fce4825bb5e06ba5bcc66f60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 763,
    "chunk_index": 13,
    "total_chunks": 47
  },
  {
    "id": "644cf5f1d3f390eb030fcfafd6c547f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 773,
    "chunk_index": 14,
    "total_chunks": 47
  },
  {
    "id": "ca6f291685a9d26524268850d429b37d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 838,
    "chunk_index": 15,
    "total_chunks": 47
  },
  {
    "id": "523a2fb6193e0c9e4fa14f1401d02d33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 851,
    "chunk_index": 16,
    "total_chunks": 47
  },
  {
    "id": "698fa60161c45fa840c33557d57c8bef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 42 challengeType: 0 dashedName: step-42 --description-- Declare a function elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/);\nYour elemValue function should have num as the only parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 876,
    "chunk_index": 17,
    "total_chunks": 47
  },
  {
    "id": "506135a21513543f3512c0895337e87a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "elemValue which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 859,
    "chunk_index": 18,
    "total_chunks": 47
  },
  {
    "id": "1d523e9583c4388e8f9fecdc89a30c23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "which takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 920,
    "chunk_index": 19,
    "total_chunks": 47
  },
  {
    "id": "6f6bd0fa28991646aba8bb18ada57949",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 940,
    "chunk_index": 20,
    "total_chunks": 47
  },
  {
    "id": "5627f3e12305307d0fd8df94599a1a0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 943,
    "chunk_index": 21,
    "total_chunks": 47
  },
  {
    "id": "91b28be332477efd8dae0aee3fe7b046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 961,
    "chunk_index": 22,
    "total_chunks": 47
  },
  {
    "id": "9666ed677c9e008b84aa882da6fa33ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 966,
    "chunk_index": 23,
    "total_chunks": 47
  },
  {
    "id": "1b5d0989d42db23ba45632989c576bee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 970,
    "chunk_index": 24,
    "total_chunks": 47
  },
  {
    "id": "55c87660925c128761f250eb1b2c06c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1004,
    "chunk_index": 25,
    "total_chunks": 47
  },
  {
    "id": "1175e7fca0fdf967604537de3c585ffb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1025,
    "chunk_index": 26,
    "total_chunks": 47
  },
  {
    "id": "6c2c86b277f068a900c939e5bbd90f9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1035,
    "chunk_index": 27,
    "total_chunks": 47
  },
  {
    "id": "f757fe2850d6242cd58512d06d22ba40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1100,
    "chunk_index": 28,
    "total_chunks": 47
  },
  {
    "id": "b3753a07438b22d6f9e2b67cc6aa7228",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes a num parameter The function should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour elemValue function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1133,
    "chunk_index": 29,
    "total_chunks": 47
  },
  {
    "id": "1f7eef941d7422a9b3c3c05513d00b22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1130,
    "chunk_index": 30,
    "total_chunks": 47
  },
  {
    "id": "e3ddad752f3dfa76ac5caca9af7242e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1192,
    "chunk_index": 31,
    "total_chunks": 47
  },
  {
    "id": "6b1a27dedc534a336619e6d2deef90f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1212,
    "chunk_index": 32,
    "total_chunks": 47
  },
  {
    "id": "45e3a46887a3d63e949ec9d3a671ab2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1215,
    "chunk_index": 33,
    "total_chunks": 47
  },
  {
    "id": "5e2f2997bc5041a973eebfcdab532d61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1233,
    "chunk_index": 34,
    "total_chunks": 47
  },
  {
    "id": "2e53fbb55d9a280518bf05a6bbcf33ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1238,
    "chunk_index": 35,
    "total_chunks": 47
  },
  {
    "id": "08d570580f29c25bd961a145c2f25fa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1242,
    "chunk_index": 36,
    "total_chunks": 47
  },
  {
    "id": "28a9ee026ef17c26ad907cae08b00ee0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1276,
    "chunk_index": 37,
    "total_chunks": 47
  },
  {
    "id": "b73d522d27a97a64623a0f53d211a96f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1297,
    "chunk_index": 38,
    "total_chunks": 47
  },
  {
    "id": "ca486c3959660094723fe07f2f62330d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1307,
    "chunk_index": 39,
    "total_chunks": 47
  },
  {
    "id": "2da4a91da7a7c60c9911593a4f6cf6e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1372,
    "chunk_index": 40,
    "total_chunks": 47
  },
  {
    "id": "01b5ee284c49131389d90b9bf1adabaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "empty --hints-- You should declare an elemValue variable after your rangeFromString() function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1459,
    "chunk_index": 41,
    "total_chunks": 47
  },
  {
    "id": "068f9e5f88e642ed38d7db50eb6ba611",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*( :var|let|const)\\s+elemValue/); You should use const to declare your elemValue variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue/); Your elemValue variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1376,
    "chunk_index": 42,
    "total_chunks": 47
  },
  {
    "id": "670f32d4499842b3201be9df668ae1fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your elemValue function should have num as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 974,
    "chunk_index": 43,
    "total_chunks": 47
  },
  {
    "id": "be3c86b991c4fac2da15cd516589d787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your elemValue function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 44,
    "total_chunks": 47
  },
  {
    "id": "06c3a0b4b099dd18e6d6c2861e9dfbfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 45,
    "total_chunks": 47
  },
  {
    "id": "a4c6680b595e6507b7c2dcb0c207e021",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\64498b085028fc30a58bb6a7.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 46,
    "total_chunks": 47
  },
  {
    "id": "da63ce8b3c7e3aff7c4d67e00f2473ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 29
  },
  {
    "id": "dfc59e01c6768a99247fc8e0dfd0688d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 29
  },
  {
    "id": "3d4a2121f2cef4c14b57fe85ffb38b07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 2,
    "total_chunks": 29
  },
  {
    "id": "8cd9e038f1c2f8c8522cb9c0d90228e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 3,
    "total_chunks": 29
  },
  {
    "id": "01407e2c771d897ce1e69d3396c0f136",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 550,
    "chunk_index": 4,
    "total_chunks": 29
  },
  {
    "id": "8f2db285a380a5cafe969d64f8aeeb4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 571,
    "chunk_index": 5,
    "total_chunks": 29
  },
  {
    "id": "af97bf568ca80c09f3c87e387c956da3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 581,
    "chunk_index": 6,
    "total_chunks": 29
  },
  {
    "id": "42716a08c0b4259bb5f82f1ecb6f5dac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 646,
    "chunk_index": 7,
    "total_chunks": 29
  },
  {
    "id": "dbddd3402ae1f90a5194e2dc4d6640ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d09a07241aaab1e777080\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your inner function, return the result of calling idToText with character + num as the argument --hints--\nYour inner function should use an explicit return js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/);\nYour inner function should return the result of calling your idToText function js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/);\nYou should pass character + num as the argument to your idToText function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 728,
    "chunk_index": 8,
    "total_chunks": 29
  },
  {
    "id": "6877cc2f274265598abf9ec04e446403",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "challengeType: 0 dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 9,
    "total_chunks": 29
  },
  {
    "id": "51149f1bd710f369e3135c926350f444",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "0 dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 763,
    "chunk_index": 10,
    "total_chunks": 29
  },
  {
    "id": "004e7e4ae3f9255468be0f1b35cc04f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 11,
    "total_chunks": 29
  },
  {
    "id": "b7d0e3fb64978f0514b8b9a9bc18aee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 787,
    "chunk_index": 12,
    "total_chunks": 29
  },
  {
    "id": "7db7703930159d04e63872b6a757682b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 805,
    "chunk_index": 13,
    "total_chunks": 29
  },
  {
    "id": "a729e0061185e14816abf837458b78bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 810,
    "chunk_index": 14,
    "total_chunks": 29
  },
  {
    "id": "6dc1aa6e140fc6786e4717d4144e1004",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 15,
    "total_chunks": 29
  },
  {
    "id": "29b80d3a97bc70296fe37ad347cf7f46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 848,
    "chunk_index": 16,
    "total_chunks": 29
  },
  {
    "id": "5de3a00dad66f55d0f71837076a10519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 869,
    "chunk_index": 17,
    "total_chunks": 29
  },
  {
    "id": "b6e0338a14c64a27587c04ba17b61104",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 879,
    "chunk_index": 18,
    "total_chunks": 29
  },
  {
    "id": "d1e232d7316ec04da9122e7b2a85bd60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 19,
    "total_chunks": 29
  },
  {
    "id": "ede36026d03dfa11b5fa2dff4f836188",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 1024,
    "chunk_index": 20,
    "total_chunks": 29
  },
  {
    "id": "40e8106019f29084cebe3a473afed7fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 1030,
    "chunk_index": 21,
    "total_chunks": 29
  },
  {
    "id": "1bdb4eed93061c5df475a54d2820b2eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-44 --description-- In your inner function, return the result of calling idToText with character + num as the argument --hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 1093,
    "chunk_index": 22,
    "total_chunks": 29
  },
  {
    "id": "cf85f05b011556c84c5a853b734417ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your inner function should use an explicit return js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return/); Your inner function should return the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 1110,
    "chunk_index": 23,
    "total_chunks": 29
  },
  {
    "id": "30390436933bff07849b37854315eac2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling your idToText function js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(/); You should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 803,
    "chunk_index": 24,
    "total_chunks": 29
  },
  {
    "id": "7bb549e0019a65e254e3ca0d456eac7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should pass character + num as the argument to your idToText functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 25,
    "total_chunks": 29
  },
  {
    "id": "2c7ff1c4392ec796ea9b609a1267e167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 26,
    "total_chunks": 29
  },
  {
    "id": "eed2989d57a7726b621b30bdedd52dc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\n}\nreturn inner;\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 27,
    "total_chunks": 29
  },
  {
    "id": "086d5c6354d393aa2e5ffdd550d42a57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d09a07241aaab1e777080.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 28,
    "total_chunks": 29
  },
  {
    "id": "aa1d26dfcf442abfe25d0bbd7c12d11c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 61
  },
  {
    "id": "ae096e636ff682048395a5734c9ca691",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 1,
    "total_chunks": 61
  },
  {
    "id": "d4d843f26f1d2149d1936314d064d29b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 550,
    "chunk_index": 2,
    "total_chunks": 61
  },
  {
    "id": "a15644c941618e2437dea2448df35c2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 560,
    "chunk_index": 3,
    "total_chunks": 61
  },
  {
    "id": "37f3f570ec4879419f1d5a0d7c0cd102",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 4,
    "total_chunks": 61
  },
  {
    "id": "9215388c697e12f43c016d1de08646a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0889c6ff4baa46ac1c50\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nIn your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints--\nYou should declare an inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/);\nYou should use const to declare your inner variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/);\nYour inner variable should be an arrow function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 669,
    "chunk_index": 5,
    "total_chunks": 61
  },
  {
    "id": "d121e6cbc19de5da3726e8a28b01523c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d0889c6ff4baa46ac1c50 title: Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 6,
    "total_chunks": 61
  },
  {
    "id": "1d04303465a1a92f4ca548de65e473b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "title: Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 710,
    "chunk_index": 7,
    "total_chunks": 61
  },
  {
    "id": "8b09f96bdcc1047aa1061a957c9f0427",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 729,
    "chunk_index": 8,
    "total_chunks": 61
  },
  {
    "id": "6588f32a67246151ec7fb3420d24c411",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 732,
    "chunk_index": 9,
    "total_chunks": 61
  },
  {
    "id": "9c8a2e83b086e1ef31c66faf6aa60cad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 750,
    "chunk_index": 10,
    "total_chunks": 61
  },
  {
    "id": "13dd5407aeefcee40267eea1246dcb39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 755,
    "chunk_index": 11,
    "total_chunks": 61
  },
  {
    "id": "94ce4ce04c5b71c949f831e1005af838",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 759,
    "chunk_index": 12,
    "total_chunks": 61
  },
  {
    "id": "3a37003103ecce5ec2c06d2da0c20747",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 793,
    "chunk_index": 13,
    "total_chunks": 61
  },
  {
    "id": "f380307a48b3075d413567028ec7434c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 14,
    "total_chunks": 61
  },
  {
    "id": "450048619e8bbdb1991a96d7abe85279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 824,
    "chunk_index": 15,
    "total_chunks": 61
  },
  {
    "id": "79c36928a7b572379a0bacdffea07519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 889,
    "chunk_index": 16,
    "total_chunks": 61
  },
  {
    "id": "b5839f87c25a0650c6983421712e2778",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 929,
    "chunk_index": 17,
    "total_chunks": 61
  },
  {
    "id": "55901365e04f9881189c3b9b55ab4762",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 43 challengeType: 0 dashedName: step-43 --description-- In your elemValue function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/);\nYour inner function should have character as the only parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 953,
    "chunk_index": 18,
    "total_chunks": 61
  },
  {
    "id": "c1669e1c8447b05fd58d000d9d39ed88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function, declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 935,
    "chunk_index": 19,
    "total_chunks": 61
  },
  {
    "id": "4168e32a71f2e6767e571092a8868caa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 996,
    "chunk_index": 20,
    "total_chunks": 61
  },
  {
    "id": "fe512601e7a7b4d19f4ebfaccff0b059",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1016,
    "chunk_index": 21,
    "total_chunks": 61
  },
  {
    "id": "dbf9ab4ca1e376b1de57f3848be99b28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1019,
    "chunk_index": 22,
    "total_chunks": 61
  },
  {
    "id": "d57480287e61c4bc892110a37eab54a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1037,
    "chunk_index": 23,
    "total_chunks": 61
  },
  {
    "id": "84e074139215a4c60decb4f847ace481",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1042,
    "chunk_index": 24,
    "total_chunks": 61
  },
  {
    "id": "77f78f2d3ea6b9349a9f8fbf1412dbd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1046,
    "chunk_index": 25,
    "total_chunks": 61
  },
  {
    "id": "98f8d37a3c00376bf7180a43920d437d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1080,
    "chunk_index": 26,
    "total_chunks": 61
  },
  {
    "id": "3db2cf9b1a8eac61df23eee79461b143",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1101,
    "chunk_index": 27,
    "total_chunks": 61
  },
  {
    "id": "94cee59fa54b9265230b7dd3d4caf8a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1111,
    "chunk_index": 28,
    "total_chunks": 61
  },
  {
    "id": "24ff76598f0375cca504db40413d2b4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1176,
    "chunk_index": 29,
    "total_chunks": 61
  },
  {
    "id": "2b7ac33aa937ae0ddb27ee9436ae6b02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called inner which takes a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/);\nYour inner function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1236,
    "chunk_index": 30,
    "total_chunks": 61
  },
  {
    "id": "df609f6427ebbf9493df07f031f28cf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1233,
    "chunk_index": 31,
    "total_chunks": 61
  },
  {
    "id": "9144e534ec8d21264f720f95255c1817",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "character parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1295,
    "chunk_index": 32,
    "total_chunks": 61
  },
  {
    "id": "49bdd49d89d66717271ada784804650b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1315,
    "chunk_index": 33,
    "total_chunks": 61
  },
  {
    "id": "fc27b47cccf4cdd5a5bfc21ec1cc339d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1318,
    "chunk_index": 34,
    "total_chunks": 61
  },
  {
    "id": "1db4828f5316a74d8047da6272e47113",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1336,
    "chunk_index": 35,
    "total_chunks": 61
  },
  {
    "id": "5e603713e067a97645a66f112db80688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1341,
    "chunk_index": 36,
    "total_chunks": 61
  },
  {
    "id": "840b02694c09181b6962514f8df30d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1345,
    "chunk_index": 37,
    "total_chunks": 61
  },
  {
    "id": "7d14921dd2b8d30572dc9c9d4cb648ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1379,
    "chunk_index": 38,
    "total_chunks": 61
  },
  {
    "id": "066c29b56e9c8b4422d38ec04b66be0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1400,
    "chunk_index": 39,
    "total_chunks": 61
  },
  {
    "id": "5b26b9ab4c9b65950934e765bf926932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1410,
    "chunk_index": 40,
    "total_chunks": 61
  },
  {
    "id": "c07e3a0a87ecd26a55436c36337f2882",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1475,
    "chunk_index": 41,
    "total_chunks": 61
  },
  {
    "id": "6e416d6a85de962e545d0f7ea1db92c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter Then, return your inner function --hints-- You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/);\nYou should explicitly return your inner function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1542,
    "chunk_index": 42,
    "total_chunks": 61
  },
  {
    "id": "07efd8d8d3dd01c05aabfe51af85e30a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1535,
    "chunk_index": 43,
    "total_chunks": 61
  },
  {
    "id": "a85522d703c88b09761a5b1e7d35533f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1597,
    "chunk_index": 44,
    "total_chunks": 61
  },
  {
    "id": "eb6413f69a303771670c043d85af9ffc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1617,
    "chunk_index": 45,
    "total_chunks": 61
  },
  {
    "id": "fd1360798538fee5e1fac302bae040e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1620,
    "chunk_index": 46,
    "total_chunks": 61
  },
  {
    "id": "634eacde77f5ea2868bf702612f32ab0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1638,
    "chunk_index": 47,
    "total_chunks": 61
  },
  {
    "id": "db3cc767651455a01bd19653025e4004",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1643,
    "chunk_index": 48,
    "total_chunks": 61
  },
  {
    "id": "267ee39b9cdf71dad7068cd19d32f368",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1647,
    "chunk_index": 49,
    "total_chunks": 61
  },
  {
    "id": "3097adc7f907c232d3a9ab188633b995",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1681,
    "chunk_index": 50,
    "total_chunks": 61
  },
  {
    "id": "a2610dd1592cc0d95dd7a03728a6a00b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1702,
    "chunk_index": 51,
    "total_chunks": 61
  },
  {
    "id": "de8de5bd3043e5f3ce73a1bc0efc911a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1712,
    "chunk_index": 52,
    "total_chunks": 61
  },
  {
    "id": "8e0b45d39060e820d84b71ac2fc4b662",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1777,
    "chunk_index": 53,
    "total_chunks": 61
  },
  {
    "id": "3a37ebb3cb44157c951dabdbf1f0eb2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1839,
    "chunk_index": 54,
    "total_chunks": 61
  },
  {
    "id": "9354d200cb1023d8bd083a2c6644b63d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+inner/); You should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;\\s*return\\s+inner/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1902,
    "chunk_index": 55,
    "total_chunks": 61
  },
  {
    "id": "7e200b2df7b5f9e0d980e9783dcba5f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your inner variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner/); Your inner variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1650,
    "chunk_index": 56,
    "total_chunks": 61
  },
  {
    "id": "b6a0923ce3b79b78507cfbd824cbe5b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "inner function should have character as the only parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 1071,
    "chunk_index": 57,
    "total_chunks": 61
  },
  {
    "id": "7d476ca8c3346f5332b793257d800b13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}/); You should explicitly return your inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 771,
    "chunk_index": 58,
    "total_chunks": 61
  },
  {
    "id": "a1c63c2a8da7f6db912b3f9a7cbf5669",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "inner functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*\\}\\s*;\\s*return\\s+inner/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 59,
    "total_chunks": 61
  },
  {
    "id": "a3695415bc0a395bf145e2e4bd7f3fa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0889c6ff4baa46ac1c50.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 60,
    "total_chunks": 61
  },
  {
    "id": "4345051224ff244d50cae78bda5a3bd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 6449876e7aae0d2f8257a497\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nDeclare a rangeFromString arrow function that takes two parameters, num1 and num2 The function should implicitly return the result of calling range with num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints--\nYou should declare a rangeFromString variable after your rangeRegex js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/);\nYou should use const to declare your rangeFromString variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 83
  },
  {
    "id": "5778bb74045c73d2f10d1a829856d426",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num2 The function should implicitly return the result of calling range with num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/);\nYour rangeFromString variable should be an arrow function js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 83
  },
  {
    "id": "3fdca462892f1466bb2077a3c93dfc84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 520,
    "chunk_index": 2,
    "total_chunks": 83
  },
  {
    "id": "fda8fcb4051c6409842773a20bc30120",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 3,
    "total_chunks": 83
  },
  {
    "id": "b586e648d1f1aab00c4d73d2afe710e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 543,
    "chunk_index": 4,
    "total_chunks": 83
  },
  {
    "id": "f447c8113fc8849f9fca96cd4ac15b84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 5,
    "total_chunks": 83
  },
  {
    "id": "3a926d0f33e8ecbeee442eeda3a6fe4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 566,
    "chunk_index": 6,
    "total_chunks": 83
  },
  {
    "id": "9b5e446bc7170ee38e2dc57092126baa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 570,
    "chunk_index": 7,
    "total_chunks": 83
  },
  {
    "id": "3291847fac08316b5eb6c0849914dd8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 8,
    "total_chunks": 83
  },
  {
    "id": "999ca5494c35fb22a8a1d9f826552cad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 9,
    "total_chunks": 83
  },
  {
    "id": "202e94581a4e564369600d70abf42400",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 635,
    "chunk_index": 10,
    "total_chunks": 83
  },
  {
    "id": "938cdbaa3dc27f676a3a87168e91a90c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 648,
    "chunk_index": 11,
    "total_chunks": 83
  },
  {
    "id": "d83d8ab468a4718b5d52ba7aef6ccc3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num1 and num2 as arguments To be safe, parse num1 and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/);\nYour rangeFromString function should have num1 as the first parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 667,
    "chunk_index": 12,
    "total_chunks": 83
  },
  {
    "id": "2b753b5f87624767d771bb256d45601b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 656,
    "chunk_index": 13,
    "total_chunks": 83
  },
  {
    "id": "bc1d46448437f58a28432f38c2c0d698",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num2 into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 718,
    "chunk_index": 14,
    "total_chunks": 83
  },
  {
    "id": "4206716e05f8fcb1d3bbb34f241d1bd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 15,
    "total_chunks": 83
  },
  {
    "id": "38582274050b40f5d5ed28b24f536b6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 740,
    "chunk_index": 16,
    "total_chunks": 83
  },
  {
    "id": "1e0a773dae5afccfc8416b38cb359049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 758,
    "chunk_index": 17,
    "total_chunks": 83
  },
  {
    "id": "fa447d277d34cc27746a4b747a573c04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 763,
    "chunk_index": 18,
    "total_chunks": 83
  },
  {
    "id": "6c7d415f8f41bcdfd4ae577deed2cdc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 19,
    "total_chunks": 83
  },
  {
    "id": "c04fda8970f3a9b2c5baae4d9c321aa1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 801,
    "chunk_index": 20,
    "total_chunks": 83
  },
  {
    "id": "8f10c065ca68c220efc89714e85467b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 822,
    "chunk_index": 21,
    "total_chunks": 83
  },
  {
    "id": "bdde1f0ff11727a1ddda439bd9ab32dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 832,
    "chunk_index": 22,
    "total_chunks": 83
  },
  {
    "id": "be63fcf13ebe1208d6684e4b676fdb04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "into integers as you pass them into range --hints-- You should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/);\nYour rangeFromString function should have num2 as the second parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 862,
    "chunk_index": 23,
    "total_chunks": 83
  },
  {
    "id": "630ec34db8283ab7012a27754eca29cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 24,
    "total_chunks": 83
  },
  {
    "id": "40a92e9124af0668fbe1ec4a6ed439cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 915,
    "chunk_index": 25,
    "total_chunks": 83
  },
  {
    "id": "4c423d713397457f3d3e43d48b29104c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 935,
    "chunk_index": 26,
    "total_chunks": 83
  },
  {
    "id": "daaa0e3e0dfea9b1f116c7f2e8ba9a80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 938,
    "chunk_index": 27,
    "total_chunks": 83
  },
  {
    "id": "1e62b4fecfbb2526aa62848c5243dfbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 956,
    "chunk_index": 28,
    "total_chunks": 83
  },
  {
    "id": "9a0da234e3136791cf19bcd9cb1a81f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 961,
    "chunk_index": 29,
    "total_chunks": 83
  },
  {
    "id": "3f77df097a305674a0cc836219019fcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 965,
    "chunk_index": 30,
    "total_chunks": 83
  },
  {
    "id": "96d6cb7f6db78f74e8ee859fba5ad6f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 999,
    "chunk_index": 31,
    "total_chunks": 83
  },
  {
    "id": "6fc713bb1d0c443de4d4455ba73d8693",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1020,
    "chunk_index": 32,
    "total_chunks": 83
  },
  {
    "id": "c73e2d5253042c853c4b4160c050cbd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1030,
    "chunk_index": 33,
    "total_chunks": 83
  },
  {
    "id": "73831f0f7292f7fb0c52aa0222862bee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeFromString variable after your rangeRegex js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/);\nYour rangeFromString function should use an implicit return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1069,
    "chunk_index": 34,
    "total_chunks": 83
  },
  {
    "id": "896f29724f63cc9fc95a76bb972b843c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1062,
    "chunk_index": 35,
    "total_chunks": 83
  },
  {
    "id": "5dccc7e9640b3774bb8e936a1bedf97f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1123,
    "chunk_index": 36,
    "total_chunks": 83
  },
  {
    "id": "6d106c0230290d9ac34dff22634d0569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1083,
    "chunk_index": 37,
    "total_chunks": 83
  },
  {
    "id": "f273e2f681fed992b76588855256f0f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1086,
    "chunk_index": 38,
    "total_chunks": 83
  },
  {
    "id": "85da9365032b081c3441dde91384255b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1104,
    "chunk_index": 39,
    "total_chunks": 83
  },
  {
    "id": "0f4bd75bc417704eb1d9127442c28a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1109,
    "chunk_index": 40,
    "total_chunks": 83
  },
  {
    "id": "f5cf51e10971df562d76ee4e117f21c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1113,
    "chunk_index": 41,
    "total_chunks": 83
  },
  {
    "id": "797c44adb46a85103836fe414c00daac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1147,
    "chunk_index": 42,
    "total_chunks": 83
  },
  {
    "id": "3bf552534bbaedc0ad9835f2772ad1c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1168,
    "chunk_index": 43,
    "total_chunks": 83
  },
  {
    "id": "a62829163d18a32f6a773b4ca2c632d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1178,
    "chunk_index": 44,
    "total_chunks": 83
  },
  {
    "id": "148e7c1d77356f7812800a951cc11032",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*( :var|let|const)\\s+rangeFromString/); You should use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour rangeFromString function should return the result of calling your range function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1224,
    "chunk_index": 45,
    "total_chunks": 83
  },
  {
    "id": "00135f25a3c88e3e13b029ecd515d7af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "use const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1090,
    "chunk_index": 46,
    "total_chunks": 83
  },
  {
    "id": "01350273587ed749fbc162e66d7912e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1152,
    "chunk_index": 47,
    "total_chunks": 83
  },
  {
    "id": "d1a2579cfd235580ded0d51fc2e666e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1172,
    "chunk_index": 48,
    "total_chunks": 83
  },
  {
    "id": "c553aa9a9a597328c692fde8f80848b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1175,
    "chunk_index": 49,
    "total_chunks": 83
  },
  {
    "id": "e50044d94c0ec337c0540412ecc02301",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1193,
    "chunk_index": 50,
    "total_chunks": 83
  },
  {
    "id": "7976dd4c30f4019ce455c5a3ff5c5946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1198,
    "chunk_index": 51,
    "total_chunks": 83
  },
  {
    "id": "547c400d2057f5eef0c221f9296efea5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1202,
    "chunk_index": 52,
    "total_chunks": 83
  },
  {
    "id": "969897ca765716f7b1eed0aca3702d30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1236,
    "chunk_index": 53,
    "total_chunks": 83
  },
  {
    "id": "34302bd5231024cad28fcec99399b547",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1257,
    "chunk_index": 54,
    "total_chunks": 83
  },
  {
    "id": "1733699a37d3a4812218f34976939a6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1267,
    "chunk_index": 55,
    "total_chunks": 83
  },
  {
    "id": "3b7e3f4bb1197f360f3976e6e12de383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to declare your rangeFromString variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString/); Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/);\nYou should call parseInt with num1 as an argument and pass the result to the range call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1320,
    "chunk_index": 56,
    "total_chunks": 83
  },
  {
    "id": "193f2f15e115c3c5209d82dac153288c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1123,
    "chunk_index": 57,
    "total_chunks": 83
  },
  {
    "id": "be406b0f6ca035e3f3513e8cfd41b409",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeFromString variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1185,
    "chunk_index": 58,
    "total_chunks": 83
  },
  {
    "id": "52a54c09bc8fbb635a3dad91e2a9e58f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1204,
    "chunk_index": 59,
    "total_chunks": 83
  },
  {
    "id": "65293e32f8661663a5bf6e87d652586a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1207,
    "chunk_index": 60,
    "total_chunks": 83
  },
  {
    "id": "2aadb7850b965516edeb7d2634d49a2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1225,
    "chunk_index": 61,
    "total_chunks": 83
  },
  {
    "id": "077adf6bd665c57d391f29f7d414887f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1230,
    "chunk_index": 62,
    "total_chunks": 83
  },
  {
    "id": "667f79a1af8d12c9a64e1d6f8660c50e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1234,
    "chunk_index": 63,
    "total_chunks": 83
  },
  {
    "id": "274cea88eb086dbeb58a583ec9940a53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1268,
    "chunk_index": 64,
    "total_chunks": 83
  },
  {
    "id": "9c95f494e28fcd11411952359ecbed39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1289,
    "chunk_index": 65,
    "total_chunks": 83
  },
  {
    "id": "91b3755e438492c39fa1bcc47246b15f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1299,
    "chunk_index": 66,
    "total_chunks": 83
  },
  {
    "id": "28845ce6133c5067c4fc1d77650e47d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should be an arrow function js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(*\\)\\s*=>/); Your rangeFromString function should have num1 as the first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/);\nYou should call parseInt with num2 as the argument and pass the result to the range call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1363,
    "chunk_index": 67,
    "total_chunks": 83
  },
  {
    "id": "fb067ceac0f348de90ce5cc41b285149",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "first parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1148,
    "chunk_index": 68,
    "total_chunks": 83
  },
  {
    "id": "2845be43f3a39553d1e90ce9fd8ec07c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1210,
    "chunk_index": 69,
    "total_chunks": 83
  },
  {
    "id": "bbcc158185e23f57d76390e0a694233f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1229,
    "chunk_index": 70,
    "total_chunks": 83
  },
  {
    "id": "b7ba45b27c8129bbdf802210dbc34480",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1232,
    "chunk_index": 71,
    "total_chunks": 83
  },
  {
    "id": "e45b7dbc02ceccf25991655a3e7a211f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1250,
    "chunk_index": 72,
    "total_chunks": 83
  },
  {
    "id": "8fd8f43891ea4efbd9d99e7e9c1bf995",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1255,
    "chunk_index": 73,
    "total_chunks": 83
  },
  {
    "id": "bd5320eb6117fb20fda38b46541809f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1259,
    "chunk_index": 74,
    "total_chunks": 83
  },
  {
    "id": "3104b82a32e7f2a4248cd1cdf9fcf6f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1293,
    "chunk_index": 75,
    "total_chunks": 83
  },
  {
    "id": "22bc852c429a56e7231c6d0854d5cb4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1314,
    "chunk_index": 76,
    "total_chunks": 83
  },
  {
    "id": "b4871652d9863f966ce1ed88f62cd903",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1324,
    "chunk_index": 77,
    "total_chunks": 83
  },
  {
    "id": "763a46d9fd5e81d57e23fac579e9be78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1/); Your rangeFromString function should have num2 as the second parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>/); Your rangeFromString function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1442,
    "chunk_index": 78,
    "total_chunks": 83
  },
  {
    "id": "72ecb5bc77bf93e270f8425e63332434",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your rangeFromString function should return the result of calling your range functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(/); You should call parseInt with num1 as an argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 79,
    "total_chunks": 83
  },
  {
    "id": "769c8695ee7f4e00eec6b8280443bce0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)/); You should call parseInt with num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 80,
    "total_chunks": 83
  },
  {
    "id": "52f931f4ccc8b854e7702e713dfdd31e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num2 as the argument and pass the result to the range calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 81,
    "total_chunks": 83
  },
  {
    "id": "2c2ab1a1b0b07a5a5dd2e0974c5fe70a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start)map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\6449876e7aae0d2f8257a497.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 82,
    "total_chunks": 83
  },
  {
    "id": "9b009e14fae4a9e9b1da13af4494061b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "9e5506a64b7c03e8b0015130cdedc080",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "2596799d1726d4dc782d5af32cffe2bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "48fab2f9ce7c14bd7747216b085b2cfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 575,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "db70905cb251dab706aaafdf8aa87ab4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "c4473e7d4add7ababbfd51c4f351d21d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 599,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "7b60b0b3343d0f696b96ae969dfbae18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "a1bf1f6e219be8ba2773f5fd37c4414f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "612d6fec2c29dc318e82c657c192d6a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 626,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "82c7c47008b70d096aaeaa3eb82800f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 660,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "ecdb3a7aa4bad55b848db890ab37352d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 681,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "0972fa2718b771ea0dfb34a37a4a21c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "1da57a217e51ae20b0956cb0efc96b1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 756,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "fbbb28280bde597f0c23d4466019c1a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 836,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "72da8a2b4ee0140a0220f484c1583535",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "db3dd3389b881ea84075e76bf47d85d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 851,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "7f4570dadb3743e5eb78a3fd17bd0f9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0db5175974ad8633b71c\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nYour inner functions can also return a function Using the same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints--\nYour inner arrow function should return another arrow function with a num parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/);\nYour inner-most arrow function should be emptyjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 977,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "584272a8539d01eb22b13ec668de4c26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "same arrow syntax, update your addCharacters function to return a third function which takes a num parameter --hints-- Your inner arrow function should return another arrow function with a num parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your inner-most arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 972,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "247d8609290ff3de97735af84e8862a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a num parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your inner-most arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 962,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "c8013be7440bba9b98fbf23752bd8270",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>/); Your inner-most arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 797,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "47d4a57738f9a2dfcdc2a0f658481b74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "393d2f1622852c4d51271dead194da59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 570,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "495307941ba5efa0068c8e229d7babff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\nreturn idToText(character + num);\n}\nreturn inner;\n}\nconst addCharacters = character1 => character2 => {\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "7810b3f4a90a35321b2389b1995256dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "addCharacters = character1 => character2 => { } } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; inputariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0db5175974ad8633b71c.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "fb67db48ab7960710e942b81cf91c5c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0d20108440acc95a6b32\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nIn your elemValue function, you explicitly declared a function called inner and returned it However, because you are using arrow syntax, you can implicitly return a function For example:\njs\nconst curry = soup => veggies => {};\ncurry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints--\nYour addCharacters function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 38
  },
  {
    "id": "834a33131acf3c4f039cc6e58d0d0ca1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "can implicitly return a function For example: js const curry = soup => veggies => {}; curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/);\nYour addCharacters function should return an arrow function which has a character2 parameter js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 38
  },
  {
    "id": "da2d45b3447b9ecd339b5f476d683fdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "{}; curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 518,
    "chunk_index": 2,
    "total_chunks": 38
  },
  {
    "id": "6893c9b6862440de3d01d8fb99572c68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 3,
    "total_chunks": 38
  },
  {
    "id": "f2f12f7f3921bd76c6e8ccd46c87ad6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 4,
    "total_chunks": 38
  },
  {
    "id": "e316945c34d061e36e7b9c91bf0b8cb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 559,
    "chunk_index": 5,
    "total_chunks": 38
  },
  {
    "id": "a7c4713feaa103849558ef3f4d6f9e53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 6,
    "total_chunks": 38
  },
  {
    "id": "619669b0bac5bade5a916ad2d3c36a85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 568,
    "chunk_index": 7,
    "total_chunks": 38
  },
  {
    "id": "3efcbd5f1aedceb8276e754e293a3346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 8,
    "total_chunks": 38
  },
  {
    "id": "50c74db8d73afa3636cbbef79bb255d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 623,
    "chunk_index": 9,
    "total_chunks": 38
  },
  {
    "id": "0920767a89e7c70a04f4cc3f0cf2d67c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 633,
    "chunk_index": 10,
    "total_chunks": 38
  },
  {
    "id": "e7c915c4140220ff54e1e293010b6c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 11,
    "total_chunks": 38
  },
  {
    "id": "48fbfa41cc949d67ca27ac8bc36e5c3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 778,
    "chunk_index": 12,
    "total_chunks": 38
  },
  {
    "id": "83f44c7a55a94fd7210fd82f7bcc934d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 13,
    "total_chunks": 38
  },
  {
    "id": "aadb4b3e76f309e56fff4aba7361d94e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 793,
    "chunk_index": 14,
    "total_chunks": 38
  },
  {
    "id": "18255dff432cd4e8e9a4dfba40a65d98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "curry is a function which takes a soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/);\nYour inner arrow function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 15,
    "total_chunks": 38
  },
  {
    "id": "eb585b4ed9105985fe0d45d3ab6f5218",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "soup parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 845,
    "chunk_index": 16,
    "total_chunks": 38
  },
  {
    "id": "7b794580d454adb6d5d0fdcd40e025ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "parameter and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 907,
    "chunk_index": 17,
    "total_chunks": 38
  },
  {
    "id": "a7c1d481357aec8806ce842dd10ffd43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 927,
    "chunk_index": 18,
    "total_chunks": 38
  },
  {
    "id": "91c4658b46e1aa64a298ef377713184a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 930,
    "chunk_index": 19,
    "total_chunks": 38
  },
  {
    "id": "23a1e1ff7bb8396683ba2f86ce85c9e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 948,
    "chunk_index": 20,
    "total_chunks": 38
  },
  {
    "id": "0c3fbf9a2f39c8fd84f4af348d8e07fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 953,
    "chunk_index": 21,
    "total_chunks": 38
  },
  {
    "id": "317edb6b3f9fa1ea3d226dfe97238f81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 957,
    "chunk_index": 22,
    "total_chunks": 38
  },
  {
    "id": "a16d680842aaa6403c537e1bfecb4ea5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 23,
    "total_chunks": 38
  },
  {
    "id": "35e8cdca975eeb224e460b332e8f3acd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1012,
    "chunk_index": 24,
    "total_chunks": 38
  },
  {
    "id": "200e377a20d0a0f6c59e6e52bbbb3df9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1022,
    "chunk_index": 25,
    "total_chunks": 38
  },
  {
    "id": "5ec429eb0a6ccc8a7c3b4937d6c9bba3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1087,
    "chunk_index": 26,
    "total_chunks": 38
  },
  {
    "id": "782dfad1f32159c450334f4980d5aa81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1167,
    "chunk_index": 27,
    "total_chunks": 38
  },
  {
    "id": "6f08e3e55e2be9dfe72d5a6b03dafc33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1173,
    "chunk_index": 28,
    "total_chunks": 38
  },
  {
    "id": "e563e9bc5224a7d4d5984bf38b74b3cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1182,
    "chunk_index": 29,
    "total_chunks": 38
  },
  {
    "id": "a01fc8fb7970e9f19abefd4075209dad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and returns a function which takes a veggies parameter Using this syntax, update your addCharacters function to return an empty function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1293,
    "chunk_index": 30,
    "total_chunks": 38
  },
  {
    "id": "fd75487f8b30f9503156e71d21c29f73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function which takes a character2 parameter --hints-- Your addCharacters function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1318,
    "chunk_index": 31,
    "total_chunks": 38
  },
  {
    "id": "e83f4d477227055391e0c63491f965ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|characters1)\\s*=>\\s*\\{/); Your addCharacters function should return an arrow function which has a character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 1068,
    "chunk_index": 32,
    "total_chunks": 38
  },
  {
    "id": "8ef31f28903de9e13731ddeb4bb6dd7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "character2 parameter js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>/); Your inner arrow function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 937,
    "chunk_index": 33,
    "total_chunks": 38
  },
  {
    "id": "73733274414d784057415c472fa3cf87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 34,
    "total_chunks": 38
  },
  {
    "id": "bc05b797e7c67ee0c137a419c6b86262",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 35,
    "total_chunks": 38
  },
  {
    "id": "0a641a2b34a361c5e23fd833a93b7f2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\nreturn idToText(character + num);\n}\nreturn inner;\n}\nconst addCharacters = character1 => {\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 36,
    "total_chunks": 38
  },
  {
    "id": "89ebef08b9670d4fa561ec4bf9b6a35d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "} const addCharacters = character1 => { } } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; inputariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0d20108440acc95a6b32.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 37,
    "total_chunks": 38
  },
  {
    "id": "a7de4be66477be7ce8ec497b3671a98e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0a022da7bcabf3e3aca3\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nThe concept of returning a function within a function is called currying This approach allows you to create a variable that holds a function to be called later, but with a reference to the parameters of the outer function call For example:\njs\nconst innerOne = elemValue(1);\nconst final = innerOne(\"A\");\ninnerOne would be your inner function, with num set to 1, and final would have the value of the cell with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints--\nYou should declare an addCharacters variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 70
  },
  {
    "id": "5c29aa5eb6d43e2eb951f2b77bcafe43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "inner function, with num set to 1, and final would have the value of the cell with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/);\nYou should use const to declare your addCharacters variable js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 70
  },
  {
    "id": "dd61591dd1b119cc7942a98048c7c03a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "cell with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 70
  },
  {
    "id": "b784ea266fc6b2decff3f2064484bc80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 520,
    "chunk_index": 3,
    "total_chunks": 70
  },
  {
    "id": "1e36d7c10160ff69a3df886d2a93d5b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 4,
    "total_chunks": 70
  },
  {
    "id": "c93334d202cee26caf238dcb9913dce0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 5,
    "total_chunks": 70
  },
  {
    "id": "3175820fbd7e4d251a5c1fd1c295f715",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 546,
    "chunk_index": 6,
    "total_chunks": 70
  },
  {
    "id": "fd31fdc9e1757d4fcecf33d54c3153fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 550,
    "chunk_index": 7,
    "total_chunks": 70
  },
  {
    "id": "a2e43d9b2292dd6ece1911772b7f8643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 8,
    "total_chunks": 70
  },
  {
    "id": "862afaf2a7ee7212265293fbce58e912",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 605,
    "chunk_index": 9,
    "total_chunks": 70
  },
  {
    "id": "2a8aab31c15597a63d62bd18fc4ec590",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 10,
    "total_chunks": 70
  },
  {
    "id": "64341f7f5623edadb5da57fcf73d4705",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 680,
    "chunk_index": 11,
    "total_chunks": 70
  },
  {
    "id": "0c7bbab7a5394b24c7f121051624bd18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 760,
    "chunk_index": 12,
    "total_chunks": 70
  },
  {
    "id": "0dd0748b85d33f1703ebcdb7d7634a1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 766,
    "chunk_index": 13,
    "total_chunks": 70
  },
  {
    "id": "527363c4e6205e7303f30e8599032aa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 14,
    "total_chunks": 70
  },
  {
    "id": "b97b21619b9e767993617fa432fdd90f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with the id of \"A1\" This is possible because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/);\nYour addCharacters variable should be an arrow function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 796,
    "chunk_index": 15,
    "total_chunks": 70
  },
  {
    "id": "5c5a67b7c68e207f9e108f5546b3ae8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "because functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 788,
    "chunk_index": 16,
    "total_chunks": 70
  },
  {
    "id": "1001c19a064c81a73e10aebcdc7b4479",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "functions have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 17,
    "total_chunks": 70
  },
  {
    "id": "5719871e8be1fcbeadea44c55a8e7d3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 870,
    "chunk_index": 18,
    "total_chunks": 70
  },
  {
    "id": "20416402c96d27c98afe05b1f6780860",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 873,
    "chunk_index": 19,
    "total_chunks": 70
  },
  {
    "id": "a84690897358ca05ca0cbcae7eaf74a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 891,
    "chunk_index": 20,
    "total_chunks": 70
  },
  {
    "id": "1dfec9ac5344f2151f5248c39b56d878",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 896,
    "chunk_index": 21,
    "total_chunks": 70
  },
  {
    "id": "cafca3bab4549aa5d28662aa917b14b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 900,
    "chunk_index": 22,
    "total_chunks": 70
  },
  {
    "id": "d945f3c4967d16d17df6f6877fca3eb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 934,
    "chunk_index": 23,
    "total_chunks": 70
  },
  {
    "id": "da4dd6e4864ceaf5abf9a2bc82038657",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 955,
    "chunk_index": 24,
    "total_chunks": 70
  },
  {
    "id": "dc5499065f37dbb0e3297df106b0a265",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 965,
    "chunk_index": 25,
    "total_chunks": 70
  },
  {
    "id": "9cda60a32380a623ad564027a56e9054",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1030,
    "chunk_index": 26,
    "total_chunks": 70
  },
  {
    "id": "b5ad13db981a18064159c4d935a5ad78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1110,
    "chunk_index": 27,
    "total_chunks": 70
  },
  {
    "id": "5a0aa77f6eb62afa5fd5a8ef8f1de8e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1116,
    "chunk_index": 28,
    "total_chunks": 70
  },
  {
    "id": "678cddb341e201b52b251a1b594b0fd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1125,
    "chunk_index": 29,
    "total_chunks": 70
  },
  {
    "id": "7270292c2d34f70efbbf084087bc6474",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1141,
    "chunk_index": 30,
    "total_chunks": 70
  },
  {
    "id": "ee739f909e8e04681ff08ecb700115dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have access to all variables declared at their creation This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/);\nYour addCharacters function should not use an implicit return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1165,
    "chunk_index": 31,
    "total_chunks": 70
  },
  {
    "id": "f24fcbc028e275648bbca26d7b71bfb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "This is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1159,
    "chunk_index": 32,
    "total_chunks": 70
  },
  {
    "id": "463ab00abbac26b6d3257ef4624a7af9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "is called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1221,
    "chunk_index": 33,
    "total_chunks": 70
  },
  {
    "id": "2e21d1b097d38882a5c2ee6188116f46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1241,
    "chunk_index": 34,
    "total_chunks": 70
  },
  {
    "id": "3ecdb4854057d26440345db8a53ff974",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1244,
    "chunk_index": 35,
    "total_chunks": 70
  },
  {
    "id": "100521b4b66156fb34ad989fd2cdbe6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1262,
    "chunk_index": 36,
    "total_chunks": 70
  },
  {
    "id": "c3d8ca2535c1776a5d549ef9a23d92ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1267,
    "chunk_index": 37,
    "total_chunks": 70
  },
  {
    "id": "1943e598251ae373c9ef4df2678db662",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1271,
    "chunk_index": 38,
    "total_chunks": 70
  },
  {
    "id": "0e6e8c699cadbf027246da0ed0477aac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1305,
    "chunk_index": 39,
    "total_chunks": 70
  },
  {
    "id": "ba00cec8b3e4550fe43ccbe9fa398c69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1326,
    "chunk_index": 40,
    "total_chunks": 70
  },
  {
    "id": "e102d0c5dc4f2dc6ca2cec6a1ac40f86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1336,
    "chunk_index": 41,
    "total_chunks": 70
  },
  {
    "id": "5d2c0d0ddbae70e4e14de3bfbd04900d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1401,
    "chunk_index": 42,
    "total_chunks": 70
  },
  {
    "id": "90a971e39121cfb837f98c907160d8f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1481,
    "chunk_index": 43,
    "total_chunks": 70
  },
  {
    "id": "294521c7cf8a67d3801a252cb99f2d81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1487,
    "chunk_index": 44,
    "total_chunks": 70
  },
  {
    "id": "881fcfaf709c7ad7097b135858f567ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1496,
    "chunk_index": 45,
    "total_chunks": 70
  },
  {
    "id": "41e8afeb398843305e244f65effedd23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1512,
    "chunk_index": 46,
    "total_chunks": 70
  },
  {
    "id": "d2a4bb638a33795677bed43c233c4396",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "called closure You'll get some more practice with this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/);\nYour addCharacters function should have a character1 parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1539,
    "chunk_index": 47,
    "total_chunks": 70
  },
  {
    "id": "33f37474945b8263a9d734b18e9afebd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "this Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1533,
    "chunk_index": 48,
    "total_chunks": 70
  },
  {
    "id": "79c16b990200c469e7af7536bb4dc1ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Declare a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1595,
    "chunk_index": 49,
    "total_chunks": 70
  },
  {
    "id": "059abd0e469d14835c0900568573e658",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1615,
    "chunk_index": 50,
    "total_chunks": 70
  },
  {
    "id": "fed83b55759ccdebfa1f586f1458994f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1618,
    "chunk_index": 51,
    "total_chunks": 70
  },
  {
    "id": "d2fb57992da874859ae7cc54a93e2b0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1636,
    "chunk_index": 52,
    "total_chunks": 70
  },
  {
    "id": "913591207d01f7a49edcae33f7bf2538",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1641,
    "chunk_index": 53,
    "total_chunks": 70
  },
  {
    "id": "cc550f924448fa2e65612a4c174e45ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1645,
    "chunk_index": 54,
    "total_chunks": 70
  },
  {
    "id": "69efd111cfc7a556027a72320c82d3ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1679,
    "chunk_index": 55,
    "total_chunks": 70
  },
  {
    "id": "b6701717624c52d17b5d28e742f51c7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1700,
    "chunk_index": 56,
    "total_chunks": 70
  },
  {
    "id": "1ea8d1593942ccfab2b2379659c7dfbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1710,
    "chunk_index": 57,
    "total_chunks": 70
  },
  {
    "id": "4976f41cf948662a0a273e7c33eefabe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1775,
    "chunk_index": 58,
    "total_chunks": 70
  },
  {
    "id": "3e1f06e4084cb00cd7cafcafe4215673",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1855,
    "chunk_index": 59,
    "total_chunks": 70
  },
  {
    "id": "1001662b5766c85a00be536ea32c9782",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1861,
    "chunk_index": 60,
    "total_chunks": 70
  },
  {
    "id": "5a7a73c4586470bd97995b6926ea662c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1870,
    "chunk_index": 61,
    "total_chunks": 70
  },
  {
    "id": "884ea0e2686d236352b155e47d700aee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a function called addCharacters which takes a character1 parameter --hints-- You should declare an addCharacters variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1957,
    "chunk_index": 62,
    "total_chunks": 70
  },
  {
    "id": "adbd6cd9acc4fd4c4648c6db53e5abba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*; \\s*\\}\\s*( :var|let|const)\\s+addCharacters/); You should use const to declare your addCharacters variable js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters/); Your addCharacters variable should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1917,
    "chunk_index": 63,
    "total_chunks": 70
  },
  {
    "id": "4c699f6fd33c590d091082250f15059b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should be an arrow functionjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>/); Your addCharacters function should not use an implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 1270,
    "chunk_index": 64,
    "total_chunks": 70
  },
  {
    "id": "92d522fd6d559c620ff96230ba9b02cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "implicit returnjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{/); Your addCharacters function should have a character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 898,
    "chunk_index": 65,
    "total_chunks": 70
  },
  {
    "id": "5f150704f23697f48c7e2b00010f1c16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 66,
    "total_chunks": 70
  },
  {
    "id": "6e7dfea092e47a2dfb26602f6a15f4c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "character1 parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 532,
    "chunk_index": 67,
    "total_chunks": 70
  },
  {
    "id": "976e92ed73c8eb66f7e0904021810994",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\nreturn idToText(character + num);\n}\nreturn inner;\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 68,
    "total_chunks": 70
  },
  {
    "id": "0b4b6ef75b76248aff671da1e6499ece",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "inner; } } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; inputonchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0a022da7bcabf3e3aca3.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 69,
    "total_chunks": 70
  },
  {
    "id": "f44b739b2d2b8c079cec8203d9802581",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1980018efaaec2b1c28b\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nUse the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints--\nYour elemValue function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour elemValue function should implicitly return an arrow function with a character parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 35
  },
  {
    "id": "9de07226c7115f4241d7ad404d30432d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "49 challengeType: 0 dashedName: step-49 --description-- Use the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 35
  },
  {
    "id": "743b8bd3c479b4e06211c913cf586938",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "49 challengeType: 0 dashedName: step-49 --description-- Use the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 2,
    "total_chunks": 35
  },
  {
    "id": "46c05612275fd520b51e88f32e977c35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "49 challengeType: 0 dashedName: step-49 --description-- Use the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 3,
    "total_chunks": 35
  },
  {
    "id": "3f28062474a554c3f3b6a0c26dc94feb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "49 challengeType: 0 dashedName: step-49 --description-- Use the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 4,
    "total_chunks": 35
  },
  {
    "id": "f982270279aff0078953827f15234a12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "49 challengeType: 0 dashedName: step-49 --description-- Use the same syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/);\nYour inner arrow function should use an implicit return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 649,
    "chunk_index": 5,
    "total_chunks": 35
  },
  {
    "id": "1b6fdc6c4d1b441522299afddc84a4cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "syntax as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 6,
    "total_chunks": 35
  },
  {
    "id": "bc5096ca571a83216ac1b34733f31968",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "as your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 697,
    "chunk_index": 7,
    "total_chunks": 35
  },
  {
    "id": "b099a1c1da5576627932a5618e8010fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 717,
    "chunk_index": 8,
    "total_chunks": 35
  },
  {
    "id": "c11cff4a125fee0c772402504b5adcf7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 720,
    "chunk_index": 9,
    "total_chunks": 35
  },
  {
    "id": "317ef983f1457796f35c90b6dc3939ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 738,
    "chunk_index": 10,
    "total_chunks": 35
  },
  {
    "id": "3073ad2154ac1c7ef8ccd77a7ed09fdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 743,
    "chunk_index": 11,
    "total_chunks": 35
  },
  {
    "id": "d824981cf2601bfe130785f83c2ceb2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 747,
    "chunk_index": 12,
    "total_chunks": 35
  },
  {
    "id": "fdd94ca489d43b6df9333f0de35b8e38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 781,
    "chunk_index": 13,
    "total_chunks": 35
  },
  {
    "id": "cf9b06fb68ca189803295b72d9e559f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 802,
    "chunk_index": 14,
    "total_chunks": 35
  },
  {
    "id": "030ba73732c5c18b1244a99c1ea27d03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 812,
    "chunk_index": 15,
    "total_chunks": 35
  },
  {
    "id": "9031b8c008a31b3bc43569e2f0048034",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 877,
    "chunk_index": 16,
    "total_chunks": 35
  },
  {
    "id": "090eb2de9ccf4d97f7311f8fceb1eeeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your addCharacters function to update your elemValue function It should no longer declare inner, but should return the function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/);\nYour inner arrow function should return the result of calling idToText() with character + num as the argument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 943,
    "chunk_index": 17,
    "total_chunks": 35
  },
  {
    "id": "ff4bae9659ef497c9319fb777f0b4523",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 925,
    "chunk_index": 18,
    "total_chunks": 35
  },
  {
    "id": "e12ca65bbf9b2039b00edfc4860f56db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "implicitly --hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 987,
    "chunk_index": 19,
    "total_chunks": 35
  },
  {
    "id": "99dd8c36fb35baef1a07909e395361af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1007,
    "chunk_index": 20,
    "total_chunks": 35
  },
  {
    "id": "581cf113af5f1579b50e2ad6466accad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1010,
    "chunk_index": 21,
    "total_chunks": 35
  },
  {
    "id": "ab74e00aa431c7a3c12df5529a72ae7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1028,
    "chunk_index": 22,
    "total_chunks": 35
  },
  {
    "id": "e2292e9a534a35866dda61b327cd8d5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1033,
    "chunk_index": 23,
    "total_chunks": 35
  },
  {
    "id": "04b1e24c378d072712de002134e3b587",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1037,
    "chunk_index": 24,
    "total_chunks": 35
  },
  {
    "id": "5fdab0c1fb39beb245c26f0d2828c6f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1071,
    "chunk_index": 25,
    "total_chunks": 35
  },
  {
    "id": "4e38ed99142f2f1ab569206f55e99ee6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1092,
    "chunk_index": 26,
    "total_chunks": 35
  },
  {
    "id": "437ee16c5a2861740360308e45bc47c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1102,
    "chunk_index": 27,
    "total_chunks": 35
  },
  {
    "id": "32351daa78bb4cecfea73c83d7cc00d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1167,
    "chunk_index": 28,
    "total_chunks": 35
  },
  {
    "id": "df3b69390dca83ce2c4c1fa6956974f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your elemValue function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1282,
    "chunk_index": 29,
    "total_chunks": 35
  },
  {
    "id": "d860a04ae85227517558363079ef220f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your elemValue function should implicitly return an arrow function with a character parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>/); Your inner arrow function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 1141,
    "chunk_index": 30,
    "total_chunks": 35
  },
  {
    "id": "fd01c71b8e13df8dbb3ccc0d342c13b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function should use an implicit returnjs assertnotMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{/); Your inner arrow function should return the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 751,
    "chunk_index": 31,
    "total_chunks": 35
  },
  {
    "id": "15d922969a0f8046a93a9b8e4212914f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling idToText() with character + num as the argumentjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 32,
    "total_chunks": 35
  },
  {
    "id": "96b3e6458abcebf3f859a70abcebe792",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\nreturn idToText(character + num);\n}\nreturn inner;\n}\nconst addCharacters = character1 => character2 => num => charRange(character1, character2);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 33,
    "total_chunks": 35
  },
  {
    "id": "347826d35f329ddd0d13b68712a42d0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1980018efaaec2b1c28b.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 34,
    "total_chunks": 35
  },
  {
    "id": "f16f0606222a2335f23f8acf3001b278",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d19fc4705e4af65c3e688\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nYour addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints--\nYou should chain map() to your charRange() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/);\nYou should not pass anything to your map() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 22
  },
  {
    "id": "08788be9c67d991eaa89b4ef30867617",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "title: Step 50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 22
  },
  {
    "id": "b3c27a581dedcbb0f51d5f1c82ed1cb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 545,
    "chunk_index": 2,
    "total_chunks": 22
  },
  {
    "id": "191143a4b5b01a4040a28f2012760a9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 3,
    "total_chunks": 22
  },
  {
    "id": "5c8e14f4473af8ba0c09d7f6bb811ff5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 4,
    "total_chunks": 22
  },
  {
    "id": "2e5233ffd937e3c17c7ada881a346ecb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 585,
    "chunk_index": 5,
    "total_chunks": 22
  },
  {
    "id": "691c2f5815d44a0913e8c5540ae76ccc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 6,
    "total_chunks": 22
  },
  {
    "id": "d4dae7effd6fab933080c2cbb2b82ba9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 594,
    "chunk_index": 7,
    "total_chunks": 22
  },
  {
    "id": "553bb008d7a548470cff2a4a3a2b0f76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 628,
    "chunk_index": 8,
    "total_chunks": 22
  },
  {
    "id": "d63de40443df4acd4542fbc9ac33695d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 649,
    "chunk_index": 9,
    "total_chunks": 22
  },
  {
    "id": "f6c11decab1e02b78a00a65cea4dcdfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 659,
    "chunk_index": 10,
    "total_chunks": 22
  },
  {
    "id": "72b0ce2c8e15474fab0308ab0600306f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 724,
    "chunk_index": 11,
    "total_chunks": 22
  },
  {
    "id": "6d6bac50237fc15944cf1a65f0589ca8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 12,
    "total_chunks": 22
  },
  {
    "id": "bf7c969accbeb51671bb8bc9758e5742",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 867,
    "chunk_index": 13,
    "total_chunks": 22
  },
  {
    "id": "5501ead67a9e1ac1ff1be6ea1d6743cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "50 challengeType: 0 dashedName: step-50 --description-- Your addCharacters function ultimately returns a range of characters You want it to return an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 929,
    "chunk_index": 14,
    "total_chunks": 22
  },
  {
    "id": "80763cc003cd41b8be60e5aad0ce3262",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an array of cell ids Chain the map() method to your charRange() call Do not pass a callback function yet --hints-- You should chain map() to your charRange() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 15,
    "total_chunks": 22
  },
  {
    "id": "fc8d72889afd8f3b835dd55c49072a29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 932,
    "chunk_index": 16,
    "total_chunks": 22
  },
  {
    "id": "82476f487206b46dec936dbd5dfdb1f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(/); You should not pass anything to your map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 692,
    "chunk_index": 17,
    "total_chunks": 22
  },
  {
    "id": "d2b5f9b892412e2d2ebe71a0a21df5cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 18,
    "total_chunks": 22
  },
  {
    "id": "406519468f6fe531337818ae83ca5426",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 19,
    "total_chunks": 22
  },
  {
    "id": "dacf880d27c0fc2296139001cf77031a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 20,
    "total_chunks": 22
  },
  {
    "id": "5ac5a405b90a00027d1539a06c2544bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "character1 => character2 => num => charRange(character1, character2); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; inputariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d19fc4705e4af65c3e688.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 21,
    "total_chunks": 22
  },
  {
    "id": "6e9178aebb73a42b0ecf3eb335a8098f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 54
  },
  {
    "id": "7d6b7d4f6d55e0574c50c77a1f816017",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 1,
    "total_chunks": 54
  },
  {
    "id": "438b5808264dba6f49f1c04fc724cb00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 2,
    "total_chunks": 54
  },
  {
    "id": "9b962b0290891f12fc46558c42ab036a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 583,
    "chunk_index": 3,
    "total_chunks": 54
  },
  {
    "id": "8a0308cb64edeb835f4a0628ff139110",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 4,
    "total_chunks": 54
  },
  {
    "id": "35ebbd2f121b3a7961ef3283c11e9bea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 607,
    "chunk_index": 5,
    "total_chunks": 54
  },
  {
    "id": "d1ce285eebe5c9f42ee268e2e67eb8fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 6,
    "total_chunks": 54
  },
  {
    "id": "6cd30fe35f76e3846bbf18315cea8d06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 630,
    "chunk_index": 7,
    "total_chunks": 54
  },
  {
    "id": "ecdb2d2346c1f0fc89a988a8ddc10be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 8,
    "total_chunks": 54
  },
  {
    "id": "de38aea570283f3a4d18b220e8628bc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 668,
    "chunk_index": 9,
    "total_chunks": 54
  },
  {
    "id": "586f81e5345d9ab970b15bafe52d0ed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 689,
    "chunk_index": 10,
    "total_chunks": 54
  },
  {
    "id": "3c5aa62c6a7d4926ee96a72dff4fe570",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 699,
    "chunk_index": 11,
    "total_chunks": 54
  },
  {
    "id": "710a51d0474bf22021db609c2ed01577",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 764,
    "chunk_index": 12,
    "total_chunks": 54
  },
  {
    "id": "b95f442e7cbb6ad52a31bfa933f921fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 844,
    "chunk_index": 13,
    "total_chunks": 54
  },
  {
    "id": "50127d5246fecae20b496f91524036db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 14,
    "total_chunks": 54
  },
  {
    "id": "e18300015532effed00a96f4695bae4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 859,
    "chunk_index": 15,
    "total_chunks": 54
  },
  {
    "id": "40fae77f2bf2ea67eb95089a798608a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d0e4636e14eae2bb3b992\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nNow update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints--\nYour innermost function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/);\nYour innermost function should return the result of calling charRange()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/);\nYou should pass character1 as the first argument to your charRange() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 945,
    "chunk_index": 16,
    "total_chunks": 54
  },
  {
    "id": "7317c5f69117ecf9e4dbf2777eb1fb33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-48 --description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 914,
    "chunk_index": 17,
    "total_chunks": 54
  },
  {
    "id": "91404dde8469d9622317f8c065484744",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "step-48 --description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 973,
    "chunk_index": 18,
    "total_chunks": 54
  },
  {
    "id": "a431cecd7bffb3f20b1a8275d97be20a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 19,
    "total_chunks": 54
  },
  {
    "id": "aba162ba6adb5ddfc51fab5feb7d1c57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 994,
    "chunk_index": 20,
    "total_chunks": 54
  },
  {
    "id": "20635c59a7e9d69a90ac9d481fbd6190",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1012,
    "chunk_index": 21,
    "total_chunks": 54
  },
  {
    "id": "4d8d32c8de1612804cefc799f616cc5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1017,
    "chunk_index": 22,
    "total_chunks": 54
  },
  {
    "id": "b1da3e76fdf565740aa875901367ca71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1021,
    "chunk_index": 23,
    "total_chunks": 54
  },
  {
    "id": "2ce566b94072682c99cfa0d6f989f4ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1055,
    "chunk_index": 24,
    "total_chunks": 54
  }
]