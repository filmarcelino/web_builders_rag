[
  {
    "id": "2209bcd0ad75db5f4102f85f41f63c71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\failed-updates-epic.test.js",
    "source_type": "git_repo",
    "title": "failed-updates-epic.test",
    "content": "import { ActionsObservable, StateObservable } from 'redux-observable';\nimport { Subject } from 'rxjs';\nimport store from 'store';\nimport { actionTypes } from './action-types';\nimport failedUpdatesEpic from './failed-updates-epic';\n\njest.mock('../analytics');\n\nconst key = 'fcc-failed-updates';\n\ndescribe('failed-updates-epic', () => {\n  it('should remove faulty backend challenges from localStorage', async () => {\n    store.set(key, failedSubmissions);\n\nconst action$ = ActionsObservable.of({\n      type: actionTypes.updateComplete\n    });\n    const state$ = new StateObservable(new Subject(), initialState);\n    const epic$ = failedUpdatesEpic(action$, state$);\n\nawait epic$.toPromise();\n\nexpect(store.get(key)).toEqual(submitableChallenges);\n  });\n});\n\nconst initialState = {\n  app: {\n    isOnline: true,\n    isServerOnline: true,\n    user: { sessionUser: {} }\n  }\n};\n\nconst failedSubmissions = [\n  {\n    endpoint: '/project-completed',\n    id: 'b1507944-7310-479f-bb59-ccafac488592',\n    payload: { id: '587d8249367417b2b2512c41', challengeType: 4 }\n  },\n  {\n    endpoint: '/project-completed',\n    id: 'b1507944-7310-479f-bb59-ccafac488593',\n    payload: {\n      id: '587d8249367417b2b2512c42',\n      challengeType: 4,\n      solution: 'http://freecodecamp.org/',\n      githubLink: 'https://github.com/'\n    }\n  },\n  {\n    endpoint: '/project-completed',\n    id: 'b1507944-7310-479f-bb59-ccafac488594',\n    payload: {\n      id: '587d8249367417b2b2512c43',\n      challengeType: 4,\n      solution: 'http://freecodecamp.org/',\n      githubLink: 'https://github.com/'\n    }\n  }\n];\n\nconst submitableChallenges = failedSubmissions.slice(1);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1651,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\failed-updates-epic.test.js",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5bc67bbd09be67c8b41d7a229fd5a1c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\fetch-user-saga.js",
    "source_type": "git_repo",
    "title": "fetch-user-saga",
    "content": "import { call, cancel, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport { getSessionUser, getUserProfile } from '../utils/ajax';\nimport {\n  fetchProfileForUserComplete,\n  fetchProfileForUserError,\n  fetchUserComplete,\n  fetchUserError,\n  fetchUserTimeout\n} from './actions';\n\nfunction* fetchSessionUser() {\n  const timeoutTask = yield fork(function* () {\n    // The server should not take anywhere near 2 seconds to respond. If it\n    // does, we assume the request has failed and dispatch a timeout action to\n    // dismiss the loading state.\n    yield delay(2000);\n    yield put(fetchUserTimeout());\n  });\n\ntry {\n    // This is on a longer timeout to make sure that users with slow connections\n    // do, eventually, get signed in.\n    const res = yield call(getSessionUser, AbortSignal.timeout(10000));\n\nconst isSignedOut = res.response.status === 401;\n    if (!res.response.ok && !isSignedOut) {\n      throw new Error(\n        `HTTP Error: ${res.response.status} ${res.response.statusText}`\n      );\n    }\n\nconst { data: user } = res;\n    yield put(fetchUserComplete({ user }));\n  } catch (e) {\n    console.log('failed to fetch user', e);\n    yield put(fetchUserError(e));\n  } finally {\n    yield cancel(timeoutTask);\n  }\n}\n\nfunction* fetchOtherUser({ payload: maybeUser = '' }) {\n  try {\n    const maybeUserLC = maybeUser.toLowerCase();\n\nconst { data: otherUser } = yield call(getUserProfile, maybeUserLC);\n    yield put(fetchProfileForUserComplete({ user: otherUser }));\n  } catch (e) {\n    yield put(fetchProfileForUserError(e));\n  }\n}\n\nexport function createFetchUserSaga(types) {\n  return [\n    takeEvery(types.fetchUser, fetchSessionUser),\n    takeEvery(types.fetchProfileForUser, fetchOtherUser)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1743,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\fetch-user-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2d39ef20a1db44436ecfa35820f58e8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
    "source_type": "git_repo",
    "title": "donation-saga.test",
    "content": "import { expectSaga } from 'redux-saga-test-plan';\nimport {\n  postChargeStripe,\n  postChargeStripeCard,\n  addDonation,\n  updateStripeCard\n} from '../utils/ajax';\nimport callGA from '../analytics/call-ga';\nimport {\n  postChargeSaga,\n  setDonationCookie,\n  updateCardSaga\n} from './donation-saga.js';\nimport {\n  postChargeComplete,\n  postChargeProcessing,\n  updateCardRedirecting,\n  updateCardError\n} from './actions';\n\njest.mock('../utils/ajax');\njest.mock('../analytics/call-ga');\njest.mock('../utils/stripe', () => ({\n  stripe: Promise.resolve({\n    redirectToCheckout: jest.fn()\n  })\n}));\n\nconst postChargeDataMock = {\n  payload: {\n    paymentProvider: 'stripe',\n    paymentContext: 'donate page',\n    amount: '500',\n    duration: 'month',\n    handleAuthentication: jest.fn(),\n    paymentMethodId: '123456'\n  }\n};\n\nconst analyticsDataMock = {\n  event: 'donation',\n  action: 'Donate Page Stripe Payment Submission',\n  duration: 'month',\n  amount: '500',\n  completed_challenges: 4,\n  completed_challenges_session: 2,\n  isSignedIn: true\n};\n\nconst signedInStoreMock = {\n  app: {\n    user: {\n      sessionUser: {\n        completedChallenges: [\n          {\n            id: 'bd7123c8c441eddfaeb5bdef',\n            completedDate: '1475094716730',\n            challengeFiles: []\n          },\n          {\n            id: 'bd7123c8c441eddfaeb5bdeg',\n            completedDate: '1475094716734',\n            challengeFiles: []\n          },\n          {\n            id: 'bd7123c8c441eddfaeb5bdeh',\n            completedDate: '1475094716733',\n            challengeFiles: []\n          },\n          {\n            id: 'bd7123c8c441eddfaeb5bdes',\n            completedDate: '1475094716732',\n            challengeFiles: []\n          }\n        ]\n      }\n    }\n  }\n};\n\nconst signedOutStoreMock = {\n  app: {\n    user: {\n      sessionUser: null\n    }\n  }\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "2b6c113edd4d7c591a7ef81e8c4b9f24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
    "source_type": "git_repo",
    "title": "donation-saga.test",
    "content": "Stripe Payment Submission', duration: 'month', amount: '500', completed_challenges: 4, completed_challenges_session: 2, isSignedIn: true }; const signedInStoreMock = { app: { user: { sessionUser: { completedChallenges: [ { id: 'bd7123c8c441eddfaeb5bdef', completedDate: '1475094716730', challengeFiles: [] }, { id: 'bd7123c8c441eddfaeb5bdeg', completedDate: '1475094716734', challengeFiles: [] }, { id: 'bd7123c8c441eddfaeb5bdeh', completedDate: '1475094716733', challengeFiles: [] }, { id: 'bd7123c8c441eddfaeb5bdes', completedDate: '1475094716732', challengeFiles: [] } ] } } } }; const signedOutStoreMock = { app: { user: { sessionUser: null } } };\n\ndescribe('donation-saga', () => {\n  it('calls postChargeStrip for Stripe', () => {\n    // The number of completed challenges per session is stored in the session storage\n    sessionStorage.setItem('session-completed-challenges', '2');\n\nreturn expectSaga(postChargeSaga, postChargeDataMock)\n      .withState(signedInStoreMock)\n      .put(postChargeProcessing())\n      .call(postChargeStripe, postChargeDataMock.payload)\n      .put(postChargeComplete())\n      .call(setDonationCookie)\n      .call(callGA, analyticsDataMock)\n      .run();\n  });\n\nit('calls postChargeStripCard for Stripe Card', () => {\n    const stripeCardDataMock = {\n      payload: { ...postChargeDataMock.payload, paymentProvider: 'stripe card' }\n    };\n\nconst stripeCardAnalyticsDataMock = analyticsDataMock;\n    stripeCardAnalyticsDataMock.action =\n      'Donate Page Stripe Card Payment Submission';",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d511891e9e9c4c1f81df6b0bd8c405c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
    "source_type": "git_repo",
    "title": "donation-saga.test",
    "content": "null } } }; describe('donation-saga', () => { it('calls postChargeStrip for Stripe', () => { // The number of completed challenges per session is stored in the session storage sessionStorage.setItem('session-completed-challenges', '2'); return expectSaga(postChargeSaga, postChargeDataMock) .withState(signedInStoreMock) .put(postChargeProcessing()) .call(postChargeStripe, postChargeDataMock.payload) .put(postChargeComplete()) .call(setDonationCookie) .call(callGA, analyticsDataMock) .run(); }); it('calls postChargeStripCard for Stripe Card', () => { const stripeCardDataMock = { payload: { ...postChargeDataMock.payload, paymentProvider: 'stripe card' } }; const stripeCardAnalyticsDataMock = analyticsDataMock; stripeCardAnalyticsDataMock.action = 'Donate Page Stripe Card Payment Submission';\n\nconst { paymentMethodId, amount, duration } = stripeCardDataMock.payload;\n    const optimizedPayload = { paymentMethodId, amount, duration };\n    return expectSaga(postChargeSaga, stripeCardDataMock)\n      .withState(signedInStoreMock)\n      .put(postChargeProcessing())\n      .call(postChargeStripeCard, optimizedPayload)\n      .put(postChargeComplete())\n      .call(setDonationCookie)\n      .call(callGA, stripeCardAnalyticsDataMock)\n      .run();\n  });\n\nit('calls addDonate for Paypal if user signed in', () => {\n    const paypalDataMock = {\n      payload: { ...postChargeDataMock.payload, paymentProvider: 'paypal' }\n    };\n\nconst paypalAnalyticsDataMock = analyticsDataMock;\n    paypalAnalyticsDataMock.action = 'Donate Page Paypal Payment Submission';\n\nconst { amount, duration } = paypalDataMock.payload;\n    return expectSaga(postChargeSaga, paypalDataMock)\n      .withState(signedInStoreMock)\n      .put(postChargeProcessing())\n      .call(addDonation, { amount, duration })\n      .put(postChargeComplete())\n      .call(setDonationCookie)\n      .call(callGA, paypalAnalyticsDataMock)\n      .run();\n  });\n\nit('does not call addDonate for Paypal if user not signed in', () => {\n    const paypalDataMock = {\n      payload: { ...postChargeDataMock.payload, paymentProvider: 'paypal' }\n    };\n\nsessionStorage.setItem('session-completed-challenges', '0');",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "3cd2bb4dd84a2bd3c3e851b9ad1554cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
    "source_type": "git_repo",
    "title": "donation-saga.test",
    "content": "in', () => { const paypalDataMock = { payload: { ...postChargeDataMock.payload, paymentProvider: 'paypal' } }; const paypalAnalyticsDataMock = analyticsDataMock; paypalAnalyticsDataMock.action = 'Donate Page Paypal Payment Submission'; const { amount, duration } = paypalDataMock.payload; return expectSaga(postChargeSaga, paypalDataMock) .withState(signedInStoreMock) .put(postChargeProcessing()) .call(addDonation, { amount, duration }) .put(postChargeComplete()) .call(setDonationCookie) .call(callGA, paypalAnalyticsDataMock) .run(); }); it('does not call addDonate for Paypal if user not signed in', () => { const paypalDataMock = { payload: { ...postChargeDataMock.payload, paymentProvider: 'paypal' } }; sessionStorage.setItem('session-completed-challenges', '0');\n\nconst paypalAnalyticsDataMock = {\n      ...analyticsDataMock,\n      action: 'Donate Page Paypal Payment Submission',\n      isSignedIn: false,\n      completed_challenges: 0,\n      completed_challenges_session: 0\n    };\n\nconst signedOutStoreMock = {\n      app: {\n        user: {\n          sessionUser: null\n        }\n      }\n    };\n\nreturn expectSaga(postChargeSaga, paypalDataMock)\n      .withState(signedOutStoreMock)\n      .put(postChargeProcessing())\n      .not.call.fn(addDonation)\n      .put(postChargeComplete())\n      .call(setDonationCookie)\n      .call(callGA, paypalAnalyticsDataMock)\n      .run();\n  });\n\nit('does not call api for Patreon', () => {\n    const patreonDataMock = {\n      payload: { ...postChargeDataMock.payload, paymentProvider: 'patreon' }\n    };\n\nconst patreonAnalyticsDataMock = {\n      event: 'donation_related',\n      action: 'Donate Page Patreon Payment Redirection'\n    };\n    return expectSaga(postChargeSaga, patreonDataMock)\n      .withState(signedOutStoreMock)\n      .not.call.fn(addDonation)\n      .not.call.fn(postChargeStripeCard)\n      .not.call.fn(postChargeStripe)\n      .call(callGA, patreonAnalyticsDataMock)\n      .run();\n  });\n\nit('handles successful card update', () => {\n    updateStripeCard.mockResolvedValue({\n      data: { sessionId: 'expected data' }\n    });",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7c1d5427288b8504b531afc80a69d24a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
    "source_type": "git_repo",
    "title": "donation-saga.test",
    "content": "sessionUser: null } } }; return expectSaga(postChargeSaga, paypalDataMock) .withState(signedOutStoreMock) .put(postChargeProcessing()) .not.call.fn(addDonation) .put(postChargeComplete()) .call(setDonationCookie) .call(callGA, paypalAnalyticsDataMock) .run(); }); it('does not call api for Patreon', () => { const patreonDataMock = { payload: { ...postChargeDataMock.payload, paymentProvider: 'patreon' } }; const patreonAnalyticsDataMock = { event: 'donation_related', action: 'Donate Page Patreon Payment Redirection' }; return expectSaga(postChargeSaga, patreonDataMock) .withState(signedOutStoreMock) .not.call.fn(addDonation) .not.call.fn(postChargeStripeCard) .not.call.fn(postChargeStripe) .call(callGA, patreonAnalyticsDataMock) .run(); }); it('handles successful card update', () => { updateStripeCard.mockResolvedValue({ data: { sessionId: 'expected data' } });\n\nreturn expectSaga(updateCardSaga)\n      .put(updateCardRedirecting())\n      .call(updateStripeCard)\n      .not.put(updateCardError())\n      .run();\n  });\n\nit('handles errors correctly for card update', () => {\n    updateStripeCard.mockResolvedValue({\n      data: 'unexpected data'\n    });\n\nreturn expectSaga(updateCardSaga)\n      .put(updateCardRedirecting())\n      .call(updateStripeCard)\n      .put(updateCardError())\n      .run();\n  });\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\donation-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a776c85f090e76e1201dd5e738e731d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\hard-go-to-epic.js",
    "source_type": "git_repo",
    "title": "hard-go-to-epic",
    "content": "import { ofType } from 'redux-observable';\nimport { tap, ignoreElements } from 'rxjs/operators';\n\nimport { actionTypes } from './action-types';\n\nexport default function hardGoToEpic(action$, _, { location }) {\n  return action$.pipe(\n    ofType(actionTypes.hardGoTo),\n    tap(({ payload }) => {\n      location.href = payload;\n    }),\n    ignoreElements()\n  );\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 361,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\hard-go-to-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 83,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d771b994d853181f452a06a62ca02eb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\ms-username-saga.js",
    "source_type": "git_repo",
    "title": "ms-username-saga",
    "content": "import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { FlashMessages } from '../components/Flash/redux/flash-messages';\nimport { postMsUsername, deleteMsUsername } from '../utils/ajax';\nimport { setMsUsername, setIsProcessing } from './actions';\n\nconst message = {\n  linked: {\n    type: 'success',\n    message: FlashMessages.MsTranscriptLinked\n  },\n  linkErr: {\n    type: 'danger',\n    message: FlashMessages.MsTranscriptErr6\n  },\n  unlinked: {\n    type: 'info',\n    message: FlashMessages.MsTranscriptUnlinked\n  },\n  unlinkErr: {\n    type: 'danger',\n    message: FlashMessages.MsTranscriptUnlinkErr\n  }\n};\n\nfunction* linkMsUsernameSaga({ payload: { msTranscriptUrl } }) {\n  try {\n    const { data } = yield call(postMsUsername, { msTranscriptUrl });\n\nyield put(setIsProcessing(false));\n\nif (data?.message) {\n      yield put(createFlashMessage(data));\n    } else if (data?.msUsername) {\n      yield put(setMsUsername(data.msUsername));\n      yield put(createFlashMessage(message.linked));\n    } else {\n      yield put(createFlashMessage(message.linkErr));\n    }\n  } catch {\n    yield put(setIsProcessing(false));\n    yield put(createFlashMessage(message.linkErr));\n  }\n}\n\nfunction* unlinkMsUsernameSaga() {\n  try {\n    const { data } = yield call(deleteMsUsername);\n\nif (data?.message) {\n      yield put(createFlashMessage(data));\n    } else if (\n      data &&\n      Object.prototype.hasOwnProperty.call(data, 'msUsername')\n    ) {\n      yield put(setMsUsername(data.msUsername));\n      yield put(createFlashMessage(message.unlinked));\n    } else {\n      yield put(createFlashMessage(message.unlinkErr));\n    }\n  } catch {\n    yield put(createFlashMessage(message.unlinkErr));\n  }\n}\n\nexport function createMsUsernameSaga(types) {\n  return [\n    takeEvery(types.linkMsUsername, linkMsUsernameSaga),\n    takeEvery(types.unlinkMsUsername, unlinkMsUsernameSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1955,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\ms-username-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1709d4a155de853a5ac4633d518a465",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\report-user-saga.js",
    "source_type": "git_repo",
    "title": "report-user-saga",
    "content": "import { navigate } from 'gatsby';\nimport { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { postReportUser } from '../utils/ajax';\nimport { reportUserComplete, reportUserError } from './actions';\n\nfunction* reportUserSaga({ payload }) {\n  try {\n    const { data } = yield call(postReportUser, payload);\n\nyield put(reportUserComplete());\n    yield put(createFlashMessage(data));\n  } catch (e) {\n    yield put(reportUserError(e));\n  }\n}\n\nfunction* acceptCompleteSaga() {\n  yield call(navigate, '/learn');\n}\n\nexport function createReportUserSaga(types) {\n  return [\n    takeEvery(types.reportUser, reportUserSaga),\n    takeEvery(types.reportUserComplete, acceptCompleteSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 759,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\report-user-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ae17e40137b608ecc95cdbe1bdc65d6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\root-epic.ts",
    "source_type": "git_repo",
    "title": "root-epic",
    "content": "import { combineEpics } from 'redux-observable';\n\nimport { epics as challengeEpics } from '../templates/Challenges/redux';\nimport { epics as appEpics } from '.';\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst rootEpic = combineEpics(...appEpics, ...challengeEpics);\n\nexport default rootEpic;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 320,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\root-epic.ts",
      "source_type": "git_repo"
    },
    "token_count": 80,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17d78e9184d71431c79d0bfafd1b7643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\root-reducer.ts",
    "source_type": "git_repo",
    "title": "root-reducer",
    "content": "import { combineReducers } from 'redux';\n\nimport { reducer as flash } from '../components/Flash/redux';\nimport {\n  ns as searchNameSpace,\n  reducer as search\n} from '../components/search/redux';\nimport {\n  ns as challengeNameSpace,\n  reducer as challenge\n} from '../templates/Challenges/redux';\nimport {\n  ns as curriculumMapNameSpace,\n  reducer as curriculumMap\n} from '../templates/Introduction/redux';\nimport { ns as appNameSpace } from './action-types';\nimport { ns as settingsNameSpace, reducer as settings } from './settings';\nimport { FlashApp as flashNameSpace } from './types';\nimport { reducer as app } from '.';\n\nexport default combineReducers({\n  [appNameSpace]: app,\n  [challengeNameSpace]: challenge,\n  [curriculumMapNameSpace]: curriculumMap,\n  [flashNameSpace]: flash,\n  [searchNameSpace]: search,\n  [settingsNameSpace]: settings\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 850,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\root-reducer.ts",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "efbe2f7a6e8523155cfd679164880101",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\root-saga.ts",
    "source_type": "git_repo",
    "title": "root-saga",
    "content": "import { all } from 'redux-saga/effects';\n\nimport { sagas as challengeSagas } from '../templates/Challenges/redux';\nimport errorSagas from './error-saga';\nimport { sagas as settingsSagas } from './settings';\nimport { sagas as appSagas } from '.';\n\nexport default function* rootSaga() {\n  yield all([...errorSagas, ...appSagas, ...challengeSagas, ...settingsSagas]);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\root-saga.ts",
      "source_type": "git_repo"
    },
    "token_count": 96,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9baab7cbac45bbb907927aa546742c15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\save-challenge-saga.js",
    "source_type": "git_repo",
    "title": "save-challenge-saga",
    "content": "import { call, put, select, takeEvery } from 'redux-saga/effects';\n\nimport { canSaveToDB } from '../../../shared/config/challenge-types';\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { FlashMessages } from '../components/Flash/redux/flash-messages';\nimport {\n  challengeDataSelector,\n  challengeMetaSelector\n} from '../templates/Challenges/redux/selectors';\nimport { createFiles } from '../templates/Challenges/redux/actions';\nimport { mapFilesToChallengeFiles, postSaveChallenge } from '../utils/ajax';\nimport {\n  bodySizeFits,\n  getStringSizeInBytes,\n  MAX_BODY_SIZE,\n  standardizeRequestBody\n} from '../utils/challenge-request-helpers';\nimport { saveChallengeComplete } from './actions';\nimport { savedChallengesSelector } from './selectors';\n\nfunction* saveChallengeSaga() {\n  const { id, challengeType } = yield select(challengeMetaSelector);\n  const { challengeFiles } = yield select(challengeDataSelector);\n  const savedChallenges = yield select(savedChallengesSelector);\n  const savedChallenge = savedChallenges.find(challenge => challenge.id === id);\n\n// don't let users save more than once every 5 seconds\n  if (Date.now() - savedChallenge?.lastSavedDate < 5000) {\n    return yield put(\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.CodeSaveLess\n      })\n    );\n  }\n\nif (canSaveToDB(challengeType)) {\n    const body = standardizeRequestBody({ id, challengeFiles, challengeType });\n    const bodySizeInBytes = getStringSizeInBytes(body);\n\nif (!bodySizeFits(bodySizeInBytes)) {\n      return yield put(\n        createFlashMessage({\n          type: 'danger',\n          message: FlashMessages.ChallengeSaveTooBig,\n          variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes }\n        })\n      );\n    } else {\n      try {\n        const { data } = yield call(postSaveChallenge, body);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2663,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\save-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d203e881d633808479e01baaa6d6fd71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\save-challenge-saga.js",
    "source_type": "git_repo",
    "title": "save-challenge-saga",
    "content": "don't let users save more than once every 5 seconds if (Date.now() - savedChallenge?.lastSavedDate < 5000) { return yield put( createFlashMessage({ type: 'danger', message: FlashMessages.CodeSaveLess }) ); } if (canSaveToDB(challengeType)) { const body = standardizeRequestBody({ id, challengeFiles, challengeType }); const bodySizeInBytes = getStringSizeInBytes(body); if (!bodySizeFits(bodySizeInBytes)) { return yield put( createFlashMessage({ type: 'danger', message: FlashMessages.ChallengeSaveTooBig, variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes } }) ); } else { try { const { data } = yield call(postSaveChallenge, body);\n\nif (data?.message) {\n          yield put(createFlashMessage(data));\n        } else if (data?.savedChallenges) {\n          yield put(createFiles(challengeFiles));\n          yield put(\n            saveChallengeComplete(\n              mapFilesToChallengeFiles(data.savedChallenges)\n            )\n          );\n          yield put(\n            createFlashMessage({\n              type: 'success',\n              message: FlashMessages.CodeSaved\n            })\n          );\n        }\n      } catch {\n        yield put(\n          createFlashMessage({\n            type: 'danger',\n            message: FlashMessages.CodeSaveError\n          })\n        );\n      }\n    }\n  }\n}\n\nexport function createSaveChallengeSaga(types) {\n  return [takeEvery(types.saveChallenge, saveChallengeSaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2663,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\save-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b4c7688a51260d374ce5e1d39edb73ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "import { HandlerProps } from 'react-reflex';\nimport { SuperBlocks } from '../../../shared/config/curriculum';\nimport { BlockLayouts, BlockTypes } from '../../../shared/config/blocks';\nimport type { ChallengeFile, Ext } from '../../../shared/utils/polyvinyl';\nimport { type CertTitle } from '../../config/cert-and-project-map';\nimport { UserThemes } from './types';\n\nexport type { ChallengeFile, Ext };\n\nexport type Steps = {\n  isHonest?: boolean;\n  currentCerts?: Array<CurrentCert>;\n  isShowCerts?: boolean;\n  isShowName?: boolean;\n  isShowProfile?: boolean;\n};\n\nexport type CurrentCert = {\n  show: boolean;\n  title: string;\n  certSlug: string;\n};\n\nexport type MarkdownRemark = {\n  frontmatter: {\n    block: string;\n    superBlock: SuperBlocks;\n    // TODO: make enum like superBlock\n    certification: string;\n    title: CertTitle;\n  };\n  html: string;\n  id: string;\n};\n\ntype MultipleChoiceAnswer = {\n  answer: string;\n  feedback: string | null;\n};\n\nexport type Question = {\n  text: string;\n  answers: MultipleChoiceAnswer[];\n  solution: number;\n};\n\nexport type FillInTheBlank = {\n  sentence: string;\n  blanks: MultipleChoiceAnswer[];\n};\n\nexport type Fields = {\n  slug: string;\n  blockHashSlug: string;\n  blockName: string;\n  tests: Test[];\n};\ntype Required = {\n  link: string;\n  raw: boolean;\n  src: string;\n  crossDomain?: boolean;\n};\nexport interface BilibiliIds {\n  aid: string;\n  bvid: string;\n  cid: string;\n}\n\nexport interface VideoLocaleIds {\n  espanol?: string;\n  italian?: string;\n  portuguese?: string;\n}\n\n// English types for animations\ninterface Dialogue {\n  text: string;\n  align: 'left' | 'right' | 'center';\n}\n\nexport interface CharacterPosition {\n  x?: number;\n  y?: number;\n  z?: number;\n}\n\ninterface SceneCommand {\n  background?: string;\n  character: string;\n  position?: CharacterPosition;\n  opacity?: number;\n  startTime: number;\n  finishTime?: number;\n  dialogue?: Dialogue;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "eb7d8a70c99df6d1d31ccbbd99069ab7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "string; raw: boolean; src: string; crossDomain?: boolean; }; export interface BilibiliIds { aid: string; bvid: string; cid: string; } export interface VideoLocaleIds { espanol?: string; italian?: string; portuguese?: string; } // English types for animations interface Dialogue { text: string; align: 'left' | 'right' | 'center'; } export interface CharacterPosition { x?: number; y?: number; z?: number; } interface SceneCommand { background?: string; character: string; position?: CharacterPosition; opacity?: number; startTime: number; finishTime?: number; dialogue?: Dialogue; }\n\nexport type Characters =\n  // English\n  | 'Alice'\n  | 'Amy'\n  | 'Anna'\n  | 'Bob'\n  | 'Brian'\n  | 'Candidate'\n  | 'David'\n  | 'Delivery Man'\n  | 'Expert'\n  | 'Jake'\n  | 'James'\n  | 'Jessica'\n  | 'Jim'\n  | 'Josh'\n  | 'Linda'\n  | 'Lisa'\n  | 'Maria'\n  | 'Mark'\n  | 'Riker'\n  | 'Sarah'\n  | 'Second Candidate'\n  | 'Sophie'\n  | 'Tom'\n\n// Spanish\n  | 'Alex'\n  | 'Ángela'\n  | 'Camila'\n  | 'Carlos'\n  | 'Elena'\n  | 'Esteban'\n  | 'Joaquín'\n  | 'Julieta'\n  | 'Luis'\n  | 'Luna'\n  | 'Marisol'\n  | 'Mateo'\n  | 'Noelia'\n  | 'René'\n  | 'Sebastián'\n  | 'Diego'\n  | 'Valeria';\n\ninterface SetupCharacter {\n  character: Characters;\n  position: CharacterPosition;\n  opacity: number;\n  isTalking?: boolean;\n}\n\ninterface SetupAudio {\n  filename: string;\n  startTime: number;\n  startTimestamp: number | null;\n  finishTimestamp: number | null;\n}\n\ninterface SceneSetup {\n  background: string;\n  characters: SetupCharacter[];\n  audio: SetupAudio;\n  alwaysShowDialogue?: boolean;\n}\n\nexport interface FullScene {\n  setup: SceneSetup;\n  commands: SceneCommand[];\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "06126ade6fd6bbd7cc0a2076bd0da387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "'Carlos' | 'Elena' | 'Esteban' | 'Joaquín' | 'Julieta' | 'Luis' | 'Luna' | 'Marisol' | 'Mateo' | 'Noelia' | 'René' | 'Sebastián' | 'Diego' | 'Valeria'; interface SetupCharacter { character: Characters; position: CharacterPosition; opacity: number; isTalking?: boolean; } interface SetupAudio { filename: string; startTime: number; startTimestamp: number | null; finishTimestamp: number | null; } interface SceneSetup { background: string; characters: SetupCharacter[]; audio: SetupAudio; alwaysShowDialogue?: boolean; } export interface FullScene { setup: SceneSetup; commands: SceneCommand[]; }\n\nexport interface PrerequisiteChallenge {\n  id: string;\n  title: string;\n  slug?: string;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "ca913e161c4e67eaa84f39d9783362d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "| 'Luna' | 'Marisol' | 'Mateo' | 'Noelia' | 'René' | 'Sebastián' | 'Diego' | 'Valeria'; interface SetupCharacter { character: Characters; position: CharacterPosition; opacity: number; isTalking?: boolean; } interface SetupAudio { filename: string; startTime: number; startTimestamp: number | null; finishTimestamp: number | null; } interface SceneSetup { background: string; characters: SetupCharacter[]; audio: SetupAudio; alwaysShowDialogue?: boolean; } export interface FullScene { setup: SceneSetup; commands: SceneCommand[]; } export interface PrerequisiteChallenge { id: string; title: string; slug?: string; }\n\nexport type ChallengeNode = {\n  challenge: {\n    block: string;\n    blockType: BlockTypes;\n    blockLayout: BlockLayouts;\n    certification: string;\n    challengeOrder: number;\n    challengeType: number;\n    dashedName: string;\n    demoType: 'onClick' | 'onLoad' | null;\n    description: string;\n    challengeFiles: ChallengeFiles;\n    explanation: string;\n    fields: Fields;\n    fillInTheBlank: FillInTheBlank;\n    forumTopicId: number;\n    guideUrl: string;\n    head: string[];\n    hasEditableBoundaries: boolean;\n    helpCategory: string;\n    hooks?: Hooks;\n    id: string;\n    instructions: string;\n    isComingSoon: boolean;\n    internal?: {\n      content: string;\n      contentDigest: string;\n      description: string;\n      fieldOwners: string[];\n      ignoreType: boolean | null;\n      mediaType: string;\n      owner: string;\n      type: string;\n    };\n    msTrophyId: string;\n    notes: string;\n    prerequisites: PrerequisiteChallenge[];\n    isLocked: boolean;\n    isPrivate: boolean;\n    order: number;\n    questions: Question[];\n    quizzes: Quiz[];\n    assignments: string[];\n    required: Required[];\n    scene: FullScene;\n    solutions: {\n      [T: string]: FileKeyChallenge;\n    };\n    sourceInstanceName: string;\n    superOrder: number;\n    superBlock: SuperBlocks;\n    tail: string[];\n    template: string;\n    tests: Test[];\n    title: string;\n    transcript: string;\n    translationPending: boolean;\n    url: string;\n    usesMultifileEditor: boolean;\n    videoId: string;\n    videoLocaleIds?: VideoLocaleIds;\n    bilibiliIds?: BilibiliIds;\n    videoUrl: string;\n    chapter?: string;\n    module?: string;\n  };\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 547,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "0fa419251b645bd53aed9cf85c69b979",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "string[]; ignoreType: boolean | null; mediaType: string; owner: string; type: string; }; msTrophyId: string; notes: string; prerequisites: PrerequisiteChallenge[]; isLocked: boolean; isPrivate: boolean; order: number; questions: Question[]; quizzes: Quiz[]; assignments: string[]; required: Required[]; scene: FullScene; solutions: { [T: string]: FileKeyChallenge; }; sourceInstanceName: string; superOrder: number; superBlock: SuperBlocks; tail: string[]; template: string; tests: Test[]; title: string; transcript: string; translationPending: boolean; url: string; usesMultifileEditor: boolean; videoId: string; videoLocaleIds?: VideoLocaleIds; bilibiliIds?: BilibiliIds; videoUrl: string; chapter?: string; module?: string; }; };\n\nexport interface Hooks {\n  beforeAll?: string;\n  beforeEach?: string;\n  afterEach?: string;\n}\n\nexport type PageContext = {\n  challengeMeta: ChallengeMeta;\n  projectPreview: {\n    challengeData: ChallengeData;\n  };\n};\n\nexport type DailyCodingChallengeNode = {\n  challenge: {\n    date: string;\n    id: string;\n    challengeNumber: number;\n    title: string;\n    description: string;\n    superBlock: 'daily-coding-challenge';\n    block: 'daily-coding-challenge';\n    usesMultifileEditor: true;\n\nhelpCategory: 'JavaScript' | 'Python';\n    challengeType: 28 | 29;\n    fields: {\n      blockName: 'daily-coding-challenge';\n      tests: Test[];\n    };\n    challengeFiles: ChallengeFiles;\n\n// props to satisfy the show classic component\n    instructions: string;\n    demoType: null;\n    hooks?: { beforeAll: string };\n    hasEditableBoundaries?: false;\n    forumTopicId?: number;\n    notes: string;\n    videoUrl?: string;\n    translationPending: false;\n  };\n};\n\nexport type DailyCodingChallengePageContext = {\n  challengeMeta: {\n    block: 'daily-coding-challenge';\n    id: string;\n    superBlock: 'daily-coding-challenge';\n    disableLoopProtectTests: boolean;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "b2f6c456130ff9d88b429f7a14d1c71f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "string; id: string; challengeNumber: number; title: string; description: string; superBlock: 'daily-coding-challenge'; block: 'daily-coding-challenge'; usesMultifileEditor: true; helpCategory: 'JavaScript' | 'Python'; challengeType: 28 | 29; fields: { blockName: 'daily-coding-challenge'; tests: Test[]; }; challengeFiles: ChallengeFiles; // props to satisfy the show classic component instructions: string; demoType: null; hooks?: { beforeAll: string }; hasEditableBoundaries?: false; forumTopicId?: number; notes: string; videoUrl?: string; translationPending: false; }; }; export type DailyCodingChallengePageContext = { challengeMeta: { block: 'daily-coding-challenge'; id: string; superBlock: 'daily-coding-challenge'; disableLoopProtectTests: boolean;\n\n// props to satisfy the show classic component\n    isFirstStep: boolean;\n    nextChallengePath?: string;\n    prevChallengePath?: string;\n    disableLoopProtectPreview: boolean;\n  };\n\n// props to satisfy the show classic component\n  projectPreview: {\n    challengeData?: null;\n  };\n};\n\nexport type DailyCodingChallengeLanguages = 'javascript' | 'python';\n\nexport interface CompletedDailyCodingChallenge {\n  id: string;\n  completedDate: number;\n  completedLanguages: DailyCodingChallengeLanguages[];\n}\n\ntype Quiz = {\n  questions: QuizQuestion[];\n};\n\ntype QuizQuestion = {\n  text: string;\n  distractors: string[];\n  answer: string;\n};\n\nexport type CertificateNode = {\n  challenge: {\n    // TODO: use enum\n    certification: string;\n    tests: { id: string }[];\n  };\n};\n\nexport type AllChallengesInfo = {\n  challengeNodes: ChallengeNode[];\n  certificateNodes: CertificateNode[];\n};\n\nexport type AllChallengeNode = {\n  edges: [\n    {\n      node: ChallengeNode;\n    }\n  ];\n};\n\nexport type ResizeProps = {\n  onStopResize: (arg0: HandlerProps) => void;\n  onResize: () => void;\n};\n\nexport type Dimensions = {\n  height: number;\n  width: number;\n};\n\nexport type Test = {\n  pass?: boolean;\n  err?: string;\n  message?: string;\n} & (ChallengeTest | CertTest);\n\nexport type ChallengeTest = {\n  text: string;\n  testString: string;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "1c693fd17fd3e12bb99bf9d94dfa0252",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "}; }; export type AllChallengesInfo = { challengeNodes: ChallengeNode[]; certificateNodes: CertificateNode[]; }; export type AllChallengeNode = { edges: [ { node: ChallengeNode; } ]; }; export type ResizeProps = { onStopResize: (arg0: HandlerProps) => void; onResize: () => void; }; export type Dimensions = { height: number; width: number; }; export type Test = { pass?: boolean; err?: string; message?: string; } & (ChallengeTest | CertTest); export type ChallengeTest = { text: string; testString: string; };\n\ntype CertTest = {\n  id: string;\n  title: string;\n};\n\nexport type User = {\n  calendar: Record<string, number>;\n  about: string;\n  acceptedPrivacyTerms: boolean;\n  completedChallenges: CompletedChallenge[];\n  completedChallengeCount: number;\n  completedSurveys: SurveyResults[];\n  currentChallengeId: string;\n  email: string;\n  emailVerified: boolean;\n  githubProfile: string;\n  isBanned: boolean;\n  isCheater: boolean;\n  isDonating: boolean;\n  isHonest: boolean;\n  joinDate: string;\n  linkedin: string;\n  location: string;\n  name: string;\n  picture: string;\n  points: number;\n  portfolio: PortfolioProjectData[];\n  profileUI: ProfileUI;\n  progressTimestamps: Array<unknown>;\n  savedChallenges: SavedChallenges;\n  sendQuincyEmail: boolean;\n  sound: boolean;\n  theme: UserThemes;\n  keyboardShortcuts: boolean;\n  twitter: string;\n  username: string;\n  website: string;\n  yearsTopContributor: string[];\n} & ClaimedCertifications;\n\nexport type ProfileUI = {\n  isLocked: boolean;\n  showAbout: boolean;\n  showCerts: boolean;\n  showDonation: boolean;\n  showHeatMap: boolean;\n  showLocation: boolean;\n  showName: boolean;\n  showPoints: boolean;\n  showPortfolio: boolean;\n  showTimeLine: boolean;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "c83f05c269aa3093e34062291151348a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "boolean; githubProfile: string; isBanned: boolean; isCheater: boolean; isDonating: boolean; isHonest: boolean; joinDate: string; linkedin: string; location: string; name: string; picture: string; points: number; portfolio: PortfolioProjectData[]; profileUI: ProfileUI; progressTimestamps: Array<unknown>; savedChallenges: SavedChallenges; sendQuincyEmail: boolean; sound: boolean; theme: UserThemes; keyboardShortcuts: boolean; twitter: string; username: string; website: string; yearsTopContributor: string[]; } & ClaimedCertifications; export type ProfileUI = { isLocked: boolean; showAbout: boolean; showCerts: boolean; showDonation: boolean; showHeatMap: boolean; showLocation: boolean; showName: boolean; showPoints: boolean; showPortfolio: boolean; showTimeLine: boolean; };\n\nexport type ClaimedCertifications = {\n  is2018DataVisCert: boolean;\n  isApisMicroservicesCert: boolean;\n  isBackEndCert: boolean;\n  isDataVisCert: boolean;\n  isEmailVerified: boolean;\n  isCollegeAlgebraPyCertV8: boolean;\n  isFoundationalCSharpCertV8: boolean;\n  isFrontEndCert: boolean;\n  isFrontEndLibsCert: boolean;\n  isFullStackCert: boolean;\n  isInfosecQaCert: boolean;\n  isQaCertV7: boolean;\n  isInfosecCertV7: boolean;\n  isJsAlgoDataStructCert: boolean;\n  isRelationalDatabaseCertV8: boolean;\n  isRespWebDesignCert: boolean;\n  isSciCompPyCertV7: boolean;\n  isDataAnalysisPyCertV7: boolean;\n  isMachineLearningPyCertV7: boolean;\n  isJsAlgoDataStructCertV8: boolean;\n};\n\ntype SavedChallenges = SavedChallenge[];\n\nexport type SavedChallenge = {\n  id: string;\n  challengeFiles: SavedChallengeFiles;\n};\n\n// TODO: remove unused properties and stop returning them from api? (e.g.\n// history, ext, name)\nexport type SavedChallengeFile = {\n  fileKey: string;\n  ext: Ext;\n  name: string;\n  history?: string[];\n  editableRegionBoundaries?: number[];\n  contents: string;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "c57d158b432217eee2abfd966d54f2f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "boolean; isFrontEndCert: boolean; isFrontEndLibsCert: boolean; isFullStackCert: boolean; isInfosecQaCert: boolean; isQaCertV7: boolean; isInfosecCertV7: boolean; isJsAlgoDataStructCert: boolean; isRelationalDatabaseCertV8: boolean; isRespWebDesignCert: boolean; isSciCompPyCertV7: boolean; isDataAnalysisPyCertV7: boolean; isMachineLearningPyCertV7: boolean; isJsAlgoDataStructCertV8: boolean; }; type SavedChallenges = SavedChallenge[]; export type SavedChallenge = { id: string; challengeFiles: SavedChallengeFiles; }; // TODO: remove unused properties and stop returning them from api? (e.g. // history, ext, name) export type SavedChallengeFile = { fileKey: string; ext: Ext; name: string; history?: string[]; editableRegionBoundaries?: number[]; contents: string; };\n\nexport type SavedChallengeFiles = SavedChallengeFile[];\n\nexport interface CompletedChallenge {\n  id: string;\n  solution?: string | null;\n  githubLink?: string;\n  challengeType?: number;\n  completedDate: number;\n  challengeFiles:\n    | Pick<ChallengeFile, 'contents' | 'ext' | 'fileKey' | 'name'>[]\n    | null;\n  examResults?: GeneratedExamResults;\n}\n\nexport interface ChallengeData extends CompletedChallenge {\n  challengeFiles: ChallengeFile[] | null;\n}\n\nexport type ChallengeMeta = {\n  block: string;\n  id: string;\n  isFirstStep: boolean;\n  superBlock: SuperBlocks | 'daily-coding-challenge';\n  title?: string;\n  challengeType?: number;\n  blockType?: BlockTypes;\n  helpCategory: string;\n  disableLoopProtectTests: boolean;\n  disableLoopProtectPreview: boolean;\n} & NavigationPaths;\n\nexport type NavigationPaths = {\n  nextChallengePath?: string;\n  prevChallengePath?: string;\n};\n\nexport type PortfolioProjectData = {\n  id: string;\n  title: string;\n  url: string;\n  image: string;\n  description: string;\n};\n\nexport type FileKeyChallenge = {\n  contents: string;\n  ext: Ext;\n  head: string;\n  id: string;\n  key: string;\n  name: string;\n  tail: string;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "137650ee69475ea93a5f62ce3e02f998",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
    "source_type": "git_repo",
    "title": "prop-types",
    "content": "export type ChallengeMeta = { block: string; id: string; isFirstStep: boolean; superBlock: SuperBlocks | 'daily-coding-challenge'; title?: string; challengeType?: number; blockType?: BlockTypes; helpCategory: string; disableLoopProtectTests: boolean; disableLoopProtectPreview: boolean; } & NavigationPaths; export type NavigationPaths = { nextChallengePath?: string; prevChallengePath?: string; }; export type PortfolioProjectData = { id: string; title: string; url: string; image: string; description: string; }; export type FileKeyChallenge = { contents: string; ext: Ext; head: string; id: string; key: string; name: string; tail: string; };\n\nexport type ChallengeFiles = ChallengeFile[] | null;\n\nexport interface UserFetchState {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n  error: string | null;\n}\n\n// Exam Related Types:\ninterface GeneratedExamAnswer {\n  id: string;\n  answer: string;\n}\n\n// Generated Exam (from API)\nexport interface GeneratedExamQuestion {\n  id: string;\n  question: string;\n  answers: GeneratedExamAnswer[];\n}\n\ninterface GenerateExamResponse {\n  error?: string;\n  generatedExam?: GeneratedExamQuestion[];\n}\n\nexport interface GenerateExamResponseWithData {\n  response: Response;\n  data: GenerateExamResponse;\n}\n\nexport interface ExamTokenResponse {\n  examEnvironmentAuthorizationToken: string;\n}\n// User Exam (null until they answer the question)\ninterface UserExamAnswer {\n  id: string | null;\n  answer: string | null;\n}\n\nexport interface UserExamQuestion {\n  id: string;\n  question: string;\n  answer: UserExamAnswer;\n}\n\nexport interface UserExam {\n  examTimeInSeconds: number;\n  userExamQuestions: UserExamQuestion[];\n}\n\n// Exam Results (from API)\nexport interface GeneratedExamResults {\n  numberOfCorrectAnswers: number;\n  numberOfQuestionsInExam: number;\n  percentCorrect: number;\n  passingPercent: number;\n  passed: boolean;\n  examTimeInSeconds: number;\n}\n\n// Survey related types\nexport interface SurveyResponse {\n  question: string;\n  response: string;\n}\n\nexport interface SurveyResults {\n  title: string;\n  responses: SurveyResponse[];\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 12012,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\prop-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "311aae8d55a0fc1d67e2504fc0fb91ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\session-completed-challenges.js",
    "source_type": "git_repo",
    "title": "session-completed-challenges",
    "content": "import { takeEvery, call } from 'redux-saga/effects';\n\nimport { incrementCurrentCount } from '../utils/session-storage';\n\nfunction* SessionCompletedChallengesSaga() {\n  yield call(incrementCurrentCount);\n}\n\nexport function createSessionCompletedChallengesSaga(types) {\n  return [takeEvery(types.submitComplete, SessionCompletedChallengesSaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 347,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\session-completed-challenges.js",
      "source_type": "git_repo"
    },
    "token_count": 71,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c77b3f98c1ad5d1e4be28ef2f004b7c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\show-cert-saga.js",
    "source_type": "git_repo",
    "title": "show-cert-saga",
    "content": "import { navigate } from 'gatsby';\nimport { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { getShowCert } from '../utils/ajax';\nimport { showCertComplete, showCertError } from './actions';\n\nfunction* getShowCertSaga({ payload: { username, certSlug } }) {\n  try {\n    const { data } = yield call(getShowCert, username, certSlug);\n    const { messages } = data;\n    if (messages && messages.length) {\n      for (let i = 0; i < messages.length; i++) {\n        yield put(createFlashMessage(messages[i]));\n      }\n      yield call(navigate, '/');\n      return;\n    }\n    yield put(showCertComplete(data));\n  } catch (e) {\n    yield put(showCertError(e));\n  }\n}\n\nexport function createShowCertSaga(types) {\n  return [takeEvery(types.showCert, getShowCertSaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 834,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\show-cert-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "58840e34b73c1b67bcaa3844e9843c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\survey-saga.js",
    "source_type": "git_repo",
    "title": "survey-saga",
    "content": "import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { FlashMessages } from '../components/Flash/redux/flash-messages';\nimport { postSubmitSurvey } from '../utils/ajax';\nimport { closeModal } from '../templates/Challenges/redux/actions';\nimport { submitSurveyComplete, setIsProcessing } from './actions';\n\nconst submitSurveyErr = {\n  type: 'danger',\n  message: FlashMessages.SurveyErr3\n};\n\nfunction* submitSurveySaga({ payload }) {\n  const surveyResults = payload;\n\ntry {\n    const { data } = yield call(postSubmitSurvey, { surveyResults });\n    const { type } = data;\n\nif (type === 'success') {\n      yield put(submitSurveyComplete({ surveyResults }));\n      yield put(createFlashMessage(data));\n      yield put(closeModal('survey'));\n      yield put(setIsProcessing(false));\n    } else {\n      yield put(createFlashMessage(data));\n      yield put(closeModal('survey'));\n      yield put(setIsProcessing(false));\n    }\n  } catch {\n    yield put(createFlashMessage(submitSurveyErr));\n    yield put(closeModal('survey'));\n    yield put(setIsProcessing(false));\n  }\n}\n\nexport function createSurveySaga(types) {\n  return [takeEvery(types.submitSurvey, submitSurveySaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1254,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\survey-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0dc95f50ec9b59f04bf94fb121bbacf9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "import { uniqBy } from 'lodash-es';\nimport { handleActions } from 'redux-actions';\nimport store from 'store';\n\nimport {\n  actionTypes as challengeTypes,\n  CURRENT_CHALLENGE_KEY\n} from '../templates/Challenges/redux/action-types';\nimport { getIsDailyCodingChallenge } from '../../../shared/config/challenge-types';\nimport { createAcceptTermsSaga } from './accept-terms-saga';\nimport { actionTypes, ns as MainApp } from './action-types';\nimport { createAppMountSaga } from './app-mount-saga';\nimport { createDonationSaga } from './donation-saga';\nimport failedUpdatesEpic from './failed-updates-epic';\nimport { createFetchUserSaga } from './fetch-user-saga';\nimport hardGoToEpic from './hard-go-to-epic';\nimport { createReportUserSaga } from './report-user-saga';\nimport { createSaveChallengeSaga } from './save-challenge-saga';\nimport { savedChallengesSelector } from './selectors';\nimport { actionTypes as settingsTypes } from './settings/action-types';\nimport { createShowCertSaga } from './show-cert-saga';\nimport updateCompleteEpic from './update-complete-epic';\nimport { createUserTokenSaga } from './user-token-saga';\nimport { createMsUsernameSaga } from './ms-username-saga';\nimport { createSurveySaga } from './survey-saga';\nimport { createSessionCompletedChallengesSaga } from './session-completed-challenges';\nimport { createThemeSaga } from './theme-saga';\n\nconst defaultFetchState = {\n  pending: true,\n  complete: false,\n  errored: false,\n  error: null\n};\n\nconst updateCardDefaultState = {\n  redirecting: false,\n  success: false,\n  error: null\n};\n\nexport const defaultDonationFormState = {\n  redirecting: false,\n  processing: false,\n  success: false,\n  error: '',\n  loading: {\n    stripe: true,\n    paypal: true\n  }\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "295c7feddc7c7b873a984e38f0571062",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "'./update-complete-epic'; import { createUserTokenSaga } from './user-token-saga'; import { createMsUsernameSaga } from './ms-username-saga'; import { createSurveySaga } from './survey-saga'; import { createSessionCompletedChallengesSaga } from './session-completed-challenges'; import { createThemeSaga } from './theme-saga'; const defaultFetchState = { pending: true, complete: false, errored: false, error: null }; const updateCardDefaultState = { redirecting: false, success: false, error: null }; export const defaultDonationFormState = { redirecting: false, processing: false, success: false, error: '', loading: { stripe: true, paypal: true } };\n\nconst initialState = {\n  isRandomCompletionThreshold: false,\n  donatableSectionRecentlyCompleted: null,\n  currentChallengeId: store.get(CURRENT_CHALLENGE_KEY),\n  examInProgress: false,\n  isProcessing: false,\n  theme: 'light',\n  showCert: {},\n  showCertFetchState: {\n    ...defaultFetchState\n  },\n  user: { sessionUser: null, otherUser: null },\n  userFetchState: {\n    ...defaultFetchState\n  },\n  allChallengesInfo: {\n    challengeNodes: [],\n    certificateNodes: []\n  },\n  userProfileFetchState: {\n    ...defaultFetchState\n  },\n  showDonationModal: false,\n  showSignoutModal: false,\n  isOnline: true,\n  isServerOnline: true,\n  renderStartTime: null,\n  donationFormState: {\n    ...defaultDonationFormState\n  },\n  updateCardState: {\n    ...updateCardDefaultState\n  }\n};\n\nexport const epics = [hardGoToEpic, failedUpdatesEpic, updateCompleteEpic];\n\nexport const sagas = [\n  ...createAcceptTermsSaga(actionTypes),\n  ...createThemeSaga(actionTypes),\n  ...createAppMountSaga(actionTypes),\n  ...createDonationSaga(actionTypes),\n  ...createFetchUserSaga(actionTypes),\n  ...createShowCertSaga(actionTypes),\n  ...createReportUserSaga(actionTypes),\n  ...createUserTokenSaga(actionTypes),\n  ...createSaveChallengeSaga(actionTypes),\n  ...createMsUsernameSaga(actionTypes),\n  ...createSurveySaga(actionTypes),\n  ...createSessionCompletedChallengesSaga(actionTypes)\n];",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "e221a8bf908dcf895fc74d599d542b26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "isProcessing: false, theme: 'light', showCert: {}, showCertFetchState: { ...defaultFetchState }, user: { sessionUser: null, otherUser: null }, userFetchState: { ...defaultFetchState }, allChallengesInfo: { challengeNodes: [], certificateNodes: [] }, userProfileFetchState: { ...defaultFetchState }, showDonationModal: false, showSignoutModal: false, isOnline: true, isServerOnline: true, renderStartTime: null, donationFormState: { ...defaultDonationFormState }, updateCardState: { ...updateCardDefaultState } }; export const epics = [hardGoToEpic, failedUpdatesEpic, updateCompleteEpic]; export const sagas = [ ...createAcceptTermsSaga(actionTypes), ...createThemeSaga(actionTypes), ...createAppMountSaga(actionTypes), ...createDonationSaga(actionTypes), ...createFetchUserSaga(actionTypes), ...createShowCertSaga(actionTypes), ...createReportUserSaga(actionTypes), ...createUserTokenSaga(actionTypes), ...createSaveChallengeSaga(actionTypes), ...createMsUsernameSaga(actionTypes), ...createSurveySaga(actionTypes), ...createSessionCompletedChallengesSaga(actionTypes) ];\n\nfunction spreadThePayloadOnUser(state, payload) {\n  return {\n    ...state,\n    user: {\n      ...state.user,\n      sessionUser: {\n        ...state.user.sessionUser,\n        ...payload\n      }\n    }\n  };\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "b6e8b1217792cab24b17497b0f0fb4a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "{ ...defaultFetchState }, allChallengesInfo: { challengeNodes: [], certificateNodes: [] }, userProfileFetchState: { ...defaultFetchState }, showDonationModal: false, showSignoutModal: false, isOnline: true, isServerOnline: true, renderStartTime: null, donationFormState: { ...defaultDonationFormState }, updateCardState: { ...updateCardDefaultState } }; export const epics = [hardGoToEpic, failedUpdatesEpic, updateCompleteEpic]; export const sagas = [ ...createAcceptTermsSaga(actionTypes), ...createThemeSaga(actionTypes), ...createAppMountSaga(actionTypes), ...createDonationSaga(actionTypes), ...createFetchUserSaga(actionTypes), ...createShowCertSaga(actionTypes), ...createReportUserSaga(actionTypes), ...createUserTokenSaga(actionTypes), ...createSaveChallengeSaga(actionTypes), ...createMsUsernameSaga(actionTypes), ...createSurveySaga(actionTypes), ...createSessionCompletedChallengesSaga(actionTypes) ]; function spreadThePayloadOnUser(state, payload) { return { ...state, user: { ...state.user, sessionUser: { ...state.user.sessionUser, ...payload } } }; }\n\nexport const reducer = handleActions(\n  {\n    [actionTypes.acceptTermsComplete]: (state, { payload }) => {\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          sessionUser: {\n            ...state.user.sessionUser,\n            // TODO: the user accepts the privacy terms in practice during auth\n            // however, it's currently being used to track if they've accepted\n            // or rejected the newsletter. Ideally this should be migrated,\n            // since they can't sign up without accepting the terms.\n            acceptedPrivacyTerms: true,\n            sendQuincyEmail:\n              payload === null\n                ? state.user.sessionUser.sendQuincyEmail\n                : payload\n          }\n        }\n      };\n    },\n    [actionTypes.allowSectionDonationRequests]: (state, { payload }) => {\n      return {\n        ...state,\n        donatableSectionRecentlyCompleted: {\n          block: payload.block,\n          module: payload.module,\n          superBlock: payload.superBlock\n        }\n      };\n    },\n    [actionTypes.setRenderStartTime]: (state, { payload }) => {\n      return {\n        ...state,\n        renderStartTime: payload\n      };\n    },\n    [actionTypes.updateCardError]: (state, { payload }) => ({\n      ...state,\n      updateCardState: { ...updateCardDefaultState, error: payload }\n    }),\n    [actionTypes.updateCardRedirecting]: state => ({\n      ...state,\n      updateCardState: { ...updateCardDefaultState, redirecting: true }\n    }),\n    [actionTypes.updateCardComplete]: state => ({\n      ...state,\n      updateCardState: { ...updateCardDefaultState, success: true }\n    }),\n    [actionTypes.updateDonationFormState]: (state, { payload }) => ({\n      ...state,\n      donationFormState: { ...state.donationFormState, ...payload }\n    }),\n    [actionTypes.postChargeProcessing]: state => ({\n      ...state,\n      donationFormState: { ...defaultDonationFormState, processing: true }\n    }),\n    [actionTypes.postChargeComplete]: state => {\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          sessionUser: {\n            ...state.user.sessionUser,\n            isDonating: true\n          }\n        },",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 722,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "7386fd6a0671b8e4543fa0559c3627f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "({ ...state, updateCardState: { ...updateCardDefaultState, error: payload } }), [actionTypes.updateCardRedirecting]: state => ({ ...state, updateCardState: { ...updateCardDefaultState, redirecting: true } }), [actionTypes.updateCardComplete]: state => ({ ...state, updateCardState: { ...updateCardDefaultState, success: true } }), [actionTypes.updateDonationFormState]: (state, { payload }) => ({ ...state, donationFormState: { ...state.donationFormState, ...payload } }), [actionTypes.postChargeProcessing]: state => ({ ...state, donationFormState: { ...defaultDonationFormState, processing: true } }), [actionTypes.postChargeComplete]: state => { return { ...state, user: { ...state.user, sessionUser: { ...state.user.sessionUser, isDonating: true } },donationFormState: { defaultDonationFormState, success: true }\n      };\n    },\n    [actionTypes postChargeError]: (state, { payload }) => ({ state,\n      donationFormState: { defaultDonationFormState, error: payload }\n    }),\n    [actionTypes updateAllChallengesInfo]: (state, { payload }) => ({ state,\n      allChallengesInfo: { payload }\n    }),\n    [actionTypes fetchUser]: state => ({ state,\n      userFetchState: { defaultFetchState }\n    }),\n    [actionTypes fetchProfileForUser]: state => ({ state,\n      userProfileFetchState: { defaultFetchState }\n    }),\n    [actionTypes fetchUserComplete]: (state, { payload: { user } }) => ({ state,\n      user: { state user,\n        sessionUser: user\n      },\n      currentChallengeId:\n        user currentChallengeId || store get(CURRENT_CHALLENGE_KEY),\n      userFetchState: {\n        pending: false,\n        complete: true,\n        errored: false,\n        error: null\n      }\n    }),\n    [actionTypes fetchUserTimeout]: state => ({ state,\n      userFetchState: {\n        // Pending because the fetch may still complete This allows the UI to\n        // render what it can while waiting for the fetch to complete pending: true,\n        complete: true,\n        errored: false,\n        error: null\n      }\n    }),\n    [actionTypes fetchUserError]: (state, { payload }) => ({",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "440d13f200eabdcbd0a53ada06b0fce9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "user: { state user, sessionUser: user }, currentChallengeId: user currentChallengeId || store get(CURRENT_CHALLENGE_KEY), userFetchState: { pending: false, complete: true, errored: false, error: null } }), [actionTypes fetchUserTimeout]: state => ({ state, userFetchState: { // Pending because the fetch may still complete This allows the UI to // render what it can while waiting for the fetch to complete pending: true, complete: true, errored: false, error: null } }), [actionTypes fetchUserError]: (state, { payload }) => ({state,\n      userFetchState: {\n        pending: false,\n        complete: true,\n        errored: true,\n        error: payload\n      }\n    }),\n    [actionTypes fetchProfileForUserComplete]: (\n      state,\n      { payload: { user } }\n    ) => {\n      return { state,\n        user: { state user,\n          otherUser: user\n        },\n        userProfileFetchState: { defaultFetchState,\n          pending: false,\n          complete: true\n        }\n      };\n    },\n    [actionTypes fetchProfileForUserError]: (state, { payload }) => ({ state,\n      userProfileFetchState: {\n        pending: false,\n        complete: false,\n        errored: true,\n        error: payload\n      }\n    }),\n    [actionTypes setTheme]: (state, { payload: theme }) => ({ state,\n      theme\n    }),\n    [actionTypes onlineStatusChange]: (state, { payload: isOnline }) => ({ state,\n      isOnline\n    }),\n    [actionTypes serverStatusChange]: (state, { payload: isServerOnline }) => ({ state,\n      isServerOnline\n    }),\n    [actionTypes closeDonationModal]: state => ({ state,\n      showDonationModal: false\n    }),\n    [actionTypes openDonationModal]: state => ({ state,\n      showDonationModal: true\n    }),\n    [actionTypes preventSectionDonationRequests]: state => ({ state,\n      donatableSectionRecentlyCompleted: null\n    }),\n    [actionTypes setIsRandomCompletionThreshold]: (state, { payload }) => ({ state,\n      isRandomCompletionThreshold: payload\n    }),\n    [actionTypes resetUserData]: state => ({ state,\n      user: { state user, sessionUser: null }\n    }),\n    [actionTypes",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "a52ee3421b94d3d882cf098447a13cdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "(state, { payload: isOnline }) => ({ state, isOnline }), [actionTypes serverStatusChange]: (state, { payload: isServerOnline }) => ({ state, isServerOnline }), [actionTypes closeDonationModal]: state => ({ state, showDonationModal: false }), [actionTypes openDonationModal]: state => ({ state, showDonationModal: true }), [actionTypes preventSectionDonationRequests]: state => ({ state, donatableSectionRecentlyCompleted: null }), [actionTypes setIsRandomCompletionThreshold]: (state, { payload }) => ({ state, isRandomCompletionThreshold: payload }), [actionTypes resetUserData]: state => ({ state, user: { state user, sessionUser: null } }), [actionTypesopenSignoutModal]: state => ({ state,\n      showSignoutModal: true\n    }),\n    [actionTypes closeSignoutModal]: state => ({ state,\n      showSignoutModal: false\n    }),\n    [actionTypes showCert]: state => ({ state,\n      showCert: {},\n      showCertFetchState: { defaultFetchState }\n    }),\n    [actionTypes showCertComplete]: (state, { payload }) => ({ state,\n      showCert: payload,\n      showCertFetchState: { defaultFetchState,\n        pending: false,\n        complete: true\n      }\n    }),\n    [actionTypes showCertError]: (state, { payload }) => ({ state,\n      showCert: {},\n      showCertFetchState: {\n        pending: false,\n        complete: false,\n        errored: true,\n        error: payload\n      }\n    }),\n    [actionTypes submitComplete]: (state, { payload }) => {\n      const {\n        examResults = null,\n        completedDailyCodingChallenges = [],\n        submittedChallenge,\n        savedChallenges\n      } = payload;\n\nlet submittedchallenges = [\n        { ...submittedChallenge, completedDate: Date.now() }\n      ];\n\n// if daily coding challenge, only update completedDailyCodingChallenges\n      // Uses the whole completedDailyCodingChallenges array from the API response\n      // Todo: update with submittedChallenge instead\n      if (getIsDailyCodingChallenge(submittedChallenge.challengeType)) {\n        return {\n          ...state,\n          user: {\n            ...state.user,\n            sessionUser: {\n              ...state.user.sessionUser,\n              completedDailyCodingChallenges\n            }\n          }\n        };\n      }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "6f5d1cb4a75b015e9ee7743a055a71ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "error: payload } }), [actionTypes submitComplete]: (state, { payload }) => { const { examResults = null, completedDailyCodingChallenges = [], submittedChallenge, savedChallenges } = payload; let submittedchallenges = [ { ...submittedChallenge, completedDate: Date.now() } ]; // if daily coding challenge, only update completedDailyCodingChallenges // Uses the whole completedDailyCodingChallenges array from the API response // Todo: update with submittedChallenge instead if (getIsDailyCodingChallenge(submittedChallenge.challengeType)) { return { ...state, user: { ...state.user, sessionUser: { ...state.user.sessionUser, completedDailyCodingChallenges } } }; }\n\n// if exam not passed, don't update completedChallenges - only update the results\n      if (examResults && !examResults.passed) {\n        return {\n          ...state,\n          user: {\n            ...state.user,\n            sessionUser: {\n              ...state.user.sessionUser,\n              examResults\n            }\n          }\n        };\n      } return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            completedChallenges: uniqBy(\n              [ submittedchallenges, state user sessionUser completedChallenges\n              ],\n              'id'\n            ),\n            savedChallenges:\n              savedChallenges savedChallengesSelector(state[MainApp]),\n            examResults\n          }\n        }\n      };\n    },\n    [actionTypes setMsUsername]: (state, { payload }) => {\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            msUsername: payload\n          }\n        }\n      };\n    },\n    [actionTypes setIsProcessing]: (state, { payload }) => {\n      return { state,\n        isProcessing: payload\n      };\n    },\n    [actionTypes updateUserToken]: (state, { payload }) => {\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            userToken: payload\n          }\n        }\n      };\n    },\n    [actionTypes deleteUserTokenComplete]: state => {\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            userToken: null\n          }\n        }\n      };\n    },\n    [actionTypes startExam]: state => {\n      return {",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "212ded4309d8a133d3a022cbda00f78c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "payload } } }; }, [actionTypes setIsProcessing]: (state, { payload }) => { return { state, isProcessing: payload }; }, [actionTypes updateUserToken]: (state, { payload }) => { return { state, user: { state user, sessionUser: { state user sessionUser, userToken: payload } } }; }, [actionTypes deleteUserTokenComplete]: state => { return { state, user: { state user, sessionUser: { state user sessionUser, userToken: null } } }; }, [actionTypes startExam]: state => { return {state,\n        examInProgress: true\n      };\n    },\n    [actionTypes stopExam]: state => {\n      return { state,\n        examInProgress: false\n      };\n    },\n    [actionTypes clearExamResults]: state => {\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            examResults: null\n          }\n        }\n      };\n    },\n    [actionTypes submitSurveyComplete]: (\n      state,\n      { payload: { surveyResults } }\n    ) => {\n      const { completedSurveys = [] } = state user sessionUser;\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            completedSurveys: [ completedSurveys, surveyResults]\n          }\n        }\n      };\n    },\n    [challengeTypes challengeMounted]: (state, { payload }) => ({ state,\n      currentChallengeId: payload\n    }),\n    [actionTypes saveChallengeComplete]: (state, { payload }) => {\n      return { state,\n        user: { state user,\n          sessionUser: { state user sessionUser,\n            savedChallenges: payload\n          }\n        }\n      };\n    },\n    [settingsTypes submitNewUsernameComplete]: (state, { payload }) =>\n      payload { state,\n            user: { state user,\n              sessionUser: { state user sessionUser,\n                username: payload\n              }\n            }\n          }\n        : state,\n    [settingsTypes submitNewAboutComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMyEmailComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMySocialsComplete]: (state, { payload }) =>\n      payload",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "855ee98865f53c777678169b969b715a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "return { state, user: { state user, sessionUser: { state user sessionUser, savedChallenges: payload } } }; }, [settingsTypes submitNewUsernameComplete]: (state, { payload }) => payload { state, user: { state user, sessionUser: { state user sessionUser, username: payload } } } : state, [settingsTypes submitNewAboutComplete]: (state, { payload }) => payload spreadThePayloadOnUser(state, payload) : state, [settingsTypes updateMyEmailComplete]: (state, { payload }) => payload spreadThePayloadOnUser(state, payload) : state, [settingsTypes updateMySocialsComplete]: (state, { payload }) => payloadspreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMySoundComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMyKeyboardShortcutsComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMyHonestyComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMyQuincyEmailComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes updateMyPortfolioComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes resetMyEditorLayoutComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes verifyCertComplete]: (state, { payload }) =>\n      payload spreadThePayloadOnUser(state, payload) : state,\n    [settingsTypes submitProfileUIComplete]: (state, { payload }) =>\n      payload { state,\n            user: { state user,\n              sessionUser: { state user sessionUser,\n                profileUI: { payload }\n              }\n            }\n          }\n        : state\n  },\n  initialState\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 15378,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "b129cfdefa724b784fd19aca90c720dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\theme-saga.js",
    "source_type": "git_repo",
    "title": "theme-saga",
    "content": "import { put, takeEvery, select, take } from 'redux-saga/effects';\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { setTheme } from './actions';\nimport { actionTypes } from './action-types';\nimport { userThemeSelector } from './selectors';\n\nfunction* toggleThemeSaga() {\n  const data = { type: 'success', message: 'flash.updated-themes' };\n  const currentTheme = localStorage.getItem('theme');\n  const invertedTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  localStorage.setItem('theme', invertedTheme);\n  yield put(setTheme(invertedTheme));\n  yield put(createFlashMessage({ ...data }));\n}\n\nfunction* initializeThemeSaga() {\n  // Wait for the fetch userComplete action\n  yield take(actionTypes.fetchUserComplete);\n\nconst userTheme = yield select(userThemeSelector);\n  const localStorageTheme = localStorage.getItem('theme');\n  const isSysThemeDark = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches;\n\nlet selectTheme = 'light';\n\nif (localStorageTheme !== null) {\n    selectTheme = localStorageTheme === 'dark' ? 'dark' : 'light';\n  } else if (userTheme) {\n    selectTheme = userTheme === 'night' ? 'dark' : 'light';\n  } else if (isSysThemeDark) {\n    selectTheme = 'dark';\n  }\n\nlocalStorage.setItem('theme', selectTheme);\n  yield put(setTheme(selectTheme));\n}\n\nexport function createThemeSaga(types) {\n  return [\n    takeEvery(types.toggleTheme, toggleThemeSaga),\n    takeEvery(types.initializeTheme, initializeThemeSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1484,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\theme-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a1af381790901aa4726af753162b51b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\update-complete-epic.js",
    "source_type": "git_repo",
    "title": "update-complete-epic",
    "content": "import { ofType } from 'redux-observable';\nimport { filter, mapTo } from 'rxjs/operators';\n\nimport { actionTypes as types } from './action-types';\nimport { serverStatusChange } from './actions';\nimport { isServerOnlineSelector } from './selectors';\n\nexport default function updateCompleteEpic(action$, state$) {\n  return action$.pipe(\n    ofType(types.updateComplete),\n    filter(() => !isServerOnlineSelector(state$.value)),\n    mapTo(serverStatusChange(true))\n  );\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 469,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\update-complete-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 103,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b935568e77da8d241dfea63a8c3746b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "import { createSelector } from 'reselect';\n\nimport superBlockStructure from '../../../curriculum/superblock-structure/full-stack.json';\nimport { randomBetween } from '../utils/random-between';\nimport { getSessionChallengeData } from '../utils/session-storage';\nimport { ns as MainApp } from './action-types';\n\nexport const savedChallengesSelector = state =>\n  userSelector(state)?.savedChallenges || [];\nexport const completedChallengesSelector = state =>\n  userSelector(state)?.completedChallenges || [];\nexport const completedDailyCodingChallengesSelector = state =>\n  userSelector(state)?.completedDailyCodingChallenges || [];\nexport const userIdSelector = state => userSelector(state)?.id;\nexport const partiallyCompletedChallengesSelector = state =>\n  userSelector(state)?.partiallyCompletedChallenges || [];\nexport const currentChallengeIdSelector = state =>\n  state[MainApp].currentChallengeId;\nexport const isRandomCompletionThresholdSelector = state =>\n  state[MainApp].isRandomCompletionThreshold;\nexport const isDonatingSelector = state => userSelector(state)?.isDonating;\nexport const isOnlineSelector = state => state[MainApp].isOnline;\nexport const isServerOnlineSelector = state => state[MainApp].isServerOnline;\nexport const isSignedInSelector = state => !!userSelector(state);\nexport const isDonationModalOpenSelector = state =>\n  state[MainApp].showDonationModal;\nexport const isSignoutModalOpenSelector = state =>\n  state[MainApp].showSignoutModal;\nexport const donatableSectionRecentlyCompletedSelector = state => {\n  const donatableSectionRecentlyCompletedState =\n    state[MainApp].donatableSectionRecentlyCompleted;\n\nif (donatableSectionRecentlyCompletedState) {\n    const { block, module, superBlock } =\n      donatableSectionRecentlyCompletedState;\n\nif (superBlock !== 'daily-coding-challenge') {\n      if (module) return { section: 'module', title: module, superBlock };\n      else if (block) return { section: 'block', title: block, superBlock };\n    }\n  }\n\nreturn null;\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7581,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6c37365d1aa888c5a45442d46009d967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "=> state[MainApp].isServerOnline; export const isSignedInSelector = state => !!userSelector(state); export const isDonationModalOpenSelector = state => state[MainApp].showDonationModal; export const isSignoutModalOpenSelector = state => state[MainApp].showSignoutModal; export const donatableSectionRecentlyCompletedSelector = state => { const donatableSectionRecentlyCompletedState = state[MainApp].donatableSectionRecentlyCompleted; if (donatableSectionRecentlyCompletedState) { const { block, module, superBlock } = donatableSectionRecentlyCompletedState; if (superBlock !== 'daily-coding-challenge') { if (module) return { section: 'module', title: module, superBlock }; else if (block) return { section: 'block', title: block, superBlock }; } } return null; };\n\nexport const donationFormStateSelector = state =>\n  state[MainApp].donationFormState;\nexport const updateCardStateSelector = state => state[MainApp].updateCardState;\nexport const signInLoadingSelector = state =>\n  userFetchStateSelector(state).pending;\nexport const showCertSelector = state => state[MainApp].showCert;\nexport const showCertFetchStateSelector = state =>\n  state[MainApp].showCertFetchState;\nexport const shouldRequestDonationSelector = state => {\n  const completedChallengeCount = completedChallengesSelector(state).length;\n  const isDonating = isDonatingSelector(state);\n  const donatableSectionRecentlyCompleted =\n    donatableSectionRecentlyCompletedSelector(state);\n  const isRandomCompletionThreshold =\n    isRandomCompletionThresholdSelector(state);\n\n// don't request donation if already donating\n  if (isDonating) return false;\n\n// donations only appear after the user has completed ten challenges (i.e.\n  // not before the 11th challenge has mounted)\n  if (completedChallengeCount < 10) return false;\n\n// a block or module has been completed\n  if (donatableSectionRecentlyCompleted) return true;\n\nconst sessionChallengeData = getSessionChallengeData();\n  /*\n    Different intervals need to be tested for optimization.\n   */\n  // the assumption is that we save the count when we request donations\n  if (sessionChallengeData.isSaved) {\n    // only request if sufficient challenges have been completed since last\n    // request\n    return sessionChallengeData.countSinceSave >= 20;\n  }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7581,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d937898e13d9f032943167ba549c26f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "challenges (i.e. // not before the 11th challenge has mounted) if (completedChallengeCount < 10) return false; // a block or module has been completed if (donatableSectionRecentlyCompleted) return true; const sessionChallengeData = getSessionChallengeData(); /* Different intervals need to be tested for optimization. */ // the assumption is that we save the count when we request donations if (sessionChallengeData.isSaved) { // only request if sufficient challenges have been completed since last // request return sessionChallengeData.countSinceSave >= 20; }\n\n/*\n   Show modal if user has completed 10 challanged in total\n   and 3 or more in this session.\n   The isRandomCompletionThreshold flag is used to AB test interval randomness\n  */\n  if (isRandomCompletionThreshold) {\n    return sessionChallengeData.currentCount >= randomBetween(3, 7);\n  } else {\n    return sessionChallengeData.currentCount >= 3;\n  }\n};\n\nexport const userTokenSelector = state => userSelector(state)?.userToken;\n\nexport const examInProgressSelector = state => state[MainApp].examInProgress;\n\nexport const examResultsSelector = state => userSelector(state)?.examResults;\n\nexport const msUsernameSelector = state => userSelector(state)?.msUsername;\n\nexport const completedSurveysSelector = state =>\n  userSelector(state)?.completedSurveys || [];\n\nexport const isProcessingSelector = state => {\n  return state[MainApp].isProcessing;\n};\n\nexport const createUserByNameSelector = username => state => {\n  const sessionUser = userSelector(state);\n  const otherUser = otherUserSelector(state);\n  const isSessionUser = sessionUser?.username === username;\n  const isOtherUser = otherUser?.username === username;\n  const user = isSessionUser ? sessionUser : isOtherUser ? otherUser : null;\n  return user;\n};\n\nexport const userFetchStateSelector = state => state[MainApp].userFetchState;\nexport const allChallengesInfoSelector = state =>\n  state[MainApp].allChallengesInfo;\n\nexport const completedChallengesIdsSelector = createSelector(\n  completedChallengesSelector,\n  completedChallenges => completedChallenges.map(node => node.id)\n);\n\nexport const completedDailyCodingChallengesIdsSelector = createSelector(\n  completedDailyCodingChallengesSelector,\n  completedChallenges => completedChallenges.map(node => node.id)\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7581,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "caf2b403fede0f495fd4dffe60e57937",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "state => { const sessionUser = userSelector(state); const otherUser = otherUserSelector(state); const isSessionUser = sessionUser?.username === username; const isOtherUser = otherUser?.username === username; const user = isSessionUser ? sessionUser : isOtherUser ? otherUser : null; return user; }; export const userFetchStateSelector = state => state[MainApp].userFetchState; export const allChallengesInfoSelector = state => state[MainApp].allChallengesInfo; export const completedChallengesIdsSelector = createSelector( completedChallengesSelector, completedChallenges => completedChallenges.map(node => node.id) ); export const completedDailyCodingChallengesIdsSelector = createSelector( completedDailyCodingChallengesSelector, completedChallenges => completedChallenges.map(node => node.id) );\n\nexport const completionStateSelector = createSelector(\n  [allChallengesInfoSelector, completedChallengesIdsSelector],\n  (allChallengesInfo, completedChallengesIds) => {\n    const chapters = superBlockStructure.chapters;\n    const { challengeNodes } = allChallengesInfo;\n\nconst getCompletionState = ({\n      chapters,\n      challenges,\n      completedChallengesIds\n    }) => {\n      const populateBlocks = blocks =>\n        blocks.map(block => {\n          const blockChallenges = challenges.filter(\n            ({ block: blockName }) => blockName === block.dashedName\n          );\n\nconst completedBlockChallenges = blockChallenges.every(({ id }) =>\n            completedChallengesIds.includes(id)\n          );\n\nreturn {\n            name: block.dashedName,\n            isCompleted:\n              completedBlockChallenges.length === blockChallenges.length\n          };\n        });\n\nconst populateModules = modules =>\n        modules.map(module => {\n          const blocks = populateBlocks(module.blocks);\n          const isCompleted = blocks.every(block => block.isCompleted === true);\n\nreturn {\n            name: module.dashedName,\n            blocks,\n            isCompleted\n          };\n        });\n\nconst allChapters = chapters.map(chapter => {\n        const modules = populateModules(chapter.modules);\n        const isCompleted = modules.every(\n          module => module.isCompleted === true\n        );\n\nreturn {\n          name: chapter.dashedName,\n          modules: populateModules(chapter.modules),\n          isCompleted\n        };\n      });\n\nreturn allChapters;\n    };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7581,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "37fd76dff16b229e46f7d12ae37eaae5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "blockChallenges.every(({ id }) => completedChallengesIds.includes(id) ); return { name: block.dashedName, isCompleted: completedBlockChallenges.length === blockChallenges.length }; }); const populateModules = modules => modules.map(module => { const blocks = populateBlocks(module.blocks); const isCompleted = blocks.every(block => block.isCompleted === true); return { name: module.dashedName, blocks, isCompleted }; }); const allChapters = chapters.map(chapter => { const modules = populateModules(chapter.modules); const isCompleted = modules.every( module => module.isCompleted === true ); return { name: chapter.dashedName, modules: populateModules(chapter.modules), isCompleted }; }); return allChapters; };\n\nreturn getCompletionState({\n      chapters,\n      challenges: challengeNodes.map(({ challenge }) => challenge),\n      completedChallengesIds\n    });\n  }\n);\nexport const userProfileFetchStateSelector = state =>\n  state[MainApp].userProfileFetchState;\nexport const usernameSelector = state => userSelector(state)?.username ?? '';\nexport const themeSelector = state => state[MainApp].theme;\nexport const userThemeSelector = state => userSelector(state)?.theme;\n\nexport const userSelector = state => state[MainApp].user.sessionUser;\nexport const otherUserSelector = state => state[MainApp].user.otherUser;\n\nexport const renderStartTimeSelector = state => state[MainApp].renderStartTime;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7581,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "28ad6434ef0ab08bdba21c281ff4e335",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\user-token-saga.js",
    "source_type": "git_repo",
    "title": "user-token-saga",
    "content": "import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../components/Flash/redux';\nimport { FlashMessages } from '../components/Flash/redux/flash-messages';\nimport { deleteUserToken } from '../utils/ajax';\nimport { deleteUserTokenComplete } from './actions';\n\nconst message = {\n  deleted: {\n    type: 'info',\n    message: FlashMessages.TokenDeleted\n  },\n  deleteErr: {\n    type: 'danger',\n    message: FlashMessages.DeleteTokenErr\n  }\n};\n\nfunction* deleteUserTokenSaga() {\n  try {\n    const { data } = yield call(deleteUserToken);\n\nif (data && Object.prototype.hasOwnProperty.call(data, 'userToken')) {\n      yield put(deleteUserTokenComplete());\n      yield put(createFlashMessage(message.deleted));\n    } else {\n      yield put(createFlashMessage(message.deleteErr));\n    }\n  } catch {\n    yield put(createFlashMessage(message.deleteErr));\n  }\n}\n\nexport function createUserTokenSaga(types) {\n  return [takeEvery(types.deleteUserToken, deleteUserTokenSaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1007,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\user-token-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "59f28bbb43ea6e7e3868c5e83b41f7de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\types.ts",
    "source_type": "git_repo",
    "title": "types",
    "content": "import { FlashMessages } from '../components/Flash/redux/flash-messages';\nimport { ns as MainApp } from './action-types';\n\nexport const FlashApp = 'flash';\n\nexport type FlashMessageArg = {\n  type: string;\n  message: FlashMessages;\n  variables?: Record<string, unknown>;\n};\n\nexport interface State {\n  [FlashApp]: FlashState;\n  [MainApp]: {\n    recentlyClaimedBlock: null | string;\n    showMultipleProgressModals: boolean;\n    currentChallengId: string;\n    showCert: Record<string, unknown>;\n    showCertFetchState: DefaultFetchState;\n    user: Record<string, unknown>;\n    userFetchState: DefaultFetchState;\n    userProfileFetchState: DefaultFetchState;\n    showDonationModal: boolean;\n    showSignoutModal: boolean;\n    isOnline: boolean;\n    donationFormState: DefaultDonationFormState;\n  };\n}\n\nexport interface FlashState {\n  message: { id: string } & FlashMessageArg;\n}\n\ninterface DefaultFetchState {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n  error: null | string;\n}\n\ninterface DefaultDonationFormState {\n  redirecting: boolean;\n  processing: boolean;\n  success: boolean;\n  error: null | string;\n}\n\nexport interface DonateFormState {\n  processing: boolean;\n  redirecting: boolean;\n  success: boolean;\n  error: string;\n  loading: {\n    stripe: boolean;\n    paypal: boolean;\n  };\n}\n\nexport interface UpdateCardState {\n  redirecting: boolean;\n  success: boolean;\n  error: string;\n}\n\nexport enum LocalStorageThemes {\n  Light = 'light',\n  Dark = 'dark'\n}\n\nexport enum UserThemes {\n  Night = 'night',\n  Default = 'default'\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1545,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\types.ts",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "093ad7555b123b243d22562ccb813e3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\analytics-strings.test.ts",
    "source_type": "git_repo",
    "title": "analytics-strings.test",
    "content": "import { stringifyDonationEvents } from './analytics-strings';\n\ndescribe('Analytics donation strings', () => {\n  it('Should return correct string for modal patreon payment', () => {\n    expect(stringifyDonationEvents('modal', 'patreon')).toEqual(\n      'Modal Patreon Payment Redirection'\n    );\n  });\n  it('Should return correct string for modal donate page stripe card payment', () => {\n    expect(stringifyDonationEvents('donate page', 'stripe card')).toEqual(\n      'Donate Page Stripe Card Payment Submission'\n    );\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 532,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\analytics-strings.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 116,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cf804d548cab223087358076cf2b624e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\algolia-locale-setup.ts",
    "source_type": "git_repo",
    "title": "algolia-locale-setup",
    "content": "import envData from '../../config/env.json';\n\nconst { clientLocale } = envData as {\n  clientLocale: keyof typeof algoliaIndices;\n};\n\nconst algoliaIndices = {\n  english: {\n    name: 'news',\n    searchPage: 'https://www.freecodecamp.org/news/search/'\n  },\n  espanol: {\n    name: 'news-es',\n    searchPage: 'https://www.freecodecamp.org/espanol/news/search/'\n  },\n  chinese: {\n    name: 'news-zh',\n    searchPage: 'https://www.freecodecamp.org/chinese/news/search/'\n  },\n  'chinese-traditional': {\n    name: 'news-zh',\n    searchPage: 'https://www.freecodecamp.org/chinese/news/search/'\n  },\n  italian: {\n    name: 'news-it',\n    searchPage: 'https://www.freecodecamp.org/italian/news/search/'\n  },\n  portuguese: {\n    name: 'news-pt-br',\n    searchPage: 'https://www.freecodecamp.org/portuguese/news/search/'\n  },\n  ukrainian: {\n    name: 'news-uk',\n    searchPage: 'https://www.freecodecamp.org/ukrainian/news/search/'\n  },\n  japanese: {\n    name: 'news-ja',\n    searchPage: 'https://www.freecodecamp.org/japanese/news/search/'\n  },\n  korean: {\n    name: 'news-ko',\n    searchPage: 'https://www.freecodecamp.org/korean/news/search/'\n  },\n  // Note: We don't build News for the locales below, so show English\n  // hits and use the English search page\n  german: {\n    name: 'news',\n    searchPage: 'https://www.freecodecamp.org/news/search/'\n  },\n  swahili: {\n    name: 'news',\n    searchPage: 'https://www.freecodecamp.org/news/search/'\n  }\n};\n\nexport const newsIndex = algoliaIndices[clientLocale].name;\nexport const searchPageUrl = algoliaIndices[clientLocale].searchPage;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1573,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\algolia-locale-setup.ts",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a1340c0ee2d2af2166c9e9de25baf89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\analytics-strings.ts",
    "source_type": "git_repo",
    "title": "analytics-strings",
    "content": "import { PaymentContext, PaymentProvider } from '../components/Donation/types';\n\nexport function stringifyDonationEvents(\n  paymentContext: PaymentContext,\n  paymentProvider: PaymentProvider\n): string {\n  const donationString = `${paymentContext} ${paymentProvider} payment ${\n    paymentProvider === 'patreon' ? 'redirection' : 'submission'\n  }`;\n\n// return title case\n  return donationString.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter =>\n    letter.toUpperCase()\n  );\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 470,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\analytics-strings.ts",
      "source_type": "git_repo"
    },
    "token_count": 112,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2beece4b99e93a84d0f64eae6f195800",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\challenge-request-helpers.ts",
    "source_type": "git_repo",
    "title": "challenge-request-helpers",
    "content": "import { ChallengeFiles } from '../redux/prop-types';\n\n/*\n * Express's body-parser has a default size limit of 102400 bytes for a request body.\n * These helper functions make sure the request body isn't too big when saving or submitting multifile cert projects\n */\n\nexport const MAX_BODY_SIZE = 102400;\n\ninterface StandardizeRequestBodyArgs {\n  id: string;\n  challengeFiles: ChallengeFiles;\n  challengeType: number;\n}\n\ninterface File {\n  contents: string;\n  ext: string;\n  history: string[];\n  key: string;\n  name: string;\n}\n\ninterface Body {\n  id: string;\n  files?: File[];\n  challengeType: number;\n}\n\nexport function standardizeRequestBody({\n  id,\n  challengeFiles = [],\n  challengeType\n}: StandardizeRequestBodyArgs): Body {\n  return {\n    id,\n    files: challengeFiles?.map(({ fileKey, contents, ext, name, history }) => {\n      return {\n        contents,\n        ext,\n        history, // TODO(Post-MVP): stop sending history, if possible. The client\n        // already gets it from the curriculum, so it should not be necessary to\n        // save it in the db.\n        key: fileKey,\n        name\n      };\n    }),\n    challengeType\n  };\n}\n\nexport function getStringSizeInBytes(str = ''): number {\n  const stringSizeInBytes = new Blob([JSON.stringify(str)]).size;\n\nreturn stringSizeInBytes;\n}\n\nexport function bodySizeFits(bodySizeInBytes: number): boolean {\n  return bodySizeInBytes <= MAX_BODY_SIZE;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1409,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\challenge-request-helpers.ts",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c12a6533f6113ad5f364b4222ae1594",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\create-types.test.ts",
    "source_type": "git_repo",
    "title": "create-types.test",
    "content": "import { createTypes, createAsyncTypes } from './create-types';\n\ndescribe('Create types utility (createTypes)', () => {\n  it('should generate an object with action types', () => {\n    const types = ['lorem', 'ipsum'];\n    const ns = 'namespace';\n\nexpect(createTypes(types, ns)).toEqual({\n      lorem: 'namespace.lorem',\n      ipsum: 'namespace.ipsum'\n    });\n  });\n});\n\ndescribe('Create async types utility (createAsyncTypes)', () => {\n  it('should generate a list of actions names', () => {\n    const action = 'action';\n\nexpect(createAsyncTypes(action)).toEqual([\n      'action',\n      'actionComplete',\n      'actionError'\n    ]);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 651,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\create-types.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "65856ced834dafa99812c27ffad3c9e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\create-types.ts",
    "source_type": "git_repo",
    "title": "create-types",
    "content": "type ActionTypes = {\n  [action: string]: string;\n};\n\n/**\n * Creates an object in which the `keys` represent the action names and the\n * `values` represent the action type.\n * {\n *   action: actionType,\n *   ...\n * }\n * @param {array} types Names of the actions.\n * @param {string} ns Name of the namespace.\n * @returns {object} Object with action types.\n */\nexport function createTypes(types: string[], ns: string): ActionTypes {\n  return types.reduce(\n    (types, action: string) => ({\n      ...types,\n      [action]: `${ns}.${action}`\n    }),\n    {}\n  );\n}\n\n/**\n * Creates an array with action names.\n * - original\n * - complete\n * - error\n * @param {string} action The name of the action.\n * @returns {array} Names of action names.\n */\nexport const createAsyncTypes = (action: string): string[] => [\n  `${action}`,\n  `${action}Complete`,\n  `${action}Error`\n];",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 863,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\create-types.ts",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dff69d685c984c246ba472ee1f024ac5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\curriculum-layout.ts",
    "source_type": "git_repo",
    "title": "curriculum-layout",
    "content": "import { challengeTypes } from '../../../shared/config/challenge-types';\n\n// Show a single project in a certification layout\n\nconst projectBasedChallengeTypes = [\n  challengeTypes.frontEndProject,\n  challengeTypes.backEndProject,\n  challengeTypes.jsProject,\n  challengeTypes.pythonProject,\n  challengeTypes.codeAllyCert,\n  challengeTypes.multifileCertProject,\n  challengeTypes.exam,\n  challengeTypes.codeAllyPractice,\n  challengeTypes.multifilePythonCertProject,\n  challengeTypes.lab,\n  challengeTypes.jsLab,\n  challengeTypes.pyLab,\n  challengeTypes.dailyChallengeJs,\n  challengeTypes.dailyChallengePy\n];\n\nexport const isProjectBased = (\n  challengeType: number,\n  blockDashedName: unknown = null\n) => {\n  // Is project based but should be collapsable, this differs from the\n  // other projects which are not collapsable.\n  if (blockDashedName === 'take-home-projects') return false;\n\nreturn projectBasedChallengeTypes.includes(challengeType);\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 949,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\curriculum-layout.ts",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "86e2b46e2e2e6e9713595a82cbe13c83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\daily-coding-challenge-validator.ts",
    "source_type": "git_repo",
    "title": "daily-coding-challenge-validator",
    "content": "import Joi from 'joi';\n\ninterface DailyCodingChallengeLanguageFromDb {\n  tests: {\n    text: string;\n    testString: string;\n  }[];\n  challengeFiles: {\n    fileKey: string;\n    contents: string;\n  }[];\n}\n\nexport interface DailyCodingChallengeFromDb {\n  id: string;\n  challengeNumber: number;\n  title: string;\n  date: string;\n  description: string;\n  javascript: DailyCodingChallengeLanguageFromDb;\n  python: DailyCodingChallengeLanguageFromDb;\n}\n\nconst challengeLanguageDataSchema = Joi.object({\n  tests: Joi.array()\n    .items(\n      Joi.object({\n        text: Joi.string().required(),\n        testString: Joi.string().required()\n      })\n    )\n    .required(),\n  challengeFiles: Joi.array()\n    .items(\n      Joi.object({\n        fileKey: Joi.string().required(),\n        contents: Joi.string().required()\n      })\n    )\n    .required(),\n  disableLoopProtectTests: Joi.boolean().optional()\n});\n\nconst challengeDataFromDbSchema = Joi.object({\n  id: Joi.string().required(),\n  challengeNumber: Joi.number().integer().min(1).required(),\n  title: Joi.string().required(),\n  date: Joi.string().required(),\n  description: Joi.string().required(),\n  javascript: challengeLanguageDataSchema.required(),\n  python: challengeLanguageDataSchema.required()\n});\n\nexport const validateDailyCodingChallengeSchema = (\n  challenge: DailyCodingChallengeFromDb\n) => {\n  return challengeDataFromDbSchema.validate(challenge);\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1408,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\daily-coding-challenge-validator.ts",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "54e4020457eac8549cfcf6ed83ec3a05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\error-messages.ts",
    "source_type": "git_repo",
    "title": "error-messages",
    "content": "import { FlashMessages } from '../components/Flash/redux/flash-messages';\n\nexport const standardErrorMessage = {\n  type: 'danger',\n  message: FlashMessages.WentWrong\n};\n\nexport const reallyWeirdErrorMessage = {\n  type: 'danger',\n  message: FlashMessages.ReallyWeird\n};\n\nexport const reportedErrorMessage = {\n  type: 'danger',\n  message: FlashMessages.GenericError\n};\n\nexport const certificateMissingErrorMessage = {\n  type: 'danger',\n  message: FlashMessages.CertificateMissing\n};\n\nexport const msTrophyVerified = {\n  type: 'success',\n  message: FlashMessages.MsTrophyVerified\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 580,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\error-messages.ts",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9bbfbc38a47371e6803d245f1f06fc30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\fire-confetti.ts",
    "source_type": "git_repo",
    "title": "fire-confetti",
    "content": "import confetti from 'canvas-confetti';\n\nexport const fireConfetti = () => {\n  const count = 200;\n  const defaults = {\n    origin: { y: 0.7 },\n    zIndex: 10000\n  };\n\nfunction fire(\n    particleRatio: number,\n    opts: {\n      spread?: number;\n      startVelocity?: number;\n      decay?: number;\n      scalar?: number;\n    }\n  ) {\n    confetti(\n      Object.assign({}, defaults, opts, {\n        particleCount: Math.floor(count * particleRatio)\n      })\n    )?.catch(err => console.log(err));\n  }\n\nfire(0.25, {\n    spread: 26,\n    startVelocity: 55\n  });\n  fire(0.2, {\n    spread: 60\n  });\n  fire(0.35, {\n    spread: 100,\n    decay: 0.91,\n    scalar: 0.8\n  });\n  fire(0.1, {\n    spread: 120,\n    startVelocity: 25,\n    decay: 0.92,\n    scalar: 1.2\n  });\n  fire(0.1, {\n    spread: 120,\n    startVelocity: 45\n  });\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 819,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\fire-confetti.ts",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "be1a80c11b9b72475c6948b9e561d2db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\format-seconds.ts",
    "source_type": "git_repo",
    "title": "format-seconds",
    "content": "export function formatSecondsToTime(s: number) {\n  const hourInSeconds = 60 * 60;\n  const minuteInSeconds = 60;\n  const h = Math.floor(s / hourInSeconds);\n  s -= h * hourInSeconds;\n\nconst minutes = Math.floor(s / minuteInSeconds);\n  s -= minutes * minuteInSeconds;\n\nconst mm = minutes < 10 && h >= 1 ? `0${minutes}` : minutes;\n  const seconds = s % 60;\n  const ss = seconds < 10 ? `0${seconds}` : seconds;\n\nreturn h > 0 ? `${h}:${mm}:${ss}` : `${mm}:${ss}`;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 466,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\format-seconds.ts",
      "source_type": "git_repo"
    },
    "token_count": 134,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8ea8690a3f31b5cf7d94f48d86ea03c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\format.js",
    "source_type": "git_repo",
    "title": "format",
    "content": "import { inspect } from 'util/util';\n\nexport function format(x) {\n  // we're trying to mimic console.log, so we avoid wrapping strings in quotes:\n  if (typeof x === 'string') return x;\n  else if (x instanceof Set) {\n    return `Set(${x.size}) {${Array.from(x).join(', ')}}`;\n  } else if (x instanceof Map) {\n    return `Map(${x.size}) {${Array.from(\n      x.entries(),\n      ([k, v]) => `${k} => ${v}`\n    ).join(', ')}})`;\n  } else if (typeof x === 'bigint') {\n    return x.toString() + 'n';\n  } else if (typeof x === 'symbol') {\n    return x.toString();\n  }\n  return inspect(x);\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 583,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\format.js",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1d793764a3e018a7dc07cd22e510fd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\format.test.ts",
    "source_type": "git_repo",
    "title": "format.test",
    "content": "import { format } from './format';\n\nfunction simpleFun() {\n  // eslint-disable-next-line no-var, @typescript-eslint/no-unused-vars\n  var x = 'y';\n}\n\n/* format uses util.inspect to do almost everything, the tests are just there\nto warn us if util.inspect ever changes */\ndescribe('format', () => {\n  it('returns a string', () => {\n    expect(typeof format('')).toBe('string');\n    expect(typeof format({})).toBe('string');\n    expect(typeof format([])).toBe('string');\n  });\n  it('does not modify strings', () => {\n    expect(format('')).toBe('');\n    expect(format('abcde')).toBe('abcde');\n    expect(format('Case Sensitive')).toBe('Case Sensitive');\n  });\n  it('formats shallow objects nicely', () => {\n    expect(format({})).toBe('{}');\n    expect(format({ a: 'one', b: 'two' })).toBe(`{ a: 'one', b: 'two' }`);\n  });\n  it('formats functions the same way as console.log', () => {\n    expect(format(simpleFun)).toBe('[Function: simpleFun]');\n  });\n  it('recurses into arrays', () => {\n    const objsInArr = [{ a: 'one' }, 'b', simpleFun];\n    expect(format(objsInArr)).toBe(\n      `[ { a: 'one' }, 'b', [Function: simpleFun] ]`\n    );\n  });\n  it('handles all primitive values', () => {\n    const primitives = ['str', 57, true, false, null, undefined];\n    expect(format(primitives)).toBe(\n      `[ 'str', 57, true, false, null, undefined ]`\n    );\n    expect(format(BigInt(10))).toBe(`10n`);\n    expect(format(Symbol('Sym'))).toBe(`Symbol(Sym)`);\n  });\n  it(`outputs NaN as 'NaN'`, () => {\n    expect(format(NaN)).toBe('NaN');\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1538,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\format.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ffab70c2aed9ecb94dea02ef965a6160",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\get-words.ts",
    "source_type": "git_repo",
    "title": "get-words",
    "content": "// this lets us do dynamic work ahead of time, inlining motivation.json, so\n// that Webpack will never try to include locales that we know are not used.\n\ninterface Quote {\n  quote: string;\n  author: string;\n}\n\ninterface Motivation {\n  compliments: string[];\n  motivationalQuotes: Quote[];\n}\n\ndeclare const preval: (s: TemplateStringsArray) => Motivation;\n\nconst words = preval`\n  const config = require('../../config/env.json');\n  const { clientLocale } = config;\n  const target = '../../i18n/locales/' + clientLocale + '/motivation.json';\n  const words = require(target);\n  module.exports = words;\n`;\n\nfunction randomItem<T>(arr: T[]): T {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function randomQuote(): Quote {\n  return randomItem(words.motivationalQuotes);\n}\n\nexport function randomCompliment(): string {\n  return randomItem(words.compliments);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 874,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\get-words.ts",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46521529184c36c55fb23113fea0fb7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\get-completion-percentage.ts",
    "source_type": "git_repo",
    "title": "get-completion-percentage",
    "content": "import { AllChallengesInfo } from '../redux/prop-types';\nimport { isProjectBased } from './curriculum-layout';\n\nexport function getCompletedPercentage(\n  completedChallengesIds: string[] = [],\n  currentBlockIds: string[] = [],\n  currentChallengeId: string\n): number {\n  const completedChallengesInBlock = getCompletedChallengesInBlock(\n    completedChallengesIds,\n    currentBlockIds,\n    currentChallengeId\n  );\n  const completedPercent = Math.round(\n    (completedChallengesInBlock / currentBlockIds.length) * 100\n  );\n\nreturn completedPercent > 100 ? 100 : completedPercent;\n}\n\nexport function getCompletedChallengesInBlock(\n  completedChallengesIds: string[],\n  currentBlockIds: string[],\n  currentChallengeId: string\n): number {\n  const oldCompletionCount = completedChallengesIds.filter(challengeId =>\n    currentBlockIds.includes(challengeId)\n  ).length;\n\nconst isAlreadyCompleted =\n    completedChallengesIds.includes(currentChallengeId);\n\nreturn isAlreadyCompleted ? oldCompletionCount : oldCompletionCount + 1;\n}\n\nexport const getCurrentBlockIds = (\n  allChallengesInfo: AllChallengesInfo,\n  block: string,\n  certification: string,\n  challengeType: number\n): string[] => {\n  const { challengeNodes, certificateNodes } = allChallengesInfo;\n  const currentCertificateIds =\n    certificateNodes\n      .filter(node => node.challenge.certification === certification)[0]\n      ?.challenge.tests.map(test => test.id) ?? [];\n  const currentBlockIds = challengeNodes\n    .filter(node => node.challenge.block === block)\n    .map(node => node.challenge.id);\n\nreturn isProjectBased(challengeType)\n    ? currentCertificateIds\n    : currentBlockIds;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1657,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\get-completion-percentage.ts",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "74ccdbd57b151a5f6b56afc65c250dba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\growthbook-cookie.ts",
    "source_type": "git_repo",
    "title": "growthbook-cookie",
    "content": "export const getUUID = () => {\n  const COOKIE_NAME = 'gbuuid';\n  const COOKIE_DAYS = 400; // 400 days is the max cookie duration for chrome\n\n// use the browsers crypto.randomUUID if set\n  const genUUID = () => {\n    if (window?.crypto?.randomUUID) return window.crypto.randomUUID();\n\n// return a random UUID style string`\n    return ((1e7).toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(\n      /[018]/g,\n      c =>\n        (\n          Number(c) ^\n          (crypto.getRandomValues(new Uint8Array(1))[0] &\n            (15 >> (Number(c) / 4)))\n        ).toString(16)\n    );\n  };\n\nconst getCookie = (name: string) => {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\n  };\n  const setCookie = (name: string, value: string) => {\n    const d = new Date();\n    d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * COOKIE_DAYS);\n    document.cookie = name + '=' + value + ';path=/;expires=' + d.toUTCString();\n  };\n\n// get the existing UUID from cookie if set, otherwise create one and store it in the cookie\n  if (getCookie(COOKIE_NAME)) return getCookie(COOKIE_NAME);\n\nconst uuid = genUUID();\n  setCookie(COOKIE_NAME, uuid);\n  return uuid;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1251,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\growthbook-cookie.ts",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35e2a2e60c47ef399d097b99a5af7868",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\growthbook-cookie.test.ts",
    "source_type": "git_repo",
    "title": "growthbook-cookie.test",
    "content": "import { getUUID } from './growthbook-cookie';\n\ndescribe('getUUID', () => {\n  let originalCookie: string;\n\nbeforeEach(() => {\n    global.crypto = {\n      ...global.crypto,\n      randomUUID: () => '123e4567-e89b-12d3-a456-426614174000'\n    };\n\n// Save original cookie\n    originalCookie = document.cookie;\n\n// Clear the cookie before each test\n    document.cookie.split(';').forEach(c => {\n      document.cookie = c\n        .replace(/^ +/, '')\n        .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n    });\n  });\n\nafterEach(() => {\n    // Restore original cookie\n    document.cookie = originalCookie;\n  });\n\nit('should generate a new UUID if none exists', () => {\n    const uuid = getUUID();\n    expect(uuid).toBeDefined();\n    expect(document.cookie).toContain('gbuuid=' + uuid);\n  });\n\nit('should return the existing UUID if one exists', () => {\n    const existingUUID = '123e4567-e89b-12d3-a456-426614174000';\n    document.cookie = 'gbuuid=' + existingUUID;\n    const uuid = getUUID();\n    expect(uuid).toBe(existingUUID);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1074,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\growthbook-cookie.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "76b78216eebfc485bb7bb1ac98fecd2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.ts",
    "source_type": "git_repo",
    "title": "handled-error",
    "content": "import { has } from 'lodash-es';\n\ninterface ErrorData {\n  type?: string;\n  message?: string;\n  redirectTo?: string | null;\n}\n\nexport const handledErrorSymbol = Symbol('handledError');\n\nexport type HandledError = Error & {\n  [handledErrorSymbol]: ErrorData;\n};\n\nexport function isHandledError(err: unknown): err is HandledError {\n  return has(err, handledErrorSymbol);\n}\n\nexport function unwrapHandledError(\n  err: HandledError\n): ErrorData | Record<string, never> {\n  return handledErrorSymbol in err ? err[handledErrorSymbol] : {};\n}\n\nexport function wrapHandledError(\n  err: Error,\n  { type, message, redirectTo }: ErrorData\n): HandledError {\n  (err as HandledError)[handledErrorSymbol] = {\n    type,\n    message,\n    redirectTo\n  };\n  return err as HandledError;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 768,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.ts",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "89147b212185604d145b51cacc699f02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "import cookies from 'browser-cookies';\nimport envData from '../../config/env.json';\n\nimport type {\n  ChallengeFile,\n  ChallengeFiles,\n  CompletedChallenge,\n  ExamTokenResponse,\n  GenerateExamResponseWithData,\n  SavedChallenge,\n  SavedChallengeFile,\n  SurveyResults,\n  User\n} from '../redux/prop-types';\nimport { DonationDuration } from '../../../shared/config/donation-settings';\n\nconst { apiLocation } = envData;\n\nconst base = apiLocation;\n\nconst defaultOptions: RequestInit = {\n  credentials: 'include'\n};\n\n// csrf_token is passed to the client as a cookie. The client must send\n// this back as a header.\nfunction getCSRFToken() {\n  const token =\n    typeof window !== 'undefined' ? cookies.get('csrf_token') : null;\n  return token ?? '';\n}\n\nexport interface ResponseWithData<T> {\n  response: Response;\n  data: T;\n}\n\n// TODO: Might want to handle flash messages as close to the request as possible\n// to make use of the Response object (message, status, etc)\nasync function get<T>(\n  path: string,\n  signal?: AbortSignal\n): Promise<ResponseWithData<T>> {\n  const response = await fetch(`${base}${path}`, {\n    ...defaultOptions,\n    headers: { 'CSRF-Token': getCSRFToken() },\n    signal\n  });\n\nreturn combineDataWithResponse(response);\n}\n\nasync function combineDataWithResponse<T>(response: Response) {\n  const data = (await response.json()) as T;\n  return { response, data };\n}\n\nexport function post<T = void>(\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  return request('POST', path, body);\n}\n\nfunction put<T = void>(\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  return request('PUT', path, body);\n}\n\nfunction deleteRequest<T = void>(\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  return request('DELETE', path, body);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "15e8b35d48e4f302f8f9522f3173901d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "{ 'CSRF-Token': getCSRFToken() }, signal }); return combineDataWithResponse(response); } async function combineDataWithResponse<T>(response: Response) { const data = (await response.json()) as T; return { response, data }; } export function post<T = void>( path: string, body: unknown ): Promise<ResponseWithData<T>> { return request('POST', path, body); } function put<T = void>( path: string, body: unknown ): Promise<ResponseWithData<T>> { return request('PUT', path, body); } function deleteRequest<T = void>( path: string, body: unknown ): Promise<ResponseWithData<T>> { return request('DELETE', path, body); }\n\nasync function request<T>(\n  method: 'POST' | 'PUT' | 'DELETE',\n  path: string,\n  body: unknown\n): Promise<ResponseWithData<T>> {\n  const options: RequestInit = {\n    ...defaultOptions,\n    method,\n    headers: {\n      'CSRF-Token': getCSRFToken(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  };\n\nconst response = await fetch(`${base}${path}`, options);\n  return combineDataWithResponse(response);\n}\n\n/** GET **/\n\ntype CompleteChallengeFromApi = {\n  files: Array<Omit<ChallengeFile, 'fileKey'> & { key: string }>;\n} & Omit<CompletedChallenge, 'challengeFiles'>;\n\ntype SavedChallengeFromApi = {\n  files: Array<Omit<SavedChallengeFile, 'fileKey'> & { key: string }>;\n} & Omit<SavedChallenge, 'challengeFiles'>;\n\ntype ApiUser = Omit<User, 'completedChallenges' & 'savedChallenges'> & {\n  completedChallenges?: CompleteChallengeFromApi[];\n  savedChallenges?: SavedChallengeFromApi[];\n};\n\ntype ApiUserResponse = {\n  user: {\n    [username: string]: ApiUser;\n  };\n  result?: string;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "9fbcb4136b32c4dd0fe4fbc8bdd4beca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "'application/json' }, body: JSON.stringify(body) }; const response = await fetch(`${base}${path}`, options); return combineDataWithResponse(response); } /** GET **/ type CompleteChallengeFromApi = { files: Array<Omit<ChallengeFile, 'fileKey'> & { key: string }>; } & Omit<CompletedChallenge, 'challengeFiles'>; type SavedChallengeFromApi = { files: Array<Omit<SavedChallengeFile, 'fileKey'> & { key: string }>; } & Omit<SavedChallenge, 'challengeFiles'>; type ApiUser = Omit<User, 'completedChallenges' & 'savedChallenges'> & { completedChallenges?: CompleteChallengeFromApi[]; savedChallenges?: SavedChallengeFromApi[]; }; type ApiUserResponse = { user: { [username: string]: ApiUser; }; result?: string; };\n\nfunction parseApiResponseToClientUser(data: ApiUserResponse): User | null {\n  const userData = data.user?.[data?.result ?? ''];\n  let completedChallenges: CompletedChallenge[] = [];\n  let savedChallenges: SavedChallenge[] = [];\n  if (userData) {\n    completedChallenges = mapFilesToChallengeFiles(\n      userData.completedChallenges\n    );\n    savedChallenges = mapFilesToChallengeFiles(userData.savedChallenges);\n  }\n  return data.result\n    ? { ...userData, completedChallenges, savedChallenges }\n    : null;\n}\n\n// TODO: this at least needs a few aliases so it's human readable\nexport function mapFilesToChallengeFiles<File, Rest>(\n  fileContainer: ({ files: (File & { key: string })[] } & Rest)[] = []\n) {\n  return fileContainer.map(({ files, ...rest }) => ({\n    ...rest,\n    challengeFiles: mapKeyToFileKey(files)\n  }));\n}\n\nfunction mapKeyToFileKey<K>(\n  files: (K & { key: string })[]\n): (Omit<K, 'key'> & { fileKey: string })[] {\n  return files.map(({ key, ...rest }) => ({ ...rest, fileKey: key }));\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "cac519c13d6ed1be7331eadfd41ef0df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "} // TODO: this at least needs a few aliases so it's human readable export function mapFilesToChallengeFiles<File, Rest>( fileContainer: ({ files: (File & { key: string })[] } & Rest)[] = [] ) { return fileContainer.map(({ files, ...rest }) => ({ ...rest, challengeFiles: mapKeyToFileKey(files) })); } function mapKeyToFileKey<K>( files: (K & { key: string })[] ): (Omit<K, 'key'> & { fileKey: string })[] { return files.map(({ key, ...rest }) => ({ ...rest, fileKey: key })); }\n\nexport function getSessionUser(\n  signal?: AbortSignal\n): Promise<ResponseWithData<User | null>> {\n  const responseWithData: Promise<ResponseWithData<ApiUserResponse>> = get(\n    '/user/get-session-user',\n    signal\n  );\n  // TODO: Once DB is migrated, no longer need to parse `files` -> `challengeFiles` etc.\n  return responseWithData.then(({ response, data }) => {\n    const user = parseApiResponseToClientUser(data);\n    return {\n      response,\n      data: user\n    };\n  });\n}\n\ntype UserProfileResponse = {\n  entities: Omit<ApiUserResponse, 'result'>;\n  result: string | undefined;\n};\nexport function getUserProfile(\n  username: string\n): Promise<ResponseWithData<User | null>> {\n  const responseWithData = get<UserProfileResponse>(\n    `/users/get-public-profile?username=${username}`\n  );\n  return responseWithData.then(({ response, data }) => {\n    const user = parseApiResponseToClientUser({\n      user: data.entities?.user ?? {},\n      result: data.result\n    });\n    return {\n      response,\n      data: user\n    };\n  });\n}\n\ninterface Cert {\n  certTitle: string;\n  username: string;\n  date: Date;\n  completionTime: string;\n}\nexport function getShowCert(\n  username: string,\n  certSlug: string\n): Promise<ResponseWithData<Cert>> {\n  return get(`/certificate/showCert/${username}/${certSlug}`);\n}\n\nexport function getUsernameExists(\n  username: string\n): Promise<ResponseWithData<boolean>> {\n  return get(`/users/exists?username=${username}`);\n}\n\nexport function getGenerateExam(\n  challengeId: string\n): Promise<GenerateExamResponseWithData> {\n  return get(`/exam/${challengeId}`);\n}\n\n/** POST **/",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "01e46f2578e92381520eb103e71fab3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "return responseWithData.then(({ response, data }) => { const user = parseApiResponseToClientUser({ user: data.entities?.user ?? {}, result: data.result }); return { response, data: user }; }); } interface Cert { certTitle: string; username: string; date: Date; completionTime: string; } export function getShowCert( username: string, certSlug: string ): Promise<ResponseWithData<Cert>> { return get(`/certificate/showCert/${username}/${certSlug}`); } export function getUsernameExists( username: string ): Promise<ResponseWithData<boolean>> { return get(`/users/exists?username=${username}`); } export function getGenerateExam( challengeId: string ): Promise<GenerateExamResponseWithData> { return get(`/exam/${challengeId}`); } /** POST **/\n\ninterface Donation {\n  email: string;\n  amount: number;\n  duration: string;\n  provider: string;\n  subscriptionId: string;\n  customerId: string;\n  startDate: Date;\n}\n// TODO: Verify if the body has and needs this Donation type. The api seems to\n// just need the body to exist, but doesn't seem to use the properties.\nexport function addDonation(body: Donation): Promise<ResponseWithData<void>> {\n  return post('/donate/add-donation', body);\n}\n\nexport function updateStripeCard() {\n  return put('/donate/update-stripe-card', {});\n}\n\nexport function postChargeStripe(\n  body: Donation\n): Promise<ResponseWithData<void>> {\n  return post('/donate/charge-stripe', body);\n}\n\nexport function postChargeStripeCard(\n  body: Donation\n): Promise<ResponseWithData<void>> {\n  return post('/donate/charge-stripe-card', body);\n}\n\nexport function generateExamToken(): Promise<\n  ResponseWithData<ExamTokenResponse>\n> {\n  return post('/user/exam-environment/token', {});\n}\n\ntype PaymentIntentResponse = Promise<\n  ResponseWithData<\n    | {\n        clientSecret?: never;\n        subscriptionId?: never;\n        error: string;\n      }\n    | {\n        clientSecret: string;\n        subscriptionId: string;\n        error?: never;\n      }\n  >\n>;\n\nexport function createStripePaymentIntent(body: {\n  email: string | undefined;\n  name: string | undefined;\n  amount: number;\n  duration: DonationDuration;\n}): PaymentIntentResponse {\n  return post('/donate/create-stripe-payment-intent', body);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "738aac61812ddbf46b31596bb94f83c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "{ return post('/donate/charge-stripe', body); } export function postChargeStripeCard( body: Donation ): Promise<ResponseWithData<void>> { return post('/donate/charge-stripe-card', body); } export function generateExamToken(): Promise< ResponseWithData<ExamTokenResponse> > { return post('/user/exam-environment/token', {}); } type PaymentIntentResponse = Promise< ResponseWithData< | { clientSecret?: never; subscriptionId?: never; error: string; } | { clientSecret: string; subscriptionId: string; error?: never; } > >; export function createStripePaymentIntent(body: { email: string | undefined; name: string | undefined; amount: number; duration: DonationDuration; }): PaymentIntentResponse { return post('/donate/create-stripe-payment-intent', body); }\n\ninterface Report {\n  username: string;\n  reportDescription: string;\n}\nexport function postReportUser(body: Report): Promise<ResponseWithData<void>> {\n  return post('/user/report-user', body);\n}\n\n// Both are called without a payload in danger-zone-saga,\n// which suggests both are sent without any body\n// TODO: Convert to DELETE\nexport function postDeleteAccount(): Promise<ResponseWithData<void>> {\n  return post('/account/delete', {});\n}\n\nexport function postResetProgress(): Promise<ResponseWithData<void>> {\n  return post('/account/reset-progress', {});\n}\n\nexport function postUserToken(): Promise<ResponseWithData<void>> {\n  return post('/user/user-token', {});\n}\n\nexport function postMsUsername(body: {\n  msTranscriptUrl: string;\n}): Promise<ResponseWithData<void>> {\n  return post('/user/ms-username', body);\n}\n\nexport function postSaveChallenge(body: {\n  id: string;\n  files: ChallengeFiles;\n}): Promise<ResponseWithData<void>> {\n  return post('/save-challenge', body);\n}\n\nexport function postSubmitSurvey(body: {\n  surveyResults: SurveyResults;\n}): Promise<ResponseWithData<void>> {\n  return post('/user/submit-survey', body);\n}\n\n/** PUT **/\n\ninterface MyAbout {\n  name: string;\n  location: string;\n  about: string;\n  picture: string;\n}\nexport function putUpdateMyAbout(\n  values: MyAbout\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-about', { ...values });\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "f142547c64b9bc16297b093415188a9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "Promise<ResponseWithData<void>> { return post('/user/user-token', {}); } export function postMsUsername(body: { msTranscriptUrl: string; }): Promise<ResponseWithData<void>> { return post('/user/ms-username', body); } export function postSaveChallenge(body: { id: string; files: ChallengeFiles; }): Promise<ResponseWithData<void>> { return post('/save-challenge', body); } export function postSubmitSurvey(body: { surveyResults: SurveyResults; }): Promise<ResponseWithData<void>> { return post('/user/submit-survey', body); } /** PUT **/ interface MyAbout { name: string; location: string; about: string; picture: string; } export function putUpdateMyAbout( values: MyAbout ): Promise<ResponseWithData<void>> { return put('/update-my-about', { ...values }); }\n\nexport function putUpdateMyUsername(\n  username: string\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-username', { username });\n}\n\nexport function putUpdateMyProfileUI(\n  profileUI: User['profileUI']\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-profileui', { profileUI });\n}\n\nexport function putUpdateMySocials(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-socials', update);\n}\n\nexport function putUpdateMyKeyboardShortcuts(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-keyboard-shortcuts', update);\n}\n\nexport function putUpdateMyHonesty(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-honesty', update);\n}\n\nexport function putUpdateMyQuincyEmail(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-quincy-email', update);\n}\n\nexport function putUpdateMyPortfolio(\n  update: Record<string, string>\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-portfolio', update);\n}\n\nexport function putUserAcceptsTerms(\n  quincyEmails: boolean\n): Promise<ResponseWithData<void>> {\n  return put('/update-privacy-terms', { quincyEmails });\n}\n\nexport function putUserUpdateEmail(\n  email: string\n): Promise<ResponseWithData<void>> {\n  return put('/update-my-email', { email });\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "3667d739ca29dd14f6304195f7b8d9dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
    "source_type": "git_repo",
    "title": "ajax",
    "content": "Record<string, string> ): Promise<ResponseWithData<void>> { return put('/update-my-keyboard-shortcuts', update); } export function putUpdateMyHonesty( update: Record<string, string> ): Promise<ResponseWithData<void>> { return put('/update-my-honesty', update); } export function putUpdateMyQuincyEmail( update: Record<string, string> ): Promise<ResponseWithData<void>> { return put('/update-my-quincy-email', update); } export function putUpdateMyPortfolio( update: Record<string, string> ): Promise<ResponseWithData<void>> { return put('/update-my-portfolio', update); } export function putUserAcceptsTerms( quincyEmails: boolean ): Promise<ResponseWithData<void>> { return put('/update-privacy-terms', { quincyEmails }); } export function putUserUpdateEmail( email: string ): Promise<ResponseWithData<void>> { return put('/update-my-email', { email }); }\n\nexport function putVerifyCert(\n  certSlug: string\n): Promise<ResponseWithData<void>> {\n  return put('/certificate/verify', { certSlug });\n}\n\n/** DELETE **/\nexport function deleteUserToken(): Promise<ResponseWithData<void>> {\n  return deleteRequest('/user/user-token', {});\n}\n\nexport function deleteMsUsername(): Promise<ResponseWithData<void>> {\n  return deleteRequest('/user/ms-username', {});\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10092,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\ajax.ts",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "4f6259d13a95d37ad195fda21c40d6e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.test.ts",
    "source_type": "git_repo",
    "title": "handled-error.test",
    "content": "import { isObject } from 'lodash-es';\n\nimport {\n  isHandledError,\n  wrapHandledError,\n  unwrapHandledError,\n  handledErrorSymbol\n} from './handled-error';\nimport type { HandledError } from './handled-error';\n\ndescribe('client/src utilities', () => {\n  describe('handled-error.js', () => {\n    const mockHandledErrorData = {\n      type: 'info',\n      message: 'something helpful',\n      redirectTo: '/a-path-we-choose'\n    };\n\ndescribe('isHandledError', () => {\n      it('returns a boolean', () => {\n        expect(typeof isHandledError({} as Error)).toEqual('boolean');\n      });\n\nit('returns false for an unhandled error', () => {\n        expect(isHandledError(new Error())).toEqual(false);\n      });\n\nit('returns true for a handled error', () => {\n        const handledError = new Error() as HandledError;\n        handledError[handledErrorSymbol] = {};\n\nexpect(isHandledError(handledError)).toEqual(true);\n      });\n    });\n\ndescribe('wrapHandledError', () => {\n      // this is testing implementation details 👎\n      // we need to make these tests more robust 💪\n      it('returns an error with a handledError property', () => {\n        const handledError = wrapHandledError(\n          new Error() as HandledError,\n          mockHandledErrorData\n        );\n        expect(handledErrorSymbol in handledError).toEqual(true);\n      });\n      it('assigns error handling details to the handledError property', () => {\n        const handledError = wrapHandledError(\n          new Error() as HandledError,\n          mockHandledErrorData\n        );\n        expect(handledError[handledErrorSymbol]).toEqual(mockHandledErrorData);\n      });\n    });\n\ndescribe('unwrapHandledError', () => {\n      // this is testing implementation details 👎\n      // we need to make these tests more robust 💪\n      it('returns an object by default', () => {\n        const error = new Error() as HandledError;\n        const unwrappedError = unwrapHandledError(error);\n        expect(isObject(unwrappedError)).toBe(true);\n      });",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2383,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "78dd705ffd2d786c949bcfec4fb0e3de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.test.ts",
    "source_type": "git_repo",
    "title": "handled-error.test",
    "content": "new Error() as HandledError, mockHandledErrorData ); expect(handledErrorSymbol in handledError).toEqual(true); }); it('assigns error handling details to the handledError property', () => { const handledError = wrapHandledError( new Error() as HandledError, mockHandledErrorData ); expect(handledError[handledErrorSymbol]).toEqual(mockHandledErrorData); }); }); describe('unwrapHandledError', () => { // this is testing implementation details 👎 // we need to make these tests more robust 💪 it('returns an object by default', () => { const error = new Error() as HandledError; const unwrappedError = unwrapHandledError(error); expect(isObject(unwrappedError)).toBe(true); });\n\nit('returns the data that was wrapped in the error', () => {\n        const handledError = new Error() as HandledError;\n        handledError[handledErrorSymbol] = mockHandledErrorData;\n        const unwrapped = unwrapHandledError(handledError);\n        expect(unwrapped).toEqual(mockHandledErrorData);\n      });\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2383,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\handled-error.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5491969d101fdfdacd04ec9f83867520",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "/*\n * This regex is not for validation, it is purely to see\n * if we are looking at something like what we want to validate\n * before we try to validate.\n */\nexport const maybeEmailRE = /.*@.*\\.\\w\\w/;\nexport const maybeUrlRE = /https?:\\/\\/.*\\..*/;\nexport const hasProtocolRE = /^http/;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 286,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 78,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a87e8ff7a5d2c469f6cc35254c38c6b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\is-contained.test.ts",
    "source_type": "git_repo",
    "title": "is-contained.test",
    "content": "import { isContained } from './is-contained';\n\ndescribe('client/src isContained', () => {\n  it('returns true if `arr1` values are contained in `arr2`', () => {\n    const arr1 = ['dog', 'cat'];\n    const arr2 = ['cat', 'dog'];\n    expect(isContained(arr1, arr2)).toEqual(true);\n  });\n\nit('returns true if `arr1` values are not contained in `arr2`', () => {\n    const arr1 = ['dog', 'cat'];\n    const arr2 = ['cat', 'monkey', 'bird'];\n    expect(isContained(arr1, arr2)).toEqual(false);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 497,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\is-contained.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 142,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "104025be1b009bf8df120a773b36d661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\is-contained.ts",
    "source_type": "git_repo",
    "title": "is-contained",
    "content": "// Performs a check if the items in `value` exist in `other`\nexport function isContained(value: string[], other: string[]): boolean {\n  return value.every(i => other.includes(i));\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 182,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\is-contained.ts",
      "source_type": "git_repo"
    },
    "token_count": 41,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "156583f08b47d876ccb32a47a90c39d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\is-a-cert.ts",
    "source_type": "git_repo",
    "title": "is-a-cert",
    "content": "import { SuperBlocks } from '../../../shared/config/curriculum';\n\nexport function isOldRespCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.RespWebDesign);\n}\n\nexport function isRelationalDbCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.RelationalDb);\n}\n\nexport function isExamCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.FoundationalCSharp);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 440,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\is-a-cert.ts",
      "source_type": "git_repo"
    },
    "token_count": 97,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "292cafa37880554da9d91860573113f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.ts",
    "source_type": "git_repo",
    "title": "path-parsers",
    "content": "import { WindowLocation } from '@gatsbyjs/reach-router';\nimport { i18nConstants } from '../../../shared/config/constants';\n\nconst splitPath = (pathname: string): string[] =>\n  pathname.split('/').filter(x => x);\n\nexport const isLanding = (pathname: string): boolean => {\n  const pathArray = splitPath(pathname);\n  const isEnglishLanding = pathArray.length === 0;\n  const isI18Landing =\n    pathArray.length === 1 && i18nConstants.includes(pathArray[0]);\n  return isEnglishLanding || isI18Landing;\n};\n\nexport const isLocationSuperBlock = (\n  location: WindowLocation | undefined\n): boolean => {\n  return /^\\/learn\\/[\\w-]+\\/$/.test(location?.pathname ?? '');\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.ts",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6d569bc5b642b3fb1f6374d4e5812777",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\math-jax.ts",
    "source_type": "git_repo",
    "title": "math-jax",
    "content": "import { SuperBlocks } from '../../../shared/config/curriculum';\nimport { scriptLoader } from './script-loaders';\n\nexport const mathJaxSrc =\n  'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML';\n\nexport const isMathJaxAllowed = (pathname: string) =>\n  superBlocksWithMathJax.some(superBlock => pathname.includes(superBlock));\n\nconst superBlocksWithMathJax = [\n  SuperBlocks.JsAlgoDataStructNew,\n  SuperBlocks.JsAlgoDataStruct,\n  SuperBlocks.ProjectEuler,\n  SuperBlocks.RosettaCode,\n  SuperBlocks.SciCompPy,\n  SuperBlocks.FullStackDeveloper\n];\n\nconst configure = () => {\n  if (!global.MathJax) return;\n  const MathJax = global.MathJax;\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [\n        ['$', '$'],\n        ['\\\\(', '\\\\)']\n      ],\n      processEscapes: true,\n      processClass: 'mathjax-support'\n    }\n  });\n  MathJax.Hub.Queue([\n    'Typeset',\n    MathJax.Hub,\n    document.querySelector('.mathjax-support')\n  ]);\n};\n\nexport const initializeMathJax = (mathJaxChallenge = true) => {\n  const mathJaxMountPoint = document.querySelector('#mathjax');\n  if (global.MathJax) {\n    // Configure MathJax when it's loaded and\n    // users navigate from another challenge\n    configure();\n  } else if (!mathJaxMountPoint && mathJaxChallenge) {\n    mathJaxScriptLoader();\n  }\n};\n\nconst mathJaxScriptLoader = () => {\n  scriptLoader('mathjax', false, mathJaxSrc, configure, '');\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1419,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\math-jax.ts",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "58e56916c6d9ffc24bdbb593e2012456",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.test.ts",
    "source_type": "git_repo",
    "title": "path-parsers.test",
    "content": "import { isLanding } from './path-parsers';\n\nconst pathnames = {\n  english: {\n    landing: '/',\n    superBlock: '/learn/responsive-web-design',\n    challenge:\n      '/learn/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  englishWithYear: {\n    landing: '/',\n    superBlock: '/learn/2022/responsive-web-design',\n    challenge:\n      '/learn/2022/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  espanol: {\n    landing: '/espanol',\n    superBlock: '/espanol/learn/responsive-web-design',\n    challenge:\n      '/espanol/learn/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  espanolWithYear: {\n    landing: '/espanol',\n    superBlock: '/espanol/learn/2022/responsive-web-design',\n    challenge:\n      '/espanol/learn/2022/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  }\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2089,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "64e9bbbbd1916637e429a7dae1a6b9e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.test.ts",
    "source_type": "git_repo",
    "title": "path-parsers.test",
    "content": "import { isLanding } from './path-parsers';\n\nconst pathnames = {\n  english: {\n    landing: '/',\n    superBlock: '/learn/responsive-web-design',\n    challenge:\n      '/learn/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  englishWithYear: {\n    landing: '/',\n    superBlock: '/learn/2022/responsive-web-design',\n    challenge:\n      '/learn/2022/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  espanol: {\n    landing: '/espanol',\n    superBlock: '/espanol/learn/responsive-web-design',\n    challenge:\n      '/espanol/learn/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  },\n  espanolWithYear: {\n    landing: '/espanol',\n    superBlock: '/espanol/learn/2022/responsive-web-design',\n    challenge:\n      '/espanol/learn/2022/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements'\n  }\n};\n\ndescribe('isLanding', () => {\n  it('returns a booleans', () => {\n    expect(typeof isLanding('/')).toBe('boolean');\n  });\n  it('return true for Espanol landing pathname', () => {\n    expect(isLanding(pathnames.espanol.landing)).toBe(true);\n  });\n  it('returns false for Espanol super block pathname', () => {\n    expect(isLanding(pathnames.espanol.superBlock)).toBe(false);\n  });\n  it('returns false for Espanol challenge pathname', () => {\n    expect(isLanding(pathnames.espanol.challenge)).toBe(false);\n  });\n  it('returns true for English landing pathname', () => {\n    expect(isLanding(pathnames.english.landing)).toBe(true);\n  });\n  it('returns false for English super block pathname', () => {\n    expect(isLanding(pathnames.english.superBlock)).toBe(false);\n  });\n  it('returns false for English challenge pathname', () => {\n    expect(isLanding(pathnames.english.challenge)).toBe(false);\n  });\n  it('returns false for English with year challenge pathname', () => {\n    expect(isLanding(pathnames.englishWithYear.challenge)).toBe(false);\n  });\n  it('returns false for Espanol with year challenge pathname', () => {\n    expect(isLanding(pathnames.espanolWithYear.challenge)).toBe(false);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2089,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\path-parsers.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a89ffe7d54cbad019205a275a3b177d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\random-between.ts",
    "source_type": "git_repo",
    "title": "random-between",
    "content": "// returns a random number between x and y\nexport const randomBetween = (x: number, y: number): number =>\n  Math.floor(Math.random() * (y - x + 1)) + x;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 153,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\random-between.ts",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1fab2f56263f717c13f9bd8b165e6046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\replace-apple-quotes.test.ts",
    "source_type": "git_repo",
    "title": "replace-apple-quotes.test",
    "content": "import { replaceAppleQuotes } from './replace-apple-quotes';\n\ndescribe('replaceAppleQuotes()', () => {\n  it('replaces apple quotes with regular quotes', () => {\n    expect(replaceAppleQuotes('“double” quotes and ‘single’ quotes')).toBe(\n      `\"double\" quotes and 'single' quotes`\n    );\n  });\n\nit('returns the original string if there are no smart quotes', () => {\n    expect(replaceAppleQuotes('No quotes')).toBe('No quotes');\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 449,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\replace-apple-quotes.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 105,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c3b51cf37f687f6ac039a0f88b79dddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\replace-apple-quotes.ts",
    "source_type": "git_repo",
    "title": "replace-apple-quotes",
    "content": "export function replaceAppleQuotes(text: string): string {\n  return typeof text !== 'string'\n    ? text\n    : text.replace(/[“”]/g, '\"').replace(/[‘’]/g, \"'\");\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 170,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\replace-apple-quotes.ts",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "242d507447607bc4dcfbf6854feaf3f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\report-error.ts",
    "source_type": "git_repo",
    "title": "report-error",
    "content": "export function reportClientSideError(\n  e: Error,\n  message = 'Unhandled error'\n): void {\n  console.error(`Client: ${message}`, e);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 135,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\report-error.ts",
      "source_type": "git_repo"
    },
    "token_count": 34,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5f1f575c674963325c052b8abe1f7881",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\scrollbar-width.ts",
    "source_type": "git_repo",
    "title": "scrollbar-width",
    "content": "import store from 'store';\n\nexport function getScrollbarWidth(): number {\n  const storedWidth = store.get('monacoScrollbarWidth') as number;\n  return storedWidth >= 5 || storedWidth <= 25 ? storedWidth : 5;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 209,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\scrollbar-width.ts",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b16500dfc449f497d7fabc796b0c04b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\script-loaders.ts",
    "source_type": "git_repo",
    "title": "script-loaders",
    "content": "export function scriptLoader(\n  id: string,\n  async: boolean,\n  src: string,\n  onload: (() => void) | null,\n  text: string\n): void {\n  const s = document.createElement('script');\n  s.type = 'text/javascript';\n  s.id = id;\n  s.async = async;\n  s.onload = onload;\n  s.src = src;\n  s.text = text;\n  document.getElementsByTagName('head')[0].appendChild(s);\n}\n\nexport function scriptRemover(id: string): void {\n  const script = document.getElementById(id);\n  if (script) {\n    script.remove();\n  }\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 495,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\script-loaders.ts",
      "source_type": "git_repo"
    },
    "token_count": 129,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "203ef7c8f1b7a5cecd766dfc9b4c0af9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\solution-display-type.test.ts",
    "source_type": "git_repo",
    "title": "solution-display-type.test",
    "content": "import {\n  bothLinks,\n  invalidGithubLink,\n  legacySolution,\n  multifilePythonSolution,\n  multifileSolution,\n  onlyGithubLink,\n  onlySolution,\n  withChallenges\n} from './__fixtures__/completed-challenges';\nimport { getSolutionDisplayType } from './solution-display-type';\n\ndescribe('getSolutionDisplayType', () => {\n  it('should handle missing solutions', () => {\n    expect(getSolutionDisplayType(onlyGithubLink)).toBe('none');\n  });\n  it('should handle legacy solutions', () => {\n    expect(getSolutionDisplayType(legacySolution)).toBe('showUserCode');\n  });\n  it('should handle solutions with files', () => {\n    expect(getSolutionDisplayType(withChallenges)).toBe('showUserCode');\n    expect(getSolutionDisplayType(multifileSolution)).toBe(\n      'showMultifileProjectSolution'\n    );\n    expect(getSolutionDisplayType(multifilePythonSolution)).toBe(\n      'showUserCode'\n    );\n  });\n  it('should handle solutions with a single valid url', () => {\n    expect(getSolutionDisplayType(onlySolution)).toBe('showProjectLink');\n    expect(getSolutionDisplayType(invalidGithubLink)).toBe('showProjectLink');\n  });\n  it('should handle solutions with both links', () => {\n    expect(getSolutionDisplayType(bothLinks)).toBe('showProjectAndGithubLinks');\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1259,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\solution-display-type.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bbe786ce5e1f8df229a7ce5c7de6e618",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.ts",
    "source_type": "git_repo",
    "title": "session-storage",
    "content": "const parseCount = (rawCount: string | null) =>\n  rawCount == null ? 0 : parseInt(rawCount, 10);\n\nexport const CURRENT_COUNT_KEY = 'session-completed-challenges';\nexport const SAVED_COUNT_KEY = 'saved-session-completed-challenges';\n\nconst getCurrentCount = () =>\n  parseCount(sessionStorage.getItem(CURRENT_COUNT_KEY));\n\nconst getSavedCount = () => parseCount(sessionStorage.getItem(SAVED_COUNT_KEY));\n\nexport const incrementCurrentCount = () => {\n  const newCount = getCurrentCount() + 1;\n  sessionStorage.setItem(CURRENT_COUNT_KEY, newCount.toString());\n};\n\n/**\n * Saves the current count so we can compare it later.\n */\nexport const saveCurrentCount = () => {\n  sessionStorage.setItem(SAVED_COUNT_KEY, getCurrentCount().toString());\n};\n\nconst isSaved = () => sessionStorage.getItem(SAVED_COUNT_KEY) !== null;\n\ntype AfterSave = {\n  isSaved: true;\n  currentCount: number;\n  countSinceSave: number;\n};\n\ntype BeforeSave = {\n  isSaved: false;\n  currentCount: number;\n};\n\ntype SessionChallengeData = AfterSave | BeforeSave;\n\nexport const getSessionChallengeData = (): SessionChallengeData => {\n  if (isSaved()) {\n    return {\n      isSaved: true,\n      currentCount: getCurrentCount(),\n      countSinceSave: getCurrentCount() - getSavedCount()\n    };\n  } else {\n    return {\n      isSaved: false,\n      currentCount: getCurrentCount()\n    };\n  }\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1346,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.ts",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c1964a9d43c1f1f966f22288bc6cefc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\stripe.ts",
    "source_type": "git_repo",
    "title": "stripe",
    "content": "import { loadStripe } from '@stripe/stripe-js';\n\nimport envData from '../../config/env.json';\n\nconst { stripePublicKey } = envData;\n\nexport const stripe = stripePublicKey ? loadStripe(stripePublicKey) : null;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 209,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\stripe.ts",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de8b9f043457696326ae76e9f062e243",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\solution-display-type.ts",
    "source_type": "git_repo",
    "title": "solution-display-type",
    "content": "import type { CompletedChallenge } from '../redux/prop-types';\nimport { challengeTypes } from '../../../shared/config/challenge-types';\nimport { hasProtocolRE } from '.';\n\ntype DisplayType =\n  | 'none'\n  | 'showMultifileProjectSolution'\n  | 'showUserCode'\n  | 'showProjectAndGithubLinks'\n  | 'showProjectLink'\n  | 'showExamResults';\n\nexport const getSolutionDisplayType = ({\n  solution,\n  githubLink,\n  challengeFiles,\n  challengeType,\n  examResults\n}: CompletedChallenge): DisplayType => {\n  if (examResults) return 'showExamResults';\n  if (challengeFiles?.length)\n    return challengeType === challengeTypes.multifileCertProject\n      ? 'showMultifileProjectSolution'\n      : 'showUserCode';\n  if (!solution) return 'none';\n  // Some of the user records still have JavaScript project solutions stored as\n  // solution strings\n  if (!hasProtocolRE.test(solution)) return 'showUserCode';\n  if (hasProtocolRE.test(githubLink ?? '')) return 'showProjectAndGithubLinks';\n  return 'showProjectLink';\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 999,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\solution-display-type.ts",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a99f3b0a9174ad5320e6abca6d390b14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\to-learn-path.test.ts",
    "source_type": "git_repo",
    "title": "to-learn-path.test",
    "content": "import { withPrefix } from 'gatsby';\n\nimport toLearnPath from './to-learn-path';\n\ndescribe('To learn path utility (toLearnPath)', () => {\n  const learn = withPrefix('/learn');\n\nit('should include /learn', () => {\n    expect(toLearnPath({})).toMatch(`${learn}`);\n  });\n\nit('should include superBlock after learn', () => {\n    expect(toLearnPath({ superBlock: 'testSuper' })).toBe(`${learn}/testSuper`);\n  });\n\nit('should include superBlock, then block after learn', () => {\n    expect(toLearnPath({ block: 'testBlock', superBlock: 'testSuper' })).toBe(\n      `${learn}/testSuper/testBlock`\n    );\n  });\n\nit('should include superBlock, block, then challenge after learn', () => {\n    expect(\n      toLearnPath({\n        block: 'testBlock',\n        challenge: 'testChallenge',\n        superBlock: 'testSuper'\n      })\n    ).toBe(`${learn}/testSuper/testBlock/testChallenge`);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 891,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\to-learn-path.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb74af928eeaaf2c4c92e248dead224a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\to-learn-path.ts",
    "source_type": "git_repo",
    "title": "to-learn-path",
    "content": "import { withPrefix } from 'gatsby';\n\ninterface ToLearnPathKwargs {\n  block?: string;\n  challenge?: string;\n  superBlock?: string;\n}\n\n/**\n * Builds a learning url path from folders.\n * - /learn/:superBlock/:block/:challenge\n * @params {Object} Path kwargs.\n * @returns {string} A learning url path.\n */\nexport default function toLearnPath({\n  block,\n  challenge,\n  superBlock\n}: ToLearnPathKwargs): string {\n  // Match path order /:super-block/:block/:challenge\n  const folders = [superBlock, block, challenge];\n\nreturn folders.reduce((path: string, folder) => {\n    if (folder) {\n      return `${path}/${folder}`;\n    }\n\nreturn path;\n  }, withPrefix('/learn'));\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 671,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\to-learn-path.ts",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1494beb8f6f833ae3d884ff75e4a46b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.test.ts",
    "source_type": "git_repo",
    "title": "session-storage.test",
    "content": "/* eslint-disable @typescript-eslint/unbound-method */\nimport {\n  CURRENT_COUNT_KEY,\n  SAVED_COUNT_KEY,\n  getSessionChallengeData,\n  incrementCurrentCount,\n  saveCurrentCount\n} from './session-storage';\n\ndescribe('Session Storage', () => {\n  let sessionStorageMock: Storage;\n\nbeforeEach(() => {\n    sessionStorageMock = (() => {\n      let store: { [key: string]: string } = {};\n\nconst mockStorage: Storage = {\n        length: 0,\n\nclear: jest.fn(() => {\n          store = {};\n        }),\n\ngetItem: jest.fn((key: string) => {\n          return store[key] || null;\n        }),\n\nkey: jest.fn((index: number) => {\n          const keys = Object.keys(store);\n          return keys[index] || null;\n        }),\n\nremoveItem: jest.fn((key: string) => {\n          delete store[key];\n        }),\n\nsetItem: jest.fn((key: string, value: string) => {\n          store[key] = value;\n        })\n      };\n\nObject.defineProperty(mockStorage, 'length', {\n        get: () => Object.keys(store).length\n      });\n\nreturn mockStorage;\n    })();\n\nObject.defineProperty(window, 'sessionStorage', {\n      value: sessionStorageMock,\n      configurable: true\n    });\n  });\n\nafterEach(() => {\n    sessionStorage.clear();\n    jest.clearAllMocks();\n  });\n\ndescribe('getSessionChallengeData', () => {\n    describe('countSinceSave', () => {\n      it('is not included if nothing has been saved', () => {\n        expect(getSessionChallengeData()).not.toHaveProperty('countSinceSave');\n      });\n\nit('is included if the count has been saved', () => {\n        sessionStorage.setItem(SAVED_COUNT_KEY, '7');\n        sessionStorage.setItem(CURRENT_COUNT_KEY, '10');\n        expect(getSessionChallengeData()).toMatchObject({\n          countSinceSave: 3\n        });\n      });\n    });\n\ndescribe('currentCount', () => {\n      it('defaults to 0 if no challenges have been completed', () => {\n        expect(getSessionChallengeData()).toMatchObject({\n          currentCount: 0\n        });\n      });\n\nit('returns the stored number if it exists', () => {\n        sessionStorage.setItem(CURRENT_COUNT_KEY, '5');\n        expect(getSessionChallengeData()).toMatchObject({\n          currentCount: 5\n        });\n      });\n    });",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3635,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3018c3ca7327741dd301e7753ca7944f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.test.ts",
    "source_type": "git_repo",
    "title": "session-storage.test",
    "content": "() => { it('is not included if nothing has been saved', () => { expect(getSessionChallengeData()).not.toHaveProperty('countSinceSave'); }); it('is included if the count has been saved', () => { sessionStorage.setItem(SAVED_COUNT_KEY, '7'); sessionStorage.setItem(CURRENT_COUNT_KEY, '10'); expect(getSessionChallengeData()).toMatchObject({ countSinceSave: 3 }); }); }); describe('currentCount', () => { it('defaults to 0 if no challenges have been completed', () => { expect(getSessionChallengeData()).toMatchObject({ currentCount: 0 }); }); it('returns the stored number if it exists', () => { sessionStorage.setItem(CURRENT_COUNT_KEY, '5'); expect(getSessionChallengeData()).toMatchObject({ currentCount: 5 }); }); });\n\ndescribe('isSaved', () => {\n      it('is false if we haved saved the count', () => {\n        expect(getSessionChallengeData()).toMatchObject({\n          isSaved: false\n        });\n      });\n\nit('is true if we have saved something', () => {\n        sessionStorage.setItem(SAVED_COUNT_KEY, '7');\n        expect(getSessionChallengeData()).toMatchObject({\n          isSaved: true\n        });\n      });\n    });\n  });\n\ndescribe('incrementCurrentCount', () => {\n    test('increments the completed challenge count', () => {\n      sessionStorage.setItem(CURRENT_COUNT_KEY, '5');\n      incrementCurrentCount();\n      expect(sessionStorage.setItem).toHaveBeenCalledWith(\n        CURRENT_COUNT_KEY,\n        '6'\n      );\n      expect(getSessionChallengeData()).toMatchObject({ currentCount: 6 });\n    });\n\ntest('sets the count to 1 if no previous value exists', () => {\n      incrementCurrentCount();\n      expect(sessionStorage.setItem).toHaveBeenCalledWith(\n        CURRENT_COUNT_KEY,\n        '1'\n      );\n      expect(getSessionChallengeData()).toMatchObject({ currentCount: 1 });\n    });\n  });\n\ndescribe('saveCurrentCount', () => {\n    test('sets correct value in sessionStorage', () => {\n      sessionStorage.setItem(CURRENT_COUNT_KEY, '5');\n      saveCurrentCount();\n      expect(sessionStorage.setItem).toHaveBeenCalledWith(SAVED_COUNT_KEY, '5');\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3635,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\session-storage.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99705972e5a937f191ab2f3adc6f3bc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
    "source_type": "git_repo",
    "title": "challenge-nodes",
    "content": "interface MockChallengeNodes {\n  challenge: {\n    fields: {\n      slug: string;\n      blockName: string;\n    };\n    id: string;\n    block: string;\n    title: string;\n    isPrivate: boolean;\n    superBlock: string;\n    dashedName: string;\n  };\n}\n\nconst mockChallengeNodes: MockChallengeNodes[] = [\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-one/block-a/challenge-one',\n        blockName: 'Block A'\n      },\n      id: 'a',\n      block: 'block-a',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-one',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-one/block-a/challenge-two',\n        blockName: 'Block A'\n      },\n      id: 'b',\n      block: 'block-a',\n      title: 'Challenge Two',\n      isPrivate: false,\n      superBlock: 'super-block-one',\n      dashedName: 'challenge-two'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-one/block-b/challenge-one',\n        blockName: 'Block B'\n      },\n      id: 'c',\n      block: 'block-b',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-one',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-one/block-b/challenge-two',\n        blockName: 'Block B'\n      },",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4b030aeb54f23d2ed1d6c87a35d4e11f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
    "source_type": "git_repo",
    "title": "challenge-nodes",
    "content": "block: 'block-a', title: 'Challenge One', isPrivate: false, superBlock: 'super-block-one', dashedName: 'challenge-one' } }, { challenge: { fields: { slug: '/super-block-one/block-a/challenge-two', blockName: 'Block A' }, id: 'b', block: 'block-a', title: 'Challenge Two', isPrivate: false, superBlock: 'super-block-one', dashedName: 'challenge-two' } }, { challenge: { fields: { slug: '/super-block-one/block-b/challenge-one', blockName: 'Block B' }, id: 'c', block: 'block-b', title: 'Challenge One', isPrivate: false, superBlock: 'super-block-one', dashedName: 'challenge-one' } }, { challenge: { fields: { slug: '/super-block-one/block-b/challenge-two', blockName: 'Block B' },id: 'd',\n      block: 'block-b',\n      title: 'Challenge Two',\n      isPrivate: false,\n      superBlock: 'super-block-one',\n      dashedName: 'challenge-two'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-one/block-c/challenge-one',\n        blockName: 'Block C'\n      },\n      id: 'e',\n      block: 'block-c',\n      title: 'Challenge One',\n      isPrivate: true,\n      superBlock: 'super-block-one',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-two/block-a/challenge-one',\n        blockName: 'Block A'\n      },\n      id: 'f',\n      block: 'block-a',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-two',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-two/block-a/challenge-two',\n        blockName: 'Block A'\n      },\n      id: 'g',\n      block: 'block-a',\n      title: 'Challenge Two',\n      isPrivate: false,\n      superBlock: 'super-block-two',\n      dashedName: 'challenge-two'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-two/block-b/challenge-one',\n        blockName: 'Block B'\n      },\n      id: 'h',\n      block: 'block-b',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-two',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-two/block-b/challenge-two',\n        blockName: 'Block B'\n      },\n      id: 'i',\n      block: 'block-b',\n      title: 'Challenge Two',\n      isPrivate: false,\n      superBlock: 'super-block-two',\n      dashedName: 'challenge-two'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-three/block-a/challenge-one',\n        blockName: 'Block A'\n      },\n      id: 'j',\n      block: 'block-a',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-three',\n      dashedName: 'challenge-one'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-three/block-c/challenge-two',\n        blockName: 'Block C'\n      },\n      id: 'k',\n      block: 'block-c',\n      title: 'Challenge Two',\n      isPrivate: false,\n      superBlock: 'super-block-three',\n      dashedName: 'challenge-two'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-three/block-c/challenge-three',\n        blockName: 'Block C'\n      },\n      id: 'l',\n      block: 'block-c',\n      title: 'Challenge Three',\n      isPrivate: false,\n      superBlock: 'super-block-three',\n      dashedName: 'challenge-three'\n    }\n  },\n  {\n    challenge: {\n      fields: {\n        slug: '/super-block-four/block-a/challenge-one',\n        blockName: 'Block A'\n      },\n      id: 'm',\n      block: 'block-a',\n      title: 'Challenge One',\n      isPrivate: false,\n      superBlock: 'super-block-four',\n      dashedName: 'challenge-one'\n    }\n  }\n];",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
      "source_type": "git_repo"
    },
    "token_count": 960,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3a6ef1ebbb567b42a847015e08363755",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
    "source_type": "git_repo",
    "title": "challenge-nodes",
    "content": "fields: { slug: '/super-block-three/block-c/challenge-two', blockName: 'Block C' }, id: 'k', block: 'block-c', title: 'Challenge Two', isPrivate: false, superBlock: 'super-block-three', dashedName: 'challenge-two' } }, { challenge: { fields: { slug: '/super-block-three/block-c/challenge-three', blockName: 'Block C' }, id: 'l', block: 'block-c', title: 'Challenge Three', isPrivate: false, superBlock: 'super-block-three', dashedName: 'challenge-three' } }, { challenge: { fields: { slug: '/super-block-four/block-a/challenge-one', blockName: 'Block A' }, id: 'm', block: 'block-a', title: 'Challenge One', isPrivate: false, superBlock: 'super-block-four', dashedName: 'challenge-one' } } ];\n\nexport default mockChallengeNodes;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\challenge-nodes.ts",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e74958dea5fd3bc7b59b92a6c1c4fa52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\file-mock.ts",
    "source_type": "git_repo",
    "title": "file-mock",
    "content": "export default {};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 19,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\file-mock.ts",
      "source_type": "git_repo"
    },
    "token_count": 3,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27ec7c8b4c0e8e70857c2719bb51d1a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\gatsby.ts",
    "source_type": "git_repo",
    "title": "gatsby",
    "content": "import React from 'react';\nimport { GatsbyLinkProps } from 'gatsby';\nconst gatsby: NodeModule = jest.requireActual('gatsby');\n\nimport envData from '../../config/env.json';\n\nconst { clientLocale } = envData;\n\nmodule.exports = {\n  ...gatsby,\n  navigate: jest.fn(),\n  graphql: jest.fn(),\n  Link: jest.fn().mockImplementation(\n    // these props are invalid for an `a` tag\n    ({ to, ...rest }: GatsbyLinkProps<undefined | boolean>) =>\n      React.createElement('a', {\n        ...rest,\n        href: to\n      })\n  ),\n  withPrefix: jest.fn().mockImplementation((path: string) => {\n    const pathPrefix = clientLocale === 'english' ? '' : '/' + clientLocale;\n    return pathPrefix + path;\n  }),\n  StaticQuery: jest.fn(),\n  useStaticQuery: jest.fn()\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 746,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\gatsby.ts",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "edf6bedffab49bc883bbfc807c55f7a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\react-i18next.js",
    "source_type": "git_repo",
    "title": "react-i18next",
    "content": "import React from 'react';\n\nconst reactI18next = jest.genMockFromModule('react-i18next');\n\n// modified from https://github.com/i18next/react-i18next/blob/master/example/test-jest/src/__mocks__/react-i18next.js\nconst hasChildren = node =>\n  node && (node.children || (node.props && node.props.children));\n\nconst getChildren = node =>\n  node && node.children ? node.children : node.props && node.props.children;\n\nconst renderNodes = reactNodes => {\n  if (typeof reactNodes === 'string') {\n    return reactNodes;\n  }\n\nreturn Object.keys(reactNodes).map((key, i) => {\n    const child = reactNodes[key];\n    const isElement = React.isValidElement(child);\n\nif (typeof child === 'string') {\n      return child;\n    }\n    if (hasChildren(child)) {\n      const inner = renderNodes(getChildren(child));\n      return React.cloneElement(child, { ...child.props, key: i }, inner);\n    }\n    if (typeof child === 'object' && !isElement) {\n      return Object.keys(child).reduce(\n        (str, childKey) => `${str}${child[childKey]}`,\n        ''\n      );\n    }\n\nreturn child;\n  });\n};\n\nconst withTranslation = () => Component => {\n  Component.defaultProps = { ...Component.defaultProps, t: str => str };\n  return Component;\n};\n\nconst useTranslation = () => {\n  return {\n    t: str => str,\n    i18n: {\n      changeLanguage: () => new Promise(() => {})\n    }\n  };\n};\n\nconst Trans = ({ children }) =>\n  Array.isArray(children) ? renderNodes(children) : renderNodes([children]);\n\n// translate isn't being used anywhere, uncomment if needed\n/* const translate = () => Component => props => (\n  <Component t={() => ''} {...props} />\n); */\n\n// reactI18next.translate = translate;\nreactI18next.withTranslation = withTranslation;\nreactI18next.useTranslation = useTranslation;\nreactI18next.Trans = Trans;\n\nmodule.exports = reactI18next;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1822,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\react-i18next.js",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d360c806c8464d5116d281368429a06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\style-mock.ts",
    "source_type": "git_repo",
    "title": "style-mock",
    "content": "export default {};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 19,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\style-mock.ts",
      "source_type": "git_repo"
    },
    "token_count": 3,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "61fb1bb5f04e163b012fe4cd295e171d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__tests__\\integration\\handled-error.test.ts",
    "source_type": "git_repo",
    "title": "handled-error.test",
    "content": "import {\n  wrapHandledError,\n  unwrapHandledError\n} from '../../utils/handled-error';\n\ndescribe('handled-error integration', () => {\n  const handledA = {\n    type: 'info',\n    message: 'something helpful',\n    redirectTo: '/a-path-we-choose'\n  };\n  const handledB = {\n    type: 'danger',\n    message: 'Oh noes!',\n    redirectTo: '/whoops'\n  };\n  const handledC = {\n    type: 'success',\n    message: 'great news!',\n    redirectTo: '/awesome'\n  };\n  const handledD = {};\n\nit('can wrap and unwrap handled errors', () => {\n    expect.assertions(4);\n    const wrappedA = wrapHandledError(new Error(), handledA);\n    const wrappedB = wrapHandledError(new Error(), handledB);\n    const wrappedC = wrapHandledError(new Error(), handledC);\n    const wrappedD = wrapHandledError(new Error(), handledD);\n\nconst unwrappedA = unwrapHandledError(wrappedA);\n    const unwrappedB = unwrapHandledError(wrappedB);\n    const unwrappedC = unwrapHandledError(wrappedC);\n    const unwrappedD = unwrapHandledError(wrappedD);\n\nexpect(unwrappedA).toEqual(handledA);\n    expect(unwrappedB).toEqual(handledB);\n    expect(unwrappedC).toEqual(handledC);\n    expect(unwrappedD).toEqual(handledD);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1187,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__tests__\\integration\\handled-error.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "62c8386892a864ce99506dc845c16e8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
    "source_type": "git_repo",
    "title": "editor-config",
    "content": "export const editorToneOptions = {\n  urls: {\n    C1: 'Guitar-Sample-01 mp3',\n    D1: 'Guitar-Sample-02 mp3',\n    E1: 'Guitar-Sample-03 mp3',\n    F1: 'Guitar-Sample-04 mp3',\n    G1: 'Guitar-Sample-05 mp3',\n    A1: 'Guitar-Sample-06 mp3',\n    B1: 'Guitar-Sample-07 mp3',\n    C2: 'Guitar-Sample-08 mp3',\n    D2: 'Guitar-Sample-09 mp3',\n    E2: 'Guitar-Sample-10 mp3',\n    F2: 'Guitar-Sample-11 mp3',\n    G2: 'Guitar-Sample-12 mp3',\n    A2: 'Guitar-Sample-13 mp3',\n    B2: 'Guitar-Sample-14 mp3',\n    C3: 'Guitar-Sample-15 mp3',\n    D3: 'Guitar-Sample-16 mp3',\n    E3: 'Guitar-Sample-17 mp3',\n    F3: 'Guitar-Sample-18 mp3',\n    G3: 'Guitar-Sample-19 mp3',\n    A3: 'Guitar-Sample-20 mp3',\n    B3: 'Guitar-Sample-21 mp3',\n    C4: 'Guitar-Sample-22 mp3',\n    D4: 'Guitar-Sample-23 mp3',\n    E4: 'Guitar-Sample-24 mp3',\n    F4: 'Guitar-Sample-25 mp3',\n    G4: 'Guitar-Sample-26 mp3',\n    A4: 'Guitar-Sample-27 mp3',\n    B4: 'Guitar-Sample-28 mp3',\n    C5: 'Guitar-Sample-29 mp3',\n    D5: 'Guitar-Sample-30 mp3',\n    E5: 'Guitar-Sample-31 mp3',\n    F5: 'Guitar-Sample-32 mp3',\n    G5: 'Guitar-Sample-33 mp3',\n    A5: 'Guitar-Sample-34 mp3',\n    B5: 'Guitar-Sample-35",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1568,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d63b4ac06db72875dcb10b74d45f0dcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
    "source_type": "git_repo",
    "title": "editor-config",
    "content": "'Guitar-Sample-10 mp3', F2: 'Guitar-Sample-11 mp3', G2: 'Guitar-Sample-12 mp3', A2: 'Guitar-Sample-13 mp3', B2: 'Guitar-Sample-14 mp3', C3: 'Guitar-Sample-15 mp3', D3: 'Guitar-Sample-16 mp3', E3: 'Guitar-Sample-17 mp3', F3: 'Guitar-Sample-18 mp3', G3: 'Guitar-Sample-19 mp3', A3: 'Guitar-Sample-20 mp3', B3: 'Guitar-Sample-21 mp3', C4: 'Guitar-Sample-22 mp3', D4: 'Guitar-Sample-23 mp3', E4: 'Guitar-Sample-24 mp3', F4: 'Guitar-Sample-25 mp3', G4: 'Guitar-Sample-26 mp3', A4: 'Guitar-Sample-27 mp3', B4: 'Guitar-Sample-28 mp3', C5: 'Guitar-Sample-29 mp3', D5: 'Guitar-Sample-30 mp3', E5: 'Guitar-Sample-31 mp3', F5: 'Guitar-Sample-32 mp3', G5: 'Guitar-Sample-33 mp3', A5: 'Guitar-Sample-34 mp3', B5: 'Guitar-Sample-35mp3',\n    C6: 'Guitar-Sample-36 mp3',\n    D6: 'Guitar-Sample-37 mp3',\n    E6: 'Guitar-Sample-38 mp3',\n    F6: 'Guitar-Sample-39 mp3',\n    G6: 'Guitar-Sample-40 mp3',\n    A6: 'Guitar-Sample-41 mp3',\n    B6: 'Guitar-Sample-42 mp3',\n    C7: 'Guitar-Sample-43 mp3',\n    D7: 'Guitar-Sample-44 mp3',\n    E7: 'Guitar-Sample-45 mp3'\n  },\n  release: 1,\n  baseUrl: 'https://campfire-mode freecodecamp",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1568,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cfeadb2b1a1103f141c0c1714432b0a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
    "source_type": "git_repo",
    "title": "editor-config",
    "content": "'Guitar-Sample-22 mp3', D4: 'Guitar-Sample-23 mp3', E4: 'Guitar-Sample-24 mp3', F4: 'Guitar-Sample-25 mp3', G4: 'Guitar-Sample-26 mp3', A4: 'Guitar-Sample-27 mp3', B4: 'Guitar-Sample-28 mp3', C5: 'Guitar-Sample-29 mp3', D5: 'Guitar-Sample-30 mp3', E5: 'Guitar-Sample-31 mp3', F5: 'Guitar-Sample-32 mp3', G5: 'Guitar-Sample-33 mp3', A5: 'Guitar-Sample-34 mp3', B5: 'Guitar-Sample-35mp3', C6: 'Guitar-Sample-36 mp3', D6: 'Guitar-Sample-37 mp3', E6: 'Guitar-Sample-38 mp3', F6: 'Guitar-Sample-39 mp3', G6: 'Guitar-Sample-40 mp3', A6: 'Guitar-Sample-41 mp3', B6: 'Guitar-Sample-42 mp3', C7: 'Guitar-Sample-43 mp3', D7: 'Guitar-Sample-44 mp3', E7: 'Guitar-Sample-45 mp3' }, release: 1, baseUrl: 'https://campfire-mode freecodecamporg/mariachi/'\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1568,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-config.ts",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9ff305cbc34e1741abe2d6b0027e91d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-notes.ts",
    "source_type": "git_repo",
    "title": "editor-notes",
    "content": "export const editorNotes = [\n  'C1',\n  'D1',\n  'E1',\n  'F1',\n  'G1',\n  'A1',\n  'B1',\n  'C2',\n  'D2',\n  'E2',\n  'F2',\n  'G2',\n  'A2',\n  'B2',\n  'C3',\n  'D3',\n  'E3',\n  'F3',\n  'G3',\n  'A3',\n  'B3',\n  'C4',\n  'D4',\n  'E4',\n  'F4',\n  'G4',\n  'A4',\n  'B4',\n  'C5',\n  'D5',\n  'E5',\n  'F5',\n  'G5',\n  'A5',\n  'B5',\n  'C6',\n  'D6',\n  'E6',\n  'F6',\n  'G6',\n  'A6',\n  'B6',\n  'C7',\n  'D7',\n  'E7'\n];",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 391,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\editor-notes.ts",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "533a3f86f4a6f1678aee216be1adc2b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "import store from 'store';\nimport { FlashMessages } from '../../components/Flash/redux/flash-messages';\nimport { LocalStorageThemes } from '../../redux/types';\nconst TRY_AGAIN = 'https://campfire-mode.freecodecamp.org/try-again.mp3';\nconst CHAL_COMP = 'https://campfire-mode.freecodecamp.org/chal-comp.mp3'; const toneUrls = {\n  [LocalStorageThemes Light]: 'https://campfire-mode freecodecamp org/day mp3',\n  [LocalStorageThemes Dark]: 'https://campfire-mode freecodecamp org/night mp3',\n  donation: 'https://campfire-mode freecodecamp org/donate mp3',\n  'tests-completed': CHAL_COMP,\n  'block-toggle': 'https://tonejs github io/audio/berklee/guitar_chord1 mp3',\n  'tests-failed': TRY_AGAIN,\n  completion: CHAL_COMP,\n  [FlashMessages AccountDeleted]: TRY_AGAIN,\n  [FlashMessages AddNameSuccess]: CHAL_COMP,\n  [FlashMessages AlreadyClaimed]: TRY_AGAIN,\n  [FlashMessages CertClaimSuccess]:\n    'https://campfire-mode freecodecamp org/cert mp3',\n  [FlashMessages CertificateMissing]: TRY_AGAIN,\n  [FlashMessages CertsPrivate]: TRY_AGAIN,\n  [FlashMessages ChallengeSaveTooBig]: TRY_AGAIN,\n  [FlashMessages ChallengeSubmitTooBig]: TRY_AGAIN,\n  [FlashMessages CodeSaved]: CHAL_COMP,\n  [FlashMessages CodeSaveError]: TRY_AGAIN,\n  [FlashMessages CodeSaveLess]: TRY_AGAIN,\n  [FlashMessages CompleteProjectFirst]: TRY_AGAIN,\n  [FlashMessages CourseUrlCopied]: CHAL_COMP,\n  [FlashMessages CourseUrlCopyError]: TRY_AGAIN,\n  [FlashMessages DeleteTokenErr]: TRY_AGAIN,\n  [FlashMessages EmailValid]: CHAL_COMP,\n  [FlashMessages GenerateExamError]: TRY_AGAIN,\n  [FlashMessages HonestFirst]: TRY_AGAIN,\n  [FlashMessages IncompleteSteps]: TRY_AGAIN,\n  [FlashMessages LocalCodeSaved]: CHAL_COMP,\n  [FlashMessages LocalCodeSaveError]: TRY_AGAIN,\n  [FlashMessages MsTranscriptErr1]: TRY_AGAIN,\n  [FlashMessages MsTranscriptErr2]: TRY_AGAIN,\n  [FlashMessages",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "10fa49e0bf370ee693208d8319c33935",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "TRY_AGAIN, completion: CHAL_COMP, [FlashMessages AccountDeleted]: TRY_AGAIN, [FlashMessages AddNameSuccess]: CHAL_COMP, [FlashMessages AlreadyClaimed]: TRY_AGAIN, [FlashMessages CertClaimSuccess]: 'https://campfire-mode freecodecamp org/cert mp3', [FlashMessages CertificateMissing]: TRY_AGAIN, [FlashMessages CertsPrivate]: TRY_AGAIN, [FlashMessages ChallengeSaveTooBig]: TRY_AGAIN, [FlashMessages ChallengeSubmitTooBig]: TRY_AGAIN, [FlashMessages CodeSaved]: CHAL_COMP, [FlashMessages CodeSaveError]: TRY_AGAIN, [FlashMessages CodeSaveLess]: TRY_AGAIN, [FlashMessages CompleteProjectFirst]: TRY_AGAIN, [FlashMessages CourseUrlCopied]: CHAL_COMP, [FlashMessages CourseUrlCopyError]: TRY_AGAIN, [FlashMessages DeleteTokenErr]: TRY_AGAIN, [FlashMessages EmailValid]: CHAL_COMP, [FlashMessages GenerateExamError]: TRY_AGAIN, [FlashMessages HonestFirst]: TRY_AGAIN, [FlashMessages IncompleteSteps]: TRY_AGAIN, [FlashMessages LocalCodeSaved]: CHAL_COMP, [FlashMessages LocalCodeSaveError]: TRY_AGAIN, [FlashMessages MsTranscriptErr1]: TRY_AGAIN, [FlashMessages MsTranscriptErr2]: TRY_AGAIN, [FlashMessagesMsTranscriptErr3]: TRY_AGAIN,\n  [FlashMessages MsTranscriptErr4]: TRY_AGAIN,\n  [FlashMessages MsTranscriptErr5]: TRY_AGAIN,\n  [FlashMessages MsTranscriptErr6]: TRY_AGAIN,\n  [FlashMessages MsTranscriptLinked]: CHAL_COMP,\n  [FlashMessages MsTranscriptUnlinked]: CHAL_COMP,\n  [FlashMessages MsTranscriptUnlinkErr]: TRY_AGAIN,\n  [FlashMessages MsProfileErr]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr1]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr2]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr3]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr4]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr5]: TRY_AGAIN,\n  [FlashMessages MsTrophyErr6]: TRY_AGAIN,\n  [FlashMessages MsTrophyVerified]: CHAL_COMP,\n  [FlashMessages",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "85e082ab952a4d7b618f9892190a7d9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "CHAL_COMP, [FlashMessages CourseUrlCopyError]: TRY_AGAIN, [FlashMessages DeleteTokenErr]: TRY_AGAIN, [FlashMessages EmailValid]: CHAL_COMP, [FlashMessages GenerateExamError]: TRY_AGAIN, [FlashMessages HonestFirst]: TRY_AGAIN, [FlashMessages IncompleteSteps]: TRY_AGAIN, [FlashMessages LocalCodeSaved]: CHAL_COMP, [FlashMessages LocalCodeSaveError]: TRY_AGAIN, [FlashMessages MsTranscriptErr1]: TRY_AGAIN, [FlashMessages MsTranscriptErr2]: TRY_AGAIN, [FlashMessagesMsTranscriptErr3]: TRY_AGAIN, [FlashMessages MsTranscriptErr4]: TRY_AGAIN, [FlashMessages MsTranscriptErr5]: TRY_AGAIN, [FlashMessages MsTranscriptErr6]: TRY_AGAIN, [FlashMessages MsTranscriptLinked]: CHAL_COMP, [FlashMessages MsTranscriptUnlinked]: CHAL_COMP, [FlashMessages MsTranscriptUnlinkErr]: TRY_AGAIN, [FlashMessages MsProfileErr]: TRY_AGAIN, [FlashMessages MsTrophyErr1]: TRY_AGAIN, [FlashMessages MsTrophyErr2]: TRY_AGAIN, [FlashMessages MsTrophyErr3]: TRY_AGAIN, [FlashMessages MsTrophyErr4]: TRY_AGAIN, [FlashMessages MsTrophyErr5]: TRY_AGAIN, [FlashMessages MsTrophyErr6]: TRY_AGAIN, [FlashMessages MsTrophyVerified]: CHAL_COMP, [FlashMessagesNameNeeded]: TRY_AGAIN,\n  // [FlashMessages None]: '',\n  [FlashMessages NotEligible]: TRY_AGAIN,\n  [FlashMessages NotHonest]: TRY_AGAIN,\n  [FlashMessages GenericError]: TRY_AGAIN,\n  [FlashMessages ProfilePrivate]: TRY_AGAIN,\n  [FlashMessages ProgressReset]: TRY_AGAIN,\n  [FlashMessages ProvideUsername]: TRY_AGAIN,\n  [FlashMessages ReallyWeird]: TRY_AGAIN,\n  [FlashMessages ReportSent]: CHAL_COMP,\n  [FlashMessages SigninSuccess]: CHAL_COMP,\n  [FlashMessages StartProjectErr]: TRY_AGAIN,\n  [FlashMessages SurveyErr1]: TRY_AGAIN,\n  [FlashMessages SurveyErr2]: TRY_AGAIN,\n  [FlashMessages SurveyErr3]: TRY_AGAIN,\n  [FlashMessages SurveySuccess]: CHAL_COMP,\n  [FlashMessages",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7d888b0a1e033ce28ccdac15037b1ede",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "[FlashMessages MsTranscriptUnlinkErr]: TRY_AGAIN, [FlashMessages MsProfileErr]: TRY_AGAIN, [FlashMessages MsTrophyErr1]: TRY_AGAIN, [FlashMessages MsTrophyErr2]: TRY_AGAIN, [FlashMessages MsTrophyErr3]: TRY_AGAIN, [FlashMessages MsTrophyErr4]: TRY_AGAIN, [FlashMessages MsTrophyErr5]: TRY_AGAIN, [FlashMessages MsTrophyErr6]: TRY_AGAIN, [FlashMessages MsTrophyVerified]: CHAL_COMP, [FlashMessagesNameNeeded]: TRY_AGAIN, // [FlashMessages None]: '', [FlashMessages NotEligible]: TRY_AGAIN, [FlashMessages NotHonest]: TRY_AGAIN, [FlashMessages GenericError]: TRY_AGAIN, [FlashMessages ProfilePrivate]: TRY_AGAIN, [FlashMessages ProgressReset]: TRY_AGAIN, [FlashMessages ProvideUsername]: TRY_AGAIN, [FlashMessages ReallyWeird]: TRY_AGAIN, [FlashMessages ReportSent]: CHAL_COMP, [FlashMessages SigninSuccess]: CHAL_COMP, [FlashMessages StartProjectErr]: TRY_AGAIN, [FlashMessages SurveyErr1]: TRY_AGAIN, [FlashMessages SurveyErr2]: TRY_AGAIN, [FlashMessages SurveyErr3]: TRY_AGAIN, [FlashMessages SurveySuccess]: CHAL_COMP, [FlashMessagesTimelinePrivate]: TRY_AGAIN,\n  [FlashMessages TokenDeleted]: CHAL_COMP,\n  [FlashMessages UpdatedAboutMe]: CHAL_COMP,\n  [FlashMessages UpdatedKeyboardShortCuts]: CHAL_COMP,\n  [FlashMessages UpdatedPortfolio]: CHAL_COMP,\n  [FlashMessages UpdatedPrivacy]: CHAL_COMP,\n  [FlashMessages UpdatedQunicyEmailSubscription]: CHAL_COMP,\n  [FlashMessages UpdatedSound]: CHAL_COMP,\n  [FlashMessages UpdatedSocials]: CHAL_COMP,\n  [FlashMessages UpdatedThemes]: CHAL_COMP,\n  [FlashMessages UsernameNotFound]: TRY_AGAIN,\n  [FlashMessages UsernameTaken]: TRY_AGAIN,\n  [FlashMessages UsernameUpdated]: CHAL_COMP,\n  [FlashMessages UsernameUsed]: TRY_AGAIN,\n  [FlashMessages UserNotCertified]: TRY_AGAIN,\n  [FlashMessages UserTokenCopied]: CHAL_COMP,\n  [FlashMessages UserTokenCopyError]: TRY_AGAIN,\n  [FlashMessages UserTokenGenerated]: CHAL_COMP,\n  [FlashMessages",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8f5f8726319c5fb73fa942396c1b7836",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "TRY_AGAIN, [FlashMessages ReportSent]: CHAL_COMP, [FlashMessages SigninSuccess]: CHAL_COMP, [FlashMessages StartProjectErr]: TRY_AGAIN, [FlashMessages SurveyErr1]: TRY_AGAIN, [FlashMessages SurveyErr2]: TRY_AGAIN, [FlashMessages SurveyErr3]: TRY_AGAIN, [FlashMessages SurveySuccess]: CHAL_COMP, [FlashMessagesTimelinePrivate]: TRY_AGAIN, [FlashMessages TokenDeleted]: CHAL_COMP, [FlashMessages UpdatedAboutMe]: CHAL_COMP, [FlashMessages UpdatedKeyboardShortCuts]: CHAL_COMP, [FlashMessages UpdatedPortfolio]: CHAL_COMP, [FlashMessages UpdatedPrivacy]: CHAL_COMP, [FlashMessages UpdatedQunicyEmailSubscription]: CHAL_COMP, [FlashMessages UpdatedSound]: CHAL_COMP, [FlashMessages UpdatedSocials]: CHAL_COMP, [FlashMessages UpdatedThemes]: CHAL_COMP, [FlashMessages UsernameNotFound]: TRY_AGAIN, [FlashMessages UsernameTaken]: TRY_AGAIN, [FlashMessages UsernameUpdated]: CHAL_COMP, [FlashMessages UsernameUsed]: TRY_AGAIN, [FlashMessages UserNotCertified]: TRY_AGAIN, [FlashMessages UserTokenCopied]: CHAL_COMP, [FlashMessages UserTokenCopyError]: TRY_AGAIN, [FlashMessages UserTokenGenerated]: CHAL_COMP, [FlashMessagesUserTokenGenerateError]: TRY_AGAIN,\n  [FlashMessages WrongName]: TRY_AGAIN,\n  [FlashMessages WrongUpdating]: TRY_AGAIN,\n  [FlashMessages WentWrong]: TRY_AGAIN\n} as const;\n\ntype ToneStates = keyof typeof toneUrls;\n\nexport async function playTone(state: ToneStates): Promise<void> {\n  const playSound = !!store.get('fcc-sound');\n  if (playSound && toneUrls[state]) {\n    const Tone = await import('tone');\n\nconst player = new Tone.Player(toneUrls[state]).toDestination();\n\nconst storedVolume = (store.get('soundVolume') as number) ?? 50;\n    const calculateDecibel = -60 * (1 - storedVolume / 100);\n\nplayer.volume.value = calculateDecibel;\n\nawait Tone.loaded();\n    player.start();\n  }\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\tone\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ca41df87311bf26fff1ff00f4ae58f35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\utils\\__fixtures__\\completed-challenges.ts",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "import { challengeFiles } from '../../../utils/__fixtures__/challenges';\nimport { challengeTypes } from '../../../../shared/config/challenge-types';\n\nconst baseChallenge = {\n  id: '1',\n  completedDate: 1,\n  challengeFiles: []\n}\n\nexport const onlySolution = {\n  ...baseChallenge,\n  solution: 'https://some-url.com'\n}\n\nexport const legacySolution = {\n  ...baseChallenge,\n  solution: 'var x = 1;'\n}\n\nexport const bothLinks = {\n  ...baseChallenge,\n  githubLink: 'https://some.thing',\n  solution: 'https://some-url.com'\n}\n\nexport const withChallenges = {\n  ...bothLinks,\n  challengeFiles\n}\n\nexport const multifileSolution = {\n  ...withChallenges,\n  challengeType: challengeTypes.multifileCertProject\n}\n\nexport const multifilePythonSolution = {\n  ...withChallenges,\n  challengeType: challengeTypes.multifilePythonCertProject\n}\n\nexport const onlyGithubLink = {\n  ...baseChallenge,\n  githubLink: 'https://some.thing'\n}\n\nexport const invalidGithubLink = {\n  ...baseChallenge,\n  githubLink: 'something',\n  solution: 'https://some-url.com'\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1031,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\utils\\__fixtures__\\completed-challenges.ts",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7645e69decae447b7160439afbc81e3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
    "source_type": "git_repo",
    "title": "video",
    "content": ".video-wrapper {\n  position: relative;\n  padding-bottom: 56.25%;\n  height: 0;\n  overflow: hidden;\n  max-width: 100%;\n}\n.video-wrapper iframe,\n.video-wrapper object,\n.video-wrapper embed,\n.video-wrapper .display-youtube-video {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.video-placeholder-loader {\n  min-height: 540px;\n  display: flex;\n  align-items: center;\n}\n\n.display-youtube-video {\n  display: block;\n}\n\n.hide-youtube-video {\n  display: none;\n}\n\n.video-quiz-options {\n  background-color: var(--primary-background);\n}\n\n/* remove bootstrap margin and center the radio buttons */\n.video-quiz-options > label {\n  margin: 0;\n  align-items: center;\n  overflow-x: auto;\n  scrollbar-width: thin;\n  scrollbar-color: var(--quaternary-background) var(--secondary-background);\n}\n\n.video-quiz-options > label::-webkit-scrollbar {\n  height: 15px;\n}\n\n.video-quiz-options > label::-webkit-scrollbar-track {\n  background: var(--secondary-background);\n}\n.video-quiz-options > label::-webkit-scrollbar-thumb {\n  background-color: var(--quaternary-background);\n}\n\n.video-quiz-option-label {\n  padding: 20px;\n  cursor: pointer;\n  display: flex;\n  font-weight: normal;\n  border-left: 4px solid var(--tertiary-background);\n  border-right: 4px solid var(--tertiary-background);\n  border-top: 2px solid var(--tertiary-background);\n  border-bottom: 2px solid var(--tertiary-background);\n}\n\n.video-quiz-option-label:first-child {\n  border-top: 4px solid var(--tertiary-background);\n}\n\n.video-quiz-option-label:last-child {\n  border-bottom: 4px solid var(--tertiary-background);\n}\n\n.video-quiz-input-visible {\n  margin-inline-end: 15px;\n  position: relative;\n  top: 2px;\n  display: inline-block;\n  min-width: 20px;\n  min-height: 20px;\n  max-width: 20px;\n  max-height: 20px;\n  border-radius: 50%;\n  background-color: var(--secondary-background);\n  border: 2px solid var(--primary-color);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3162,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f5c0990778e6ae7512e713c512839250",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
    "source_type": "git_repo",
    "title": "video",
    "content": "} .video-quiz-options > label::-webkit-scrollbar-thumb { background-color: var(--quaternary-background); } .video-quiz-option-label { padding: 20px; cursor: pointer; display: flex; font-weight: normal; border-left: 4px solid var(--tertiary-background); border-right: 4px solid var(--tertiary-background); border-top: 2px solid var(--tertiary-background); border-bottom: 2px solid var(--tertiary-background); } .video-quiz-option-label:first-child { border-top: 4px solid var(--tertiary-background); } .video-quiz-option-label:last-child { border-bottom: 4px solid var(--tertiary-background); } .video-quiz-input-visible { margin-inline-end: 15px; position: relative; top: 2px; display: inline-block; min-width: 20px; min-height: 20px; max-width: 20px; max-height: 20px; border-radius: 50%; background-color: var(--secondary-background); border: 2px solid var(--primary-color); }\n\ninput:focus-visible + .video-quiz-input-visible {\n  outline: 3px solid var(--focus-outline-color);\n  outline-offset: 2px;\n}\n\n.video-quiz-selected-input {\n  width: 10px;\n  height: 10px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  background-color: var(--primary-color);\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n}\n\n/* remove bootstrap properties */\n.video-quiz-option > p {\n  margin: 0;\n}\n\n/* remove bootstrap properties */\n.video-quiz-option > pre {\n  padding: 0;\n  margin: 0;\n  /* remove default prism background */\n  background: none;\n}\n\n.mcq-correct-border {\n  border-left-color: var(--success-background);\n}\n\n.mcq-incorrect-border {\n  border-left-color: var(--danger-background);\n}\n\n.mcq-correct {\n  color: var(--success-color);\n  border-left-color: var(--success-background);\n}\n\n.mcq-incorrect {\n  color: var(--danger-color);\n  border-left-color: var(--danger-background);\n}\n\n.mcq-hide-border {\n  border-bottom: none;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3162,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2217539b66d51d89daa239717a750de3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
    "source_type": "git_repo",
    "title": "video",
    "content": "absolute; top: 50%; left: 50%; background-color: var(--primary-color); border-radius: 50%; transform: translate(-50%, -50%); } /* remove bootstrap properties */ .video-quiz-option > p { margin: 0; } /* remove bootstrap properties */ .video-quiz-option > pre { padding: 0; margin: 0; /* remove default prism background */ background: none; } .mcq-correct-border { border-left-color: var(--success-background); } .mcq-incorrect-border { border-left-color: var(--danger-background); } .mcq-correct { color: var(--success-color); border-left-color: var(--success-background); } .mcq-incorrect { color: var(--danger-color); border-left-color: var(--danger-background); } .mcq-hide-border { border-bottom: none; }\n\n.mcq-feedback {\n  border-top: none;\n  display: block;\n}\n\n.mcq-prism-correct code {\n  color: var(--success-color);\n}\n\n.mcq-prism-incorrect code {\n  color: var(--danger-color);\n}\n\n/* Override the default styles of `legend` element */\n.mcq-question-text {\n  border: none;\n  color: var(--primary-color);\n  margin: 0;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3162,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\video.css",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1f96cd0d2674cbcdf5e924db401d1ff0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": ".super-block-intro-page p {\n  font-size: 1.17rem;\n}\n\n.super-block-intro-page .alert p {\n  font-size: inherit;\n}\n\n.big-subheading {\n  font-size: 2rem;\n  overflow-wrap: break-word;\n}\n\n.hide-scrollable-anchor {\n  display: block;\n  max-height: 0px;\n}\n\n.block-label {\n  align-self: center;\n  height: fit-content;\n  padding: 1px 6px 2px;\n  font-size: 0.85rem;\n  border: 1px solid;\n  position: relative;\n  top: 1px;\n  word-break: keep-all;\n}\n\n.block-header:hover .block-label {\n  background-color: var(--tertiary-background);\n}\n\n.block-label-lecture {\n  border-color: var(--yellow-color);\n  color: var(--yellow-color);\n}\n\n.block-label-workshop {\n  border-color: var(--highlight-color);\n  color: var(--highlight-color);\n}\n\n.block-label-lab {\n  border-color: var(--success-color);\n  color: var(--success-color);\n}\n\n.block-label-review {\n  border-color: var(--purple-color);\n  color: var(--purple-color);\n}\n\n.block-label-quiz {\n  border-color: var(--danger-color);\n  color: var(--danger-color);\n}\n\n.block-label-exam {\n  border-color: var(--quaternary-color);\n  color: var(--quaternary-color);\n}\n\n.block-header {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n}\n\n.block-header .big-block-title {\n  flex-grow: 3;\n  flex-basis: 0;\n  padding: 25px 15px 10px;\n}\n\n.block-header .big-block-title:is(:hover, :focus, :active) {\n  background-color: var(--primary-background);\n}\n\na.cert-tag:hover,\na.cert-tag:focus,\na.cert-tag:active {\n  color: var(--highlight-background);\n  background-color: var(--highlight-color);\n}\n\n.big-block-title {\n  font-size: 1.5rem;\n  overflow-wrap: break-word;\n}\n\n.block-grid-title {\n  margin: 0;\n  overflow-wrap: break-word;\n}\n\n.block-grid .challenge-jump-link {\n  margin: 0 25px 25px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "a2a769f0a57e79580c79c81896b492f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "var(--purple-color); } .block-label-quiz { border-color: var(--danger-color); color: var(--danger-color); } .block-label-exam { border-color: var(--quaternary-color); color: var(--quaternary-color); } .block-header { display: flex; justify-content: space-between; flex-direction: row; } .block-header .big-block-title { flex-grow: 3; flex-basis: 0; padding: 25px 15px 10px; } .block-header .big-block-title:is(:hover, :focus, :active) { background-color: var(--primary-background); } a.cert-tag:hover, a.cert-tag:focus, a.cert-tag:active { color: var(--highlight-background); background-color: var(--highlight-color); } .big-block-title { font-size: 1.5rem; overflow-wrap: break-word; } .block-grid-title { margin: 0; overflow-wrap: break-word; } .block-grid .challenge-jump-link { margin: 0 25px 25px; }\n\n.block-title-translation-cta {\n  white-space: nowrap;\n  padding: 0.2em 0.5em;\n  color: var(--highlight-color);\n  background-color: var(--highlight-background);\n}\n\n.block-title-translation-cta:hover,\n.block-title-translation-cta:focus {\n  text-decoration: none;\n  padding: 0.2em 0.5em;\n  color: var(--highlight-background);\n  background-color: var(--highlight-color);\n}\n\n.block-cta-wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-block: 10px 25px;\n  padding-inline: 0 15px;\n  margin: 0 0 0.6rem;\n  flex-grow: 2;\n  flex-basis: 0;\n  font-size: 0.8rem;\n  text-align: center;\n}\n\n.course-title {\n  display: flex;\n  align-items: center;\n  font-size: 1.13rem;\n  overflow-wrap: break-word;\n}\n\n.block-description pre {\n  display: inline;\n  padding: 0;\n}\n\n.superBlock-image {\n  max-width: 100%;\n  height: auto !important;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "ecc94c90a7d1ff8ecb6c0567d91ff037",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "nowrap; padding: 0.2em 0.5em; color: var(--highlight-color); background-color: var(--highlight-background); } .block-title-translation-cta:hover, .block-title-translation-cta:focus { text-decoration: none; padding: 0.2em 0.5em; color: var(--highlight-background); background-color: var(--highlight-color); } .block-cta-wrapper { display: flex; flex-direction: column; justify-content: center; padding-block: 10px 25px; padding-inline: 0 15px; margin: 0 0 0.6rem; flex-grow: 2; flex-basis: 0; font-size: 0.8rem; text-align: center; } .course-title { display: flex; align-items: center; font-size: 1.13rem; overflow-wrap: break-word; } .block-description pre { display: inline; padding: 0; } .superBlock-image { max-width: 100%; height: auto !important; }\n\n.block-ui {\n  height: 100%;\n  list-style: none;\n  color: var(--secondary-color);\n  padding: 0;\n}\n\n.block-ui a {\n  text-decoration: none;\n}\n\n.map-title {\n  display: flex;\n  align-items: center;\n  padding: 18px 0;\n  background: transparent;\n  border: none;\n  text-align: start;\n  width: 100%;\n}\n\nbutton.map-title {\n  cursor: pointer;\n  padding: 18px 15px;\n}\n\n.map-title:hover {\n  color: var(--tertiary-color);\n  background-color: var(--tertiary-background);\n}\n\n.map-challenge-wrap > a,\n.map-dialogue-wrap > a,\n.map-project-wrap > a {\n  display: flex;\n  gap: 7px;\n}\n\n.map-project-wrap > a {\n  justify-content: space-between;\n}\n\n.map-project-checkmark {\n  padding-inline-start: 15px;\n}\n\n.block .map-cert-title {\n  display: flex;\n  align-items: center;\n  padding: 18px 8px;\n  background: var(--secondary-background);\n  border: none;\n  text-align: left;\n  width: 100%;\n}\n\n.block .no-cursor {\n  cursor: default;\n}\n\n.block .no-cursor h3 {\n  cursor: text;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "42c64f0f8fa3eaaa5abdfc337e2aae44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "100%; } button.map-title { cursor: pointer; padding: 18px 15px; } .map-title:hover { color: var(--tertiary-color); background-color: var(--tertiary-background); } .map-challenge-wrap > a, .map-dialogue-wrap > a, .map-project-wrap > a { display: flex; gap: 7px; } .map-project-wrap > a { justify-content: space-between; } .map-project-checkmark { padding-inline-start: 15px; } .block .map-cert-title { display: flex; align-items: center; padding: 18px 8px; background: var(--secondary-background); border: none; text-align: left; width: 100%; } .block .no-cursor { cursor: default; } .block .no-cursor h3 { cursor: text; }\n\n.block .map-is-cert:hover {\n  color: var(--tertiary-color);\n  background-color: var(--tertiary-background);\n}\n\n.block-ui div.block {\n  background: var(--primary-background);\n}\n\n.block-ui .block .block-description {\n  padding: 0 15px 15px;\n  border-bottom: 3px solid var(--secondary-background);\n}\n\n.map-cert-title > h3 {\n  font-size: 1.17rem;\n  margin-block: 0;\n  margin-inline: 15px 0;\n}\n\n.map-cert-title > svg {\n  display: inline-block;\n  height: 40px;\n  width: auto;\n  min-width: 25px;\n}\n\n.map-title > h4 {\n  margin: 0;\n}\n\n.map-title-completed {\n  margin-inline-start: auto;\n  min-width: 100px;\n  padding-inline-start: 20px;\n}\n\n.map-title-completed-big {\n  margin-inline-start: auto;\n  padding-inline-end: 15px;\n  padding-inline-start: 20px;\n  position: relative;\n  top: 4px;\n}\n\n.map-title svg {\n  width: 14px;\n  flex-shrink: 0;\n  fill: var(--color-quaternary) !important;\n  stroke: var(--color-quaternary);\n}\n\n.open > .map-title > svg:first-child {\n  transform: rotate(90deg);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "5efde9ee6f086e0af0d61d447955b495",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": ".map-cert-title > h3 { font-size: 1.17rem; margin-block: 0; margin-inline: 15px 0; } .map-cert-title > svg { display: inline-block; height: 40px; width: auto; min-width: 25px; } .map-title > h4 { margin: 0; } .map-title-completed { margin-inline-start: auto; min-width: 100px; padding-inline-start: 20px; } .map-title-completed-big { margin-inline-start: auto; padding-inline-end: 15px; padding-inline-start: 20px; position: relative; top: 4px; } .map-title svg { width: 14px; flex-shrink: 0; fill: var(--color-quaternary) !important; stroke: var(--color-quaternary); } .open > .map-title > svg:first-child { transform: rotate(90deg); }\n\n.block-grid .map-title > svg:last-child {\n  transform: rotate(180deg);\n  margin-inline-start: auto;\n}\n\n.block-grid.open .map-title > svg:last-child {\n  transform: rotate(0deg);\n}\n\n.map-challenges-ul {\n  padding-inline-start: 0;\n  margin-bottom: 0;\n}\n\n.map-challenge-title {\n  display: flex;\n  align-items: center;\n  font-size: 1.13rem;\n}\n\n.map-challenge-title a {\n  padding: 10px 15px;\n  width: 100%;\n  align-items: center;\n}\n\n.map-challenges-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 3.4rem);\n  grid-gap: 3px;\n  justify-content: space-between;\n  margin: 0 auto 18px;\n  width: calc(100% - 50px);\n  list-style: none;\n}\n\n.map-challenges-grid .map-challenge-title a:focus {\n  outline-offset: 1px;\n}\n\n.map-challenges-grid .map-challenge-wrap {\n  margin: 6px 0;\n  max-width: 3.4rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "eb6171abb8dc21ab3a4f8f0cc64b52ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "margin-inline-start: auto; } .block-grid.open .map-title > svg:last-child { transform: rotate(0deg); } .map-challenges-ul { padding-inline-start: 0; margin-bottom: 0; } .map-challenge-title { display: flex; align-items: center; font-size: 1.13rem; } .map-challenge-title a { padding: 10px 15px; width: 100%; align-items: center; } .map-challenges-grid { display: grid; grid-template-columns: repeat(auto-fill, 3.4rem); grid-gap: 3px; justify-content: space-between; margin: 0 auto 18px; width: calc(100% - 50px); list-style: none; } .map-challenges-grid .map-challenge-title a:focus { outline-offset: 1px; } .map-challenges-grid .map-challenge-wrap { margin: 6px 0; max-width: 3.4rem; }\n\n.map-challenge-wrap a.map-grid-item {\n  justify-content: center;\n  align-items: center;\n  width: 3.4rem;\n  height: 3.4rem;\n  min-width: 24px;\n  min-height: 24px;\n  border: 1px dashed var(--background-quaternary);\n}\n\n.map-dialogue-wrap {\n  grid-column: 1 / -1;\n  margin: 0 auto 6px;\n  width: 100%;\n}\n\n.map-dialogue-wrap a {\n  align-items: center;\n  min-height: 50px;\n  padding: 10px 15px;\n}\n\n.block-description {\n  padding: 18px 0;\n}\n\n.block-description > p:last-child {\n  margin-bottom: 0;\n}\n\n.block-grid .block-description {\n  padding: 18px 15px;\n}\n\na.map-grid-item.challenge-completed {\n  background: var(--highlight-background);\n  position: relative;\n  border: 1px solid var(--primary-color);\n}\n\n.challenge-completed span {\n  font-weight: 900;\n  margin-top: -0.05rem;\n}\n\n@media screen and (max-width: 500px) {\n  .super-block-intro-page p {\n    font-size: 1rem;\n  }\n\n.big-subheading {\n    font-size: 1.35rem;\n  }",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "a71721605f57196bd6d1a05477f4ed99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "/ -1; margin: 0 auto 6px; width: 100%; } .map-dialogue-wrap a { align-items: center; min-height: 50px; padding: 10px 15px; } .block-description { padding: 18px 0; } .block-description > p:last-child { margin-bottom: 0; } .block-grid .block-description { padding: 18px 15px; } a.map-grid-item.challenge-completed { background: var(--highlight-background); position: relative; border: 1px solid var(--primary-color); } .challenge-completed span { font-weight: 900; margin-top: -0.05rem; } @media screen and (max-width: 500px) { .super-block-intro-page p { font-size: 1rem; } .big-subheading { font-size: 1.35rem; }\n\n.big-block-title {\n    font-size: 1.17rem;\n  }\n\n.block-header {\n    flex-direction: column;\n  }\n\n.block-cta-wrapper {\n    padding: 25px 15px 10px;\n  }\n\n.course-title,\n  .map-cert-title,\n  .map-challenge-title {\n    font-size: 1rem;\n  }\n}\n\n@media screen and (max-width: 767px) {\n  .intro-layout-container {\n    padding: 0 10px;\n  }\n\nbutton.map-title {\n    width: 100%;\n  }\n\n.map-challenge-title {\n    max-width: 100%;\n  }\n\n.map-title-completed {\n    flex-shrink: 0;\n    padding-inline-start: 15px;\n  }\n}\n\n.intro-layout {\n  margin-top: 1.45rem;\n}\n\n.intro-toc {\n  margin-bottom: 20px;\n  padding-left: 0;\n  list-style-type: none;\n}\n\n.intro-toc li {\n  margin: 5px auto;\n  padding: 10px 15px;\n}\n\n.intro-toc li:hover {\n  background-color: var(--tertiary-background);\n}\n\n.intro-toc a:hover {\n  text-decoration: none;\n  text-decoration-style: none;\n  color: var(--secondary-color);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "4e3b38f3dece5acf06949d513de26934",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": ".map-challenge-title { font-size: 1rem; } } @media screen and (max-width: 767px) { .intro-layout-container { padding: 0 10px; } button.map-title { width: 100%; } .map-challenge-title { max-width: 100%; } .map-title-completed { flex-shrink: 0; padding-inline-start: 15px; } } .intro-layout { margin-top: 1.45rem; } .intro-toc { margin-bottom: 20px; padding-left: 0; list-style-type: none; } .intro-toc li { margin: 5px auto; padding: 10px 15px; } .intro-toc li:hover { background-color: var(--tertiary-background); } .intro-toc a:hover { text-decoration: none; text-decoration-style: none; color: var(--secondary-color); }\n\n.cert-tag {\n  text-align: left;\n  width: fit-content;\n  font-size: 1rem;\n  display: block;\n  margin-bottom: 5px;\n  margin-inline-end: 5px;\n  padding: 4px 10px;\n  color: var(--highlight-color);\n  background-color: var(--highlight-background);\n}\n\n.block-grid {\n  border-bottom: 4px solid var(--secondary-background);\n}\n\n.block-grid .block-header {\n  flex-direction: column;\n  display: flex;\n  background: transparent;\n  border: none;\n  text-align: left;\n  width: 100%;\n  cursor: pointer;\n  padding: 18px 15px;\n}\n\n.block-grid .block-header:hover {\n  color: var(--tertiary-color);\n  background-color: var(--tertiary-background);\n}\n\n.block-grid .block-header[aria-expanded='true'] {\n  border-bottom: 2px solid var(--secondary-background);\n}\n\n.block-header-button-text {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.block-grid .block-header .block-link {\n  flex-direction: row;\n}\n\n.block-ui .block-grid .block-description {\n  border: none;\n  padding: 25px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "ec627e7b074c33ff936bc089c52169af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "color: var(--highlight-color); background-color: var(--highlight-background); } .block-grid { border-bottom: 4px solid var(--secondary-background); } .block-grid .block-header { flex-direction: column; display: flex; background: transparent; border: none; text-align: left; width: 100%; cursor: pointer; padding: 18px 15px; } .block-grid .block-header:hover { color: var(--tertiary-color); background-color: var(--tertiary-background); } .block-grid .block-header[aria-expanded='true'] { border-bottom: 2px solid var(--secondary-background); } .block-header-button-text { align-items: center; display: flex; flex-direction: row; justify-content: space-between; } .block-grid .block-header .block-link { flex-direction: row; } .block-ui .block-grid .block-description { border: none; padding: 25px; }\n\n.title-wrapper {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n}\n.course-title,\n.map-title,\n.block-header-button-text,\n.title-wrapper {\n  gap: 10px;\n}\n\n.block-grid .progress-wrapper {\n  width: 100%;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  margin-top: 18px;\n  margin-bottom: 14px;\n}\n\n.block-grid .progress-wrapper > div {\n  position: relative;\n  width: 80%;\n  margin-inline-end: 0.25em;\n}\n\n.annual-donation-alert .progress-wrapper {\n  display: inline-block;\n  width: 100%;\n  margin: 1.2rem 0;\n  flex-direction: row;\n  border: 1px solid var(--blue70);\n}\n\n.annual-donation-alert h3,\n.annual-donation-alert h2 {\n  color: var(--blue70);\n}\n\n.annual-donation-alert .progress-bar-wrap,\n.progress-bar-background {\n  background-color: transparent;\n}\n\n.annual-donation-alert hr {\n  border-top-color: var(--blue10);\n}\n\n.annual-donation-alert .btn-container {\n  display: flex;\n  justify-content: center;\n}\n\n.annual-donation-alert .donate-button,\n.university-alert .donate-button {\n  border-color: #31708f;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "fb88c421bcecd6694cadcf4e56cd86e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "left; display: flex; align-items: center; margin-top: 18px; margin-bottom: 14px; } .block-grid .progress-wrapper > div { position: relative; width: 80%; margin-inline-end: 0.25em; } .annual-donation-alert .progress-wrapper { display: inline-block; width: 100%; margin: 1.2rem 0; flex-direction: row; border: 1px solid var(--blue70); } .annual-donation-alert h3, .annual-donation-alert h2 { color: var(--blue70); } .annual-donation-alert .progress-bar-wrap, .progress-bar-background { background-color: transparent; } .annual-donation-alert hr { border-top-color: var(--blue10); } .annual-donation-alert .btn-container { display: flex; justify-content: center; } .annual-donation-alert .donate-button, .university-alert .donate-button { border-color: #31708f; }\n\n.university-alert {\n  background-repeat: repeat;\n  animation: slideBackground 10s linear infinite;\n  background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"144\" height=\"113\" viewBox=\"0 0 144 113\" fill=\"none\"><path d=\"M83.0205 89.0206L83.0515 78.5206L98.0293 86.0649L114.053 78.1122L114.02 89.1121C114.02 89.1121 107.6 96.0932 97.9998 96.0648C88.3998 96.0365 83.0205 89.0206 83.0205 89.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M76 72L98 59L121 72V81L123.5 87.5H117L120 81V72.5L98 83L76 72Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/><path d=\"M10.0205 33.0206L10.0515 22.5206L25.0293 30.0649L41.0529 22.1122L41.0204 33.1121C41.0204 33.1121 34.5997 40.0932 24.9998 40.0648C15.3998 40.0365 10.0205 33.0206 10.0205 33.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M3 16L25 3L48 16V25L50.5 31.5H44L47 25V16.5L25 27L3 16Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/></svg>');\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 651,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "9afc94f4ae872465aaa99fc6349a6e71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": ".university-alert { background-repeat: repeat; animation: slideBackground 10s linear infinite; background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"144\" height=\"113\" viewBox=\"0 0 144 113\" fill=\"none\"><path d=\"M83.0205 89.0206L83.0515 78.5206L98.0293 86.0649L114.053 78.1122L114.02 89.1121C114.02 89.1121 107.6 96.0932 97.9998 96.0648C88.3998 96.0365 83.0205 89.0206 83.0205 89.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M76 72L98 59L121 72V81L123.5 87.5H117L120 81V72.5L98 83L76 72Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/><path d=\"M10.0205 33.0206L10.0515 22.5206L25.0293 30.0649L41.0529 22.1122L41.0204 33.1121C41.0204 33.1121 34.5997 40.0932 24.9998 40.0648C15.3998 40.0365 10.0205 33.0206 10.0205 33.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M3 16L25 3L48 16V25L50.5 31.5H44L47 25V16.5L25 27L3 16Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/></svg>'); }\n\n@keyframes slideBackground {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 144px 113px;\n  }\n}\n/* story starts here */",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "323cf4c0090a22576e4dce7816f87b92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "78.5206L98.0293 86.0649L114.053 78.1122L114.02 89.1121C114.02 89.1121 107.6 96.0932 97.9998 96.0648C88.3998 96.0365 83.0205 89.0206 83.0205 89.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M76 72L98 59L121 72V81L123.5 87.5H117L120 81V72.5L98 83L76 72Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/><path d=\"M10.0205 33.0206L10.0515 22.5206L25.0293 30.0649L41.0529 22.1122L41.0204 33.1121C41.0204 33.1121 34.5997 40.0932 24.9998 40.0648C15.3998 40.0365 10.0205 33.0206 10.0205 33.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M3 16L25 3L48 16V25L50.5 31.5H44L47 25V16.5L25 27L3 16Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/></svg>'); } @keyframes slideBackground { from { background-position: 0 0; } to { background-position: 144px 113px; } } /* story starts here */\n\n.annual-donation-alert .progress-bar-percent {\n  border-right: 1px solid var(--blue70);\n  background-color: var(--blue-mid);\n  background-image: linear-gradient(to right, #31708f, #198eee);\n  box-shadow: none;\n}\n\n.tags-wrapper {\n  display: flex;\n  width: 100%;\n}\n\n.grid-project-block {\n  margin-bottom: 50px;\n  padding: 18px 15px;\n  position: relative;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "3713883ad04f3e8ae6044b1d45591e4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "40.0932 24.9998 40.0648C15.3998 40.0365 10.0205 33.0206 10.0205 33.0206Z\" fill=\"%23198EEE\" fill-opacity=\"0.1\"/><path d=\"M3 16L25 3L48 16V25L50.5 31.5H44L47 25V16.5L25 27L3 16Z\" fill=\"%233099F0\" fill-opacity=\"0.1\"/></svg>'); } @keyframes slideBackground { from { background-position: 0 0; } to { background-position: 144px 113px; } } /* story starts here */ .annual-donation-alert .progress-bar-percent { border-right: 1px solid var(--blue70); background-color: var(--blue-mid); background-image: linear-gradient(to right, #31708f, #198eee); box-shadow: none; } .tags-wrapper { display: flex; width: 100%; } .grid-project-block { margin-bottom: 50px; padding: 18px 15px; position: relative; }\n\n.grid-project-block-no-margin {\n  margin-bottom: 0;\n}\n\n.block-grid.grid-project-block:hover {\n  cursor: pointer;\n  background: var(--tertiary-background);\n}\n\n.grid-project-block a.block-header {\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: baseline;\n  gap: 10px;\n}\n\n/* make entire certification card clickable */\n.grid-project-block a.block-header::after {\n  content: '';\n  display: block;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.grid-project-block .tags-wrapper a {\n  position: relative;\n  z-index: 100;\n}\n\n.grid-project-block:hover:has(.tags-wrapper a:hover) {\n  background: var(--primary-background);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "732bb5dfd0971d3efee233b2404641b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
    "source_type": "git_repo",
    "title": "intro",
    "content": "margin-bottom: 50px; padding: 18px 15px; position: relative; } .grid-project-block-no-margin { margin-bottom: 0; } .block-grid.grid-project-block:hover { cursor: pointer; background: var(--tertiary-background); } .grid-project-block a.block-header { padding: 0; display: flex; flex-direction: row; justify-content: flex-start; align-items: baseline; gap: 10px; } /* make entire certification card clickable */ .grid-project-block a.block-header::after { content: ''; display: block; position: absolute; top: 0; bottom: 0; left: 0; right: 0; } .grid-project-block .tags-wrapper a { position: relative; z-index: 100; } .grid-project-block:hover:has(.tags-wrapper a:hover) { background: var(--primary-background); }\n\n.challenge-grid-block .challenge-grid-block-panel {\n  /* Add some space between panel content and the top edge of the container.\n    The value (18px) is the same value `.map-challenges-grid` uses\n    to create space between the grid and the bottom edge of the container. */\n  margin-top: 18px;\n}\n\n.chapter-button .dropdown-icon,\n.module-button .dropdown-icon {\n  width: 14px;\n  height: 14px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 11695,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.css",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "f1b84fc22e8c3898780d6666f4441099",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.tsx",
    "source_type": "git_repo",
    "title": "intro",
    "content": "import { graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\n\nimport { Container, Spacer } from '@freecodecamp/ui';\nimport { ButtonLink } from '../../components/helpers';\nimport FullWidthRow from '../../components/helpers/full-width-row';\nimport LearnLayout from '../../components/layouts/learn';\nimport type { MarkdownRemark, AllChallengeNode } from '../../redux/prop-types';\n\nimport './intro.css';\n\nfunction IntroductionPage({\n  data: { markdownRemark, allChallengeNode }\n}: {\n  data: {\n    markdownRemark: MarkdownRemark;\n    allChallengeNode: AllChallengeNode;\n  };\n}): React.FunctionComponentElement<typeof LearnLayout> {\n  const { t } = useTranslation();\n  const {\n    html,\n    frontmatter: { block, superBlock }\n  } = markdownRemark;\n  const firstLesson =\n    allChallengeNode && allChallengeNode.edges[0].node.challenge;\n  const firstLessonPath = firstLesson\n    ? firstLesson.fields.slug\n    : '/strange-place';\n  const blockTitle =\n    t(`intro:${superBlock}.blocks.${block}.title`) + ' | freeCodeCamp.org';\n  return (\n    <LearnLayout>\n      <Helmet>\n        <title>{blockTitle}</title>\n      </Helmet>\n      <Container className='intro-layout-container'>\n        <FullWidthRow>\n          <div\n            className='intro-layout'\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </FullWidthRow>\n        <FullWidthRow>\n          <ButtonLink block size='large' href={firstLessonPath || '/learn'}>\n            {t('buttons.first-lesson')}\n          </ButtonLink>\n          <Spacer size='xs' />\n          <ButtonLink block size='large' href='/learn'>\n            {t('buttons.view-curriculum')}\n          </ButtonLink>\n          <Spacer size='xs' />\n          <hr />\n        </FullWidthRow>\n      </Container>\n    </LearnLayout>\n  );\n}\n\nIntroductionPage.displayName = 'IntroductionPage';\n\nexport default IntroductionPage;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2444,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "40359fada6d5e3e859f92440c452a502",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.tsx",
    "source_type": "git_repo",
    "title": "intro",
    "content": "} = markdownRemark; const firstLesson = allChallengeNode && allChallengeNode.edges[0].node.challenge; const firstLessonPath = firstLesson ? firstLesson.fields.slug : '/strange-place'; const blockTitle = t(`intro:${superBlock}.blocks.${block}.title`) + ' | freeCodeCamp.org'; return ( <LearnLayout> <Helmet> <title>{blockTitle}</title> </Helmet> <Container className='intro-layout-container'> <FullWidthRow> <div className='intro-layout' dangerouslySetInnerHTML={{ __html: html }} /> </FullWidthRow> <FullWidthRow> <ButtonLink block size='large' href={firstLessonPath || '/learn'}> {t('buttons.first-lesson')} </ButtonLink> <Spacer size='xs' /> <ButtonLink block size='large' href='/learn'> {t('buttons.view-curriculum')} </ButtonLink> <Spacer size='xs' /> <hr /> </FullWidthRow> </Container> </LearnLayout> ); } IntroductionPage.displayName = 'IntroductionPage'; export default IntroductionPage;\n\nexport const query = graphql`\n  query IntroPageBySlug($id: String!, $block: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        block\n        superBlock\n      }\n      html\n    }\n    allChallengeNode(\n      sort: { fields: [challenge___challengeOrder] }\n      filter: { challenge: { block: { eq: $block } } }\n      limit: 1\n    ) {\n      edges {\n        node {\n          challenge {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2444,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f879f3d8d8b9eb67ba921f9c30bd1664",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "import i18next from 'i18next';\nimport { WindowLocation } from '@gatsbyjs/reach-router';\nimport { graphql } from 'gatsby';\nimport { uniq, isEmpty, last } from 'lodash-es';\nimport React, { useEffect, memo, useMemo } from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { configureAnchors } from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Spacer } from '@freecodecamp/ui';\n\nimport {\n  chapterBasedSuperBlocks,\n  SuperBlocks\n} from '../../../../shared/config/curriculum';\nimport DonateModal from '../../components/Donation/donation-modal';\nimport Login from '../../components/Header/components/login';\nimport Map from '../../components/Map';\nimport callGA from '../../analytics/call-ga';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport {\n  isSignedInSelector,\n  userSelector,\n  currentChallengeIdSelector,\n  userFetchStateSelector,\n  signInLoadingSelector\n} from '../../redux/selectors';\nimport type { User } from '../../redux/prop-types';\nimport { CertTitle, liveCerts } from '../../../config/cert-and-project-map';\nimport { superBlockToCertMap } from '../../../../shared/config/certification-settings';\nimport { BlockLayouts, BlockTypes } from '../../../../shared/config/blocks';\nimport Block from './components/block';\nimport CertChallenge from './components/cert-challenge';\nimport LegacyLinks from './components/legacy-links';\nimport HelpTranslate from './components/help-translate';\nimport SuperBlockIntro from './components/super-block-intro';\nimport { SuperBlockAccordion } from './components/super-block-accordion';\nimport { resetExpansion, toggleBlock } from './redux';\n\nimport './intro.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "66f4bd2bb589148bbae931be90896cfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "} from '../../redux/selectors'; import type { User } from '../../redux/prop-types'; import { CertTitle, liveCerts } from '../../../config/cert-and-project-map'; import { superBlockToCertMap } from '../../../../shared/config/certification-settings'; import { BlockLayouts, BlockTypes } from '../../../../shared/config/blocks'; import Block from './components/block'; import CertChallenge from './components/cert-challenge'; import LegacyLinks from './components/legacy-links'; import HelpTranslate from './components/help-translate'; import SuperBlockIntro from './components/super-block-intro'; import { SuperBlockAccordion } from './components/super-block-accordion'; import { resetExpansion, toggleBlock } from './redux'; import './intro.css'; type FetchState = { pending: boolean; complete: boolean; errored: boolean; };\n\ntype ChallengeNode = {\n  challenge: {\n    fields: { slug: string; blockName: string };\n    id: string;\n    block: string;\n    blockType: BlockTypes;\n    challengeType: number;\n    title: string;\n    order: number;\n    superBlock: SuperBlocks;\n    dashedName: string;\n    blockLayout: BlockLayouts;\n    chapter: string;\n    module: string;\n  };\n};\n\ntype SuperBlockProps = {\n  currentChallengeId: string;\n  data: {\n    allChallengeNode: { nodes: ChallengeNode[] };\n  };\n  expandedState: {\n    [key: string]: boolean;\n  };\n  fetchState: FetchState;\n  isSignedIn: boolean;\n  signInLoading: boolean;\n  location: WindowLocation<{ breadcrumbBlockClick: string }>;\n  pageContext: {\n    superBlock: SuperBlocks;\n    title: CertTitle;\n    certification: string;\n  };\n  resetExpansion: () => void;\n  toggleBlock: (arg0: string) => void;\n  tryToShowDonationModal: () => void;\n  user: User | null;\n};\n\nconfigureAnchors({ offset: -40, scrollDuration: 0 });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "ac05ab28a27c9fb02208f80892cea837",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "superBlock: SuperBlocks; dashedName: string; blockLayout: BlockLayouts; chapter: string; module: string; }; }; type SuperBlockProps = { currentChallengeId: string; data: { allChallengeNode: { nodes: ChallengeNode[] }; }; expandedState: { [key: string]: boolean; }; fetchState: FetchState; isSignedIn: boolean; signInLoading: boolean; location: WindowLocation<{ breadcrumbBlockClick: string }>; pageContext: { superBlock: SuperBlocks; title: CertTitle; certification: string; }; resetExpansion: () => void; toggleBlock: (arg0: string) => void; tryToShowDonationModal: () => void; user: User | null; }; configureAnchors({ offset: -40, scrollDuration: 0 });\n\nconst mapStateToProps = (state: Record<string, unknown>) => {\n  return createSelector(\n    currentChallengeIdSelector,\n    isSignedInSelector,\n    signInLoadingSelector,\n    userFetchStateSelector,\n    userSelector,\n    (\n      currentChallengeId: string,\n      isSignedIn,\n      signInLoading: boolean,\n      fetchState: FetchState,\n      user: User | null\n    ) => ({\n      currentChallengeId,\n      isSignedIn,\n      signInLoading,\n      fetchState,\n      user\n    })\n  )(state);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      tryToShowDonationModal,\n      resetExpansion,\n      toggleBlock: b => toggleBlock(b)\n    },\n    dispatch\n  );\n\nconst SuperBlockIntroductionPage = (props: SuperBlockProps) => {\n  const { t } = useTranslation();\n  useEffect(() => {\n    initializeExpandedState();\n    props.tryToShowDonationModal();\n\nsetTimeout(() => {\n      configureAnchors({ offset: -40, scrollDuration: 400 });\n    }, 0);\n\nreturn () => {\n      configureAnchors({ offset: -40, scrollDuration: 0 });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst {\n    data: {\n      allChallengeNode: { nodes }\n    },\n    isSignedIn,\n    currentChallengeId,\n    signInLoading,\n    user,\n    pageContext: { superBlock, title, certification },\n    location\n  } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "778594ffec859a7bf00a9e1768bf371b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "resetExpansion, toggleBlock: b => toggleBlock(b) }, dispatch ); const SuperBlockIntroductionPage = (props: SuperBlockProps) => { const { t } = useTranslation(); useEffect(() => { initializeExpandedState(); props.tryToShowDonationModal(); setTimeout(() => { configureAnchors({ offset: -40, scrollDuration: 400 }); }, 0); return () => { configureAnchors({ offset: -40, scrollDuration: 0 }); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const { data: { allChallengeNode: { nodes } }, isSignedIn, currentChallengeId, signInLoading, user, pageContext: { superBlock, title, certification }, location } = props;\n\nconst allChallenges = useMemo(\n    () => nodes.map(({ challenge }) => challenge),\n    [nodes]\n  );\n  const superBlockChallenges = useMemo(\n    () => allChallenges.filter(c => c.superBlock === superBlock),\n    [allChallenges, superBlock]\n  );\n  const blocks = uniq(superBlockChallenges.map(({ block }) => block));\n\nconst completedChallenges = useMemo(\n    () =>\n      (user?.completedChallenges ?? []).filter(completedChallenge =>\n        superBlockChallenges.some(c => c.id === completedChallenge.id)\n      ),\n    [superBlockChallenges, user?.completedChallenges]\n  );\n\nconst i18nTitle = i18next.t(`intro:${superBlock}.title`);\n\nconst showCertification = liveCerts.some(\n    cert => superBlockToCertMap[superBlock] === cert.certSlug\n  );\n\nconst getInitiallyExpandedBlock = (): string => {\n    // if coming from breadcrumb click\n    if (\n      location.state &&\n      typeof location.state === 'object' &&\n      Object.prototype.hasOwnProperty.call(\n        location.state,\n        'breadcrumbBlockClick'\n      )\n    ) {\n      return location.state.breadcrumbBlockClick;\n    }\n\n// if the URL includes a hash\n    if (location.hash) {\n      const dashedBlock = location.hash.replace('#', '').replace('/', '');\n      return dashedBlock;\n    }\n\nif (isSignedIn) {\n      // see if currentChallenge is in this superBlock\n      const currentChallenge = superBlockChallenges.find(\n        challenge => challenge.id === currentChallengeId\n      );\n\nif (currentChallenge) return currentChallenge.block;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "f274b180cd4b9da43f734ba5d2826592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "); const getInitiallyExpandedBlock = (): string => { // if coming from breadcrumb click if ( location.state && typeof location.state === 'object' && Object.prototype.hasOwnProperty.call( location.state, 'breadcrumbBlockClick' ) ) { return location.state.breadcrumbBlockClick; } // if the URL includes a hash if (location.hash) { const dashedBlock = location.hash.replace('#', '').replace('/', ''); return dashedBlock; } if (isSignedIn) { // see if currentChallenge is in this superBlock const currentChallenge = superBlockChallenges.find( challenge => challenge.id === currentChallengeId ); if (currentChallenge) return currentChallenge.block;\n\n// If the current challenge isn't in the super block\n      // Find the most recently completed challenge of the super block,\n      // which is the last item of the `completedChallenges` array.\n      if (!isEmpty(completedChallenges)) {\n        const lastCompletedChallengeId = last(completedChallenges)?.id;\n\nconst lastCompletedChallenge = superBlockChallenges.find(\n          ({ id }) => id === lastCompletedChallengeId\n        );\n\nif (lastCompletedChallenge) return lastCompletedChallenge.block;\n      }\n    }\n\nreturn blocks[0];\n  };\n\nconst initializeExpandedState = () => {\n    const { resetExpansion, toggleBlock } = props;\n\nresetExpansion();\n    return toggleBlock(getInitiallyExpandedBlock());\n  };\n\nconst initialExpandedBlock = getInitiallyExpandedBlock();\n\nconst onCertificationDonationAlertClick = () => {\n    callGA({\n      event: 'donation_related',\n      action: `Certification Donation Alert Click`\n    });\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "c3d58842ad3d9bd1a42fc109aa774468",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "block, // which is the last item of the `completedChallenges` array. if (!isEmpty(completedChallenges)) { const lastCompletedChallengeId = last(completedChallenges)?.id; const lastCompletedChallenge = superBlockChallenges.find( ({ id }) => id === lastCompletedChallengeId ); if (lastCompletedChallenge) return lastCompletedChallenge.block; } } return blocks[0]; }; const initializeExpandedState = () => { const { resetExpansion, toggleBlock } = props; resetExpansion(); return toggleBlock(getInitiallyExpandedBlock()); }; const initialExpandedBlock = getInitiallyExpandedBlock(); const onCertificationDonationAlertClick = () => { callGA({ event: 'donation_related', action: `Certification Donation Alert Click` }); };\n\nreturn (\n    <>\n      <Helmet>\n        <title>{i18nTitle} | freeCodeCamp.org</title>\n      </Helmet>\n      <Container>\n        <main>\n          <Row className='super-block-intro-page'>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='l' />\n              <LegacyLinks superBlock={superBlock} />\n              <SuperBlockIntro\n                superBlock={superBlock}\n                onCertificationDonationAlertClick={\n                  onCertificationDonationAlertClick\n                }\n                isDonating={user?.isDonating ?? false}\n              />\n              <HelpTranslate superBlock={superBlock} />\n              <Spacer size='l' />\n              <h2 className='text-center big-subheading'>\n                {t(`intro:misc-text.courses`)}\n              </h2>\n              <Spacer size='m' />\n              {chapterBasedSuperBlocks.includes(superBlock) ? (\n                <SuperBlockAccordion\n                  challenges={superBlockChallenges}\n                  superBlock={superBlock}\n                  chosenBlock={initialExpandedBlock}\n                  completedChallengeIds={completedChallenges.map(c => c.id)}\n                />\n              ) : (\n                <div className='block-ui'>\n                  {blocks.map(block => {\n                    const blockChallenges = superBlockChallenges.filter(\n                      c => c.block === block\n                    );\n                    const blockType = blockChallenges[0].blockType;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "b8d1135b49e4eda60082e06ab6868015",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "<title>{i18nTitle} | freeCodeCamp.org</title> </Helmet> <Container> <main> <Row className='super-block-intro-page'> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <Spacer size='l' /> <LegacyLinks superBlock={superBlock} /> <SuperBlockIntro superBlock={superBlock} onCertificationDonationAlertClick={ onCertificationDonationAlertClick } isDonating={user?.isDonating ?? false} /> <HelpTranslate superBlock={superBlock} /> <Spacer size='l' /> <h2 className='text-center big-subheading'> {t(`intro:misc-text.courses`)} </h2> <Spacer size='m' /> {chapterBasedSuperBlocks.includes(superBlock) ? ( <SuperBlockAccordion challenges={superBlockChallenges} superBlock={superBlock} chosenBlock={initialExpandedBlock} completedChallengeIds={completedChallenges.map(c => c.id)} /> ) : ( <div className='block-ui'> {blocks.map(block => { const blockChallenges = superBlockChallenges.filter( c => c.block === block ); const blockType = blockChallenges[0].blockType;\n\nreturn (\n                      <Block\n                        key={block}\n                        block={block}\n                        blockType={blockType}\n                        challenges={blockChallenges}\n                        superBlock={superBlock}\n                      />\n                    );\n                  })}\n                  {showCertification && !!user && (\n                    <CertChallenge\n                      certification={certification}\n                      superBlock={superBlock}\n                      title={title}\n                      user={user}\n                    />\n                  )}\n                </div>\n              )}\n              {!isSignedIn && !signInLoading && (\n                <>\n                  <Spacer size='l' />\n                  <Login block={true}>{t('buttons.logged-out-cta-btn')}</Login>\n                </>\n              )}\n              <Spacer size='l' />\n              <h3\n                className='text-center big-block-title'\n                style={{ whiteSpace: 'pre-line' }}\n              >\n                {t(`intro:misc-text.browse-other`)}\n              </h3>\n              <Spacer size='m' />\n              <Map />\n              <Spacer size='l' />\n            </Col>\n          </Row>\n        </main>\n      </Container>\n      <DonateModal location={props.location} />\n    </>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "58b7a8df2e9dda7f9ce9b0c29fa02e0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "=== block ); const blockType = blockChallenges[0].blockType; return ( <Block key={block} block={block} blockType={blockType} challenges={blockChallenges} superBlock={superBlock} /> ); })} {showCertification && !!user && ( <CertChallenge certification={certification} superBlock={superBlock} title={title} user={user} /> )} </div> )} {!isSignedIn && !signInLoading && ( <> <Spacer size='l' /> <Login block={true}>{t('buttons.logged-out-cta-btn')}</Login> </> )} <Spacer size='l' /> <h3 className='text-center big-block-title' style={{ whiteSpace: 'pre-line' }} > {t(`intro:misc-text.browse-other`)} </h3> <Spacer size='m' /> <Map /> <Spacer size='l' /> </Col> </Row> </main> </Container> <DonateModal location={props.location} /> </> ); };\n\nSuperBlockIntroductionPage.displayName = 'SuperBlockIntroductionPage';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(memo(SuperBlockIntroductionPage)));\n\nexport const query = graphql`\n  query SuperBlockIntroPageQuery {\n    allChallengeNode(\n      sort: {\n        fields: [\n          challenge___superOrder\n          challenge___order\n          challenge___challengeOrder\n        ]\n      }\n    ) {\n      nodes {\n        challenge {\n          fields {\n            slug\n            blockName\n          }\n          id\n          block\n          blockType\n          challengeType\n          title\n          order\n          superBlock\n          dashedName\n          blockLayout\n          chapter\n          module\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "b0c468d7af098c7f125dc56695b37a84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-header.tsx",
    "source_type": "git_repo",
    "title": "block-header",
    "content": "import React from 'react';\nimport { isEmpty } from 'lodash';\n\nimport { BlockTypes } from '../../../../../shared/config/blocks';\nimport { ProgressBar } from '../../../components/Progress/progress-bar';\nimport DropDown from '../../../assets/icons/dropdown';\nimport CheckMark from './check-mark';\nimport BlockLabel from './block-label';\nimport BlockIntros from './block-intros';\n\ninterface BlockHeaderProps {\n  blockDashed: string;\n  blockTitle: string;\n  blockType: BlockTypes | null;\n  courseCompletionStatus: string;\n  completedCount: number;\n  handleClick: () => void;\n  isCompleted: boolean;\n  isExpanded: boolean;\n  percentageCompleted: number;\n  blockIntroArr?: string[];\n}\n\nfunction BlockHeader({\n  blockDashed,\n  blockTitle,\n  blockType,\n  completedCount,\n  courseCompletionStatus,\n  handleClick,\n  isCompleted,\n  isExpanded,\n  percentageCompleted,\n  blockIntroArr\n}: BlockHeaderProps): JSX.Element {\n  return (\n    <>\n      <h3 className='block-grid-title'>\n        <button\n          aria-expanded={isExpanded ? 'true' : 'false'}\n          aria-controls={`${blockDashed}-panel`}\n          className='block-header'\n          onClick={handleClick}\n        >\n          <span className='block-header-button-text map-title'>\n            <CheckMark isCompleted={isCompleted} />\n            {blockType && <BlockLabel blockType={blockType} />}\n            <span>\n              {blockTitle}\n              <span className='sr-only'>, {courseCompletionStatus}</span>\n            </span>\n            <DropDown />\n          </span>\n          {!isExpanded && !isCompleted && completedCount > 0 && (\n            <div aria-hidden='true' className='progress-wrapper'>\n              <div>\n                <ProgressBar now={percentageCompleted} />\n              </div>\n              <span>{`${percentageCompleted}%`}</span>\n            </div>\n          )}\n        </button>\n      </h3>\n      {isExpanded && !isEmpty(blockIntroArr) && (\n        <BlockIntros intros={blockIntroArr as string[]} />\n      )}\n    </>\n  );\n}\n\nexport default BlockHeader;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2036,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-header.tsx",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a73ace532cfbad309a78989a5f8ba0d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-intros.test.tsx",
    "source_type": "git_repo",
    "title": "block-intros.test",
    "content": "import React from 'react';\nimport renderer from 'react-test-renderer';\nimport BlockIntros from './block-intros';\n\nconst arrString = ['first paragraph', 'second paragraph'];\n\ndescribe('<BlockIntros />', () => {\n  it('matches snapshot', () => {\n    const tree = renderer.create(<BlockIntros intros={arrString} />);\n    expect(tree).toMatchSnapshot();\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 359,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-intros.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 81,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f21ae4469157f9fe285e93d88afe9269",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-intros.tsx",
    "source_type": "git_repo",
    "title": "block-intros",
    "content": "import React from 'react';\n\nfunction BlockIntros({ intros }: { intros: string[] }): JSX.Element {\n  return (\n    <div className='block-description'>\n      {intros.map((title, i) => (\n        <p dangerouslySetInnerHTML={{ __html: title }} key={i} />\n      ))}\n    </div>\n  );\n}\n\nexport default BlockIntros;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 306,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-intros.tsx",
      "source_type": "git_repo"
    },
    "token_count": 76,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c37c1c1dd8ec4fed5a2efdc1ddfca131",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-label.tsx",
    "source_type": "git_repo",
    "title": "block-label",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BlockTypes } from '../../../../../shared/config/blocks';\n\ninterface BlockLabelProps {\n  blockType: BlockTypes;\n}\n\nfunction BlockLabel({ blockType }: BlockLabelProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <div className={`block-label block-label-${blockType}`}>\n      {t(`learn.block-type.${blockType}`)}\n    </div>\n  );\n}\n\nexport default BlockLabel;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 461,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block-label.tsx",
      "source_type": "git_repo"
    },
    "token_count": 105,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d4f08dfe6bda222b3c6d9d7df2b478fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.css",
    "source_type": "git_repo",
    "title": "block",
    "content": "/* these are all used in the AccordionBlock() layout in Block.tsx */\n.accordion-block-expanded {\n  padding: 0 24px;\n}\n\n.accordion-block-expanded .block-description {\n  padding: 18px 15px;\n  border-bottom: 1px solid var(--secondary-background);\n}\n\n.accordion-block-expanded .challenge-jump-link {\n  margin: 0 15px 25px;\n}\n\n.accordion-block-expanded .map-challenges-grid {\n  margin: 0 15px 18px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 396,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.css",
      "source_type": "git_repo"
    },
    "token_count": 110,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ea470a7ec7991c345491e8968743f810",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
    "source_type": "git_repo",
    "title": "block.test",
    "content": "import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { createStore } from '../../../redux/create-store';\nimport {\n  ChallengeFiles,\n  PrerequisiteChallenge,\n  Test,\n  Fields,\n  Question,\n  FileKeyChallenge,\n  BilibiliIds\n} from '../../../redux/prop-types';\nimport { isAuditedSuperBlock } from '../../../../../shared/utils/is-audited';\nimport { BlockLayouts, BlockTypes } from '../../../../../shared/config/blocks';\nimport Block from './block';\n\njest.mock('../../../../../shared/utils/is-audited', () => ({\n  isAuditedSuperBlock: jest.fn().mockReturnValueOnce(true)\n}));\n\njest.mock('../redux', () => ({\n  makeExpandedBlockSelector: jest.fn(() => jest.fn(() => true)),\n  completedChallengesSelector: jest.fn(() => [\n    { id: 'mockId', title: 'mockTitle' }\n  ])\n})); const defaultProps = {\n  block: 'test-block',\n  blockType: null,\n  challenges: [\n    {\n      block: 'testblock',\n      blockType: BlockTypes lab,\n      blockLayout: BlockLayouts ChallengeGrid,\n      certification: 'mockCertification',\n      challengeOrder: 1,\n      challengeType: 0,\n      dashedName: 'mock-dashed-name',\n      description: 'mockDescription',\n      challengeFiles: {} as ChallengeFiles,\n      fields: {} as Fields,\n      forumTopicId: 12345,\n      guideUrl: 'https://mockurl",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4aa80bde07ca786b03b5a51004da3bfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
    "source_type": "git_repo",
    "title": "block.test",
    "content": "from '../../../../../shared/config/blocks'; import Block from './block'; jest.mock('../../../../../shared/utils/is-audited', () => ({ isAuditedSuperBlock: jest.fn().mockReturnValueOnce(true) })); jest.mock('../redux', () => ({ makeExpandedBlockSelector: jest.fn(() => jest.fn(() => true)), completedChallengesSelector: jest.fn(() => [ { id: 'mockId', title: 'mockTitle' } ]) })); const defaultProps = { block: 'test-block', blockType: null, challenges: [ { block: 'testblock', blockType: BlockTypes lab, blockLayout: BlockLayouts ChallengeGrid, certification: 'mockCertification', challengeOrder: 1, challengeType: 0, dashedName: 'mock-dashed-name', description: 'mockDescription', challengeFiles: {} as ChallengeFiles, fields: {} as Fields, forumTopicId: 12345, guideUrl: 'https://mockurlcom',\n      head: ['mockHead'],\n      hasEditableBoundaries: false,\n      helpCategory: 'mockHelpCategory',\n      id: 'mockId',\n      instructions: 'mockInstructions',\n      isComingSoon: false,\n      internal: {\n        content: 'mockContent',\n        contentDigest: 'mockContentDigest',\n        description: 'mockInternalDescription',\n        fieldOwners: ['mockOwner'],\n        ignoreType: null,\n        mediaType: 'mockMediaType',\n        owner: 'mockOwner',\n        type: 'mockType'\n      },\n      notes: 'mockNotes',\n      prerequisites: [] as PrerequisiteChallenge[],\n      isLocked: false,\n      isPrivate: false,\n      order: 1,\n      questions: [] as Question[],\n      assignments: ['mockAssignment'],\n      required: [],\n      solutions: {\n        ['indexhtml']: {} as FileKeyChallenge,\n        ['scriptjs']: {} as FileKeyChallenge,\n        ['stylescss']: {} as FileKeyChallenge,\n        ['indexjsx']: {} as FileKeyChallenge\n      },\n      sourceInstanceName: 'mockSourceInstanceName',\n      superOrder: 1,\n      superBlock: SuperBlocks FullStackDeveloper,\n      tail: ['mockTail'],\n      template: 'mockTemplate',\n      tests: [] as Test[],\n      title: 'mockTitle',\n      translationPending: false,\n      url: 'https://mockurl",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ec94930846af25593181eeed7f79b18e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
    "source_type": "git_repo",
    "title": "block.test",
    "content": "'mockContent', contentDigest: 'mockContentDigest', description: 'mockInternalDescription', fieldOwners: ['mockOwner'], ignoreType: null, mediaType: 'mockMediaType', owner: 'mockOwner', type: 'mockType' }, notes: 'mockNotes', prerequisites: [] as PrerequisiteChallenge[], isLocked: false, isPrivate: false, order: 1, questions: [] as Question[], assignments: ['mockAssignment'], required: [], solutions: { ['indexhtml']: {} as FileKeyChallenge, ['scriptjs']: {} as FileKeyChallenge, ['stylescss']: {} as FileKeyChallenge, ['indexjsx']: {} as FileKeyChallenge }, sourceInstanceName: 'mockSourceInstanceName', superOrder: 1, superBlock: SuperBlocks FullStackDeveloper, tail: ['mockTail'], template: 'mockTemplate', tests: [] as Test[], title: 'mockTitle', translationPending: false, url: 'https://mockurlcom',\n      usesMultifileEditor: false,\n      videoId: 'mockVideoId',\n      videoLocaleIds: {},\n      bilibiliIds: {} as BilibiliIds,\n      videoUrl: 'https://mockvideourl com'\n    }\n  ],\n  completedChallengeIds: ['testchallengeIds'],\n  isExpanded: true,\n  t: jest fn((key: string) => [key]),\n  superBlock: SuperBlocks FullStackDeveloper,\n  toggleBlock: jest fn()\n};\n\ndescribe('<Block />', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\nit('The \"Help us translate\" badge does not appear on any English blocks', () => {\n    render(\n      <Provider store={createStore()}>\n        <Block {...defaultProps} />\n      </Provider>\n    );\n    expect(\n      screen.queryByText(/misc.translation-pending/)\n    ).not.toBeInTheDocument();\n  });\n\nit(`The \"Help us translate\" badge does not appear on any i18n blocks when the superblock is audited`, () => {\n    (isAuditedSuperBlock as jest.Mock).mockReturnValue(true);\n    render(\n      <Provider store={createStore()}>\n        <Block {...defaultProps} />\n      </Provider>\n    );\n    expect(\n      screen.queryByText(/misc.translation-pending/)\n    ).not.toBeInTheDocument();\n  });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a0b2ddc93b3fd86ce14c862eeb98e815",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
    "source_type": "git_repo",
    "title": "block.test",
    "content": "toggleBlock: jest fn() }; describe('<Block />', () => { afterEach(() => { jest.clearAllMocks(); }); it('The \"Help us translate\" badge does not appear on any English blocks', () => { render( <Provider store={createStore()}> <Block {...defaultProps} /> </Provider> ); expect( screen.queryByText(/misc.translation-pending/) ).not.toBeInTheDocument(); }); it(`The \"Help us translate\" badge does not appear on any i18n blocks when the superblock is audited`, () => { (isAuditedSuperBlock as jest.Mock).mockReturnValue(true); render( <Provider store={createStore()}> <Block {...defaultProps} /> </Provider> ); expect( screen.queryByText(/misc.translation-pending/) ).not.toBeInTheDocument(); });\n\nit(`The \"Help us translate\" badge does appear on i18n blocks when the superblock is not audited`, () => {\n    (isAuditedSuperBlock as jest.Mock).mockReturnValue(false);\n    render(\n      <Provider store={createStore()}>\n        <Block {...defaultProps} />\n      </Provider>\n    );\n    expect(screen.getByText(/misc.translation-pending/)).toBeInTheDocument();\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "65e68abcfcd75162f1acc96f1098b338",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "import React, { Component, ReactNode } from 'react';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport ScrollableAnchor from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport {\n  chapterBasedSuperBlocks,\n  SuperBlocks\n} from '../../../../../shared/config/curriculum';\nimport envData from '../../../../config/env.json';\nimport { isAuditedSuperBlock } from '../../../../../shared/utils/is-audited';\nimport Caret from '../../../assets/icons/caret';\nimport { Link } from '../../../components/helpers';\nimport { completedChallengesSelector } from '../../../redux/selectors';\nimport { playTone } from '../../../utils/tone';\nimport { makeExpandedBlockSelector, toggleBlock } from '../redux';\nimport { isProjectBased } from '../../../utils/curriculum-layout';\nimport { BlockLayouts, BlockTypes } from '../../../../../shared/config/blocks';\nimport CheckMark from './check-mark';\nimport Challenges from './challenges';\nimport BlockLabel from './block-label';\nimport BlockIntros from './block-intros';\nimport BlockHeader from './block-header';\n\nimport '../intro.css';\nimport './block.css';\n\nconst { curriculumLocale } = envData;\n\nconst mapStateToProps = (state: unknown, ownProps: { block: string }) => {\n  const expandedSelector = makeExpandedBlockSelector(ownProps.block);\n\nreturn createSelector(\n    expandedSelector,\n    completedChallengesSelector,\n    (isExpanded: boolean, completedChallenges: { id: string }[]) => ({\n      isExpanded,\n      completedChallengeIds: completedChallenges.map(({ id }) => id)\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ toggleBlock }, dispatch);\n\ninterface ChallengeInfo {\n  id: string;\n  title: string;\n  fields: { slug: string };\n  dashedName: string;\n  challengeType: number;\n  blockLayout: BlockLayouts;\n  superBlock: SuperBlocks;\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "ded81f46ef1a4aedb3f220a472367351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "} = envData; const mapStateToProps = (state: unknown, ownProps: { block: string }) => { const expandedSelector = makeExpandedBlockSelector(ownProps.block); return createSelector( expandedSelector, completedChallengesSelector, (isExpanded: boolean, completedChallenges: { id: string }[]) => ({ isExpanded, completedChallengeIds: completedChallenges.map(({ id }) => id) }) )(state as Record<string, unknown>); }; const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ toggleBlock }, dispatch); interface ChallengeInfo { id: string; title: string; fields: { slug: string }; dashedName: string; challengeType: number; blockLayout: BlockLayouts; superBlock: SuperBlocks; }\n\ninterface BlockProps {\n  block: string;\n  blockType: BlockTypes | null;\n  challenges: ChallengeInfo[];\n  completedChallengeIds: string[];\n  isExpanded: boolean;\n  superBlock: SuperBlocks;\n  t: TFunction;\n  toggleBlock: typeof toggleBlock;\n}\n\nclass Block extends Component<BlockProps> {\n  static displayName: string;\n  constructor(props: BlockProps) {\n    super(props);\n\nthis.handleBlockClick = this.handleBlockClick.bind(this);\n  }\n\nhandleBlockClick = (): void => {\n    const { block, toggleBlock } = this.props;\n    void playTone('block-toggle');\n    toggleBlock(block);\n  };\n\nrender(): ReactNode {\n    const {\n      block,\n      blockType,\n      completedChallengeIds,\n      challenges,\n      isExpanded,\n      superBlock,\n      t\n    } = this.props;\n\nlet completedCount = 0;\n    let stepNumber = 0;\n\nconst extendedChallenges = challenges.map(challenge => {\n      const { id } = challenge;\n      const isCompleted = completedChallengeIds.some(\n        (completedChallengeId: string) => completedChallengeId === id\n      );\n      if (isCompleted) {\n        completedCount++;\n      }\n      // Dialogues are interwoven with other challenges in the curriculum, but\n      // are not considered to be steps.\n      if (challenge.challengeType !== challengeTypes.dialogue) {\n        stepNumber++;\n      }\n\nreturn { ...challenge, isCompleted, stepNumber };\n    });\n\nconst isProjectBlock = challenges.some(challenge => {\n      return isProjectBased(challenge.challengeType, block);\n    });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "84e9578821eaa68a5d0b40c423ffadc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "= 0; let stepNumber = 0; const extendedChallenges = challenges.map(challenge => { const { id } = challenge; const isCompleted = completedChallengeIds.some( (completedChallengeId: string) => completedChallengeId === id ); if (isCompleted) { completedCount++; } // Dialogues are interwoven with other challenges in the curriculum, but // are not considered to be steps. if (challenge.challengeType !== challengeTypes.dialogue) { stepNumber++; } return { ...challenge, isCompleted, stepNumber }; }); const isProjectBlock = challenges.some(challenge => { return isProjectBased(challenge.challengeType, block); });\n\nconst isAudited = isAuditedSuperBlock(curriculumLocale, superBlock);\n\nconst blockTitle = t(`intro:${superBlock}.blocks.${block}.title`);\n    const blockIntroArr = t(`intro:${superBlock}.blocks.${block}.intro`, {\n      returnObjects: true\n    }) as string[];\n    const expandText = t('intro:misc-text.expand');\n    const collapseText = t('intro:misc-text.collapse');\n\nconst isBlockCompleted = completedCount === challenges.length;\n\nconst percentageCompleted = Math.floor(\n      (completedCount / challenges.length) * 100\n    );\n\n// since the Blocks are not components, we need link to exist even if it's\n    // not being used to render anything\n    const link = challenges[0]?.fields.slug || '';\n    const blockLayout = challenges[0]?.blockLayout;\n    const isGridBlock = blockLayout === BlockLayouts.ChallengeGrid;\n\nconst isEmptyBlock = !challenges.length;\n\nconst courseCompletionStatus = () => {\n      if (completedCount === 0) {\n        return t('learn.not-started');\n      }\n      if (isBlockCompleted) {\n        return t('learn.completed');\n      }\n      return `${percentageCompleted}% ${t('learn.completed')}`;\n    };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "806747ea0544af38df390f5ca9b37790",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "const percentageCompleted = Math.floor( (completedCount / challenges.length) * 100 ); // since the Blocks are not components, we need link to exist even if it's // not being used to render anything const link = challenges[0]?.fields.slug || ''; const blockLayout = challenges[0]?.blockLayout; const isGridBlock = blockLayout === BlockLayouts.ChallengeGrid; const isEmptyBlock = !challenges.length; const courseCompletionStatus = () => { if (completedCount === 0) { return t('learn.not-started'); } if (isBlockCompleted) { return t('learn.completed'); } return `${percentageCompleted}% ${t('learn.completed')}`; };\n\n/**\n     * LegacyChallengeListBlock displays challenges in a list.\n     * This layout is used in backend blocks, The Odin Project blocks, and blocks in legacy certification.\n     * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-javascript\n     */\n    const LegacyChallengeListBlock = (\n      <ScrollableAnchor id={block}>\n        <div className={`block ${isExpanded ? 'open' : ''}`}>\n          <div className='block-header'>\n            <h3 className='big-block-title'>{blockTitle}</h3>\n            {blockType && <BlockLabel blockType={blockType} />}\n            {!isAudited && (\n              <div className='block-cta-wrapper'>\n                <Link\n                  className='block-title-translation-cta'\n                  to={t('links:help-translate-link-url')}\n                >\n                  {t('misc.translation-pending')}\n                </Link>\n              </div>\n            )}\n          </div>\n          <BlockIntros intros={blockIntroArr} />\n          <button\n            aria-expanded={isExpanded}\n            className='map-title'\n            onClick={() => {\n              this.handleBlockClick();\n            }}\n          >\n            <Caret />\n            <div className='course-title'>\n              {`${isExpanded ? collapseText : expandText}`}{' '}\n              <span className='sr-only'>{blockTitle}</span>\n            </div>\n            <div className='map-title-completed course-title'>\n              <CheckMark isCompleted={isBlockCompleted} />\n              <span aria-hidden='true'>{`${completedCount}/${challenges.length}`}</span>\n              <span className='sr-only'>\n                ,{' '}\n                {t('learn.challenges-completed', {\n                  completedCount,\n                  totalChallenges: challenges.length\n                })}\n              </span>\n            </div>\n          </button>\n          {isExpanded && (\n            <Challenges\n              challenges={extendedChallenges}\n              isProjectBlock={isProjectBlock}\n            />\n          )}\n        </div>\n      </ScrollableAnchor>\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "92018b761bdc8e84085ac7c6dbb4ef28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "{blockType && <BlockLabel blockType={blockType} />} {!isAudited && ( <div className='block-cta-wrapper'> <Link className='block-title-translation-cta' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')} </Link> </div> )} </div> <BlockIntros intros={blockIntroArr} /> <button aria-expanded={isExpanded} className='map-title' onClick={() => { this.handleBlockClick(); }} > <Caret /> <div className='course-title'> {`${isExpanded ? collapseText : expandText}`}{' '} <span className='sr-only'>{blockTitle}</span> </div> <div className='map-title-completed course-title'> <CheckMark isCompleted={isBlockCompleted} /> <span aria-hidden='true'>{`${completedCount}/${challenges.length}`}</span> <span className='sr-only'> ,{' '} {t('learn.challenges-completed', { completedCount, totalChallenges: challenges.length })} </span> </div> </button> {isExpanded && ( <Challenges challenges={extendedChallenges} isProjectBlock={isProjectBlock} /> )} </div> </ScrollableAnchor> );\n\n/**\n     * ProjectListBlock displays a list of certification projects.\n     * This layout is used in legacy certifications.\n     * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#javascript-algorithms-and-data-structures-projects\n     */\n    const ProjectListBlock = (\n      <ScrollableAnchor id={block}>\n        <div className='block'>\n          <div className='block-header'>\n            <h3 className='big-block-title'>{blockTitle}</h3>\n            {blockType && <BlockLabel blockType={blockType} />}\n            {!isAudited && (\n              <div className='block-cta-wrapper'>\n                <Link\n                  className='block-title-translation-cta'\n                  to={t('links:help-translate-link-url')}\n                >\n                  {t('misc.translation-pending')}\n                </Link>\n              </div>\n            )}\n          </div>\n          <BlockIntros intros={blockIntroArr} />\n          <Challenges\n            challenges={extendedChallenges}\n            isProjectBlock={isProjectBlock}\n          />\n        </div>\n      </ScrollableAnchor>\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "d49ff5d67963bb8e5cfb43033d84bb59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "</span> </div> </button> {isExpanded && ( <Challenges challenges={extendedChallenges} isProjectBlock={isProjectBlock} /> )} </div> </ScrollableAnchor> ); /** * ProjectListBlock displays a list of certification projects. * This layout is used in legacy certifications. * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#javascript-algorithms-and-data-structures-projects */ const ProjectListBlock = ( <ScrollableAnchor id={block}> <div className='block'> <div className='block-header'> <h3 className='big-block-title'>{blockTitle}</h3> {blockType && <BlockLabel blockType={blockType} />} {!isAudited && ( <div className='block-cta-wrapper'> <Link className='block-title-translation-cta' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')} </Link> </div> )} </div> <BlockIntros intros={blockIntroArr} /> <Challenges challenges={extendedChallenges} isProjectBlock={isProjectBlock} /> </div> </ScrollableAnchor> );\n\n/**\n     * LegacyChallengeGridBlock displays challenges in a grid.\n     * This layout is used for step-based blocks.\n     * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-javascript-by-building-a-role-playing-game\n     */\n    const LegacyChallengeGridBlock = (\n      <ScrollableAnchor id={block}>\n        <div className={`block block-grid ${isExpanded ? 'open' : ''}`}>\n          <BlockHeader\n            blockDashed={block}\n            blockTitle={blockTitle}\n            blockType={blockType}\n            completedCount={completedCount}\n            courseCompletionStatus={courseCompletionStatus()}\n            handleClick={this.handleBlockClick}\n            isCompleted={isBlockCompleted}\n            isExpanded={isExpanded}\n            percentageCompleted={percentageCompleted}\n          />\n\n{isExpanded && (\n            <>\n              {!isAudited && (\n                <div className='tags-wrapper'>\n                  <Link\n                    className='cert-tag'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "c7edddf94fc3c9805b270869f920e45b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "</Link> </div> )} </div> <BlockIntros intros={blockIntroArr} /> <Challenges challenges={extendedChallenges} isProjectBlock={isProjectBlock} /> </div> </ScrollableAnchor> ); /** * LegacyChallengeGridBlock displays challenges in a grid. * This layout is used for step-based blocks. * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-javascript-by-building-a-role-playing-game */ const LegacyChallengeGridBlock = ( <ScrollableAnchor id={block}> <div className={`block block-grid ${isExpanded ? 'open' : ''}`}> <BlockHeader blockDashed={block} blockTitle={blockTitle} blockType={blockType} completedCount={completedCount} courseCompletionStatus={courseCompletionStatus()} handleClick={this.handleBlockClick} isCompleted={isBlockCompleted} isExpanded={isExpanded} percentageCompleted={percentageCompleted} /> {isExpanded && ( <> {!isAudited && ( <div className='tags-wrapper'> <Link className='cert-tag' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')} </Link> </div> )}\n\n<div id={`${block}-panel`}>\n                <BlockIntros intros={blockIntroArr} />\n                <Challenges\n                  challenges={extendedChallenges}\n                  isProjectBlock={isProjectBlock}\n                  isGridMap={true}\n                  blockTitle={blockTitle}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </ScrollableAnchor>\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "b0ae9f462c422b9475f20f3a4806eb19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "displays challenges in a grid. * This layout is used for step-based blocks. * Example: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-javascript-by-building-a-role-playing-game */ const LegacyChallengeGridBlock = ( <ScrollableAnchor id={block}> <div className={`block block-grid ${isExpanded ? 'open' : ''}`}> <BlockHeader blockDashed={block} blockTitle={blockTitle} blockType={blockType} completedCount={completedCount} courseCompletionStatus={courseCompletionStatus()} handleClick={this.handleBlockClick} isCompleted={isBlockCompleted} isExpanded={isExpanded} percentageCompleted={percentageCompleted} /> {isExpanded && ( <> {!isAudited && ( <div className='tags-wrapper'> <Link className='cert-tag' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')} </Link> </div> )} <div id={`${block}-panel`}> <BlockIntros intros={blockIntroArr} /> <Challenges challenges={extendedChallenges} isProjectBlock={isProjectBlock} isGridMap={true} blockTitle={blockTitle} /> </div> </> )} </div> </ScrollableAnchor> );\n\n/**\n     * LegacyLinkBlock displays the block as a single link.\n     * This layout is used if the block has a single challenge.\n     * Example: https://www.freecodecamp.org/learn/2022/responsive-web-design/#build-a-survey-form-project\n     */\n    const LegacyLinkBlock = (\n      <ScrollableAnchor id={block}>\n        <div className='block block-grid grid-project-block'>\n          <div className='tags-wrapper'>\n            <span className='cert-tag' aria-hidden='true'>\n              {t('misc.certification-project')}\n            </span>\n            {!isAudited && (\n              <Link\n                className='cert-tag'\n                to={t('links:help-translate-link-url')}\n              >\n                {t('misc.translation-pending')}{' '}\n                <span className='sr-only'>\n                  {blockTitle} {t('misc.certification-project')}\n                </span>\n              </Link>\n            )}\n          </div>\n          <div className='title-wrapper map-title'>\n            {blockType && <BlockLabel blockType={blockType} />}\n            <h3 className='block-grid-title'>\n              <Link\n                className='block-header'\n                onClick={() => {\n                  this.handleBlockClick();\n                }}\n                to={link}\n              >\n                <CheckMark isCompleted={isBlockCompleted} />\n                {blockTitle}{' '}\n                <span className='sr-only'>\n                  {isBlockCompleted\n                    ? `${t('misc.certification-project')}, ${t('learn.completed')}`\n                    : `${t('misc.certification-project')}, ${t('learn.not-completed')}`}\n                </span>\n              </Link>\n            </h3>\n          </div>\n          <BlockIntros intros={blockIntroArr} />\n        </div>\n      </ScrollableAnchor>\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "3116a76343308755eee52d0a0f5d882f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "LegacyLinkBlock = ( <ScrollableAnchor id={block}> <div className='block block-grid grid-project-block'> <div className='tags-wrapper'> <span className='cert-tag' aria-hidden='true'> {t('misc.certification-project')} </span> {!isAudited && ( <Link className='cert-tag' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')}{' '} <span className='sr-only'> {blockTitle} {t('misc.certification-project')} </span> </Link> )} </div> <div className='title-wrapper map-title'> {blockType && <BlockLabel blockType={blockType} />} <h3 className='block-grid-title'> <Link className='block-header' onClick={() => { this.handleBlockClick(); }} to={link} > <CheckMark isCompleted={isBlockCompleted} /> {blockTitle}{' '} <span className='sr-only'> {isBlockCompleted ? `${t('misc.certification-project')}, ${t('learn.completed')}` : `${t('misc.certification-project')}, ${t('learn.not-completed')}`} </span> </Link> </h3> </div> <BlockIntros intros={blockIntroArr} /> </div> </ScrollableAnchor> );\n\n/**\n     * AccordionBlock is used as the block layout in new accordion style superblocks.\n     */\n    const AccordionBlock = (\n      <>\n        <ScrollableAnchor id={block}>\n          <span className='hide-scrollable-anchor'></span>\n        </ScrollableAnchor>\n        <div\n          className={`block block-grid challenge-grid-block ${isExpanded ? 'open' : ''}`}\n        >\n          <BlockHeader\n            blockDashed={block}\n            blockTitle={blockTitle}\n            blockType={blockType}\n            completedCount={completedCount}\n            courseCompletionStatus={courseCompletionStatus()}\n            handleClick={this.handleBlockClick}\n            isCompleted={isBlockCompleted}\n            isExpanded={isExpanded}\n            percentageCompleted={percentageCompleted}\n            blockIntroArr={blockIntroArr}\n          />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "bdddbeb24f7c92a6f72498c445a07413",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "{ this.handleBlockClick(); }} to={link} > <CheckMark isCompleted={isBlockCompleted} /> {blockTitle}{' '} <span className='sr-only'> {isBlockCompleted ? `${t('misc.certification-project')}, ${t('learn.completed')}` : `${t('misc.certification-project')}, ${t('learn.not-completed')}`} </span> </Link> </h3> </div> <BlockIntros intros={blockIntroArr} /> </div> </ScrollableAnchor> ); /** * AccordionBlock is used as the block layout in new accordion style superblocks. */ const AccordionBlock = ( <> <ScrollableAnchor id={block}> <span className='hide-scrollable-anchor'></span> </ScrollableAnchor> <div className={`block block-grid challenge-grid-block ${isExpanded ? 'open' : ''}`} > <BlockHeader blockDashed={block} blockTitle={blockTitle} blockType={blockType} completedCount={completedCount} courseCompletionStatus={courseCompletionStatus()} handleClick={this.handleBlockClick} isCompleted={isBlockCompleted} isExpanded={isExpanded} percentageCompleted={percentageCompleted} blockIntroArr={blockIntroArr} />\n\n{isExpanded && (\n            <div className='accordion-block-expanded'>\n              {!isAudited && (\n                <div className='tags-wrapper'>\n                  <Link\n                    className='cert-tag'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}\n              <div\n                id={`${block}-panel`}\n                className={isGridBlock ? 'challenge-grid-block-panel' : ''}\n              >\n                <Challenges\n                  challenges={extendedChallenges}\n                  isProjectBlock={false}\n                  isGridMap={isGridBlock}\n                  blockTitle={blockTitle}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </>\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "457f2353fbdf11cad1b60cd492e41ddc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
    "source_type": "git_repo",
    "title": "block",
    "content": "in new accordion style superblocks. */ const AccordionBlock = ( <> <ScrollableAnchor id={block}> <span className='hide-scrollable-anchor'></span> </ScrollableAnchor> <div className={`block block-grid challenge-grid-block ${isExpanded ? 'open' : ''}`} > <BlockHeader blockDashed={block} blockTitle={blockTitle} blockType={blockType} completedCount={completedCount} courseCompletionStatus={courseCompletionStatus()} handleClick={this.handleBlockClick} isCompleted={isBlockCompleted} isExpanded={isExpanded} percentageCompleted={percentageCompleted} blockIntroArr={blockIntroArr} /> {isExpanded && ( <div className='accordion-block-expanded'> {!isAudited && ( <div className='tags-wrapper'> <Link className='cert-tag' to={t('links:help-translate-link-url')} > {t('misc.translation-pending')} </Link> </div> )} <div id={`${block}-panel`} className={isGridBlock ? 'challenge-grid-block-panel' : ''} > <Challenges challenges={extendedChallenges} isProjectBlock={false} isGridMap={isGridBlock} blockTitle={blockTitle} /> </div> </div> )} </div> </> );\n\nconst layoutToComponent = {\n      [BlockLayouts.ChallengeGrid]: AccordionBlock,\n      [BlockLayouts.ChallengeList]: AccordionBlock,\n      [BlockLayouts.Link]: AccordionBlock,\n      [BlockLayouts.ProjectList]: ProjectListBlock,\n      [BlockLayouts.LegacyLink]: LegacyLinkBlock,\n      [BlockLayouts.LegacyChallengeList]: LegacyChallengeListBlock,\n      [BlockLayouts.LegacyChallengeGrid]: LegacyChallengeGridBlock,\n      [BlockLayouts.DialogueGrid]: LegacyChallengeGridBlock\n    };\n\nreturn (\n      !isEmptyBlock && (\n        <>\n          {layoutToComponent[blockLayout]}\n          {!chapterBasedSuperBlocks.includes(superBlock) && (\n            <Spacer size='xs' />\n          )}\n        </>\n      )\n    );\n  }\n}\n\nBlock.displayName = 'Block';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(Block));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14102,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\block.tsx",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "08726053c85e8248adc1d9f06746e89e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\cert-challenge.tsx",
    "source_type": "git_repo",
    "title": "cert-challenge",
    "content": "import React, { useState, useEffect } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Button } from '@freecodecamp/ui';\n\nimport {\n  certSlugTypeMap,\n  superBlockCertTypeMap\n} from '../../../../../shared/config/certification-settings';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\n\nimport {\n  isSignedInSelector,\n  userFetchStateSelector\n} from '../../../redux/selectors';\nimport { User } from '../../../redux/prop-types';\nimport {\n  type CertTitle,\n  liveCerts\n} from '../../../../config/cert-and-project-map';\nimport { getCertifications } from '../../../components/profile/components/utils/certification';\n\ninterface CertChallengeProps {\n  // TODO: create enum/reuse SuperBlocks enum somehow\n  certification: string;\n  fetchState: {\n    pending: boolean;\n    complete: boolean;\n    errored: boolean;\n    error: null | string;\n  };\n  isSignedIn: boolean;\n  superBlock: SuperBlocks;\n  title: CertTitle;\n  user: User;\n}\n\nconst mapStateToProps = (state: unknown) => {\n  return createSelector(\n    userFetchStateSelector,\n    isSignedInSelector,\n    (fetchState: CertChallengeProps['fetchState'], isSignedIn) => ({\n      fetchState,\n      isSignedIn\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst CertChallenge = ({\n  superBlock,\n  title,\n  fetchState,\n  isSignedIn,\n  user\n}: CertChallengeProps): JSX.Element => {\n  const { t } = useTranslation();\n  const [isCertified, setIsCertified] = useState(false);\n  const [userLoaded, setUserLoaded] = useState(false);\n\nconst { currentCerts } = getCertifications(user);\n  const { username } = user;\n\nconst cert = liveCerts.find(x => x.title === title);\n  if (!cert) throw Error(`Certification ${title} not found`);\n  const certSlug = cert.certSlug;\n\nuseEffect(() => {\n    const { pending, complete } = fetchState;\n\nif (complete && !pending) {\n      setUserLoaded(true);\n    }\n  }, [fetchState]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3090,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\cert-challenge.tsx",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b939973925bf0d81d159339b0961584d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\cert-challenge.tsx",
    "source_type": "git_repo",
    "title": "cert-challenge",
    "content": "superBlock, title, fetchState, isSignedIn, user }: CertChallengeProps): JSX.Element => { const { t } = useTranslation(); const [isCertified, setIsCertified] = useState(false); const [userLoaded, setUserLoaded] = useState(false); const { currentCerts } = getCertifications(user); const { username } = user; const cert = liveCerts.find(x => x.title === title); if (!cert) throw Error(`Certification ${title} not found`); const certSlug = cert.certSlug; useEffect(() => { const { pending, complete } = fetchState; if (complete && !pending) { setUserLoaded(true); } }, [fetchState]);\n\nconst certSlugTypeMapTyped: { [key: string]: string } = certSlugTypeMap;\n  const superBlockCertTypeMapTyped: { [key: string]: string } =\n    superBlockCertTypeMap;\n\nuseEffect(() => {\n    setIsCertified(\n      currentCerts?.find(\n        (cert: { certSlug: string }) =>\n          certSlugTypeMapTyped[cert.certSlug] ===\n          superBlockCertTypeMapTyped[superBlock]\n      )?.show ?? false\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentCerts]);\n\nconst certLocation = `/certification/${username}/${certSlug}`;\n\nreturn (\n    <div>\n      {isSignedIn && (\n        <Button\n          block={true}\n          variant='primary'\n          href={isCertified ? certLocation : `/settings#cert-${certSlug}`}\n        >\n          {isCertified && userLoaded\n            ? t('buttons.show-cert')\n            : t('buttons.go-to-settings')}{' '}\n          <span className='sr-only'>{title}</span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nCertChallenge.displayName = 'CertChallenge';\n\nexport default connect(mapStateToProps)(withTranslation()(CertChallenge));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3090,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\cert-challenge.tsx",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c79dd1bb7a69b9a226b074457c59cba2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
    "source_type": "git_repo",
    "title": "challenges",
    "content": "import React from 'react';\nimport { withTranslation, useTranslation } from 'react-i18next';\n\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport { Link } from '../../../components/helpers';\nimport { ButtonLink } from '../../../components/helpers/button-link';\n\ninterface ChallengeInfo {\n  isCompleted: boolean;\n  fields: { slug: string };\n  dashedName: string;\n  title: string;\n  stepNumber: number;\n  superBlock: SuperBlocks;\n  challengeType: number;\n}\n\ninterface Challenges {\n  challenges: ChallengeInfo[];\n  isProjectBlock: boolean;\n  isGridMap?: boolean;\n  blockTitle?: string | null;\n}\n\nconst CheckMark = ({ isCompleted }: { isCompleted: boolean }) =>\n  isCompleted ? <GreenPass /> : <GreenNotCompleted />;\n\nconst ListChallenge = ({ challenge }: { challenge: ChallengeInfo }) => (\n  <Link to={challenge.fields.slug}>\n    <span>\n      <CheckMark isCompleted={challenge.isCompleted} />\n    </span>\n    {challenge.title}\n  </Link>\n);\n\nconst CertChallenge = ({ challenge }: { challenge: ChallengeInfo }) => (\n  <Link to={challenge.fields.slug}>\n    {challenge.title}\n    <span className='map-project-checkmark'>\n      <CheckMark isCompleted={challenge.isCompleted} />\n    </span>\n  </Link>\n);\n\n// Step or Task challenge\nconst GridChallenge = ({ challenge }: { challenge: ChallengeInfo }) => {\n  const { t } = useTranslation();\n\nreturn (\n    <Link\n      to={challenge.fields.slug}\n      className={`map-grid-item ${\n        +challenge.isCompleted ? 'challenge-completed' : ''\n      }`}\n    >\n      <span className='sr-only'>\n        {challenge.superBlock === SuperBlocks.A2English\n          ? t('aria.task')\n          : t('aria.step')}\n      </span>\n      <span>{challenge.stepNumber}</span>\n      <span className='sr-only'>\n        {challenge.isCompleted ? t('icons.passed') : t('icons.not-passed')}\n      </span>\n    </Link>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4748,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c5663a7f37f8db4b6bf64160ba0cf405",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
    "source_type": "git_repo",
    "title": "challenges",
    "content": "}: { challenge: ChallengeInfo }) => ( <Link to={challenge.fields.slug}> {challenge.title} <span className='map-project-checkmark'> <CheckMark isCompleted={challenge.isCompleted} /> </span> </Link> ); // Step or Task challenge const GridChallenge = ({ challenge }: { challenge: ChallengeInfo }) => { const { t } = useTranslation(); return ( <Link to={challenge.fields.slug} className={`map-grid-item ${ +challenge.isCompleted ? 'challenge-completed' : '' }`} > <span className='sr-only'> {challenge.superBlock === SuperBlocks.A2English ? t('aria.task') : t('aria.step')} </span> <span>{challenge.stepNumber}</span> <span className='sr-only'> {challenge.isCompleted ? t('icons.passed') : t('icons.not-passed')} </span> </Link> ); };\n\nfunction Challenges({\n  challenges,\n  isProjectBlock,\n  isGridMap = false,\n  blockTitle\n}: Challenges): JSX.Element {\n  const { t } = useTranslation();\n\nconst firstIncompleteChallenge = challenges.find(\n    challenge => !challenge.isCompleted\n  );\n\nconst isChallengeStarted = !!challenges.find(\n    challenge => challenge.isCompleted\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4748,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "39bdd99bdb3ae7dea16f4dbc17f5009f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
    "source_type": "git_repo",
    "title": "challenges",
    "content": "{ const { t } = useTranslation(); return ( <Link to={challenge.fields.slug} className={`map-grid-item ${ +challenge.isCompleted ? 'challenge-completed' : '' }`} > <span className='sr-only'> {challenge.superBlock === SuperBlocks.A2English ? t('aria.task') : t('aria.step')} </span> <span>{challenge.stepNumber}</span> <span className='sr-only'> {challenge.isCompleted ? t('icons.passed') : t('icons.not-passed')} </span> </Link> ); }; function Challenges({ challenges, isProjectBlock, isGridMap = false, blockTitle }: Challenges): JSX.Element { const { t } = useTranslation(); const firstIncompleteChallenge = challenges.find( challenge => !challenge.isCompleted ); const isChallengeStarted = !!challenges.find( challenge => challenge.isCompleted );\n\nreturn isGridMap ? (\n    <>\n      {firstIncompleteChallenge && (\n        <div className='challenge-jump-link'>\n          <ButtonLink size='small' href={firstIncompleteChallenge.fields.slug}>\n            {!isChallengeStarted\n              ? t('buttons.start-project')\n              : t('buttons.resume-project')}{' '}\n            {blockTitle && <span className='sr-only'>{blockTitle}</span>}\n          </ButtonLink>\n        </div>\n      )}\n      <nav\n        aria-label={\n          blockTitle\n            ? challenges[0].superBlock === SuperBlocks.A2English\n              ? t('aria.dialogues-and-tasks-for', { blockTitle })\n              : t('aria.steps-for', { blockTitle })\n            : t('aria.steps')\n        }\n      >\n        <ul className={`map-challenges-ul map-challenges-grid`}>\n          {challenges.map(challenge => (\n            <li\n              className={`map-challenge-title ${\n                isProjectBlock\n                  ? 'map-project-wrap'\n                  : challenge.challengeType === challengeTypes.dialogue\n                    ? 'map-dialogue-wrap'\n                    : 'map-challenge-wrap'\n              }`}\n              id={challenge.dashedName}\n              key={`map-challenge ${challenge.fields.slug}`}\n            >\n              {!isProjectBlock &&\n              challenge.challengeType !== challengeTypes.dialogue ? (\n                <GridChallenge challenge={challenge} />\n              ) : challenge.challengeType === challengeTypes.dialogue ? (\n                <ListChallenge challenge={challenge} />\n              ) : (\n                <CertChallenge challenge={challenge} />\n              )}\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </>\n  ) : (\n    <ul className={`map-challenges-ul`}>\n      {challenges.map(challenge => (\n        <li\n          className={`map-challenge-title ${\n            isProjectBlock ? 'map-project-wrap' : 'map-challenge-wrap'\n          }`}\n          id={challenge.dashedName}\n          key={'map-challenge' + challenge.fields.slug}\n        >\n          {!isProjectBlock ? (\n            <ListChallenge challenge={challenge} />\n          ) : (\n            <CertChallenge challenge={challenge} />\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4748,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
      "source_type": "git_repo"
    },
    "token_count": 639,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bec3d52d312c5a66c5e5cb4c4ff7752b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
    "source_type": "git_repo",
    "title": "challenges",
    "content": "id={challenge.dashedName} key={`map-challenge ${challenge.fields.slug}`} > {!isProjectBlock && challenge.challengeType !== challengeTypes.dialogue ? ( <GridChallenge challenge={challenge} /> ) : challenge.challengeType === challengeTypes.dialogue ? ( <ListChallenge challenge={challenge} /> ) : ( <CertChallenge challenge={challenge} /> )} </li> ))} </ul> </nav> </> ) : ( <ul className={`map-challenges-ul`}> {challenges.map(challenge => ( <li className={`map-challenge-title ${ isProjectBlock ? 'map-project-wrap' : 'map-challenge-wrap' }`} id={challenge.dashedName} key={'map-challenge' + challenge.fields.slug} > {!isProjectBlock ? ( <ListChallenge challenge={challenge} /> ) : ( <CertChallenge challenge={challenge} /> )} </li> ))} </ul> ); }\n\nChallenges.displayName = 'Challenges';\n\nexport default withTranslation()(Challenges);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4748,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\challenges.tsx",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "01d21159c04d4d13866461a571e0b719",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\check-mark.tsx",
    "source_type": "git_repo",
    "title": "check-mark",
    "content": "import React from 'react';\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\n\nfunction CheckMark({ isCompleted }: { isCompleted: boolean }): JSX.Element {\n  return isCompleted ? (\n    <GreenPass hushScreenReaderText />\n  ) : (\n    <GreenNotCompleted hushScreenReaderText />\n  );\n}\n\nexport default CheckMark;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 391,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\check-mark.tsx",
      "source_type": "git_repo"
    },
    "token_count": 86,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "612c0eca15861a56144b18ec5fd0fbaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\help-translate.tsx",
    "source_type": "git_repo",
    "title": "help-translate",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { isAuditedSuperBlock } from '../../../../../shared/utils/is-audited';\nimport { Link } from '../../../components/helpers';\n\nimport envData from '../../../../config/env.json';\n\nconst { clientLocale } = envData;\n\ninterface HelpTranslateProps {\n  superBlock: SuperBlocks;\n}\n\nfunction HelpTranslate({ superBlock }: HelpTranslateProps): JSX.Element | null {\n  const { t } = useTranslation();\n\nif (isAuditedSuperBlock(clientLocale, superBlock)) {\n    return null;\n  }\n\nreturn (\n    <div style={{ textAlign: 'center' }}>\n      <Spacer size='m' />\n      <p style={{ marginBottom: 0 }}>{t('learn.help-translate')} </p>\n      <Link\n        external={true}\n        sameTab={false}\n        to={t('links:help-translate-link-url')}\n      >\n        {t('learn.help-translate-link')}\n      </Link>\n    </div>\n  );\n}\n\nexport default HelpTranslate;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1030,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\help-translate.tsx",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cdf933856a67770de979886b39f7af31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\legacy-links.tsx",
    "source_type": "git_repo",
    "title": "legacy-links",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport {\n  isOldRespCert,\n  isRelationalDbCert,\n  isExamCert\n} from '../../../utils/is-a-cert';\nimport { Link } from '../../../components/helpers';\nimport { CodeAllyDown } from '../../../components/growth-book/codeally-down';\n\nimport envData from '../../../../config/env.json';\nimport { GitpodNote } from '../../../components/growth-book/gitpod-note';\n\nconst { clientLocale } = envData;\n\ninterface LegacyLinksProps {\n  superBlock: SuperBlocks;\n}\n\nfunction LegacyLinks({ superBlock }: LegacyLinksProps): JSX.Element {\n  const { t } = useTranslation();\n\nif (isOldRespCert(superBlock)) {\n    return (\n      <Alert variant='info'>\n        <p>\n          {t('intro:misc-text.legacy-desc')}{' '}\n          <Link sameTab={false} to={`/learn/2022/responsive-web-design`}>\n            {t('intro:misc-text.legacy-go-back')}\n          </Link>\n        </p>\n      </Alert>\n    );\n  } else if (isRelationalDbCert(superBlock)) {\n    return (\n      <>\n        <CodeAllyDown />\n        {clientLocale != 'english' && (\n          <Alert variant='info'>\n            <p>{t('intro:misc-text.english-only')}</p>\n          </Alert>\n        )}\n      </>\n    );\n  } else if (isExamCert(superBlock) && clientLocale != 'english') {\n    return (\n      <Alert variant='info'>\n        <p>{t('intro:misc-text.exam-english-only')}</p>\n      </Alert>\n    );\n  } else {\n    return <GitpodNote superBlock={superBlock} />;\n  }\n}\n\nexport default LegacyLinks;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1610,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\legacy-links.tsx",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "58338cbf1b40deb01e20bf6838cddc52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": ".super-block-accordion {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0;\n}\n\n.super-block-accordion ul {\n  padding: 0;\n}\n\n.super-block-accordion li {\n  list-style-type: none;\n}\n\n.super-block-accordion li a {\n  text-decoration: none;\n}\n\n.super-block-accordion .chapter,\n.super-block-accordion .link-block {\n  background-color: var(--primary-background);\n}\n\n.super-block-accordion .chapter-button {\n  border: none;\n  background-color: transparent;\n  width: 100%;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.super-block-accordion .chapter-button .chapter-button-left {\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n  font-size: 1.5em;\n}\n\n.super-block-accordion .chapter-button .chapter-button-right {\n  display: flex;\n  align-items: center;\n  column-gap: 15px;\n}\n\n.super-block-accordion .dropdown-wrap,\n.super-block-accordion .checkmark-wrap {\n  position: relative;\n  top: 2px;\n}\n\n.super-block-accordion .chapter-checkmark-wrap {\n  right: 5px;\n}\n\n.super-block-accordion .module-button {\n  border: none;\n  background-color: transparent;\n  width: 100%;\n  font-size: 1.25em;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.super-block-accordion .module-button-left,\n.super-block-accordion .module-button-right {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.super-block-accordion .module-steps {\n  font-size: 0.75em;\n}\n\n.super-block-accordion .chapter-button:hover,\n.super-block-accordion .module-button:hover {\n  background-color: var(--tertiary-background);\n  color: var(--primary-text);\n}\n\n.super-block-accordion .chapter-button[aria-expanded='false'] .dropdown-icon,\n.super-block-accordion .module-button[aria-expanded='false'] .dropdown-icon {\n  transform: rotate(180deg);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3835,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "50384e5a0dca8b3d7048db5832483f5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": ".super-block-accordion .dropdown-wrap, .super-block-accordion .checkmark-wrap { position: relative; top: 2px; } .super-block-accordion .chapter-checkmark-wrap { right: 5px; } .super-block-accordion .module-button { border: none; background-color: transparent; width: 100%; font-size: 1.25em; padding: 16px; display: flex; align-items: center; justify-content: space-between; gap: 10px; } .super-block-accordion .module-button-left, .super-block-accordion .module-button-right { display: flex; align-items: center; gap: 10px; } .super-block-accordion .module-steps { font-size: 0.75em; } .super-block-accordion .chapter-button:hover, .super-block-accordion .module-button:hover { background-color: var(--tertiary-background); color: var(--primary-text); } .super-block-accordion .chapter-button[aria-expanded='false'] .dropdown-icon, .super-block-accordion .module-button[aria-expanded='false'] .dropdown-icon { transform: rotate(180deg); }\n\n.super-block-accordion .chapter-button[aria-expanded='true'] .dropdown-icon,\n.super-block-accordion .module-button[aria-expanded='true'] .dropdown-icon {\n  transform: rotate(0deg);\n}\n\n.super-block-accordion .chapter-panel {\n  padding: 0 16px;\n}\n\n.super-block-accordion .module-panel {\n  padding: 0 24px;\n}\n\n.super-block-accordion .chapter-panel > li {\n  border-bottom: 4px solid var(--secondary-background);\n}\n\n.super-block-accordion .chapter-panel > li:last-child {\n  border-bottom: none;\n}\n\n.super-block-accordion .chapter-panel > li:last-child .block-grid,\n.super-block-accordion .module-panel > li:last-child .block-grid {\n  border-bottom: 0;\n}\n\n.super-block-accordion .badge {\n  color: var(--quaternary-color);\n  border: 1px solid var(--quaternary-color);\n  align-self: center;\n  height: fit-content;\n  padding: 1px 6px 2px;\n  font-size: 0.85rem;\n  position: relative;\n  top: 1px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3835,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "532938a1c9ddbef9d892178edbeddc81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": ".module-button[aria-expanded='true'] .dropdown-icon { transform: rotate(0deg); } .super-block-accordion .chapter-panel { padding: 0 16px; } .super-block-accordion .module-panel { padding: 0 24px; } .super-block-accordion .chapter-panel > li { border-bottom: 4px solid var(--secondary-background); } .super-block-accordion .chapter-panel > li:last-child { border-bottom: none; } .super-block-accordion .chapter-panel > li:last-child .block-grid, .super-block-accordion .module-panel > li:last-child .block-grid { border-bottom: 0; } .super-block-accordion .badge { color: var(--quaternary-color); border: 1px solid var(--quaternary-color); align-self: center; height: fit-content; padding: 1px 6px 2px; font-size: 0.85rem; position: relative; top: 1px; }\n\n.super-block-accordion .coming-soon-module {\n  font-size: 1.25rem;\n}\n\n.super-block-accordion .module-intro {\n  margin-left: 17px;\n  margin-top: 16px;\n}\n\n.full-width-container {\n  position: relative;\n  left: 50%;\n  right: 50%;\n  margin-left: -50vw;\n  margin-right: -50vw;\n  width: 100vw;\n}\n\n.super-benefits-container {\n  background-color: var(--gray-75);\n  color: var(--gray-15);\n  padding-inline: 15px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n}\n\n.super-block-intro-page .btn-cta-big {\n  max-width: 350px;\n}\n\n.super-block-benefits > div {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n}\n\n.super-block-benefits p {\n  margin: 0;\n}\n\n.super-block-benefits {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 30px;\n}\n\n.super-block-benefits svg path,\n.super-block-benefits p {\n  fill: var(--gray-15);\n}\n\n.super-block-benefits h3 {\n  color: var(--gray05);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3835,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2de4b2d1b5c42eb6fdee75eb472f28b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "relative; left: 50%; right: 50%; margin-left: -50vw; margin-right: -50vw; width: 100vw; } .super-benefits-container { background-color: var(--gray-75); color: var(--gray-15); padding-inline: 15px; display: flex; flex-direction: column; align-items: center; padding: 20px; } .super-block-intro-page .btn-cta-big { max-width: 350px; } .super-block-benefits > div { display: flex; align-items: flex-start; gap: 20px; } .super-block-benefits p { margin: 0; } .super-block-benefits { display: grid; grid-template-columns: 1fr; gap: 30px; } .super-block-benefits svg path, .super-block-benefits p { fill: var(--gray-15); } .super-block-benefits h3 { color: var(--gray05); }\n\n@media screen and (min-width: 700px) {\n  .super-block-benefits {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 30px;\n  }\n  .super-block-benefits svg {\n    margin-top: -10px;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 3835,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.css",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "679e29ffe316ff9cf53a46901de36dd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "import React, { ReactNode, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n// TODO: Add this component to freecodecamp/ui and remove this dependency\nimport { Disclosure } from '@headlessui/react';\n\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport DropDown from '../../../assets/icons/dropdown';\n// TODO: See if there's a nice way to incorporate the structure into data Gatsby\n// sources from the curriculum, rather than importing it directly.\nimport superBlockStructure from '../../../../../curriculum/superblock-structure/full-stack.json';\nimport { ChapterIcon } from '../../../assets/chapter-icon';\nimport { BlockLayouts, BlockTypes } from '../../../../../shared/config/blocks';\nimport { FsdChapters } from '../../../../../shared/config/chapters';\nimport { type Module } from '../../../../../shared/config/modules';\nimport envData from '../../../../config/env.json';\nimport Block from './block';\nimport CheckMark from './check-mark';\n\nimport './super-block-accordion.css';\n\nconst { showUpcomingChanges } = envData;\n\ninterface ChapterProps {\n  dashedName: string;\n  children: ReactNode;\n  comingSoon?: boolean;\n  isExpanded: boolean;\n  totalSteps: number;\n  completedSteps: number;\n  superBlock: SuperBlocks;\n}\n\ninterface ModuleProps {\n  dashedName: string;\n  children: ReactNode;\n  isExpanded: boolean;\n  totalSteps: number;\n  completedSteps: number;\n  superBlock: SuperBlocks;\n}\n\ninterface Challenge {\n  id: string;\n  block: string;\n  blockType: BlockTypes;\n  title: string;\n  fields: { slug: string };\n  dashedName: string;\n  challengeType: number;\n  blockLayout: BlockLayouts;\n  superBlock: SuperBlocks;\n}\n\ninterface SuperBlockAccordionProps {\n  challenges: Challenge[];\n  superBlock: SuperBlocks;\n  chosenBlock: string;\n  completedChallengeIds: string[];\n}\n\nconst modules = superBlockStructure.chapters.flatMap<Module>(\n  ({ modules }) => modules\n);\nconst chapters = superBlockStructure.chapters;\n\nconst isLinkModule = (name: string) => {\n  const module = modules.find(module => module.dashedName === name);\n\nreturn module?.moduleType === 'review';\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "b060672a63acb50acfbc9657d2546d2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "completedSteps: number; superBlock: SuperBlocks; } interface Challenge { id: string; block: string; blockType: BlockTypes; title: string; fields: { slug: string }; dashedName: string; challengeType: number; blockLayout: BlockLayouts; superBlock: SuperBlocks; } interface SuperBlockAccordionProps { challenges: Challenge[]; superBlock: SuperBlocks; chosenBlock: string; completedChallengeIds: string[]; } const modules = superBlockStructure.chapters.flatMap<Module>( ({ modules }) => modules ); const chapters = superBlockStructure.chapters; const isLinkModule = (name: string) => { const module = modules.find(module => module.dashedName === name); return module?.moduleType === 'review'; };\n\nconst getBlockToChapterMap = () => {\n  const blockToChapterMap = new Map<string, string>();\n  chapters.forEach(chapter => {\n    chapter.modules.forEach(module => {\n      module.blocks.forEach(block => {\n        blockToChapterMap.set(block.dashedName, chapter.dashedName);\n      });\n    });\n  });\n\nreturn blockToChapterMap;\n};\n\nconst getBlockToModuleMap = () => {\n  const blockToModuleMap = new Map<string, string>();\n  modules.forEach(module => {\n    module.blocks.forEach(block => {\n      blockToModuleMap.set(block.dashedName, module.dashedName);\n    });\n  });\n\nreturn blockToModuleMap;\n};\n\nconst blockToChapterMap = getBlockToChapterMap();\nconst blockToModuleMap = getBlockToModuleMap();\n\nconst Chapter = ({\n  dashedName,\n  children,\n  isExpanded,\n  comingSoon,\n  totalSteps,\n  completedSteps,\n  superBlock\n}: ChapterProps) => {\n  const { t } = useTranslation();\n  const isComplete = completedSteps === totalSteps;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "d513590148a3758bc242ea8346fd6497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "=> { chapter.modules.forEach(module => { module.blocks.forEach(block => { blockToChapterMap.set(block.dashedName, chapter.dashedName); }); }); }); return blockToChapterMap; }; const getBlockToModuleMap = () => { const blockToModuleMap = new Map<string, string>(); modules.forEach(module => { module.blocks.forEach(block => { blockToModuleMap.set(block.dashedName, module.dashedName); }); }); return blockToModuleMap; }; const blockToChapterMap = getBlockToChapterMap(); const blockToModuleMap = getBlockToModuleMap(); const Chapter = ({ dashedName, children, isExpanded, comingSoon, totalSteps, completedSteps, superBlock }: ChapterProps) => { const { t } = useTranslation(); const isComplete = completedSteps === totalSteps;\n\nreturn (\n    <Disclosure as='li' className='chapter' defaultOpen={isExpanded}>\n      <Disclosure.Button\n        className='chapter-button'\n        data-playwright-test-label='chapter-button'\n      >\n        <div className='chapter-button-left'>\n          <ChapterIcon\n            className='map-icon'\n            chapter={dashedName as FsdChapters}\n          />\n          {t(`intro:${superBlock}.chapters.${dashedName}`)}\n        </div>\n        <div className='chapter-button-right'>\n          {!comingSoon && (\n            <>\n              <span className='chapter-steps'>\n                {t('learn.steps-completed', {\n                  totalSteps,\n                  completedSteps\n                })}\n              </span>\n              <span className='checkmark-wrap chapter-checkmark-wrap'>\n                <CheckMark isCompleted={isComplete} />\n              </span>\n            </>\n          )}\n          <span className='dropdown-wrap'>\n            <DropDown />\n          </span>\n        </div>\n      </Disclosure.Button>\n      <Disclosure.Panel as='ul' className='chapter-panel'>\n        {children}\n      </Disclosure.Panel>\n    </Disclosure>\n  );\n};\n\nconst Module = ({\n  dashedName,\n  children,\n  isExpanded,\n  totalSteps,\n  completedSteps,\n  superBlock\n}: ModuleProps) => {\n  const { t } = useTranslation();\n  const isComplete = completedSteps === totalSteps;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "625ef51c1ab8bb350c5cfb2a79cb4bbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "data-playwright-test-label='chapter-button' > <div className='chapter-button-left'> <ChapterIcon className='map-icon' chapter={dashedName as FsdChapters} /> {t(`intro:${superBlock}.chapters.${dashedName}`)} </div> <div className='chapter-button-right'> {!comingSoon && ( <> <span className='chapter-steps'> {t('learn.steps-completed', { totalSteps, completedSteps })} </span> <span className='checkmark-wrap chapter-checkmark-wrap'> <CheckMark isCompleted={isComplete} /> </span> </> )} <span className='dropdown-wrap'> <DropDown /> </span> </div> </Disclosure.Button> <Disclosure.Panel as='ul' className='chapter-panel'> {children} </Disclosure.Panel> </Disclosure> ); }; const Module = ({ dashedName, children, isExpanded, totalSteps, completedSteps, superBlock }: ModuleProps) => { const { t } = useTranslation(); const isComplete = completedSteps === totalSteps;\n\nreturn (\n    <Disclosure as='li' defaultOpen={isExpanded}>\n      <Disclosure.Button className='module-button'>\n        <div className='module-button-left'>\n          <span className='dropdown-wrap'>\n            <DropDown />\n          </span>\n          {t(`intro:${superBlock}.modules.${dashedName}`)}\n        </div>\n        <div className='module-button-right'>\n          <span className='module-steps'>\n            {t('learn.steps-completed', {\n              totalSteps,\n              completedSteps\n            })}\n          </span>\n          <span className='checkmark-wrap'>\n            <CheckMark isCompleted={isComplete} />\n          </span>\n        </div>\n      </Disclosure.Button>\n      <Disclosure.Panel as='ul' className='module-panel'>\n        {children}\n      </Disclosure.Panel>\n    </Disclosure>\n  );\n};\n\nconst LinkBlock = ({\n  superBlock,\n  challenges\n}: {\n  superBlock: SuperBlocks;\n  challenges?: Challenge[];\n}) =>\n  challenges?.length ? (\n    <li className='link-block'>\n      <Block\n        block={challenges[0].block}\n        blockType={challenges[0].blockType}\n        challenges={challenges}\n        superBlock={superBlock}\n      />\n    </li>\n  ) : null;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "8e030f9ba109ce93b718f834bc5fc05d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "isComplete = completedSteps === totalSteps; return ( <Disclosure as='li' defaultOpen={isExpanded}> <Disclosure.Button className='module-button'> <div className='module-button-left'> <span className='dropdown-wrap'> <DropDown /> </span> {t(`intro:${superBlock}.modules.${dashedName}`)} </div> <div className='module-button-right'> <span className='module-steps'> {t('learn.steps-completed', { totalSteps, completedSteps })} </span> <span className='checkmark-wrap'> <CheckMark isCompleted={isComplete} /> </span> </div> </Disclosure.Button> <Disclosure.Panel as='ul' className='module-panel'> {children} </Disclosure.Panel> </Disclosure> ); }; const LinkBlock = ({ superBlock, challenges }: { superBlock: SuperBlocks; challenges?: Challenge[]; }) => challenges?.length ? ( <li className='link-block'> <Block block={challenges[0].block} blockType={challenges[0].blockType} challenges={challenges} superBlock={superBlock} /> </li> ) : null;\n\nexport const SuperBlockAccordion = ({\n  challenges,\n  superBlock,\n  chosenBlock,\n  completedChallengeIds\n}: SuperBlockAccordionProps) => {\n  const { t } = useTranslation();\n  const { allChapters } = useMemo(() => {\n    const populateBlocks = (blocks: { dashedName: string }[]) =>\n      blocks.map(block => {\n        const blockChallenges = challenges.filter(\n          ({ block: blockName }) => blockName === block.dashedName\n        );\n\nreturn {\n          name: block.dashedName,\n          blockType: blockChallenges[0]?.blockType ?? null,\n          challenges: blockChallenges\n        };\n      });\n\nconst allChapters = chapters.map(chapter => ({\n      name: chapter.dashedName,\n      comingSoon: chapter.comingSoon,\n      modules: chapter.modules.map((module: Module) => ({\n        name: module.dashedName,\n        comingSoon: module.comingSoon,\n        moduleType: module.moduleType,\n        blocks: populateBlocks(module.blocks)\n      }))\n    }));\n\nreturn { allChapters };\n  }, [challenges]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "95715e900166c3f935589ec591cde0f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "const { allChapters } = useMemo(() => { const populateBlocks = (blocks: { dashedName: string }[]) => blocks.map(block => { const blockChallenges = challenges.filter( ({ block: blockName }) => blockName === block.dashedName ); return { name: block.dashedName, blockType: blockChallenges[0]?.blockType ?? null, challenges: blockChallenges }; }); const allChapters = chapters.map(chapter => ({ name: chapter.dashedName, comingSoon: chapter.comingSoon, modules: chapter.modules.map((module: Module) => ({ name: module.dashedName, comingSoon: module.comingSoon, moduleType: module.moduleType, blocks: populateBlocks(module.blocks) })) })); return { allChapters }; }, [challenges]);\n\n// Expand the outer layers in order to reveal the chosen block.\n  const expandedChapter = blockToChapterMap.get(chosenBlock);\n  const expandedModule = blockToModuleMap.get(chosenBlock);\n\nreturn (\n    <ul className='super-block-accordion'>\n      {allChapters.map(chapter => {\n        const chapterStepIds: string[] = [];\n        chapter.modules.forEach(module => {\n          const { blocks } = module;\n          blocks.forEach(block =>\n            chapterStepIds.push(...block.challenges.map(c => c.id))\n          );\n        });\n\nconst chapterStepIdsSet = new Set(chapterStepIds);\n        const completedStepsInChapter = new Set(\n          completedChallengeIds.filter(id => chapterStepIdsSet.has(id))\n        ).size;\n\nreturn (\n          <Chapter\n            key={chapter.name}\n            dashedName={chapter.name}\n            isExpanded={expandedChapter === chapter.name}\n            comingSoon={chapter.comingSoon}\n            totalSteps={chapterStepIds.length}\n            completedSteps={completedStepsInChapter}\n            superBlock={superBlock}\n          >\n            {chapter.modules.map(module => {\n              if (module.comingSoon && !showUpcomingChanges) {\n                if (module.moduleType === 'review') {\n                  return null;\n                }\n\nconst { note, intro } = t(\n                  `intro:${superBlock}.module-intros.${module.name}`,\n                  { returnObjects: true }\n                ) as {\n                  note: string;\n                  intro: string[];\n                };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "baa6bc2a82331cb2c8a1a3f90f45eead",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "const { blocks } = module; blocks.forEach(block => chapterStepIds.push(...block.challenges.map(c => c.id)) ); }); const chapterStepIdsSet = new Set(chapterStepIds); const completedStepsInChapter = new Set( completedChallengeIds.filter(id => chapterStepIdsSet.has(id)) ).size; return ( <Chapter key={chapter.name} dashedName={chapter.name} isExpanded={expandedChapter === chapter.name} comingSoon={chapter.comingSoon} totalSteps={chapterStepIds.length} completedSteps={completedStepsInChapter} superBlock={superBlock} > {chapter.modules.map(module => { if (module.comingSoon && !showUpcomingChanges) { if (module.moduleType === 'review') { return null; } const { note, intro } = t( `intro:${superBlock}.module-intros.${module.name}`, { returnObjects: true } ) as { note: string; intro: string[]; };\n\nreturn (\n                  <Disclosure\n                    key={module.name}\n                    as='li'\n                    defaultOpen={expandedModule === module.name}\n                  >\n                    <Disclosure.Button className='module-button'>\n                      <div className='module-button-left'>\n                        <span className='dropdown-wrap'>\n                          <DropDown />\n                        </span>\n                        {t(`intro:${superBlock}.modules.${module.name}`)}\n                      </div>\n                    </Disclosure.Button>\n                    <Disclosure.Panel as='ul' className='module-panel'>\n                      <div className='module-intro'>\n                        {note && (\n                          <p>\n                            <b>{note}</b>\n                          </p>\n                        )}\n                        {intro &&\n                          intro.length > 0 &&\n                          intro.map(ntro => <p key={ntro}>{ntro}</p>)}\n                      </div>\n                    </Disclosure.Panel>\n                  </Disclosure>\n                );\n              }\n\nif (isLinkModule(module.name)) {\n                return (\n                  <LinkBlock\n                    key={module.name}\n                    superBlock={superBlock}\n                    challenges={module.blocks[0]?.challenges}\n                  />\n                );\n              }\n\nconst moduleStepIds: string[] = [];\n              module.blocks.forEach(block =>\n                moduleStepIds.push(...block.challenges.map(c => c.id))\n              );\n\nconst moduleStepIdsSet = new Set(moduleStepIds);\n              const completedStepsInModule = new Set(\n                completedChallengeIds.filter(id => moduleStepIdsSet.has(id))\n              ).size;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "40f4ef9c4fbdc39c5f8b0dd467497b6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
    "source_type": "git_repo",
    "title": "super-block-accordion",
    "content": "<Disclosure.Button className='module-button'> <div className='module-button-left'> <span className='dropdown-wrap'> <DropDown /> </span> {t(`intro:${superBlock}.modules.${module.name}`)} </div> </Disclosure.Button> <Disclosure.Panel as='ul' className='module-panel'> <div className='module-intro'> {note && ( <p> <b>{note}</b> </p> )} {intro && intro.length > 0 && intro.map(ntro => <p key={ntro}>{ntro}</p>)} </div> </Disclosure.Panel> </Disclosure> ); } if (isLinkModule(module.name)) { return ( <LinkBlock key={module.name} superBlock={superBlock} challenges={module.blocks[0]?.challenges} /> ); } const moduleStepIds: string[] = []; module.blocks.forEach(block => moduleStepIds.push(...block.challenges.map(c => c.id)) ); const moduleStepIdsSet = new Set(moduleStepIds); const completedStepsInModule = new Set( completedChallengeIds.filter(id => moduleStepIdsSet.has(id)) ).size;\n\nreturn (\n                <Module\n                  key={module.name}\n                  dashedName={module.name}\n                  isExpanded={expandedModule === module.name}\n                  totalSteps={moduleStepIds.length}\n                  completedSteps={completedStepsInModule}\n                  superBlock={superBlock}\n                >\n                  {module.blocks.map(block => (\n                    // maybe TODO: allow blocks to be \"coming soon\"\n                    <li key={block.name}>\n                      <Block\n                        block={block.name}\n                        blockType={block.blockType}\n                        challenges={block.challenges}\n                        superBlock={superBlock}\n                      />\n                    </li>\n                  ))}\n                </Module>\n              );\n            })}\n          </Chapter>\n        );\n      })}\n    </ul>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10987,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-accordion.tsx",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "2fae06ec266e0f53395fc3867899006d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Alert, Spacer, Container, Row, Col, Callout } from '@freecodecamp/ui';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { useFeatureIsOn } from '@growthbook/growthbook-react';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { SuperBlockIcon } from '../../../assets/superblock-icon';\nimport { Link } from '../../../components/helpers';\nimport CapIcon from '../../../assets/icons/cap';\nimport DumbbellIcon from '../../../assets/icons/dumbbell';\nimport CommunityIcon from '../../../assets/icons/community';\nimport { CompletedChallenge } from '../../../redux/prop-types';\nimport { completedChallengesSelector } from '../../../redux/selectors';\n\ninterface SuperBlockIntroQueryData {\n  challengeNode: {\n    challenge: {\n      fields: {\n        slug: string;\n      };\n    };\n  };\n}\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\ninterface ConditionalDonationAlertProps {\n  superBlock: SuperBlocks;\n  onCertificationDonationAlertClick: () => void;\n  isDonating: boolean;\n}\n\ninterface SuperBlockIntroProps\n  extends ConditionalDonationAlertProps,\n    ReduxProps {}\n\nconst mapStateToProps = (state: unknown) => ({\n  completedChallenges: completedChallengesSelector(\n    state\n  ) as CompletedChallenge[]\n});\n\nconst connector = connect(mapStateToProps);\n\nexport const ConditionalDonationAlert = ({\n  superBlock,\n  onCertificationDonationAlertClick,\n  isDonating\n}: ConditionalDonationAlertProps): JSX.Element | null => {\n  const { t } = useTranslation();\n\nconst betaCertifications: SuperBlocks[] = [];\n\nconst unfinishedCertifications = [\n    SuperBlocks.A2English,\n    SuperBlocks.B1English,\n    SuperBlocks.A2Spanish,\n    SuperBlocks.A2Chinese,\n    SuperBlocks.A1Chinese,\n    SuperBlocks.FullStackDeveloper\n  ];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "427f29567a7baca84a82176c9e6ddc43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "= ConnectedProps<typeof connector>; interface ConditionalDonationAlertProps { superBlock: SuperBlocks; onCertificationDonationAlertClick: () => void; isDonating: boolean; } interface SuperBlockIntroProps extends ConditionalDonationAlertProps, ReduxProps {} const mapStateToProps = (state: unknown) => ({ completedChallenges: completedChallengesSelector( state ) as CompletedChallenge[] }); const connector = connect(mapStateToProps); export const ConditionalDonationAlert = ({ superBlock, onCertificationDonationAlertClick, isDonating }: ConditionalDonationAlertProps): JSX.Element | null => { const { t } = useTranslation(); const betaCertifications: SuperBlocks[] = []; const unfinishedCertifications = [ SuperBlocks.A2English, SuperBlocks.B1English, SuperBlocks.A2Spanish, SuperBlocks.A2Chinese, SuperBlocks.A1Chinese, SuperBlocks.FullStackDeveloper ];\n\nif (!isDonating && betaCertifications.includes(superBlock))\n    return (\n      <Alert variant='info' className='annual-donation-alert'>\n        <p>{t('donate.beta-certification')}</p>\n        <hr />\n        <p className='btn-container'>\n          <Link\n            className='btn donate-button'\n            key='donate'\n            sameTab={false}\n            to='/donate'\n            onClick={onCertificationDonationAlertClick}\n          >\n            {t('buttons.donate-now')}\n          </Link>\n        </p>\n      </Alert>\n    );\n\nif (!isDonating && unfinishedCertifications.includes(superBlock))\n    return (\n      <Alert variant='info' className='annual-donation-alert'>\n        <p>\n          <Trans i18nKey='donate.consider-donating-2'>\n            <Link className='inline' to='/donate'>\n              placeholder\n            </Link>\n          </Trans>\n        </p>\n      </Alert>\n    );\n\nreturn null;\n};\n\nfunction SuperBlockIntro({\n  superBlock,\n  onCertificationDonationAlertClick,\n  isDonating,\n  completedChallenges\n}: SuperBlockIntroProps): JSX.Element {\n  const { t } = useTranslation();\n\nconst superBlockIntroObj: {\n    title: string;\n    intro: string[];\n    note: string;\n  } = t(`intro:${superBlock}`, { returnObjects: true }) as {\n    title: string;\n    intro: string[];\n    note: string;\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "30c1b767eb02161b4d2428cb7fe101e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "donate-button' key='donate' sameTab={false} to='/donate' onClick={onCertificationDonationAlertClick} > {t('buttons.donate-now')} </Link> </p> </Alert> ); if (!isDonating && unfinishedCertifications.includes(superBlock)) return ( <Alert variant='info' className='annual-donation-alert'> <p> <Trans i18nKey='donate.consider-donating-2'> <Link className='inline' to='/donate'> placeholder </Link> </Trans> </p> </Alert> ); return null; }; function SuperBlockIntro({ superBlock, onCertificationDonationAlertClick, isDonating, completedChallenges }: SuperBlockIntroProps): JSX.Element { const { t } = useTranslation(); const superBlockIntroObj: { title: string; intro: string[]; note: string; } = t(`intro:${superBlock}`, { returnObjects: true }) as { title: string; intro: string[]; note: string; };\n\nconst {\n    challengeNode: {\n      challenge: {\n        fields: { slug: firstChallengeSlug }\n      }\n    }\n  } = useStaticQuery<SuperBlockIntroQueryData>(graphql`\n    query SuperBlockIntroQuery {\n      challengeNode(\n        challenge: {\n          superOrder: { eq: 0 }\n          order: { eq: 0 }\n          challengeOrder: { eq: 0 }\n        }\n      ) {\n        challenge {\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n\nconst {\n    title: i18nSuperBlock,\n    intro: superBlockIntroText,\n    note: superBlockNoteText\n  } = superBlockIntroObj;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "35eb53a7edb9ff73fcd1222c17c3f6e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "= t(`intro:${superBlock}`, { returnObjects: true }) as { title: string; intro: string[]; note: string; }; const { challengeNode: { challenge: { fields: { slug: firstChallengeSlug } } } } = useStaticQuery<SuperBlockIntroQueryData>(graphql` query SuperBlockIntroQuery { challengeNode( challenge: { superOrder: { eq: 0 } order: { eq: 0 } challengeOrder: { eq: 0 } } ) { challenge { fields { slug } } } } `); const { title: i18nSuperBlock, intro: superBlockIntroText, note: superBlockNoteText } = superBlockIntroObj;\n\nconst introTopA = (\n    <>\n      <h1 id='content-start' className='text-center big-heading'>\n        {i18nSuperBlock}\n      </h1>\n      <Spacer size='m' />\n      <SuperBlockIcon className='cert-header-icon' superBlock={superBlock} />\n      <Spacer size='m' />\n      {superBlockIntroText.map((str, i) => (\n        <p dangerouslySetInnerHTML={{ __html: str }} key={i} />\n      ))}\n      {superBlockNoteText && (\n        <>\n          <Spacer size='m' />\n          <Callout variant='info'>{superBlockNoteText}</Callout>\n        </>\n      )}\n    </>\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "172f33649bc76121406c1f8965dae914",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "} challengeOrder: { eq: 0 } } ) { challenge { fields { slug } } } } `); const { title: i18nSuperBlock, intro: superBlockIntroText, note: superBlockNoteText } = superBlockIntroObj; const introTopA = ( <> <h1 id='content-start' className='text-center big-heading'> {i18nSuperBlock} </h1> <Spacer size='m' /> <SuperBlockIcon className='cert-header-icon' superBlock={superBlock} /> <Spacer size='m' /> {superBlockIntroText.map((str, i) => ( <p dangerouslySetInnerHTML={{ __html: str }} key={i} /> ))} {superBlockNoteText && ( <> <Spacer size='m' /> <Callout variant='info'>{superBlockNoteText}</Callout> </> )} </> );\n\nconst introTopB = (\n    <>\n      <SuperBlockIcon className='cert-header-icon' superBlock={superBlock} />\n      <Spacer size='m' />\n      <h1 id='content-start' className='text-center big-heading'>\n        {i18nSuperBlock}\n      </h1>\n      <Spacer size='m' />\n      <p>{t('misc.fsd-b-description')}</p>\n      {superBlockNoteText && (\n        <>\n          <Spacer size='m' />\n          <Callout variant='info'>{superBlockNoteText}</Callout>\n        </>\n      )}\n      <Spacer size='s' />\n      <a\n        className={'btn-cta-big btn-block signup-btn btn-cta'}\n        href={firstChallengeSlug}\n      >\n        {t('misc.fsd-b-cta')}\n      </a>\n      <Spacer size='l' />\n      <Container\n        fluid={true}\n        className='full-width-container super-benefits-container'\n      >\n        <Container>\n          <Row>\n            <Col xs={12} className='super-block-benefits'>\n              <div>\n                <CommunityIcon />\n                <div className='benefit-text'>\n                  <h3>{t('misc.fsd-b-benefit-1-title')}</h3>\n                  <p>{t('misc.fsd-b-benefit-1-description')}</p>\n                </div>\n              </div>\n              <div>\n                <CapIcon />\n                <div className='benefit-text'>\n                  <h3>{t('misc.fsd-b-benefit-2-title')}</h3>\n                  <p>{t('misc.fsd-b-benefit-2-description')}</p>\n                </div>\n              </div>\n              <div>\n                <DumbbellIcon />\n                <div className='benefit-text'>\n                  <h3>{t('misc.fsd-b-benefit-3-title')}</h3>\n                  <p>{t('misc.fsd-b-benefit-3-description')}</p>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n      <Spacer size='l' />\n    </>\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "9ae4e177e0c2edeefceba6ea9b1c2906",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
    "source_type": "git_repo",
    "title": "super-block-intro",
    "content": "<Spacer size='m' /> <p>{t('misc.fsd-b-description')}</p> {superBlockNoteText && ( <> <Spacer size='m' /> <Callout variant='info'>{superBlockNoteText}</Callout> </> )} <Spacer size='s' /> <a className={'btn-cta-big btn-block signup-btn btn-cta'} href={firstChallengeSlug} > {t('misc.fsd-b-cta')} </a> <Spacer size='l' /> <Container fluid={true} className='full-width-container super-benefits-container' > <Container> <Row> <Col xs={12} className='super-block-benefits'> <div> <CommunityIcon /> <div className='benefit-text'> <h3>{t('misc.fsd-b-benefit-1-title')}</h3> <p>{t('misc.fsd-b-benefit-1-description')}</p> </div> </div> <div> <CapIcon /> <div className='benefit-text'> <h3>{t('misc.fsd-b-benefit-2-title')}</h3> <p>{t('misc.fsd-b-benefit-2-description')}</p> </div> </div> <div> <DumbbellIcon /> <div className='benefit-text'> <h3>{t('misc.fsd-b-benefit-3-title')}</h3> <p>{t('misc.fsd-b-benefit-3-description')}</p> </div> </div> </Col> </Row> </Container> </Container> <Spacer size='l' /> </> );\n\nconst showFSDnewIntro = useFeatureIsOn('fsd-new-intro');\n\nconst showIntroTopB =\n    completedChallenges.length === 0 &&\n    superBlock === SuperBlocks.FullStackDeveloper &&\n    showFSDnewIntro;\n\nreturn (\n    <>\n      {showIntroTopB ? introTopB : introTopA}\n      <ConditionalDonationAlert\n        superBlock={superBlock}\n        onCertificationDonationAlertClick={onCertificationDonationAlertClick}\n        isDonating={isDonating}\n      />\n    </>\n  );\n}\n\nSuperBlockIntro.displayName = 'SuperBlockIntro';\n\nexport default connector(SuperBlockIntro);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\components\\super-block-intro.tsx",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "50237c7c94825c6cd4c4f4c6f65d97b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "import { createAction, handleActions } from 'redux-actions';\n\nimport { createTypes } from '../../../utils/create-types';\n\nexport const ns = 'curriculumMap';\n\nconst initialState = {\n  expandedState: {\n    block: {}\n  }\n};\n\nconst types = createTypes(['resetExpansion', 'toggleBlock'], ns);\n\nexport const resetExpansion = createAction(types.resetExpansion);\nexport const toggleBlock = createAction(types.toggleBlock);\n\nexport const makeExpandedBlockSelector = block => state =>\n  !!state[ns].expandedState.block[block];\n\nexport const reducer = handleActions(\n  {\n    [types.resetExpansion]: state => ({\n      ...state,\n      expandedState: {\n        block: {}\n      }\n    }),\n    [types.toggleBlock]: (state, { payload }) => ({\n      ...state,\n      expandedState: {\n        ...state.expandedState,\n        block: {\n          ...state.expandedState.block,\n          [payload]: !state.expandedState.block[payload]\n        }\n      }\n    })\n  },\n  initialState\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 958,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Introduction\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7dcfb906cc1f5b07638961c5b4a18403",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
    "source_type": "git_repo",
    "title": "action-row",
    "content": "import { faWindowRestore } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport store from 'store';\nimport { DailyCodingChallengeLanguages } from '../../../redux/prop-types';\nimport EditorTabs from './editor-tabs';\n\ninterface ActionRowProps {\n  dailyCodingChallengeLanguage: DailyCodingChallengeLanguages;\n  hasNotes: boolean;\n  hasPreview: boolean;\n  areInstructionsDisplayable: boolean;\n  isDailyCodingChallenge: boolean;\n  setDailyCodingChallengeLanguage: (\n    language: DailyCodingChallengeLanguages\n  ) => void;\n  showConsole: boolean;\n  showNotes: boolean;\n  showInstructions: boolean;\n  showPreviewPane: boolean;\n  showPreviewPortal: boolean;\n  togglePane: (pane: string) => void;\n}\n\nconst ActionRow = ({\n  hasPreview,\n  hasNotes,\n  togglePane,\n  showNotes,\n  showPreviewPane,\n  showPreviewPortal,\n  showConsole,\n  showInstructions,\n  areInstructionsDisplayable,\n  isDailyCodingChallenge,\n  dailyCodingChallengeLanguage,\n  setDailyCodingChallengeLanguage\n}: ActionRowProps): JSX.Element => {\n  const { t } = useTranslation();\n\n// sets screen reader text for the two preview buttons\n  function getPreviewBtnsSrText() {\n    // no preview open\n    const previewBtnsSrText = {\n      pane: t('aria.show-preview'),\n      portal: t('aria.open-preview-in-new-window')\n    };\n\n// preview open in main window\n    if (showPreviewPane && !showPreviewPortal) {\n      previewBtnsSrText.pane = t('aria.hide-preview');\n      previewBtnsSrText.portal = t('aria.move-preview-to-new-window');\n\n// preview open in external window\n    } else if (showPreviewPortal && !showPreviewPane) {\n      previewBtnsSrText.pane = t('aria.move-preview-to-main-window');\n      previewBtnsSrText.portal = t('aria.close-external-preview-window');\n    }\n\nreturn previewBtnsSrText;\n  }\n\nconst handleLanguageChange = (language: DailyCodingChallengeLanguages) => {\n    store.set('dailyCodingChallengeLanguage', language);\n    setDailyCodingChallengeLanguage(language);\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4949,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e1abb3c88e5f8347f60eb257eb4e46d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
    "source_type": "git_repo",
    "title": "action-row",
    "content": "sets screen reader text for the two preview buttons function getPreviewBtnsSrText() { // no preview open const previewBtnsSrText = { pane: t('aria.show-preview'), portal: t('aria.open-preview-in-new-window') }; // preview open in main window if (showPreviewPane && !showPreviewPortal) { previewBtnsSrText.pane = t('aria.hide-preview'); previewBtnsSrText.portal = t('aria.move-preview-to-new-window'); // preview open in external window } else if (showPreviewPortal && !showPreviewPane) { previewBtnsSrText.pane = t('aria.move-preview-to-main-window'); previewBtnsSrText.portal = t('aria.close-external-preview-window'); } return previewBtnsSrText; } const handleLanguageChange = (language: DailyCodingChallengeLanguages) => { store.set('dailyCodingChallengeLanguage', language); setDailyCodingChallengeLanguage(language); };return (\n    <div className='action-row' data-playwright-test-label='action-row'>\n      <div className='tabs-row' data-playwright-test-label='tabs-row'>\n        {/* left */}\n        <div className='tabs-row-left'>\n          {areInstructionsDisplayable && (\n            <button\n              data-playwright-test-label='instructions-button'\n              aria-expanded={ showInstructions}\n              onClick={() => togglePane('showInstructions')}\n            >\n              {t('learn editor-tabs instructions')}\n            </button>\n          )}\n          <EditorTabs data-playwright-test-label='editor-tabs' />\n        </div>\n        {/* middle - only used with daily coding challenges for now */}\n        <div className='tabs-row-middle'>\n          {isDailyCodingChallenge && (\n            <>\n              <button\n                aria-expanded={dailyCodingChallengeLanguage === 'javascript'}\n                disabled={dailyCodingChallengeLanguage === 'javascript'}\n                onClick={() => handleLanguageChange('javascript')}\n              >\n                JavaScript\n              </button>\n              <button\n                aria-expanded={dailyCodingChallengeLanguage === 'python'}\n                disabled={dailyCodingChallengeLanguage === 'python'}\n                onClick={() => handleLanguageChange('python')}\n              >\n                Python\n              </button>\n            </>\n          )}\n        </div>\n        {/* right */}\n        <div className='tabs-row-right panel-display-tabs'>\n          <button\n            aria-expanded={ showConsole}\n            onClick={() => togglePane('showConsole')}\n          >\n            {t('learn editor-tabs",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4949,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4bb0fa2b522323f0b36061b2f099dc99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
    "source_type": "git_repo",
    "title": "action-row",
    "content": "showInstructions} onClick={() => togglePane('showInstructions')} > {t('learn editor-tabs instructions')} </button> )} <EditorTabs data-playwright-test-label='editor-tabs' /> </div> {/* middle - only used with daily coding challenges for now */} <div className='tabs-row-middle'> {isDailyCodingChallenge && ( <> <button aria-expanded={dailyCodingChallengeLanguage === 'javascript'} disabled={dailyCodingChallengeLanguage === 'javascript'} onClick={() => handleLanguageChange('javascript')} > JavaScript </button> <button aria-expanded={dailyCodingChallengeLanguage === 'python'} disabled={dailyCodingChallengeLanguage === 'python'} onClick={() => handleLanguageChange('python')} > Python </button> </> )} </div> {/* right */} <div className='tabs-row-right panel-display-tabs'> <button aria-expanded={ showConsole} onClick={() => togglePane('showConsole')} > {t('learn editor-tabsconsole')}\n          </button>\n          {hasNotes && (\n            <button\n              aria-expanded={ showNotes}\n              onClick={() => togglePane('showNotes')}\n            >\n              {t('learn editor-tabs notes')}\n            </button>\n          )}\n          {hasPreview && (\n            <>\n              <button\n                data-playwright-test-label='preview-pane-button'\n                aria-expanded={ showPreviewPane}\n                onClick={() => togglePane('showPreviewPane')}\n              >\n                <span className='sr-only'>{getPreviewBtnsSrText() pane}</span>\n                <span aria-hidden='true'>{t('learn editor-tabs preview')}</span>\n              </button>\n              <button\n                aria-expanded={ showPreviewPortal}\n                onClick={() => togglePane('showPreviewPortal')}\n              >\n                <span className='sr-only'>{getPreviewBtnsSrText() portal}</span>\n                <FontAwesomeIcon icon={faWindowRestore} />\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport default ActionRow;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4949,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\action-row.tsx",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2da1ddbefd815fbd63ea0eaf7200afff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
    "source_type": "git_repo",
    "title": "classic",
    "content": ".reflex-element {\n  overflow: hidden !important;\n}\n\n.monaco-menu .action-label {\n  color: var(--highlight-color);\n  letter-spacing: 0.02em;\n}\n\n.monaco-aria-container {\n  top: -999em;\n}\n\n.monaco-menu .monaco-action-bar.vertical .action-item:nth-last-child(n + 5),\n.monaco-menu .monaco-action-bar.vertical .action-item:last-child,\n.monaco-menu .monaco-action-bar.vertical .action-label.separator {\n  display: none !important;\n}\n\n.action-row {\n  padding: 10px;\n  border-bottom: 1px solid var(--quaternary-background);\n}\n\n.monaco-editor-tabs button[aria-expanded='true'],\n.panel-display-tabs button[aria-expanded='true'],\n.tabs-row button[aria-expanded='true'] {\n  border-color: var(--primary-color);\n  background-color: var(--primary-color);\n  color: var(--secondary-background);\n}\n\n.monaco-editor-tabs button:hover,\n.panel-display-tabs button:hover,\n.tabs-row button:hover {\n  color: var(--secondary-color);\n  background-color: var(--primary-background);\n}\n\n.monaco-editor-tabs button[aria-expanded='true']:hover,\n.panel-display-tabs button[aria-expanded='true']:hover,\n.tabs-row button[aria-expanded='true']:hover {\n  background-color: var(--quaternary-color);\n  color: var(--secondary-background);\n}\n\n.panel-display-tabs button:focus-visible {\n  position: relative;\n  z-index: 20;\n}\n\n.tabs-row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.tabs-row button,\n.monaco-editor-tabs button {\n  padding: 6px 12px;\n  border-width: 3px;\n  border-style: solid;\n}\n\n.tabs-row-left {\n  width: 30%;\n  display: flex;\n  gap: 10px;\n}\n\n.tabs-row-middle {\n  width: 30%;\n  display: flex;\n  justify-content: center;\n  gap: 3px;\n}\n\n.tabs-row-right {\n  width: 30%;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.monaco-editor-tabs button + button {\n  margin-inline-start: 3px;\n}\n\n.monaco-editor-tabs {\n  display: flex;\n  margin-inline-end: auto;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5f8e221a6f4af5a8b7da0b5a47a707dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
    "source_type": "git_repo",
    "title": "classic",
    "content": "var(--secondary-background); } .panel-display-tabs button:focus-visible { position: relative; z-index: 20; } .tabs-row { display: flex; flex-direction: row; justify-content: space-between; } .tabs-row button, .monaco-editor-tabs button { padding: 6px 12px; border-width: 3px; border-style: solid; } .tabs-row-left { width: 30%; display: flex; gap: 10px; } .tabs-row-middle { width: 30%; display: flex; justify-content: center; gap: 3px; } .tabs-row-right { width: 30%; display: flex; justify-content: flex-end; } .monaco-editor-tabs button + button { margin-inline-start: 3px; } .monaco-editor-tabs { display: flex; margin-inline-end: auto; }\n\n.panel-display-tabs button:first-child,\n.tabs-row > button:first-child {\n  margin: 0 10px 0 0;\n}\n\n.panel-display-tabs button:last-of-type {\n  border-inline-start-width: 1px;\n}\n\n.panel-display-tabs button:last-of-type:first-of-type {\n  border-inline-start-width: 3px;\n}\n\n.panel-display-tabs button:nth-last-child(2) {\n  border-inline-end-width: 1px;\n}\n\n.restart-step-tab {\n  margin: 0 auto;\n}\n\n#mobile-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n#mobile-layout .nav-lists {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  border-bottom: 1px solid var(--quaternary-color);\n  height: 2rem;\n  flex-shrink: 0;\n}\n\n/* Need to narrow width of tabs to make room for preview toggle button */\n#mobile-layout[data-haspreview='true'] [role='tablist'] {\n  width: calc(100% - 2rem);\n}\n\n#mobile-layout .nav-lists > button {\n  height: 100%;\n  font-size: 0.8em;\n  /* Need to override radix-ui defaults on side padding to allow room for\n     four tabs and a preview toggle button at narrow view ports */\n  padding-left: 0.2rem;\n  padding-right: 0.2rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "06b6762b007ea578abc61897248c8ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
    "source_type": "git_repo",
    "title": "classic",
    "content": "0; padding: 0; display: flex; border-bottom: 1px solid var(--quaternary-color); height: 2rem; flex-shrink: 0; } /* Need to narrow width of tabs to make room for preview toggle button */ #mobile-layout[data-haspreview='true'] [role='tablist'] { width: calc(100% - 2rem); } #mobile-layout .nav-lists > button { height: 100%; font-size: 0.8em; /* Need to override radix-ui defaults on side padding to allow room for four tabs and a preview toggle button at narrow view ports */ padding-left: 0.2rem; padding-right: 0.2rem; }\n\n#mobile-layout .nav-lists button[data-state='active'] {\n  pointer-events: none;\n}\n\n#mobile-layout\n  .nav-lists\n  > button:is([aria-selected='false'], [aria-expanded='false']) {\n  color: inherit;\n  background-color: inherit;\n}\n\n#mobile-layout .nav-lists > button:hover,\n.portal-button:hover {\n  background: var(--quaternary-background);\n  color: var(--secondary-color);\n}\n\n.portal-button {\n  width: 2rem;\n  border: 0;\n  padding: 0;\n  background-color: inherit;\n  font-size: 0.8rem;\n  height: 100%;\n}\n\n.portal-button[aria-expanded='true'] {\n  border-color: var(--quaternary-color);\n  background-color: var(--quaternary-color);\n  color: var(--secondary-background);\n}\n\n.portal-button:focus-visible {\n  outline-offset: -3px;\n}\n\n#mobile-layout .tab-content {\n  height: 100%;\n  overflow-y: hidden;\n}\n\n#mobile-layout .tab-content[data-state='inactive'] {\n  height: 1px;\n}\n\n#mobile-layout .tab-content[data-state='active'] {\n  padding-block-end: 37px;\n  display: flex;\n  flex-direction: column;\n}\n\n#learn-app-wrapper[data-has-editable-boundaries='true']\n  #mobile-layout\n  .tab-content[data-state='active'] {\n  padding-block-end: 0px;\n}\n\n#mobile-layout .preview-external-window {\n  text-align: center;\n  margin-top: 60px;\n}\n\n#mobile-layout-pane-editor {\n  display: flex;\n  flex-direction: column;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b1bc269aab349c10a1ba525712ab3ef6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
    "source_type": "git_repo",
    "title": "classic",
    "content": "} .portal-button { width: 2rem; border: 0; padding: 0; background-color: inherit; font-size: 0.8rem; height: 100%; } .portal-button[aria-expanded='true'] { border-color: var(--quaternary-color); background-color: var(--quaternary-color); color: var(--secondary-background); } .portal-button:focus-visible { outline-offset: -3px; } #mobile-layout .tab-content { height: 100%; overflow-y: hidden; } #mobile-layout .tab-content[data-state='inactive'] { height: 1px; } #mobile-layout .tab-content[data-state='active'] { padding-block-end: 37px; display: flex; flex-direction: column; } #learn-app-wrapper[data-has-editable-boundaries='true'] #mobile-layout .tab-content[data-state='active'] { padding-block-end: 0px; } #mobile-layout .preview-external-window { text-align: center; margin-top: 60px; } #mobile-layout-pane-editor { display: flex; flex-direction: column; }\n\n#mobile-layout .portal-button-wrap {\n  position: absolute;\n  top: auto;\n  right: 0;\n  height: 2rem;\n  border-bottom: 1px solid var(--quaternary-color);\n}\n\n#mobile-layout .tab-content[data-state='active'] .portal-button-wrap {\n  transform: translateY(-2rem);\n}\n\n#mobile-layout #mobile-layout-pane-instructions {\n  overflow-y: auto;\n}\n\n#mobile-layout-pane-instructions:focus-visible {\n  outline-offset: -2px;\n}\n\n@supports not selector(:focus-visible) {\n  #mobile-layout-pane-instructions:focus {\n    outline-offset: -2px;\n  }\n}\n\n#mobile-layout .monaco-editor-tabs {\n  padding: 10px;\n  width: 100%;\n}\n\n#mobile-layout .monaco-editor-tabs button {\n  flex: 1;\n  max-width: 50%;\n}\n\n/* Focus indicator for tab panel */\n.nav-lists [role='tab']:focus {\n  outline-offset: -3px;\n}\n\n@media screen and (max-width: 480px) {\n  #mobile-layout .monaco-editor-tabs {\n    padding: 10px 5px;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "61be6589f557ea865c0c2b20194eb0f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
    "source_type": "git_repo",
    "title": "classic",
    "content": "1px solid var(--quaternary-color); } #mobile-layout .tab-content[data-state='active'] .portal-button-wrap { transform: translateY(-2rem); } #mobile-layout #mobile-layout-pane-instructions { overflow-y: auto; } #mobile-layout-pane-instructions:focus-visible { outline-offset: -2px; } @supports not selector(:focus-visible) { #mobile-layout-pane-instructions:focus { outline-offset: -2px; } } #mobile-layout .monaco-editor-tabs { padding: 10px; width: 100%; } #mobile-layout .monaco-editor-tabs button { flex: 1; max-width: 50%; } /* Focus indicator for tab panel */ .nav-lists [role='tab']:focus { outline-offset: -3px; } @media screen and (max-width: 480px) { #mobile-layout .monaco-editor-tabs { padding: 10px 5px; } }\n\n@media screen and (max-height: 300px) {\n  #mobile-layout .nav-lists {\n    height: 1.5rem;\n  }\n\n#mobile-layout .nav-lists > button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n#mobile-layout .portal-button-wrap {\n    height: 1.5rem;\n  }\n\n#mobile-layout .tab-content[data-state='active'] .portal-button-wrap {\n    height: 1.52rem;\n    transform: translateY(-1.5rem);\n  }\n\n#mobile-layout .portal-button-wrap button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 1.43rem;\n    font-size: initial;\n  }\n\n#mobile-layout .portal-button-wrap button svg {\n    scale: 0.8;\n  }\n\n#mobile-layout .monaco-editor-tabs {\n    padding: 5px;\n  }\n\n.monaco-editor-tabs button {\n    padding: 2px 12px;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\classic.css",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "dfc22940b5418aab5312d3918c30cabf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "import { isEmpty } from 'lodash-es';\nimport React, { useState, useEffect, ReactElement } from 'react';\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport store from 'store';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport {\n  ChallengeFiles,\n  DailyCodingChallengeLanguages,\n  ResizeProps\n} from '../../../redux/prop-types';\nimport {\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane\n} from '../redux/actions';\nimport {\n  portalWindowSelector,\n  showPreviewPortalSelector,\n  showPreviewPaneSelector,\n  isAdvancingToChallengeSelector\n} from '../redux/selectors';\nimport PreviewPortal from '../components/preview-portal';\nimport Notes from '../components/notes';\nimport ActionRow from './action-row';\n\ntype Pane = { flex: number };\n\ninterface DesktopLayoutProps {\n  challengeFiles: ChallengeFiles;\n  challengeType: number;\n  editor: ReactElement | null;\n  hasEditableBoundaries?: boolean;\n  hasPreview: boolean;\n  instructions: ReactElement;\n  isAdvancing: boolean;\n  isDailyCodingChallenge: boolean;\n  dailyCodingChallengeLanguage: DailyCodingChallengeLanguages;\n  setDailyCodingChallengeLanguage: (\n    language: DailyCodingChallengeLanguages\n  ) => void;\n  isFirstStep?: boolean;\n  layoutState: {\n    codePane: Pane;\n    editorPane: Pane;\n    instructionPane: Pane;\n    notesPane: Pane;\n    previewPane: Pane;\n    testsPane: Pane;\n  };\n  notes?: string;\n  onPreviewResize: () => void;\n  preview: ReactElement;\n  resizeProps: ResizeProps;\n  testOutput: ReactElement;\n  windowTitle: string;\n  showPreviewPortal: boolean;\n  showPreviewPane: boolean;\n  startWithConsoleShown: boolean;\n  removePortalWindow: () => void;\n  setShowPreviewPortal: (arg: boolean) => void;\n  setShowPreviewPane: (arg: boolean) => void;\n  portalWindow: null | Window;\n  showIndependentLowerJaw: boolean;\n}\n\nconst reflexProps = {\n  propagateDimensions: true\n};\n\nconst mapDispatchToProps = {\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "179900a45c23af8a135a2000fd1e4069",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": ") => void; isFirstStep?: boolean; layoutState: { codePane: Pane; editorPane: Pane; instructionPane: Pane; notesPane: Pane; previewPane: Pane; testsPane: Pane; }; notes?: string; onPreviewResize: () => void; preview: ReactElement; resizeProps: ResizeProps; testOutput: ReactElement; windowTitle: string; showPreviewPortal: boolean; showPreviewPane: boolean; startWithConsoleShown: boolean; removePortalWindow: () => void; setShowPreviewPortal: (arg: boolean) => void; setShowPreviewPane: (arg: boolean) => void; portalWindow: null | Window; showIndependentLowerJaw: boolean; } const reflexProps = { propagateDimensions: true }; const mapDispatchToProps = { removePortalWindow, setShowPreviewPortal, setShowPreviewPane };\n\nconst mapStateToProps = createSelector(\n  isAdvancingToChallengeSelector,\n  showPreviewPortalSelector,\n  showPreviewPaneSelector,\n  portalWindowSelector,\n\n(\n    isAdvancing: boolean,\n    showPreviewPortal: boolean,\n    showPreviewPane: boolean,\n    portalWindow: null | Window\n  ) => ({\n    isAdvancing,\n    showPreviewPortal,\n    showPreviewPane,\n    portalWindow\n  })\n);\n\nconst DesktopLayout = (props: DesktopLayoutProps): JSX.Element => {\n  const {\n    showPreviewPane,\n    showPreviewPortal,\n    removePortalWindow,\n    setShowPreviewPane,\n    setShowPreviewPortal,\n    portalWindow,\n    startWithConsoleShown,\n    showIndependentLowerJaw,\n    isDailyCodingChallenge,\n    dailyCodingChallengeLanguage,\n    setDailyCodingChallengeLanguage\n  } = props;\n\nconst initialShowState = (key: string, defaultValue: boolean): boolean => {\n    const savedState: string = store.get('layoutPaneBooleans') as string;\n    try {\n      if (savedState) {\n        const parsedState: Record<string, boolean> = JSON.parse(\n          savedState\n        ) as Record<string, boolean>;\n        return parsedState[key] || defaultValue;\n      }\n    } catch (error) {\n      console.error('Error parsing layoutPaneBooleans from store', error);\n    }\n    return defaultValue;\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "6b01dabd9f9f79c1ea7bb637f4f9f59c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "const DesktopLayout = (props: DesktopLayoutProps): JSX.Element => { const { showPreviewPane, showPreviewPortal, removePortalWindow, setShowPreviewPane, setShowPreviewPortal, portalWindow, startWithConsoleShown, showIndependentLowerJaw, isDailyCodingChallenge, dailyCodingChallengeLanguage, setDailyCodingChallengeLanguage } = props; const initialShowState = (key: string, defaultValue: boolean): boolean => { const savedState: string = store.get('layoutPaneBooleans') as string; try { if (savedState) { const parsedState: Record<string, boolean> = JSON.parse( savedState ) as Record<string, boolean>; return parsedState[key] || defaultValue; } } catch (error) { console.error('Error parsing layoutPaneBooleans from store', error); } return defaultValue; };\n\nconst [showNotes, setShowNotes] = useState(() =>\n    initialShowState('showNotes', false)\n  );\n  const [showConsole, setShowConsole] = useState(() =>\n    initialShowState('showConsole', startWithConsoleShown)\n  );\n  const [showInstructions, setShowInstructions] = useState(() =>\n    initialShowState('showInstructions', true)\n  );\n\n/* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    setShowPreviewPane(initialShowState('showPreviewPane', false));\n    setShowPreviewPortal(initialShowState('showPreviewPortal', false));\n  }, []);\n\nuseEffect(() => {\n    const layoutPaneBooleans = {\n      showNotes,\n      showConsole,\n      showInstructions,\n      showPreviewPane,\n      showPreviewPortal\n    };\n    store.set('layoutPaneBooleans', JSON.stringify(layoutPaneBooleans));\n  }, [\n    showNotes,\n    showConsole,\n    showInstructions,\n    showPreviewPane,\n    showPreviewPortal\n  ]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "434aa192e19345959a86f8257da1d127",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "catch (error) { console.error('Error parsing layoutPaneBooleans from store', error); } return defaultValue; }; const [showNotes, setShowNotes] = useState(() => initialShowState('showNotes', false) ); const [showConsole, setShowConsole] = useState(() => initialShowState('showConsole', startWithConsoleShown) ); const [showInstructions, setShowInstructions] = useState(() => initialShowState('showInstructions', true) ); /* eslint-disable react-hooks/exhaustive-deps */ useEffect(() => { setShowPreviewPane(initialShowState('showPreviewPane', false)); setShowPreviewPortal(initialShowState('showPreviewPortal', false)); }, []); useEffect(() => { const layoutPaneBooleans = { showNotes, showConsole, showInstructions, showPreviewPane, showPreviewPortal }; store.set('layoutPaneBooleans', JSON.stringify(layoutPaneBooleans)); }, [ showNotes, showConsole, showInstructions, showPreviewPane, showPreviewPortal ]);\n\nuseEffect(() => {\n    const layoutPaneBooleans: string = store.get(\n      'layoutPaneBooleans'\n    ) as string;\n    if (layoutPaneBooleans) {\n      let parsedLayoutPaneBooleans: Record<string, boolean> = {};\n      try {\n        parsedLayoutPaneBooleans = JSON.parse(layoutPaneBooleans) as Record<\n          string,\n          boolean\n        >;\n      } catch (error) {\n        console.error('Error parsing layoutPaneBooleans from store', error);\n      }\n      setShowNotes(parsedLayoutPaneBooleans.showNotes || false);\n      setShowConsole(\n        parsedLayoutPaneBooleans.showConsole || startWithConsoleShown\n      );\n      setShowInstructions(parsedLayoutPaneBooleans.showInstructions || true);\n      setShowPreviewPane(parsedLayoutPaneBooleans.showPreviewPane || false);\n      setShowPreviewPortal(parsedLayoutPaneBooleans.showPreviewPortal || false);\n    }\n  }, []);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "867fe1df908e9da4bc5a85b12d45d3a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "showInstructions, showPreviewPane, showPreviewPortal }; store.set('layoutPaneBooleans', JSON.stringify(layoutPaneBooleans)); }, [ showNotes, showConsole, showInstructions, showPreviewPane, showPreviewPortal ]); useEffect(() => { const layoutPaneBooleans: string = store.get( 'layoutPaneBooleans' ) as string; if (layoutPaneBooleans) { let parsedLayoutPaneBooleans: Record<string, boolean> = {}; try { parsedLayoutPaneBooleans = JSON.parse(layoutPaneBooleans) as Record< string, boolean >; } catch (error) { console.error('Error parsing layoutPaneBooleans from store', error); } setShowNotes(parsedLayoutPaneBooleans.showNotes || false); setShowConsole( parsedLayoutPaneBooleans.showConsole || startWithConsoleShown ); setShowInstructions(parsedLayoutPaneBooleans.showInstructions || true); setShowPreviewPane(parsedLayoutPaneBooleans.showPreviewPane || false); setShowPreviewPortal(parsedLayoutPaneBooleans.showPreviewPortal || false); } }, []);\n\nconst togglePane = (pane: string): void => {\n    if (pane === 'showPreviewPane') {\n      if (!showPreviewPane && showPreviewPortal) {\n        setShowPreviewPortal(false);\n      }\n      setShowPreviewPane(!showPreviewPane);\n      portalWindow?.close();\n      removePortalWindow();\n    } else if (pane === 'showPreviewPortal') {\n      if (!showPreviewPortal && showPreviewPane) {\n        setShowPreviewPane(false);\n      }\n      setShowPreviewPortal(!showPreviewPortal);\n      if (showPreviewPortal) {\n        portalWindow?.close();\n        removePortalWindow();\n      }\n    } else if (pane === 'showConsole') {\n      setShowConsole(!showConsole);\n    } else if (pane === 'showNotes') {\n      setShowNotes(!showNotes);\n    } else if (pane === 'showInstructions') {\n      setShowInstructions(!showInstructions);\n    } else {\n      setShowInstructions(true);\n      setShowConsole(false);\n      setShowPreviewPane(true);\n      setShowPreviewPortal(false);\n      setShowNotes(false);\n    }\n  };\n\nconst {\n    challengeFiles,\n    challengeType,\n    resizeProps,\n    instructions,\n    editor,\n    testOutput,\n    hasPreview,\n    isAdvancing,\n    isFirstStep,\n    layoutState,\n    notes,\n    onPreviewResize,\n    preview,\n    hasEditableBoundaries,\n    windowTitle\n  } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "7f0016f450782f35a8eb453d939cb60a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "removePortalWindow(); } else if (pane === 'showPreviewPortal') { if (!showPreviewPortal && showPreviewPane) { setShowPreviewPane(false); } setShowPreviewPortal(!showPreviewPortal); if (showPreviewPortal) { portalWindow?.close(); removePortalWindow(); } } else if (pane === 'showConsole') { setShowConsole(!showConsole); } else if (pane === 'showNotes') { setShowNotes(!showNotes); } else if (pane === 'showInstructions') { setShowInstructions(!showInstructions); } else { setShowInstructions(true); setShowConsole(false); setShowPreviewPane(true); setShowPreviewPortal(false); setShowNotes(false); } }; const { challengeFiles, challengeType, resizeProps, instructions, editor, testOutput, hasPreview, isAdvancing, isFirstStep, layoutState, notes, onPreviewResize, preview, hasEditableBoundaries, windowTitle } = props;\n\n// on mount\n  useEffect(() => {\n    if (isFirstStep && !showPreviewPortal) {\n      setShowPreviewPane(true);\n    } else if (!isAdvancing && !showPreviewPane && !showPreviewPortal) {\n      togglePane('showPreviewPane');\n    }\n  }, []);\n\nconst projectBasedChallenge = hasEditableBoundaries;\n  const areInstructionsDisplayable =\n    !projectBasedChallenge || showIndependentLowerJaw;\n  const isMultifileProject =\n    challengeType === challengeTypes.multifileCertProject ||\n    challengeType === challengeTypes.multifilePythonCertProject ||\n    challengeType === challengeTypes.lab ||\n    challengeType === challengeTypes.jsLab ||\n    challengeType === challengeTypes.pyLab ||\n    challengeType === challengeTypes.dailyChallengeJs ||\n    challengeType === challengeTypes.dailyChallengePy;\n  const isProjectStyle = projectBasedChallenge || isMultifileProject;\n  const displayPreviewPane = hasPreview && showPreviewPane;\n  const displayPreviewPortal = hasPreview && showPreviewPortal;\n  const displayNotes = projectBasedChallenge ? showNotes && !!notes : false;\n  const displayEditorConsole = !isProjectStyle;\n  const displayPreviewConsole = !displayEditorConsole && showConsole;\n\nconst {\n    codePane,\n    editorPane,\n    instructionPane,\n    notesPane,\n    previewPane,\n    testsPane\n  } = layoutState;\n\nconst editorPaneFlex =\n    !displayPreviewConsole && !displayPreviewPane ? 1 : editorPane.flex;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "7f57c784af32cdd9127031974b790503",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "challengeTypes.lab || challengeType === challengeTypes.jsLab || challengeType === challengeTypes.pyLab || challengeType === challengeTypes.dailyChallengeJs || challengeType === challengeTypes.dailyChallengePy; const isProjectStyle = projectBasedChallenge || isMultifileProject; const displayPreviewPane = hasPreview && showPreviewPane; const displayPreviewPortal = hasPreview && showPreviewPortal; const displayNotes = projectBasedChallenge ? showNotes && !!notes : false; const displayEditorConsole = !isProjectStyle; const displayPreviewConsole = !displayEditorConsole && showConsole; const { codePane, editorPane, instructionPane, notesPane, previewPane, testsPane } = layoutState; const editorPaneFlex = !displayPreviewConsole && !displayPreviewPane ? 1 : editorPane.flex;\n\nreturn (\n    <div className='desktop-layout' data-playwright-test-label='desktop-layout'>\n      {isProjectStyle && (\n        <ActionRow\n          hasPreview={hasPreview}\n          hasNotes={!!notes}\n          areInstructionsDisplayable={areInstructionsDisplayable}\n          isDailyCodingChallenge={isDailyCodingChallenge}\n          dailyCodingChallengeLanguage={dailyCodingChallengeLanguage}\n          setDailyCodingChallengeLanguage={setDailyCodingChallengeLanguage}\n          showConsole={showConsole}\n          showNotes={showNotes}\n          showInstructions={showInstructions}\n          showPreviewPane={showPreviewPane}\n          showPreviewPortal={showPreviewPortal}\n          togglePane={togglePane}\n          data-playwright-test-label='action-row'\n        />\n      )}\n      <ReflexContainer\n        orientation='vertical'\n        data-playwright-test-label='main-container'\n      >\n        {areInstructionsDisplayable && showInstructions && (\n          <ReflexElement\n            flex={instructionPane.flex}\n            {...resizeProps}\n            name='instructionPane'\n            data-playwright-test-label='instruction-pane'\n          >\n            {instructions}\n          </ReflexElement>\n        )}\n        {areInstructionsDisplayable && showInstructions && (\n          <ReflexSplitter propagate={true} {...resizeProps} />\n        )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "107ba7ed42b126da5f09cf8422f80c57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "!displayEditorConsole && showConsole; const { codePane, editorPane, instructionPane, notesPane, previewPane, testsPane } = layoutState; const editorPaneFlex = !displayPreviewConsole && !displayPreviewPane ? 1 : editorPane.flex; return ( <div className='desktop-layout' data-playwright-test-label='desktop-layout'> {isProjectStyle && ( <ActionRow hasPreview={hasPreview} hasNotes={!!notes} areInstructionsDisplayable={areInstructionsDisplayable} isDailyCodingChallenge={isDailyCodingChallenge} dailyCodingChallengeLanguage={dailyCodingChallengeLanguage} setDailyCodingChallengeLanguage={setDailyCodingChallengeLanguage} showConsole={showConsole} showNotes={showNotes} showInstructions={showInstructions} showPreviewPane={showPreviewPane} showPreviewPortal={showPreviewPortal} togglePane={togglePane} data-playwright-test-label='action-row' /> )} <ReflexContainer orientation='vertical' data-playwright-test-label='main-container' > {areInstructionsDisplayable && showInstructions && ( <ReflexElement flex={instructionPane.flex} {...resizeProps} name='instructionPane' data-playwright-test-label='instruction-pane' > {instructions} </ReflexElement> )} {areInstructionsDisplayable && showInstructions && ( <ReflexSplitter propagate={true} {...resizeProps} /> )}\n\n<ReflexElement\n          flex={editorPaneFlex}\n          name='editorPane'\n          {...resizeProps}\n          data-playwright-test-label='editor-pane'\n        >\n          {!isEmpty(challengeFiles) && (\n            <ReflexContainer key='codePane' orientation='horizontal'>\n              <ReflexElement\n                name='codePane'\n                {...(displayEditorConsole && { flex: codePane.flex })}\n                {...reflexProps}\n                {...resizeProps}\n              >\n                {editor}\n              </ReflexElement>\n              {displayEditorConsole && (\n                <ReflexSplitter propagate={true} {...resizeProps} />\n              )}\n              {displayEditorConsole && (\n                <ReflexElement\n                  flex={testsPane.flex}\n                  {...reflexProps}\n                  {...resizeProps}\n                >\n                  {testOutput}\n                </ReflexElement>\n              )}\n            </ReflexContainer>\n          )}\n        </ReflexElement>\n        {displayNotes && <ReflexSplitter propagate={true} {...resizeProps} />}\n        {displayNotes && (\n          <ReflexElement\n            name='notesPane'\n            flex={notesPane.flex}\n            {...resizeProps}\n          >\n            <Notes notes={notes} />\n          </ReflexElement>\n        )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "0e4f7b1191e767cca9935b37caca62a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "{areInstructionsDisplayable && showInstructions && ( <ReflexSplitter propagate={true} {...resizeProps} /> )} <ReflexElement flex={editorPaneFlex} name='editorPane' {...resizeProps} data-playwright-test-label='editor-pane' > {!isEmpty(challengeFiles) && ( <ReflexContainer key='codePane' orientation='horizontal'> <ReflexElement name='codePane' {...(displayEditorConsole && { flex: codePane.flex })} {...reflexProps} {...resizeProps} > {editor} </ReflexElement> {displayEditorConsole && ( <ReflexSplitter propagate={true} {...resizeProps} /> )} {displayEditorConsole && ( <ReflexElement flex={testsPane.flex} {...reflexProps} {...resizeProps} > {testOutput} </ReflexElement> )} </ReflexContainer> )} </ReflexElement> {displayNotes && <ReflexSplitter propagate={true} {...resizeProps} />} {displayNotes && ( <ReflexElement name='notesPane' flex={notesPane.flex} {...resizeProps} > <Notes notes={notes} /> </ReflexElement> )}\n\n{(displayPreviewPane || displayPreviewConsole) && (\n          <ReflexSplitter\n            data-playwright-test-label='preview-left-splitter'\n            propagate={true}\n            {...resizeProps}\n          />\n        )}\n        {(displayPreviewPane || displayPreviewConsole) && (\n          <ReflexElement\n            flex={previewPane.flex}\n            name='previewPane'\n            {...resizeProps}\n            data-playwright-test-label='preview-pane'\n          >\n            <ReflexContainer orientation='horizontal'>\n              {displayPreviewPane && (\n                <ReflexElement {...reflexProps}>{preview}</ReflexElement>\n              )}\n              {displayPreviewPane && displayPreviewConsole && (\n                <ReflexSplitter propagate={true} {...resizeProps} />\n              )}\n              {displayPreviewConsole && (\n                <ReflexElement\n                  name='testsPane'\n                  {...(displayPreviewPane && { flex: testsPane.flex })}\n                  {...resizeProps}\n                >\n                  {testOutput}\n                </ReflexElement>\n              )}\n            </ReflexContainer>\n          </ReflexElement>\n        )}\n      </ReflexContainer>\n      {displayPreviewPortal && (\n        <PreviewPortal onResize={onPreviewResize} windowTitle={windowTitle}>\n          {preview}\n        </PreviewPortal>\n      )}\n    </div>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "60e3abb37d729b496eba1fb5d3ad6813",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
    "source_type": "git_repo",
    "title": "desktop-layout",
    "content": "notes={notes} /> </ReflexElement> )} {(displayPreviewPane || displayPreviewConsole) && ( <ReflexSplitter data-playwright-test-label='preview-left-splitter' propagate={true} {...resizeProps} /> )} {(displayPreviewPane || displayPreviewConsole) && ( <ReflexElement flex={previewPane.flex} name='previewPane' {...resizeProps} data-playwright-test-label='preview-pane' > <ReflexContainer orientation='horizontal'> {displayPreviewPane && ( <ReflexElement {...reflexProps}>{preview}</ReflexElement> )} {displayPreviewPane && displayPreviewConsole && ( <ReflexSplitter propagate={true} {...resizeProps} /> )} {displayPreviewConsole && ( <ReflexElement name='testsPane' {...(displayPreviewPane && { flex: testsPane.flex })} {...resizeProps} > {testOutput} </ReflexElement> )} </ReflexContainer> </ReflexElement> )} </ReflexContainer> {displayPreviewPortal && ( <PreviewPortal onResize={onPreviewResize} windowTitle={windowTitle}> {preview} </PreviewPortal> )} </div> ); };\n\nDesktopLayout.displayName = 'DesktopLayout';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DesktopLayout);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12047,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\desktop-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "b10b87296e802267219200b824b61dd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor-tabs.tsx",
    "source_type": "git_repo",
    "title": "editor-tabs",
    "content": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport i18next from 'i18next';\nimport { sortChallengeFiles } from '../../../../utils/sort-challengefiles';\nimport { ChallengeFile, ChallengeFiles } from '../../../redux/prop-types';\nimport { toggleVisibleEditor } from '../redux/actions';\nimport {\n  visibleEditorsSelector,\n  challengeFilesSelector\n} from '../redux/selectors';\n\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';\nimport type { VisibleEditors } from './multifile-editor';\n\ninterface EditorTabsProps {\n  challengeFiles: ChallengeFiles;\n  toggleVisibleEditor: typeof toggleVisibleEditor;\n  visibleEditors: VisibleEditors;\n}\n\nconst mapStateToProps = createSelector(\n  visibleEditorsSelector,\n  challengeFilesSelector,\n  (visibleEditors: VisibleEditors, challengeFiles: ChallengeFiles) => ({\n    visibleEditors,\n    challengeFiles\n  })\n);\n\nconst mapDispatchToProps = {\n  toggleVisibleEditor\n};\n\nclass EditorTabs extends Component<EditorTabsProps> {\n  static displayName: string;\n  isMobile = window.innerWidth < MAX_MOBILE_WIDTH;\n  render() {\n    const { challengeFiles, toggleVisibleEditor, visibleEditors } = this.props;\n    const isMobile = window.innerWidth < MAX_MOBILE_WIDTH;\n    const sortedFiles = sortChallengeFiles(challengeFiles ?? []);\n    const showTabs = !isMobile || sortedFiles.length > 1;\n    return (\n      showTabs && (\n        <div className='monaco-editor-tabs'>\n          {sortedFiles.map((challengeFile: ChallengeFile) => (\n            <button\n              aria-expanded={\n                // @ts-expect-error TODO: validate challengeFile on io-boundary,\n                // then we won't need to ignore this error and we can drop the\n                // nullish handling.\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                visibleEditors[challengeFile.fileKey] ?? 'false'\n              }\n              key={challengeFile.fileKey}\n              onClick={() => toggleVisibleEditor(challengeFile.fileKey)}\n            >\n              {`${challengeFile.name}.${challengeFile.ext}`}{' '}\n              <span className='sr-only'>\n                {i18next.t('learn.editor-tabs.editor')}\n              </span>\n            </button>\n          ))}\n        </div>\n      )\n    );\n  }\n}\n\nEditorTabs.displayName = 'EditorTabs';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditorTabs);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2454,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor-tabs.tsx",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "41cb4e55115e32e543b416854425ef12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "/* Monaco editor has its own font-family rule, which overrides ours */\n.monaco-editor {\n  font-family: inherit;\n}\n\n.monaco-editor .margin-view-overlays .line-numbers,\n.monaco-editor .margin-view-overlays .myLineDecoration + .line-numbers {\n  color: var(--primary-color);\n}\n\n.monaco-scrollable-element {\n  overflow: visible !important;\n}\n\n.monaco-editor-background {\n  overflow: visible !important;\n  contain: none !important;\n}\n\n.vs .monaco-scrollable-element > .scrollbar > .slider {\n  z-index: 11;\n}\n\n/* NVDA skips the textarea in browse mode if there is no size */\ntextarea.inputarea {\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.editor-container {\n  background: var(--editor-background);\n}\n\n.breadcrumbs-demo {\n  font-size: 16px;\n  margin: 0;\n  padding: 10px;\n  height: var(--breadcrumbs-height);\n}\n\n@media screen and (max-height: 300px) {\n  .default-layout:has(#mobile-layout) .breadcrumbs-demo {\n    height: auto;\n    padding-block: 2px;\n  }\n}\n\n.editor-upper-jaw,\n.editor-lower-jaw {\n  padding-inline: 0 15px;\n  padding-block: 15px;\n}\n\n.editor-upper-jaw {\n  max-width: unset !important;\n}\n\n.editor-upper-jaw code,\n.editor-lower-jaw code {\n  white-space: pre-wrap;\n}\n\n.editor-file-name {\n  font-size: 18px;\n  font-weight: bold;\n  border-bottom: 1px solid var(--quaternary-background);\n  padding-left: 11px;\n  overflow: hidden;\n}\n\n.action-row-container,\n.description-container {\n  background-color: var(--secondary-background);\n  padding: 1rem;\n  border: 2px solid var(--quaternary-background);\n  /* the max-width is set to keep the characters in a line at below ~70 to help\n  with readability */\n  max-width: 600px;\n}\n\n.challenge-description-header {\n  display: flex;\n  align-items: center;\n  gap: 7px;\n  margin: 0.1em 0 0.6rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "1aff3f485162196d890ad3fe59c5f7a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": ".editor-upper-jaw { max-width: unset !important; } .editor-upper-jaw code, .editor-lower-jaw code { white-space: pre-wrap; } .editor-file-name { font-size: 18px; font-weight: bold; border-bottom: 1px solid var(--quaternary-background); padding-left: 11px; overflow: hidden; } .action-row-container, .description-container { background-color: var(--secondary-background); padding: 1rem; border: 2px solid var(--quaternary-background); /* the max-width is set to keep the characters in a line at below ~70 to help with readability */ max-width: 600px; } .challenge-description-header { display: flex; align-items: center; gap: 7px; margin: 0.1em 0 0.6rem; }\n\n.description-container .breadcrumbs {\n  display: flex;\n  justify-content: start;\n  gap: 1rem;\n  list-style-type: none;\n  font-size: 16px;\n  text-align: center;\n  margin-bottom: 0.8rem;\n  padding-inline-start: 0;\n  width: 100%;\n  min-width: 0;\n  color: var(--foreground-quaternary);\n}\n\n.description-container .breadcrumbs li:first-child {\n  position: relative;\n  max-width: 35%;\n}\n\n.description-container .breadcrumbs li:first-child:after {\n  content: ' >';\n  font-size: 17px;\n  position: absolute;\n  top: 0;\n  right: -0.7rem;\n}\n\n.description-container .breadcrumbs li:nth-child(2) {\n  min-width: 0;\n}\n\n.description-container .breadcrumbs a {\n  width: 100%;\n  text-decoration: none;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  border-bottom: 1px solid var(--foreground-quaternary);\n}\n\n.description-container .breadcrumbs a:focus {\n  background-color: inherit;\n}\n\n.description-container h1 {\n  color: var(--secondary-color);\n  font-size: 1.1rem;\n  font-weight: 700;\n  line-height: 1.1;\n  margin: 0;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "3ed0d9b16a167aced1a51016f0a84ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "var(--foreground-quaternary); } .description-container .breadcrumbs li:first-child { position: relative; max-width: 35%; } .description-container .breadcrumbs li:first-child:after { content: ' >'; font-size: 17px; position: absolute; top: 0; right: -0.7rem; } .description-container .breadcrumbs li:nth-child(2) { min-width: 0; } .description-container .breadcrumbs a { width: 100%; text-decoration: none; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block; border-bottom: 1px solid var(--foreground-quaternary); } .description-container .breadcrumbs a:focus { background-color: inherit; } .description-container h1 { color: var(--secondary-color); font-size: 1.1rem; font-weight: 700; line-height: 1.1; margin: 0; }\n\n.description-highlighter {\n  background-color: var(--secondary-background);\n  opacity: 1;\n  animation-name: example;\n  animation-duration: 2s;\n  animation-delay: 0.5s;\n}\n\n.action-row-container button[aria-hidden='true'] {\n  display: none;\n}\n\n@keyframes example {\n  from {\n    background-color: var(--highlight-background);\n  }\n\nto {\n    background-color: var(--secondary-background);\n  }\n}\n\n#description p:last-child {\n  margin: 0px;\n}\n\n.myEditableLineDecoration {\n  background-color: var(--gray-45);\n  width: 15px !important;\n  margin-inline: 5px !important;\n}\n\n.myEditableLineDecoration.tests-passed {\n  background-color: #4caf50;\n}\n\n.editable-region {\n  background-color: var(--primary-background);\n  z-index: -1;\n}\n\n/* Unless we increase the z-index the help widget gets obscured by the jaws */\n.accessibilityHelpWidget {\n  z-index: 1;\n}\n\n.test-feedback {\n  display: flex;\n  padding: 0;\n  flex-direction: column;\n}\n\n.test-feedback p {\n  margin: 0.45rem 0 0;\n}\n\n.test-feedback svg {\n  height: 1.5rem;\n  width: auto;\n  margin-top: 0.5rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "5bbaeb39a5925a7c603681f6ecab3235",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "#description p:last-child { margin: 0px; } .myEditableLineDecoration { background-color: var(--gray-45); width: 15px !important; margin-inline: 5px !important; } .myEditableLineDecoration.tests-passed { background-color: #4caf50; } .editable-region { background-color: var(--primary-background); z-index: -1; } /* Unless we increase the z-index the help widget gets obscured by the jaws */ .accessibilityHelpWidget { z-index: 1; } .test-feedback { display: flex; padding: 0; flex-direction: column; } .test-feedback p { margin: 0.45rem 0 0; } .test-feedback svg { height: 1.5rem; width: auto; margin-top: 0.5rem; }\n\n.test-feedback .test-status,\n.test-feedback .hint-status {\n  display: flex;\n  gap: 0.5rem;\n  flex-direction: row;\n  margin-top: 1rem;\n}\n\n.test-status-description,\n.hint-description {\n  display: flex;\n  gap: 0.5rem;\n  width: 100%;\n}\n\n.fade-in {\n  animation-name: FadeIn;\n  animation-duration: 0.5s;\n  transition-timing-function: linear;\n}\n\n@keyframes FadeIn {\n  0% {\n    opacity: 0;\n  }\n\n/* keep test feedback contents initially hidden for 200ms*/\n  40% {\n    opacity: 0;\n  }\n\n100% {\n    opacity: 1;\n  }\n}\n\n.utility-bar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n}\n\n.utility-bar .utility-bar-top {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n}\n\n.utility-bar .utility-bar-top a {\n  width: 30%;\n}\n\n.utility-bar .utility-bar-top svg {\n  display: block;\n  margin: 0 auto;\n}\n\n.utility-bar .utility-bar-bottom {\n  width: 100%;\n  display: flex;\n  gap: 0.75rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "126ec32b482eae7d69cd3ad03c94ca88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "@keyframes FadeIn { 0% { opacity: 0; } /* keep test feedback contents initially hidden for 200ms*/ 40% { opacity: 0; } 100% { opacity: 1; } } .utility-bar { display: flex; flex-direction: column; align-items: center; gap: 20px; } .utility-bar .utility-bar-top { width: 100%; display: flex; justify-content: space-between; } .utility-bar .utility-bar-top a { width: 30%; } .utility-bar .utility-bar-top svg { display: block; margin: 0 auto; } .utility-bar .utility-bar-bottom { width: 100%; display: flex; gap: 0.75rem; }\n\n.utility-bar .utility-bar-bottom button {\n  display: flex;\n  width: 50%;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  justify-content: center;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n.progress-bar-container {\n  text-align: center;\n}\n\n.editor-lower-jaw .progress-bar-wrap-container {\n  width: 100% !important;\n  margin: 32px 0px;\n}\n\n.editor-lower-jaw .progress-bar-background-container {\n  width: 100% !important;\n}\n\n.hint-status {\n  margin-bottom: 18px;\n}\n\n.code-details {\n  font-weight: 700;\n  margin-bottom: 0.6rem;\n}\n\n.code-details-summary {\n  display: list-item;\n  cursor: pointer;\n}\n\n.editor-upper-jaw pre code {\n  white-space: pre;\n}\n\n/* overwriting default arrow styles for accessibility */\n:root {\n  --monaco-scrollbar-arrow-box-size: 0;\n  --monaco-scrollbar-arrow-icon-top-bottom: 0;\n  --monaco-scrollbar-arrow-icon-left: 0;\n  --monaco-scrollbar-arrow-icon-size: 11px;\n  --monaco-scrollbar-arrow-icon-font-size: 11px;\n}\n\n/* z-index is needed for arrox box and icons because the scrollbar may\n   overlap the arrow buttons when zoomed in */",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "f898740d1c71c756b95cca2532548f55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "} .editor-lower-jaw .progress-bar-background-container { width: 100% !important; } .hint-status { margin-bottom: 18px; } .code-details { font-weight: 700; margin-bottom: 0.6rem; } .code-details-summary { display: list-item; cursor: pointer; } .editor-upper-jaw pre code { white-space: pre; } /* overwriting default arrow styles for accessibility */ :root { --monaco-scrollbar-arrow-box-size: 0; --monaco-scrollbar-arrow-icon-top-bottom: 0; --monaco-scrollbar-arrow-icon-left: 0; --monaco-scrollbar-arrow-icon-size: 11px; --monaco-scrollbar-arrow-icon-font-size: 11px; } /* z-index is needed for arrox box and icons because the scrollbar may overlap the arrow buttons when zoomed in */\n\n/* arrow box - by default the width is the same as the scrollbar,\n   so we only need to ajdust the height */\n.vs .monaco-scrollable-element .scrollbar .arrow-background {\n  height: var(--monaco-scrollbar-arrow-box-size) !important;\n  background-color: #666;\n  z-index: 199;\n}\n\n/* arrow icons - includes both up and down */\n.vs .monaco-scrollable-element .scrollbar .scra {\n  top: var(--monaco-scrollbar-arrow-icon-top-bottom) !important;\n  left: var(--monaco-scrollbar-arrow-icon-left) !important;\n  width: var(--monaco-scrollbar-arrow-icon-size) !important;\n  height: var(--monaco-scrollbar-arrow-icon-size) !important;\n  font-size: var(--monaco-scrollbar-arrow-icon-font-size) !important;\n  color: white;\n  z-index: 199;\n}\n\n/* down arrow icon only */\n.vs .monaco-scrollable-element .scrollbar .codicon-scrollbar-button-down {\n  top: unset !important;\n  bottom: var(--monaco-scrollbar-arrow-icon-top-bottom) !important;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "f2320c0456c9aa2ab75cacaafe3a3508",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
    "source_type": "git_repo",
    "title": "editor",
    "content": "scrollbar, so we only need to ajdust the height */ .vs .monaco-scrollable-element .scrollbar .arrow-background { height: var(--monaco-scrollbar-arrow-box-size) !important; background-color: #666; z-index: 199; } /* arrow icons - includes both up and down */ .vs .monaco-scrollable-element .scrollbar .scra { top: var(--monaco-scrollbar-arrow-icon-top-bottom) !important; left: var(--monaco-scrollbar-arrow-icon-left) !important; width: var(--monaco-scrollbar-arrow-icon-size) !important; height: var(--monaco-scrollbar-arrow-icon-size) !important; font-size: var(--monaco-scrollbar-arrow-icon-font-size) !important; color: white; z-index: 199; } /* down arrow icon only */ .vs .monaco-scrollable-element .scrollbar .codicon-scrollbar-button-down { top: unset !important; bottom: var(--monaco-scrollbar-arrow-icon-top-bottom) !important; }\n\n/* we can live with no color change for hover state if browser doesn't\n   support :has (the mouse cursor will still change to pointer) */\n@supports (selector(html:has(body))) {\n  .vs .monaco-scrollable-element .scrollbar .arrow-background:hover,\n  .vs\n    .monaco-scrollable-element\n    .scrollbar\n    .arrow-background:has(+ .codicon:hover) {\n    cursor: pointer;\n    background-color: #222 !important;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 7154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.css",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "3d0d0a95cebae5c0d273a38f47dbd43f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "import * as ReactDOMServer from 'react-dom/server';\nimport Loadable from '@loadable/component';\n// eslint-disable-next-line import/no-duplicates\nimport type * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport type {\n  IRange,\n  editor\n  // eslint-disable-next-line import/no-duplicates\n} from 'monaco-editor/esm/vs/editor/editor.api';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport Prism from 'prismjs';\nimport React, { useEffect, Suspense, MutableRefObject, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport store from 'store';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 0,
    "total_chunks": 37
  },
  {
    "id": "b2f821a8b2ccc5b496d2eb9f79d02729",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "import * as ReactDOMServer from 'react-dom/server';\nimport Loadable from '@loadable/component';\n// eslint-disable-next-line import/no-duplicates\nimport type * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport type {\n  IRange,\n  editor\n  // eslint-disable-next-line import/no-duplicates\n} from 'monaco-editor/esm/vs/editor/editor.api';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport Prism from 'prismjs';\nimport React, { useEffect, Suspense, MutableRefObject, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport store from 'store';\n\nimport { debounce } from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { Loader } from '../../../components/helpers';\nimport { LocalStorageThemes } from '../../../redux/types';\nimport { saveChallenge } from '../../../redux/actions';\nimport {\n  isDonationModalOpenSelector,\n  isSignedInSelector,\n  themeSelector\n} from '../../../redux/selectors';\nimport type {\n  ChallengeFiles,\n  Dimensions,\n  ResizeProps,\n  Test\n} from '../../../redux/prop-types';\nimport { editorToneOptions } from '../../../utils/tone/editor-config';\nimport { editorNotes } from '../../../utils/tone/editor-notes';\nimport {\n  canSaveToDB,\n  challengeTypes\n} from '../../../../../shared/config/challenge-types';\nimport {\n  executeChallenge,\n  saveEditorContent,\n  setEditorFocusability,\n  updateFile,\n  submitChallenge,\n  initTests,\n  stopResetting,\n  openModal,\n  resetAttempts\n} from '../redux/actions';\nimport {\n  attemptsSelector,\n  canFocusEditorSelector,\n  challengeMetaSelector,\n  challengeTestsSelector,\n  isResettingSelector,\n  isProjectPreviewModalOpenSelector,\n  isChallengeCompletedSelector\n} from '../redux/selectors';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport {\n  enhancePrismAccessibility,\n  makePrismCollapsible,\n  setScrollbarArrowStyles\n} from '../utils/index';\nimport { initializeMathJax, isMathJaxAllowed } from '../../../utils/math-jax';\nimport { getScrollbarWidth } from '../../../utils/scrollbar-width';\nimport { isProjectBased } from '../../../utils/curriculum-layout';\nimport envConfig from '../../../../config/env.json';\nimport LowerJaw from './lower-jaw';\nimport './editor.css';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 1,
    "total_chunks": 37
  },
  {
    "id": "9c5b1a9e1240083356790e72c7fe6403",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "from '../../../utils/tone/editor-notes'; import { canSaveToDB, challengeTypes } from '../../../../../shared/config/challenge-types'; import { executeChallenge, saveEditorContent, setEditorFocusability, updateFile, submitChallenge, initTests, stopResetting, openModal, resetAttempts } from '../redux/actions'; import { attemptsSelector, canFocusEditorSelector, challengeMetaSelector, challengeTestsSelector, isResettingSelector, isProjectPreviewModalOpenSelector, isChallengeCompletedSelector } from '../redux/selectors'; import GreenPass from '../../../assets/icons/green-pass'; import { enhancePrismAccessibility, makePrismCollapsible, setScrollbarArrowStyles } from '../utils/index'; import { initializeMathJax, isMathJaxAllowed } from '../../../utils/math-jax'; import { getScrollbarWidth } from '../../../utils/scrollbar-width'; import { isProjectBased } from '../../../utils/curriculum-layout'; import envConfig from '../../../../config/env.json'; import LowerJaw from './lower-jaw'; import './editor.css';\n\nconst MonacoEditor = Loadable(() => import('react-monaco-editor'));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 2,
    "total_chunks": 37
  },
  {
    "id": "efd81b2dd7c0878cc0d0895190a83da2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "} from '../../../../../shared/config/challenge-types'; import { executeChallenge, saveEditorContent, setEditorFocusability, updateFile, submitChallenge, initTests, stopResetting, openModal, resetAttempts } from '../redux/actions'; import { attemptsSelector, canFocusEditorSelector, challengeMetaSelector, challengeTestsSelector, isResettingSelector, isProjectPreviewModalOpenSelector, isChallengeCompletedSelector } from '../redux/selectors'; import GreenPass from '../../../assets/icons/green-pass'; import { enhancePrismAccessibility, makePrismCollapsible, setScrollbarArrowStyles } from '../utils/index'; import { initializeMathJax, isMathJaxAllowed } from '../../../utils/math-jax'; import { getScrollbarWidth } from '../../../utils/scrollbar-width'; import { isProjectBased } from '../../../utils/curriculum-layout'; import envConfig from '../../../../config/env.json'; import LowerJaw from './lower-jaw'; import './editor.css'; const MonacoEditor = Loadable(() => import('react-monaco-editor'));\n\nexport interface EditorProps {\n  attempts: number;\n  canFocus: boolean;\n  challengeFiles: ChallengeFiles;\n  challengeType: number;\n  containerRef?: React.RefObject<HTMLElement>;\n  block: string;\n  superBlock: string;\n  description: string;\n  dimensions?: Dimensions;\n  editorRef: MutableRefObject<editor.IStandaloneCodeEditor | undefined>;\n  executeChallenge: (options?: { showCompletionModal: boolean }) => void;\n  fileKey: string;\n  canFocusOnMountRef: MutableRefObject<boolean>;\n  initTests: (tests: Test[]) => void;\n  initialTests: Test[];\n  isMobileLayout: boolean;\n  isResetting: boolean;\n  isSignedIn: boolean;\n  isUsingKeyboardInTablist: boolean;\n  openHelpModal: () => void;\n  openResetModal: () => void;\n  resizeProps: ResizeProps;\n  saveChallenge: () => void;\n  saveEditorContent: () => void;\n  setEditorFocusability: (isFocusable: boolean) => void;\n  submitChallenge: () => void;\n  stopResetting: () => void;\n  resetAttempts: () => void;\n  tests: Test[];\n  theme: LocalStorageThemes;\n  title: string;\n  showProjectPreview: boolean;\n  previewOpen: boolean;\n  updateFile: (object: {\n    fileKey: string;\n    contents: string;\n    editableRegionBoundaries?: number[];\n  }) => void;\n  usesMultifileEditor?: boolean;\n  isChallengeCompleted: boolean;\n  showIndependentLowerJaw?: boolean;\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 3,
    "total_chunks": 37
  },
  {
    "id": "772745ad72ff348cf7dbb4e946e23fbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "=> void; initialTests: Test[]; isMobileLayout: boolean; isResetting: boolean; isSignedIn: boolean; isUsingKeyboardInTablist: boolean; openHelpModal: () => void; openResetModal: () => void; resizeProps: ResizeProps; saveChallenge: () => void; saveEditorContent: () => void; setEditorFocusability: (isFocusable: boolean) => void; submitChallenge: () => void; stopResetting: () => void; resetAttempts: () => void; tests: Test[]; theme: LocalStorageThemes; title: string; showProjectPreview: boolean; previewOpen: boolean; updateFile: (object: { fileKey: string; contents: string; editableRegionBoundaries?: number[]; }) => void; usesMultifileEditor?: boolean; isChallengeCompleted: boolean; showIndependentLowerJaw?: boolean; }\n\n// TODO: this is grab bag of unrelated properties.  There's no need for them to\n// all be in the same object.\ninterface EditorProperties {\n  editor?: editor.IStandaloneCodeEditor;\n  model?: editor.ITextModel;\n  descriptionZoneId: string;\n  insideEditDecId: string;\n  descriptionZoneTop: number;\n  outputZoneTop: number;\n  outputZoneId: string;\n  descriptionNode?: HTMLDivElement;\n  descriptionWidget?: editor.IContentWidget;\n  outputWidget?: editor.IOverlayWidget;\n}\n\nconst mapStateToProps = createSelector(\n  attemptsSelector,\n  canFocusEditorSelector,\n  challengeMetaSelector,\n  isDonationModalOpenSelector,\n  isProjectPreviewModalOpenSelector,\n  isResettingSelector,\n  isSignedInSelector,\n  challengeTestsSelector,\n  isChallengeCompletedSelector,\n  themeSelector,\n  (\n    attempts: number,\n    canFocus: boolean,\n    { challengeType }: { challengeType: number },\n    open,\n    previewOpen: boolean,\n    isResetting: boolean,\n    isSignedIn: boolean,\n    tests: [{ text: string; testString: string; message?: string }],\n    isChallengeCompleted: boolean,\n    theme: LocalStorageThemes\n  ) => ({\n    attempts,\n    canFocus: open ? false : canFocus,\n    challengeType,\n    previewOpen,\n    isResetting,\n    isSignedIn,\n    tests,\n    isChallengeCompleted,\n    theme\n  })\n);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 37
  },
  {
    "id": "17001159b2637b2d41e753201dcb4256",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "outputZoneTop: number; outputZoneId: string; descriptionNode?: HTMLDivElement; descriptionWidget?: editor.IContentWidget; outputWidget?: editor.IOverlayWidget; } const mapStateToProps = createSelector( attemptsSelector, canFocusEditorSelector, challengeMetaSelector, isDonationModalOpenSelector, isProjectPreviewModalOpenSelector, isResettingSelector, isSignedInSelector, challengeTestsSelector, isChallengeCompletedSelector, themeSelector, ( attempts: number, canFocus: boolean, { challengeType }: { challengeType: number }, open, previewOpen: boolean, isResetting: boolean, isSignedIn: boolean, tests: [{ text: string; testString: string; message?: string }], isChallengeCompleted: boolean, theme: LocalStorageThemes ) => ({ attempts, canFocus: open ? false : canFocus, challengeType, previewOpen, isResetting, isSignedIn, tests, isChallengeCompleted, theme }) );\n\n// type ActionDispatchGeneric<P, T> = (payload: P) => ({type: T, payload: P});\n\nconst mapDispatchToProps = {\n  executeChallenge,\n  saveChallenge,\n  saveEditorContent,\n  setEditorFocusability,\n  updateFile,\n  submitChallenge,\n  initTests,\n  stopResetting,\n  resetAttempts,\n  openHelpModal: () => openModal('help'),\n  openResetModal: () => openModal('reset')\n};\n\nconst modeMap = {\n  css: 'css',\n  html: 'html',\n  js: 'javascript',\n  jsx: 'javascript',\n  ts: 'typescript',\n  py: 'python',\n  python: 'python'\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 5,
    "total_chunks": 37
  },
  {
    "id": "3f1348a912d32be9304fddefeb1e87e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "isChallengeCompleted: boolean, theme: LocalStorageThemes ) => ({ attempts, canFocus: open ? false : canFocus, challengeType, previewOpen, isResetting, isSignedIn, tests, isChallengeCompleted, theme }) ); // type ActionDispatchGeneric<P, T> = (payload: P) => ({type: T, payload: P}); const mapDispatchToProps = { executeChallenge, saveChallenge, saveEditorContent, setEditorFocusability, updateFile, submitChallenge, initTests, stopResetting, resetAttempts, openHelpModal: () => openModal('help'), openResetModal: () => openModal('reset') }; const modeMap = { css: 'css', html: 'html', js: 'javascript', jsx: 'javascript', ts: 'typescript', py: 'python', python: 'python' };\n\nlet monacoThemesDefined = false;\nconst defineMonacoThemes = (\n  monaco: typeof monacoEditor,\n  options: { usesMultifileEditor: boolean }\n) => {\n  if (monacoThemesDefined) {\n    return;\n  }\n  monacoThemesDefined = true;\n  const yellowColor = 'FFFF00';\n  const lightBlueColor = '9CDCFE';\n  const darkBlueColor = '00107E';\n  monaco.editor.defineTheme('vs-dark-custom', {\n    base: 'vs-dark',\n    inherit: true,\n    colors: {\n      'editor.background': '#2a2a40',\n      'editor.lineHighlightBorder': '#0e4470'\n    },\n    rules: [\n      { token: 'delimiter.js', foreground: lightBlueColor },\n      { token: 'delimiter.parenthesis.js', foreground: yellowColor },\n      { token: 'delimiter.array.js', foreground: yellowColor },\n      { token: 'delimiter.bracket.js', foreground: yellowColor }\n    ]\n  });\n  monaco.editor.defineTheme('vs-custom', {\n    base: 'vs',\n    inherit: true,\n    // TODO: Use actual color from style-guide\n    colors: {\n      'editor.background': options.usesMultifileEditor ? '#eeeeee' : '#ffffff',\n      'editor.lineHighlightBorder': '#cee8fc'\n    },\n    rules: [{ token: 'identifier.js', foreground: darkBlueColor }]\n  });\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 6,
    "total_chunks": 37
  },
  {
    "id": "79bd51653ff2f66b3cf24567263e8e56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "= '00107E'; monaco.editor.defineTheme('vs-dark-custom', { base: 'vs-dark', inherit: true, colors: { 'editor.background': '#2a2a40', 'editor.lineHighlightBorder': '#0e4470' }, rules: [ { token: 'delimiter.js', foreground: lightBlueColor }, { token: 'delimiter.parenthesis.js', foreground: yellowColor }, { token: 'delimiter.array.js', foreground: yellowColor }, { token: 'delimiter.bracket.js', foreground: yellowColor } ] }); monaco.editor.defineTheme('vs-custom', { base: 'vs', inherit: true, // TODO: Use actual color from style-guide colors: { 'editor.background': options.usesMultifileEditor ? '#eeeeee' : '#ffffff', 'editor.lineHighlightBorder': '#cee8fc' }, rules: [{ token: 'identifier.js', foreground: darkBlueColor }] }); };\n\nconst initialData: EditorProperties = {\n  descriptionZoneId: '',\n  insideEditDecId: '',\n  descriptionZoneTop: 0,\n  outputZoneId: '',\n  outputZoneTop: 0\n};\n\nconst Editor = (props: EditorProps): JSX.Element => {\n  const { t } = useTranslation();\n  const {\n    editorRef,\n    initTests,\n    resetAttempts,\n    isMobileLayout,\n    challengeFiles,\n    fileKey\n  } = props;\n  // These refs are used during initialisation of the editor as well as by\n  // callbacks.  Since they have to be initialised before editorWillMount and\n  // editorDidMount are called, we cannot use useState.  Reason being that will\n  // only take effect during the next render, which is too late. We could use\n  // plain objects here, but useRef is shared between instances, so avoids\n  // unnecessary object creation.\n  const monacoRef: MutableRefObject<typeof monacoEditor | null> =\n    useRef<typeof monacoEditor>(null);\n  const dataRef = useRef<EditorProperties>({ ...initialData });\n  const [lowerJawContainer, setLowerJawContainer] =\n    React.useState<HTMLDivElement | null>(null);\n\nconst submitChallengeDebounceRef = useRef(\n    debounce(props.submitChallenge, 1000, { leading: true, trailing: false })\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 7,
    "total_chunks": 37
  },
  {
    "id": "6baadcbda54d4038f8bdc5cadcf25d1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "are called, we cannot use useState. Reason being that will // only take effect during the next render, which is too late. We could use // plain objects here, but useRef is shared between instances, so avoids // unnecessary object creation. const monacoRef: MutableRefObject<typeof monacoEditor | null> = useRef<typeof monacoEditor>(null); const dataRef = useRef<EditorProperties>({ ...initialData }); const [lowerJawContainer, setLowerJawContainer] = React.useState<HTMLDivElement | null>(null); const submitChallengeDebounceRef = useRef( debounce(props.submitChallenge, 1000, { leading: true, trailing: false }) );\n\nconst player = useRef<{\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sampler: any;\n    noteIndex: number;\n    shouldPlay: boolean | undefined;\n  }>({\n    sampler: undefined,\n    noteIndex: 0,\n    shouldPlay: store.get('fcc-sound') as boolean | undefined\n  });\n\n// since editorDidMount runs once with the initial props object, it keeps a\n  // reference to *those* props. If we want it to use the latest props, we can\n  // use a ref, since it will be updated on every render.\n  const testRef = useRef<Test[]>([]);\n  testRef.current = props.tests;\n  const attemptsRef = useRef<number>(0);\n  attemptsRef.current = props.attempts;\n\nconst challengeFile = challengeFiles?.find(\n    challengeFile => challengeFile.fileKey === fileKey\n  );\n\nconst ariaEditorName = `${challengeFile?.name}.${challengeFile?.ext}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 8,
    "total_chunks": 37
  },
  {
    "id": "4c86913c5d2fb61addf8cedce16e18b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "shouldPlay: store.get('fcc-sound') as boolean | undefined }); // since editorDidMount runs once with the initial props object, it keeps a // reference to *those* props. If we want it to use the latest props, we can // use a ref, since it will be updated on every render. const testRef = useRef<Test[]>([]); testRef.current = props.tests; const attemptsRef = useRef<number>(0); attemptsRef.current = props.attempts; const challengeFile = challengeFiles?.find( challengeFile => challengeFile.fileKey === fileKey ); const ariaEditorName = `${challengeFile?.name}.${challengeFile?.ext}`;\n\nconst options: editor.IStandaloneEditorConstructionOptions = {\n    fontSize: 18,\n    fontFamily: 'Hack-ZeroSlash, monospace',\n    scrollBeyondLastLine: true,\n    selectionHighlight: false,\n    overviewRulerBorder: false,\n    hideCursorInOverviewRuler: true,\n    guides: {\n      highlightActiveIndentation:\n        props.challengeType === challengeTypes.python ||\n        props.challengeType === challengeTypes.multifilePythonCertProject ||\n        props.challengeType === challengeTypes.pyLab ||\n        props.challengeType === challengeTypes.dailyChallengePy\n    },\n    minimap: {\n      enabled: false\n    },\n    selectOnLineNumbers: true,\n    wordWrap: 'on',\n    scrollbar: {\n      horizontal: 'hidden',\n      vertical: 'visible',\n      verticalHasArrows: true,\n      useShadows: false,\n      verticalScrollbarSize: getScrollbarWidth(),\n      // this helps the scroll bar fit properly between the arrows,\n      // but doesn't do anything for the arrows themselves\n      arrowSize: getScrollbarWidth()\n    },\n    parameterHints: {\n      enabled: false\n    },\n    tabSize:\n      props.challengeType !== challengeTypes.python &&\n      props.challengeType !== challengeTypes.multifilePythonCertProject &&\n      props.challengeType !== challengeTypes.pyLab &&\n      props.challengeType !== challengeTypes.dailyChallengePy\n        ? 2\n        : 4,\n    dragAndDrop: true,\n    lightbulb: {\n      enabled: false\n    },\n    hover: {\n      enabled: false\n    },\n    quickSuggestions: false,\n    suggestOnTriggerCharacters: false,\n    lineNumbersMinChars: 2\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 9,
    "total_chunks": 37
  },
  {
    "id": "85885e2bf773fd63c5dc4306727720df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "'hidden', vertical: 'visible', verticalHasArrows: true, useShadows: false, verticalScrollbarSize: getScrollbarWidth(), // this helps the scroll bar fit properly between the arrows, // but doesn't do anything for the arrows themselves arrowSize: getScrollbarWidth() }, parameterHints: { enabled: false }, tabSize: props.challengeType !== challengeTypes.python && props.challengeType !== challengeTypes.multifilePythonCertProject && props.challengeType !== challengeTypes.pyLab && props.challengeType !== challengeTypes.dailyChallengePy ? 2 : 4, dragAndDrop: true, lightbulb: { enabled: false }, hover: { enabled: false }, quickSuggestions: false, suggestOnTriggerCharacters: false, lineNumbersMinChars: 2 };\n\nconst getEditableRegionFromRedux = () => {\n    const { challengeFiles, fileKey } = props;\n    const edRegBounds = challengeFiles?.find(\n      challengeFile => challengeFile.fileKey === fileKey\n    )?.editableRegionBoundaries;\n    return edRegBounds ? [...edRegBounds] : [];\n  };\n\nconst editorWillMount = (monaco: typeof monacoEditor) => {\n    const { usesMultifileEditor = false } = props;\n\nmonacoRef.current = monaco;\n    defineMonacoThemes(monaco, { usesMultifileEditor });\n    // If a model is not provided, then the editor 'owns' the model it creates\n    // and will dispose of that model if it is replaced. Since we intend to\n    // swap and reuse models, we have to create our own models to prevent\n    // disposal.\n\nconst model =\n      dataRef.current.model ||\n      monaco.editor.createModel(\n        challengeFile?.contents ?? '',\n        modeMap[challengeFile?.ext ?? 'html']\n      );\n    dataRef.current.model = model;\n\nif (player.current.shouldPlay && !player.current.sampler) {\n      void import('tone').then(tone => {\n        const newSound = new tone.Sampler(editorToneOptions).toDestination();\n        player.current.sampler = newSound;\n\nconst storedVolume = (store.get('soundVolume') as number) ?? 50;\n        const calculateDecibel = -60 * (1 - storedVolume / 100);\n\nnewSound.volume.value = calculateDecibel;\n      });\n    }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 10,
    "total_chunks": 37
  },
  {
    "id": "756cc37d28e584dbe86b4fc511bb10ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "Since we intend to // swap and reuse models, we have to create our own models to prevent // disposal. const model = dataRef.current.model || monaco.editor.createModel( challengeFile?.contents ?? '', modeMap[challengeFile?.ext ?? 'html'] ); dataRef.current.model = model; if (player.current.shouldPlay && !player.current.sampler) { void import('tone').then(tone => { const newSound = new tone.Sampler(editorToneOptions).toDestination(); player.current.sampler = newSound; const storedVolume = (store.get('soundVolume') as number) ?? 50; const calculateDecibel = -60 * (1 - storedVolume / 100); newSound.volume.value = calculateDecibel; }); }\n\n// TODO: do we need to return this?\n    return { model };\n  };\n\n// Updates the model if the contents has changed. This is only necessary for\n  // changes coming from outside the editor (such as code resets).\n  const resetEditorValues = () => {\n    const { challengeFiles, fileKey } = props;\n    const { model } = dataRef.current;\n\nconst initialContents = challengeFiles?.find(\n      challengeFile => challengeFile.fileKey === fileKey\n    )?.contents;\n    if (model?.getValue() !== initialContents) {\n      model?.setValue(initialContents ?? '');\n    }\n  };\n\nconst isTabTrapped = () => !!(store.get('monacoTabTrapped') ?? true);\n\n// Monaco uses the contextKey 'editorTabMovesFocus' to control how it\n  // reacts to the Tab key. Setting it to true allows the user to tab\n  // out of the editor. False keeps it inside the editor and creates a tab.\n  const setMonacoTabTrapped = (trapped: boolean) =>\n    dataRef.current.editor?.createContextKey('editorTabMovesFocus', !trapped);\n\nconst editorDidMount = (\n    editor: editor.IStandaloneCodeEditor,\n    monaco: typeof monacoEditor\n  ) => {\n    const { isMobileLayout, isUsingKeyboardInTablist } = props;\n    // TODO this should *probably* be set on focus\n    editorRef.current = editor;\n    dataRef.current.editor = editor;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 11,
    "total_chunks": 37
  },
  {
    "id": "2fe04f86fac83b7bc4ac609badb9940d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "to control how it // reacts to the Tab key. Setting it to true allows the user to tab // out of the editor. False keeps it inside the editor and creates a tab. const setMonacoTabTrapped = (trapped: boolean) => dataRef.current.editor?.createContextKey('editorTabMovesFocus', !trapped); const editorDidMount = ( editor: editor.IStandaloneCodeEditor, monaco: typeof monacoEditor ) => { const { isMobileLayout, isUsingKeyboardInTablist } = props; // TODO this should *probably* be set on focus editorRef.current = editor; dataRef.current.editor = editor;\n\nif (hasEditableRegion()) {\n      initializeRegions();\n      if (!props.showIndependentLowerJaw) {\n        addWidgetsToRegions();\n      }\n      addContentChangeListener();\n      resetAttempts();\n      showEditableRegion(editor);\n      if (props.superBlock && isMathJaxAllowed(props.superBlock)) {\n        initializeMathJax();\n      }\n    }\n\nconst storedAccessibilityMode = () => {\n      const accessibility = store.get('accessibilityMode') as boolean;\n\nconst isMacOS = navigator.userAgent.includes('Mac OS');\n      const a11yOffText = isMacOS\n        ? t('aria.editor-a11y-off-macos', { editorName: ariaEditorName })\n        : t('aria.editor-a11y-off-non-macos', { editorName: ariaEditorName });\n      const a11yOnText = isMacOS\n        ? t('aria.editor-a11y-on-macos', { editorName: ariaEditorName })\n        : t('aria.editor-a11y-on-non-macos', { editorName: ariaEditorName });\n\nif (!accessibility) {\n        store.set('accessibilityMode', false);\n\neditor.updateOptions({\n          ariaLabel: a11yOffText\n        });\n      }\n\nif (accessibility) {\n        editor.updateOptions({\n          ariaLabel: a11yOnText\n        });\n      }\n\nreturn accessibility;\n    };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 12,
    "total_chunks": 37
  },
  {
    "id": "907a2c22f21da43f02ba9452de1ef6a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "&& isMathJaxAllowed(props.superBlock)) { initializeMathJax(); } } const storedAccessibilityMode = () => { const accessibility = store.get('accessibilityMode') as boolean; const isMacOS = navigator.userAgent.includes('Mac OS'); const a11yOffText = isMacOS ? t('aria.editor-a11y-off-macos', { editorName: ariaEditorName }) : t('aria.editor-a11y-off-non-macos', { editorName: ariaEditorName }); const a11yOnText = isMacOS ? t('aria.editor-a11y-on-macos', { editorName: ariaEditorName }) : t('aria.editor-a11y-on-non-macos', { editorName: ariaEditorName }); if (!accessibility) { store.set('accessibilityMode', false); editor.updateOptions({ ariaLabel: a11yOffText }); } if (accessibility) { editor.updateOptions({ ariaLabel: a11yOnText }); } return accessibility; };\n\nconst setTabTrapped = (\n      trapped: boolean,\n      opts: { announce: boolean } = { announce: true }\n    ) => {\n      setMonacoTabTrapped(trapped);\n      store.set('monacoTabTrapped', trapped);\n      if (opts.announce) {\n        ariaAlert(\n          `${\n            trapped\n              ? t('learn.editor-alerts.tab-trapped')\n              : t('learn.editor-alerts.tab-free')\n          }`\n        );\n      }\n    };\n\n// By default, Tab will be trapped in the monaco editor, so we only need to\n    // check if the user has turned this off.\n    if (!isTabTrapped()) {\n      setTabTrapped(false, { announce: false });\n    }\n\nconst accessibilityMode = storedAccessibilityMode();\n    editor.updateOptions({\n      accessibilitySupport: accessibilityMode ? 'on' : 'auto'\n    });\n\ndocument.fonts.ready\n      .then(() => monaco.editor.remeasureFonts())\n      .catch(err => console.error(err)); // Focus should not automatically leave the 'Code' tab when using a keyboard\n    // to navigate the tablist if ( isMobileLayout || isUsingKeyboardInTablist) {\n      // Users who are using screen readers should not have to move focus from\n      // the editor to the description every time they open a challenge if (props canFocus &&",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 13,
    "total_chunks": 37
  },
  {
    "id": "e61daed19a6121a060544f4fa12d85ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "false }); } const accessibilityMode = storedAccessibilityMode(); editor.updateOptions({ accessibilitySupport: accessibilityMode ? 'on' : 'auto' }); document.fonts.ready .then(() => monaco.editor.remeasureFonts()) .catch(err => console.error(err)); // Focus should not automatically leave the 'Code' tab when using a keyboard // to navigate the tablist if ( isMobileLayout || isUsingKeyboardInTablist) { // Users who are using screen readers should not have to move focus from // the editor to the description every time they open a challenge if (props canFocus &&accessibilityMode) {\n        focusIfTargetEditor();\n      } else focusOnHotkeys();\n    }\n    // Removes keybind for intellisense\n    // Private method - hopefully changes with future version\n    // ref: https://github com/microsoft/monaco-editor/issues/102\n    /* eslint-disable */\n    // @ts-ignore\n    editor _standaloneKeybindingService addDynamicKeybinding(\n      '-editor action triggerSuggest',\n      null,\n      () => {}\n    );\n    const newLine = editor getAction('editor action insertLineAfter');\n    // @ts-ignore\n    editor _standaloneKeybindingService addDynamicKeybinding(\n      '-editor action insertLineAfter',\n      null,\n      () => {}\n    );\n    // @ts-ignore\n    editor _standaloneKeybindingService addDynamicKeybinding(\n      'editor action insertLineAfter',\n      monaco KeyMod Alt | monaco KeyCode Enter,\n      () => {\n        newLine run();\n      }\n    );\n    // @ts-ignore\n    editor _standaloneKeybindingService addDynamicKeybinding(\n      '-actions find',\n      null,\n      () => {}\n    );\n    // Make toggle tab setting in editor permanent\n    const tabFocusHotkeys =\n      OS === 2 /* Macintosh/iOS */ monaco KeyMod WinCtrl | monaco KeyMod Shift | monaco KeyCode KeyM\n        : monaco KeyMod CtrlCmd | monaco KeyCode KeyM;\n    // @ts-ignore\n    editor _standaloneKeybindingService addDynamicKeybinding(\n      'editor action toggleTabFocusMode',\n      tabFocusHotkeys,\n      () => {\n        setTabTrapped( isTabTrapped());\n      }\n    );\n    /* eslint-enable */\n    editor addAction({\n      id: 'execute-challenge',\n      label: 'Run tests',\n      keybindings: [\n        monaco",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 14,
    "total_chunks": 37
  },
  {
    "id": "b0542efacd57667920ce5829af897e69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "@ts-ignore editor _standaloneKeybindingService addDynamicKeybinding( '-actions find', null, () => {} ); // Make toggle tab setting in editor permanent const tabFocusHotkeys = OS === 2 /* Macintosh/iOS */ monaco KeyMod WinCtrl | monaco KeyMod Shift | monaco KeyCode KeyM : monaco KeyMod CtrlCmd | monaco KeyCode KeyM; // @ts-ignore editor _standaloneKeybindingService addDynamicKeybinding( 'editor action toggleTabFocusMode', tabFocusHotkeys, () => { setTabTrapped( isTabTrapped()); } ); /* eslint-enable */ editor addAction({ id: 'execute-challenge', label: 'Run tests', keybindings: [ monacoKeyMod CtrlCmd | monaco KeyCode Enter,\n        monaco KeyMod WinCtrl | monaco KeyCode Enter\n      ],\n      run: () => {\n        if (props usesMultifileEditor && isProjectBased(props challengeType)) {\n          if (challengeIsComplete()) {\n            tryToSubmitChallenge();\n          } else {\n            tryToExecuteChallenge();\n          }\n        } else {\n          props executeChallenge({ showCompletionModal: true });\n        }\n      }\n    });\n    editor addAction({\n      id: 'leave-editor',\n      label: 'Leave editor',\n      keybindings: [monaco KeyCode Escape],\n      run: () => {\n        focusOnHotkeys();\n        props setEditorFocusability(false);\n      }\n    });\n    editor addAction({\n      id: 'save-editor-content',\n      label: 'Save editor content',\n      keybindings: [\n        monaco KeyMod CtrlCmd | monaco KeyCode KeyS,\n        monaco KeyMod WinCtrl | monaco KeyCode KeyS\n      ],\n      run:\n        canSaveToDB(props challengeType) && props isSignedIn // save to database\n            props saveChallenge\n          : // save to local storage\n            props saveEditorContent\n    });\n    editor addAction({\n      id: 'toggle-accessibility',\n      label: 'Toggle Accessibility Mode',\n      keybindings: [\n        monaco KeyMod CtrlCmd | monaco KeyCode KeyE,\n        monaco KeyMod WinCtrl | monaco KeyCode KeyE\n      ],\n      run: () => {\n        const currentAccessibility = storedAccessibilityMode();\n\nstore.set('accessibilityMode', !currentAccessibility);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 15,
    "total_chunks": 37
  },
  {
    "id": "3d3b9f630d5e735852e5b048e33cd8fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "'Save editor content', keybindings: [ monaco KeyMod CtrlCmd | monaco KeyCode KeyS, monaco KeyMod WinCtrl | monaco KeyCode KeyS ], run: canSaveToDB(props challengeType) && props isSignedIn // save to database props saveChallenge : // save to local storage props saveEditorContent }); editor addAction({ id: 'toggle-accessibility', label: 'Toggle Accessibility Mode', keybindings: [ monaco KeyMod CtrlCmd | monaco KeyCode KeyE, monaco KeyMod WinCtrl | monaco KeyCode KeyE ], run: () => { const currentAccessibility = storedAccessibilityMode(); store.set('accessibilityMode', !currentAccessibility);\n\neditor.updateOptions({\n          accessibilitySupport: storedAccessibilityMode() ? 'on' : 'auto'\n        });\n      }\n    });\n    // Introduced as a work around for a bug in JAWS 2022\n    // https://github.com/FreedomScientific/VFO-standards-support/issues/598\n    editor.addAction({\n      id: 'toggle-aria-roledescription',\n      label: 'Toggle aria-roledescription',\n      keybindings: [\n        monaco.KeyMod.Shift | monaco.KeyMod.Alt | monaco.KeyCode.KeyR\n      ],\n      run: toggleAriaRoledescription\n    });\n    editor.addAction({\n      id: 'select-all-and-copy',\n      label: 'Select All and Copy',\n      contextMenuGroupId: '9_cutcopypaste',\n      contextMenuOrder: 3,\n      run: () => {\n        const fullSelection = editor.getModel()?.getFullModelRange();\n        if (fullSelection) {\n          editor.setSelection(fullSelection);\n          const data = editor.getModel()?.getValueInRange(fullSelection);\n          if (data) {\n            navigator.clipboard\n              .writeText(data)\n              .catch(err => console.error(err));\n          }\n        }\n      }\n    });\n    editor.onDidFocusEditorWidget(() => props.setEditorFocusability(true));\n\n// aria-roledescription is on (true) by default, check if it needs\n    // to be removed.\n    if (!getStoredAriaRoledescription()) {\n      setAriaRoledescription(false);\n    }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 16,
    "total_chunks": 37
  },
  {
    "id": "c4c29313a5a8618749127bf64d4ffbf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "'Toggle aria-roledescription', keybindings: [ monaco.KeyMod.Shift | monaco.KeyMod.Alt | monaco.KeyCode.KeyR ], run: toggleAriaRoledescription }); editor.addAction({ id: 'select-all-and-copy', label: 'Select All and Copy', contextMenuGroupId: '9_cutcopypaste', contextMenuOrder: 3, run: () => { const fullSelection = editor.getModel()?.getFullModelRange(); if (fullSelection) { editor.setSelection(fullSelection); const data = editor.getModel()?.getValueInRange(fullSelection); if (data) { navigator.clipboard .writeText(data) .catch(err => console.error(err)); } } } }); editor.onDidFocusEditorWidget(() => props.setEditorFocusability(true)); // aria-roledescription is on (true) by default, check if it needs // to be removed. if (!getStoredAriaRoledescription()) { setAriaRoledescription(false); }\n\n// Add invisible content widget over line numbers so touch users will\n    // always have a place to vertically scroll the editor.\n    const scrollGutterNode = createScrollGutterNode(editor);\n    const scrollGutterWidget = createWidget(\n      editor,\n      'scrollgutter.widget',\n      scrollGutterNode\n    );\n    editor.addContentWidget(scrollGutterWidget);\n\n// update scrollbar arrows\n    setScrollbarArrowStyles(getScrollbarWidth());\n  };\n\nconst toggleAriaRoledescription = () => {\n    const newRoledescription = !getStoredAriaRoledescription();\n    setAriaRoledescription(newRoledescription);\n    ariaAlert(\n      `aria-roledescription has been turned ${\n        newRoledescription ? 'on' : 'off'\n      }`\n    );\n  };\n\nconst setAriaRoledescription = (value: boolean) => {\n    const textareas = document.querySelectorAll('.monaco-editor textarea');\n    textareas.forEach(textarea => {\n      if (value) {\n        textarea.setAttribute('aria-roledescription', 'editor');\n      } else {\n        textarea.removeAttribute('aria-roledescription');\n      }\n    });\n    store.set('ariaRoledescription', value);\n  };\n\nconst getStoredAriaRoledescription = () =>\n    !!(store.get('ariaRoledescription') ?? true);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 17,
    "total_chunks": 37
  },
  {
    "id": "c9040089f77b06293dd6510b3a4d2950",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "scrollGutterWidget = createWidget( editor, 'scrollgutter.widget', scrollGutterNode ); editor.addContentWidget(scrollGutterWidget); // update scrollbar arrows setScrollbarArrowStyles(getScrollbarWidth()); }; const toggleAriaRoledescription = () => { const newRoledescription = !getStoredAriaRoledescription(); setAriaRoledescription(newRoledescription); ariaAlert( `aria-roledescription has been turned ${ newRoledescription ? 'on' : 'off' }` ); }; const setAriaRoledescription = (value: boolean) => { const textareas = document.querySelectorAll('.monaco-editor textarea'); textareas.forEach(textarea => { if (value) { textarea.setAttribute('aria-roledescription', 'editor'); } else { textarea.removeAttribute('aria-roledescription'); } }); store.set('ariaRoledescription', value); }; const getStoredAriaRoledescription = () => !!(store.get('ariaRoledescription') ?? true);\n\n// Borrowed from\n  // freeCodeCamp/node_modules/monaco-editor/esm/vs/base/browser/ui/aria/aria.js\n  // Uses the aria live region provided by monaco.\n  const ariaAlert = (message: string) => {\n    const ariaLive: NodeListOf<HTMLDivElement> =\n      document.querySelectorAll('.monaco-alert');\n    if (ariaLive.length > 0) {\n      const liveText = ariaLive[0];\n      liveText.textContent = message;\n      // Hack used by monaco to force older browsers to announce the update to\n      // the live region.\n      // See https://www.tpgi.com/html5-accessibility-chops-aria-rolealert-browser-support/\n      liveText.style.visibility = 'hidden';\n      liveText.style.visibility = 'visible';\n      // Need to remove message after a few seconds so screen readers don't\n      // run into it.\n      // First, track the latest message so it is shown for the full duration.\n      const time = `t${Date.now()}`;\n      liveText.dataset.timestamp = time;\n      setTimeout(function () {\n        // Now, only the latest message will have this timestamp.\n        if (liveText.dataset.timestamp === time) {\n          liveText.textContent = '';\n        }\n      }, 3000);\n    }\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 18,
    "total_chunks": 37
  },
  {
    "id": "30115617ed40b69b7aefb657020be6d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "the live region. // See https://www.tpgi.com/html5-accessibility-chops-aria-rolealert-browser-support/ liveText.style.visibility = 'hidden'; liveText.style.visibility = 'visible'; // Need to remove message after a few seconds so screen readers don't // run into it. // First, track the latest message so it is shown for the full duration. const time = `t${Date.now()}`; liveText.dataset.timestamp = time; setTimeout(function () { // Now, only the latest message will have this timestamp. if (liveText.dataset.timestamp === time) { liveText.textContent = ''; } }, 3000); } };\n\nconst descriptionZoneCallback = (\n    changeAccessor: editor.IViewZoneChangeAccessor\n  ) => {\n    const editor = dataRef.current.editor;\n    if (!editor) return;\n    const domNode = createDescription(editor);\n\n// make sure the content widget has resized before using it to set the height\n\ndomNode.style.width = `${getEditorContentWidth(editor)}px`;\n    domNode.style.display = 'block';\n    domNode.style.visibility = 'visible';\n\n// We have to wait for the viewZone to finish rendering before adjusting the\n    // position of the content widget (i.e. trigger it via onDomNodeTop). If\n    // not the editor may report the wrong value for position of the lines.\n    const viewZone = {\n      afterLineNumber: getLineBeforeEditableRegion(),\n      heightInPx: domNode.offsetHeight,\n      domNode: document.createElement('div'),\n      // This is called when the editor dimensions change and AFTER the\n      // text in the editor has shifted.\n      onDomNodeTop: () => {\n        dataRef.current.descriptionZoneTop =\n          editor.getTopForLineNumber(getLineBeforeEditableRegion() + 1) -\n          domNode.offsetHeight;\n        if (dataRef.current.descriptionWidget)\n          editor.layoutContentWidget(dataRef.current.descriptionWidget);\n      }\n    };\n\ndataRef.current.descriptionZoneId = changeAccessor.addZone(viewZone);\n  };\n\nfunction tryToExecuteChallenge() {\n    props.executeChallenge();\n  }\n\nconst tryToSubmitChallenge = submitChallengeDebounceRef.current;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 19,
    "total_chunks": 37
  },
  {
    "id": "fe9466f0b2cf26daa64f6943626df86d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "it via onDomNodeTop). If // not the editor may report the wrong value for position of the lines. const viewZone = { afterLineNumber: getLineBeforeEditableRegion(), heightInPx: domNode.offsetHeight, domNode: document.createElement('div'), // This is called when the editor dimensions change and AFTER the // text in the editor has shifted. onDomNodeTop: () => { dataRef.current.descriptionZoneTop = editor.getTopForLineNumber(getLineBeforeEditableRegion() + 1) - domNode.offsetHeight; if (dataRef.current.descriptionWidget) editor.layoutContentWidget(dataRef.current.descriptionWidget); } }; dataRef.current.descriptionZoneId = changeAccessor.addZone(viewZone); }; function tryToExecuteChallenge() { props.executeChallenge(); } const tryToSubmitChallenge = submitChallengeDebounceRef.current;\n\n// TODO: there's a potential performance gain to be had by only updating when\n  // the outputViewZone has actually changed.\n  const updateOutputViewZone = (\n    lowerJawContainer: HTMLDivElement,\n    editor?: editor.IStandaloneCodeEditor\n  ) => {\n    if (!editor) return;\n    // make sure the overlayWidget has resized before using it to set the height\n    lowerJawContainer.style.width = `${getEditorContentWidth(editor)}px`;\n    // We have to wait for the viewZone to finish rendering before adjusting the\n    // position of the overlayWidget (i.e. trigger it via onComputedHeight). If\n    // not the editor may report the wrong value for position of the lines.\n    editor.changeViewZones(changeAccessor => {\n      changeAccessor.removeZone(dataRef.current.outputZoneId);\n      const viewZone = {\n        afterLineNumber: getLastLineOfEditableRegion(),\n        heightInPx: lowerJawContainer.offsetHeight,\n        domNode: document.createElement('div'),\n        onComputedHeight: () =>\n          dataRef.current.outputWidget &&\n          editor.layoutOverlayWidget(dataRef.current.outputWidget),\n        onDomNodeTop: (top: number) => {\n          dataRef.current.outputZoneTop = top;\n          if (dataRef.current.outputWidget)\n            editor.layoutOverlayWidget(dataRef.current.outputWidget);\n        }\n      };\n      dataRef.current.outputZoneId = changeAccessor.addZone(viewZone);\n    });\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 20,
    "total_chunks": 37
  },
  {
    "id": "07bdab1a8860893495fe383b853c33f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "We have to wait for the viewZone to finish rendering before adjusting the // position of the overlayWidget (i.e. trigger it via onComputedHeight). If // not the editor may report the wrong value for position of the lines. editor.changeViewZones(changeAccessor => { changeAccessor.removeZone(dataRef.current.outputZoneId); const viewZone = { afterLineNumber: getLastLineOfEditableRegion(), heightInPx: lowerJawContainer.offsetHeight, domNode: document.createElement('div'), onComputedHeight: () => dataRef.current.outputWidget && editor.layoutOverlayWidget(dataRef.current.outputWidget), onDomNodeTop: (top: number) => { dataRef.current.outputZoneTop = top; if (dataRef.current.outputWidget) editor.layoutOverlayWidget(dataRef.current.outputWidget); } }; dataRef.current.outputZoneId = changeAccessor.addZone(viewZone); }); };\n\nfunction createDescription(editor: editor.IStandaloneCodeEditor) {\n    if (dataRef.current.descriptionNode) return dataRef.current.descriptionNode;\n    const { description, title, isChallengeCompleted } = props;\n    const jawHeading = isChallengeCompleted\n      ? document.createElement('div')\n      : document.createElement('h1');\n    jawHeading.setAttribute('id', 'content-start');\n    if (isChallengeCompleted) {\n      jawHeading.classList.add('challenge-description-header');\n      const challengeTitle = document.createElement('h1');\n      challengeTitle.innerHTML = `${title} <span class='sr-only'>${t(\n        'icons.passed'\n      )}</span>`;\n      jawHeading.appendChild(challengeTitle);\n      const checkmark = ReactDOMServer.renderToStaticMarkup(\n        <GreenPass hushScreenReaderText />\n      );\n      const completedChallengeHeader = document.createElement('div');\n      completedChallengeHeader.innerHTML = checkmark;\n      jawHeading.appendChild(completedChallengeHeader);\n    } else {\n      jawHeading.innerText = title;\n    }\n    const domNode = document.createElement('div');\n    const desc = document.createElement('div');\n    const descContainer = document.createElement('div');\n    descContainer.classList.add('description-container');\n    if (props.superBlock && isMathJaxAllowed(props.superBlock)) {\n      descContainer.classList.add('mathjax-support');\n    }\n    domNode.classList.add('editor-upper-jaw');\n    domNode.appendChild(descContainer);\n    if (isMobileLayout) descContainer.appendChild(createBreadcrumb());\n    descContainer.appendChild(jawHeading);\n    descContainer.appendChild(desc);\n    desc.innerHTML = description;\n    Prism.hooks.add('complete', enhancePrismAccessibility);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 21,
    "total_chunks": 37
  },
  {
    "id": "ab5fa340a69d57f38a5ad71246b8c6c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "document.createElement('div') : document.createElement('h1'); jawHeading.setAttribute('id', 'content-start'); if (isChallengeCompleted) { jawHeading.classList.add('challenge-description-header'); const challengeTitle = document.createElement('h1'); challengeTitle.innerHTML = `${title} <span class='sr-only'>${t( 'icons.passed' )}</span>`; jawHeading.appendChild(challengeTitle); const checkmark = ReactDOMServer.renderToStaticMarkup( <GreenPass hushScreenReaderText /> ); const completedChallengeHeader = document.createElement('div'); completedChallengeHeader.innerHTML = checkmark; jawHeading.appendChild(completedChallengeHeader); } else { jawHeading.innerText = title; } const domNode = document.createElement('div'); const desc = document.createElement('div'); const descContainer = document.createElement('div'); descContainer.classList.add('description-container'); if (props.superBlock && isMathJaxAllowed(props.superBlock)) { descContainer.classList.add('mathjax-support'); } domNode.classList.add('editor-upper-jaw'); domNode.appendChild(descContainer); if (isMobileLayout) descContainer.appendChild(createBreadcrumb()); descContainer.appendChild(jawHeading); descContainer.appendChild(desc); desc.innerHTML = description; Prism.hooks.add('complete', enhancePrismAccessibility);\n\n// To reduce confusion on the first workshop. Will need to find a better solution.\n    if (props.block !== 'workshop-curriculum-outline') {\n      Prism.hooks.add('complete', makePrismCollapsible);\n    }\n    Prism.highlightAllUnder(desc);\n\n// Since the description can be resized without React knowing about it, the\n    // zone needs updating in response.\n    const obs = new ResizeObserver(() => updateDescriptionZone());\n    obs.observe(domNode);\n\ndomNode.style.userSelect = 'text';\n\ndomNode.style.left = `${editor.getLayoutInfo().contentLeft}px`;\n    domNode.style.width = `${getEditorContentWidth(editor)}px`;\n\ndomNode.style.top = getDescriptionZoneTop();\n    dataRef.current.descriptionNode = domNode;\n    return domNode;\n  }\n\n// Take the current scrollbar width into account\n  function getEditorContentWidth(editor: editor.IStandaloneCodeEditor) {\n    return editor.getLayoutInfo().contentWidth - getScrollbarWidth();\n  }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 22,
    "total_chunks": 37
  },
  {
    "id": "337246d3b96d747767b5b4f310e41b6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "to find a better solution. if (props.block !== 'workshop-curriculum-outline') { Prism.hooks.add('complete', makePrismCollapsible); } Prism.highlightAllUnder(desc); // Since the description can be resized without React knowing about it, the // zone needs updating in response. const obs = new ResizeObserver(() => updateDescriptionZone()); obs.observe(domNode); domNode.style.userSelect = 'text'; domNode.style.left = `${editor.getLayoutInfo().contentLeft}px`; domNode.style.width = `${getEditorContentWidth(editor)}px`; domNode.style.top = getDescriptionZoneTop(); dataRef.current.descriptionNode = domNode; return domNode; } // Take the current scrollbar width into account function getEditorContentWidth(editor: editor.IStandaloneCodeEditor) { return editor.getLayoutInfo().contentWidth - getScrollbarWidth(); }\n\nfunction createLowerJawContainer(editor: editor.IStandaloneCodeEditor) {\n    if (lowerJawContainer) return lowerJawContainer;\n    const container = document.createElement('div');\n    container.classList.add('editor-lower-jaw');\n    container.setAttribute('id', 'editor-lower-jaw');\n    container.style.left = `${editor.getLayoutInfo().contentLeft}px`;\n    container.style.width = `${getEditorContentWidth(editor)}px`;\n    container.style.top = getOutputZoneTop();\n    setLowerJawContainer(container);\n    return container;\n  }\n\nfunction createScrollGutterNode(\n    editor: editor.IStandaloneCodeEditor\n  ): HTMLDivElement {\n    const scrollGutterNode = document.createElement('div');\n    const lineGutterWidth = editor.getLayoutInfo().contentLeft;\n    scrollGutterNode.style.width = `${lineGutterWidth}px`;\n    scrollGutterNode.style.left = `-${lineGutterWidth}px`;\n    scrollGutterNode.style.top = '0';\n    scrollGutterNode.style.height = '10000px';\n    scrollGutterNode.style.background = 'transparent';\n    return scrollGutterNode;\n  }\n\nfunction resetMarginDecorations() {\n    const { model, insideEditDecId } = dataRef.current;\n    const range = model?.getDecorationRange(insideEditDecId);\n    if (range) {\n      updateEditableRegion(range, { model });\n    }\n  }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 23,
    "total_chunks": 37
  },
  {
    "id": "326bb91f3852299270546d84fcf288cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "const container = document.createElement('div'); container.classList.add('editor-lower-jaw'); container.setAttribute('id', 'editor-lower-jaw'); container.style.left = `${editor.getLayoutInfo().contentLeft}px`; container.style.width = `${getEditorContentWidth(editor)}px`; container.style.top = getOutputZoneTop(); setLowerJawContainer(container); return container; } function createScrollGutterNode( editor: editor.IStandaloneCodeEditor ): HTMLDivElement { const scrollGutterNode = document.createElement('div'); const lineGutterWidth = editor.getLayoutInfo().contentLeft; scrollGutterNode.style.width = `${lineGutterWidth}px`; scrollGutterNode.style.left = `-${lineGutterWidth}px`; scrollGutterNode.style.top = '0'; scrollGutterNode.style.height = '10000px'; scrollGutterNode.style.background = 'transparent'; return scrollGutterNode; } function resetMarginDecorations() { const { model, insideEditDecId } = dataRef.current; const range = model?.getDecorationRange(insideEditDecId); if (range) { updateEditableRegion(range, { model }); } }\n\nfunction focusOnHotkeys() {\n    const currContainerRef = props.containerRef?.current;\n    if (currContainerRef) {\n      currContainerRef.focus();\n    }\n  }\n\nconst onChange = (contents: string) => {\n    const { updateFile, fileKey, isResetting } = props;\n    if (isResetting) return;\n    // TODO: now that we have getCurrentEditableRegion, should the overlays\n    // follow that directly? We could subscribe to changes to that and redraw if\n    // those imply that the positions have changed (i.e. if the content height\n    // has changed or if content is dragged between regions)\n\nconst coveringRange = getLinesCoveringEditableRegion();\n    const editableRegionBoundaries = coveringRange\n      ? [coveringRange.startLineNumber - 1, coveringRange.endLineNumber + 1]\n      : [];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 24,
    "total_chunks": 37
  },
  {
    "id": "f473451408be49b6080dc13dcd65a352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "{ const { updateFile, fileKey, isResetting } = props; if (isResetting) return; // TODO: now that we have getCurrentEditableRegion, should the overlays // follow that directly? We could subscribe to changes to that and redraw if // those imply that the positions have changed (i.e. if the content height // has changed or if content is dragged between regions) const coveringRange = getLinesCoveringEditableRegion(); const editableRegionBoundaries = coveringRange ? [coveringRange.startLineNumber - 1, coveringRange.endLineNumber + 1] : [];\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (player.current.sampler?.loaded && player.current.shouldPlay) {\n      void import('tone').then(tone => {\n        if (tone.context.state !== 'running') void tone.context.resume();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        player.current.sampler?.triggerAttack(\n          editorNotes[player.current.noteIndex]\n        );\n        player.current.noteIndex++;\n        if (player.current.noteIndex >= editorNotes.length) {\n          player.current.noteIndex = 0;\n        }\n      });\n    }\n    updateFile({ fileKey, contents, editableRegionBoundaries });\n  };\n\nfunction createBreadcrumb(): HTMLElement {\n    const { block, superBlock } = props;\n    const breadcrumb = document.createElement('nav');\n    breadcrumb.setAttribute('aria-label', `${t('aria.breadcrumb-nav')}`);\n    const breadcrumbList = document.createElement('ol'),\n      breadcrumbLeft = document.createElement('li'),\n      breadcrumbLeftLink = document.createElement('a'),\n      breadcrumbRight = document.createElement('li'),\n      breadcrumbRightLink = document.createElement('a');\n    breadcrumbLeftLink.innerHTML = t(`intro:${superBlock}.title`);\n    breadcrumbRightLink.innerHTML = t(\n      `intro:${superBlock}.blocks.${block}.title`\n    );\n    breadcrumbLeftLink.setAttribute('href', `/learn/${superBlock}`);\n    breadcrumbRightLink.setAttribute('href', `/learn/${superBlock}/#${block}`);\n    breadcrumbLeft.appendChild(breadcrumbLeftLink);\n    breadcrumbRight.appendChild(breadcrumbRightLink);\n    breadcrumbList.setAttribute(\n      'data-playwright-test-label',\n      'breadcrumb-mobile'\n    );\n    breadcrumbList.className = 'breadcrumbs';\n    breadcrumbList.appendChild(breadcrumbLeft);\n    breadcrumbList.appendChild(breadcrumbRight);\n    breadcrumb.appendChild(breadcrumbList);\n\nreturn breadcrumb;\n  }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 25,
    "total_chunks": 37
  },
  {
    "id": "b0e4bc60356a75bc66ea275f66e869f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "(player.current.noteIndex >= editorNotes.length) { player.current.noteIndex = 0; } }); } updateFile({ fileKey, contents, editableRegionBoundaries }); }; function createBreadcrumb(): HTMLElement { const { block, superBlock } = props; const breadcrumb = document.createElement('nav'); breadcrumb.setAttribute('aria-label', `${t('aria.breadcrumb-nav')}`); const breadcrumbList = document.createElement('ol'), breadcrumbLeft = document.createElement('li'), breadcrumbLeftLink = document.createElement('a'), breadcrumbRight = document.createElement('li'), breadcrumbRightLink = document.createElement('a'); breadcrumbLeftLink.innerHTML = t(`intro:${superBlock}.title`); breadcrumbRightLink.innerHTML = t( `intro:${superBlock}.blocks.${block}.title` ); breadcrumbLeftLink.setAttribute('href', `/learn/${superBlock}`); breadcrumbRightLink.setAttribute('href', `/learn/${superBlock}/#${block}`); breadcrumbLeft.appendChild(breadcrumbLeftLink); breadcrumbRight.appendChild(breadcrumbRightLink); breadcrumbList.setAttribute( 'data-playwright-test-label', 'breadcrumb-mobile' ); breadcrumbList.className = 'breadcrumbs'; breadcrumbList.appendChild(breadcrumbLeft); breadcrumbList.appendChild(breadcrumbRight); breadcrumb.appendChild(breadcrumbList); return breadcrumb; }\n\n// TODO: DRY this and the update function\n  function initializeEditableRegion(\n    range: IRange,\n    modelContext: {\n      monaco: typeof monacoEditor;\n      model: editor.ITextModel;\n    }\n  ) {\n    const { monaco, model } = modelContext;\n    const lineDecoration = {\n      range,\n      options: {\n        isWholeLine: true,\n        className: 'editable-region',\n        linesDecorationsClassName: 'myEditableLineDecoration',\n        stickiness:\n          monaco.editor.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n      }\n    };\n\nreturn model.deltaDecorations([], [lineDecoration]);\n  }\n\nfunction updateEditableRegion(\n    range: IRange,\n    modelContext: {\n      model?: editor.ITextModel;\n    },\n    options: editor.IModelDecorationOptions = {}\n  ) {\n    const { model } = modelContext;\n    const { insideEditDecId } = dataRef.current;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 26,
    "total_chunks": 37
  },
  {
    "id": "726a041d29ea5f407878917c44cde981",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "TODO: DRY this and the update function function initializeEditableRegion( range: IRange, modelContext: { monaco: typeof monacoEditor; model: editor.ITextModel; } ) { const { monaco, model } = modelContext; const lineDecoration = { range, options: { isWholeLine: true, className: 'editable-region', linesDecorationsClassName: 'myEditableLineDecoration', stickiness: monaco.editor.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges } }; return model.deltaDecorations([], [lineDecoration]); } function updateEditableRegion( range: IRange, modelContext: { model?: editor.ITextModel; }, options: editor.IModelDecorationOptions = {} ) { const { model } = modelContext; const { insideEditDecId } = dataRef.current;\n\nconst oldOptions = model?.getDecorationOptions(insideEditDecId);\n    const lineDecoration = {\n      range,\n      options: {\n        ...oldOptions,\n        ...options\n      }\n    };\n    model?.deltaDecorations([insideEditDecId], [lineDecoration]);\n  }\n\nfunction getDescriptionZoneTop() {\n    return `${dataRef.current.descriptionZoneTop}px`;\n  }\n\nfunction getOutputZoneTop() {\n    return `${dataRef.current.outputZoneTop}px`;\n  }\n\nfunction getLineBeforeEditableRegion() {\n    const range = dataRef.current.model?.getDecorationRange(\n      dataRef.current.insideEditDecId\n    );\n    return range ? range.startLineNumber - 1 : 1;\n  }\n\nfunction getLastLineOfEditableRegion() {\n    const range = dataRef.current.model?.getDecorationRange(\n      dataRef.current.insideEditDecId\n    );\n    return range ? range.endLineNumber : 1;\n  }\n\n// This Range covers all the text in the editable region,\n  const getLinesCoveringEditableRegion = () => {\n    const monaco = monacoRef.current;\n    const { model, insideEditDecId } = dataRef.current;\n    // TODO: this is a little low-level, but we should bail if there is no\n    // editable region defined.\n    if (!insideEditDecId || !model || !monaco) {\n      return null;\n    } else {\n      const currentRange = model.getDecorationRange(insideEditDecId);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 27,
    "total_chunks": 37
  },
  {
    "id": "9f79ded894558ba504ae3e20f4cfb879",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "const range = dataRef.current.model?.getDecorationRange( dataRef.current.insideEditDecId ); return range ? range.endLineNumber : 1; } // This Range covers all the text in the editable region, const getLinesCoveringEditableRegion = () => { const monaco = monacoRef.current; const { model, insideEditDecId } = dataRef.current; // TODO: this is a little low-level, but we should bail if there is no // editable region defined. if (!insideEditDecId || !model || !monaco) { return null; } else { const currentRange = model.getDecorationRange(insideEditDecId);\n\nif (currentRange) {\n        return new monaco.Range(\n          currentRange.startLineNumber,\n          1,\n          currentRange.endLineNumber,\n          model.getLineLength(currentRange.endLineNumber) + 1\n        );\n      }\n      return null;\n    }\n  };\n\n// Currently, only practice project parts have editable region markers\n  // This function is used to enable multiple editor tabs, jaws, etc.\n  function hasEditableRegion() {\n    const editableRegionBoundaries = getEditableRegionFromRedux();\n    return editableRegionBoundaries.length === 2;\n  }\n\nfunction focusIfTargetEditor() {\n    const { editor } = dataRef.current;\n    const { canFocusOnMountRef } = props;\n    if (!editor || !canFocusOnMountRef.current) return;\n    if (!props.usesMultifileEditor) {\n      // Only one editor? Focus it.\n      editor.focus();\n      canFocusOnMountRef.current = false;\n    } else if (hasEditableRegion()) {\n      editor.focus();\n      canFocusOnMountRef.current = false;\n    }\n  }\n\nfunction initializeRegions() {\n    const { model, editor } = dataRef.current;\n    const monaco = monacoRef.current;\n    if (!model || !monaco || !editor) return;\n    const editableRegion = getEditableRegionFromRedux();\n    const editableRange = positionsToRange(monaco, model, [\n      editableRegion[0] + 1,\n      editableRegion[1] - 1\n    ]);\n\ndataRef.current.insideEditDecId = initializeEditableRegion(editableRange, {\n      monaco,\n      model\n    })[0];\n  }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 28,
    "total_chunks": 37
  },
  {
    "id": "998dc1c876352b422b63e3ad7c26cf79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "props; if (!editor || !canFocusOnMountRef.current) return; if (!props.usesMultifileEditor) { // Only one editor? Focus it. editor.focus(); canFocusOnMountRef.current = false; } else if (hasEditableRegion()) { editor.focus(); canFocusOnMountRef.current = false; } } function initializeRegions() { const { model, editor } = dataRef.current; const monaco = monacoRef.current; if (!model || !monaco || !editor) return; const editableRegion = getEditableRegionFromRedux(); const editableRange = positionsToRange(monaco, model, [ editableRegion[0] + 1, editableRegion[1] - 1 ]); dataRef.current.insideEditDecId = initializeEditableRegion(editableRange, { monaco, model })[0]; }\n\nconst createWidget = (\n    editor: editor.IStandaloneCodeEditor,\n    id: string,\n    domNode: HTMLDivElement,\n    // If getTop function is not provided then no positioning will be done here.\n    // This allows scroll gutter to do its positioning elsewhere.\n    getTop?: () => string\n  ) => {\n    const getId = () => id;\n    const getDomNode = () => domNode;\n    const getPosition = () => {\n      if (getTop) {\n        domNode.style.width = `${getEditorContentWidth(editor)}px`;\n        domNode.style.top = getTop();\n      }\n      // must return null, so that Monaco knows the widget will position\n      // itself.\n      return null;\n    };\n\nconst afterRender = () => {\n      if (getTop) {\n        domNode.style.left = '0';\n      }\n    };\n\nreturn {\n      getId,\n      getDomNode,\n      getPosition,\n      afterRender\n    };\n  };\n\nfunction addWidgetsToRegions() {\n    const editor = dataRef.current.editor;\n    if (!editor) return;\n\nconst descriptionNode = createDescription(editor);\n\nconst lowerJawNode = createLowerJawContainer(editor);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 29,
    "total_chunks": 37
  },
  {
    "id": "fefa3e857b3a5e3c9da0d2032d988956",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "() => domNode; const getPosition = () => { if (getTop) { domNode.style.width = `${getEditorContentWidth(editor)}px`; domNode.style.top = getTop(); } // must return null, so that Monaco knows the widget will position // itself. return null; }; const afterRender = () => { if (getTop) { domNode.style.left = '0'; } }; return { getId, getDomNode, getPosition, afterRender }; }; function addWidgetsToRegions() { const editor = dataRef.current.editor; if (!editor) return; const descriptionNode = createDescription(editor); const lowerJawNode = createLowerJawContainer(editor);\n\nif (!dataRef.current.descriptionWidget) {\n      dataRef.current.descriptionWidget = createWidget(\n        editor,\n        'description.widget',\n        descriptionNode,\n        getDescriptionZoneTop\n      );\n      // this order (add widget, change zone) is necessary, since the zone\n      // relies on the domnode being in the DOM to calculate its height - that\n      // doesn't happen until the widget is added.\n      editor.addContentWidget(dataRef.current.descriptionWidget);\n      editor.changeViewZones(descriptionZoneCallback);\n      // Now that the description zone is in place, the browser knows its height\n      // and we can use that to calculate the top of the output zone.  If we do\n      // not do this the output zone will be on top of the description zone,\n      // initially.\n      dataRef.current.outputZoneTop = editor.getTopForLineNumber(\n        getLastLineOfEditableRegion() + 1\n      );\n    }\n    if (!dataRef.current.outputWidget) {\n      dataRef.current.outputWidget = createWidget(\n        editor,\n        'output.widget',\n        lowerJawNode,\n        getOutputZoneTop\n      );\n      editor.addOverlayWidget(dataRef.current.outputWidget);\n    }\n\neditor.onDidScrollChange(() => {\n      if (dataRef.current.descriptionWidget)\n        editor.layoutContentWidget(dataRef.current.descriptionWidget);\n      if (dataRef.current.outputWidget)\n        editor.layoutOverlayWidget(dataRef.current.outputWidget);\n    });\n  }\n\nfunction addContentChangeListener() {\n    const { model } = dataRef.current;\n    const monaco = monacoRef.current;\n    if (!monaco) return;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 30,
    "total_chunks": 37
  },
  {
    "id": "28083b111bd758ee3976578f8cdbb172",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "to calculate the top of the output zone. If we do // not do this the output zone will be on top of the description zone, // initially. dataRef.current.outputZoneTop = editor.getTopForLineNumber( getLastLineOfEditableRegion() + 1 ); } if (!dataRef.current.outputWidget) { dataRef.current.outputWidget = createWidget( editor, 'output.widget', lowerJawNode, getOutputZoneTop ); editor.addOverlayWidget(dataRef.current.outputWidget); } editor.onDidScrollChange(() => { if (dataRef.current.descriptionWidget) editor.layoutContentWidget(dataRef.current.descriptionWidget); if (dataRef.current.outputWidget) editor.layoutOverlayWidget(dataRef.current.outputWidget); }); } function addContentChangeListener() { const { model } = dataRef.current; const monaco = monacoRef.current; if (!monaco) return;\n\nmodel?.onDidChangeContent(() => {\n      const redecorateEditableRegion = () => {\n        const coveringRange = getLinesCoveringEditableRegion();\n        if (coveringRange) {\n          updateEditableRegion(coveringRange, { model });\n        }\n      };\n      // If the content has changed, the zones may need moving. Rather than\n      // working out if they have to for a particular content change, we simply\n      // ask monaco to update regardless.\n      redecorateEditableRegion();\n      updateDescriptionZone();\n    });\n  }\n\nfunction showEditableRegion(editor: editor.IStandaloneCodeEditor) {\n    const editableRegionBoundaries = getEditableRegionFromRedux();\n    // TODO: The heuristic has been commented out for now because the cursor\n    // position is not saved at the moment, so it's redundant. I'm leaving it\n    // here for now, in case we decide to save it in future.\n    // this is a heuristic: if the cursor is at the start of the page, chances\n    // are the user has not edited yet. If so, move to the start of the editable\n    // region.\n    // if (\n    //  isEqual({ ..._editor.getPosition() }, { lineNumber: 1, column: 1 })\n    // ) {\n    const [top, bottom] = editableRegionBoundaries;\n    editor.setPosition({\n      lineNumber: top + 1,\n      column: 1\n    });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 31,
    "total_chunks": 37
  },
  {
    "id": "8a4e956e70f83382f2ed07585ff9814d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "here for now, in case we decide to save it in future. // this is a heuristic: if the cursor is at the start of the page, chances // are the user has not edited yet. If so, move to the start of the editable // region. // if ( // isEqual({ ..._editor.getPosition() }, { lineNumber: 1, column: 1 }) // ) { const [top, bottom] = editableRegionBoundaries; editor.setPosition({ lineNumber: top + 1, column: 1 });\n\n// To prevent descriptionWidget from being out of view\n    editor.revealLinesInCenter(top, top === 0 ? 1 : bottom);\n    // }\n  }\n\n// creates a range covering all the lines in 'positions'\n  // NOTE: positions is an array of [startLine, endLine]\n  function positionsToRange(\n    monaco: typeof monacoEditor,\n    model: editor.ITextModel,\n    [start, end]: [number, number]\n  ) {\n    // convert to [startLine, startColumn, endLine, endColumn]\n    const range = new monaco.Range(start, 1, end, 1);\n\n// Protect against ranges that extend outside the editor\n    const startLineNumber = Math.max(1, range.startLineNumber);\n    const endLineNumber = Math.min(model.getLineCount(), range.endLineNumber);\n    const endColumnText = model.getLineContent(endLineNumber);\n    // NOTE: the end column is incremented by 2 so that the dangerous range\n    // extends far enough to capture new text added to the end.\n    // NOTE: according to the spec, it should only need to be +1, but in\n    // practice that's not enough.\n    return range\n      .setStartPosition(startLineNumber, 1)\n      .setEndPosition(range.endLineNumber, endColumnText.length + 2);\n  }\n\nfunction challengeIsComplete() {\n    const tests = testRef.current;\n    return tests.every(test => test.pass && !test.err);\n  }\n\n// We need to set initialize the tests, but only once\n  useEffect(() => {\n    initTests(props.initialTests);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 32,
    "total_chunks": 37
  },
  {
    "id": "876a83a9d56e7ddf7d853f8e5cc2acc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "range // extends far enough to capture new text added to the end. // NOTE: according to the spec, it should only need to be +1, but in // practice that's not enough. return range .setStartPosition(startLineNumber, 1) .setEndPosition(range.endLineNumber, endColumnText.length + 2); } function challengeIsComplete() { const tests = testRef.current; return tests.every(test => test.pass && !test.err); } // We need to set initialize the tests, but only once useEffect(() => { initTests(props.initialTests); // eslint-disable-next-line react-hooks/exhaustive-deps }, []);\n\n// runs every update to the editor and when the challenge is reset\n  useEffect(() => {\n    // If a challenge is reset, it needs to communicate that change to the\n    // editor.\n    const { editor } = dataRef.current;\n\nif (props.isResetting) {\n      // NOTE: this looks a lot like a race condition, since stopResetting gets\n      // called in each editor and changes isResetting. However, all open editor\n      // are rendered in a batch (before stopResetting talks to redux), so they\n      // all get to this point. Also stopResetting is idempotent, so it doesn't\n      // matter that each editor calls it.\n      props.stopResetting();\n      resetEditorValues();\n      focusIfTargetEditor();\n    }\n\nif (hasEditableRegion() && editor) {\n      if (props.isResetting) {\n        initializeRegions();\n        if (!props.showIndependentLowerJaw) {\n          addWidgetsToRegions();\n        }\n        updateDescriptionZone();\n        showEditableRegion(editor);\n        resetMarginDecorations();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.challengeFiles, props.isResetting, props.showIndependentLowerJaw]);\n\nuseEffect(() => {\n    const { showProjectPreview, previewOpen } = props;\n    if (!previewOpen && showProjectPreview) {\n      const description = document.getElementsByClassName(\n        'description-container'\n      )?.[0];\n      description?.classList.add('description-highlighter');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.previewOpen]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 33,
    "total_chunks": 37
  },
  {
    "id": "a0029e214aeecab5b8f831ca1847cb6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "get to this point. Also stopResetting is idempotent, so it doesn't // matter that each editor calls it. props.stopResetting(); resetEditorValues(); focusIfTargetEditor(); } if (hasEditableRegion() && editor) { if (props.isResetting) { initializeRegions(); if (!props.showIndependentLowerJaw) { addWidgetsToRegions(); } updateDescriptionZone(); showEditableRegion(editor); resetMarginDecorations(); } } // eslint-disable-next-line react-hooks/exhaustive-deps }, [props.challengeFiles, props.isResetting, props.showIndependentLowerJaw]); useEffect(() => { const { showProjectPreview, previewOpen } = props; if (!previewOpen && showProjectPreview) { const description = document.getElementsByClassName( 'description-container' )?.[0]; description?.classList.add('description-highlighter'); } // eslint-disable-next-line react-hooks/exhaustive-deps }, [props.previewOpen]);\n\nuseEffect(() => {\n    const { model, insideEditDecId } = dataRef.current;\n    const isChallengeComplete = challengeIsComplete();\n    const range = model?.getDecorationRange(insideEditDecId);\n    if (range && isChallengeComplete) {\n      updateEditableRegion(\n        range,\n        { model },\n        {\n          linesDecorationsClassName: 'myEditableLineDecoration tests-passed'\n        }\n      );\n    }\n  }, [props.tests]);\n\nuseEffect(() => {\n    const editor = dataRef.current.editor;\n    editor?.layout();\n    // layout() resets the monaco tab trapping back to default (true), so we\n    // need to untrap it if the user had it set to false.\n    if (!isTabTrapped()) {\n      setMonacoTabTrapped(false);\n    }\n  }, [props.dimensions]);\n\nfunction updateDescriptionZone() {\n    const editor = dataRef.current.editor;\n    editor?.changeViewZones(changeAccessor => {\n      changeAccessor.removeZone(dataRef.current.descriptionZoneId);\n      descriptionZoneCallback(changeAccessor);\n    });\n  }\n\nconst { theme } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 34,
    "total_chunks": 37
  },
  {
    "id": "99491863f56c1a82b19cf91976a30ea7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "{ updateEditableRegion( range, { model }, { linesDecorationsClassName: 'myEditableLineDecoration tests-passed' } ); } }, [props.tests]); useEffect(() => { const editor = dataRef.current.editor; editor?.layout(); // layout() resets the monaco tab trapping back to default (true), so we // need to untrap it if the user had it set to false. if (!isTabTrapped()) { setMonacoTabTrapped(false); } }, [props.dimensions]); function updateDescriptionZone() { const editor = dataRef.current.editor; editor?.changeViewZones(changeAccessor => { changeAccessor.removeZone(dataRef.current.descriptionZoneId); descriptionZoneCallback(changeAccessor); }); } const { theme } = props;\n\nconst preferDarkScheme = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches;\n  const editorSystemTheme = preferDarkScheme ? 'vs-dark-custom' : 'vs-custom';\n  const editorTheme =\n    theme === LocalStorageThemes.Dark\n      ? 'vs-dark-custom'\n      : theme === LocalStorageThemes.Light\n        ? 'vs-custom'\n        : editorSystemTheme;\n\nconst firstFailedTest = props.tests.find(test => !!test.err);\n\nconst handleSubmitAndGoButtonBoolean = () => {\n    const canShowModal = sessionStorage.getItem('canOpenModal');\n\nif (canShowModal === 'false' && envConfig.environment === 'development') {\n      return false;\n    }\n    return challengeIsComplete();\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 35,
    "total_chunks": 37
  },
  {
    "id": "c2b7dff1b5d5d22d48d3ffb67af02a9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
    "source_type": "git_repo",
    "title": "editor",
    "content": "dataRef.current.editor; editor?.changeViewZones(changeAccessor => { changeAccessor.removeZone(dataRef.current.descriptionZoneId); descriptionZoneCallback(changeAccessor); }); } const { theme } = props; const preferDarkScheme = window.matchMedia( '(prefers-color-scheme: dark)' ).matches; const editorSystemTheme = preferDarkScheme ? 'vs-dark-custom' : 'vs-custom'; const editorTheme = theme === LocalStorageThemes.Dark ? 'vs-dark-custom' : theme === LocalStorageThemes.Light ? 'vs-custom' : editorSystemTheme; const firstFailedTest = props.tests.find(test => !!test.err); const handleSubmitAndGoButtonBoolean = () => { const canShowModal = sessionStorage.getItem('canOpenModal'); if (canShowModal === 'false' && envConfig.environment === 'development') { return false; } return challengeIsComplete(); };\n\nconst showFileName = challengeFile && props.challengeFiles!.length > 1;\n  return (\n    <Suspense fallback={<Loader loaderDelay={600} />}>\n      {showFileName && (\n        <div className='editor-file-name'>{`${challengeFile.name}.${challengeFile.ext}`}</div>\n      )}\n      <span className='notranslate'>\n        <MonacoEditor\n          editorDidMount={editorDidMount}\n          editorWillMount={editorWillMount}\n          onChange={onChange}\n          options={{ ...options, folding: !hasEditableRegion() }}\n          theme={editorTheme}\n        />\n      </span>\n      {lowerJawContainer !== null &&\n        createPortal(\n          <LowerJaw\n            openHelpModal={props.openHelpModal}\n            openResetModal={props.openResetModal}\n            tryToExecuteChallenge={tryToExecuteChallenge}\n            hint={firstFailedTest?.message}\n            testsLength={props.tests.length}\n            attempts={attemptsRef.current}\n            challengeIsCompleted={handleSubmitAndGoButtonBoolean()}\n            tryToSubmitChallenge={tryToSubmitChallenge}\n            isSignedIn={props.isSignedIn}\n            updateContainer={() =>\n              updateOutputViewZone(lowerJawContainer, dataRef.current.editor)\n            }\n          />,\n          lowerJawContainer\n        )}\n    </Suspense>\n  );\n};\n\nEditor.displayName = 'Editor';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 45368,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 36,
    "total_chunks": 37
  },
  {
    "id": "3eca033ae4eb1f06b648c541dd651509",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { createSelector } from 'reselect';\nimport { Button, Spacer } from '@freecodecamp/ui';\nimport { connect } from 'react-redux';\nimport Fail from '../../../assets/icons/fail';\nimport LightBulb from '../../../assets/icons/lightbulb';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { randomCompliment } from '../../../../src/utils/get-words';\nimport Help from '../../../assets/icons/help';\nimport Reset from '../../../assets/icons/reset';\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';\nimport { apiLocation } from '../../../../config/env.json';\nimport { ChallengeMeta } from '../../../redux/prop-types';\nimport { Share } from '../../../components/share';\nimport { ShareProps } from '../../../components/share/types';\nimport Progress from '../../../components/Progress';\nimport Quote from '../../../assets/icons/quote';\nimport {\n  challengeMetaSelector,\n  completedPercentageSelector\n} from '../redux/selectors';\nimport callGA from '../../../analytics/call-ga';\n\ninterface LowerJawPanelProps extends ShareProps {\n  resetButtonText: string;\n  helpButtonText: string;\n  resetButtonEvent: () => void;\n  helpButtonEvent: () => void;\n  hideHelpButton: boolean;\n  showShareButton: boolean;\n}\n\ninterface LowerJawTipsProps {\n  testText: string;\n  learnEncouragementText: string;\n  htmlDescription: string;\n  showFeedback: boolean;\n}\n\ninterface LowerJawStatusProps {\n  children: React.ReactNode;\n  text: string;\n  showFeedback: boolean;\n  testText: string;\n}\n\ninterface LowerJawProps {\n  challengeMeta: ChallengeMeta;\n  completedPercent: number;\n  hint?: string;\n  challengeIsCompleted: boolean;\n  openHelpModal: () => void;\n  tryToExecuteChallenge: () => void;\n  tryToSubmitChallenge: () => void;\n  testsLength?: number;\n  attempts: number;\n  openResetModal: () => void;\n  isSignedIn: boolean;\n  updateContainer: () => void;\n}\n\nconst mapStateToProps = createSelector(\n  challengeMetaSelector,\n  completedPercentageSelector,\n  (challengeMeta: ChallengeMeta, completedPercent: number) => ({\n    challengeMeta,\n    completedPercent\n  })\n);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "080b20bcc0dbf2ddc25ccbdc143024eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "{ testText: string; learnEncouragementText: string; htmlDescription: string; showFeedback: boolean; } interface LowerJawStatusProps { children: React.ReactNode; text: string; showFeedback: boolean; testText: string; } interface LowerJawProps { challengeMeta: ChallengeMeta; completedPercent: number; hint?: string; challengeIsCompleted: boolean; openHelpModal: () => void; tryToExecuteChallenge: () => void; tryToSubmitChallenge: () => void; testsLength?: number; attempts: number; openResetModal: () => void; isSignedIn: boolean; updateContainer: () => void; } const mapStateToProps = createSelector( challengeMetaSelector, completedPercentageSelector, (challengeMeta: ChallengeMeta, completedPercent: number) => ({ challengeMeta, completedPercent }) );\n\nconst sentenceArray = [\n  'learn.sorry-try-again',\n  'learn.sorry-keep-trying',\n  'learn.sorry-getting-there',\n  'learn.sorry-hang-in-there',\n  'learn.sorry-dont-giveup'\n];\n\nconst sentencePicker = (shownAttempts: number) => {\n  return sentenceArray[shownAttempts % sentenceArray.length];\n};\n\nconst LowerButtonsPanel = ({\n  resetButtonText,\n  helpButtonText,\n  resetButtonEvent,\n  hideHelpButton,\n  helpButtonEvent,\n  showShareButton,\n  superBlock,\n  block\n}: LowerJawPanelProps) => {\n  return (\n    <>\n      <hr />\n      <div className='utility-bar'>\n        {showShareButton && (\n          <div className='utility-bar-top'>\n            <Share superBlock={superBlock} block={block} />\n          </div>\n        )}\n\n<div className='utility-bar-bottom'>\n          <Button\n            data-playwright-test-label='lowerJaw-reset-button'\n            className='fade-in'\n            onClick={resetButtonEvent}\n          >\n            <Reset />\n            {resetButtonText}\n          </Button>\n\n{hideHelpButton && (\n            <Button\n              className='fade-in'\n              id='get-help-button'\n              onClick={helpButtonEvent}\n            >\n              <Help />\n              {helpButtonText}\n            </Button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "9c4e5a320080a0302bda0be83b25f825",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "]; const sentencePicker = (shownAttempts: number) => { return sentenceArray[shownAttempts % sentenceArray.length]; }; const LowerButtonsPanel = ({ resetButtonText, helpButtonText, resetButtonEvent, hideHelpButton, helpButtonEvent, showShareButton, superBlock, block }: LowerJawPanelProps) => { return ( <> <hr /> <div className='utility-bar'> {showShareButton && ( <div className='utility-bar-top'> <Share superBlock={superBlock} block={block} /> </div> )} <div className='utility-bar-bottom'> <Button data-playwright-test-label='lowerJaw-reset-button' className='fade-in' onClick={resetButtonEvent} > <Reset /> {resetButtonText} </Button> {hideHelpButton && ( <Button className='fade-in' id='get-help-button' onClick={helpButtonEvent} > <Help /> {helpButtonText} </Button> )} </div> </div> </> ); };\n\nconst LowerJawTips = ({\n  learnEncouragementText,\n  showFeedback,\n  htmlDescription\n}: LowerJawTipsProps) => {\n  return (\n    <>\n      <div\n        data-playwright-test-label='lowerJaw-failing-test-feedback'\n        className='test-status fade-in'\n        aria-hidden={showFeedback}\n      >\n        <Fail />\n        <p>{learnEncouragementText}</p>\n      </div>\n      <div\n        data-playwright-test-label='lowerJaw-failing-hint'\n        className='hint-status fade-in'\n        aria-hidden={showFeedback}\n      >\n        <LightBulb aria-hidden='true' />\n        <div\n          className='hint-description'\n          dangerouslySetInnerHTML={{ __html: htmlDescription }}\n        />\n      </div>\n    </>\n  );\n};\n\nconst LowerJawQuote = ({ quote }: { quote: string }) => (\n  <div className='hint-status fade-in'>\n    <Quote aria-hidden='true' />\n    <div id='lowerjaw-quote'>\n      <p>{`\"${quote}\"`}</p>\n    </div>\n  </div>\n);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "4f2c67e137cab6a60bfaf4dd9db277fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "{helpButtonText} </Button> )} </div> </div> </> ); }; const LowerJawTips = ({ learnEncouragementText, showFeedback, htmlDescription }: LowerJawTipsProps) => { return ( <> <div data-playwright-test-label='lowerJaw-failing-test-feedback' className='test-status fade-in' aria-hidden={showFeedback} > <Fail /> <p>{learnEncouragementText}</p> </div> <div data-playwright-test-label='lowerJaw-failing-hint' className='hint-status fade-in' aria-hidden={showFeedback} > <LightBulb aria-hidden='true' /> <div className='hint-description' dangerouslySetInnerHTML={{ __html: htmlDescription }} /> </div> </> ); }; const LowerJawQuote = ({ quote }: { quote: string }) => ( <div className='hint-status fade-in'> <Quote aria-hidden='true' /> <div id='lowerjaw-quote'> <p>{`\"${quote}\"`}</p> </div> </div> );\n\nconst LowerJawStatus = ({\n  children,\n  text,\n  showFeedback\n}: LowerJawStatusProps) => {\n  return (\n    <div className='test-status fade-in' aria-hidden={showFeedback}>\n      <GreenPass aria-hidden='true' />\n      <p className='status'>\n        {text}\n        {children}\n      </p>\n    </div>\n  );\n};\n\nconst isBlockCompleted = 100;\n\nconst LowerJaw = ({\n  challengeMeta: { superBlock, block },\n  completedPercent,\n  openHelpModal,\n  challengeIsCompleted,\n  hint,\n  tryToExecuteChallenge,\n  tryToSubmitChallenge,\n  attempts,\n  testsLength,\n  openResetModal,\n  isSignedIn,\n  updateContainer\n}: LowerJawProps): JSX.Element => {\n  const [shownHint, setShownHint] = useState(hint);\n  const [quote, setQuote] = useState(randomCompliment());\n  const [runningTests, setRunningTests] = useState(false);\n  const [testFeedbackHeight, setTestFeedbackHeight] = useState(0);\n  const [shownAttempts, setShownAttempts] = useState(attempts);\n  const [isFeedbackHidden, setIsFeedbackHidden] = useState(true);\n  const { t } = useTranslation();\n  const testFeedbackRef = React.createRef<HTMLDivElement>();",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "265a7fbdf07e40781c1c0622377c2237",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "className='status'> {text} {children} </p> </div> ); }; const isBlockCompleted = 100; const LowerJaw = ({ challengeMeta: { superBlock, block }, completedPercent, openHelpModal, challengeIsCompleted, hint, tryToExecuteChallenge, tryToSubmitChallenge, attempts, testsLength, openResetModal, isSignedIn, updateContainer }: LowerJawProps): JSX.Element => { const [shownHint, setShownHint] = useState(hint); const [quote, setQuote] = useState(randomCompliment()); const [runningTests, setRunningTests] = useState(false); const [testFeedbackHeight, setTestFeedbackHeight] = useState(0); const [shownAttempts, setShownAttempts] = useState(attempts); const [isFeedbackHidden, setIsFeedbackHidden] = useState(true); const { t } = useTranslation(); const testFeedbackRef = React.createRef<HTMLDivElement>();\n\nconst checkYourCodeButtonRef = useRef<HTMLButtonElement>(null);\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n  const [focusManagementCompleted, setFocusManagementCompleted] =\n    useState(false);\n  const isCheckYourCodeButtonClicked = () => {\n    const activeElement = document.activeElement;\n    // Need to check Submit button as well because if it has focus then it is\n    // implied that Check Your Code button was clicked.\n    return (\n      activeElement === checkYourCodeButtonRef.current ||\n      activeElement === submitButtonRef.current\n    );\n  };\n\nconst showShareButton =\n    challengeIsCompleted && completedPercent === isBlockCompleted;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "6a0b41d6d917aab1b64f12c2fb91b0a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "{ t } = useTranslation(); const testFeedbackRef = React.createRef<HTMLDivElement>(); const checkYourCodeButtonRef = useRef<HTMLButtonElement>(null); const submitButtonRef = useRef<HTMLButtonElement>(null); const [focusManagementCompleted, setFocusManagementCompleted] = useState(false); const isCheckYourCodeButtonClicked = () => { const activeElement = document.activeElement; // Need to check Submit button as well because if it has focus then it is // implied that Check Your Code button was clicked. return ( activeElement === checkYourCodeButtonRef.current || activeElement === submitButtonRef.current ); }; const showShareButton = challengeIsCompleted && completedPercent === isBlockCompleted;\n\n// Attempts should only be zero when the step is reset, so we should reset\n  // the state here.\n  if (attempts !== shownAttempts && attempts === 0) {\n    setShownAttempts(0);\n    setRunningTests(false);\n    setIsFeedbackHidden(false);\n    setShownHint('');\n  }\n  useEffect(() => {\n    if (attempts > shownAttempts) {\n      //hide the feedback from SR until the \"Running tests\" are displayed and removed.\n      setIsFeedbackHidden(true);\n      setRunningTests(true);\n      //to prevent the changing attempts value from immediately triggering a new\n      //render, the rendered component only depends on shownAttempts. Since\n      //shownAttempts is updated with when the feedback is hidden, the screen\n      //reader should only read out the new message. Note: this starts with the\n      //second encouragement since attempts starts at 1.\n      setShownAttempts(attempts);\n      //display the test feedback contents.\n      setTimeout(() => {\n        setRunningTests(false);\n        setIsFeedbackHidden(false);\n      }, 300);\n    }\n  }, [attempts, shownAttempts]);\n\nuseEffect(() => {\n    // Since there's no guarantee that hint and attempts update in the same\n    // render, hints have to be updated separately.\n    if (hint) setShownHint(hint);\n  }, [hint]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "0755740a346cd9a06fb413548bedf049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "is updated with when the feedback is hidden, the screen //reader should only read out the new message. Note: this starts with the //second encouragement since attempts starts at 1. setShownAttempts(attempts); //display the test feedback contents. setTimeout(() => { setRunningTests(false); setIsFeedbackHidden(false); }, 300); } }, [attempts, shownAttempts]); useEffect(() => { // Since there's no guarantee that hint and attempts update in the same // render, hints have to be updated separately. if (hint) setShownHint(hint); }, [hint]);\n\nuseEffect(() => {\n    if (challengeIsCompleted) {\n      // If Ctrl + Enter was used then we don't need to worry about setting\n      // focus, just leave it where it is. In NVDA, Ctrl + Enter will trigger\n      // a code check if focus is on a button in the tabs row. So it is not\n      // enough to only check whether the focus is in the editor.\n      if (!isCheckYourCodeButtonClicked()) {\n        setFocusManagementCompleted(true);\n        return;\n      }\n      // Delay focusing Submit button so that screen reader will announce\n      // it after the test results.\n      setQuote(randomCompliment());\n      setTimeout(() => {\n        submitButtonRef.current?.focus();\n        setFocusManagementCompleted(true);\n      }, 500);\n    }\n  }, [challengeIsCompleted]);\n\n// ToDo: turn it into a grid to remove the need for useEffect.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (testFeedbackRef.current) {\n      setTestFeedbackHeight(testFeedbackRef.current.clientHeight);\n    }\n    // Every render could change the shape of the jaw, so this effect will let\n    // monaco know it might need to resize\n    updateContainer();\n  });\n\nconst isAttemptsLargerThanTest =\n    shownAttempts &&\n    testsLength &&\n    (shownAttempts >= testsLength || shownAttempts >= 3);\n\nconst isDesktop = window.innerWidth > MAX_MOBILE_WIDTH;\n  const isMacOS = navigator.userAgent.includes('Mac OS');\n\nconst checkButtonText = isDesktop\n    ? isMacOS\n      ? t('buttons.check-code-cmd')\n      : t('buttons.check-code-ctrl')\n    : t('buttons.check-code');",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "0dad47fda8e350d2af23e7a900577357",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "need for useEffect. // eslint-disable-next-line react-hooks/exhaustive-deps useEffect(() => { if (testFeedbackRef.current) { setTestFeedbackHeight(testFeedbackRef.current.clientHeight); } // Every render could change the shape of the jaw, so this effect will let // monaco know it might need to resize updateContainer(); }); const isAttemptsLargerThanTest = shownAttempts && testsLength && (shownAttempts >= testsLength || shownAttempts >= 3); const isDesktop = window.innerWidth > MAX_MOBILE_WIDTH; const isMacOS = navigator.userAgent.includes('Mac OS'); const checkButtonText = isDesktop ? isMacOS ? t('buttons.check-code-cmd') : t('buttons.check-code-ctrl') : t('buttons.check-code');\n\nconst submitButtonText = isDesktop\n    ? isMacOS\n      ? t('buttons.submit-and-go-cmd')\n      : t('buttons.submit-and-go-ctrl')\n    : t('buttons.submit-and-go');\n\nconst showSignInButton = !isSignedIn && challengeIsCompleted; return (\n    <div className='action-row-container'>\n      {showSignInButton && (\n        <>\n          <a\n            href={`${apiLocation}/signin`}\n            className='btn-cta btn btn-block'\n            onClick={() => {\n              callGA({\n                event: 'sign_in'\n              });\n            }}\n          >\n            {t('learn sign-in-save')}\n          </a>\n          <Spacer size='xxs' />\n        </>\n      )}\n      <Button\n        data-playwright-test-label='lowerJaw-submit-button'\n        block\n        onClick={tryToSubmitChallenge}\n        { ( challengeIsCompleted && { 'aria-hidden': true })}\n        ref={submitButtonRef}\n      >\n        {submitButtonText}\n      </Button>\n      <div\n        className={\n          challengeIsCompleted && focusManagementCompleted 'sr-only' : ''\n        }\n      >\n        <Button\n          data-playwright-test-label='lowerJaw-check-button'\n          block\n          onClick={tryToExecuteChallenge}\n          { (challengeIsCompleted && focusManagementCompleted && { tabIndex: -1 })}\n          { (challengeIsCompleted &&\n            focusManagementCompleted && { 'aria-hidden': true })}\n          ref={checkYourCodeButtonRef}\n        >\n          {checkButtonText}\n        </Button>\n      </div>\n      {/* Using aria-live=polite instead of assertive works better with ORCA */}\n      <div\n        style={runningTests",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "777cc469decfccf7d73abe1263331241",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "}} > {t('learn sign-in-save')} </a> <Spacer size='xxs' /> </> )} <Button data-playwright-test-label='lowerJaw-submit-button' block onClick={tryToSubmitChallenge} { ( challengeIsCompleted && { 'aria-hidden': true })} ref={submitButtonRef} > {submitButtonText} </Button> <div className={ challengeIsCompleted && focusManagementCompleted 'sr-only' : '' } > <Button data-playwright-test-label='lowerJaw-check-button' block onClick={tryToExecuteChallenge} { (challengeIsCompleted && focusManagementCompleted && { tabIndex: -1 })} { (challengeIsCompleted && focusManagementCompleted && { 'aria-hidden': true })} ref={checkYourCodeButtonRef} > {checkButtonText} </Button> </div> {/* Using aria-live=polite instead of assertive works better with ORCA */} <div style={runningTests{ height: `${testFeedbackHeight}px` } : {}}\n        className={`test-feedback`}\n        aria-live='polite'\n        ref={testFeedbackRef}\n      >\n        {runningTests && (\n          <span className='sr-only'>{t('aria running-tests')}</span>\n        )}\n        {challengeIsCompleted && (\n          <>\n            <LowerJawStatus\n              testText={t('learn test')}\n              showFeedback={isFeedbackHidden}\n              text={t('learn congratulations')}\n            >\n              { isCheckYourCodeButtonClicked() && (\n                <span className='sr-only'>, {t('aria submit')}</span>\n              )}\n            </LowerJawStatus>\n            <LowerJawQuote quote={quote} />\n            <span className='sr-only'>\n              {t('learn percent-complete', { percent: completedPercent })}\n            </span>\n          </>\n        )}\n        {shownHint && challengeIsCompleted && (\n          <LowerJawTips\n            data-testid='lowerJaw-tips'\n            showFeedback={isFeedbackHidden}\n            testText={t('learn test')}\n            htmlDescription={shownHint ''}\n            learnEncouragementText={t(sentencePicker(shownAttempts))}\n          />\n        )}\n      </div>\n      {challengeIsCompleted && (\n        <>\n          <hr></hr>\n          <div className='progress-bar-container'>\n            <Progress />\n          </div>\n        </>\n      )}\n      <LowerButtonsPanel\n        resetButtonText={t('buttons",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "75e4e3beacd1b6e6cd06fb5c5ce7b86e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "lower-jaw",
    "content": "className={`test-feedback`} aria-live='polite' ref={testFeedbackRef} > {runningTests && ( <span className='sr-only'>{t('aria running-tests')}</span> )} {challengeIsCompleted && ( <> <LowerJawStatus testText={t('learn test')} showFeedback={isFeedbackHidden} text={t('learn congratulations')} > { isCheckYourCodeButtonClicked() && ( <span className='sr-only'>, {t('aria submit')}</span> )} </LowerJawStatus> <LowerJawQuote quote={quote} /> <span className='sr-only'> {t('learn percent-complete', { percent: completedPercent })} </span> </> )} {shownHint && challengeIsCompleted && ( <LowerJawTips data-testid='lowerJaw-tips' showFeedback={isFeedbackHidden} testText={t('learn test')} htmlDescription={shownHint ''} learnEncouragementText={t(sentencePicker(shownAttempts))} /> )} </div> {challengeIsCompleted && ( <> <hr></hr> <div className='progress-bar-container'> <Progress /> </div> </> )} <LowerButtonsPanel resetButtonText={t('buttonsreset')}\n        helpButtonText={t('buttons help')}\n        resetButtonEvent={openResetModal}\n        hideHelpButton={Boolean(\n          isAttemptsLargerThanTest && challengeIsCompleted\n        )}\n        helpButtonEvent={openHelpModal}\n        showShareButton={showShareButton}\n        superBlock={superBlock}\n        block={block}\n      />\n    </div>\n  );\n};\n\nLowerJaw.displayName = 'LowerJaw';\n\nexport default connect(mapStateToProps)(LowerJaw);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 12512,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "0d1468e6ac1cfaade70961703e725e29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "import i18next from 'i18next';\nimport React, { Component, type ReactNode } from 'react';\nimport { faWindowRestore } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { Tabs, TabsContent, TabsTrigger, TabsList } from '@freecodecamp/ui';\n\nimport {\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane\n} from '../redux/actions';\nimport {\n  portalWindowSelector,\n  showPreviewPortalSelector,\n  showPreviewPaneSelector\n} from '../redux/selectors';\nimport { TOOL_PANEL_HEIGHT } from '../../../../config/misc';\nimport PreviewPortal from '../components/preview-portal';\nimport Notes from '../components/notes';\nimport EditorTabs from './editor-tabs';\n\ninterface MobileLayoutProps {\n  editor: JSX.Element | null;\n  hasEditableBoundaries: boolean;\n  hasPreview: boolean;\n  instructions: JSX.Element;\n  notes: string;\n  preview: JSX.Element;\n  onPreviewResize: () => void;\n  windowTitle: string;\n  showPreviewPortal: boolean;\n  showPreviewPane: boolean;\n  toolPanel: ReactNode;\n  removePortalWindow: () => void;\n  setShowPreviewPortal: (arg: boolean) => void;\n  setShowPreviewPane: (arg: boolean) => void;\n  portalWindow: null | Window;\n  updateUsingKeyboardInTablist: (arg0: boolean) => void;\n  testOutput: JSX.Element;\n  usesMultifileEditor: boolean;\n}\n\nconst tabs = {\n  editor: 'editor',\n  preview: 'preview',\n  console: 'console',\n  notes: 'notes',\n  instructions: 'instructions'\n} as const;\n\ntype Tab = keyof typeof tabs;\n\ninterface MobileLayoutState {\n  currentTab: Tab;\n}\n\nconst mapDispatchToProps = {\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane\n};\n\nconst mapStateToProps = createSelector(\n  showPreviewPortalSelector,\n  showPreviewPaneSelector,\n  portalWindowSelector,\n\n(\n    showPreviewPortal: boolean,\n    showPreviewPane: boolean,\n    portalWindow: null | Window\n  ) => ({\n    showPreviewPortal,\n    showPreviewPane,\n    portalWindow\n  })\n);\n\nclass MobileLayout extends Component<MobileLayoutProps, MobileLayoutState> {\n  static displayName: string;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "d7b76653534402bbd1d6a057cd990fb4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "void; testOutput: JSX.Element; usesMultifileEditor: boolean; } const tabs = { editor: 'editor', preview: 'preview', console: 'console', notes: 'notes', instructions: 'instructions' } as const; type Tab = keyof typeof tabs; interface MobileLayoutState { currentTab: Tab; } const mapDispatchToProps = { removePortalWindow, setShowPreviewPortal, setShowPreviewPane }; const mapStateToProps = createSelector( showPreviewPortalSelector, showPreviewPaneSelector, portalWindowSelector, ( showPreviewPortal: boolean, showPreviewPane: boolean, portalWindow: null | Window ) => ({ showPreviewPortal, showPreviewPane, portalWindow }) ); class MobileLayout extends Component<MobileLayoutProps, MobileLayoutState> { static displayName: string;\n\n#toolPanelGroup!: HTMLElement;\n\nstate: MobileLayoutState = {\n    currentTab: this.props.hasEditableBoundaries\n      ? tabs.editor\n      : tabs.instructions\n  };\n\nswitchTab = (tab: string): void => {\n    this.setState({\n      currentTab: tab as Tab\n    });\n  };\n\n// Keep the tool panel visible when mobile address bar and/or keyboard are in view.\n  setToolPanelPosition = (): void => {\n    // Detect the appearance of the mobile virtual keyboard.\n    if (visualViewport?.height && window.innerHeight > visualViewport.height) {\n      setTimeout(() => {\n        if (visualViewport?.height !== undefined && this.#toolPanelGroup) {\n          this.#toolPanelGroup.style.top =\n            String(visualViewport.height - TOOL_PANEL_HEIGHT) + 'px';\n        }\n      }, 200);\n    } else {\n      if (visualViewport?.height !== undefined) {\n        // restore the height of html element on Firefox.\n        document.documentElement.style.height = '100%';\n        if (this.#toolPanelGroup)\n          this.#toolPanelGroup.style.top =\n            String(window.innerHeight - TOOL_PANEL_HEIGHT) + 'px';\n      }\n    }\n  };\n\nisMobileDevice = (): RegExpExecArray | null =>\n    /iPhone|Android.+Mobile/.exec(navigator.userAgent);\n\ncomponentDidMount(): void {\n    this.#toolPanelGroup = (\n      document.getElementsByClassName(\n        'tool-panel-group-mobile'\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "f1fd716fbfd40e0ebf51380b2c8d6c65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "window.innerHeight > visualViewport.height) { setTimeout(() => { if (visualViewport?.height !== undefined && this.#toolPanelGroup) { this.#toolPanelGroup.style.top = String(visualViewport.height - TOOL_PANEL_HEIGHT) + 'px'; } }, 200); } else { if (visualViewport?.height !== undefined) { // restore the height of html element on Firefox. document.documentElement.style.height = '100%'; if (this.#toolPanelGroup) this.#toolPanelGroup.style.top = String(window.innerHeight - TOOL_PANEL_HEIGHT) + 'px'; } } }; isMobileDevice = (): RegExpExecArray | null => /iPhone|Android.+Mobile/.exec(navigator.userAgent); componentDidMount(): void { this.#toolPanelGroup = ( document.getElementsByClassName( 'tool-panel-group-mobile' ) as HTMLCollectionOf<HTMLElement> )[0];\n\nif (this.isMobileDevice()) {\n      visualViewport?.addEventListener('resize', this.setToolPanelPosition);\n      if (this.#toolPanelGroup)\n        this.#toolPanelGroup.style.top =\n          String(window.innerHeight - TOOL_PANEL_HEIGHT) + 'px';\n    }\n  }\n\ncomponentWillUnmount(): void {\n    if (this.isMobileDevice()) {\n      visualViewport?.removeEventListener('resize', this.setToolPanelPosition);\n      document.documentElement.style.height = '100%';\n    }\n  }\n\nhandleKeyDown = (): void => this.props.updateUsingKeyboardInTablist(true);\n\nhandleClick = (): void => this.props.updateUsingKeyboardInTablist(false);\n\nrender(): JSX.Element {\n    const { currentTab } = this.state;\n    const {\n      hasEditableBoundaries,\n      instructions,\n      editor,\n      testOutput,\n      hasPreview,\n      notes,\n      preview,\n      onPreviewResize,\n      showPreviewPane,\n      showPreviewPortal,\n      toolPanel,\n      removePortalWindow,\n      setShowPreviewPane,\n      setShowPreviewPortal,\n      portalWindow,\n      windowTitle,\n      usesMultifileEditor\n    } = this.props;\n\nconst displayPreviewPane = hasPreview && showPreviewPane;\n    const displayPreviewPortal = hasPreview && showPreviewPortal;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "9edbf76d99c755663401f0fc18417788",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "= String(window.innerHeight - TOOL_PANEL_HEIGHT) + 'px'; } } componentWillUnmount(): void { if (this.isMobileDevice()) { visualViewport?.removeEventListener('resize', this.setToolPanelPosition); document.documentElement.style.height = '100%'; } } handleKeyDown = (): void => this.props.updateUsingKeyboardInTablist(true); handleClick = (): void => this.props.updateUsingKeyboardInTablist(false); render(): JSX.Element { const { currentTab } = this.state; const { hasEditableBoundaries, instructions, editor, testOutput, hasPreview, notes, preview, onPreviewResize, showPreviewPane, showPreviewPortal, toolPanel, removePortalWindow, setShowPreviewPane, setShowPreviewPortal, portalWindow, windowTitle, usesMultifileEditor } = this.props; const displayPreviewPane = hasPreview && showPreviewPane; const displayPreviewPortal = hasPreview && showPreviewPortal;\n\nconst togglePane = (pane: string): void => {\n      if (pane === 'showPreviewPane') {\n        if (!showPreviewPane && showPreviewPortal) {\n          setShowPreviewPortal(false);\n        }\n        setShowPreviewPane(!showPreviewPane);\n        portalWindow?.close();\n        removePortalWindow();\n      } else if (pane === 'showPreviewPortal') {\n        if (!showPreviewPortal && showPreviewPane) {\n          setShowPreviewPane(false);\n        }\n        setShowPreviewPortal(!showPreviewPortal);\n        if (showPreviewPortal) {\n          portalWindow?.close();\n          removePortalWindow();\n        }\n      } else {\n        setShowPreviewPane(true);\n        setShowPreviewPortal(false);\n      }\n    };\n\n// sets screen reader text for the portal button\n    function getPortalBtnSrText() {\n      // preview open in main window\n      let portalBtnSrText = i18next.t('aria.move-preview-to-new-window');\n\n// preview open in external window\n      if (showPreviewPortal && !showPreviewPane) {\n        portalBtnSrText = i18next.t('aria.close-external-preview-window');\n      }\n\nreturn portalBtnSrText;\n    }\n\n// Unlike the desktop layout the mobile version does not have an ActionRow,\n    // but still needs a way to switch between the different tabs.",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "8cc749606dacaf390c5fd5e046946868",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "{ portalWindow?.close(); removePortalWindow(); } } else { setShowPreviewPane(true); setShowPreviewPortal(false); } }; // sets screen reader text for the portal button function getPortalBtnSrText() { // preview open in main window let portalBtnSrText = i18next.t('aria.move-preview-to-new-window'); // preview open in external window if (showPreviewPortal && !showPreviewPane) { portalBtnSrText = i18next.t('aria.close-external-preview-window'); } return portalBtnSrText; } // Unlike the desktop layout the mobile version does not have an ActionRow, // but still needs a way to switch between the different tabs.\n\nreturn (\n      <>\n        <Tabs\n          id='mobile-layout'\n          onKeyDown={this.handleKeyDown}\n          onMouseDown={this.handleClick}\n          onTouchStart={this.handleClick}\n          defaultValue={currentTab}\n          onValueChange={this.switchTab}\n          {...(hasPreview && { 'data-haspreview': 'true' })}\n        >\n          <TabsList className='nav-lists'>\n            {!hasEditableBoundaries && (\n              <TabsTrigger value={tabs.instructions}>\n                {i18next.t('learn.editor-tabs.instructions')}\n              </TabsTrigger>\n            )}\n            <TabsTrigger value={tabs.editor}>\n              {i18next.t('learn.editor-tabs.code')}\n            </TabsTrigger>\n            {!!notes && usesMultifileEditor && (\n              <TabsTrigger value={tabs.notes}>\n                {i18next.t('learn.editor-tabs.notes')}\n              </TabsTrigger>\n            )}\n            <TabsTrigger value={tabs.console}>\n              {i18next.t('learn.editor-tabs.console')}\n            </TabsTrigger>\n            {hasPreview && (\n              <TabsTrigger value={tabs.preview}>\n                {i18next.t('learn.editor-tabs.preview')}\n              </TabsTrigger>\n            )}\n          </TabsList> <TabsContent\n            tabIndex={-1}\n            className='tab-content'\n            value={tabs editor}\n          >\n            {usesMultifileEditor && <EditorTabs />}\n            {editor}\n          </TabsContent>\n          { hasEditableBoundaries && (\n            <TabsContent\n              tabIndex={-1}\n              className='tab-content'\n              value={tabs instructions}\n            >\n              {instructions}\n            </TabsContent>\n          )}\n          <TabsContent\n            tabIndex={-1}\n            className='tab-content'\n            value={tabs",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "8d4f2915ea6223b61ab514f5e6c0a947",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": "onTouchStart={this.handleClick} defaultValue={currentTab} onValueChange={this.switchTab} {...(hasPreview && { 'data-haspreview': 'true' })} > <TabsList className='nav-lists'> {!hasEditableBoundaries && ( <TabsTrigger value={tabs.instructions}> {i18next.t('learn.editor-tabs.instructions')} </TabsTrigger> )} <TabsTrigger value={tabs.editor}> {i18next.t('learn.editor-tabs.code')} </TabsTrigger> {!!notes && usesMultifileEditor && ( <TabsTrigger value={tabs.notes}> {i18next.t('learn.editor-tabs.notes')} </TabsTrigger> )} <TabsTrigger value={tabs.console}> {i18next.t('learn.editor-tabs.console')} </TabsTrigger> {hasPreview && ( <TabsTrigger value={tabs.preview}> {i18next.t('learn.editor-tabs.preview')} </TabsTrigger> )} </TabsList> <TabsContent tabIndex={-1} className='tab-content' value={tabs editor} > {usesMultifileEditor && <EditorTabs />} {editor} </TabsContent> { hasEditableBoundaries && ( <TabsContent tabIndex={-1} className='tab-content' value={tabs instructions} > {instructions} </TabsContent> )} <TabsContent tabIndex={-1} className='tab-content' value={tabsconsole}\n          >\n            {testOutput}\n          </TabsContent>\n          { notes && usesMultifileEditor && (\n            <TabsContent\n              tabIndex={-1}\n              className='tab-content'\n              value={tabs notes}\n            >\n              <Notes notes={notes} />\n            </TabsContent>\n          )}\n          {hasPreview && (\n            <TabsContent\n              tabIndex={-1}\n              className='tab-content'\n              data-playwright-test-label='preview-pane'\n              value={tabs preview}\n              forceMount\n              // forceMount causes the preview tabpanel to never be hidden,\n              // so we need to manually add it when preview is not active { (this state currentTab === 'preview' {} : { hidden: true })}\n            >\n              <div className='portal-button-wrap'>\n                <button\n                  className='portal-button'\n                  aria-expanded={",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "e0604b9c4901efaebcfe23888633fab5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
    "source_type": "git_repo",
    "title": "mobile-layout",
    "content": ")} <TabsContent tabIndex={-1} className='tab-content' value={tabsconsole} > {testOutput} </TabsContent> { notes && usesMultifileEditor && ( <TabsContent tabIndex={-1} className='tab-content' value={tabs notes} > <Notes notes={notes} /> </TabsContent> )} {hasPreview && ( <TabsContent tabIndex={-1} className='tab-content' data-playwright-test-label='preview-pane' value={tabs preview} forceMount // forceMount causes the preview tabpanel to never be hidden, // so we need to manually add it when preview is not active { (this state currentTab === 'preview' {} : { hidden: true })} > <div className='portal-button-wrap'> <button className='portal-button' aria-expanded={showPreviewPortal}\n                  onClick={() => togglePane('showPreviewPortal')}\n                >\n                  <span className='sr-only'>{getPortalBtnSrText()}</span>\n                  <FontAwesomeIcon icon={faWindowRestore} />\n                </button>\n              </div>\n              {displayPreviewPane && preview}\n              {showPreviewPortal && (\n                <p className='preview-external-window'>\n                  {i18next t('learn preview-external-window')}\n                </p>\n              )}\n            </TabsContent>\n          )}\n          { hasEditableBoundaries && toolPanel}\n          {hasPreview && this state currentTab == 'preview' && (\n            <div className='portal-button-wrap'>\n              <button\n                className='portal-button'\n                aria-expanded={ showPreviewPortal}\n                onClick={() => togglePane('showPreviewPortal')}\n              >\n                <span className='sr-only'>{getPortalBtnSrText()}</span>\n                <FontAwesomeIcon icon={faWindowRestore} />\n              </button>\n            </div>\n          )}\n        </Tabs>\n        {displayPreviewPortal && (\n          <PreviewPortal onResize={onPreviewResize} windowTitle={windowTitle}>\n            {preview}\n          </PreviewPortal>\n        )}\n      </>\n    );\n  }\n}\n\nMobileLayout.displayName = 'MobileLayout';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileLayout);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\mobile-layout.tsx",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "22384b59f0c545cc1f3824be98425250",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
    "source_type": "git_repo",
    "title": "multifile-editor",
    "content": "import React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { ReflexContainer, ReflexElement, ReflexSplitter } from 'react-reflex';\nimport { createSelector } from 'reselect';\nimport { isDonationModalOpenSelector } from '../../../redux/selectors';\nimport {\n  canFocusEditorSelector,\n  visibleEditorsSelector\n} from '../redux/selectors';\nimport { getTargetEditor } from '../utils/get-target-editor';\nimport './editor.css';\nimport Editor, { type EditorProps } from './editor';\n\nexport type VisibleEditors = {\n  indexhtml?: boolean;\n  indexjsx?: boolean;\n  stylescss?: boolean;\n  scriptjs?: boolean;\n  indexts?: boolean;\n  mainpy?: boolean;\n};\ntype MultifileEditorProps = Pick<\n  EditorProps,\n  | 'usesMultifileEditor'\n  | 'showProjectPreview'\n  | 'title'\n  | 'resizeProps'\n  | 'isUsingKeyboardInTablist'\n  | 'isMobileLayout'\n  | 'initialTests'\n  | 'editorRef'\n  | 'containerRef'\n  | 'block'\n  | 'superBlock'\n  | 'challengeFiles'\n  | 'description'\n  // We use dimensions to trigger a re-render of the editor\n  | 'dimensions'\n  | 'showIndependentLowerJaw'\n> & {\n  visibleEditors: VisibleEditors;\n};\n\nconst mapStateToProps = createSelector(\n  visibleEditorsSelector,\n  canFocusEditorSelector,\n  isDonationModalOpenSelector,\n  (visibleEditors: VisibleEditors, canFocus: boolean, open) => ({\n    visibleEditors,\n    canFocus: open ? false : canFocus\n  })\n);\n\nconst MultifileEditor = (props: MultifileEditorProps) => {\n  const {\n    block,\n    superBlock,\n    challengeFiles,\n    containerRef,\n    description,\n    editorRef,\n    initialTests,\n    isMobileLayout,\n    isUsingKeyboardInTablist,\n    resizeProps,\n    title,\n    visibleEditors: {\n      stylescss,\n      indexhtml,\n      scriptjs,\n      indexts,\n      indexjsx,\n      mainpy\n    },\n    usesMultifileEditor,\n    showProjectPreview,\n    showIndependentLowerJaw\n  } = props;\n  // TODO: the tabs mess up the rendering (scroll doesn't work properly and\n  // the in-editor description)",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4887,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "8a248f0c069a4afd60a2b908badf52d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
    "source_type": "git_repo",
    "title": "multifile-editor",
    "content": "}; const mapStateToProps = createSelector( visibleEditorsSelector, canFocusEditorSelector, isDonationModalOpenSelector, (visibleEditors: VisibleEditors, canFocus: boolean, open) => ({ visibleEditors, canFocus: open ? false : canFocus }) ); const MultifileEditor = (props: MultifileEditorProps) => { const { block, superBlock, challengeFiles, containerRef, description, editorRef, initialTests, isMobileLayout, isUsingKeyboardInTablist, resizeProps, title, visibleEditors: { stylescss, indexhtml, scriptjs, indexts, indexjsx, mainpy }, usesMultifileEditor, showProjectPreview, showIndependentLowerJaw } = props; // TODO: the tabs mess up the rendering (scroll doesn't work properly and // the in-editor description)\n\nconst reflexProps = {\n    propagateDimensions: true\n  };\n\nconst targetEditor = getTargetEditor(challengeFiles);\n\n// Only one editor should be focused and that should happen once, after it has\n  // been mounted. This ref allows the editors to coordinate, without having to\n  // resort to redux.\n  const canFocusOnMountRef = useRef(true);\n\nconst editorKeys = [];\n\n// The order of the keys should match the order set by sortChallengeFiles\n  if (indexjsx) editorKeys.push('indexjsx');\n  if (indexhtml) editorKeys.push('indexhtml');\n  if (stylescss) editorKeys.push('stylescss');\n  if (scriptjs) editorKeys.push('scriptjs');\n  if (mainpy) editorKeys.push('mainpy');\n  if (indexts) editorKeys.push('indexts');\n\nconst editorAndSplitterKeys = editorKeys.reduce((acc: string[] | [], key) => {\n    if (acc.length === 0) {\n      return [key];\n    } else {\n      return [...acc, `${key}-splitter`, key];\n    }\n  }, []);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4887,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d24090635129ea58d152a3d842e75024",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
    "source_type": "git_repo",
    "title": "multifile-editor",
    "content": "editors to coordinate, without having to // resort to redux. const canFocusOnMountRef = useRef(true); const editorKeys = []; // The order of the keys should match the order set by sortChallengeFiles if (indexjsx) editorKeys.push('indexjsx'); if (indexhtml) editorKeys.push('indexhtml'); if (stylescss) editorKeys.push('stylescss'); if (scriptjs) editorKeys.push('scriptjs'); if (mainpy) editorKeys.push('mainpy'); if (indexts) editorKeys.push('indexts'); const editorAndSplitterKeys = editorKeys.reduce((acc: string[] | [], key) => { if (acc.length === 0) { return [key]; } else { return [...acc, `${key}-splitter`, key]; } }, []);\n\nreturn (\n    <ReflexContainer\n      orientation='horizontal'\n      {...reflexProps}\n      {...resizeProps}\n      className='editor-container'\n    >\n      <ReflexElement flex={10} {...reflexProps} {...resizeProps}>\n        <ReflexContainer orientation='vertical'>\n          {editorAndSplitterKeys.map(key => {\n            const isSplitter = key.endsWith('-splitter');\n            if (isSplitter) {\n              return (\n                <ReflexSplitter propagate={true} {...resizeProps} key={key} />\n              );\n            } else {\n              return (\n                <ReflexElement\n                  data-playwright-test-label={`editor-container-${key}`}\n                  {...reflexProps}\n                  {...resizeProps}\n                  key={key}\n                >\n                  <Editor\n                    canFocusOnMountRef={canFocusOnMountRef}\n                    block={block}\n                    superBlock={superBlock}\n                    challengeFiles={challengeFiles}\n                    containerRef={containerRef}\n                    description={targetEditor === key ? description : ''}\n                    editorRef={editorRef}\n                    fileKey={key}\n                    initialTests={initialTests}\n                    isMobileLayout={isMobileLayout}\n                    isUsingKeyboardInTablist={isUsingKeyboardInTablist}\n                    resizeProps={resizeProps}\n                    dimensions={props.dimensions ?? { height: 0, width: 0 }}\n                    title={title}\n                    usesMultifileEditor={usesMultifileEditor}\n                    showProjectPreview={showProjectPreview}\n                    showIndependentLowerJaw={showIndependentLowerJaw}\n                  />\n                </ReflexElement>\n              );\n            }\n          })}\n        </ReflexContainer>\n      </ReflexElement>\n    </ReflexContainer>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4887,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9ed174b09407e1bd2718b8f62245c5f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
    "source_type": "git_repo",
    "title": "multifile-editor",
    "content": "<ReflexElement flex={10} {...reflexProps} {...resizeProps}> <ReflexContainer orientation='vertical'> {editorAndSplitterKeys.map(key => { const isSplitter = key.endsWith('-splitter'); if (isSplitter) { return ( <ReflexSplitter propagate={true} {...resizeProps} key={key} /> ); } else { return ( <ReflexElement data-playwright-test-label={`editor-container-${key}`} {...reflexProps} {...resizeProps} key={key} > <Editor canFocusOnMountRef={canFocusOnMountRef} block={block} superBlock={superBlock} challengeFiles={challengeFiles} containerRef={containerRef} description={targetEditor === key ? description : ''} editorRef={editorRef} fileKey={key} initialTests={initialTests} isMobileLayout={isMobileLayout} isUsingKeyboardInTablist={isUsingKeyboardInTablist} resizeProps={resizeProps} dimensions={props.dimensions ?? { height: 0, width: 0 }} title={title} usesMultifileEditor={usesMultifileEditor} showProjectPreview={showProjectPreview} showIndependentLowerJaw={showIndependentLowerJaw} /> </ReflexElement> ); } })} </ReflexContainer> </ReflexElement> </ReflexContainer> ); };\n\nMultifileEditor.displayName = 'MultifileEditor';\n\nexport default connect(mapStateToProps)(MultifileEditor);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4887,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\multifile-editor.tsx",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "10b25ebbc9133115daded6a90d5c962d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.test.ts",
    "source_type": "git_repo",
    "title": "saved-challenges.test",
    "content": "import type {\n  ChallengeFile,\n  SavedChallengeFile\n} from '../../../redux/prop-types';\nimport { mergeChallengeFiles } from './saved-challenges';\n\nconst jsChallenge = {\n  contents: 'js contents',\n  fileKey: 'jsFileKey',\n  name: 'name',\n  ext: 'js' as const,\n  head: 'head',\n  tail: 'tail',\n  history: [],\n  seed: 'original js contents',\n  path: 'index.js'\n};\n\nconst cssChallenge = {\n  contents: 'css contents',\n  fileKey: 'cssFileKey',\n  name: 'name',\n  ext: 'css' as const,\n  head: 'head',\n  tail: 'tail',\n  history: [],\n  seed: 'original css contents',\n  path: 'styles.css'\n};\n\nconst htmlChallenge = {\n  contents: 'html contents',\n  fileKey: 'htmlFileKey',\n  name: 'name',\n  ext: 'html' as const,\n  head: 'head',\n  tail: 'tail',\n  history: [],\n  seed: 'original html contents',\n  path: 'index.html'\n};\n\nconst savedJsChallenge: SavedChallengeFile = {\n  contents: 'saved js contents',\n  fileKey: 'jsFileKey',\n  name: 'name',\n  ext: 'js' as const\n};\n\nconst savedCssChallenge: SavedChallengeFile = {\n  contents: 'saved css contents',\n  fileKey: 'cssFileKey',\n  name: 'name',\n  ext: 'css' as const\n};\n\nconst savedHtmlChallenge: SavedChallengeFile = {\n  contents: 'saved html contents',\n  fileKey: 'htmlFileKey',\n  name: 'name',\n  ext: 'html' as const\n};\n\ndescribe('mergeChallengeFiles', () => {\n  it('should return files if savedChallengeFiles is undefined', () => {\n    const files: ChallengeFile[] = [htmlChallenge];\n    const savedChallengeFiles = undefined;\n\nconst result = mergeChallengeFiles(files, savedChallengeFiles);\n\nexpect(result).toEqual(files);\n  });\n\nit('should return an empty array if files is undefined', () => {\n    const files = undefined;\n    const savedChallengeFiles = [savedJsChallenge];\n\nconst result = mergeChallengeFiles(files, savedChallengeFiles);\n\nexpect(result).toEqual([]);\n  });",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3179,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cea8d3b83e79a7784b450a56700037de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.test.ts",
    "source_type": "git_repo",
    "title": "saved-challenges.test",
    "content": "}; const savedHtmlChallenge: SavedChallengeFile = { contents: 'saved html contents', fileKey: 'htmlFileKey', name: 'name', ext: 'html' as const }; describe('mergeChallengeFiles', () => { it('should return files if savedChallengeFiles is undefined', () => { const files: ChallengeFile[] = [htmlChallenge]; const savedChallengeFiles = undefined; const result = mergeChallengeFiles(files, savedChallengeFiles); expect(result).toEqual(files); }); it('should return an empty array if files is undefined', () => { const files = undefined; const savedChallengeFiles = [savedJsChallenge]; const result = mergeChallengeFiles(files, savedChallengeFiles); expect(result).toEqual([]); });\n\nit('should return files if savedChallengeFiles has a different length', () => {\n    const files: ChallengeFile[] = [cssChallenge];\n    const savedChallengeFiles: SavedChallengeFile[] = [\n      savedCssChallenge,\n      savedJsChallenge\n    ];\n\nconst result = mergeChallengeFiles(files, savedChallengeFiles);\n\nexpect(result).toEqual(files);\n  });\n\nit('should return files if the fileKey properties do not match', () => {\n    const files: ChallengeFile[] = [jsChallenge, cssChallenge];\n    const savedChallengeFiles: SavedChallengeFile[] = [\n      savedHtmlChallenge,\n      savedCssChallenge\n    ];\n\nconst result = mergeChallengeFiles(files, savedChallengeFiles);\n\nexpect(result).toEqual(files);\n  });\n\nit('should use the contents from the saved file', () => {\n    const files: ChallengeFile[] = [cssChallenge, htmlChallenge, jsChallenge];\n    const savedChallengeFiles = [\n      savedJsChallenge,\n      savedCssChallenge,\n      savedHtmlChallenge\n    ];\n\nconst result = mergeChallengeFiles(files, savedChallengeFiles);\n\nexpect(result).toEqual([\n      {\n        ...cssChallenge,\n        contents: savedCssChallenge.contents\n      },\n      {\n        ...htmlChallenge,\n        contents: savedHtmlChallenge.contents\n      },\n      {\n        ...jsChallenge,\n        contents: savedJsChallenge.contents\n      }\n    ]);\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3179,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5f7e23994ac11aeddfdf106f12e7a805",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.ts",
    "source_type": "git_repo",
    "title": "saved-challenges",
    "content": "import { ChallengeFile, SavedChallengeFile } from '../../../redux/prop-types';\n\nexport function mergeChallengeFiles(\n  files?: ChallengeFile[] | null,\n  savedFiles?: SavedChallengeFile[] | null\n): ChallengeFile[] {\n  if (!files) return [];\n  if (!savedFiles) return files;\n  if (files.length !== savedFiles.length) return files;\n\nconst sortedChallengeFiles = files.sort((a, b) =>\n    a.fileKey.localeCompare(b.fileKey)\n  );\n  const sortedSavedChallengeFiles = savedFiles.sort((a, b) =>\n    a.fileKey.localeCompare(b.fileKey)\n  );\n\nconst fileKeysMatch = sortedChallengeFiles.every(\n    (file, index) => file.fileKey === sortedSavedChallengeFiles[index].fileKey\n  );\n\nif (!fileKeysMatch) return files;\n\nreturn sortedChallengeFiles.map((file, index) => ({\n    ...file,\n    contents: sortedSavedChallengeFiles[index].contents,\n    editableRegionBoundaries:\n      sortedSavedChallengeFiles[index].editableRegionBoundaries\n  }));\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 934,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\saved-challenges.ts",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7deda327cb33a0d072130f70db25cf9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "[\n  {\n    \"id\": \"bd7123c8c441eddfaeb5bdef\",\n    \"completedDate\": 1475094716730,\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70bf9fc0f352b528e64\",\n    \"completedDate\": 1537207306322,\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f700f9fc0f352b528e63\",\n    \"completedDate\": 1537206156261,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8250367417b2b2512c5d\",\n    \"completedDate\": 1537196341863,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824f367417b2b2512c5c\",\n    \"completedDate\": 1537196128255,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824f367417b2b2512c5b\",\n    \"completedDate\": 1537195761754,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824f367417b2b2512c5a\",\n    \"completedDate\": 1537194934561,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824f367417b2b2512c59\",\n    \"completedDate\": 1537191541514,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824e367417b2b2512c58\",\n    \"completedDate\": 1537191117061,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824e367417b2b2512c57\",\n    \"completedDate\": 1537156833598,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824e367417b2b2512c56\",\n    \"completedDate\": 1537156784572,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824e367417b2b2512c55\",\n    \"completedDate\": 1537156722004,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824d367417b2b2512c54\",\n    \"completedDate\": 1537156654992,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824d367417b2b2512c53\",\n    \"completedDate\": 1537156621303,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824d367417b2b2512c52\",\n    \"completedDate\": 1537156534601,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824d367417b2b2512c51\",\n    \"completedDate\": 1537156456357,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824d367417b2b2512c50\",\n    \"completedDate\": 1537156425359,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824c367417b2b2512c4f\",\n    \"completedDate\": 1537156351862,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824c367417b2b2512c4e\",\n    \"completedDate\": 1537155828325,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824c367417b2b2512c4d\",\n    \"completedDate\": 1537155787245,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824c367417b2b2512c4c\",\n    \"completedDate\": 1537155713207,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824b367417b2b2512c4b\",\n    \"completedDate\": 1537155677686,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824b367417b2b2512c4a\",\n    \"completedDate\": 1537155558649,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824b367417b2b2512c49\",\n    \"completedDate\": 1537155417358,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824b367417b2b2512c48\",\n    \"completedDate\": 1537155376892,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824b367417b2b2512c47\",\n    \"completedDate\": 1537155346597,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824a367417b2b2512c46\",\n    \"completedDate\": 1537155223667,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0e9ef99a403d019610cd\",\n    \"completedDate\": 1594737025062,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0e9ef99a403d019610cc\",\n    \"completedDate\": 1594737019383,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0e9ef99a403d019610cb\",\n    \"completedDate\": 1594737013076,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0e9ef99a403d019610ca\",\n    \"completedDate\": 1594737007379,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da6\",\n    \"completedDate\": 1594736997931,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da5\",\n    \"completedDate\": 1594736991766,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da4\",\n    \"completedDate\": 1594736985764,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da3\",\n    \"completedDate\": 1594736981667,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da2\",\n    \"completedDate\": 1594736977865,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da1\",\n    \"completedDate\": 1594736973679,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72da0\",\n    \"completedDate\": 1594736951770,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9f\",\n    \"completedDate\": 1594736947277,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9e\",\n    \"completedDate\": 1594736941520,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9d\",\n    \"completedDate\": 1594736936531,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9c\",\n    \"completedDate\": 1594736931464,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9b\",\n    \"completedDate\": 1594736928913,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d9a\",\n    \"completedDate\": 1594736926241,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d99\",\n    \"completedDate\": 1594736922879,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d98\",\n    \"completedDate\": 1594736916015,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d97\",\n    \"completedDate\": 1594736913489,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d96\",\n    \"completedDate\": 1594736911022,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d95\",\n    \"completedDate\": 1594736906356,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d94\",\n    \"completedDate\": 1594736902879,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d93\",\n    \"completedDate\": 1594736899068,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d92\",\n    \"completedDate\": 1594736892768,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d91\",\n    \"completedDate\": 1594736887031,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d90\",\n    \"completedDate\": 1594736881826,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8f\",\n    \"completedDate\": 1594736878283,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8e\",\n    \"completedDate\": 1594736870814,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8d\",\n    \"completedDate\": 1594736867216,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8c\",\n    \"completedDate\": 1594736860834,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8b\",\n    \"completedDate\": 1594736854454,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d8a\",\n    \"completedDate\": 1594736850998,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d89\",\n    \"completedDate\": 1594736845393,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d88\",\n    \"completedDate\": 1594736783329,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e8f2f13c4cdbe86b5c72d87\",\n    \"completedDate\": 1594736780706,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94db4\",\n    \"completedDate\": 1594736766657,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94db3\",\n    \"completedDate\": 1594736760393,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94db2\",\n    \"completedDate\": 1594736756583,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94db1\",\n    \"completedDate\": 1594736752876,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94db0\",\n    \"completedDate\": 1594736746497,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94daf\",\n    \"completedDate\": 1594736741574,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea9997bbec2e9bc47e94dae\",\n    \"completedDate\": 1594736737468,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600eda\",\n    \"completedDate\": 1594736722645,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed9\",\n    \"completedDate\": 1594736717640,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed8\",\n    \"completedDate\": 1594736714767,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed7\",\n    \"completedDate\": 1594736707875,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed6\",\n    \"completedDate\": 1594736702192,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed5\",\n    \"completedDate\": 1594736698412,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed4\",\n    \"completedDate\": 1594736694389,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed3\",\n    \"completedDate\": 1594736687971,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a0a8e09c5df3cc3600ed2\",\n    \"completedDate\": 1594736682613,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c167\",\n    \"completedDate\": 1594736675575,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c166\",\n    \"completedDate\": 1594736668250,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c165\",\n    \"completedDate\": 1594736665022,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c164\",\n    \"completedDate\": 1594736659263,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c163\",\n    \"completedDate\": 1594736655408,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c162\",\n    \"completedDate\": 1594736649726,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c161\",\n    \"completedDate\": 1594736645479,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c160\",\n    \"completedDate\": 1594736641203,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15f\",\n    \"completedDate\": 1594736636454,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15e\",\n    \"completedDate\": 1594736632226,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15d\",\n    \"completedDate\": 1594736627710,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15c\",\n    \"completedDate\": 1594736622070,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15b\",\n    \"completedDate\": 1594736618054,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c15a\",\n    \"completedDate\": 1594736614700,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c159\",\n    \"completedDate\": 1594736608320,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c158\",\n    \"completedDate\": 1594736602219,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c157\",\n    \"completedDate\": 1594736598552,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c156\",\n    \"completedDate\": 1594736593024,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c155\",\n    \"completedDate\": 1594736580318,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c154\",\n    \"completedDate\": 1594736568877,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c153\",\n    \"completedDate\": 1594736563755,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c152\",\n    \"completedDate\": 1594736552154,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c151\",\n    \"completedDate\": 1594736546567,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c150\",\n    \"completedDate\": 1594736539257,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c14f\",\n    \"completedDate\": 1594736536366,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c14e\",\n    \"completedDate\": 1594736532795,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c14d\",\n    \"completedDate\": 1594736530152,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e9a093a74c4063ca6f7c14c\",\n    \"completedDate\": 1594736526774,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f6a0b6c005b0e76f097\",\n    \"completedDate\": 1594736494981,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f6a0b6c005b0e76f096\",\n    \"completedDate\": 1594736491249,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f690b6c005b0e76f095\",\n    \"completedDate\": 1594736486246,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f190b6c005b0e76f090\",\n    \"completedDate\": 1594736476917,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f180b6c005b0e76f08f\",\n    \"completedDate\": 1594736461881,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f180b6c005b0e76f08e\",\n    \"completedDate\": 1594736452018,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f180b6c005b0e76f08d\",\n    \"completedDate\": 1594736444874,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f180b6c005b0e76f08c\",\n    \"completedDate\": 1594736437803,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f170b6c005b0e76f08b\",\n    \"completedDate\": 1594736432528,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f170b6c005b0e76f08a\",\n    \"completedDate\": 1594736422051,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f170b6c005b0e76f088\",\n    \"completedDate\": 1594736417716,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f170b6c005b0e76f087\",\n    \"completedDate\": 1594736414175,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f160b6c005b0e76f086\",\n    \"completedDate\": 1594736410906,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f160b6c005b0e76f085\",\n    \"completedDate\": 1594736379721,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f150b6c005b0e76f080\",\n    \"completedDate\": 1594736373639,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f150b6c005b0e76f07f\",\n    \"completedDate\": 1594736365244,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f140b6c005b0e76f07e\",\n    \"completedDate\": 1594736358778,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f140b6c005b0e76f07d\",\n    \"completedDate\": 1594736353015,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0e0b6c005b0e76f07c\",\n    \"completedDate\": 1594736348722,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0e0b6c005b0e76f07b\",\n    \"completedDate\": 1594736342374,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0e0b6c005b0e76f07a\",\n    \"completedDate\": 1594736336127,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0d0b6c005b0e76f076\",\n    \"completedDate\": 1594736332128,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0d0b6c005b0e76f075\",\n    \"completedDate\": 1594736324629,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0c0b6c005b0e76f074\",\n    \"completedDate\": 1594736317130,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0c0b6c005b0e76f073\",\n    \"completedDate\": 1594736312374,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0c0b6c005b0e76f072\",\n    \"completedDate\": 1594736298454,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0c0b6c005b0e76f071\",\n    \"completedDate\": 1594736291062,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0b0b6c005b0e76f070\",\n    \"completedDate\": 1594736281756,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0b0b6c005b0e76f06f\",\n    \"completedDate\": 1594736276938,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0b0b6c005b0e76f06e\",\n    \"completedDate\": 1594736270403,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0b0b6c005b0e76f06d\",\n    \"completedDate\": 1594736266728,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0a0b6c005b0e76f06c\",\n    \"completedDate\": 1594736256389,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f0a0b6c005b0e76f069\",\n    \"completedDate\": 1594736249458,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f090b6c005b0e76f068\",\n    \"completedDate\": 1594736240329,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f090b6c005b0e76f067\",\n    \"completedDate\": 1594736231416,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f090b6c005b0e76f066\",\n    \"completedDate\": 1594736222820,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f090b6c005b0e76f065\",\n    \"completedDate\": 1594736189335,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f080b6c005b0e76f064\",\n    \"completedDate\": 1594736184197,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f080b6c005b0e76f063\",\n    \"completedDate\": 1594736179115,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f080b6c005b0e76f062\",\n    \"completedDate\": 1594736170111,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f070b6c005b0e76f061\",\n    \"completedDate\": 1594736166777,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f070b6c005b0e76f060\",\n    \"completedDate\": 1594736155841,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f070b6c005b0e76f05f\",\n    \"completedDate\": 1594736151207,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f070b6c005b0e76f05e\",\n    \"completedDate\": 1594736139632,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f070b6c005b0e76f05d\",\n    \"completedDate\": 1594736134513,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f060b6c005b0e76f05c\",\n    \"completedDate\": 1594736127815,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f060b6c005b0e76f05b\",\n    \"completedDate\": 1594736121855,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f060b6c005b0e76f05a\",\n    \"completedDate\": 1594736116852,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f060b6c005b0e76f059\",\n    \"completedDate\": 1594736110114,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f050b6c005b0e76f058\",\n    \"completedDate\": 1594736099389,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f050b6c005b0e76f057\",\n    \"completedDate\": 1594736079471,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e7b9f050b6c005b0e76f056\",\n    \"completedDate\": 1594736073962,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e6a54c358d3af90110a60a3\",\n    \"completedDate\": 1594736049167,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e6a54ba58d3af90110a60a2\",\n    \"completedDate\": 1594736044195,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e6a54af58d3af90110a60a1\",\n    \"completedDate\": 1594736040286,\n    \"files\": []\n  },\n  {\n    \"id\": \"5e6a54a558d3af90110a60a0\",\n    \"completedDate\": 1594736018884,\n    \"files\": []\n  },\n  {\n    \"id\": \"58a25bcff9fc0f352b528e7e\",\n    \"completedDate\": 1537204939276,\n    \"files\": []\n  },\n  {\n    \"id\": \"58a25bcff9fc0f352b528e7d\",\n    \"completedDate\": 1537204689114,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db3367417b2b2512b8f\",\n    \"completedDate\": 1528836297983,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db3367417b2b2512b8e\",\n    \"completedDate\": 1528836242517,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8251367417b2b2512c64\",\n    \"completedDate\": 1584724916681,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a23c84252665b21eecc8040\",\n    \"completedDate\": 1581377129224,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3881000cf542c50fe9b\",\n    \"completedDate\": 1581267049205,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3851000cf542c50fe98\",\n    \"completedDate\": 1581261142636,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a51eabcad78bf416f316e2a\",\n    \"completedDate\": 1581259050886,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f37b1000cf542c50fe8e\",\n    \"completedDate\": 1581220627138,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f37a1000cf542c50fe8c\",\n    \"completedDate\": 1563131237063,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3781000cf542c50fe8b\",\n    \"completedDate\": 1581209840334,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3761000cf542c50fe89\",\n    \"completedDate\": 1581200258395,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3741000cf542c50fe87\",\n    \"completedDate\": 1581197527928,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3731000cf542c50fe86\",\n    \"completedDate\": 1581194166358,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3721000cf542c50fe85\",\n    \"completedDate\": 1581192983102,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3711000cf542c50fe84\",\n    \"completedDate\": 1581107068452,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cdafbb0291309899753167f\",\n    \"completedDate\": 1574302240996,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ccfad82bb2dc6c965a848e5\",\n    \"completedDate\": 1574302514181,\n    \"files\": []\n  },\n  {\n    \"id\": \"5c3dda8b4d8df89bea71600f\",\n    \"completedDate\": 1574302492985,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cdafbe72913098997531682\",\n    \"completedDate\": 1574302346019,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cdafbd72913098997531681\",\n    \"completedDate\": 1574302316716,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cdafbc32913098997531680\",\n    \"completedDate\": 1574302286941,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cddbfd622f1a59093ec611d\",\n    \"completedDate\": 1574302200001,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cfa550e84205a357704ccb6\",\n    \"completedDate\": 1574302164631,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cd9a70215d3c4e65518328f\",\n    \"completedDate\": 1574302134656,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cc0bd7a49b71cb96132e54c\",\n    \"completedDate\": 1574302122706,\n    \"files\": []\n  },\n  {\n    \"id\": \"5c6c06847491271903d37cfd\",\n    \"completedDate\": 1574301689702,\n    \"files\": []\n  },\n  {\n    \"id\": \"5cfa3679138e7d9595b9d9d4\",\n    \"completedDate\": 1572140656699,\n    \"files\": []\n  },\n  {\n    \"id\": \"597f24c1dda4e70f53c79c81\",\n    \"completedDate\": 1568427791545,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a23c84252665b21eecc7e82\",\n    \"completedDate\": 1568426995929,\n    \"files\": []\n  },\n  {\n    \"id\": \"59669d08d75b60482359409f\",\n    \"completedDate\": 1568390166116,\n    \"files\": []\n  },\n  {\n    \"id\": \"594d8d0ab97724821379b1e6\",\n    \"completedDate\": 1568387040347,\n    \"files\": []\n  },\n  {\n    \"id\": \"594810f028c0303b75339ad1\",\n    \"completedDate\": 1568346223877,\n    \"files\": []\n  },\n  {\n    \"id\": \"596e457071c35c882915b3e4\",\n    \"completedDate\": 1568334942324,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf0887a\",\n    \"completedDate\": 1475094757107,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c441eddfaeb4bdef\",\n    \"completedDate\": 1475173147497,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b89367417b2b2512b49\",\n    \"completedDate\": 1528729165835,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8c367417b2b2512b58\",\n    \"completedDate\": 1528742042170,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8c367417b2b2512b57\",\n    \"completedDate\": 1528741796573,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8c367417b2b2512b56\",\n    \"completedDate\": 1528740437095,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8c367417b2b2512b55\",\n    \"completedDate\": 1528740387410,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24bbe0dba28a8d3cbd4c5d\",\n    \"completedDate\": 1528936352198,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbc367417b2b2512bb1\",\n    \"completedDate\": 1528936259926,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe1369fb03452672e45d\",\n    \"completedDate\": 1528726237694,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe0569fb03452672e45c\",\n    \"completedDate\": 1528726188458,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fdf869fb03452672e45b\",\n    \"completedDate\": 1528726170915,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a90376038fddaf9a66b5d3c\",\n    \"completedDate\": 1528726156897,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a90375238fddaf9a66b5d3b\",\n    \"completedDate\": 1528726139703,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a90374338fddaf9a66b5d3a\",\n    \"completedDate\": 1528726130365,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a90373638fddaf9a66b5d39\",\n    \"completedDate\": 1528726091369,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a90372638fddaf9a66b5d38\",\n    \"completedDate\": 1528726069769,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036ee38fddaf9a66b5d37\",\n    \"completedDate\": 1528726049483,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036ee38fddaf9a66b5d36\",\n    \"completedDate\": 1528726030349,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036ee38fddaf9a66b5d35\",\n    \"completedDate\": 1528726016678,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036ee38fddaf9a66b5d34\",\n    \"completedDate\": 1528725989219,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036e138fddaf9a66b5d33\",\n    \"completedDate\": 1528725967520,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9036d038fddaf9a66b5d32\",\n    \"completedDate\": 1528725949737,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a858944d96184f06fd60d61\",\n    \"completedDate\": 1528725909984,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8255367417b2b2512c73\",\n    \"completedDate\": 1544535146554,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8254367417b2b2512c71\",\n    \"completedDate\": 1544451674921,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d825b367417b2b2512c8d\",\n    \"completedDate\": 1544365302994,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8254367417b2b2512c70\",\n    \"completedDate\": 1544279548091,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8255367417b2b2512c72\",\n    \"completedDate\": 1544128168268,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8253367417b2b2512c6b\",\n    \"completedDate\": 1544016209200,\n    \"files\": []\n  },\n  {\n    \"id\": \"8d1323c8c441eddfaeb5bdef\",\n    \"completedDate\": 1543963893788,\n    \"files\": []\n  },\n  {\n    \"id\": \"8d1923c8c441eddfaeb5bdef\",\n    \"completedDate\": 1543842286217,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8255367417b2b2512c74\",\n    \"completedDate\": 1539709034423,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8250367417b2b2512c60\",\n    \"completedDate\": 1539311762179,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824a367417b2b2512c45\",\n    \"completedDate\": 1538239274460,\n    \"solution\": \"https://fcc-message-bored",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 9995,
    "chunk_index": 0,
    "total_chunks": 74
  },
  {
    "id": "dec311bef64b6b32945274867a59aee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1544451674921, \"files\": [] }, { \"id\": \"587d825b367417b2b2512c8d\", \"completedDate\": 1544365302994, \"files\": [] }, { \"id\": \"587d8254367417b2b2512c70\", \"completedDate\": 1544279548091, \"files\": [] }, { \"id\": \"587d8255367417b2b2512c72\", \"completedDate\": 1544128168268, \"files\": [] }, { \"id\": \"587d8253367417b2b2512c6b\", \"completedDate\": 1544016209200, \"files\": [] }, { \"id\": \"8d1323c8c441eddfaeb5bdef\", \"completedDate\": 1543963893788, \"files\": [] }, { \"id\": \"8d1923c8c441eddfaeb5bdef\", \"completedDate\": 1543842286217, \"files\": [] }, { \"id\": \"587d8255367417b2b2512c74\", \"completedDate\": 1539709034423, \"files\": [] }, { \"id\": \"587d8250367417b2b2512c60\", \"completedDate\": 1539311762179, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c45\", \"completedDate\": 1538239274460, \"solution\": \"https://fcc-message-boredglitch me/\",\n    \"githubLink\": \"https://github com/moT01/FCC-Message-Board\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824a367417b2b2512c44\",\n    \"completedDate\": 1537981270657,\n    \"solution\": \"https://fcc-stock-check glitch me/\",\n    \"githubLink\": \"https://github",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 74
  },
  {
    "id": "2c5fc2d2242391365d59ebd9fc771d4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "}, { \"id\": \"587d8255367417b2b2512c72\", \"completedDate\": 1544128168268, \"files\": [] }, { \"id\": \"587d8253367417b2b2512c6b\", \"completedDate\": 1544016209200, \"files\": [] }, { \"id\": \"8d1323c8c441eddfaeb5bdef\", \"completedDate\": 1543963893788, \"files\": [] }, { \"id\": \"8d1923c8c441eddfaeb5bdef\", \"completedDate\": 1543842286217, \"files\": [] }, { \"id\": \"587d8255367417b2b2512c74\", \"completedDate\": 1539709034423, \"files\": [] }, { \"id\": \"587d8250367417b2b2512c60\", \"completedDate\": 1539311762179, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c45\", \"completedDate\": 1538239274460, \"solution\": \"https://fcc-message-boredglitch me/\", \"githubLink\": \"https://github com/moT01/FCC-Message-Board\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c44\", \"completedDate\": 1537981270657, \"solution\": \"https://fcc-stock-check glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Stock-Checker\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d824a367417b2b2512c43\",\n    \"completedDate\": 1537758214498,\n    \"solution\": \"https://fcc-person-library glitch me/\",\n    \"githubLink\": \"https://github com/moT01/FCC-Personal-Library\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8249367417b2b2512c42\",\n    \"completedDate\": 1537738041237,\n    \"solution\": \"https://fcc-issues-tracker glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 74
  },
  {
    "id": "4ecb76c0fe3bbc0dfd15375a3f80f171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"files\": [] }, { \"id\": \"587d8255367417b2b2512c74\", \"completedDate\": 1539709034423, \"files\": [] }, { \"id\": \"587d8250367417b2b2512c60\", \"completedDate\": 1539311762179, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c45\", \"completedDate\": 1538239274460, \"solution\": \"https://fcc-message-boredglitch me/\", \"githubLink\": \"https://github com/moT01/FCC-Message-Board\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c44\", \"completedDate\": 1537981270657, \"solution\": \"https://fcc-stock-check glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Stock-Checker\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c43\", \"completedDate\": 1537758214498, \"solution\": \"https://fcc-person-library glitch me/\", \"githubLink\": \"https://github com/moT01/FCC-Personal-Library\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c42\", \"completedDate\": 1537738041237, \"solution\": \"https://fcc-issues-tracker glitchme/\",\n    \"githubLink\": \"https://github com/moT01/FCC-Issue-Tracker\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"5b7d72c338cd7e35b63f3e14\",\n    \"completedDate\": 1537653616955,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8249367417b2b2512c41\",\n    \"completedDate\": 1537559766968,\n    \"solution\": \"https://fcc-metric-convert glitch me/\",\n    \"githubLink\": \"https://github",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 74
  },
  {
    "id": "c4a6169067d8d07504c0a554568dce04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"githubLink\": \"https://github com/moT01/FCC-Message-Board\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c44\", \"completedDate\": 1537981270657, \"solution\": \"https://fcc-stock-check glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Stock-Checker\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d824a367417b2b2512c43\", \"completedDate\": 1537758214498, \"solution\": \"https://fcc-person-library glitch me/\", \"githubLink\": \"https://github com/moT01/FCC-Personal-Library\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c42\", \"completedDate\": 1537738041237, \"solution\": \"https://fcc-issues-tracker glitchme/\", \"githubLink\": \"https://github com/moT01/FCC-Issue-Tracker\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"5b7d72c338cd7e35b63f3e14\", \"completedDate\": 1537653616955, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c41\", \"completedDate\": 1537559766968, \"solution\": \"https://fcc-metric-convert glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Metric-Converter\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"58966a17f9fc0f352b528e6d\",\n    \"completedDate\": 1537230386653,\n    \"solution\": \"https://torch-player glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"589690e6f9fc0f352b528e6e\",\n    \"completedDate\": 1537223809877,\n    \"solution\": \"https://eager-harmony glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 4,
    "total_chunks": 74
  },
  {
    "id": "526a87b9c989e2b3277a618b9f3a2ae4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d824a367417b2b2512c43\", \"completedDate\": 1537758214498, \"solution\": \"https://fcc-person-library glitch me/\", \"githubLink\": \"https://github com/moT01/FCC-Personal-Library\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c42\", \"completedDate\": 1537738041237, \"solution\": \"https://fcc-issues-tracker glitchme/\", \"githubLink\": \"https://github com/moT01/FCC-Issue-Tracker\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"5b7d72c338cd7e35b63f3e14\", \"completedDate\": 1537653616955, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c41\", \"completedDate\": 1537559766968, \"solution\": \"https://fcc-metric-convert glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Metric-Converter\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"58966a17f9fc0f352b528e6d\", \"completedDate\": 1537230386653, \"solution\": \"https://torch-player glitch me/\", \"files\": [] }, { \"id\": \"589690e6f9fc0f352b528e6e\", \"completedDate\": 1537223809877, \"solution\": \"https://eager-harmony glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"58a25c98f9fc0f352b528e7f\",\n    \"completedDate\": 1537222634385,\n    \"solution\": \"https://eager-harmony glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"58965611f9fc0f352b528e6c\",\n    \"completedDate\": 1537214717318,\n    \"solution\": \"https://eager-harmony glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 5,
    "total_chunks": 74
  },
  {
    "id": "81fc18ec1e014d42ac1f8bdb76ee8f09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "glitchme/\", \"githubLink\": \"https://github com/moT01/FCC-Issue-Tracker\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"5b7d72c338cd7e35b63f3e14\", \"completedDate\": 1537653616955, \"files\": [] }, { \"id\": \"587d8249367417b2b2512c41\", \"completedDate\": 1537559766968, \"solution\": \"https://fcc-metric-convert glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Metric-Converter\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"58966a17f9fc0f352b528e6d\", \"completedDate\": 1537230386653, \"solution\": \"https://torch-player glitch me/\", \"files\": [] }, { \"id\": \"589690e6f9fc0f352b528e6e\", \"completedDate\": 1537223809877, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"58a25c98f9fc0f352b528e7f\", \"completedDate\": 1537222634385, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58965611f9fc0f352b528e6c\", \"completedDate\": 1537214717318, \"solution\": \"https://eager-harmony glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70ef9fc0f352b528e6b\",\n    \"completedDate\": 1537214579404,\n    \"solution\": \"https://eager-harmony glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70df9fc0f352b528e6a\",\n    \"completedDate\": 1537211858590,\n    \"solution\": \"https://eager-harmony glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 6,
    "total_chunks": 74
  },
  {
    "id": "3b4b301226e95191ce3687d4c28b23be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"https://fcc-metric-convert glitch me/\", \"githubLink\": \"https://githubcom/moT01/FCC-Metric-Converter\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"58966a17f9fc0f352b528e6d\", \"completedDate\": 1537230386653, \"solution\": \"https://torch-player glitch me/\", \"files\": [] }, { \"id\": \"589690e6f9fc0f352b528e6e\", \"completedDate\": 1537223809877, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"58a25c98f9fc0f352b528e7f\", \"completedDate\": 1537222634385, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58965611f9fc0f352b528e6c\", \"completedDate\": 1537214717318, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70ef9fc0f352b528e6b\", \"completedDate\": 1537214579404, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e6a\", \"completedDate\": 1537211858590, \"solution\": \"https://eager-harmony glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70df9fc0f352b528e69\",\n    \"completedDate\": 1537210025542,\n    \"solution\": \"https://eager-harmony glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70df9fc0f352b528e68\",\n    \"completedDate\": 1537209494409,\n    \"solution\": \"https://eager-harmony glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 7,
    "total_chunks": 74
  },
  {
    "id": "44ac5798494b477bd867ac86e90b25d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"589690e6f9fc0f352b528e6e\", \"completedDate\": 1537223809877, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"58a25c98f9fc0f352b528e7f\", \"completedDate\": 1537222634385, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58965611f9fc0f352b528e6c\", \"completedDate\": 1537214717318, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70ef9fc0f352b528e6b\", \"completedDate\": 1537214579404, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e6a\", \"completedDate\": 1537211858590, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e69\", \"completedDate\": 1537210025542, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e68\", \"completedDate\": 1537209494409, \"solution\": \"https://eager-harmony glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70cf9fc0f352b528e67\",\n    \"completedDate\": 1537208702252,\n    \"solution\": \"https://eager-harmony glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70cf9fc0f352b528e66\",\n    \"completedDate\": 1537208136182,\n    \"solution\": \"https://eager-harmony glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 8,
    "total_chunks": 74
  },
  {
    "id": "0c0eb94f019486762ddd85f1b443c891",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"58965611f9fc0f352b528e6c\", \"completedDate\": 1537214717318, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70ef9fc0f352b528e6b\", \"completedDate\": 1537214579404, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e6a\", \"completedDate\": 1537211858590, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e69\", \"completedDate\": 1537210025542, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e68\", \"completedDate\": 1537209494409, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e67\", \"completedDate\": 1537208702252, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e66\", \"completedDate\": 1537208136182, \"solution\": \"https://eager-harmony glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"5895f70cf9fc0f352b528e65\",\n    \"completedDate\": 1537207848068,\n    \"solution\": \"https://eager-harmony glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"58a25bcef9fc0f352b528e7c\",\n    \"completedDate\": 1537200206872,\n    \"solution\": \"https://seemly-fighter glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 9,
    "total_chunks": 74
  },
  {
    "id": "a87c0c5a1dbe593fcee4608494896ef6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"5895f70df9fc0f352b528e6a\", \"completedDate\": 1537211858590, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e69\", \"completedDate\": 1537210025542, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70df9fc0f352b528e68\", \"completedDate\": 1537209494409, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e67\", \"completedDate\": 1537208702252, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e66\", \"completedDate\": 1537208136182, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e65\", \"completedDate\": 1537207848068, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58a25bcef9fc0f352b528e7c\", \"completedDate\": 1537200206872, \"solution\": \"https://seemly-fighter glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8249367417b2b2512c40\",\n    \"completedDate\": 1537199372195,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8249367417b2b2512c3f\",\n    \"completedDate\": 1537199285395,\n    \"solution\": \"https://tidy-roadway glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 10,
    "total_chunks": 74
  },
  {
    "id": "dc1748d98f6d6363a7a89bb092440206",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"5895f70df9fc0f352b528e68\", \"completedDate\": 1537209494409, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e67\", \"completedDate\": 1537208702252, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e66\", \"completedDate\": 1537208136182, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e65\", \"completedDate\": 1537207848068, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58a25bcef9fc0f352b528e7c\", \"completedDate\": 1537200206872, \"solution\": \"https://seemly-fighter glitchme/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c40\", \"completedDate\": 1537199372195, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c3f\", \"completedDate\": 1537199285395, \"solution\": \"https://tidy-roadway glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8249367417b2b2512c3e\",\n    \"completedDate\": 1537198926071,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8248367417b2b2512c3d\",\n    \"completedDate\": 1537198824551,\n    \"solution\": \"https://tidy-roadway glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 11,
    "total_chunks": 74
  },
  {
    "id": "dc3d16ef66b205c99d96a2478f72b2f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"5895f70cf9fc0f352b528e66\", \"completedDate\": 1537208136182, \"solution\": \"https://eager-harmony glitchme/\", \"files\": [] }, { \"id\": \"5895f70cf9fc0f352b528e65\", \"completedDate\": 1537207848068, \"solution\": \"https://eager-harmony glitch me/\", \"files\": [] }, { \"id\": \"58a25bcef9fc0f352b528e7c\", \"completedDate\": 1537200206872, \"solution\": \"https://seemly-fighter glitchme/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c40\", \"completedDate\": 1537199372195, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c3f\", \"completedDate\": 1537199285395, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c3e\", \"completedDate\": 1537198926071, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3d\", \"completedDate\": 1537198824551, \"solution\": \"https://tidy-roadway glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8248367417b2b2512c3c\",\n    \"completedDate\": 1537198750481,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8248367417b2b2512c3b\",\n    \"completedDate\": 1537198630082,\n    \"solution\": \"https://tidy-roadway glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 12,
    "total_chunks": 74
  },
  {
    "id": "27e47187ba6a96c614a882ee390c3dc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"58a25bcef9fc0f352b528e7c\", \"completedDate\": 1537200206872, \"solution\": \"https://seemly-fighter glitchme/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c40\", \"completedDate\": 1537199372195, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c3f\", \"completedDate\": 1537199285395, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8249367417b2b2512c3e\", \"completedDate\": 1537198926071, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3d\", \"completedDate\": 1537198824551, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3c\", \"completedDate\": 1537198750481, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3b\", \"completedDate\": 1537198630082, \"solution\": \"https://tidy-roadway glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8248367417b2b2512c3a\",\n    \"completedDate\": 1537198391567,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8247367417b2b2512c39\",\n    \"completedDate\": 1537198316053,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8247367417b2b2512c38\",\n    \"completedDate\": 1537197942090,\n    \"solution\": \"https://tidy-roadway",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 13,
    "total_chunks": 74
  },
  {
    "id": "fd891226a132ef45198e118132c4888e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d8249367417b2b2512c3e\", \"completedDate\": 1537198926071, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3d\", \"completedDate\": 1537198824551, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3c\", \"completedDate\": 1537198750481, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3b\", \"completedDate\": 1537198630082, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3a\", \"completedDate\": 1537198391567, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c39\", \"completedDate\": 1537198316053, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c38\", \"completedDate\": 1537197942090, \"solution\": \"https://tidy-roadwayglitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8247367417b2b2512c37\",\n    \"completedDate\": 1537197832144,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8247367417b2b2512c36\",\n    \"completedDate\": 1537196939178,\n    \"solution\": \"https://tidy-roadway glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa6367417b2b2512bbf\",\n    \"completedDate\": 1537144978531,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 14,
    "total_chunks": 74
  },
  {
    "id": "75831d2caeb0aba8a7336be624f433c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d8248367417b2b2512c3b\", \"completedDate\": 1537198630082, \"solution\": \"https://tidy-roadway glitchme/\", \"files\": [] }, { \"id\": \"587d8248367417b2b2512c3a\", \"completedDate\": 1537198391567, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c39\", \"completedDate\": 1537198316053, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c38\", \"completedDate\": 1537197942090, \"solution\": \"https://tidy-roadwayglitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c37\", \"completedDate\": 1537197832144, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c36\", \"completedDate\": 1537196939178, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d7fa6367417b2b2512bbf\", \"completedDate\": 1537144978531, \"solution\": \"https://codepenio/moT01/full/rZxZMq/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dae367417b2b2512b7c\",\n    \"completedDate\": 1528904752503,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a5d02bd919fcf9ca8cf46cb\",\n    \"completedDate\": 1535377692723,\n    \"solution\": \"https://mot01 github",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 15,
    "total_chunks": 74
  },
  {
    "id": "dfb2238e1123a93fcc677bdae4672742",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "}, { \"id\": \"587d8247367417b2b2512c39\", \"completedDate\": 1537198316053, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c38\", \"completedDate\": 1537197942090, \"solution\": \"https://tidy-roadwayglitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c37\", \"completedDate\": 1537197832144, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c36\", \"completedDate\": 1537196939178, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d7fa6367417b2b2512bbf\", \"completedDate\": 1537144978531, \"solution\": \"https://codepenio/moT01/full/rZxZMq/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d7dae367417b2b2512b7c\", \"completedDate\": 1528904752503, \"files\": [] }, { \"id\": \"5a5d02bd919fcf9ca8cf46cb\", \"completedDate\": 1535377692723, \"solution\": \"https://mot01 githubio/FCC-Light-Bright/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7168d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665231772,\n    \"solution\": \"http://codepen io/moT01/pen/JEMxoj editors=1010\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7178d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665256488,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 16,
    "total_chunks": 74
  },
  {
    "id": "f05f725660a7e7636991505b0f3e694f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"587d8247367417b2b2512c37\", \"completedDate\": 1537197832144, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d8247367417b2b2512c36\", \"completedDate\": 1537196939178, \"solution\": \"https://tidy-roadway glitch me/\", \"files\": [] }, { \"id\": \"587d7fa6367417b2b2512bbf\", \"completedDate\": 1537144978531, \"solution\": \"https://codepenio/moT01/full/rZxZMq/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d7dae367417b2b2512b7c\", \"completedDate\": 1528904752503, \"files\": [] }, { \"id\": \"5a5d02bd919fcf9ca8cf46cb\", \"completedDate\": 1535377692723, \"solution\": \"https://mot01 githubio/FCC-Light-Bright/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7168d8c242eddfaeb5bd13\", \"completedDate\": 1488665231772, \"solution\": \"http://codepen io/moT01/pen/JEMxoj editors=1010\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7178d8c242eddfaeb5bd13\", \"completedDate\": 1488665256488, \"solution\": \"http://codepenio/moT01/pen/zNLPmV\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7188d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665304243,\n    \"solution\": \"http://codepen io/moT01/pen/NdLxNB\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa6367417b2b2512bc0\",\n    \"completedDate\": 1535244078849,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 17,
    "total_chunks": 74
  },
  {
    "id": "89cddbe0b4b28c7b541a973b973a05b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1537144978531, \"solution\": \"https://codepenio/moT01/full/rZxZMq/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d7dae367417b2b2512b7c\", \"completedDate\": 1528904752503, \"files\": [] }, { \"id\": \"5a5d02bd919fcf9ca8cf46cb\", \"completedDate\": 1535377692723, \"solution\": \"https://mot01 githubio/FCC-Light-Bright/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7168d8c242eddfaeb5bd13\", \"completedDate\": 1488665231772, \"solution\": \"http://codepen io/moT01/pen/JEMxoj editors=1010\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7178d8c242eddfaeb5bd13\", \"completedDate\": 1488665256488, \"solution\": \"http://codepenio/moT01/pen/zNLPmV\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7188d8c242eddfaeb5bd13\", \"completedDate\": 1488665304243, \"solution\": \"http://codepen io/moT01/pen/NdLxNB\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d7fa6367417b2b2512bc0\", \"completedDate\": 1535244078849, \"solution\": \"https://codepenio/moT01/full/rrKwzy/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d825a367417b2b2512c89\",\n    \"completedDate\": 1534614153746,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8259367417b2b2512c86\",\n    \"completedDate\": 1534256923082,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8259367417b2b2512c85\",\n    \"completedDate\": 1534253945342,\n    \"files\": []\n  },\n  {\n    \"id\": \"8d5123c8c441eddfaeb5bdef\",\n    \"completedDate\": 1534222674479,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443edefaeb5bdef\",\n    \"completedDate\": 1498077591986,\n    \"solution\": \"https://mixed-tadpole",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 604,
    "chunk_index": 18,
    "total_chunks": 74
  },
  {
    "id": "fd5e65e6be2ce70f8271943a00de58cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "{ \"id\": \"bd7178d8c242eddfaeb5bd13\", \"completedDate\": 1488665256488, \"solution\": \"http://codepenio/moT01/pen/zNLPmV\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7188d8c242eddfaeb5bd13\", \"completedDate\": 1488665304243, \"solution\": \"http://codepen io/moT01/pen/NdLxNB\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d7fa6367417b2b2512bc0\", \"completedDate\": 1535244078849, \"solution\": \"https://codepenio/moT01/full/rrKwzy/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d825a367417b2b2512c89\", \"completedDate\": 1534614153746, \"files\": [] }, { \"id\": \"587d8259367417b2b2512c86\", \"completedDate\": 1534256923082, \"files\": [] }, { \"id\": \"587d8259367417b2b2512c85\", \"completedDate\": 1534253945342, \"files\": [] }, { \"id\": \"8d5123c8c441eddfaeb5bdef\", \"completedDate\": 1534222674479, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdef\", \"completedDate\": 1498077591986, \"solution\": \"https://mixed-tadpoleglitch me/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443edefaeb5bdff\",\n    \"completedDate\": 1498090900090,\n    \"solution\": \"https://phase-continent glitch me/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443edefaeb5bd0e\",\n    \"completedDate\": 1499384769762,\n    \"solution\": \"https://ash-airport glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 19,
    "total_chunks": 74
  },
  {
    "id": "3e07c72936192589441a02437bf67ad6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1535244078849, \"solution\": \"https://codepenio/moT01/full/rrKwzy/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d825a367417b2b2512c89\", \"completedDate\": 1534614153746, \"files\": [] }, { \"id\": \"587d8259367417b2b2512c86\", \"completedDate\": 1534256923082, \"files\": [] }, { \"id\": \"587d8259367417b2b2512c85\", \"completedDate\": 1534253945342, \"files\": [] }, { \"id\": \"8d5123c8c441eddfaeb5bdef\", \"completedDate\": 1534222674479, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdef\", \"completedDate\": 1498077591986, \"solution\": \"https://mixed-tadpoleglitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdff\", \"completedDate\": 1498090900090, \"solution\": \"https://phase-continent glitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bd0e\", \"completedDate\": 1499384769762, \"solution\": \"https://ash-airport glitchme/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443edefaeb5bd0f\",\n    \"completedDate\": 1500911711138,\n    \"solution\": \"https://zenith-double glitch me/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a8b073d06fa14fcfde687aa\",\n    \"completedDate\": 1533833478381,\n    \"solution\": \"https://fcc-exercise-tracker herokuapp",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 20,
    "total_chunks": 74
  },
  {
    "id": "c5d32d7b8250fdfb90db951dc52bb319",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"587d8259367417b2b2512c85\", \"completedDate\": 1534253945342, \"files\": [] }, { \"id\": \"8d5123c8c441eddfaeb5bdef\", \"completedDate\": 1534222674479, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdef\", \"completedDate\": 1498077591986, \"solution\": \"https://mixed-tadpoleglitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdff\", \"completedDate\": 1498090900090, \"solution\": \"https://phase-continent glitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bd0e\", \"completedDate\": 1499384769762, \"solution\": \"https://ash-airport glitchme/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bd0f\", \"completedDate\": 1500911711138, \"solution\": \"https://zenith-double glitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"5a8b073d06fa14fcfde687aa\", \"completedDate\": 1533833478381, \"solution\": \"https://fcc-exercise-tracker herokuappcom/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faf367417b2b2512be9\",\n    \"completedDate\": 1533313441660,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faf367417b2b2512be8\",\n    \"completedDate\": 1533313429792,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fae367417b2b2512be7\",\n    \"completedDate\": 1533313418548,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fae367417b2b2512be6\",\n    \"completedDate\": 1533313409789,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fae367417b2b2512be5\",\n    \"completedDate\": 1533313394341,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fae367417b2b2512be4\",\n    \"completedDate\": 1533313287461,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fae367417b2b2512be3\",\n    \"completedDate\": 1533312971665,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fad367417b2b2512be2\",\n    \"completedDate\": 1533312379130,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fad367417b2b2512be1\",\n    \"completedDate\": 1533305186377,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fad367417b2b2512bdf\",\n    \"completedDate\": 1533305081870,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fac367417b2b2512bde\",\n    \"completedDate\": 1533304893213,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fac367417b2b2512bdd\",\n    \"completedDate\": 1533304473980,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fac367417b2b2512bdc\",\n    \"completedDate\": 1533304357934,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fac367417b2b2512bdb\",\n    \"completedDate\": 1533304277919,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fab367417b2b2512bda\",\n    \"completedDate\": 1533304195179,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fab367417b2b2512bd9\",\n    \"completedDate\": 1533304040401,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fab367417b2b2512bd8\",\n    \"completedDate\": 1533303510955,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fab367417b2b2512bd7\",\n    \"completedDate\": 1533303204725,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faa367417b2b2512bd6\",\n    \"completedDate\": 1533302881077,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faa367417b2b2512bd4\",\n    \"completedDate\": 1533302797436,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faa367417b2b2512bd3\",\n    \"completedDate\": 1533302682051,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7faa367417b2b2512bd2\",\n    \"completedDate\": 1533302419381,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa9367417b2b2512bd1\",\n    \"completedDate\": 1533302159045,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa9367417b2b2512bd0\",\n    \"completedDate\": 1533302136821,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa9367417b2b2512bcf\",\n    \"completedDate\": 1533301974907,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa9367417b2b2512bce\",\n    \"completedDate\": 1533301957042,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa8367417b2b2512bcd\",\n    \"completedDate\": 1533301918702,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa8367417b2b2512bcc\",\n    \"completedDate\": 1533301841955,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa8367417b2b2512bcb\",\n    \"completedDate\": 1533301722365,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa8367417b2b2512bca\",\n    \"completedDate\": 1533301610183,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa8367417b2b2512bc9\",\n    \"completedDate\": 1533301532665,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa7367417b2b2512bc8\",\n    \"completedDate\": 1533301461772,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa7367417b2b2512bc7\",\n    \"completedDate\": 1533301438297,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa7367417b2b2512bc6\",\n    \"completedDate\": 1533301332393,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa7367417b2b2512bc5\",\n    \"completedDate\": 1533301304031,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa7367417b2b2512bc4\",\n    \"completedDate\": 1533301245248,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b0367417b2b2512b05\",\n    \"completedDate\": 1533273771014,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 1851,
    "chunk_index": 21,
    "total_chunks": 74
  },
  {
    "id": "e7d06475072b0ebefc389059f5ce74a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1533301841955, \"files\": [] }, { \"id\": \"587d7fa8367417b2b2512bcb\", \"completedDate\": 1533301722365, \"files\": [] }, { \"id\": \"587d7fa8367417b2b2512bca\", \"completedDate\": 1533301610183, \"files\": [] }, { \"id\": \"587d7fa8367417b2b2512bc9\", \"completedDate\": 1533301532665, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc8\", \"completedDate\": 1533301461772, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc7\", \"completedDate\": 1533301438297, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc6\", \"completedDate\": 1533301332393, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc5\", \"completedDate\": 1533301304031, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc4\", \"completedDate\": 1533301245248, \"files\": [] }, { \"id\": \"587d78b0367417b2b2512b05\", \"completedDate\": 1533273771014, \"solution\": \"https://codepenio/moT01/full/JBvzNL/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78af367417b2b2512b04\",\n    \"completedDate\": 1533265342064,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 22,
    "total_chunks": 74
  },
  {
    "id": "51846c7acc615c3a02c42c8f8250d244",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "}, { \"id\": \"587d7fa8367417b2b2512bca\", \"completedDate\": 1533301610183, \"files\": [] }, { \"id\": \"587d7fa8367417b2b2512bc9\", \"completedDate\": 1533301532665, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc8\", \"completedDate\": 1533301461772, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc7\", \"completedDate\": 1533301438297, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc6\", \"completedDate\": 1533301332393, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc5\", \"completedDate\": 1533301304031, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc4\", \"completedDate\": 1533301245248, \"files\": [] }, { \"id\": \"587d78b0367417b2b2512b05\", \"completedDate\": 1533273771014, \"solution\": \"https://codepenio/moT01/full/JBvzNL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d78af367417b2b2512b04\", \"completedDate\": 1533265342064, \"solution\": \"https://codepenio/moT01/full/qKyKYL/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedc08830\",\n    \"completedDate\": 1475096459663,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb9367417b2b2512c12\",\n    \"completedDate\": 1533055320751,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 23,
    "total_chunks": 74
  },
  {
    "id": "994db273215ea3dda5bdd525aed065aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "1533301461772, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc7\", \"completedDate\": 1533301438297, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc6\", \"completedDate\": 1533301332393, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc5\", \"completedDate\": 1533301304031, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc4\", \"completedDate\": 1533301245248, \"files\": [] }, { \"id\": \"587d78b0367417b2b2512b05\", \"completedDate\": 1533273771014, \"solution\": \"https://codepenio/moT01/full/JBvzNL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d78af367417b2b2512b04\", \"completedDate\": 1533265342064, \"solution\": \"https://codepenio/moT01/full/qKyKYL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bad87fee1348bd9aedc08830\", \"completedDate\": 1475096459663, \"files\": [] }, { \"id\": \"587d7fb9367417b2b2512c12\", \"completedDate\": 1533055320751, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb8367417b2b2512c11\",\n    \"completedDate\": 1533055049560,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb8367417b2b2512c10\",\n    \"completedDate\": 1533055004536,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 24,
    "total_chunks": 74
  },
  {
    "id": "7828718aea1e3c43ee803ca284c4c7ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1533301304031, \"files\": [] }, { \"id\": \"587d7fa7367417b2b2512bc4\", \"completedDate\": 1533301245248, \"files\": [] }, { \"id\": \"587d78b0367417b2b2512b05\", \"completedDate\": 1533273771014, \"solution\": \"https://codepenio/moT01/full/JBvzNL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"587d78af367417b2b2512b04\", \"completedDate\": 1533265342064, \"solution\": \"https://codepenio/moT01/full/qKyKYL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bad87fee1348bd9aedc08830\", \"completedDate\": 1475096459663, \"files\": [] }, { \"id\": \"587d7fb9367417b2b2512c12\", \"completedDate\": 1533055320751, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c11\", \"completedDate\": 1533055049560, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c10\", \"completedDate\": 1533055004536, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb8367417b2b2512c0f\",\n    \"completedDate\": 1533054957664,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb8367417b2b2512c0e\",\n    \"completedDate\": 1533054810266,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 25,
    "total_chunks": 74
  },
  {
    "id": "36d5fd15f2854c2db51280a0088f03e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "[] }, { \"id\": \"587d78af367417b2b2512b04\", \"completedDate\": 1533265342064, \"solution\": \"https://codepenio/moT01/full/qKyKYL/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bad87fee1348bd9aedc08830\", \"completedDate\": 1475096459663, \"files\": [] }, { \"id\": \"587d7fb9367417b2b2512c12\", \"completedDate\": 1533055320751, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c11\", \"completedDate\": 1533055049560, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c10\", \"completedDate\": 1533055004536, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0f\", \"completedDate\": 1533054957664, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0e\", \"completedDate\": 1533054810266, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb7367417b2b2512c0d\",\n    \"completedDate\": 1533054731172,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb7367417b2b2512c0c\",\n    \"completedDate\": 1533054681787,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 26,
    "total_chunks": 74
  },
  {
    "id": "3bbae91a71627d5e3c36833a9cc18801",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb9367417b2b2512c12\", \"completedDate\": 1533055320751, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c11\", \"completedDate\": 1533055049560, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c10\", \"completedDate\": 1533055004536, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0f\", \"completedDate\": 1533054957664, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0e\", \"completedDate\": 1533054810266, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0d\", \"completedDate\": 1533054731172, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0c\", \"completedDate\": 1533054681787, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb7367417b2b2512c0b\",\n    \"completedDate\": 1533054615086,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb7367417b2b2512c0a\",\n    \"completedDate\": 1533054496430,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 27,
    "total_chunks": 74
  },
  {
    "id": "5dca646680978d1ca93edb618accd260",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb8367417b2b2512c10\", \"completedDate\": 1533055004536, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0f\", \"completedDate\": 1533054957664, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb8367417b2b2512c0e\", \"completedDate\": 1533054810266, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0d\", \"completedDate\": 1533054731172, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0c\", \"completedDate\": 1533054681787, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0b\", \"completedDate\": 1533054615086, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0a\", \"completedDate\": 1533054496430, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb6367417b2b2512c09\",\n    \"completedDate\": 1533054359282,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb6367417b2b2512c07\",\n    \"completedDate\": 1533053012175,\n    \"solution\": \"https://fcc-mongo-mongoose glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 28,
    "total_chunks": 74
  },
  {
    "id": "5914ee3978e4699fb071027379b62d1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb8367417b2b2512c0e\", \"completedDate\": 1533054810266, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0d\", \"completedDate\": 1533054731172, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0c\", \"completedDate\": 1533054681787, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0b\", \"completedDate\": 1533054615086, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0a\", \"completedDate\": 1533054496430, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c09\", \"completedDate\": 1533054359282, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c07\", \"completedDate\": 1533053012175, \"solution\": \"https://fcc-mongo-mongoose glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb6367417b2b2512c06\",\n    \"completedDate\": 1533049464594,\n    \"solution\": \"https://fcc-mongo-mongoose glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb2367417b2b2512bf8\",\n    \"completedDate\": 1533047350131,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 29,
    "total_chunks": 74
  },
  {
    "id": "c27fa120cfe8ea699b81aabdf04a829d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb7367417b2b2512c0c\", \"completedDate\": 1533054681787, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0b\", \"completedDate\": 1533054615086, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb7367417b2b2512c0a\", \"completedDate\": 1533054496430, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c09\", \"completedDate\": 1533054359282, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c07\", \"completedDate\": 1533053012175, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c06\", \"completedDate\": 1533049464594, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf8\", \"completedDate\": 1533047350131, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb2367417b2b2512bf7\",\n    \"completedDate\": 1533047240645,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb2367417b2b2512bf6\",\n    \"completedDate\": 1533046595396,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 30,
    "total_chunks": 74
  },
  {
    "id": "de495a473fe9dbb253d8a01f8a5b47d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb7367417b2b2512c0a\", \"completedDate\": 1533054496430, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c09\", \"completedDate\": 1533054359282, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c07\", \"completedDate\": 1533053012175, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c06\", \"completedDate\": 1533049464594, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf8\", \"completedDate\": 1533047350131, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf7\", \"completedDate\": 1533047240645, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf6\", \"completedDate\": 1533046595396, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb2367417b2b2512bf5\",\n    \"completedDate\": 1533046425247,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb1367417b2b2512bf4\",\n    \"completedDate\": 1533044706441,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 31,
    "total_chunks": 74
  },
  {
    "id": "785bed1ee59ba37f78c4c63e0c3a01d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb6367417b2b2512c07\", \"completedDate\": 1533053012175, \"solution\": \"https://fcc-mongo-mongoose glitchme/\", \"files\": [] }, { \"id\": \"587d7fb6367417b2b2512c06\", \"completedDate\": 1533049464594, \"solution\": \"https://fcc-mongo-mongoose glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf8\", \"completedDate\": 1533047350131, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf7\", \"completedDate\": 1533047240645, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf6\", \"completedDate\": 1533046595396, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf5\", \"completedDate\": 1533046425247, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf4\", \"completedDate\": 1533044706441, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb1367417b2b2512bf3\",\n    \"completedDate\": 1533044029688,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb1367417b2b2512bf2\",\n    \"completedDate\": 1533043449812,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 32,
    "total_chunks": 74
  },
  {
    "id": "1ae91bff5c0083a32b02c004aa8c3763",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb2367417b2b2512bf8\", \"completedDate\": 1533047350131, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf7\", \"completedDate\": 1533047240645, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf6\", \"completedDate\": 1533046595396, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf5\", \"completedDate\": 1533046425247, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf4\", \"completedDate\": 1533044706441, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf3\", \"completedDate\": 1533044029688, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf2\", \"completedDate\": 1533043449812, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb1367417b2b2512bf1\",\n    \"completedDate\": 1533043268417,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb0367417b2b2512bf0\",\n    \"completedDate\": 1533042013904,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 33,
    "total_chunks": 74
  },
  {
    "id": "4f8e3c4df4c483c0c140ac3c33695715",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb2367417b2b2512bf6\", \"completedDate\": 1533046595396, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb2367417b2b2512bf5\", \"completedDate\": 1533046425247, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf4\", \"completedDate\": 1533044706441, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf3\", \"completedDate\": 1533044029688, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf2\", \"completedDate\": 1533043449812, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf1\", \"completedDate\": 1533043268417, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bf0\", \"completedDate\": 1533042013904, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb0367417b2b2512bef\",\n    \"completedDate\": 1533041880166,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb0367417b2b2512bee\",\n    \"completedDate\": 1533041574196,\n    \"solution\": \"https://fcc-basic-node-and-express glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 34,
    "total_chunks": 74
  },
  {
    "id": "aa1a9198f3e0cccfb3ef214cdb150da1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb1367417b2b2512bf4\", \"completedDate\": 1533044706441, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf3\", \"completedDate\": 1533044029688, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf2\", \"completedDate\": 1533043449812, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf1\", \"completedDate\": 1533043268417, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bf0\", \"completedDate\": 1533042013904, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bef\", \"completedDate\": 1533041880166, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bee\", \"completedDate\": 1533041574196, \"solution\": \"https://fcc-basic-node-and-express glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb0367417b2b2512bed\",\n    \"completedDate\": 1533041397592,\n    \"solution\": \"https://fcc-basic-node-and-express glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb5367417b2b2512c04\",\n    \"completedDate\": 1533041014569,\n    \"solution\": \"https://fcc-manage-npm-packages glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 35,
    "total_chunks": 74
  },
  {
    "id": "8ceeab1e6c469cdf76949a55aa750bd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb1367417b2b2512bf2\", \"completedDate\": 1533043449812, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb1367417b2b2512bf1\", \"completedDate\": 1533043268417, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bf0\", \"completedDate\": 1533042013904, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bef\", \"completedDate\": 1533041880166, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bee\", \"completedDate\": 1533041574196, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bed\", \"completedDate\": 1533041397592, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c04\", \"completedDate\": 1533041014569, \"solution\": \"https://fcc-manage-npm-packages glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb5367417b2b2512c03\",\n    \"completedDate\": 1533040923088,\n    \"solution\": \"https://fcc-manage-npm-packages glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb5367417b2b2512c02\",\n    \"completedDate\": 1533040901236,\n    \"solution\": \"https://fcc-manage-npm-packages glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 36,
    "total_chunks": 74
  },
  {
    "id": "60c5251fbe4fab2128129433def882c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb0367417b2b2512bf0\", \"completedDate\": 1533042013904, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bef\", \"completedDate\": 1533041880166, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bee\", \"completedDate\": 1533041574196, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bed\", \"completedDate\": 1533041397592, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c04\", \"completedDate\": 1533041014569, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c03\", \"completedDate\": 1533040923088, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c02\", \"completedDate\": 1533040901236, \"solution\": \"https://fcc-manage-npm-packages glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb5367417b2b2512c01\",\n    \"completedDate\": 1533040847451,\n    \"solution\": \"https://fcc-manage-npm-packages glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb4367417b2b2512c00\",\n    \"completedDate\": 1533040209131,\n    \"solution\": \"https://fcc-manage-npm-packages glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 37,
    "total_chunks": 74
  },
  {
    "id": "9ecdfe8a28b572c1a6370dbf42b9ad8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb0367417b2b2512bee\", \"completedDate\": 1533041574196, \"solution\": \"https://fcc-basic-node-and-express glitchme/\", \"files\": [] }, { \"id\": \"587d7fb0367417b2b2512bed\", \"completedDate\": 1533041397592, \"solution\": \"https://fcc-basic-node-and-express glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c04\", \"completedDate\": 1533041014569, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c03\", \"completedDate\": 1533040923088, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c02\", \"completedDate\": 1533040901236, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c01\", \"completedDate\": 1533040847451, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512c00\", \"completedDate\": 1533040209131, \"solution\": \"https://fcc-manage-npm-packages glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb4367417b2b2512bff\",\n    \"completedDate\": 1533040168518,\n    \"solution\": \"https://fcc-manage-npm-packages glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb4367417b2b2512bfe\",\n    \"completedDate\": 1533040145047,\n    \"solution\": \"https://fcc-manage-npm-packages glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 38,
    "total_chunks": 74
  },
  {
    "id": "7f1b3329e9849c87e467a5dbd92f81b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb5367417b2b2512c04\", \"completedDate\": 1533041014569, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c03\", \"completedDate\": 1533040923088, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c02\", \"completedDate\": 1533040901236, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c01\", \"completedDate\": 1533040847451, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512c00\", \"completedDate\": 1533040209131, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bff\", \"completedDate\": 1533040168518, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bfe\", \"completedDate\": 1533040145047, \"solution\": \"https://fcc-manage-npm-packages glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb4367417b2b2512bfd\",\n    \"completedDate\": 1533040107526,\n    \"solution\": \"https://fcc-manage-npm-packages glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb3367417b2b2512bfc\",\n    \"completedDate\": 1533040049025,\n    \"solution\": \"https://fcc-manage-npm-packages glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 39,
    "total_chunks": 74
  },
  {
    "id": "9034e913ecf6ef5f3b07b2e6f4e3f6e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb5367417b2b2512c02\", \"completedDate\": 1533040901236, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb5367417b2b2512c01\", \"completedDate\": 1533040847451, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512c00\", \"completedDate\": 1533040209131, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bff\", \"completedDate\": 1533040168518, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bfe\", \"completedDate\": 1533040145047, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bfd\", \"completedDate\": 1533040107526, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb3367417b2b2512bfc\", \"completedDate\": 1533040049025, \"solution\": \"https://fcc-manage-npm-packages glitchme/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fb3367417b2b2512bfb\",\n    \"completedDate\": 1533039944300,\n    \"solution\": \"https://fcc-manage-npm-packages glitch me/\",\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbc367417b2b2512bae\",\n    \"completedDate\": 1532961147572,\n    \"solution\": \"https://fcc-drum-machine herokuapp",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 40,
    "total_chunks": 74
  },
  {
    "id": "52cee38a3992b20a9da78be67d762a1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"id\": \"587d7fb4367417b2b2512c00\", \"completedDate\": 1533040209131, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bff\", \"completedDate\": 1533040168518, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bfe\", \"completedDate\": 1533040145047, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb4367417b2b2512bfd\", \"completedDate\": 1533040107526, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7fb3367417b2b2512bfc\", \"completedDate\": 1533040049025, \"solution\": \"https://fcc-manage-npm-packages glitchme/\", \"files\": [] }, { \"id\": \"587d7fb3367417b2b2512bfb\", \"completedDate\": 1533039944300, \"solution\": \"https://fcc-manage-npm-packages glitch me/\", \"files\": [] }, { \"id\": \"587d7dbc367417b2b2512bae\", \"completedDate\": 1532961147572, \"solution\": \"https://fcc-drum-machine herokuappcom/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614a\",\n    \"completedDate\": 1532794780112,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036149\",\n    \"completedDate\": 1532794700815,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa6367417b2b2512bc3\",\n    \"completedDate\": 1531937190203,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036148\",\n    \"completedDate\": 1531489006830,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b83367417b2b2512b37\",\n    \"completedDate\": 1531486599992,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036147\",\n    \"completedDate\": 1531482969362,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036146\",\n    \"completedDate\": 1531482790969,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036145\",\n    \"completedDate\": 1531481644030,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036144\",\n    \"completedDate\": 1531481355387,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036143\",\n    \"completedDate\": 1531453571962,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036142\",\n    \"completedDate\": 1531453316042,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036141\",\n    \"completedDate\": 1531445056603,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403615b\",\n    \"completedDate\": 1531443499567,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403615a\",\n    \"completedDate\": 1531433896792,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036159\",\n    \"completedDate\": 1531433516627,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036158\",\n    \"completedDate\": 1531433335857,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036157\",\n    \"completedDate\": 1531432774927,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036156\",\n    \"completedDate\": 1531432281650,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036155\",\n    \"completedDate\": 1531431898900,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036154\",\n    \"completedDate\": 1531429369572,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036153\",\n    \"completedDate\": 1531429194225,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036152\",\n    \"completedDate\": 1531429071050,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036151\",\n    \"completedDate\": 1531428817943,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036150\",\n    \"completedDate\": 1531428663065,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614c\",\n    \"completedDate\": 1531428487038,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614b\",\n    \"completedDate\": 1531428433090,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f3701000cf542c50fe83\",\n    \"completedDate\": 1530277993244,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f36f1000cf542c50fe82\",\n    \"completedDate\": 1530277838465,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f36e1000cf542c50fe81\",\n    \"completedDate\": 1530222499479,\n    \"files\": []\n  },\n  {\n    \"id\": \"5900f36e1000cf542c50fe80\",\n    \"completedDate\": 1530221644777,\n    \"files\": []\n  },\n  {\n    \"id\": \"594810f028c0303b75339acb\",\n    \"completedDate\": 1530015953369,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78af367417b2b2512b03\",\n    \"completedDate\": 1529938009424,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 1643,
    "chunk_index": 41,
    "total_chunks": 74
  },
  {
    "id": "27928ab2492efdbb9d0537fb8db9f383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1531428817943, \"files\": [] }, { \"id\": \"5a24c314108439a4d4036150\", \"completedDate\": 1531428663065, \"files\": [] }, { \"id\": \"5a24c314108439a4d403614c\", \"completedDate\": 1531428487038, \"files\": [] }, { \"id\": \"5a24c314108439a4d403614b\", \"completedDate\": 1531428433090, \"files\": [] }, { \"id\": \"5900f3701000cf542c50fe83\", \"completedDate\": 1530277993244, \"files\": [] }, { \"id\": \"5900f36f1000cf542c50fe82\", \"completedDate\": 1530277838465, \"files\": [] }, { \"id\": \"5900f36e1000cf542c50fe81\", \"completedDate\": 1530222499479, \"files\": [] }, { \"id\": \"5900f36e1000cf542c50fe80\", \"completedDate\": 1530221644777, \"files\": [] }, { \"id\": \"594810f028c0303b75339acb\", \"completedDate\": 1530015953369, \"files\": [] }, { \"id\": \"587d78af367417b2b2512b03\", \"completedDate\": 1529938009424, \"solution\": \"https://codepenio/moT01/pen/LrrjGz",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 42,
    "total_chunks": 74
  },
  {
    "id": "4212dbb334251803b7ec0a51144e00f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1531428817943, \"files\": [] }, { \"id\": \"5a24c314108439a4d4036150\", \"completedDate\": 1531428663065, \"files\": [] }, { \"id\": \"5a24c314108439a4d403614c\", \"completedDate\": 1531428487038, \"files\": [] }, { \"id\": \"5a24c314108439a4d403614b\", \"completedDate\": 1531428433090, \"files\": [] }, { \"id\": \"5900f3701000cf542c50fe83\", \"completedDate\": 1530277993244, \"files\": [] }, { \"id\": \"5900f36f1000cf542c50fe82\", \"completedDate\": 1530277838465, \"files\": [] }, { \"id\": \"5900f36e1000cf542c50fe81\", \"completedDate\": 1530222499479, \"files\": [] }, { \"id\": \"5900f36e1000cf542c50fe80\", \"completedDate\": 1530221644777, \"files\": [] }, { \"id\": \"594810f028c0303b75339acb\", \"completedDate\": 1530015953369, \"files\": [] }, { \"id\": \"587d78af367417b2b2512b03\", \"completedDate\": 1529938009424, \"solution\": \"https://codepenio/moT01/pen/LrrjGzeditors=1010\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d7286424fe3d0e10cad13\",\n    \"completedDate\": 1528719842749,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8250367417b2b2512c5f\",\n    \"completedDate\": 1529584582909,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8250367417b2b2512c5e\",\n    \"completedDate\": 1529584233498,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d8253367417b2b2512c6a\",\n    \"completedDate\": 1529584147462,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa6367417b2b2512bc2\",\n    \"completedDate\": 1529186003814,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614f\",\n    \"completedDate\": 1529179243536,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614e\",\n    \"completedDate\": 1528981776099,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403614d\",\n    \"completedDate\": 1528981744994,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403618d\",\n    \"completedDate\": 1528950851660,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403618c\",\n    \"completedDate\": 1528950719262,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403618b\",\n    \"completedDate\": 1528950396682,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403618a\",\n    \"completedDate\": 1528950304924,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036189\",\n    \"completedDate\": 1528949805386,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036188\",\n    \"completedDate\": 1528949697883,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036187\",\n    \"completedDate\": 1528949067606,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036185\",\n    \"completedDate\": 1528948451001,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036184\",\n    \"completedDate\": 1528946998407,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036183\",\n    \"completedDate\": 1528946875698,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036182\",\n    \"completedDate\": 1528946566042,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036181\",\n    \"completedDate\": 1528946437132,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036180\",\n    \"completedDate\": 1528946299272,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617f\",\n    \"completedDate\": 1528946192923,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617e\",\n    \"completedDate\": 1528945856282,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617d\",\n    \"completedDate\": 1528945678448,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617c\",\n    \"completedDate\": 1528945645295,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617b\",\n    \"completedDate\": 1528945579541,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403617a\",\n    \"completedDate\": 1528945447719,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036179\",\n    \"completedDate\": 1528945385287,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036178\",\n    \"completedDate\": 1528945197650,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036177\",\n    \"completedDate\": 1528944290718,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036176\",\n    \"completedDate\": 1528943870093,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036174\",\n    \"completedDate\": 1528943740058,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036173\",\n    \"completedDate\": 1528943671264,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036172\",\n    \"completedDate\": 1528943603260,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036171\",\n    \"completedDate\": 1528943535660,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036170\",\n    \"completedDate\": 1528943507508,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616f\",\n    \"completedDate\": 1528943479564,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616e\",\n    \"completedDate\": 1528943277939,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616d\",\n    \"completedDate\": 1528943091046,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616c\",\n    \"completedDate\": 1528942897945,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616b\",\n    \"completedDate\": 1528942802253,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d403616a\",\n    \"completedDate\": 1528942758495,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036169\",\n    \"completedDate\": 1528942646063,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036168\",\n    \"completedDate\": 1528937140246,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036167\",\n    \"completedDate\": 1528936992425,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036166\",\n    \"completedDate\": 1528936887008,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036165\",\n    \"completedDate\": 1528936818982,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036164\",\n    \"completedDate\": 1528936765216,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036163\",\n    \"completedDate\": 1528936729634,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036162\",\n    \"completedDate\": 1528936661343,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036161\",\n    \"completedDate\": 1528936547644,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24c314108439a4d4036160\",\n    \"completedDate\": 1528936507205,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24bbe0dba28a8d3cbd4c5f\",\n    \"completedDate\": 1528936468035,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a24bbe0dba28a8d3cbd4c5e\",\n    \"completedDate\": 1528936381238,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7fa5367417b2b2512bbd\",\n    \"completedDate\": 1528934178753,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbf367417b2b2512bbc\",\n    \"completedDate\": 1528934096231,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbf367417b2b2512bbb\",\n    \"completedDate\": 1528934051468,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbf367417b2b2512bba\",\n    \"completedDate\": 1528933852430,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbe367417b2b2512bb9\",\n    \"completedDate\": 1528933741473,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbe367417b2b2512bb8\",\n    \"completedDate\": 1528933566151,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbd367417b2b2512bb6\",\n    \"completedDate\": 1528933360001,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbd367417b2b2512bb5\",\n    \"completedDate\": 1528933151245,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbd367417b2b2512bb4\",\n    \"completedDate\": 1528933108643,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dab367417b2b2512b70\",\n    \"completedDate\": 1528930450509,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dab367417b2b2512b6f\",\n    \"completedDate\": 1528930224869,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dab367417b2b2512b6e\",\n    \"completedDate\": 1528929785830,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dab367417b2b2512b6d\",\n    \"completedDate\": 1528929659099,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daa367417b2b2512b6c\",\n    \"completedDate\": 1528927786126,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daa367417b2b2512b6b\",\n    \"completedDate\": 1528927735717,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7da9367417b2b2512b6a\",\n    \"completedDate\": 1528927426415,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7da9367417b2b2512b69\",\n    \"completedDate\": 1528927327998,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7da9367417b2b2512b68\",\n    \"completedDate\": 1528927215860,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7da9367417b2b2512b67\",\n    \"completedDate\": 1528926108930,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7da9367417b2b2512b66\",\n    \"completedDate\": 1528926045666,\n    \"files\": []\n  },\n  {\n    \"id\": \"9d7123c8c441eeafaeb5bdef\",\n    \"completedDate\": 1528925941088,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b90367417b2b2512b65\",\n    \"completedDate\": 1528925068599,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8f367417b2b2512b64\",\n    \"completedDate\": 1528924576412,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8f367417b2b2512b63\",\n    \"completedDate\": 1528917162952,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8f367417b2b2512b62\",\n    \"completedDate\": 1528916520035,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8f367417b2b2512b61\",\n    \"completedDate\": 1528916239317,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8f367417b2b2512b60\",\n    \"completedDate\": 1528909518505,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8e367417b2b2512b5f\",\n    \"completedDate\": 1528909162568,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8e367417b2b2512b5e\",\n    \"completedDate\": 1528909113205,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8e367417b2b2512b5d\",\n    \"completedDate\": 1528908970552,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8e367417b2b2512b5c\",\n    \"completedDate\": 1528908568106,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8d367417b2b2512b5b\",\n    \"completedDate\": 1528908421803,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db2367417b2b2512b8c\",\n    \"completedDate\": 1528908345735,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db2367417b2b2512b8b\",\n    \"completedDate\": 1528908123161,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db2367417b2b2512b8a\",\n    \"completedDate\": 1528908033352,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db2367417b2b2512b89\",\n    \"completedDate\": 1528907854219,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db1367417b2b2512b88\",\n    \"completedDate\": 1528907672414,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db1367417b2b2512b87\",\n    \"completedDate\": 1528907527117,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db1367417b2b2512b86\",\n    \"completedDate\": 1528905869367,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db1367417b2b2512b85\",\n    \"completedDate\": 1528905798962,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db0367417b2b2512b84\",\n    \"completedDate\": 1528905563215,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db0367417b2b2512b83\",\n    \"completedDate\": 1528905463958,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db0367417b2b2512b82\",\n    \"completedDate\": 1528905321583,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db0367417b2b2512b81\",\n    \"completedDate\": 1528905197504,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daf367417b2b2512b80\",\n    \"completedDate\": 1528905158628,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daf367417b2b2512b7f\",\n    \"completedDate\": 1528905128321,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daf367417b2b2512b7e\",\n    \"completedDate\": 1528905019142,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7daf367417b2b2512b7d\",\n    \"completedDate\": 1528904850131,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dae367417b2b2512b7b\",\n    \"completedDate\": 1528904663799,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dae367417b2b2512b7a\",\n    \"completedDate\": 1528904554118,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dae367417b2b2512b79\",\n    \"completedDate\": 1528904459368,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dad367417b2b2512b78\",\n    \"completedDate\": 1528904402413,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dad367417b2b2512b77\",\n    \"completedDate\": 1528904383963,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dad367417b2b2512b76\",\n    \"completedDate\": 1528904346017,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dad367417b2b2512b75\",\n    \"completedDate\": 1528904316135,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dac367417b2b2512b74\",\n    \"completedDate\": 1528904261166,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dac367417b2b2512b73\",\n    \"completedDate\": 1528904235855,\n    \"files\": []\n  },\n  {\n    \"id\": \"579e2a2c335b9d72dd32e05c\",\n    \"completedDate\": 1528904005293,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7d367417b2b2512b1f\",\n    \"completedDate\": 1528902841678,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7d367417b2b2512b1e\",\n    \"completedDate\": 1528902745590,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7d367417b2b2512b1d\",\n    \"completedDate\": 1528902722538,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7d367417b2b2512b1c\",\n    \"completedDate\": 1528902424707,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7c367417b2b2512b1b\",\n    \"completedDate\": 1528902294822,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7c367417b2b2512b1a\",\n    \"completedDate\": 1528902266174,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7c367417b2b2512b19\",\n    \"completedDate\": 1528902204888,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7c367417b2b2512b18\",\n    \"completedDate\": 1528902177052,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7b367417b2b2512b16\",\n    \"completedDate\": 1528901096407,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7b367417b2b2512b15\",\n    \"completedDate\": 1528900938052,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7b367417b2b2512b14\",\n    \"completedDate\": 1528900292192,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7b367417b2b2512b17\",\n    \"completedDate\": 1528900239045,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7b367417b2b2512b13\",\n    \"completedDate\": 1528900119504,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7a367417b2b2512b12\",\n    \"completedDate\": 1528900024682,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b3367417b2b2512b11\",\n    \"completedDate\": 1528899739768,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b86367417b2b2512b3d\",\n    \"completedDate\": 1528899440260,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b86367417b2b2512b3c\",\n    \"completedDate\": 1528899295294,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b86367417b2b2512b3b\",\n    \"completedDate\": 1528899043297,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b85367417b2b2512b3a\",\n    \"completedDate\": 1528898859706,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b85367417b2b2512b39\",\n    \"completedDate\": 1528898815395,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b85367417b2b2512b38\",\n    \"completedDate\": 1528898783470,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b84367417b2b2512b37\",\n    \"completedDate\": 1528898766004,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b84367417b2b2512b36\",\n    \"completedDate\": 1528898255471,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b84367417b2b2512b35\",\n    \"completedDate\": 1528897930802,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b84367417b2b2512b34\",\n    \"completedDate\": 1528897909366,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b83367417b2b2512b33\",\n    \"completedDate\": 1528897491942,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbb367417b2b2512bac\",\n    \"completedDate\": 1528858212055,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbb367417b2b2512bab\",\n    \"completedDate\": 1528857340061,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dbb367417b2b2512baa\",\n    \"completedDate\": 1528857023208,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dba367417b2b2512ba9\",\n    \"completedDate\": 1528845356403,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7dba367417b2b2512ba8\",\n    \"completedDate\": 1528843914026,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db9367417b2b2512ba7\",\n    \"completedDate\": 1528843852819,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db9367417b2b2512ba6\",\n    \"completedDate\": 1528843812163,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db9367417b2b2512ba5\",\n    \"completedDate\": 1528843718606,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db9367417b2b2512ba4\",\n    \"completedDate\": 1528842968052,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db8367417b2b2512ba3\",\n    \"completedDate\": 1528842950539,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db8367417b2b2512ba2\",\n    \"completedDate\": 1528842903133,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db8367417b2b2512ba1\",\n    \"completedDate\": 1528842665151,\n    \"files\": []\n  },\n  {\n    \"id\": \"5d712346c441eddfaeb5bdef\",\n    \"completedDate\": 1528842647554,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db8367417b2b2512ba0\",\n    \"completedDate\": 1528842629216,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db7367417b2b2512b9f\",\n    \"completedDate\": 1528842603772,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db7367417b2b2512b9e\",\n    \"completedDate\": 1528842544267,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db7367417b2b2512b9d\",\n    \"completedDate\": 1528842515275,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db7367417b2b2512b9c\",\n    \"completedDate\": 1528840984420,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db6367417b2b2512b9b\",\n    \"completedDate\": 1528840909886,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db6367417b2b2512b9a\",\n    \"completedDate\": 1528840649575,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db6367417b2b2512b99\",\n    \"completedDate\": 1528839703992,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db6367417b2b2512b98\",\n    \"completedDate\": 1528839624615,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db5367417b2b2512b97\",\n    \"completedDate\": 1528839545835,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db5367417b2b2512b96\",\n    \"completedDate\": 1528839487667,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db5367417b2b2512b95\",\n    \"completedDate\": 1528836793048,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db5367417b2b2512b94\",\n    \"completedDate\": 1528836647039,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db4367417b2b2512b93\",\n    \"completedDate\": 1528836578373,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db4367417b2b2512b92\",\n    \"completedDate\": 1528836503102,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db4367417b2b2512b91\",\n    \"completedDate\": 1528836411536,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7db4367417b2b2512b90\",\n    \"completedDate\": 1528836347810,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b2367417b2b2512b10\",\n    \"completedDate\": 1528745824285,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b2367417b2b2512b0f\",\n    \"completedDate\": 1528742744006,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b2367417b2b2512b0e\",\n    \"completedDate\": 1528742701214,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a661e0f1068aca922b3ef17\",\n    \"completedDate\": 1528742156096,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7e367417b2b2512b20\",\n    \"completedDate\": 1528742135455,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8d367417b2b2512b59\",\n    \"completedDate\": 1528742085698,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8c367417b2b2512b54\",\n    \"completedDate\": 1528734640861,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8b367417b2b2512b53\",\n    \"completedDate\": 1528733256806,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8b367417b2b2512b50\",\n    \"completedDate\": 1528732942662,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8a367417b2b2512b4f\",\n    \"completedDate\": 1528732804161,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8a367417b2b2512b4e\",\n    \"completedDate\": 1528732349407,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8a367417b2b2512b4d\",\n    \"completedDate\": 1528732036101,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b8a367417b2b2512b4c\",\n    \"completedDate\": 1528731931778,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b89367417b2b2512b4b\",\n    \"completedDate\": 1528729490152,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b89367417b2b2512b4a\",\n    \"completedDate\": 1528729413355,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b89367417b2b2512b48\",\n    \"completedDate\": 1528729040300,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b88367417b2b2512b47\",\n    \"completedDate\": 1528728452978,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b88367417b2b2512b46\",\n    \"completedDate\": 1528727990105,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b88367417b2b2512b45\",\n    \"completedDate\": 1528727957080,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b88367417b2b2512b44\",\n    \"completedDate\": 1528727575858,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b87367417b2b2512b43\",\n    \"completedDate\": 1528727550058,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"598f48a36c8c40764b4e52b3\",\n    \"completedDate\": 1528727417343,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b87367417b2b2512b42\",\n    \"completedDate\": 1528727376633,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b87367417b2b2512b41\",\n    \"completedDate\": 1528727272659,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b87367417b2b2512b40\",\n    \"completedDate\": 1528727249380,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b87367417b2b2512b3f\",\n    \"completedDate\": 1528727222148,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7e367417b2b2512b21\",\n    \"completedDate\": 1528727058038,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7e367417b2b2512b24\",\n    \"completedDate\": 1528726960708,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7e367417b2b2512b22\",\n    \"completedDate\": 1528726712992,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7b7e367417b2b2512b23\",\n    \"completedDate\": 1528726687584,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a2efd662fb457916e1fe604\",\n    \"completedDate\": 1528726654446,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"599a789b454f2bbd91a3ff4d\",\n    \"completedDate\": 1528726636685,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"598e8944f009e646fc236146\",\n    \"completedDate\": 1528726619417,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe8569fb03452672e464\",\n    \"completedDate\": 1528726554461,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe7769fb03452672e463\",\n    \"completedDate\": 1528726497738,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe6269fb03452672e462\",\n    \"completedDate\": 1528726457422,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe5469fb03452672e461\",\n    \"completedDate\": 1528726444838,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe4469fb03452672e460\",\n    \"completedDate\": 1528726409080,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe3669fb03452672e45f\",\n    \"completedDate\": 1528726361621,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a94fe2669fb03452672e45e\",\n    \"completedDate\": 1528726329537,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78af367417b2b2512b00\",\n    \"completedDate\": 1528725885250,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ae367417b2b2512aff\",\n    \"completedDate\": 1528725862565,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ae367417b2b2512afe\",\n    \"completedDate\": 1528725844043,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ae367417b2b2512afd\",\n    \"completedDate\": 1528725812152,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ae367417b2b2512afc\",\n    \"completedDate\": 1528725789525,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ad367417b2b2512afb\",\n    \"completedDate\": 1528725762069,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ad367417b2b2512afa\",\n    \"completedDate\": 1528725687987,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ad367417b2b2512af9\",\n    \"completedDate\": 1528725643242,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ad367417b2b2512af8\",\n    \"completedDate\": 1528725613909,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ac367417b2b2512af7\",\n    \"completedDate\": 1528725556408,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ac367417b2b2512af6\",\n    \"completedDate\": 1528725501244,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ac367417b2b2512af5\",\n    \"completedDate\": 1528725475416,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ac367417b2b2512af4\",\n    \"completedDate\": 1528725460248,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ab367417b2b2512af3\",\n    \"completedDate\": 1528725430078,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ab367417b2b2512af2\",\n    \"completedDate\": 1528725404445,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ab367417b2b2512af1\",\n    \"completedDate\": 1528725386000,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78ab367417b2b2512af0\",\n    \"completedDate\": 1528725349292,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b1367417b2b2512b0c\",\n    \"completedDate\": 1528725216220,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b1367417b2b2512b0a\",\n    \"completedDate\": 1528725059356,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b1367417b2b2512b09\",\n    \"completedDate\": 1528724874946,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78b0367417b2b2512b08\",\n    \"completedDate\": 1528724820768,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7790367417b2b2512ab1\",\n    \"completedDate\": 1528724720753,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7790367417b2b2512ab0\",\n    \"completedDate\": 1528724642030,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7790367417b2b2512aaf\",\n    \"completedDate\": 1528724605739,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778f367417b2b2512aae\",\n    \"completedDate\": 1528724413398,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778f367417b2b2512aad\",\n    \"completedDate\": 1528724356893,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778f367417b2b2512aac\",\n    \"completedDate\": 1528724320641,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778e367417b2b2512aab\",\n    \"completedDate\": 1528724190931,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778d367417b2b2512aaa\",\n    \"completedDate\": 1528724078184,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778c367417b2b2512aa9\",\n    \"completedDate\": 1528723974611,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778b367417b2b2512aa8\",\n    \"completedDate\": 1528723909826,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778b367417b2b2512aa7\",\n    \"completedDate\": 1528723549159,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778a367417b2b2512aa6\",\n    \"completedDate\": 1528723491384,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d778a367417b2b2512aa5\",\n    \"completedDate\": 1528723445304,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7789367417b2b2512aa4\",\n    \"completedDate\": 1528723391089,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7788367417b2b2512aa3\",\n    \"completedDate\": 1528723213266,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7788367417b2b2512aa2\",\n    \"completedDate\": 1528723191539,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7787367417b2b2512aa1\",\n    \"completedDate\": 1528723128518,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d774e367417b2b2512aa0\",\n    \"completedDate\": 1528723095947,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d774e367417b2b2512a9f\",\n    \"completedDate\": 1528723074570,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d774d367417b2b2512a9e\",\n    \"completedDate\": 1528723032367,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d774c367417b2b2512a9d\",\n    \"completedDate\": 1528723016297,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d774c367417b2b2512a9c\",\n    \"completedDate\": 1528722884705,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a9367417b2b2512ae9\",\n    \"completedDate\": 1528722189711,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a9367417b2b2512aea\",\n    \"completedDate\": 1528722142299,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a9367417b2b2512ae8\",\n    \"completedDate\": 1528722053070,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a8367417b2b2512ae7\",\n    \"completedDate\": 1528722032467,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a8367417b2b2512ae6\",\n    \"completedDate\": 1528721995155,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a8367417b2b2512ae5\",\n    \"completedDate\": 1528721976152,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a8367417b2b2512ae4\",\n    \"completedDate\": 1528721951775,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a8367417b2b2512ae3\",\n    \"completedDate\": 1528721899118,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a7367417b2b2512ae2\",\n    \"completedDate\": 1528721881145,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a7367417b2b2512ae1\",\n    \"completedDate\": 1528721845732,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"58a7a6ebf9a6318348e2d5aa\",\n    \"completedDate\": 1528721796290,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a7367417b2b2512ae0\",\n    \"completedDate\": 1528721775709,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a7367417b2b2512adf\",\n    \"completedDate\": 1528721631734,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a6367417b2b2512ade\",\n    \"completedDate\": 1528721516690,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a6367417b2b2512add\",\n    \"completedDate\": 1528721308692,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a6367417b2b2512adc\",\n    \"completedDate\": 1528721257100,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a6367417b2b2512adb\",\n    \"completedDate\": 1528721238402,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a5367417b2b2512ada\",\n    \"completedDate\": 1528721220923,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a5367417b2b2512ad9\",\n    \"completedDate\": 1528721198021,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a5367417b2b2512ad8\",\n    \"completedDate\": 1528721176164,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a5367417b2b2512ad7\",\n    \"completedDate\": 1528721108378,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a5367417b2b2512ad6\",\n    \"completedDate\": 1528721076608,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a4367417b2b2512ad5\",\n    \"completedDate\": 1528721029351,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a4367417b2b2512ad4\",\n    \"completedDate\": 1528720989595,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a4367417b2b2512ad3\",\n    \"completedDate\": 1528720962932,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a4367417b2b2512ad2\",\n    \"completedDate\": 1528720915835,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a3367417b2b2512ad1\",\n    \"completedDate\": 1528720843738,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a3367417b2b2512ad0\",\n    \"completedDate\": 1528720815216,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a3367417b2b2512acf\",\n    \"completedDate\": 1528720802544,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78a3367417b2b2512ace\",\n    \"completedDate\": 1528720790009,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781e367417b2b2512acc\",\n    \"completedDate\": 1528720770993,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781e367417b2b2512acb\",\n    \"completedDate\": 1528720747104,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781e367417b2b2512aca\",\n    \"completedDate\": 1528720721929,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781e367417b2b2512ac9\",\n    \"completedDate\": 1528720703105,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781d367417b2b2512ac8\",\n    \"completedDate\": 1528720670005,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781d367417b2b2512ac5\",\n    \"completedDate\": 1528720645332,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781c367417b2b2512ac4\",\n    \"completedDate\": 1528720634778,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781c367417b2b2512ac3\",\n    \"completedDate\": 1528720625208,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781c367417b2b2512ac2\",\n    \"completedDate\": 1528720592433,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781c367417b2b2512ac0\",\n    \"completedDate\": 1528720543076,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781c367417b2b2512abf\",\n    \"completedDate\": 1528720526234,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781b367417b2b2512abe\",\n    \"completedDate\": 1528720510632,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781b367417b2b2512abd\",\n    \"completedDate\": 1528720467749,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781b367417b2b2512abc\",\n    \"completedDate\": 1528720453878,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781b367417b2b2512abb\",\n    \"completedDate\": 1528720413342,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781b367417b2b2512aba\",\n    \"completedDate\": 1528720403159,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781a367417b2b2512ab9\",\n    \"completedDate\": 1528720194712,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781a367417b2b2512ab8\",\n    \"completedDate\": 1528720178074,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d781a367417b2b2512ab7\",\n    \"completedDate\": 1528720151746,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7791367417b2b2512ab5\",\n    \"completedDate\": 1528720134400,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7791367417b2b2512ab4\",\n    \"completedDate\": 1528720124159,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d7791367417b2b2512ab3\",\n    \"completedDate\": 1528720108175,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d72ad424fe3d0e10cad16\",\n    \"completedDate\": 1528720042777,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d72a1424fe3d0e10cad15\",\n    \"completedDate\": 1528719982834,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d7295424fe3d0e10cad14\",\n    \"completedDate\": 1528719930392,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d727a424fe3d0e10cad12\",\n    \"completedDate\": 1528719809651,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d726c424fe3d0e10cad11\",\n    \"completedDate\": 1528719689520,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a9d725e424fe3d0e10cad10\",\n    \"completedDate\": 1528719579787,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad82fee1322bd9aedf08721\",\n    \"completedDate\": 1528719519470,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"58c383d33e2e3259241f3076\",\n    \"completedDate\": 1528719468043,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78aa367417b2b2512aec\",\n    \"completedDate\": 1528719392137,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"587d78aa367417b2b2512aed\",\n    \"completedDate\": 1528719352474,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad88fee1348bd9aedf08816\",\n    \"completedDate\": 1528685796989,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aecf08801\",\n    \"completedDate\": 1528684512716,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244dd\",\n    \"completedDate\": 1475258032598,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"660add10cb82ac38a17513be\",\n    \"completedDate\": 1515450994243,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244de\",\n    \"completedDate\": 1475258201433,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08801\",\n    \"completedDate\": 1475094786951,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08804\",\n    \"completedDate\": 1475094833566,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08833\",\n    \"completedDate\": 1475094870641,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fed1348bd9aedf08833\",\n    \"completedDate\": 1475094890483,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08803\",\n    \"completedDate\": 1475094925451,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08805\",\n    \"completedDate\": 1475095000824,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aecf08806\",\n    \"completedDate\": 1475095068584,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aefe08806\",\n    \"completedDate\": 1475095126954,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08806\",\n    \"completedDate\": 1475095220729,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08807\",\n    \"completedDate\": 1475095251313,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08807\",\n    \"completedDate\": 1475095315463,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08808\",\n    \"completedDate\": 1475095349372,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08812\",\n    \"completedDate\": 1475095439395,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9acdf08812\",\n    \"completedDate\": 1475095537795,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9bedf08813\",\n    \"completedDate\": 1475095645490,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08814\",\n    \"completedDate\": 1475095674621,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08815\",\n    \"completedDate\": 1475095702447,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08816\",\n    \"completedDate\": 1475095780920,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08817\",\n    \"completedDate\": 1475095851150,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08817\",\n    \"completedDate\": 1475095890671,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08820\",\n    \"completedDate\": 1475095950614,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08827\",\n    \"completedDate\": 1475096026221,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08828\",\n    \"completedDate\": 1475096146254,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08829\",\n    \"completedDate\": 1475096175545,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08830\",\n    \"completedDate\": 1475096220710,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08830\",\n    \"completedDate\": 1475096258812,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedd08830\",\n    \"completedDate\": 1475096412586,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08834\",\n    \"completedDate\": 1475096574019,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08835\",\n    \"completedDate\": 1475096736280,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedd08835\",\n    \"completedDate\": 1475096767113,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08835\",\n    \"completedDate\": 1475096824274,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fed1348bd9aede07836\",\n    \"completedDate\": 1475096878286,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87eee1348bd9aede07836\",\n    \"completedDate\": 1475096925946,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87dee1348bd9aede07836\",\n    \"completedDate\": 1475096968597,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad88fee1348bd9aedf08825\",\n    \"completedDate\": 1475097030436,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08822\",\n    \"completedDate\": 1475097048908,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08823\",\n    \"completedDate\": 1475097079567,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08824\",\n    \"completedDate\": 1475097122623,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1248bd9aedf08824\",\n    \"completedDate\": 1475097163693,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08826\",\n    \"completedDate\": 1475097197806,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9afdf08726\",\n    \"completedDate\": 1475097220823,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08736\",\n    \"completedDate\": 1475097245742,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08746\",\n    \"completedDate\": 1475097305636,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08756\",\n    \"completedDate\": 1475097367679,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf04756\",\n    \"completedDate\": 1475097441406,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd8aedf06756\",\n    \"completedDate\": 1475097504209,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf06756\",\n    \"completedDate\": 1475097605201,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf07756\",\n    \"completedDate\": 1475097675710,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08726\",\n    \"completedDate\": 1475102179284,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08721\",\n    \"completedDate\": 1475102344318,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08719\",\n    \"completedDate\": 1475102399325,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08718\",\n    \"completedDate\": 1475102447915,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad82fee1348bd9aedf08721\",\n    \"completedDate\": 1475102528619,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9acde08712\",\n    \"completedDate\": 1475102639748,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9acde08812\",\n    \"completedDate\": 1475102771357,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd8acde08812\",\n    \"completedDate\": 1475102802266,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348cd8acdf08812\",\n    \"completedDate\": 1475102852811,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348cd8acef08812\",\n    \"completedDate\": 1475102997685,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348cd8acef08811\",\n    \"completedDate\": 1475103090510,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348cd8acef08813\",\n    \"completedDate\": 1475103173521,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348ce8acef08814\",\n    \"completedDate\": 1475103241775,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad88fee1348ce8acef08815\",\n    \"completedDate\": 1475103767585,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1347bd9aedf08845\",\n    \"completedDate\": 1475103941867,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08845\",\n    \"completedDate\": 1475104193824,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add10cb82ac38a17513be\",\n    \"completedDate\": 1475104385115,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add37cb82ac38a17513bf\",\n    \"completedDate\": 1475105708678,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add56cb82ac38a17513c0\",\n    \"completedDate\": 1475105917537,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add71cb82ac38a17513c2\",\n    \"completedDate\": 1475105957457,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560adf65cb82ac38a17513c2\",\n    \"completedDate\": 1475106219178,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add8ccb82ac38a17513c4\",\n    \"completedDate\": 1475106445148,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aede08845\",\n    \"completedDate\": 1475107618308,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedd08845\",\n    \"completedDate\": 1475107867871,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedc08845\",\n    \"completedDate\": 1475108019303,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedb08845\",\n    \"completedDate\": 1475108135358,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aeda08845\",\n    \"completedDate\": 1475108802536,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed908845\",\n    \"completedDate\": 1475108989462,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908845\",\n    \"completedDate\": 1475109094598,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908846\",\n    \"completedDate\": 1475109155433,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908746\",\n    \"completedDate\": 1475109179986,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9bec908846\",\n    \"completedDate\": 1475109200468,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908847\",\n    \"completedDate\": 1475109232567,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908848\",\n    \"completedDate\": 1475109272839,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908849\",\n    \"completedDate\": 1475109317110,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908850\",\n    \"completedDate\": 1475109360603,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908852\",\n    \"completedDate\": 1475109405858,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908853\",\n    \"completedDate\": 1475109460239,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908854\",\n    \"completedDate\": 1475109523665,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908855\",\n    \"completedDate\": 1475109597253,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908856\",\n    \"completedDate\": 1475109699779,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aec908857\",\n    \"completedDate\": 1475109754181,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"573c96eac9a6be092d7830c1\",\n    \"completedDate\": 1475120191143,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560ade65cb82ac38a17513c2\",\n    \"completedDate\": 1475120213223,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"570add8ccb82ac38a17513c3\",\n    \"completedDate\": 1475120317675,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"560add8ccb81ac38a17513c4\",\n    \"completedDate\": 1475120349142,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9acdd08826\",\n    \"completedDate\": 1475120453111,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9bedc08826\",\n    \"completedDate\": 1475120559183,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedc08826\",\n    \"completedDate\": 1475120631184,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aeda08826\",\n    \"completedDate\": 1475120755306,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aeda08726\",\n    \"completedDate\": 1475120779449,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed908626\",\n    \"completedDate\": 1475121062291,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed918626\",\n    \"completedDate\": 1475121104072,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed908826\",\n    \"completedDate\": 1475121170178,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed808826\",\n    \"completedDate\": 1475121219834,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"564944c91be2204b269d51e3\",\n    \"completedDate\": 1475121806404,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed708826\",\n    \"completedDate\": 1475121839535,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed608826\",\n    \"completedDate\": 1475121896777,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed508826\",\n    \"completedDate\": 1475121971349,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed308826\",\n    \"completedDate\": 1475122255862,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed208826\",\n    \"completedDate\": 1475122353496,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed108826\",\n    \"completedDate\": 1475122451433,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aed008826\",\n    \"completedDate\": 1475122549646,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aecb08826\",\n    \"completedDate\": 1475122606323,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfbeb5bd1f\",\n    \"completedDate\": 1475123013392,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd18\",\n    \"completedDate\": 1475164643824,\n    \"solution\": \"https://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 21059,
    "chunk_index": 43,
    "total_chunks": 74
  },
  {
    "id": "3b96f0accad1a176d73b1c6e0f2a2721",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1475122255862, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bad87fee1348bd9aed208826\", \"completedDate\": 1475122353496, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bad87fee1348bd9aed108826\", \"completedDate\": 1475122451433, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bad87fee1348bd9aed008826\", \"completedDate\": 1475122549646, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bad87fee1348bd9aecb08826\", \"completedDate\": 1475122606323, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bd7158d8c442eddfbeb5bd1f\", \"completedDate\": 1475123013392, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd18\", \"completedDate\": 1475164643824, \"solution\": \"https://codepenio/moT01/pen/ZpJpKp\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c443eddfaeb5bdef\",\n    \"completedDate\": 1475173197683,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244a8\",\n    \"completedDate\": 1475173236795,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244a9\",\n    \"completedDate\": 1475173254001,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244aa\",\n    \"completedDate\": 1475173281010,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ab\",\n    \"completedDate\": 1475173381082,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb3bdef\",\n    \"completedDate\": 1475173390858,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb4bdef\",\n    \"completedDate\": 1475173413711,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1231c1c11feddfaeb5bdef\",\n    \"completedDate\": 1475173423698,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb6bdef\",\n    \"completedDate\": 1475173438268,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ac\",\n    \"completedDate\": 1475173465003,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ad\",\n    \"completedDate\": 1475173477062,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1391c1c11feddfaeb4bdef\",\n    \"completedDate\": 1475173519510,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7993c9c69feddfaeb7bdef\",\n    \"completedDate\": 1475173533104,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7993c9ca9feddfaeb7bdef\",\n    \"completedDate\": 1475173564954,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ae\",\n    \"completedDate\": 1475176291002,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244af\",\n    \"completedDate\": 1475176331489,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b0\",\n    \"completedDate\": 1475176352871,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b1\",\n    \"completedDate\": 1475176403989,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b2\",\n    \"completedDate\": 1475176422046,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b3\",\n    \"completedDate\": 1475176590196,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c444eddfaeb5bdef\",\n    \"completedDate\": 1475176632734,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b5\",\n    \"completedDate\": 1475176719867,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b4\",\n    \"completedDate\": 1475176819114,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b6\",\n    \"completedDate\": 1475176908316,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b7\",\n    \"completedDate\": 1475176990858,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b8\",\n    \"completedDate\": 1475177105048,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244b9\",\n    \"completedDate\": 1475177174580,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ed\",\n    \"completedDate\": 1475177236572,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c448eddfaeb5bdef\",\n    \"completedDate\": 1475177278183,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c549eddfaeb5bdef\",\n    \"completedDate\": 1475179313868,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ba\",\n    \"completedDate\": 1475179482988,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c450eddfaeb5bdef\",\n    \"completedDate\": 1475179518666,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c451eddfaeb5bdef\",\n    \"completedDate\": 1475179613795,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c452eddfaeb5bdef\",\n    \"completedDate\": 1475179659278,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244bb\",\n    \"completedDate\": 1475179965317,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7993c9c69feddfaeb8bdef\",\n    \"completedDate\": 1475180000714,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb7bdef\",\n    \"completedDate\": 1475180039289,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392ca\",\n    \"completedDate\": 1475180095658,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb8bdef\",\n    \"completedDate\": 1475181698926,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56592a60ddddeae28f7aa8e1\",\n    \"completedDate\": 1475181780041,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392cb\",\n    \"completedDate\": 1475181833413,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392cc\",\n    \"completedDate\": 1475183501952,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392cd\",\n    \"completedDate\": 1475183525070,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392ce\",\n    \"completedDate\": 1475183590132,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244bc\",\n    \"completedDate\": 1475183698232,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392cf\",\n    \"completedDate\": 1475183805400,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244bd\",\n    \"completedDate\": 1475246542486,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244be\",\n    \"completedDate\": 1475246816353,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244bf\",\n    \"completedDate\": 1475246928293,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c0\",\n    \"completedDate\": 1475246987475,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c2\",\n    \"completedDate\": 1475247140834,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c3\",\n    \"completedDate\": 1475247240302,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c6\",\n    \"completedDate\": 1475249114465,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123c9c441eddfaeb5bdef\",\n    \"completedDate\": 1475249172491,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb3bdef\",\n    \"completedDate\": 1475249802320,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d0\",\n    \"completedDate\": 1475255137391,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d1\",\n    \"completedDate\": 1475255166071,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d2\",\n    \"completedDate\": 1475255268194,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d3\",\n    \"completedDate\": 1475255346517,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d4\",\n    \"completedDate\": 1475255395602,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d5\",\n    \"completedDate\": 1475255430440,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d6\",\n    \"completedDate\": 1475255447772,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d7\",\n    \"completedDate\": 1475255476799,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d8\",\n    \"completedDate\": 1475255568397,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244d9\",\n    \"completedDate\": 1475255614997,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244da\",\n    \"completedDate\": 1475255683109,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244db\",\n    \"completedDate\": 1475255732118,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"5690307fddb111c6084545d7\",\n    \"completedDate\": 1475255808973,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244dc\",\n    \"completedDate\": 1475256242575,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"5664820f61c48e80c9fa476c\",\n    \"completedDate\": 1475256945917,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bdee\",\n    \"completedDate\": 1515450964126,\n    \"solution\": \"https://pinter",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 4152,
    "chunk_index": 44,
    "total_chunks": 74
  },
  {
    "id": "afaaeb23ad3e239c184623ceb64c3380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1475255614997, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244da\", \"completedDate\": 1475255683109, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244db\", \"completedDate\": 1475255732118, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"5690307fddb111c6084545d7\", \"completedDate\": 1475255808973, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244dc\", \"completedDate\": 1475256242575, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"5664820f61c48e80c9fa476c\", \"completedDate\": 1475256945917, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bdee\", \"completedDate\": 1515450964126, \"solution\": \"https://pinterherokuapp",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 45,
    "total_chunks": 74
  },
  {
    "id": "f3ab56696afac6c64342fa64ef7257d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1475255614997, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244da\", \"completedDate\": 1475255683109, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244db\", \"completedDate\": 1475255732118, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"5690307fddb111c6084545d7\", \"completedDate\": 1475255808973, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244dc\", \"completedDate\": 1475256242575, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"5664820f61c48e80c9fa476c\", \"completedDate\": 1475256945917, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bdee\", \"completedDate\": 1515450964126, \"solution\": \"https://pinterherokuappcom/#/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bad87fee1348bd9aedf08802\",\n    \"completedDate\": 1475094814477,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244df\",\n    \"completedDate\": 1475258308371,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244e0\",\n    \"completedDate\": 1475258479391,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"5679ceb97cbaa8c51670a16b\",\n    \"completedDate\": 1475259156604,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c4\",\n    \"completedDate\": 1475259288195,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"565bbe00e9cc8ac0725390f4\",\n    \"completedDate\": 1475262913431,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d0\",\n    \"completedDate\": 1475266763329,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c7\",\n    \"completedDate\": 1475266806568,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c8\",\n    \"completedDate\": 1475266879713,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244c9\",\n    \"completedDate\": 1475267928028,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d1\",\n    \"completedDate\": 1475267998292,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d2\",\n    \"completedDate\": 1475268069965,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d3\",\n    \"completedDate\": 1475268145412,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244ca\",\n    \"completedDate\": 1475297124064,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"567af2437cbaa8c51670a16c\",\n    \"completedDate\": 1475297309457,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244cb\",\n    \"completedDate\": 1475297597704,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244cc\",\n    \"completedDate\": 1475297776784,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244cd\",\n    \"completedDate\": 1475297918874,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244cf\",\n    \"completedDate\": 1475519963758,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb5bdef\",\n    \"completedDate\": 1475520469953,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56104e9e514f539506016a5c\",\n    \"completedDate\": 1475520549003,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56105e7b514f539506016a5e\",\n    \"completedDate\": 1475520602983,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"5675e877dbd60be8ad28edc6\",\n    \"completedDate\": 1475520969902,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244e1\",\n    \"completedDate\": 1475521239678,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb1bdef\",\n    \"completedDate\": 1475521320287,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"5688e62ea601b2482ff8422b\",\n    \"completedDate\": 1475524381505,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c11feddfaeb9bdef\",\n    \"completedDate\": 1475524515916,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb1bdef\",\n    \"completedDate\": 1475524655165,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb2bdef\",\n    \"completedDate\": 1475543615965,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb6bdef\",\n    \"completedDate\": 1475543695668,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7128d8c441eddfbeb5bddf\",\n    \"completedDate\": 1475544021850,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb7bdef\",\n    \"completedDate\": 1475544296945,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c12feddfaeb8bdef\",\n    \"completedDate\": 1475544467549,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c13feddfaeb3bdef\",\n    \"completedDate\": 1475544513783,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb1bdef\",\n    \"completedDate\": 1475544570212,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb2bdef\",\n    \"completedDate\": 1475544847062,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb4bdef\",\n    \"completedDate\": 1475545110298,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"563cfb55594311ffcb333c70\",\n    \"completedDate\": 1475545212806,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb3bdef\",\n    \"completedDate\": 1475547779361,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb7bdef\",\n    \"completedDate\": 1475547932256,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb8bdef\",\n    \"completedDate\": 1475548117909,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c15feddfaeb9bdef\",\n    \"completedDate\": 1475548202572,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb1bdef\",\n    \"completedDate\": 1475548720499,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb2bdef\",\n    \"completedDate\": 1475548785961,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb3bdef\",\n    \"completedDate\": 1475548816796,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb4bdef\",\n    \"completedDate\": 1475548955141,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb5bdef\",\n    \"completedDate\": 1475549004864,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d2c442eddfbeb5bd1f\",\n    \"completedDate\": 1475549039674,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"a202eed8fc186c8434cb6d61\",\n    \"completedDate\": 1475549776986,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a302f7aae1aa3152a5b413bc\",\n    \"completedDate\": 1475550618044,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"aaa48de84e1ecc7c742e1124\",\n    \"completedDate\": 1475551824473,\n    \"solution\": \"\\nfunction palindrome(str) {\\n  \\n  //remove all punctuation and spaces\\n  var str1 = str",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 3085,
    "chunk_index": 46,
    "total_chunks": 74
  },
  {
    "id": "d90b46e8f4de896a0d1e11cd9ffb2628",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1475548955141, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb5bdef\", \"completedDate\": 1475549004864, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7158d2c442eddfbeb5bd1f\", \"completedDate\": 1475549039674, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"a202eed8fc186c8434cb6d61\", \"completedDate\": 1475549776986, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a302f7aae1aa3152a5b413bc\", \"completedDate\": 1475550618044, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aaa48de84e1ecc7c742e1124\", \"completedDate\": 1475551824473, \"solution\": \"\\nfunction palindrome(str) {\\n \\n //remove all punctuation and spaces\\n var str1 = strreplace(/[^A-Za-z0-9]/g, '');\\n  //make all lower case\\n  var str2 = str1 toLowerCase();\\n  console log(str2);\\n  \\n  var str3 = str2 split('') reverse() join('');\\n  console",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 47,
    "total_chunks": 74
  },
  {
    "id": "45e30419fd2e8a26b9dd709d8ef97c4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "{ \"id\": \"bd7158d2c442eddfbeb5bd1f\", \"completedDate\": 1475549039674, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"a202eed8fc186c8434cb6d61\", \"completedDate\": 1475549776986, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a302f7aae1aa3152a5b413bc\", \"completedDate\": 1475550618044, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aaa48de84e1ecc7c742e1124\", \"completedDate\": 1475551824473, \"solution\": \"\\nfunction palindrome(str) {\\n \\n //remove all punctuation and spaces\\n var str1 = strreplace(/[^A-Za-z0-9]/g, '');\\n //make all lower case\\n var str2 = str1 toLowerCase();\\n console log(str2);\\n \\n var str3 = str2 split('') reverse() join('');\\n consolelog(str3);\\n  \\n  if (str2 === str3)\\n  {\\n    return true;\\n  }\\n  \\n  else\\n  {  \\n    return false;\\n  }\\n}\\n\\n\\n\\npalindrome(\\\"eye\\\");\\n\",\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a26cbbe9ad8655a977e1ceb5\",\n    \"completedDate\": 1475552516511,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"ab6137d4e35944e21037b769\",\n    \"completedDate\": 1475553251232,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a789b3483989747d63b0e427\",\n    \"completedDate\": 1475553881835,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"acda2fb1324d9b0fa741e6b5\",\n    \"completedDate\": 1475554349724,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"afcc8d540bea9ea2669306b6\",\n    \"completedDate\": 1475555795487,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"af2170cad53daa0770fabdea\",\n    \"completedDate\": 1475594634836,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"ac6993d51946422351508a41\",\n    \"completedDate\": 1475598636059,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a9bd25c716030ec90084d8a1\",\n    \"completedDate\": 1475622950421,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"ab31c21b530c0dafa9e241ee\",\n    \"completedDate\": 1475628875890,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"adf08ec01beb4f99fc7a68f2\",\n    \"completedDate\": 1475634954182,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a39963a4c10bc8b4d4f06d7e\",\n    \"completedDate\": 1476834441854,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a24c1a4622e3c05097f71d67\",\n    \"completedDate\": 1476839147914,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"56533eb9ac21ba0edf2244e2\",\n    \"completedDate\": 1476843234983,\n    \"solution\": \"\\nfunction rot13(str) { // LBH QVQ VG",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 1046,
    "chunk_index": 48,
    "total_chunks": 74
  },
  {
    "id": "f654bcb7ec22c3d11678c0575c39b789",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"files\": [] }, { \"id\": \"a9bd25c716030ec90084d8a1\", \"completedDate\": 1475622950421, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"ab31c21b530c0dafa9e241ee\", \"completedDate\": 1475628875890, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"adf08ec01beb4f99fc7a68f2\", \"completedDate\": 1475634954182, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a39963a4c10bc8b4d4f06d7e\", \"completedDate\": 1476834441854, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a24c1a4622e3c05097f71d67\", \"completedDate\": 1476839147914, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"56533eb9ac21ba0edf2244e2\", \"completedDate\": 1476843234983, \"solution\": \"\\nfunction rot13(str) { // LBH QVQ VG\\n  //var arr0 = str split(\\\"\\\");\\n  var arr = [];\\n  var arr2 = [];\\n  var newstr = \\\"\\\";\\n  //concat array to string\\n  //var str3 = String fromCharCode(65);\\n  //var str2 = 'did' charCodeAt(0);\\n  \\n for (i=0; i<str length; i++)\\n {\\n    var filler = 0;\\n    if (str charCodeAt(i) >= 65 && str charCodeAt(i) <= 77) //A-M\\n    {\\n      filler = str charCodeAt(i) + 13;\\n      arr push(filler);\\n    }\\n    else if (str charCodeAt(i) > 77 && str charCodeAt(i) <= 90) //N-Z\\n    {\\n      filler = str charCodeAt(i) - 13;\\n      arr",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 49,
    "total_chunks": 74
  },
  {
    "id": "7e41f8ac18833dd9ec2400b28069ef02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "= [];\\n var arr2 = [];\\n var newstr = \\\"\\\";\\n //concat array to string\\n //var str3 = String fromCharCode(65);\\n //var str2 = 'did' charCodeAt(0);\\n \\n for (i=0; i<str length; i++)\\n {\\n var filler = 0;\\n if (str charCodeAt(i) >= 65 && str charCodeAt(i) <= 77) //A-M\\n {\\n filler = str charCodeAt(i) + 13;\\n arr push(filler);\\n }\\n else if (str charCodeAt(i) > 77 && str charCodeAt(i) <= 90) //N-Z\\n {\\n filler = str charCodeAt(i) - 13;\\n arrpush(filler);\\n    }\\n    else //all other characters , * \\n    {\\n      filler = str charCodeAt(i);\\n      arr push(filler);\\n    }\\n }\\n  \\n for (j=0; j<str length; j++)\\n {\\n   var placeme = String fromCharCode(arr[j]);\\n   arr2 push(placeme);\\n }\\n  \\n  \\n  newstr = arr2",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 50,
    "total_chunks": 74
  },
  {
    "id": "deb3279cdfba7fde0656e578946b7f5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "charCodeAt(i) >= 65 && str charCodeAt(i) <= 77) //A-M\\n {\\n filler = str charCodeAt(i) + 13;\\n arr push(filler);\\n }\\n else if (str charCodeAt(i) > 77 && str charCodeAt(i) <= 90) //N-Z\\n {\\n filler = str charCodeAt(i) - 13;\\n arrpush(filler);\\n }\\n else //all other characters , * \\n {\\n filler = str charCodeAt(i);\\n arr push(filler);\\n }\\n }\\n \\n for (j=0; j<str length; j++)\\n {\\n var placeme = String fromCharCode(arr[j]);\\n arr2 push(placeme);\\n }\\n \\n \\n newstr = arr2join(\\\"\\\");\\n  return newstr;\\n}\\n\\n// Change the inputs below to test\\nrot13(\\\"SERR PBQR PNZC\\\");\\n\",\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d4\",\n    \"completedDate\": 1476843806468,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d5\",\n    \"completedDate\": 1476844475068,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d6\",\n    \"completedDate\": 1476844663724,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d7\",\n    \"completedDate\": 1476844924658,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d8\",\n    \"completedDate\": 1476845007020,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392d9\",\n    \"completedDate\": 1476889068031,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"56bbb991ad1ed5201cd392da\",\n    \"completedDate\": 1476889166120,\n    \"solution\": null,\n    \"challengeType\": null,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd13\",\n    \"completedDate\": 1476999500595,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 51,
    "total_chunks": 74
  },
  {
    "id": "ca06e2e00998b0c28310b81940d531c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1476844475068, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392d6\", \"completedDate\": 1476844663724, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392d7\", \"completedDate\": 1476844924658, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392d8\", \"completedDate\": 1476845007020, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392d9\", \"completedDate\": 1476889068031, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392da\", \"completedDate\": 1476889166120, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd13\", \"completedDate\": 1476999500595, \"solution\": \"http://codepenio/moT01/pen/ZpVYLN\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"a3566b1109230028080c9345\",\n    \"completedDate\": 1477059269430,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a5de63ebea8dbee56860f4f2\",\n    \"completedDate\": 1477064980435,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7127d8c441eddfbeb5bddf\",\n    \"completedDate\": 1477109403800,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd10\",\n    \"completedDate\": 1477370610122,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 523,
    "chunk_index": 52,
    "total_chunks": 74
  },
  {
    "id": "31983f43b2b456f40b6e884a0c411b2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1476889068031, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"56bbb991ad1ed5201cd392da\", \"completedDate\": 1476889166120, \"solution\": null, \"challengeType\": null, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd13\", \"completedDate\": 1476999500595, \"solution\": \"http://codepenio/moT01/pen/ZpVYLN\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"a3566b1109230028080c9345\", \"completedDate\": 1477059269430, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a5de63ebea8dbee56860f4f2\", \"completedDate\": 1477064980435, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7127d8c441eddfbeb5bddf\", \"completedDate\": 1477109403800, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd10\", \"completedDate\": 1477370610122, \"solution\": \"http://codepenio/moT01/pen/ZpVOXo\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"a7f4d8f2483413a6ce226cac\",\n    \"completedDate\": 1477447963039,\n    \"solution\": \"function convertToRoman(num) {\\n  var newArr = [];\\n  var result;\\n  \\n  while (num>=1000) {\\n    newArr push(\\\"M\\\"); \\n    num -= 1000;\\n  }\\n  \\n  if (num >= 900) {\\n    newArr push(\\\"CM\\\");\\n    num -= 900;\\n  }\\n  \\n  if (num >= 500) {\\n    newArr",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 53,
    "total_chunks": 74
  },
  {
    "id": "7f48c3e06ee1b473a04406100e59b9c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7127d8c441eddfbeb5bddf\", \"completedDate\": 1477109403800, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd10\", \"completedDate\": 1477370610122, \"solution\": \"http://codepenio/moT01/pen/ZpVOXo\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"a7f4d8f2483413a6ce226cac\", \"completedDate\": 1477447963039, \"solution\": \"function convertToRoman(num) {\\n var newArr = [];\\n var result;\\n \\n while (num>=1000) {\\n newArr push(\\\"M\\\"); \\n num -= 1000;\\n }\\n \\n if (num >= 900) {\\n newArr push(\\\"CM\\\");\\n num -= 900;\\n }\\n \\n if (num >= 500) {\\n newArrpush(\\\"D\\\");\\n    num -= 500;\\n  }\\n  \\n  if (num >= 400) {\\n    newArr push(\\\"CD\\\");\\n    num -= 400;\\n  }\\n  \\n  while (num >= 100) { \\n    newArr push(\\\"C\\\");\\n    num -= 100;\\n  }\\n\\n  if (num >= 90) {\\n    newArr push(\\\"XC\\\");\\n    num -= 90;\\n  }\\n  \\n  if (num >= 50) {\\n    newArr push(\\\"L\\\");\\n    num -= 50;\\n  }\\n  \\n  if (num >= 40) {\\n    newArr push(\\\"XL\\\");\\n    num -= 40;\\n  }\\n  \\n  while (num >= 10) {\\n    newArr push(\\\"X\\\");\\n    num -= 10;\\n  }\\n  \\n  if (num >= 9) {\\n    newArr",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 54,
    "total_chunks": 74
  },
  {
    "id": "3fe888382613b8bac28e761bc97d5d18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": ">= 400) {\\n newArr push(\\\"CD\\\");\\n num -= 400;\\n }\\n \\n while (num >= 100) { \\n newArr push(\\\"C\\\");\\n num -= 100;\\n }\\n\\n if (num >= 90) {\\n newArr push(\\\"XC\\\");\\n num -= 90;\\n }\\n \\n if (num >= 50) {\\n newArr push(\\\"L\\\");\\n num -= 50;\\n }\\n \\n if (num >= 40) {\\n newArr push(\\\"XL\\\");\\n num -= 40;\\n }\\n \\n while (num >= 10) {\\n newArr push(\\\"X\\\");\\n num -= 10;\\n }\\n \\n if (num >= 9) {\\n newArrpush(\\\"IX\\\");\\n    num -= 9;\\n  }\\n  \\n  if (num >= 5) {\\n    newArr push(\\\"V\\\");\\n    num -= 5;\\n  }\\n  \\n  if (num >= 4) {\\n    newArr push(\\\"IV\\\");\\n    num -= 4;\\n  }\\n  \\n  while (num > 0) {\\n    newArr push(\\\"I\\\");\\n    num -= 1;\\n  }\\n    \\n  result = newArr join();\\n  result = result replace(/,/g,\\\"\\\");\\n  console",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 55,
    "total_chunks": 74
  },
  {
    "id": "6735a4e359fede39d978038cdeb9b640",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "{\\n newArr push(\\\"XL\\\");\\n num -= 40;\\n }\\n \\n while (num >= 10) {\\n newArr push(\\\"X\\\");\\n num -= 10;\\n }\\n \\n if (num >= 9) {\\n newArrpush(\\\"IX\\\");\\n num -= 9;\\n }\\n \\n if (num >= 5) {\\n newArr push(\\\"V\\\");\\n num -= 5;\\n }\\n \\n if (num >= 4) {\\n newArr push(\\\"IV\\\");\\n num -= 4;\\n }\\n \\n while (num > 0) {\\n newArr push(\\\"I\\\");\\n num -= 1;\\n }\\n \\n result = newArr join();\\n result = result replace(/,/g,\\\"\\\");\\n consolelog(result);\\n  return result;\\n}\\n\\nconvertToRoman(36);\\n\",\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a0b5010f579e69b815e7c5d6\",\n    \"completedDate\": 1477512598599,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"aa7697ea2477d1316795783b\",\n    \"completedDate\": 1477516427303,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"afd15382cdfb22c9efe8b7de\",\n    \"completedDate\": 1477519032167,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"af7588ade1100bde429baf20\",\n    \"completedDate\": 1477520894164,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a77dbc43c33f39daa4429b4f\",\n    \"completedDate\": 1477521441905,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a105e963526e7de52b219be9\",\n    \"completedDate\": 1477523752866,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a6b0bb188d873cb2c8729495\",\n    \"completedDate\": 1477529331616,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a5229172f011153519423690\",\n    \"completedDate\": 1477535395217,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a8d97bd4c764e91f9d2bda01\",\n    \"completedDate\": 1477592139677,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"af4afb223120f7348cdfc9fd\",\n    \"completedDate\": 1478129569493,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd19\",\n    \"completedDate\": 1479175997023,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 797,
    "chunk_index": 56,
    "total_chunks": 74
  },
  {
    "id": "01c139f07aca9e846af71251f15cb959",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1477521441905, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a105e963526e7de52b219be9\", \"completedDate\": 1477523752866, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a6b0bb188d873cb2c8729495\", \"completedDate\": 1477529331616, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a5229172f011153519423690\", \"completedDate\": 1477535395217, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a8d97bd4c764e91f9d2bda01\", \"completedDate\": 1477592139677, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"af4afb223120f7348cdfc9fd\", \"completedDate\": 1478129569493, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd19\", \"completedDate\": 1479175997023, \"solution\": \"http://codepenio/moT01/pen/LRoxrQ\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"a8e512fbe388ac2f9198f0fa\",\n    \"completedDate\": 1481583669528,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a103376db3ba46b2d50db289\",\n    \"completedDate\": 1481587010971,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a3bfc1673c0526e06d3ac698\",\n    \"completedDate\": 1481608493885,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"ae9defd7acaf69703ab432ea\",\n    \"completedDate\": 1481736052042,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a6e40f1041b06c996f7b2406\",\n    \"completedDate\": 1481736237406,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a5deed1811a43193f9f1c841\",\n    \"completedDate\": 1481740006290,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"ab306dbdcc907c7ddfc30830\",\n    \"completedDate\": 1481745472605,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a10d2431ad0c6a099a4b8b52\",\n    \"completedDate\": 1481746815383,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a97fd23d9b809dac9921074f\",\n    \"completedDate\": 1481758984188,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a3f503de51cfab748ff001aa\",\n    \"completedDate\": 1481824947299,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a56138aff60341a09ed6c480\",\n    \"completedDate\": 1481837456810,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a3f503de51cf954ede28891d\",\n    \"completedDate\": 1481845736605,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315184\",\n    \"completedDate\": 1481860652201,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315185\",\n    \"completedDate\": 1481860854284,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518f\",\n    \"completedDate\": 1481861004554,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518e\",\n    \"completedDate\": 1481862599572,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518c\",\n    \"completedDate\": 1481862758623,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518d\",\n    \"completedDate\": 1481862797677,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518b\",\n    \"completedDate\": 1481862861505,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31518a\",\n    \"completedDate\": 1481862919212,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315189\",\n    \"completedDate\": 1481863139471,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315188\",\n    \"completedDate\": 1481863215509,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315187\",\n    \"completedDate\": 1481863487868,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315186\",\n    \"completedDate\": 1481863524852,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7129d8a441eddfbeb5bddf\",\n    \"completedDate\": 1481863610234,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7126d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481863731854,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7125d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864211145,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7122d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864321324,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7124d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864475753,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7123d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864582256,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7121d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864696095,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7120d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864846892,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712fd8c441eddfbeb5bddf\",\n    \"completedDate\": 1481864954292,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712ed8c441eddfbeb5bddf\",\n    \"completedDate\": 1481865043747,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712dd8c441eddfbeb5bddf\",\n    \"completedDate\": 1481865144055,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712cd8c441eddfbeb5bddf\",\n    \"completedDate\": 1481865164967,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31510f\",\n    \"completedDate\": 1481865503851,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7129d80441eddfbeb5bddf\",\n    \"completedDate\": 1481865687477,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7129d8b441eddfbeb5bddf\",\n    \"completedDate\": 1481866381587,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7029d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481868133911,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712ad8c441eddfbeb5bddf\",\n    \"completedDate\": 1481868315911,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7119d8c441eddfbeb5bddf\",\n    \"completedDate\": 1481868379586,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd712bd8c441eddfbeb5bddf\",\n    \"completedDate\": 1481868532739,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7129d89441eddfbeb5bddf\",\n    \"completedDate\": 1481868862816,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315183\",\n    \"completedDate\": 1481897167093,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315182\",\n    \"completedDate\": 1481897290924,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315181\",\n    \"completedDate\": 1481897771281,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f315180\",\n    \"completedDate\": 1481898177819,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517f\",\n    \"completedDate\": 1481898276836,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517e\",\n    \"completedDate\": 1481898787535,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517d\",\n    \"completedDate\": 1481898913196,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517c\",\n    \"completedDate\": 1481899378324,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517b\",\n    \"completedDate\": 1481899595427,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"56b15f15632298c12f31517a\",\n    \"completedDate\": 1481900212775,\n    \"solution\": null,\n    \"challengeType\": 6,\n    \"files\": []\n  },\n  {\n    \"id\": \"a2f1d72d9b908d0bd72bb9f6\",\n    \"completedDate\": 1481903430810,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"aff0395860f5d3034dc0bfc9\",\n    \"completedDate\": 1482122509252,\n    \"solution\": \"\\nfunction telephoneCheck(str) {\\n  \\n  var tests = /^(1|1[\\\\s-])",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 3356,
    "chunk_index": 57,
    "total_chunks": 74
  },
  {
    "id": "51751bfd540b333102cbc407a1f28428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "[] }, { \"id\": \"56b15f15632298c12f31517d\", \"completedDate\": 1481898913196, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517c\", \"completedDate\": 1481899378324, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517b\", \"completedDate\": 1481899595427, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517a\", \"completedDate\": 1481900212775, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"a2f1d72d9b908d0bd72bb9f6\", \"completedDate\": 1481903430810, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aff0395860f5d3034dc0bfc9\", \"completedDate\": 1482122509252, \"solution\": \"\\nfunction telephoneCheck(str) {\\n \\n var tests = /^(1|1[\\\\s-])(\\\\d{3}|\\\\d{3}[\\\\s-]|\\\\(\\\\d{3}\\\\)|\\\\(\\\\d{3}\\\\)\\\\s)(\\\\d{3}|\\\\d{3}[\\\\s-])\\\\d{4}$/g;\\n  return tests",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 58,
    "total_chunks": 74
  },
  {
    "id": "57ce9d6c0757f91bd5ae5e56d5247a50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "{ \"id\": \"56b15f15632298c12f31517d\", \"completedDate\": 1481898913196, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517c\", \"completedDate\": 1481899378324, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517b\", \"completedDate\": 1481899595427, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"56b15f15632298c12f31517a\", \"completedDate\": 1481900212775, \"solution\": null, \"challengeType\": 6, \"files\": [] }, { \"id\": \"a2f1d72d9b908d0bd72bb9f6\", \"completedDate\": 1481903430810, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aff0395860f5d3034dc0bfc9\", \"completedDate\": 1482122509252, \"solution\": \"\\nfunction telephoneCheck(str) {\\n \\n var tests = /^(1|1[\\\\s-])(\\\\d{3}|\\\\d{3}[\\\\s-]|\\\\(\\\\d{3}\\\\)|\\\\(\\\\d{3}\\\\)\\\\s)(\\\\d{3}|\\\\d{3}[\\\\s-])\\\\d{4}$/g;\\n return teststest(str);\\n}\\n\\n\\n\\ntelephoneCheck(\\\"555-555-5555\\\");\\n\",\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a7bf700cd123b9a54eef01d5\",\n    \"completedDate\": 1482185656510,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"a19f0fbe1872186acd434d5a\",\n    \"completedDate\": 1482201811080,\n    \"solution\": null,\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"aa2e6f85cab2ab736c9a9b24\",\n    \"completedDate\": 1482248818632,\n    \"solution\": \"\\nfunction checkCashRegister(price, cash, cid) {\\n  var changeleft = Math",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 565,
    "chunk_index": 59,
    "total_chunks": 74
  },
  {
    "id": "949fbd83453ee79499c650a2a0026c7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "6, \"files\": [] }, { \"id\": \"a2f1d72d9b908d0bd72bb9f6\", \"completedDate\": 1481903430810, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aff0395860f5d3034dc0bfc9\", \"completedDate\": 1482122509252, \"solution\": \"\\nfunction telephoneCheck(str) {\\n \\n var tests = /^(1|1[\\\\s-])(\\\\d{3}|\\\\d{3}[\\\\s-]|\\\\(\\\\d{3}\\\\)|\\\\(\\\\d{3}\\\\)\\\\s)(\\\\d{3}|\\\\d{3}[\\\\s-])\\\\d{4}$/g;\\n return teststest(str);\\n}\\n\\n\\n\\ntelephoneCheck(\\\"555-555-5555\\\");\\n\", \"challengeType\": 5, \"files\": [] }, { \"id\": \"a7bf700cd123b9a54eef01d5\", \"completedDate\": 1482185656510, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"a19f0fbe1872186acd434d5a\", \"completedDate\": 1482201811080, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aa2e6f85cab2ab736c9a9b24\", \"completedDate\": 1482248818632, \"solution\": \"\\nfunction checkCashRegister(price, cash, cid) {\\n var changeleft = Mathround((cash-price)*100)/100, changetotal = Math round((cash-price)*100)/100, totalcid = 0, arr = [], temp = 0, temp2 = 0;\\n\\n  var values = [[\\\"PENNY\\\", 0 01], \\n                [\\\"NICKEL\\\", 0 05], \\n                [\\\"DIME\\\", 0 10], \\n                [\\\"QUARTER\\\", 0 25], \\n                [\\\"ONE\\\", 1 00], \\n                [\\\"FIVE\\\", 5 00], \\n                [\\\"TEN\\\", 10",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 60,
    "total_chunks": 74
  },
  {
    "id": "6bbd5f3925e30028e6ffcdb208a95d7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "5, \"files\": [] }, { \"id\": \"a19f0fbe1872186acd434d5a\", \"completedDate\": 1482201811080, \"solution\": null, \"challengeType\": 5, \"files\": [] }, { \"id\": \"aa2e6f85cab2ab736c9a9b24\", \"completedDate\": 1482248818632, \"solution\": \"\\nfunction checkCashRegister(price, cash, cid) {\\n var changeleft = Mathround((cash-price)*100)/100, changetotal = Math round((cash-price)*100)/100, totalcid = 0, arr = [], temp = 0, temp2 = 0;\\n\\n var values = [[\\\"PENNY\\\", 0 01], \\n [\\\"NICKEL\\\", 0 05], \\n [\\\"DIME\\\", 0 10], \\n [\\\"QUARTER\\\", 0 25], \\n [\\\"ONE\\\", 1 00], \\n [\\\"FIVE\\\", 5 00], \\n [\\\"TEN\\\", 1000], \\n                [\\\"TWENTY\\\", 20 00], \\n                [\\\"ONE HUNDRED\\\", 100 00]];\\n  \\n  //this get the cash in the till\\n  for(var i=0; i<cid length; i++) {\\n    totalcid += Math round(cid[i][1]*100)/100;\\n  }\\n  \\n  if(totalcid < changeleft) {\\n    return \\\"Insufficient Funds\\\";\\n  }\\n  \\n  function getchange(j,value) {\\n    temp=0;\\n    while(changeleft >= value && cid[j][1] >= value) {\\n      changeleft = Math round((changeleft-value)*100)/100;\\n      cid[j][1] = Math round((cid[j][1]-value)*100)/ 100;\\n      totalcid = Math round((totalcid-value)*100)/100;\\n      temp = Math round((temp+value)*100)/100;\\n    }\\n    temp2 = Math round((temp2+temp)*100)/100;\\n    if(temp == 0) {\\n      arr",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 61,
    "total_chunks": 74
  },
  {
    "id": "0d52881a6d8c5b51f0bafbe256bb4f3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "[\\\"TWENTY\\\", 20 00], \\n [\\\"ONE HUNDRED\\\", 100 00]];\\n \\n //this get the cash in the till\\n for(var i=0; i<cid length; i++) {\\n totalcid += Math round(cid[i][1]*100)/100;\\n }\\n \\n if(totalcid < changeleft) {\\n return \\\"Insufficient Funds\\\";\\n }\\n \\n function getchange(j,value) {\\n temp=0;\\n while(changeleft >= value && cid[j][1] >= value) {\\n changeleft = Math round((changeleft-value)*100)/100;\\n cid[j][1] = Math round((cid[j][1]-value)*100)/ 100;\\n totalcid = Math round((totalcid-value)*100)/100;\\n temp = Math round((temp+value)*100)/100;\\n }\\n temp2 = Math round((temp2+temp)*100)/100;\\n if(temp == 0) {\\n arrpush([values[j][0],temp]);\\n    }\\n  }\\n  \\n  for(var k=8; k>=0; k--) {\\n    getchange(k, values[k][1]);\\n  }\\n\\n  if(temp2 < changetotal) {\\n    return \\\"Insufficient Funds\\\";\\n  }\\n  if(totalcid == 0) {\\n    return arr;\\n  } else {\\n    return \\\"Closed\\\";\\n  }\\n}\",\n    \"challengeType\": 5,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd1c\",\n    \"completedDate\": 1484354051397,\n    \"solution\": \"http://codepen io/moT01/pen/jyqrNr\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd1f\",\n    \"completedDate\": 1484776063352,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 62,
    "total_chunks": 74
  },
  {
    "id": "e75a3bdf6c4f8cd92a833f4b1b752239",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "round((cid[j][1]-value)*100)/ 100;\\n totalcid = Math round((totalcid-value)*100)/100;\\n temp = Math round((temp+value)*100)/100;\\n }\\n temp2 = Math round((temp2+temp)*100)/100;\\n if(temp == 0) {\\n arrpush([values[j][0],temp]);\\n }\\n }\\n \\n for(var k=8; k>=0; k--) {\\n getchange(k, values[k][1]);\\n }\\n\\n if(temp2 < changetotal) {\\n return \\\"Insufficient Funds\\\";\\n }\\n if(totalcid == 0) {\\n return arr;\\n } else {\\n return \\\"Closed\\\";\\n }\\n}\", \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1c\", \"completedDate\": 1484354051397, \"solution\": \"http://codepen io/moT01/pen/jyqrNr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1f\", \"completedDate\": 1484776063352, \"solution\": \"http://codepenio/moT01/pen/WRGERp\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd0f\",\n    \"completedDate\": 1485204463074,\n    \"solution\": \"http://codepen io/moT01/pen/PbrzQo\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eedfaeb5bd1c\",\n    \"completedDate\": 1485204700866,\n    \"solution\": \"http://codepen io/moT01/pen/egOKqO\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c442eddfaeb5bd17\",\n    \"completedDate\": 1485289601534,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 63,
    "total_chunks": 74
  },
  {
    "id": "ca4c350480343a1dd34c2cbebc7c186f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "}\\n if(totalcid == 0) {\\n return arr;\\n } else {\\n return \\\"Closed\\\";\\n }\\n}\", \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1c\", \"completedDate\": 1484354051397, \"solution\": \"http://codepen io/moT01/pen/jyqrNr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1f\", \"completedDate\": 1484776063352, \"solution\": \"http://codepenio/moT01/pen/WRGERp\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd0f\", \"completedDate\": 1485204463074, \"solution\": \"http://codepen io/moT01/pen/PbrzQo\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eedfaeb5bd1c\", \"completedDate\": 1485204700866, \"solution\": \"http://codepen io/moT01/pen/egOKqO\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd17\", \"completedDate\": 1485289601534, \"solution\": \"http://codepenio/moT01/pen/rWxJoa\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c242eddfaeb5bd13\",\n    \"completedDate\": 1485315439137,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 64,
    "total_chunks": 74
  },
  {
    "id": "6191d1c8d59fa91c843617428a1f3fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "}\\n}\", \"challengeType\": 5, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1c\", \"completedDate\": 1484354051397, \"solution\": \"http://codepen io/moT01/pen/jyqrNr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd1f\", \"completedDate\": 1484776063352, \"solution\": \"http://codepenio/moT01/pen/WRGERp\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd0f\", \"completedDate\": 1485204463074, \"solution\": \"http://codepen io/moT01/pen/PbrzQo\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eedfaeb5bd1c\", \"completedDate\": 1485204700866, \"solution\": \"http://codepen io/moT01/pen/egOKqO\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd17\", \"completedDate\": 1485289601534, \"solution\": \"http://codepenio/moT01/pen/rWxJoa\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c242eddfaeb5bd13\", \"completedDate\": 1485315439137, \"solution\": \"http://codepenio/moT01/pen/vgOaoJ\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"561add10cb82ac38a17513be\",\n    \"completedDate\": 1485316065499,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb6bdef\",\n    \"completedDate\": 1485467383567,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"cf1111c1c16feddfaeb7bdef\",\n    \"completedDate\": 1485467595207,\n    \"solution\": null,\n    \"challengeType\": 1,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7154d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488664622012,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 65,
    "total_chunks": 74
  },
  {
    "id": "c0da827eb83fd4b5a51e93c5c6af8cdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "1485204700866, \"solution\": \"http://codepen io/moT01/pen/egOKqO\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c442eddfaeb5bd17\", \"completedDate\": 1485289601534, \"solution\": \"http://codepenio/moT01/pen/rWxJoa\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7158d8c242eddfaeb5bd13\", \"completedDate\": 1485315439137, \"solution\": \"http://codepenio/moT01/pen/vgOaoJ\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"561add10cb82ac38a17513be\", \"completedDate\": 1485316065499, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb6bdef\", \"completedDate\": 1485467383567, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb7bdef\", \"completedDate\": 1485467595207, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7154d8c242eddfaeb5bd13\", \"completedDate\": 1488664622012, \"solution\": \"http://codepenio/moT01/pen/aJzJQg\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7155d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665107117,\n    \"solution\": \"http://codepen io/moT01/pen/ygwEaK\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7157d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665153261,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 66,
    "total_chunks": 74
  },
  {
    "id": "7f9e9a8a23af73b6e51f801164d04a47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "1485315439137, \"solution\": \"http://codepenio/moT01/pen/vgOaoJ\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"561add10cb82ac38a17513be\", \"completedDate\": 1485316065499, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb6bdef\", \"completedDate\": 1485467383567, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb7bdef\", \"completedDate\": 1485467595207, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7154d8c242eddfaeb5bd13\", \"completedDate\": 1488664622012, \"solution\": \"http://codepenio/moT01/pen/aJzJQg\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7155d8c242eddfaeb5bd13\", \"completedDate\": 1488665107117, \"solution\": \"http://codepen io/moT01/pen/ygwEaK\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7157d8c242eddfaeb5bd13\", \"completedDate\": 1488665153261, \"solution\": \"http://codepenio/moT01/pen/egrZzr\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7156d8c242eddfaeb5bd13\",\n    \"completedDate\": 1488665196848,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 67,
    "total_chunks": 74
  },
  {
    "id": "95404d54ab707be32578f58dc65215e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "1485316065499, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb6bdef\", \"completedDate\": 1485467383567, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"cf1111c1c16feddfaeb7bdef\", \"completedDate\": 1485467595207, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7154d8c242eddfaeb5bd13\", \"completedDate\": 1488664622012, \"solution\": \"http://codepenio/moT01/pen/aJzJQg\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7155d8c242eddfaeb5bd13\", \"completedDate\": 1488665107117, \"solution\": \"http://codepen io/moT01/pen/ygwEaK\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7157d8c242eddfaeb5bd13\", \"completedDate\": 1488665153261, \"solution\": \"http://codepenio/moT01/pen/egrZzr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7156d8c242eddfaeb5bd13\", \"completedDate\": 1488665196848, \"solution\": \"http://codepenio/moT01/pen/ggBEWY\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"58d9cc820ce2197370032a13\",\n    \"completedDate\": 1490789539522,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7198d8c242eddfaeb5bd13\",\n    \"completedDate\": 1490790216213,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 68,
    "total_chunks": 74
  },
  {
    "id": "c3ba4a99b461668f018021b8d72a3484",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "1485467595207, \"solution\": null, \"challengeType\": 1, \"files\": [] }, { \"id\": \"bd7154d8c242eddfaeb5bd13\", \"completedDate\": 1488664622012, \"solution\": \"http://codepenio/moT01/pen/aJzJQg\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7155d8c242eddfaeb5bd13\", \"completedDate\": 1488665107117, \"solution\": \"http://codepen io/moT01/pen/ygwEaK\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7157d8c242eddfaeb5bd13\", \"completedDate\": 1488665153261, \"solution\": \"http://codepenio/moT01/pen/egrZzr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7156d8c242eddfaeb5bd13\", \"completedDate\": 1488665196848, \"solution\": \"http://codepenio/moT01/pen/ggBEWY\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"58d9cc820ce2197370032a13\", \"completedDate\": 1490789539522, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7198d8c242eddfaeb5bd13\", \"completedDate\": 1490790216213, \"solution\": \"http://codepenio/moT01/pen/EWmYPq\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7108d8c242eddfaeb5bd13\",\n    \"completedDate\": 1491529027827,\n    \"solution\": \"http://codepen io/moT01/full/dvEgav/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c242eddfaeb5bd13\",\n    \"completedDate\": 1491530360535,\n    \"solution\": \"http://codepen",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 69,
    "total_chunks": 74
  },
  {
    "id": "7642e5bcf70a3bbeb88a3d7d485fa75c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"solution\": \"http://codepen io/moT01/pen/ygwEaK\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7157d8c242eddfaeb5bd13\", \"completedDate\": 1488665153261, \"solution\": \"http://codepenio/moT01/pen/egrZzr\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7156d8c242eddfaeb5bd13\", \"completedDate\": 1488665196848, \"solution\": \"http://codepenio/moT01/pen/ggBEWY\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"58d9cc820ce2197370032a13\", \"completedDate\": 1490789539522, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7198d8c242eddfaeb5bd13\", \"completedDate\": 1490790216213, \"solution\": \"http://codepenio/moT01/pen/EWmYPq\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7108d8c242eddfaeb5bd13\", \"completedDate\": 1491529027827, \"solution\": \"http://codepen io/moT01/full/dvEgav/\", \"challengeType\": 3, \"files\": [] }, { \"id\": \"bd7153d8c242eddfaeb5bd13\", \"completedDate\": 1491530360535, \"solution\": \"http://codepenio/moT01/full/OpOOxg/\",\n    \"challengeType\": 3,\n    \"files\": []\n  },\n  {\n    \"id\": \"561add10cb82ac38a17513b3\",\n    \"completedDate\": 1491530482152,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7353d8c341eddeaeb5bd0f\",\n    \"completedDate\": 1496195906794,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c441eddfaeb5bd0f\",\n    \"completedDate\": 1496235235066,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c441eddfaeb5bdff\",\n    \"completedDate\": 1496603882718,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c441eddfaeb5bdfe\",\n    \"completedDate\": 1496603911653,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c441eddfaeb5bdfd\",\n    \"completedDate\": 1496603991361,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7153d8c441eddfaeb5bd1f\",\n    \"completedDate\": 1496752318061,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7243d8c341eddeaeb5bd0f\",\n    \"completedDate\": 1497409186851,\n    \"solution\": null,\n    \"challengeType\": 2,\n    \"files\": []\n  },\n  {\n    \"id\": \"576d6e1b12fd92c4207a9cbd\",\n    \"completedDate\": 1497411084548,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443edefaeb5bdee\",\n    \"completedDate\": 1500083078110,\n    \"solution\": \"https://web-searcher",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 929,
    "chunk_index": 70,
    "total_chunks": 74
  },
  {
    "id": "d0d8fced18e18a7f4f99b3fc4fea812a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"completedDate\": 1496603882718, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"bd7153d8c441eddfaeb5bdfe\", \"completedDate\": 1496603911653, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"bd7153d8c441eddfaeb5bdfd\", \"completedDate\": 1496603991361, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"bd7153d8c441eddfaeb5bd1f\", \"completedDate\": 1496752318061, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"bd7243d8c341eddeaeb5bd0f\", \"completedDate\": 1497409186851, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"576d6e1b12fd92c4207a9cbd\", \"completedDate\": 1497411084548, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdee\", \"completedDate\": 1500083078110, \"solution\": \"https://web-searcherglitch me/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bcef\",\n    \"completedDate\": 1500911842686,\n    \"solution\": null,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bdef\",\n    \"completedDate\": 1503596314310,\n    \"solution\": \"https://vote-app glitch me/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bd0e\",\n    \"completedDate\": 1504564623846,\n    \"solution\": \"http://mystocks glitch",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 71,
    "total_chunks": 74
  },
  {
    "id": "0e1082202ce7044208ace5489c33a55a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "\"challengeType\": 2, \"files\": [] }, { \"id\": \"bd7243d8c341eddeaeb5bd0f\", \"completedDate\": 1497409186851, \"solution\": null, \"challengeType\": 2, \"files\": [] }, { \"id\": \"576d6e1b12fd92c4207a9cbd\", \"completedDate\": 1497411084548, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7158d8c443edefaeb5bdee\", \"completedDate\": 1500083078110, \"solution\": \"https://web-searcherglitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bcef\", \"completedDate\": 1500911842686, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bdef\", \"completedDate\": 1503596314310, \"solution\": \"https://vote-app glitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bd0e\", \"completedDate\": 1504564623846, \"solution\": \"http://mystocks glitchme/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bdff\",\n    \"completedDate\": 1509469714079,\n    \"solution\": \"https://yoyo44 herokuapp com/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"bd7158d8c443eddfaeb5bd0f\",\n    \"completedDate\": 1513966678577,\n    \"solution\": \"https://book-fcc herokuapp",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 72,
    "total_chunks": 74
  },
  {
    "id": "0d062b5acb9b8f7b57dc543c58a8b6e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
    "source_type": "git_repo",
    "title": "completed-challenges",
    "content": "[] }, { \"id\": \"bd7158d8c443edefaeb5bdee\", \"completedDate\": 1500083078110, \"solution\": \"https://web-searcherglitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bcef\", \"completedDate\": 1500911842686, \"solution\": null, \"challengeType\": 7, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bdef\", \"completedDate\": 1503596314310, \"solution\": \"https://vote-app glitch me/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bd0e\", \"completedDate\": 1504564623846, \"solution\": \"http://mystocks glitchme/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bdff\", \"completedDate\": 1509469714079, \"solution\": \"https://yoyo44 herokuapp com/\", \"challengeType\": 4, \"files\": [] }, { \"id\": \"bd7158d8c443eddfaeb5bd0f\", \"completedDate\": 1513966678577, \"solution\": \"https://book-fcc herokuappcom/\",\n    \"challengeType\": 4,\n    \"files\": []\n  },\n  {\n    \"id\": \"561abd10cb81ac38a17513bc\",\n    \"completedDate\": 1528930836376,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"561acd10cb82ac38a17513bc\",\n    \"completedDate\": 1532961178690,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"561add10cb82ac38a17513bc\",\n    \"completedDate\": 1533273784477,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"561add10cb82ac38a17523bc\",\n    \"completedDate\": 1533833480936,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"5a553ca864b52e1d8bceea14\",\n    \"completedDate\": 1537145017407,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"561add10cb82ac38a17213bc\",\n    \"completedDate\": 1538239301985,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"602da04c22201c65d2a019f4\",\n    \"completedDate\": 1642566694752,\n    \"files\": []\n  },\n  {\n    \"id\": \"602d9ff222201c65d2a019f2\",\n    \"completedDate\": 1642566450182,\n    \"files\": []\n  },\n  {\n    \"id\": \"5fa323cdaf6a73463d590659\",\n    \"completedDate\": 1642566442917,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f32db63eb37f7e17323f459\",\n    \"completedDate\": 1642566429622,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f87ac112ae598023a42df1a\",\n    \"completedDate\": 1642566416673,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f5b969a05380d2179fe6e18\",\n    \"completedDate\": 1642566406680,\n    \"files\": []\n  },\n  {\n    \"id\": \"602da0de22201c65d2a019f6\",\n    \"completedDate\": 1642566390464,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f9771307d4d22b9d2b75a94\",\n    \"completedDate\": 1642566369992,\n    \"files\": []\n  },\n  {\n    \"id\": \"618590adb0730ca724e37672\",\n    \"completedDate\": 1642566358706,\n    \"files\": []\n  },\n  {\n    \"id\": \"602da0c222201c65d2a019f5\",\n    \"completedDate\": 1642566353635,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f5904ac738bc2fa9efecf5a\",\n    \"completedDate\": 1642566336874,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f1a4ef5d5d6b5ab580fc6ae\",\n    \"completedDate\": 1642566305566,\n    \"files\": []\n  },\n  {\n    \"id\": \"5f2c289f164c29556da632fd\",\n    \"completedDate\": 1642566297762,\n    \"files\": []\n  },\n  {\n    \"id\": \"5ea8adfab628f68d805bfc5e\",\n    \"completedDate\": 1642566255203,\n    \"files\": []\n  },\n  {\n    \"id\": \"606243f50267e718b1e755f4\",\n    \"completedDate\": 1642615978255,\n    \"challengeType\": 7,\n    \"files\": []\n  },\n  {\n    \"id\": \"6145f685797bd30df9784e8c\",\n    \"completedDate\": 1668803655086,\n    \"files\": []\n  }\n]",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 142205,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\__mocks__\\completed-challenges.json",
      "source_type": "git_repo"
    },
    "token_count": 1272,
    "chunk_index": 73,
    "total_chunks": 74
  },
  {
    "id": "e8c280fae3395d2ec70d1667e37e3d8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.css",
    "source_type": "git_repo",
    "title": "xterm",
    "content": ".xterm-screen {\n  height: 100vh !important;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 46,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.css",
      "source_type": "git_repo"
    },
    "token_count": 14,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "92f2d8837241c7227b9e7f9ed312475d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
    "source_type": "git_repo",
    "title": "xterm",
    "content": "import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport type { IDisposable, Terminal } from 'xterm';\nimport type { FitAddon } from 'xterm-addon-fit';\nimport { useTranslation } from 'react-i18next';\n\nimport { registerTerminal } from '../utils/python-worker-handler';\nimport './xterm.css';\n\nconst registerServiceWorker = async () => {\n  if ('serviceWorker' in navigator) {\n    try {\n      await navigator.serviceWorker.register('/python-input-sw.js');\n    } catch (error) {\n      console.error(`Registration failed`);\n      console.error(error);\n    }\n  }\n};\n\nexport const XtermTerminal = ({\n  xtermFitRef,\n  dimensions\n}: {\n  xtermFitRef: MutableRefObject<FitAddon | null>;\n  dimensions?: { height: number; width: number };\n}) => {\n  const termContainerRef = useRef<HTMLDivElement | null>(null);\n  const { t } = useTranslation();\n\nuseEffect(() => {\n    void registerServiceWorker();\n\nlet term: Terminal | null;\n\nasync function createTerminal() {\n      const disposables: IDisposable[] = [];\n      const { Terminal } = await import('xterm');\n      const { FitAddon } = await import('xterm-addon-fit');\n\n// Setting convertEol so that \\n is converted to \\r\\n. Otherwise the terminal\n      // will interpret \\n as line feed and just move the cursor to the next line.\n      // convertEol makes every \\n a \\r\\n.\n      term = new Terminal({ convertEol: true });\n      const fitAddon = new FitAddon();\n      xtermFitRef.current = fitAddon;\n      term.loadAddon(fitAddon);\n      if (termContainerRef.current) term.open(termContainerRef.current);\n      fitAddon.fit();\n\n// xterm does provide a11y support via the `screenReaderMode` option.\n      // However, the mode only works best if the user interacts with the terminal directly.\n      // Since we feed the content to xterm, it's better to control the output a11y ourselves.\n      const termContainerDiv =\n        termContainerRef.current?.querySelector('.xterm');\n      const outputForScreenReader = document.createElement('div');",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5248,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6cea2a9c5343b69e06672a16ddc2bc96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
    "source_type": "git_repo",
    "title": "xterm",
    "content": "// convertEol makes every \\n a \\r\\n. term = new Terminal({ convertEol: true }); const fitAddon = new FitAddon(); xtermFitRef.current = fitAddon; term.loadAddon(fitAddon); if (termContainerRef.current) term.open(termContainerRef.current); fitAddon.fit(); // xterm does provide a11y support via the `screenReaderMode` option. // However, the mode only works best if the user interacts with the terminal directly. // Since we feed the content to xterm, it's better to control the output a11y ourselves. const termContainerDiv = termContainerRef.current?.querySelector('.xterm'); const outputForScreenReader = document.createElement('div');\n\noutputForScreenReader.setAttribute('role', 'region');\n      outputForScreenReader.setAttribute(\n        'aria-label',\n        t('aria.terminal-output')\n      );\n      outputForScreenReader.classList.add('sr-only');\n      termContainerDiv?.appendChild(outputForScreenReader);\n\nconst print = (text?: string) => {\n        term?.writeln(`${text ?? ''}`);\n        outputForScreenReader.textContent = text ?? '';\n      };\n\n// TODO: prevent user from moving cursor outside the current input line and\n      // handle insertion and deletion properly. While backspace and delete don't\n      // seem to work, we can use \"\\x1b[0K\" to clear from the cursor to the end.\n      // Also, we should not add special characters to the userinput string.\n      const input = (text?: string) => {\n        print(text);\n        let userinput = '';\n        // Eslint is correct that this only gets assigned once, but we can't use\n        // const because the declaration (before keyListener is defined) and\n        // assignment (after keyListener is defined) must be separate.\n        // eslint-disable-next-line prefer-const\n        let disposable: IDisposable | undefined;\n\nconst done = () => {\n          disposable?.dispose();\n          navigator.serviceWorker.controller?.postMessage(\n            JSON.stringify({\n              type: 'msg',\n              value: userinput\n            })\n          );\n        };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5248,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "bf83af9cf6310d24a75a126957e88980",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
    "source_type": "git_repo",
    "title": "xterm",
    "content": "add special characters to the userinput string. const input = (text?: string) => { print(text); let userinput = ''; // Eslint is correct that this only gets assigned once, but we can't use // const because the declaration (before keyListener is defined) and // assignment (after keyListener is defined) must be separate. // eslint-disable-next-line prefer-const let disposable: IDisposable | undefined; const done = () => { disposable?.dispose(); navigator.serviceWorker.controller?.postMessage( JSON.stringify({ type: 'msg', value: userinput }) ); };\n\nconst keyListener = (key: string) => {\n          if (key === '\\u007F' || key === '\\b') {\n            // Backspace or delete key\n            term?.write('\\b \\b'); // Move cursor back, replace character with space, then move cursor back again\n            userinput = userinput.slice(0, -1); // Remove the last character from userinput\n          }\n          if (key == '\\r') {\n            term?.write('\\r\\n');\n            done();\n          } else {\n            userinput += key;\n            term?.write(key);\n          }\n        };\n\ndisposable = term?.onData(keyListener); // Listen for key events and store the disposable\n        if (disposable) disposables.push(disposable);\n      };\n      const reset = () => {\n        // Ironically, term.reset(), while synchronous, is not a reliable way to\n        // reset the terminal. It does not clear the input buffer, so old print\n        // statements can still appear. The \\x1bc (ESC c) escape sequence triggers\n        // a full terminal reset, which is what we want.\n        term?.write('\\x1bc');\n        disposables.forEach(disposable => disposable.dispose());\n        disposables.length = 0;\n\noutputForScreenReader.textContent = '';\n      };\n      registerTerminal({ print, input, reset });\n    }\n\nvoid createTerminal();\n\nreturn () => {\n      term?.dispose();\n    };\n  }, [xtermFitRef, t]);\n\nuseEffect(() => {\n    if (xtermFitRef.current) xtermFitRef.current.fit();\n\n// dimensions is an implicit dependency, since it's not directly used by the\n    // effect, but fitAddon.fit() needs to be called whenever the container size\n    // changes.\n  }, [xtermFitRef, dimensions]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5248,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0af46706c4ecadba70c0707019032318",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
    "source_type": "git_repo",
    "title": "xterm",
    "content": "sequence triggers // a full terminal reset, which is what we want. term?.write('\\x1bc'); disposables.forEach(disposable => disposable.dispose()); disposables.length = 0; outputForScreenReader.textContent = ''; }; registerTerminal({ print, input, reset }); } void createTerminal(); return () => { term?.dispose(); }; }, [xtermFitRef, t]); useEffect(() => { if (xtermFitRef.current) xtermFitRef.current.fit(); // dimensions is an implicit dependency, since it's not directly used by the // effect, but fitAddon.fit() needs to be called whenever the container size // changes. }, [xtermFitRef, dimensions]);\n\nreturn (\n    <div style={{ height: dimensions?.height }} ref={termContainerRef}>\n      <link rel='stylesheet' href='/js/xterm.css' />\n    </div>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5248,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\xterm.tsx",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f2241fb509bc5a9dd147a7d935d06380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\codeally.css",
    "source_type": "git_repo",
    "title": "codeally",
    "content": "button[aria-described-by='codeally-cookie-warning'] {\n  font-size: 1.1rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 77,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\codeally.css",
      "source_type": "git_repo"
    },
    "token_count": 23,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5ed430b22b34cb184bbf09717ed77cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-continue-alert.tsx",
    "source_type": "git_repo",
    "title": "rdb-gitpod-continue-alert",
    "content": "import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { Alert, Spacer } from '@freecodecamp/ui';\n\ninterface RdbGitpodContinueAlertProps {\n  course: string;\n}\n\nfunction RdbGitpodContinueAlert({\n  course\n}: RdbGitpodContinueAlertProps): JSX.Element {\n  return (\n    <Alert variant='info'>\n      <Trans values={{ course }} i18nKey='learn.gitpod.continue-project'>\n        <a\n          href='https://gitpod.io/workspaces'\n          rel='noopener noreferrer'\n          target='_blank'\n        >\n          placeholder\n        </a>\n      </Trans>\n      <Spacer size='m' />\n      <Trans i18nKey='learn.gitpod.learn-more'>\n        <a\n          href='https://forum.freecodecamp.org/t/using-gitpod-in-the-curriculum/668669'\n          rel='noopener noreferrer'\n          target='_blank'\n        >\n          placeholder\n        </a>\n      </Trans>\n    </Alert>\n  );\n}\n\nRdbGitpodContinueAlert.displayName = 'RdbGitpodContinueAlert';\n\nexport default RdbGitpodContinueAlert;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 978,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-continue-alert.tsx",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6245de3ca8a50c0b9e3fdc21e95408b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql } from 'gatsby';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { HandlerProps } from 'react-reflex';\nimport { useMediaQuery } from 'react-responsive';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport store from 'store';\nimport { editor } from 'monaco-editor';\nimport type { FitAddon } from 'xterm-addon-fit';\n\nimport { useFeature } from '@growthbook/growthbook-react';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 16
  },
  {
    "id": "54602f1c1cb26e7e51828a0a293d6c49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "from 'react'; import Helmet from 'react-helmet'; import { useTranslation } from 'react-i18next'; import { connect } from 'react-redux'; import { HandlerProps } from 'react-reflex'; import { useMediaQuery } from 'react-responsive'; import { bindActionCreators, Dispatch } from 'redux'; import store from 'store'; import { editor } from 'monaco-editor'; import type { FitAddon } from 'xterm-addon-fit'; import { useFeature } from '@growthbook/growthbook-react'; import { challengeTypes } from '../../../../../shared/config/challenge-types'; import LearnLayout from '../../../components/layouts/learn'; import { MAX_MOBILE_WIDTH } from '../../../../config/misc';\n\nimport type {\n  ChallengeFiles,\n  ChallengeMeta,\n  ChallengeNode,\n  Hooks,\n  DailyCodingChallengeLanguages,\n  DailyCodingChallengeNode,\n  DailyCodingChallengePageContext,\n  PageContext,\n  ResizeProps,\n  SavedChallenge,\n  SavedChallengeFiles,\n  Test\n} from '../../../redux/prop-types';\nimport { isContained } from '../../../utils/is-contained';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport ResetModal from '../components/reset-modal';\nimport ChallengeTitle from '../components/challenge-title';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport ShortcutsModal from '../components/shortcuts-modal';\nimport Output from '../components/output';\nimport Preview, { type PreviewProps } from '../components/preview';\nimport ProjectPreviewModal from '../components/project-preview-modal';\nimport SidePanel from '../components/side-panel';\nimport VideoModal from '../components/video-modal';\nimport {\n  cancelTests,\n  challengeMounted,\n  createFiles,\n  executeChallenge,\n  initConsole,\n  initTests,\n  initHooks,\n  initVisibleEditors,\n  previewMounted,\n  updateChallengeMeta,\n  openModal,\n  setEditorFocusability,\n  setIsAdvancing\n} from '../redux/actions';\nimport {\n  challengeFilesSelector,\n  consoleOutputSelector,\n  isChallengeCompletedSelector\n} from '../redux/selectors';\nimport { savedChallengesSelector } from '../../../redux/selectors';\nimport { getGuideUrl } from '../utils';\nimport { preloadPage } from '../../../../utils/gatsby/page-loading';\nimport envData from '../../../../config/env.json';\nimport ToolPanel from '../components/tool-panel';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport { challengeHasPreview, isJavaScriptChallenge } from '../utils/build';\nimport { XtermTerminal } from './xterm';\nimport MultifileEditor from './multifile-editor';\nimport DesktopLayout from './desktop-layout';\nimport MobileLayout from './mobile-layout';\nimport { mergeChallengeFiles } from './saved-challenges';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 1,
    "total_chunks": 16
  },
  {
    "id": "3b33de6779e3f81aed4f531e8bf36e66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "setEditorFocusability, setIsAdvancing } from '../redux/actions'; import { challengeFilesSelector, consoleOutputSelector, isChallengeCompletedSelector } from '../redux/selectors'; import { savedChallengesSelector } from '../../../redux/selectors'; import { getGuideUrl } from '../utils'; import { preloadPage } from '../../../../utils/gatsby/page-loading'; import envData from '../../../../config/env.json'; import ToolPanel from '../components/tool-panel'; import { getChallengePaths } from '../utils/challenge-paths'; import { challengeHasPreview, isJavaScriptChallenge } from '../utils/build'; import { XtermTerminal } from './xterm'; import MultifileEditor from './multifile-editor'; import DesktopLayout from './desktop-layout'; import MobileLayout from './mobile-layout'; import { mergeChallengeFiles } from './saved-challenges';\n\nimport './classic.css';\nimport '../components/test-frame.css';\n\nconst mapStateToProps = (state: unknown) => ({\n  challengeFiles: challengeFilesSelector(state) as ChallengeFiles,\n  output: consoleOutputSelector(state) as string,\n  isChallengeCompleted: isChallengeCompletedSelector(state),\n  savedChallenges: savedChallengesSelector(state) as SavedChallenge[]\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      createFiles,\n      initConsole,\n      initTests,\n      initHooks,\n      initVisibleEditors,\n      updateChallengeMeta,\n      challengeMounted,\n      executeChallenge,\n      cancelTests,\n      previewMounted,\n      openModal,\n      setEditorFocusability,\n      setIsAdvancing\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 2,
    "total_chunks": 16
  },
  {
    "id": "8cdcebf0e9bca9788b3c9a2f34104472",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "from '../utils/build'; import { XtermTerminal } from './xterm'; import MultifileEditor from './multifile-editor'; import DesktopLayout from './desktop-layout'; import MobileLayout from './mobile-layout'; import { mergeChallengeFiles } from './saved-challenges'; import './classic.css'; import '../components/test-frame.css'; const mapStateToProps = (state: unknown) => ({ challengeFiles: challengeFilesSelector(state) as ChallengeFiles, output: consoleOutputSelector(state) as string, isChallengeCompleted: isChallengeCompletedSelector(state), savedChallenges: savedChallengesSelector(state) as SavedChallenge[] }); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { createFiles, initConsole, initTests, initHooks, initVisibleEditors, updateChallengeMeta, challengeMounted, executeChallenge, cancelTests, previewMounted, openModal, setEditorFocusability, setIsAdvancing }, dispatch );\n\ninterface ShowClassicProps extends Pick<PreviewProps, 'previewMounted'> {\n  cancelTests: () => void;\n  challengeMounted: (arg0: string) => void;\n  createFiles: (arg0: ChallengeFiles | SavedChallengeFiles) => void;\n  dailyCodingChallengeLanguage: DailyCodingChallengeLanguages;\n  data: { challengeNode: ChallengeNode | DailyCodingChallengeNode };\n  executeChallenge: (options?: { showCompletionModal: boolean }) => void;\n  challengeFiles: ChallengeFiles;\n  initConsole: (arg0: string) => void;\n  initTests: (tests: Test[]) => void;\n  initHooks: (hooks?: Hooks) => void;\n  initVisibleEditors: () => void;\n  isChallengeCompleted: boolean;\n  isDailyCodingChallenge?: boolean;\n  output: string;\n  pageContext: PageContext | DailyCodingChallengePageContext;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  openModal: (modal: string) => void;\n  setDailyCodingChallengeLanguage: (\n    language: DailyCodingChallengeLanguages\n  ) => void;\n  setEditorFocusability: (canFocus: boolean) => void;\n  setIsAdvancing: (arg: boolean) => void;\n  savedChallenges: SavedChallenge[];\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 3,
    "total_chunks": 16
  },
  {
    "id": "3e22211d5bb20ddc96ef0eaddb1a631f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "data: { challengeNode: ChallengeNode | DailyCodingChallengeNode }; executeChallenge: (options?: { showCompletionModal: boolean }) => void; challengeFiles: ChallengeFiles; initConsole: (arg0: string) => void; initTests: (tests: Test[]) => void; initHooks: (hooks?: Hooks) => void; initVisibleEditors: () => void; isChallengeCompleted: boolean; isDailyCodingChallenge?: boolean; output: string; pageContext: PageContext | DailyCodingChallengePageContext; updateChallengeMeta: (arg0: ChallengeMeta) => void; openModal: (modal: string) => void; setDailyCodingChallengeLanguage: ( language: DailyCodingChallengeLanguages ) => void; setEditorFocusability: (canFocus: boolean) => void; setIsAdvancing: (arg: boolean) => void; savedChallenges: SavedChallenge[]; }\n\ninterface ReflexLayout {\n  codePane: { flex: number };\n  editorPane: { flex: number };\n  instructionPane: { flex: number };\n  notesPane: { flex: number };\n  previewPane: { flex: number };\n  testsPane: { flex: number };\n}\n\ninterface RenderEditorArgs {\n  isMobileLayout: boolean;\n  isUsingKeyboardInTablist: boolean;\n}\n\nconst REFLEX_LAYOUT = 'challenge-layout';\nconst BASE_LAYOUT = {\n  codePane: { flex: 1 },\n  editorPane: { flex: 1 },\n  instructionPane: { flex: 1 },\n  previewPane: { flex: 0.7 },\n  notesPane: { flex: 0.7 },\n  testsPane: { flex: 0.3 }\n};\n\n// Used to prevent monaco from stealing mouse/touch events on the upper jaw\n// content widget so they can trigger their default actions. (Issue #46166)\nconst handleContentWidgetEvents = (e: MouseEvent | TouchEvent): void => {\n  const target = e.target as HTMLElement;\n  if (target?.closest('.editor-upper-jaw')) {\n    e.stopPropagation();\n  }\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 4,
    "total_chunks": 16
  },
  {
    "id": "acfc3776fe1bf3c82a9c248fbb4c4f17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "flex: 1 }, editorPane: { flex: 1 }, instructionPane: { flex: 1 }, previewPane: { flex: 0.7 }, notesPane: { flex: 0.7 }, testsPane: { flex: 0.3 } }; // Used to prevent monaco from stealing mouse/touch events on the upper jaw // content widget so they can trigger their default actions. (Issue #46166) const handleContentWidgetEvents = (e: MouseEvent | TouchEvent): void => { const target = e.target as HTMLElement; if (target?.closest('.editor-upper-jaw')) { e.stopPropagation(); } };\n\nconst StepPreview = ({\n  dimensions,\n  disableIframe,\n  previewMounted,\n  challengeType,\n  xtermFitRef\n}: Pick<PreviewProps, 'disableIframe' | 'previewMounted'> & {\n  challengeType: number;\n  xtermFitRef: React.MutableRefObject<FitAddon | null>;\n  dimensions?: { width: number; height: number };\n}) => {\n  return challengeType === challengeTypes.python ||\n    challengeType === challengeTypes.multifilePythonCertProject ||\n    challengeType === challengeTypes.pyLab ||\n    challengeType === challengeTypes.dailyChallengePy ? (\n    <XtermTerminal dimensions={dimensions} xtermFitRef={xtermFitRef} />\n  ) : (\n    <Preview disableIframe={disableIframe} previewMounted={previewMounted} />\n  );\n};\n\n// The newline is important, because this text ends up in a `pre` element.\nconst defaultOutput = `\n/**\n* Your test output will go here\n*/`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 5,
    "total_chunks": 16
  },
  {
    "id": "3f6db2375622fe6d55d15dca0faaa712",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "& { challengeType: number; xtermFitRef: React.MutableRefObject<FitAddon | null>; dimensions?: { width: number; height: number }; }) => { return challengeType === challengeTypes.python || challengeType === challengeTypes.multifilePythonCertProject || challengeType === challengeTypes.pyLab || challengeType === challengeTypes.dailyChallengePy ? ( <XtermTerminal dimensions={dimensions} xtermFitRef={xtermFitRef} /> ) : ( <Preview disableIframe={disableIframe} previewMounted={previewMounted} /> ); }; // The newline is important, because this text ends up in a `pre` element. const defaultOutput = ` /** * Your test output will go here */`;\n\nfunction ShowClassic({\n  challengeFiles,\n  data: {\n    challengeNode: {\n      challenge: {\n        challengeFiles: seedChallengeFiles,\n        block,\n        demoType,\n        title,\n        description,\n        instructions,\n        hooks,\n        fields: { tests, blockName },\n        challengeType,\n        hasEditableBoundaries = false,\n        superBlock,\n        helpCategory,\n        forumTopicId,\n        usesMultifileEditor,\n        notes,\n        videoUrl,\n        translationPending\n      }\n    }\n  },\n  pageContext: {\n    challengeMeta,\n    challengeMeta: { isFirstStep, nextChallengePath },\n    projectPreview: { challengeData }\n  },\n  createFiles,\n  cancelTests,\n  challengeMounted,\n  initConsole,\n  initTests,\n  initHooks,\n  initVisibleEditors,\n  dailyCodingChallengeLanguage,\n  isDailyCodingChallenge = false,\n  setDailyCodingChallengeLanguage,\n  updateChallengeMeta,\n  openModal,\n  setIsAdvancing,\n  savedChallenges,\n  isChallengeCompleted,\n  output,\n  executeChallenge,\n  previewMounted\n}: ShowClassicProps) {\n  const { t } = useTranslation();\n  const [resizing, setResizing] = useState(false);\n  const [usingKeyboardInTablist, setUsingKeyboardInTablist] = useState(false);\n  const containerRef = useRef<HTMLElement>(null);\n  const editorRef = useRef<editor.IStandaloneCodeEditor>();\n  const instructionsPanelRef = useRef<HTMLDivElement>(null);\n  const xtermFitRef = useRef<FitAddon | null>(null);\n  const isMobile = useMediaQuery({\n    query: `(max-width: ${MAX_MOBILE_WIDTH}px)`\n  });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 6,
    "total_chunks": 16
  },
  {
    "id": "139396ab55fe4039410d07168eb011c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "challengeMeta, challengeMeta: { isFirstStep, nextChallengePath }, projectPreview: { challengeData } }, createFiles, cancelTests, challengeMounted, initConsole, initTests, initHooks, initVisibleEditors, dailyCodingChallengeLanguage, isDailyCodingChallenge = false, setDailyCodingChallengeLanguage, updateChallengeMeta, openModal, setIsAdvancing, savedChallenges, isChallengeCompleted, output, executeChallenge, previewMounted }: ShowClassicProps) { const { t } = useTranslation(); const [resizing, setResizing] = useState(false); const [usingKeyboardInTablist, setUsingKeyboardInTablist] = useState(false); const containerRef = useRef<HTMLElement>(null); const editorRef = useRef<editor.IStandaloneCodeEditor>(); const instructionsPanelRef = useRef<HTMLDivElement>(null); const xtermFitRef = useRef<FitAddon | null>(null); const isMobile = useMediaQuery({ query: `(max-width: ${MAX_MOBILE_WIDTH}px)` });\n\nconst guideUrl = getGuideUrl({ forumTopicId, title });\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )}: ${title}`;\n  const windowTitle = `${blockNameTitle} | freeCodeCamp.org`;\n  const openConsole = isJavaScriptChallenge({ challengeType });\n  const hasPreview = challengeHasPreview({ challengeType });\n  const getLayoutState = () => {\n    const reflexLayout = store.get(REFLEX_LAYOUT) as ReflexLayout | null;\n\n// Check that the layout values stored are valid (exist in base layout). If\n    // not valid, it will fallback to the base layout values and be set on next\n    // user resize.\n    const isValidLayout =\n      reflexLayout &&\n      isContained(Object.keys(BASE_LAYOUT), Object.keys(reflexLayout));\n\nif (!isValidLayout) store.remove(REFLEX_LAYOUT);\n\nreturn isValidLayout ? reflexLayout : BASE_LAYOUT;\n  };\n\nconst onPreviewResize = () => xtermFitRef.current?.fit();\n\n// layout: Holds the information of the panes sizes for desktop view\n  const [layout, setLayout] = useState(getLayoutState());\n\nconst onStopResize = (event: HandlerProps) => {\n    setResizing(false);\n    // 'name' is used to identify the Elements whose layout is stored.\n    const { name, flex } = event.component.props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 7,
    "total_chunks": 16
  },
  {
    "id": "942461f6aa89c2760617826d48044e05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "values and be set on next // user resize. const isValidLayout = reflexLayout && isContained(Object.keys(BASE_LAYOUT), Object.keys(reflexLayout)); if (!isValidLayout) store.remove(REFLEX_LAYOUT); return isValidLayout ? reflexLayout : BASE_LAYOUT; }; const onPreviewResize = () => xtermFitRef.current?.fit(); // layout: Holds the information of the panes sizes for desktop view const [layout, setLayout] = useState(getLayoutState()); const onStopResize = (event: HandlerProps) => { setResizing(false); // 'name' is used to identify the Elements whose layout is stored. const { name, flex } = event.component.props;\n\n// onStopResize can be called multiple times before the state changes, so\n    // we need an updater function to ensure all updates are applied.\n    setLayout(l => {\n      const newLayout = name ? { ...l, [name]: { flex } } : l;\n      store.set(REFLEX_LAYOUT, newLayout);\n      return newLayout;\n    });\n  };\n\nconst setHtmlHeight = () => {\n    const vh = String(window.innerHeight - 1);\n    document.documentElement.style.height = vh + 'px';\n  };\n  const onResize = () => {\n    setResizing(true);\n  };\n  const resizeProps: ResizeProps = {\n    onResize,\n    onStopResize\n  };\n\nconst updateUsingKeyboardInTablist = (\n    usingKeyboardInTablist: boolean\n  ): void => {\n    setUsingKeyboardInTablist(usingKeyboardInTablist);\n  };\n\n// AB testing Pre-fetch in the Spanish locale\n  const isPreFetchEnabled = useFeature('prefetch_ab_test').on;\n  const isIndependentLowerJawEnabled = useFeature('independent-lower-jaw').on;\n\n// Independent lower jaw is only enabled for the urriculum outline workshop\n  const showIndependentLowerJaw =\n    blockName === 'workshop-curriculum-outline' && isIndependentLowerJawEnabled;\n\nuseEffect(() => {\n    if (isPreFetchEnabled && envData.clientLocale === 'espanol') {\n      preloadPage(nextChallengePath);\n    }\n  }, [nextChallengePath, isPreFetchEnabled]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 8,
    "total_chunks": 16
  },
  {
    "id": "1aaab175a00785b63c42644ca3224f1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "() => { setResizing(true); }; const resizeProps: ResizeProps = { onResize, onStopResize }; const updateUsingKeyboardInTablist = ( usingKeyboardInTablist: boolean ): void => { setUsingKeyboardInTablist(usingKeyboardInTablist); }; // AB testing Pre-fetch in the Spanish locale const isPreFetchEnabled = useFeature('prefetch_ab_test').on; const isIndependentLowerJawEnabled = useFeature('independent-lower-jaw').on; // Independent lower jaw is only enabled for the urriculum outline workshop const showIndependentLowerJaw = blockName === 'workshop-curriculum-outline' && isIndependentLowerJawEnabled; useEffect(() => { if (isPreFetchEnabled && envData.clientLocale === 'espanol') { preloadPage(nextChallengePath); } }, [nextChallengePath, isPreFetchEnabled]);\n\nuseEffect(() => {\n    initializeComponent(title);\n    // Bug fix for the monaco content widget and touch devices/right mouse\n    // click. (Issue #46166)\n    document.addEventListener('mousedown', handleContentWidgetEvents, true);\n    document.addEventListener('contextmenu', handleContentWidgetEvents, true);\n    document.addEventListener('touchstart', handleContentWidgetEvents, true);\n    document.addEventListener('touchmove', handleContentWidgetEvents, true);\n    document.addEventListener('touchend', handleContentWidgetEvents, true);\n\nwindow.addEventListener('resize', setHtmlHeight);\n    setHtmlHeight();\n\nreturn () => {\n      createFiles([]);\n      cancelTests();\n      document.removeEventListener(\n        'mousedown',\n        handleContentWidgetEvents,\n        true\n      );\n      document.removeEventListener(\n        'contextmenu',\n        handleContentWidgetEvents,\n        true\n      );\n      document.removeEventListener(\n        'touchstart',\n        handleContentWidgetEvents,\n        true\n      );\n      document.removeEventListener(\n        'touchmove',\n        handleContentWidgetEvents,\n        true\n      );\n      document.removeEventListener('touchend', handleContentWidgetEvents, true);\n      window.removeEventListener('resize', setHtmlHeight);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dailyCodingChallengeLanguage]);\n\nconst initializeComponent = (title: string): void => {\n    initConsole('');\n\nconst savedChallenge = savedChallenges?.find(challenge => {\n      return challenge.id === challengeMeta.id;\n    });\n\ncreateFiles(\n      mergeChallengeFiles(seedChallengeFiles, savedChallenge?.challengeFiles)\n    );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 9,
    "total_chunks": 16
  },
  {
    "id": "658954fa2e48833cc0efec1401b76e6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "document.addEventListener('contextmenu', handleContentWidgetEvents, true); document.addEventListener('touchstart', handleContentWidgetEvents, true); document.addEventListener('touchmove', handleContentWidgetEvents, true); document.addEventListener('touchend', handleContentWidgetEvents, true); window.addEventListener('resize', setHtmlHeight); setHtmlHeight(); return () => { createFiles([]); cancelTests(); document.removeEventListener( 'mousedown', handleContentWidgetEvents, true ); document.removeEventListener( 'contextmenu', handleContentWidgetEvents, true ); document.removeEventListener( 'touchstart', handleContentWidgetEvents, true ); document.removeEventListener( 'touchmove', handleContentWidgetEvents, true ); document.removeEventListener('touchend', handleContentWidgetEvents, true); window.removeEventListener('resize', setHtmlHeight); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, [dailyCodingChallengeLanguage]); const initializeComponent = (title: string): void => { initConsole(''); const savedChallenge = savedChallenges?.find(challenge => { return challenge.id === challengeMeta.id; }); createFiles( mergeChallengeFiles(seedChallengeFiles, savedChallenge?.challengeFiles) );\n\ninitTests(tests);\n    initHooks(hooks);\n\ninitVisibleEditors();\n\n// Typically, this kind of preview only appears on the first step of a\n    // project and is shown (once) automatically. In contrast, labs are more\n    // freeform, so the preview is shown on demand.\n    if (demoType === 'onLoad') openModal('projectPreview');\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n\nupdateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    setIsAdvancing(false);\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 10,
    "total_chunks": 16
  },
  {
    "id": "11abd22b5702b67cfb234346af2dcda9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "initConsole(''); const savedChallenge = savedChallenges?.find(challenge => { return challenge.id === challengeMeta.id; }); createFiles( mergeChallengeFiles(seedChallengeFiles, savedChallenge?.challengeFiles) ); initTests(tests); initHooks(hooks); initVisibleEditors(); // Typically, this kind of preview only appears on the first step of a // project and is shown (once) automatically. In contrast, labs are more // freeform, so the preview is shown on demand. if (demoType === 'onLoad') openModal('projectPreview'); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); setIsAdvancing(false); };\n\nconst renderInstructionsPanel = ({\n    toolPanel,\n    hasDemo\n  }: {\n    toolPanel: React.ReactNode;\n    hasDemo: boolean;\n  }) => {\n    return (\n      <SidePanel\n        challengeDescription={\n          <ChallengeDescription\n            description={description}\n            instructions={instructions}\n            superBlock={superBlock}\n          />\n        }\n        challengeTitle={\n          <ChallengeTitle\n            isCompleted={isChallengeCompleted}\n            translationPending={translationPending}\n          >\n            {title}\n          </ChallengeTitle>\n        }\n        instructionsPanelRef={instructionsPanelRef}\n        toolPanel={toolPanel}\n        hasDemo={hasDemo}\n        showIndependentLowerJaw={showIndependentLowerJaw}\n      />\n    );\n  };\n\nconst renderEditor = ({\n    isMobileLayout,\n    isUsingKeyboardInTablist\n  }: RenderEditorArgs) => {\n    return (\n      challengeFiles && (\n        <MultifileEditor\n          challengeFiles={challengeFiles}\n          block={block}\n          superBlock={superBlock}\n          containerRef={containerRef}\n          description={description}\n          editorRef={editorRef}\n          initialTests={tests}\n          isMobileLayout={isMobileLayout}\n          isUsingKeyboardInTablist={isUsingKeyboardInTablist}\n          resizeProps={resizeProps}\n          title={title}\n          usesMultifileEditor={usesMultifileEditor}\n          showProjectPreview={demoType === 'onLoad'}\n          showIndependentLowerJaw={showIndependentLowerJaw}\n        />\n      )\n    );\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 11,
    "total_chunks": 16
  },
  {
    "id": "ffba4f3561431f676c1106070bb2939b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "const renderInstructionsPanel = ({ toolPanel, hasDemo }: { toolPanel: React.ReactNode; hasDemo: boolean; }) => { return ( <SidePanel challengeDescription={ <ChallengeDescription description={description} instructions={instructions} superBlock={superBlock} /> } challengeTitle={ <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> } instructionsPanelRef={instructionsPanelRef} toolPanel={toolPanel} hasDemo={hasDemo} showIndependentLowerJaw={showIndependentLowerJaw} /> ); }; const renderEditor = ({ isMobileLayout, isUsingKeyboardInTablist }: RenderEditorArgs) => { return ( challengeFiles && ( <MultifileEditor challengeFiles={challengeFiles} block={block} superBlock={superBlock} containerRef={containerRef} description={description} editorRef={editorRef} initialTests={tests} isMobileLayout={isMobileLayout} isUsingKeyboardInTablist={isUsingKeyboardInTablist} resizeProps={resizeProps} title={title} usesMultifileEditor={usesMultifileEditor} showProjectPreview={demoType === 'onLoad'} showIndependentLowerJaw={showIndependentLowerJaw} /> ) ); };return (\n    <Hotkeys\n      challengeType={challengeType}\n      executeChallenge={executeChallenge}\n      containerRef={containerRef}\n      instructionsPanelRef={instructionsPanelRef}\n      usesMultifileEditor={usesMultifileEditor}\n      editorRef={editorRef}\n    >\n      <LearnLayout hasEditableBoundaries={hasEditableBoundaries}>\n        <Helmet title={windowTitle} />\n        {isMobile && (\n          <MobileLayout\n            editor={renderEditor({\n              isMobileLayout: true,\n              isUsingKeyboardInTablist: usingKeyboardInTablist\n            })}\n            hasEditableBoundaries={hasEditableBoundaries}\n            hasPreview={hasPreview}\n            instructions={renderInstructionsPanel({\n              toolPanel: null,\n              hasDemo: demoType === 'onClick'\n            })}\n            notes={notes}\n            onPreviewResize={onPreviewResize}\n            preview={\n              <StepPreview\n                challengeType={challengeType}\n                disableIframe={resizing}\n                previewMounted={previewMounted}\n                xtermFitRef={xtermFitRef}\n              />\n            }\n            windowTitle={windowTitle}\n            testOutput={\n              <Output defaultOutput={defaultOutput} output={output} />\n            }\n            toolPanel={\n              <ToolPanel guideUrl={guideUrl} isMobile videoUrl={videoUrl} />\n            }\n            updateUsingKeyboardInTablist={updateUsingKeyboardInTablist}\n            usesMultifileEditor={usesMultifileEditor}\n          />\n        )}\n        {",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 12,
    "total_chunks": 16
  },
  {
    "id": "b54550233882a9a370b6b08f8a3263fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "isMobileLayout={isMobileLayout} isUsingKeyboardInTablist={isUsingKeyboardInTablist} resizeProps={resizeProps} title={title} usesMultifileEditor={usesMultifileEditor} showProjectPreview={demoType === 'onLoad'} showIndependentLowerJaw={showIndependentLowerJaw} /> ) ); };return ( <Hotkeys challengeType={challengeType} executeChallenge={executeChallenge} containerRef={containerRef} instructionsPanelRef={instructionsPanelRef} usesMultifileEditor={usesMultifileEditor} editorRef={editorRef} > <LearnLayout hasEditableBoundaries={hasEditableBoundaries}> <Helmet title={windowTitle} /> {isMobile && ( <MobileLayout editor={renderEditor({ isMobileLayout: true, isUsingKeyboardInTablist: usingKeyboardInTablist })} hasEditableBoundaries={hasEditableBoundaries} hasPreview={hasPreview} instructions={renderInstructionsPanel({ toolPanel: null, hasDemo: demoType === 'onClick' })} notes={notes} onPreviewResize={onPreviewResize} preview={ <StepPreview challengeType={challengeType} disableIframe={resizing} previewMounted={previewMounted} xtermFitRef={xtermFitRef} /> } windowTitle={windowTitle} testOutput={ <Output defaultOutput={defaultOutput} output={output} /> } toolPanel={ <ToolPanel guideUrl={guideUrl} isMobile videoUrl={videoUrl} /> } updateUsingKeyboardInTablist={updateUsingKeyboardInTablist} usesMultifileEditor={usesMultifileEditor} /> )} {isMobile && (\n          <DesktopLayout\n            challengeFiles={challengeFiles}\n            challengeType={challengeType}\n            editor={renderEditor({\n              isMobileLayout: false,\n              isUsingKeyboardInTablist: usingKeyboardInTablist\n            })}\n            hasEditableBoundaries={hasEditableBoundaries}\n            hasPreview={hasPreview}\n            instructions={renderInstructionsPanel({\n              toolPanel: <ToolPanel guideUrl={guideUrl} videoUrl={videoUrl} />,\n              hasDemo: demoType === 'onClick'\n            })}\n            isDailyCodingChallenge={isDailyCodingChallenge}\n            dailyCodingChallengeLanguage={dailyCodingChallengeLanguage}\n            setDailyCodingChallengeLanguage={setDailyCodingChallengeLanguage}\n            isFirstStep={isFirstStep}\n            layoutState={layout}\n            notes={notes}\n            onPreviewResize={onPreviewResize}\n            preview={\n              <StepPreview\n                challengeType={challengeType}\n                disableIframe={resizing}\n                previewMounted={previewMounted}\n                xtermFitRef={xtermFitRef}\n              />\n            }\n            resizeProps={resizeProps}\n            testOutput={\n              <Output defaultOutput={defaultOutput} output={output} />\n            }\n            windowTitle={windowTitle}\n            startWithConsoleShown={openConsole}\n            showIndependentLowerJaw={showIndependentLowerJaw}\n          />\n        )}\n        <CompletionModal />\n        <HelpModal\n          challengeTitle={title}\n          challengeBlock={blockName}\n          superBlock={superBlock}\n        />\n        <VideoModal videoUrl={videoUrl} />\n        <ResetModal challengeType={challengeType} challengeTitle={title} />\n        <ProjectPreviewModal\n          challengeData={challengeData}\n          closeText={t('buttons",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 690,
    "chunk_index": 13,
    "total_chunks": 16
  },
  {
    "id": "341d4881b18bb39316bca07d29bf23b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "videoUrl={videoUrl} /> } updateUsingKeyboardInTablist={updateUsingKeyboardInTablist} usesMultifileEditor={usesMultifileEditor} /> )} {isMobile && ( <DesktopLayout challengeFiles={challengeFiles} challengeType={challengeType} editor={renderEditor({ isMobileLayout: false, isUsingKeyboardInTablist: usingKeyboardInTablist })} hasEditableBoundaries={hasEditableBoundaries} hasPreview={hasPreview} instructions={renderInstructionsPanel({ toolPanel: <ToolPanel guideUrl={guideUrl} videoUrl={videoUrl} />, hasDemo: demoType === 'onClick' })} isDailyCodingChallenge={isDailyCodingChallenge} dailyCodingChallengeLanguage={dailyCodingChallengeLanguage} setDailyCodingChallengeLanguage={setDailyCodingChallengeLanguage} isFirstStep={isFirstStep} layoutState={layout} notes={notes} onPreviewResize={onPreviewResize} preview={ <StepPreview challengeType={challengeType} disableIframe={resizing} previewMounted={previewMounted} xtermFitRef={xtermFitRef} /> } resizeProps={resizeProps} testOutput={ <Output defaultOutput={defaultOutput} output={output} /> } windowTitle={windowTitle} startWithConsoleShown={openConsole} showIndependentLowerJaw={showIndependentLowerJaw} /> )} <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> <VideoModal videoUrl={videoUrl} /> <ResetModal challengeType={challengeType} challengeTitle={title} /> <ProjectPreviewModal challengeData={challengeData} closeText={t('buttonsstart-coding')}\n          previewTitle={\n            demoType === 'onClick' t('learn demo-project-title')\n              : t('learn project-preview-title')\n          }\n        />\n        <ShortcutsModal />\n      </LearnLayout>\n    </Hotkeys>\n  );\n}\n\nShowClassic.displayName = 'ShowClassic';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowClassic);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 14,
    "total_chunks": 16
  },
  {
    "id": "12093b4700905a645c369546fefd3280",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "guideUrl={guideUrl} videoUrl={videoUrl} />, hasDemo: demoType === 'onClick' })} isDailyCodingChallenge={isDailyCodingChallenge} dailyCodingChallengeLanguage={dailyCodingChallengeLanguage} setDailyCodingChallengeLanguage={setDailyCodingChallengeLanguage} isFirstStep={isFirstStep} layoutState={layout} notes={notes} onPreviewResize={onPreviewResize} preview={ <StepPreview challengeType={challengeType} disableIframe={resizing} previewMounted={previewMounted} xtermFitRef={xtermFitRef} /> } resizeProps={resizeProps} testOutput={ <Output defaultOutput={defaultOutput} output={output} /> } windowTitle={windowTitle} startWithConsoleShown={openConsole} showIndependentLowerJaw={showIndependentLowerJaw} /> )} <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> <VideoModal videoUrl={videoUrl} /> <ResetModal challengeType={challengeType} challengeTitle={title} /> <ProjectPreviewModal challengeData={challengeData} closeText={t('buttonsstart-coding')} previewTitle={ demoType === 'onClick' t('learn demo-project-title') : t('learn project-preview-title') } /> <ShortcutsModal /> </LearnLayout> </Hotkeys> ); } ShowClassic.displayName = 'ShowClassic'; export default connect(mapStateToProps, mapDispatchToProps)(ShowClassic);\n\nexport const query = graphql`\n  query ClassicChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        block\n        demoType\n        title\n        description\n        id\n        hasEditableBoundaries\n        instructions\n        notes\n        challengeType\n        helpCategory\n        videoUrl\n        superBlock\n        translationPending\n        forumTopicId\n        hooks {\n          beforeAll\n          beforeEach\n          afterEach\n        }\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n        required {\n          link\n          src\n        }\n        usesMultifileEditor\n        challengeFiles {\n          fileKey\n          ext\n          name\n          contents\n          head\n          tail\n          editableRegionBoundaries\n          history\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 19026,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\classic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 15,
    "total_chunks": 16
  },
  {
    "id": "46e86ae5c814290c852fae4e16e979a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-logout-alert.tsx",
    "source_type": "git_repo",
    "title": "rdb-gitpod-logout-alert",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\n\ninterface RdbGitpodLogoutAlertProps {\n  course: string;\n}\n\nfunction RdbGitpodLogoutAlert({\n  course\n}: RdbGitpodLogoutAlertProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <Alert variant='danger'>\n      {t('learn.gitpod.logout-warning', { course })}\n    </Alert>\n  );\n}\n\nRdbGitpodLogoutAlert.displayName = 'RdbGitpodLogoutAlert';\n\nexport default RdbGitpodLogoutAlert;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 509,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-logout-alert.tsx",
      "source_type": "git_repo"
    },
    "token_count": 131,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "503857e08a36f4ba4dc08e570c2473de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-gitpod-instructions",
    "content": "import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nfunction RdbGitpodInstructions(): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <div className='ca-description'>\n      <p>{t('learn.gitpod.intro')}</p>\n      <ol>\n        <li>\n          <Trans i18nKey='learn.gitpod.step-1'>\n            <a\n              href='https://github.com/join'\n              rel='noopener noreferrer'\n              target='_blank'\n              title={t('learn.source-code-link')}\n            >\n              placeholder\n            </a>\n          </Trans>\n        </li>\n        <li>{t('learn.gitpod.step-2')}</li>\n        <li>{t('learn.gitpod.step-3')}</li>\n        <li>\n          {t('learn.gitpod.step-4')}\n          <ul>\n            <li>{t('learn.gitpod.step-5')}</li>\n            <li>{t('learn.gitpod.step-6')}</li>\n            <li>{t('learn.gitpod.step-7')}</li>\n            <li>{t('learn.gitpod.step-8')}</li>\n          </ul>\n        </li>\n        <li>{t('learn.gitpod.step-9')}</li>\n      </ol>\n    </div>\n  );\n}\n\nRdbGitpodInstructions.displayName = 'RdbGitpodInstructions';\n\nexport default RdbGitpodInstructions;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1145,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-gitpod-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ed13294ff680bfaa467b01564a1e922b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-logout-alert.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-logout-alert",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\n\ninterface RdbLocalLogoutAlertProps {\n  course: string;\n}\n\nfunction RdbLocalLogoutAlert({\n  course\n}: RdbLocalLogoutAlertProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <Alert variant='danger'>\n      {t('learn.local.logout-warning', { course })}\n    </Alert>\n  );\n}\n\nRdbLocalLogoutAlert.displayName = 'RdbLocalLogoutAlert';\n\nexport default RdbLocalLogoutAlert;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 502,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-logout-alert.tsx",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "851168bab3de6e93fc5374b89c86f55a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-step-1-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-step-1-instructions",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport ChallengeHeading from '../components/challenge-heading';\nimport PrismFormatted from '../components/prism-formatted';\n\ninterface RdbStep1InstructionsProps {\n  instructions: string;\n  isCompleted: boolean;\n}\n\nfunction RdbStep1Instructions({\n  instructions,\n  isCompleted\n}: RdbStep1InstructionsProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <>\n      <ChallengeHeading heading={t('learn.step-1')} isCompleted={isCompleted} />\n      <Spacer size='m' />\n      <div className='ca-description'>{t('learn.runs-in-vm')}</div>\n      <Spacer size='m' />\n      <PrismFormatted text={instructions} />\n    </>\n  );\n}\n\nRdbStep1Instructions.displayName = 'RdbStep1Instructions';\n\nexport default RdbStep1Instructions;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 852,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-step-1-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ada54ac17e056a835fc62198b9eeecc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-step-2-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-step-2-instructions",
    "content": "import React from 'react';\n\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport ChallengeHeading from '../components/challenge-heading';\nimport PrismFormatted from '../components/prism-formatted';\n\ninterface RdbStep2InstructionsProps {\n  notes: string;\n  isCompleted: boolean;\n}\n\nfunction RdbStep2Instructions({\n  isCompleted,\n  notes\n}: RdbStep2InstructionsProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <>\n      <ChallengeHeading heading={t('learn.step-2')} isCompleted={isCompleted} />\n      <Spacer size='m' />\n      <div className='ca-description'>{t('learn.submit-public-url')}</div>\n      <Spacer size='m' />\n      <PrismFormatted text={notes} />\n    </>\n  );\n}\n\nRdbStep2Instructions.displayName = 'RdbStep2Instructions';\n\nexport default RdbStep2Instructions;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 839,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-step-2-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6501915fdae9dc580dd2f8eb6cc99946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-instructions",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Spacer, Button } from '@freecodecamp/ui';\nimport { postUserToken } from '../../../utils/ajax';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\n\nimport {\n  isSignedInSelector,\n  userTokenSelector\n} from '../../../redux/selectors';\nimport { updateUserToken } from '../../../redux/actions';\nimport { Link } from '../../../components/helpers';\n\nimport RdbLocalLogoutAlert from './rdb-local-logout-alert';\n\nconst mapStateToProps = (state: unknown) => ({\n  isSignedIn: isSignedInSelector(state),\n  userToken: userTokenSelector(state) as string | null\n});\n\nconst mapDispatchToProps = {\n  createFlashMessage,\n  updateUserToken\n};\n\ninterface RdbLocalInstructionsProps {\n  course: string;\n  createFlashMessage: typeof createFlashMessage;\n  isSignedIn: boolean;\n  updateUserToken: (arg0: string) => void;\n  url: string;\n  userToken: string | null;\n}\n\nfunction RdbLocalInstructions({\n  course,\n  createFlashMessage,\n  isSignedIn,\n  updateUserToken,\n  url,\n  userToken\n}: RdbLocalInstructionsProps): JSX.Element {\n  const { t } = useTranslation();\n\nconst coderoadTutorial = `https://raw.githubusercontent.com/${url}/main/tutorial.json`;\n\nconst generateUserToken = async () => {\n    const createUserTokenResponse = await postUserToken();\n    const { data = { userToken: null } } = createUserTokenResponse;\n\nif (data?.userToken) {\n      updateUserToken(data.userToken);\n      createFlashMessage({\n        type: 'success',\n        message: FlashMessages.UserTokenGenerated\n      });\n    } else {\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.UserTokenGenerateError\n      });\n    }\n  };\n\nconst copyUserToken = () => {\n    navigator.clipboard.writeText(userToken ?? '').then(\n      () => {\n        createFlashMessage({\n          type: 'success',\n          message: FlashMessages.UserTokenCopied\n        });\n      },\n      () => {\n        createFlashMessage({\n          type: 'danger',\n          message: FlashMessages.UserTokenCopyError\n        });\n      }\n    );\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "76fad64ad8d039e7394e20a37fc1421e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-instructions",
    "content": "`https://raw.githubusercontent.com/${url}/main/tutorial.json`; const generateUserToken = async () => { const createUserTokenResponse = await postUserToken(); const { data = { userToken: null } } = createUserTokenResponse; if (data?.userToken) { updateUserToken(data.userToken); createFlashMessage({ type: 'success', message: FlashMessages.UserTokenGenerated }); } else { createFlashMessage({ type: 'danger', message: FlashMessages.UserTokenGenerateError }); } }; const copyUserToken = () => { navigator.clipboard.writeText(userToken ?? '').then( () => { createFlashMessage({ type: 'success', message: FlashMessages.UserTokenCopied }); }, () => { createFlashMessage({ type: 'danger', message: FlashMessages.UserTokenCopyError }); } ); };\n\nconst copyUrl = () => {\n    navigator.clipboard.writeText(coderoadTutorial ?? '').then(\n      () => {\n        createFlashMessage({\n          type: 'success',\n          message: FlashMessages.CourseUrlCopied\n        });\n      },\n      () => {\n        createFlashMessage({\n          type: 'danger',\n          message: FlashMessages.CourseUrlCopyError\n        });\n      }\n    );\n  }; return (\n    <div className='ca-description'>\n      <p>{t('learn local intro')}</p>\n      <ul>\n        <li>\n          <Link external={true} to='https://docs docker com/engine/'>\n            Docker Engine\n          </Link>\n        </li>\n        <li>\n          <Trans i18nKey='learn local download-vscode'>\n            <Link external={true} to='https://code visualstudio com/download'>\n              placeholder\n            </Link>\n            <Link\n              external={true}\n              to='https://marketplace visualstudio com/items itemName=ms-vscode-remote remote-containers'\n            >\n              placeholder\n            </Link>\n          </Trans>\n        </li>\n        <li>\n          <Link external={true} to='https://git-scm com/downloads'>\n            Git\n          </Link>\n        </li>\n      </ul>\n      <Spacer size='m' />\n      <p>{t('learn local heading')}</p>\n      <ol>\n        <li>\n          <Trans i18nKey='learn local",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6660dd9cf422fa0758ff926d58f9fcd7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-instructions",
    "content": "}); }, () => { createFlashMessage({ type: 'danger', message: FlashMessages.CourseUrlCopyError }); } ); }; return ( <div className='ca-description'> <p>{t('learn local intro')}</p> <ul> <li> <Link external={true} to='https://docs docker com/engine/'> Docker Engine </Link> </li> <li> <Trans i18nKey='learn local download-vscode'> <Link external={true} to='https://code visualstudio com/download'> placeholder </Link> <Link external={true} to='https://marketplace visualstudio com/items itemName=ms-vscode-remote remote-containers' > placeholder </Link> </Trans> </li> <li> <Link external={true} to='https://git-scm com/downloads'> Git </Link> </li> </ul> <Spacer size='m' /> <p>{t('learn local heading')}</p> <ol> <li> <Trans i18nKey='learn localstep-1'>\n            <code>placeholder</code>\n          </Trans>\n        </li>\n        <li>\n          <Trans i18nKey='learn local step-2'>\n            <code>placeholder</code>\n            <code>placeholder</code>\n            <code>placeholder</code>\n          </Trans>\n        </li>\n        {isSignedIn && (\n          <>\n            <Spacer size='s' />\n            <p>{t('learn local sub-step-heading')}</p>\n            <ol>\n              <li>{t('learn local sub-step-1')}</li>\n              <Spacer size='xxs' />\n              <Button\n                disabled={ userToken}\n                block={true}\n                onClick={() => void generateUserToken()}\n              >\n                {t('learn local generate-token-btn')}\n              </Button>\n              <Spacer size='xs' />\n              <li>{t('learn local sub-step-2')}</li>\n              <Spacer size='xxs' />\n              <Button\n                disabled={ userToken}\n                block={true}\n                onClick={copyUserToken}\n              >\n                {t('learn local copy-token-btn')}\n              </Button>\n              <Spacer size='xs' />\n              <li>\n                <Trans i18nKey='learn local",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ada12f987d3c07e36d7c86194d6a9b90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-instructions",
    "content": "local heading')}</p> <ol> <li> <Trans i18nKey='learn localstep-1'> <code>placeholder</code> </Trans> </li> <li> <Trans i18nKey='learn local step-2'> <code>placeholder</code> <code>placeholder</code> <code>placeholder</code> </Trans> </li> {isSignedIn && ( <> <Spacer size='s' /> <p>{t('learn local sub-step-heading')}</p> <ol> <li>{t('learn local sub-step-1')}</li> <Spacer size='xxs' /> <Button disabled={ userToken} block={true} onClick={() => void generateUserToken()} > {t('learn local generate-token-btn')} </Button> <Spacer size='xs' /> <li>{t('learn local sub-step-2')}</li> <Spacer size='xxs' /> <Button disabled={ userToken} block={true} onClick={copyUserToken} > {t('learn local copy-token-btn')} </Button> <Spacer size='xs' /> <li> <Trans i18nKey='learn localsub-step-3'>\n                  <code>placeholder</code>\n                  <code>placeholder</code>\n                  <code>placeholder</code>\n                </Trans>\n              </li>\n              <Spacer size='xs' />\n              <RdbLocalLogoutAlert course={course} />\n            </ol>\n            <Spacer size='s' />\n          </>\n        )}\n        <li>\n          <Trans i18nKey='learn local step-3'>\n            <code>placeholder</code>\n          </Trans>\n        </li>\n        <li>{t('learn local step-4')}</li>\n        <li>\n          <Trans i18nKey='learn local step-5'>\n            <code>placeholder</code>\n          </Trans>\n        </li>\n        <li>{t('learn local step-6')}</li>\n        <li>{t('learn local step-7')}</li>\n        <Spacer size='xxs' />\n        <Button block={true} onClick={copyUrl}>\n          {t('learn local copy-url')}\n        </Button>\n        <Spacer size='xs' />\n        <li>{t('learn local step-8')}</li>\n        <li>{t('learn local",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d0ae5b0ad822d214fcd5f740760cbc71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
    "source_type": "git_repo",
    "title": "rdb-local-instructions",
    "content": "disabled={ userToken} block={true} onClick={copyUserToken} > {t('learn local copy-token-btn')} </Button> <Spacer size='xs' /> <li> <Trans i18nKey='learn localsub-step-3'> <code>placeholder</code> <code>placeholder</code> <code>placeholder</code> </Trans> </li> <Spacer size='xs' /> <RdbLocalLogoutAlert course={course} /> </ol> <Spacer size='s' /> </> )} <li> <Trans i18nKey='learn local step-3'> <code>placeholder</code> </Trans> </li> <li>{t('learn local step-4')}</li> <li> <Trans i18nKey='learn local step-5'> <code>placeholder</code> </Trans> </li> <li>{t('learn local step-6')}</li> <li>{t('learn local step-7')}</li> <Spacer size='xxs' /> <Button block={true} onClick={copyUrl}> {t('learn local copy-url')} </Button> <Spacer size='xs' /> <li>{t('learn local step-8')}</li> <li>{t('learn localstep-9')}</li>\n      </ol>\n    </div>\n  );\n}\n\nRdbLocalInstructions.displayName = 'RdbLocalInstructions';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RdbLocalInstructions);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\rdb-local-instructions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "7fbbe21a3bef999d0167d760edbb00c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\assignments.css",
    "source_type": "git_repo",
    "title": "assignments",
    "content": ".assignments-not-complete {\n  text-align: center;\n  color: var(--danger-color);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 82,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\assignments.css",
      "source_type": "git_repo"
    },
    "token_count": 20,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0fc2a0b9a7c2099b4dad2436c1f25556",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\assignments.tsx",
    "source_type": "git_repo",
    "title": "assignments",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport ChallengeHeading from './challenge-heading';\nimport PrismFormatted from './prism-formatted';\n\nimport './assignments.css';\n\ntype AssignmentsProps = {\n  assignments: string[];\n  allAssignmentsCompleted: boolean;\n  handleAssignmentChange: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    totalAssignments: number\n  ) => void;\n};\n\nfunction Assignments({\n  assignments,\n  allAssignmentsCompleted,\n  handleAssignmentChange\n}: AssignmentsProps): JSX.Element {\n  const { t } = useTranslation();\n  return (\n    <>\n      <ChallengeHeading\n        heading={t('learn.assignments', { count: assignments.length })}\n      />\n      <div className='video-quiz-options'>\n        {assignments.map((assignment, index) => (\n          <label className='video-quiz-option-label' key={index}>\n            <input\n              name='assignment'\n              type='checkbox'\n              onChange={event =>\n                handleAssignmentChange(event, assignments.length)\n              }\n            />\n            <PrismFormatted className={'video-quiz-option'} text={assignment} />\n            <Spacer size='m' />\n          </label>\n        ))}\n      </div>\n      {!allAssignmentsCompleted && (\n        <>\n          <Spacer size='m' />\n          <div className='assignments-not-complete'>\n            {t('learn.assignment-not-complete', { count: assignments.length })}\n          </div>\n        </>\n      )}\n      <Spacer size='m' />\n    </>\n  );\n}\n\nAssignments.displayName = 'Assignments';\n\nexport default Assignments;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1629,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\assignments.tsx",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3e5a16dbe2a92323e90bf6168539425",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\bread-crumb.tsx",
    "source_type": "git_repo",
    "title": "bread-crumb",
    "content": "import i18next from 'i18next';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from '../../../components/helpers/index';\n\nimport './challenge-title.css';\n\ninterface BreadCrumbProps {\n  block: string;\n  superBlock: string;\n}\n\nfunction BreadCrumb({ block, superBlock }: BreadCrumbProps): JSX.Element {\n  const { t } = useTranslation();\n  return (\n    <nav\n      className='challenge-title-breadcrumbs'\n      aria-label={t('aria.breadcrumb-nav')}\n    >\n      <ol data-playwright-test-label='breadcrumb-desktop'>\n        <li className='breadcrumb-left'>\n          <Link\n            state={{ breadcrumbBlockClick: block }}\n            to={`/learn/${superBlock}`}\n          >\n            <span>{i18next.t(`intro:${superBlock}.title`)}</span>\n          </Link>\n        </li>\n        <li className='breadcrumb-right'>\n          <Link\n            state={{ breadcrumbBlockClick: block }}\n            to={`/learn/${superBlock}/#${block}`}\n          >\n            {i18next.t(`intro:${superBlock}.blocks.${block}.title`)}\n          </Link>\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nBreadCrumb.displayName = 'BreadCrumb';\n\nexport default BreadCrumb;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1182,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\bread-crumb.tsx",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b0a5064069c75fa100c084fa5909b803",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-description.css",
    "source_type": "git_repo",
    "title": "challenge-description",
    "content": ".challenge-instructions blockquote {\n  background-color: var(--tertiary-background);\n  color: var(--tertiary-color);\n  padding: 10px;\n  width: 100%;\n  margin: 0;\n  margin-bottom: 1.45rem;\n  font-size: 0.9rem;\n}\n\n#description ol li a {\n  word-break: break-all;\n}\n\n#description ol li {\n  line-height: 1.5;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 306,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-description.css",
      "source_type": "git_repo"
    },
    "token_count": 97,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "10393b7688b9216cafc8846edb03106a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-description.tsx",
    "source_type": "git_repo",
    "title": "challenge-description",
    "content": "import React, { useEffect } from 'react';\nimport { initializeMathJax, isMathJaxAllowed } from '../../../utils/math-jax';\nimport PrismFormatted from './prism-formatted';\nimport './challenge-description.css';\n\ntype Props = {\n  description?: string;\n  instructions?: string;\n  superBlock?: string;\n};\n\nconst ChallengeDescription = ({\n  description,\n  instructions,\n  superBlock\n}: Props) => {\n  useEffect(() => {\n    if (superBlock && isMathJaxAllowed(superBlock)) {\n      initializeMathJax();\n    }\n  }, [superBlock]);\n\nreturn (\n    <div\n      className={'challenge-instructions mathjax-support'}\n      data-playwright-test-label='challenge-description'\n    >\n      {description && <PrismFormatted text={description} />}\n      {instructions && description && <hr />}\n      {instructions && <PrismFormatted text={instructions} />}\n    </div>\n  );\n};\n\nChallengeDescription.displayName = 'ChallengeDescription';\n\nexport default ChallengeDescription;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 947,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-description.tsx",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc0dfb9b79c9f6b1ac741aa97db86016",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-explanation.css",
    "source_type": "git_repo",
    "title": "challenge-explanation",
    "content": ".challenge-summary {\n  cursor: pointer;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 42,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-explanation.css",
      "source_type": "git_repo"
    },
    "token_count": 10,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c0ff314bc1fab693ee924c70ee9704be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-explanation.tsx",
    "source_type": "git_repo",
    "title": "challenge-explanation",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\nimport PrismFormatted from './prism-formatted';\n\nimport './challenge-explanation.css';\n\ninterface ChallengeExplanationProps {\n  explanation: string;\n}\n\nfunction ChallengeExplanation({\n  explanation\n}: ChallengeExplanationProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <>\n      <details>\n        <summary className='challenge-summary'>\n          {t('learn.explanation')}\n        </summary>\n        <Spacer size='m' />\n        <PrismFormatted className={'line-numbers'} text={explanation} />\n      </details>\n      <Spacer size='m' />\n    </>\n  );\n}\n\nChallengeExplanation.displayName = 'ChallengeExplanation';\n\nexport default ChallengeExplanation;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 789,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-explanation.tsx",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7ab561d292d46747f3788b25da0efbcd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-heading.css",
    "source_type": "git_repo",
    "title": "challenge-heading",
    "content": ".challenge-heading-wrap {\n  display: flex;\n  gap: 7px;\n  align-items: center;\n  justify-content: center;\n}\n\n.challenge-heading {\n  font-size: 16px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 150,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-heading.css",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5b1b0f7f33d2411f3653932514f04135",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-heading.tsx",
    "source_type": "git_repo",
    "title": "challenge-heading",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GreenPass from '../../../assets/icons/green-pass';\n\nimport './challenge-heading.css';\n\ninterface ChallengeHeadingProps {\n  heading: string;\n  isCompleted?: boolean;\n}\n\nfunction ChallengeHeading({\n  heading,\n  isCompleted = false\n}: ChallengeHeadingProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <div className='challenge-heading-wrap'>\n      <h2 className='challenge-heading'>{t(heading)}</h2>\n      {isCompleted && <GreenPass />}\n    </div>\n  );\n}\n\nChallengeHeading.displayName = 'ChallengeHeading';\n\nexport default ChallengeHeading;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 642,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-heading.tsx",
      "source_type": "git_repo"
    },
    "token_count": 138,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51ae497f649fe125bfe2dc962da59372",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "// Package Utilities\nimport { graphql } from 'gatsby';\nimport React, { useEffect, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Spacer } from '@freecodecamp/ui';\nimport { useFeature } from '@growthbook/growthbook-react';\n\n// Local Utilities\nimport LearnLayout from '../../../components/layouts/learn';\nimport ChallengeTitle from '../components/challenge-title';\nimport PrismFormatted from '../components/prism-formatted';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport Hotkeys from '../components/hotkeys';\nimport { updateUserToken } from '../../../redux/actions';\nimport {\n  completedChallengesSelector,\n  partiallyCompletedChallengesSelector,\n  isSignedInSelector,\n  userTokenSelector\n} from '../../../redux/selectors';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  CompletedChallenge,\n  Test\n} from '../../../redux/prop-types';\nimport ProjectToolPanel from '../projects/tool-panel';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport SolutionForm from '../projects/solution-form';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { CodeAllyDown } from '../../../components/growth-book/codeally-down';\nimport { postUserToken } from '../../../utils/ajax';\nimport { CodeAllyButton } from '../../../components/growth-book/codeally-button';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "e152c8b8d1efd42d1a66dc4f9f2b21d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "'../../../redux/selectors'; import { challengeMounted, updateChallengeMeta, openModal, updateSolutionFormValues, initTests } from '../redux/actions'; import { isChallengeCompletedSelector } from '../redux/selectors'; import { createFlashMessage } from '../../../components/Flash/redux'; import { ChallengeNode, ChallengeMeta, CompletedChallenge, Test } from '../../../redux/prop-types'; import ProjectToolPanel from '../projects/tool-panel'; import { getChallengePaths } from '../utils/challenge-paths'; import SolutionForm from '../projects/solution-form'; import { FlashMessages } from '../../../components/Flash/redux/flash-messages'; import { SuperBlocks } from '../../../../../shared/config/curriculum'; import { CodeAllyDown } from '../../../components/growth-book/codeally-down'; import { postUserToken } from '../../../utils/ajax'; import { CodeAllyButton } from '../../../components/growth-book/codeally-button';\n\nimport RdbGitpodContinueAlert from './rdb-gitpod-continue-alert';\nimport RdbGitpodInstructions from './rdb-gitpod-instructions';\nimport RdbGitpodLogoutAlert from './rdb-gitpod-logout-alert';\nimport RdbLocalInstructions from './rdb-local-instructions';\nimport RdbStep1Instructions from './rdb-step-1-instructions';\nimport RdbStep2Instructions from './rdb-step-2-instructions';\n\nimport './codeally.css';\n\n// Redux\nconst mapStateToProps = createSelector(\n  completedChallengesSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  partiallyCompletedChallengesSelector,\n  userTokenSelector,\n  (\n    completedChallenges: CompletedChallenge[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean,\n    partiallyCompletedChallenges: CompletedChallenge[],\n    userToken: string | null\n  ) => ({\n    completedChallenges,\n    isChallengeCompleted,\n    isSignedIn,\n    partiallyCompletedChallenges,\n    userToken\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      challengeMounted,\n      createFlashMessage,\n      openCompletionModal: () => openModal('completion'),\n      initTests,\n      updateUserToken,\n      updateChallengeMeta,\n      updateSolutionFormValues\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "4a180838fe2278974037ed4b4471cfc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "RdbGitpodInstructions from './rdb-gitpod-instructions'; import RdbGitpodLogoutAlert from './rdb-gitpod-logout-alert'; import RdbLocalInstructions from './rdb-local-instructions'; import RdbStep1Instructions from './rdb-step-1-instructions'; import RdbStep2Instructions from './rdb-step-2-instructions'; import './codeally.css'; // Redux const mapStateToProps = createSelector( completedChallengesSelector, isChallengeCompletedSelector, isSignedInSelector, partiallyCompletedChallengesSelector, userTokenSelector, ( completedChallenges: CompletedChallenge[], isChallengeCompleted: boolean, isSignedIn: boolean, partiallyCompletedChallenges: CompletedChallenge[], userToken: string | null ) => ({ completedChallenges, isChallengeCompleted, isSignedIn, partiallyCompletedChallenges, userToken }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { challengeMounted, createFlashMessage, openCompletionModal: () => openModal('completion'), initTests, updateUserToken, updateChallengeMeta, updateSolutionFormValues }, dispatch );\n\n// Types\ninterface ShowCodeAllyProps {\n  challengeMounted: (arg0: string) => void;\n  completedChallenges: CompletedChallenge[];\n  createFlashMessage: typeof createFlashMessage;\n  data: { challengeNode: ChallengeNode };\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  openCompletionModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  partiallyCompletedChallenges: CompletedChallenge[];\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateUserToken: (arg0: string) => void;\n  updateSolutionFormValues: () => void;\n  userToken: string | null;\n}\n\nfunction ShowCodeAlly(props: ShowCodeAllyProps) {\n  const container = useRef<HTMLElement>(null);\n\nconst {\n    completedChallenges,\n    data: {\n      challengeNode: {\n        challenge: {\n          block,\n          challengeType,\n          description,\n          id: challengeId,\n          instructions,\n          notes,\n          superBlock,\n          title,\n          translationPending,\n          url\n        }\n      }\n    },\n    isChallengeCompleted,\n    isSignedIn,\n    partiallyCompletedChallenges,\n    t,\n    updateSolutionFormValues\n  } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "7aba06a9866885fc6cf12efaffceefa0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "void; isChallengeCompleted: boolean; isSignedIn: boolean; openCompletionModal: () => void; pageContext: { challengeMeta: ChallengeMeta; }; partiallyCompletedChallenges: CompletedChallenge[]; t: TFunction; updateChallengeMeta: (arg0: ChallengeMeta) => void; updateUserToken: (arg0: string) => void; updateSolutionFormValues: () => void; userToken: string | null; } function ShowCodeAlly(props: ShowCodeAllyProps) { const container = useRef<HTMLElement>(null); const { completedChallenges, data: { challengeNode: { challenge: { block, challengeType, description, id: challengeId, instructions, notes, superBlock, title, translationPending, url } } }, isChallengeCompleted, isSignedIn, partiallyCompletedChallenges, t, updateSolutionFormValues } = props;\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )}: ${title}`;\n  const windowTitle = `${blockNameTitle} | freeCodeCamp.org`;\n\nconst isPartiallyCompleted = partiallyCompletedChallenges.some(\n    challenge => challenge.id === challengeId\n  );\n\nconst isCompleted = completedChallenges.some(\n    challenge => challenge.id === challengeId\n  );\n\nuseEffect(() => {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            challengeType,\n            helpCategory,\n            title\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = props;\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst openGitpod = (userToken?: string) => {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { url }\n        }\n      }\n    } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "434b69ff0a5ab5755f926186c89c650b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "challengeNode: { challenge: { fields: { tests }, challengeType, helpCategory, title } } }, pageContext: { challengeMeta }, initTests, updateChallengeMeta } = props; initTests(tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const openGitpod = (userToken?: string) => { const { data: { challengeNode: { challenge: { url } } } } = props;\n\nconst repoUrl = `https://github.com/${url}`;\n    const coderoadTutorial = encodeURIComponent(\n      `https://raw.githubusercontent.com/${url}/main/tutorial.json`\n    );\n    const gitpodDomain = `https://gitpod.io/?autostart=true#CODEROAD_TUTORIAL_URL=${coderoadTutorial},CODEROAD_DISABLE_RUN_ON_SAVE=true`;\n    const tokenEnv = userToken ? `,CODEROAD_WEBHOOK_TOKEN=${userToken}` : '';\n    const gitpodUrl = `${gitpodDomain}${tokenEnv}/${repoUrl}`;\n\nwindow.open(gitpodUrl, '_blank');\n  };\n\nconst startCourse = async () => {\n    const { isSignedIn, userToken, updateUserToken } = props;\n\nif (!isSignedIn) {\n      openGitpod();\n    } else if (!userToken) {\n      const createUserTokenResponse = await postUserToken();\n      const { data = { userToken: null } } = createUserTokenResponse;\n\nif (data?.userToken) {\n        updateUserToken(data.userToken);\n        openGitpod(data.userToken);\n      } else {\n        createFlashMessage({\n          type: 'danger',\n          message: FlashMessages.StartProjectErr\n        });\n      }\n    } else {\n      openGitpod(userToken);\n    }\n  };\n\nconst handleSubmit = ({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }) => {\n    const {\n      completedChallenges,\n      createFlashMessage,\n      data: {\n        challengeNode: {\n          challenge: { id: challengeId }\n        }\n      },\n      openCompletionModal,\n      partiallyCompletedChallenges\n    } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "0992748be807e083424337c2c1c0d484",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "{ openGitpod(); } else if (!userToken) { const createUserTokenResponse = await postUserToken(); const { data = { userToken: null } } = createUserTokenResponse; if (data?.userToken) { updateUserToken(data.userToken); openGitpod(data.userToken); } else { createFlashMessage({ type: 'danger', message: FlashMessages.StartProjectErr }); } } else { openGitpod(userToken); } }; const handleSubmit = ({ showCompletionModal }: { showCompletionModal: boolean; }) => { const { completedChallenges, createFlashMessage, data: { challengeNode: { challenge: { id: challengeId } } }, openCompletionModal, partiallyCompletedChallenges } = props;\n\nconst isPartiallyCompleted = partiallyCompletedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\nconst isCompleted = completedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\nif (!isPartiallyCompleted && !isCompleted) {\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.CompleteProjectFirst\n      });\n    } else if (showCompletionModal) {\n      openCompletionModal();\n    }\n  };\n\nconst gitpodDeprecated = useFeature('gitpod-deprecated').on;\n\nreturn (\n    <Hotkeys containerRef={container}>\n      <LearnLayout>\n        <Helmet title={windowTitle} />\n        <Container>\n          <Row>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='m' />\n              {superBlock === SuperBlocks.RelationalDb && <CodeAllyDown />}\n              <Spacer size='m' />\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n              <Spacer size='m' />\n              <PrismFormatted text={description} />\n              <Spacer size='m' /> {gitpodDeprecated (\n                <>\n                  <RdbLocalInstructions course={title} url={url} />\n                  <Spacer size='m' />\n                  {isSignedIn &&\n                    challengeType === challengeTypes codeAllyCert && (\n                      <>\n                        <div className='ca-description'>\n                          {t('learn",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "50078b259ad46ef35d988bb056a0b0ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "else if (showCompletionModal) { openCompletionModal(); } }; const gitpodDeprecated = useFeature('gitpod-deprecated').on; return ( <Hotkeys containerRef={container}> <LearnLayout> <Helmet title={windowTitle} /> <Container> <Row> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <Spacer size='m' /> {superBlock === SuperBlocks.RelationalDb && <CodeAllyDown />} <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <Spacer size='m' /> <PrismFormatted text={description} /> <Spacer size='m' /> {gitpodDeprecated ( <> <RdbLocalInstructions course={title} url={url} /> <Spacer size='m' /> {isSignedIn && challengeType === challengeTypes codeAllyCert && ( <> <div className='ca-description'> {t('learncomplete-both-steps')}\n                        </div>\n                        <hr />\n                        <Spacer size='m' />\n                        <RdbStep1Instructions\n                          instructions={instructions}\n                          isCompleted={isPartiallyCompleted || isCompleted}\n                        />\n                        <hr />\n                        <Spacer size='m' />\n                        <RdbStep2Instructions\n                          isCompleted={isCompleted}\n                          notes={notes}\n                        />\n                        <Spacer size='m' />\n                        <SolutionForm\n                          challengeType={challengeType}\n                          description={description}\n                          onSubmit={handleSubmit}\n                          updateSolutionForm={updateSolutionFormValues}\n                        />\n                      </>\n                    )}\n                </>\n              ) : (\n                <>\n                  <RdbGitpodInstructions />\n                  <Spacer size='m' />\n                  {isSignedIn &&\n                  challengeType === challengeTypes codeAllyCert (\n                    <>\n                      <div className='ca-description'>\n                        {t('learn",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "1c55225f4f5219423446301b54a80d2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "/> {gitpodDeprecated ( <> <RdbLocalInstructions course={title} url={url} /> <Spacer size='m' /> {isSignedIn && challengeType === challengeTypes codeAllyCert && ( <> <div className='ca-description'> {t('learncomplete-both-steps')} </div> <hr /> <Spacer size='m' /> <RdbStep1Instructions instructions={instructions} isCompleted={isPartiallyCompleted || isCompleted} /> <hr /> <Spacer size='m' /> <RdbStep2Instructions isCompleted={isCompleted} notes={notes} /> <Spacer size='m' /> <SolutionForm challengeType={challengeType} description={description} onSubmit={handleSubmit} updateSolutionForm={updateSolutionFormValues} /> </> )} </> ) : ( <> <RdbGitpodInstructions /> <Spacer size='m' /> {isSignedIn && challengeType === challengeTypes codeAllyCert ( <> <div className='ca-description'> {t('learncomplete-both-steps')}\n                      </div>\n                      <hr />\n                      <Spacer size='m' />\n                      <RdbStep1Instructions\n                        instructions={instructions}\n                        isCompleted={isPartiallyCompleted || isCompleted}\n                      />\n                      <Spacer size='m' />\n                      <RdbGitpodContinueAlert course={title} />\n                      {isSignedIn && <RdbGitpodLogoutAlert course={title} />}\n                      <CodeAllyButton\n                        challengeType={challengeType}\n                        //eslint-disable-next-line @typescript-eslint/no-misused-promises\n                        onClick={startCourse}\n                      />\n                      <hr />\n                      <Spacer size='m' />\n                      <RdbStep2Instructions\n                        isCompleted={isCompleted}\n                        notes={notes}\n                      />\n                      <Spacer size='m' />\n                      <SolutionForm\n                        challengeType={challengeType}\n                        description={description}\n                        onSubmit={handleSubmit}\n                        updateSolutionForm={updateSolutionFormValues}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <RdbGitpodContinueAlert course={title} />\n                      {isSignedIn && <RdbGitpodLogoutAlert course={title} />}\n                      <CodeAllyButton\n                        challengeType={challengeType}\n                        //eslint-disable-next-line @typescript-eslint/no-misused-promises\n                        onClick={startCourse}\n                      />\n                    </>\n                  )}\n                  <Spacer size='xxs' />\n                </>\n              )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "e0bcad7e7c0b81d21f5a7159d4a5d1cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "<div className='ca-description'> {t('learncomplete-both-steps')} </div> <hr /> <Spacer size='m' /> <RdbStep1Instructions instructions={instructions} isCompleted={isPartiallyCompleted || isCompleted} /> <Spacer size='m' /> <RdbGitpodContinueAlert course={title} /> {isSignedIn && <RdbGitpodLogoutAlert course={title} />} <CodeAllyButton challengeType={challengeType} //eslint-disable-next-line @typescript-eslint/no-misused-promises onClick={startCourse} /> <hr /> <Spacer size='m' /> <RdbStep2Instructions isCompleted={isCompleted} notes={notes} /> <Spacer size='m' /> <SolutionForm challengeType={challengeType} description={description} onSubmit={handleSubmit} updateSolutionForm={updateSolutionFormValues} /> </> ) : ( <> <RdbGitpodContinueAlert course={title} /> {isSignedIn && <RdbGitpodLogoutAlert course={title} />} <CodeAllyButton challengeType={challengeType} //eslint-disable-next-line @typescript-eslint/no-misused-promises onClick={startCourse} /> </> )} <Spacer size='xxs' /> </> )}\n\n<ProjectToolPanel />\n              <br />\n              <Spacer size='m' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={block}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowCodeAlly));\n\n// GraphQL\nexport const query = graphql`\n  query CodeAllyChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        block\n        fields {\n          tests {\n            text\n            testString\n          }\n        }\n        challengeType\n        description\n        helpCategory\n        id\n        instructions\n        notes\n        superBlock\n        title\n        translationPending\n        url\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 13032,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\codeally\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "4403433a20942ced19267cbb49d7b04b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.test.tsx",
    "source_type": "git_repo",
    "title": "challenge-title.test",
    "content": "import React from 'react';\nimport renderer from 'react-test-renderer';\n\nimport ChallengeTitle from './challenge-title';\n\nconst baseProps = {\n  children: 'title text',\n  isCompleted: true,\n  translationPending: false\n};\n\ndescribe('<ChallengeTitle/>', () => {\n  it('renders correctly', () => {\n    const tree = renderer.create(<ChallengeTitle {...baseProps} />).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 416,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 93,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2caaf6733d4a05a8c5158215b61b9bd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.css",
    "source_type": "git_repo",
    "title": "challenge-title",
    "content": ".challenge-title-wrap {\n  text-align: center;\n}\n\n.challenge-title {\n  height: fit-content;\n  min-width: 25px;\n  margin: 20px 0px 15px;\n  padding: 0px 3px;\n  display: flex;\n  gap: 7px;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-height: fit-content;\n  white-space: pre-line;\n  flex-grow: 1;\n  flex-shrink: 1;\n  font-size: 16px;\n}\n\n.challenge-title-breadcrumbs {\n  font-size: 16px;\n  border: 1px solid var(--quaternary-background);\n  text-align: center;\n}\n\n.challenge-title-breadcrumbs ol {\n  display: flex;\n  justify-content: space-around;\n  list-style-type: none;\n  margin-bottom: 0;\n  padding-inline-start: 0;\n  width: 100%;\n}\n\n.challenge-title-breadcrumbs ol a {\n  width: 100%;\n  text-decoration: none;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  padding: 0 3px;\n}\n\n.challenge-title-breadcrumbs ol a:focus {\n  background-color: inherit;\n}\n\n.challenge-title-breadcrumbs ol a:hover {\n  background-color: inherit;\n  text-decoration: underline;\n}\n\n.breadcrumb-left,\n.breadcrumb-right {\n  text-decoration: none;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex-grow: 1;\n  flex-shrink: 2;\n  padding: 0;\n}\n\n.breadcrumb-left {\n  min-width: 3rem;\n  background-color: var(--quaternary-background);\n  margin-inline-end: 0.57rem;\n}\n\n.breadcrumb-left:after {\n  background-color: var(--secondary-background);\n  content: '';\n  border-top: calc(1.375rem / 2) solid transparent;\n  border-bottom: calc(1.2rem / 2) solid transparent;\n  border-inline-start: calc(1.1rem / 2) solid var(--quaternary-background);\n  height: 100%;\n  margin-left: 3px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 2322,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.css",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e466034172a7ebdc4202d6f9436ebf1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.css",
    "source_type": "git_repo",
    "title": "challenge-title",
    "content": ".challenge-title-breadcrumbs ol a:focus { background-color: inherit; } .challenge-title-breadcrumbs ol a:hover { background-color: inherit; text-decoration: underline; } .breadcrumb-left, .breadcrumb-right { text-decoration: none; display: inline-flex; align-items: center; justify-content: center; text-overflow: ellipsis; white-space: nowrap; flex-grow: 1; flex-shrink: 2; padding: 0; } .breadcrumb-left { min-width: 3rem; background-color: var(--quaternary-background); margin-inline-end: 0.57rem; } .breadcrumb-left:after { background-color: var(--secondary-background); content: ''; border-top: calc(1.375rem / 2) solid transparent; border-bottom: calc(1.2rem / 2) solid transparent; border-inline-start: calc(1.1rem / 2) solid var(--quaternary-background); height: 100%; margin-left: 3px; }\n\n.breadcrumb-right {\n  min-width: 50px;\n}\n\n.breadcrumb-rule {\n  margin: 5px -10px;\n}\n\n.challenge-title h1 {\n  font-size: 1.1rem;\n  line-height: 1.42857143;\n  margin: 0;\n  display: inline;\n}\n\n.title-translation-cta {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  font-size: 16px;\n  height: 25px;\n  text-decoration: none;\n  color: var(--highlight-color);\n  background-color: var(--highlight-background);\n  margin-bottom: 10px;\n}\n\n.title-translation-cta:hover,\n.title-translation-cta:focus {\n  text-decoration: none;\n  color: var(--highlight-background);\n  background-color: var(--highlight-color);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 2322,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.css",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fd992823569a79a5eb815da765649ef9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.css",
    "source_type": "git_repo",
    "title": "challenge-transcript",
    "content": ".challenge-transcript-heading {\n  cursor: pointer;\n  font-weight: bold;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 74,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.css",
      "source_type": "git_repo"
    },
    "token_count": 18,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6d06ff78f5ce603d559a6f11f04791c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.tsx",
    "source_type": "git_repo",
    "title": "challenge-title",
    "content": "import i18next from 'i18next';\nimport React from 'react';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { Link } from '../../../components/helpers/index';\n\nimport './challenge-title.css';\n\ninterface ChallengeTitleProps {\n  children: string;\n  isCompleted: boolean;\n  translationPending?: boolean;\n}\n\nfunction ChallengeTitle({\n  children,\n  isCompleted,\n  translationPending\n}: ChallengeTitleProps): JSX.Element {\n  return (\n    <div className='challenge-title-wrap'>\n      {translationPending && (\n        <Link\n          className='title-translation-cta'\n          to={i18next.t('links:help-translate-link-url')}\n        >\n          {i18next.t('misc.translation-pending')}\n        </Link>\n      )}\n      <div className='challenge-title'>\n        <h1 id='content-start' data-playwright-test-label='challenge-title'>\n          {children}\n        </h1>\n        {isCompleted && <GreenPass />}\n      </div>\n    </div>\n  );\n}\n\nChallengeTitle.displayName = 'ChallengeTitle';\n\nexport default ChallengeTitle;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1020,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-title.tsx",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c42679568d87376a0bd279bf1cabd176",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.test.tsx",
    "source_type": "git_repo",
    "title": "challenge-transcript.test",
    "content": "import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport store from 'store';\nimport ChallengeTranscript from './challenge-transcript';\n\nconst baseProps = {\n  transcript: 'Sample transcript text'\n};\n\ndescribe('<ChallengeTranscript />', () => {\n  beforeEach(() => {\n    store.clearAll();\n  });\n\nit('renders the transcript heading', () => {\n    render(<ChallengeTranscript {...baseProps} />);\n    expect(screen.getByText('learn.transcript')).toBeVisible();\n  });\n\nit('renders collapsed by default', () => {\n    render(<ChallengeTranscript {...baseProps} />);\n    expect(screen.getByTestId('challenge-transcript')).not.toHaveAttribute(\n      'open'\n    );\n    expect(screen.getByText('Sample transcript text')).not.toBeVisible();\n  });\n\nit(\"renders collapsed when localstorage 'fcc-transcript-expanded = false'\", () => {\n    store.set('fcc-transcript-expanded', false);\n    render(<ChallengeTranscript {...baseProps} />);\n    expect(screen.getByTestId('challenge-transcript')).not.toHaveAttribute(\n      'open'\n    );\n    expect(screen.getByText('Sample transcript text')).not.toBeVisible();\n  });\n\nit(\"renders expanded when 'fcc-transcript-expanded = true'\", () => {\n    store.set('fcc-transcript-expanded', true);\n    render(<ChallengeTranscript {...baseProps} />);\n    expect(screen.getByTestId('challenge-transcript')).toHaveAttribute('open');\n    expect(screen.getByText('Sample transcript text')).toBeVisible();\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1466,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3fdadd6033f2170048c95f311f78c7f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.tsx",
    "source_type": "git_repo",
    "title": "challenge-transcript",
    "content": "import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\nimport store from 'store';\nimport PrismFormatted from './prism-formatted';\n\nimport './challenge-transcript.css';\n\ninterface ChallengeTranscriptProps {\n  transcript: string;\n}\n\nfunction ChallengeTranscript({\n  transcript\n}: ChallengeTranscriptProps): JSX.Element {\n  const { t } = useTranslation();\n\n// default to collapsed\n  const [isOpen, setIsOpen] = useState(\n    () => (store.get('fcc-transcript-expanded') as boolean | null) ?? false\n  );\n\nfunction toggleExpandedState(e: React.MouseEvent<HTMLDetailsElement>) {\n    e.preventDefault();\n    store.set('fcc-transcript-expanded', !isOpen);\n    setIsOpen(!isOpen);\n  }\n\nreturn (\n    <>\n      <details data-testid='challenge-transcript' open={isOpen}>\n        <summary\n          onClick={toggleExpandedState}\n          aria-expanded={isOpen}\n          className='challenge-transcript-heading'\n        >\n          {t('learn.transcript')}\n        </summary>\n        <Spacer size='m' />\n        <PrismFormatted className={'line-numbers'} text={transcript} />\n      </details>\n      <Spacer size='m' />\n    </>\n  );\n}\n\nChallengeTranscript.displayName = 'ChallengeTranscript';\n\nexport default ChallengeTranscript;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1297,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\challenge-transcript.tsx",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "acdc3aa98cf345b3443af6e101c9017f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.css",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": ".completion-success-icon {\n  width: 200px;\n  height: 200px;\n  transform: scale(1.5);\n  opacity: 0;\n  animation: success-icon-animation 150ms linear 100ms forwards;\n}\n\n@keyframes success-icon-animation {\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.completion-block-details {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-self: center;\n  justify-content: space-between;\n  width: 100%;\n  gap: 0.5rem;\n}\n\n.completion-block-name {\n  font-weight: 700;\n  font-size: 1rem;\n  margin-bottom: 4px;\n}\n\n.completion-block-meta {\n  color: var(--quaternary-color);\n  font-size: 0.8rem;\n  margin-top: 5px;\n}\n\n.completion-block-details .completion-block-name {\n  font-size: 1.2rem;\n}\n\n.completion-block-details .completion-block-meta {\n  font-size: 1rem;\n}\n\n.progress-bar-wrap {\n  width: 100%;\n  position: relative;\n}\n\n.progress-bar-background {\n  width: 100%;\n  height: 10px;\n  color: var(--primary-color);\n  background-color: var(--quaternary-background);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.progress-bar-percent {\n  height: 10px;\n  overflow: hidden;\n  position: relative;\n  background-color: var(--primary-color);\n  transition: width 0ms linear;\n}\n\n/* The maximum width of login button is 500px, which is set in global.css.\n   An override is needed as 500px is not enough to allow the button to span the modal width. */\n.completion-modal-login-btn .signup-btn {\n  max-width: 100%;\n}\n\n.completion-modal-body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n@media screen and (max-width: 991px) {\n  .progress-bar-wrap,\n  .progress-bar-background {\n    height: 10px;\n  }\n\n.completion-success-icon {\n    width: 160px;\n    height: 160px;\n  }",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 1895,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bcf4a1db3d20b3188c42c68d37adfc3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.css",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "position: relative; background-color: var(--primary-color); transition: width 0ms linear; } /* The maximum width of login button is 500px, which is set in global.css. An override is needed as 500px is not enough to allow the button to span the modal width. */ .completion-modal-login-btn .signup-btn { max-width: 100%; } .completion-modal-body { display: flex; flex-direction: column; align-items: center; } @media screen and (max-width: 991px) { .progress-bar-wrap, .progress-bar-background { height: 10px; } .completion-success-icon { width: 160px; height: 160px; }\n\n.completion-message {\n    font-weight: 600;\n    font-size: 1.2rem;\n  }\n\n.completion-block-name {\n    font-size: 1rem;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 1895,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7844c041ad2330f81d754606c29a10db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
    "source_type": "git_repo",
    "title": "completion-modal.test",
    "content": "import React from 'react';\nimport { runSaga } from 'redux-saga';\nimport { render } from '../../../../utils/test-utils';\n\nimport { getCompletedPercentage } from '../../../utils/get-completion-percentage';\nimport { fireConfetti } from '../../../utils/fire-confetti';\nimport { createStore } from '../../../redux/create-store';\nimport { executeChallengeSaga } from '../redux/execute-challenge-saga';\nimport {\n  challengeDataSelector,\n  challengeMetaSelector,\n  challengeTestsSelector,\n  isBuildEnabledSelector,\n  isBlockNewlyCompletedSelector\n} from '../redux/selectors';\nimport { buildChallenge, getTestRunner } from '../utils/build';\nimport CompletionModal, { combineFileData } from './completion-modal';\njest.mock('../../../analytics');\njest.mock('../../../utils/fire-confetti');\njest.mock('../../../components/Progress');\njest.mock('../redux/selectors');\njest.mock('../utils/build');\nconst mockFireConfetti = fireConfetti as jest.Mock;\nconst mockTestRunner = jest.fn().mockReturnValue({ pass: true });\nconst mockBuildEnabledSelector = isBuildEnabledSelector as jest.Mock;\nconst mockChallengeTestsSelector = challengeTestsSelector as jest.Mock;\nconst mockChallengeMetaSelector = challengeMetaSelector as jest.Mock;\nconst mockChallengeDataSelector = challengeDataSelector as jest.Mock;\nconst mockIsBlockNewlyCompletedSelector =\n  isBlockNewlyCompletedSelector as jest.Mock;\nconst mockBuildChallenge = buildChallenge as jest.Mock;\nconst mockGetTestRunner = getTestRunner as jest.Mock;\nmockBuildEnabledSelector.mockReturnValue(true);\nmockChallengeTestsSelector.mockReturnValue([\n  { text: 'Test 1', testString: 'mock test code' }\n]);\nmockChallengeMetaSelector.mockReturnValue({\n  challengeType: 'mock_challenge_type'\n});\nmockChallengeDataSelector.mockReturnValue({\n  challengeFiles: ['mock_challenge_files']\n});\nmockBuildChallenge.mockReturnValue({ challengeType: 'mock_challenge_type' });\nmockGetTestRunner.mockReturnValue(mockTestRunner);\n\nconst completedChallengesIds = ['1', '3', '5'],\n  currentBlockIds = ['1', '3', '5', '7'],\n  id = '7',\n  fakeCompletedChallengesIds = ['1', '3', '5', '7', '8'];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d3fd23b1b2df84ad028e0b3d4d455136",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
    "source_type": "git_repo",
    "title": "completion-modal.test",
    "content": "mockChallengeMetaSelector = challengeMetaSelector as jest.Mock; const mockChallengeDataSelector = challengeDataSelector as jest.Mock; const mockIsBlockNewlyCompletedSelector = isBlockNewlyCompletedSelector as jest.Mock; const mockBuildChallenge = buildChallenge as jest.Mock; const mockGetTestRunner = getTestRunner as jest.Mock; mockBuildEnabledSelector.mockReturnValue(true); mockChallengeTestsSelector.mockReturnValue([ { text: 'Test 1', testString: 'mock test code' } ]); mockChallengeMetaSelector.mockReturnValue({ challengeType: 'mock_challenge_type' }); mockChallengeDataSelector.mockReturnValue({ challengeFiles: ['mock_challenge_files'] }); mockBuildChallenge.mockReturnValue({ challengeType: 'mock_challenge_type' }); mockGetTestRunner.mockReturnValue(mockTestRunner); const completedChallengesIds = ['1', '3', '5'], currentBlockIds = ['1', '3', '5', '7'], id = '7', fakeCompletedChallengesIds = ['1', '3', '5', '7', '8'];\n\ndescribe('<CompletionModal />', () => {\n  describe('fireConfetti', () => {\n    beforeEach(() => {\n      mockFireConfetti.mockClear();\n    });\n    test('should fire when block is completed', async () => {\n      const payload = { showCompletionModal: true };\n      const store = createStore({\n        challenge: {\n          modal: { completion: true },\n          challengeMeta: {\n            id: 'bd7158d8c442eddfaeb5bd18',\n            certification: 'responsive-web-design' // Make sure the certification matches\n          }\n        }\n      });\n      mockIsBlockNewlyCompletedSelector.mockReturnValue(true);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      await runSaga(store, executeChallengeSaga, { payload }).done;\n      expect(mockFireConfetti).toHaveBeenCalledTimes(1);\n    });\n    test('should not fire when block is not completed', async () => {\n      const payload = { showCompletionModal: true };\n      const store = createStore({\n        challenge: {\n          modal: { completion: true },\n          challengeMeta: {\n            id: 'bd7158d8c442eddfaeb5bd18',\n            certification: 'responsive-web-design' // Make sure the certification matches\n          }\n        }\n      });\n      mockIsBlockNewlyCompletedSelector.mockReturnValue(false);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      await runSaga(store, executeChallengeSaga, { payload }).done;\n      expect(mockFireConfetti).toHaveBeenCalledTimes(0);\n    });\n    test('should not fire if certification project has been completed', () => {\n      const store = createStore({\n        challenge: {\n          modal: { completion: true },\n          challengeMeta: {\n            // Build a Tribute Page's id:\n            id: 'bd7158d8c442eddfaeb5bd18'\n          }\n        }\n      });\n      render(<CompletionModal />, store);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 625,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d1f16567e689767e44808ccde014f2c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
    "source_type": "git_repo",
    "title": "completion-modal.test",
    "content": "createStore({ challenge: { modal: { completion: true }, challengeMeta: { id: 'bd7158d8c442eddfaeb5bd18', certification: 'responsive-web-design' // Make sure the certification matches } } }); mockIsBlockNewlyCompletedSelector.mockReturnValue(false); // eslint-disable-next-line @typescript-eslint/ban-ts-comment // @ts-ignore await runSaga(store, executeChallengeSaga, { payload }).done; expect(mockFireConfetti).toHaveBeenCalledTimes(0); }); test('should not fire if certification project has been completed', () => { const store = createStore({ challenge: { modal: { completion: true }, challengeMeta: { // Build a Tribute Page's id: id: 'bd7158d8c442eddfaeb5bd18' } } }); render(<CompletionModal />, store);\n\nexpect(mockFireConfetti).toHaveBeenCalledTimes(0);\n    });\n    test('should NOT fire if the challenge is not a project', () => {\n      const store = createStore({\n        challenge: {\n          modal: { completion: true },\n          challengeMeta: {\n            // id from learn-advanced-array-methods-by-building-a-statistics-calculator:\n            id: '6352e79d15aae30fac58f48e'\n          }\n        }\n      });\n\nrender(<CompletionModal />, store);\n\nexpect(mockFireConfetti).toHaveBeenCalledTimes(0);\n    });\n  });\n\ndescribe('getCompletedPercentage', () => {\n    it('returns 25 if one out of four challenges are complete', () => {\n      expect(\n        getCompletedPercentage([], currentBlockIds, currentBlockIds[1])\n      ).toBe(25);\n    });\n\nit('returns 75 if three out of four challenges are complete', () => {\n      expect(\n        getCompletedPercentage(\n          completedChallengesIds,\n          currentBlockIds,\n          completedChallengesIds[0]\n        )\n      ).toBe(75);\n    });\n\nit('returns 100 if all challenges have been completed', () => {\n      expect(\n        getCompletedPercentage(completedChallengesIds, currentBlockIds, id)\n      ).toBe(100);\n    });\n\nit('returns 100 if more challenges have been complete than exist', () => {\n      expect(\n        getCompletedPercentage(fakeCompletedChallengesIds, currentBlockIds, id)\n      ).toBe(100);\n    });\n  });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5b6d9842055695c68c4c889df0bcec20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
    "source_type": "git_repo",
    "title": "completion-modal.test",
    "content": "25 if one out of four challenges are complete', () => { expect( getCompletedPercentage([], currentBlockIds, currentBlockIds[1]) ).toBe(25); }); it('returns 75 if three out of four challenges are complete', () => { expect( getCompletedPercentage( completedChallengesIds, currentBlockIds, completedChallengesIds[0] ) ).toBe(75); }); it('returns 100 if all challenges have been completed', () => { expect( getCompletedPercentage(completedChallengesIds, currentBlockIds, id) ).toBe(100); }); it('returns 100 if more challenges have been complete than exist', () => { expect( getCompletedPercentage(fakeCompletedChallengesIds, currentBlockIds, id) ).toBe(100); }); });\n\ndescribe('File Download Content', () => {\n    it('Should label each section appropriately', () => {\n      const indexHtml = {\n        name: 'index',\n        ext: 'html',\n        contents: 'some html elements'\n      };\n      const stylesCSS = {\n        name: 'styles',\n        ext: 'css',\n        contents: 'some css styles'\n      };\n      const scriptJS = {\n        name: 'script',\n        ext: 'js',\n        contents: 'some javascript'\n      };\n      const result = combineFileData([indexHtml, stylesCSS, scriptJS]);\n      expect(result).toContain('** start of index.html **');\n      expect(result).toContain('** end of index.html **');\n      expect(result).toContain('** start of styles.css **');\n      expect(result).toContain('** end of styles.css **');\n      expect(result).toContain('** start of script.js **');\n      expect(result).toContain('** end of script.js **');\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "afad21852004b6bd31b9e41c5e451c96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\daily-challenge-bread-crumb.tsx",
    "source_type": "git_repo",
    "title": "daily-challenge-bread-crumb",
    "content": "import i18next from 'i18next';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from '../../../components/helpers/index';\n\nimport './challenge-title.css';\nimport {\n  isValidDateString,\n  formatDisplayDate\n} from '../../../components/daily-coding-challenge/helpers';\n\nfunction DailyChallengeBreadCrumb({\n  dailyChallengeParam\n}: {\n  dailyChallengeParam?: string;\n}): JSX.Element | null {\n  const { t } = useTranslation();\n\nreturn dailyChallengeParam && isValidDateString(dailyChallengeParam) ? (\n    <nav\n      className='challenge-title-breadcrumbs'\n      aria-label={t('aria.breadcrumb-nav')}\n    >\n      <ol data-playwright-test-label='breadcrumb-desktop'>\n        <li className='breadcrumb-left'>\n          <Link to={`/learn`}>\n            <span>{i18next.t(`intro:daily-coding-challenge.title`)}</span>\n          </Link>\n        </li>\n        <li className='breadcrumb-right'>\n          <Link to={`/learn/daily-coding-challenge/archive`}>\n            {formatDisplayDate(dailyChallengeParam)}\n          </Link>\n        </li>\n      </ol>\n    </nav>\n  ) : null;\n}\n\nDailyChallengeBreadCrumb.displayName = 'DailyChallengeBreadCrumb';\n\nexport default DailyChallengeBreadCrumb;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1218,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\daily-challenge-bread-crumb.tsx",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4e548480d9d601f8b8668630c1905c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "import React, { Component } from 'react';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\nimport Login from '../../../components/Header/components/login';\nimport {\n  isSignedInSelector,\n  completedChallengesIdsSelector\n} from '../../../redux/selectors';\nimport { ChallengeFiles } from '../../../redux/prop-types';\nimport { closeModal, submitChallenge } from '../redux/actions';\nimport {\n  isCompletionModalOpenSelector,\n  successMessageSelector,\n  challengeFilesSelector,\n  challengeMetaSelector,\n  isSubmittingSelector\n} from '../redux/selectors';\nimport Progress from '../../../components/Progress';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';\nimport './completion-modal.css';\nimport callGA from '../../../analytics/call-ga';\n\nconst mapStateToProps = createSelector(\n  challengeFilesSelector,\n  challengeMetaSelector,\n  completedChallengesIdsSelector,\n  isCompletionModalOpenSelector,\n  isSignedInSelector,\n  successMessageSelector,\n  isSubmittingSelector,\n  (\n    challengeFiles: ChallengeFiles,\n    { dashedName, id }: { dashedName: string; id: string },\n    completedChallengesIds: string[],\n    isOpen: boolean,\n    isSignedIn: boolean,\n    message: string,\n    isSubmitting: boolean\n  ) => ({\n    challengeFiles,\n    id,\n    dashedName,\n    completedChallengesIds,\n    isOpen,\n    isSignedIn,\n    message,\n    isSubmitting\n  })\n);\n\nconst mapDispatchToProps = {\n  close: () => closeModal('completion'),\n  submitChallenge\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ninterface CompletionModalsProps extends StateProps {\n  close: () => void;\n  submitChallenge: () => void;\n  t: TFunction;\n}\n\ninterface CompletionModalState {\n  downloadURL: null | string;\n}\n\ninterface DownloadableChallengeFile {\n  name: string;\n  ext: string;\n  contents: string;\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6848,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f9fee195ff45f66c24a5d782beb7c1b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "string; id: string }, completedChallengesIds: string[], isOpen: boolean, isSignedIn: boolean, message: string, isSubmitting: boolean ) => ({ challengeFiles, id, dashedName, completedChallengesIds, isOpen, isSignedIn, message, isSubmitting }) ); const mapDispatchToProps = { close: () => closeModal('completion'), submitChallenge }; type StateProps = ReturnType<typeof mapStateToProps>; interface CompletionModalsProps extends StateProps { close: () => void; submitChallenge: () => void; t: TFunction; } interface CompletionModalState { downloadURL: null | string; } interface DownloadableChallengeFile { name: string; ext: string; contents: string; }\n\nclass CompletionModal extends Component<\n  CompletionModalsProps,\n  CompletionModalState\n> {\n  static displayName: string;\n  constructor(props: CompletionModalsProps) {\n    super(props);\n    this.handleKeypress = this.handleKeypress.bind(this);\n    this.state = {\n      downloadURL: null\n    };\n  }\n\nstatic getDerivedStateFromProps(\n    props: Readonly<CompletionModalsProps>,\n    state: CompletionModalState\n  ): CompletionModalState {\n    const { challengeFiles, isOpen } = props;\n    if (!isOpen) {\n      return {\n        downloadURL: null\n      };\n    }\n    const { downloadURL } = state;\n    if (downloadURL) {\n      URL.revokeObjectURL(downloadURL);\n    }\n    let newURL = null;\n    if (challengeFiles?.length) {\n      const allFileContents = combineFileData(challengeFiles);\n      const blob = new Blob([allFileContents], {\n        type: 'text/json'\n      });\n      newURL = URL.createObjectURL(blob);\n    }\n    return {\n      downloadURL: newURL\n    };\n  }\n\nhandleKeypress(e: React.KeyboardEvent): void {\n    if (e.key === 'Escape') {\n      e.stopPropagation();\n      this.props.close();\n    }\n    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      // Since Hotkeys also listens to Ctrl + Enter we have to stop this event\n      // getting to it.\n      e.stopPropagation();\n      this.props.submitChallenge();\n    }\n  }\n\ncomponentWillUnmount(): void {\n    if (this.state.downloadURL) {\n      URL.revokeObjectURL(this.state.downloadURL);\n    }\n    this.props.close();\n  }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6848,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "10e55b6656cfea9a220f595caa982846",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "= combineFileData(challengeFiles); const blob = new Blob([allFileContents], { type: 'text/json' }); newURL = URL.createObjectURL(blob); } return { downloadURL: newURL }; } handleKeypress(e: React.KeyboardEvent): void { if (e.key === 'Escape') { e.stopPropagation(); this.props.close(); } if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) { e.preventDefault(); // Since Hotkeys also listens to Ctrl + Enter we have to stop this event // getting to it. e.stopPropagation(); this.props.submitChallenge(); } } componentWillUnmount(): void { if (this.state.downloadURL) { URL.revokeObjectURL(this.state.downloadURL); } this.props.close(); }\n\ncomponentDidUpdate(prevProps: CompletionModalsProps): void {\n    const { isOpen: prevIsOpen } = prevProps;\n    const { isOpen } = this.props;\n    if (!prevIsOpen && isOpen) {\n      callGA({ event: 'pageview', pagePath: '/completion-modal' });\n    }\n  }\n\nrender(): JSX.Element {\n    const {\n      close,\n      isOpen,\n      isSignedIn,\n      isSubmitting,\n      message,\n      t,\n      dashedName,\n      submitChallenge\n    } = this.props;\n\nconst isMacOS = navigator.userAgent.includes('Mac OS');\n\nconst isDesktop = window.innerWidth > MAX_MOBILE_WIDTH;\n\nlet buttonText;\n    if (isDesktop) {\n      if (isMacOS) {\n        buttonText = isSignedIn\n          ? t('buttons.submit-and-go-cmd')\n          : t('buttons.go-to-next-cmd');\n      } else {\n        buttonText = isSignedIn\n          ? t('buttons.submit-and-go-ctrl')\n          : t('buttons.go-to-next-ctrl');\n      }\n    } else {\n      buttonText = isSignedIn\n        ? t('buttons.submit-and-go')\n        : t('buttons.go-to-next');\n    }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6848,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e059637d410c8524a1014ac659cfa650",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "(!prevIsOpen && isOpen) { callGA({ event: 'pageview', pagePath: '/completion-modal' }); } } render(): JSX.Element { const { close, isOpen, isSignedIn, isSubmitting, message, t, dashedName, submitChallenge } = this.props; const isMacOS = navigator.userAgent.includes('Mac OS'); const isDesktop = window.innerWidth > MAX_MOBILE_WIDTH; let buttonText; if (isDesktop) { if (isMacOS) { buttonText = isSignedIn ? t('buttons.submit-and-go-cmd') : t('buttons.go-to-next-cmd'); } else { buttonText = isSignedIn ? t('buttons.submit-and-go-ctrl') : t('buttons.go-to-next-ctrl'); } } else { buttonText = isSignedIn ? t('buttons.submit-and-go') : t('buttons.go-to-next'); }\n\nreturn (\n      <Modal\n        onClose={close}\n        open={!!isOpen}\n        size='large'\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onKeyDown={isOpen ? this.handleKeypress : undefined}\n      >\n        <Modal.Header closeButtonClassNames='close'>{message}</Modal.Header>\n        <Modal.Body className='completion-modal-body'>\n          <GreenPass\n            className='completion-success-icon'\n            data-testid='fcc-completion-success-icon'\n            data-playwright-test-label='completion-success-icon'\n          />\n          <div className='completion-block-details'>\n            <Progress />\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          {isSignedIn ? null : (\n            <div className='completion-modal-login-btn'>\n              <Login block={true}>{t('learn.sign-in-save')}</Login>\n              <Spacer size='xxs' />\n            </div>\n          )}\n          <Button\n            block={true}\n            size='large'\n            variant='primary'\n            disabled={isSubmitting}\n            onClick={() => submitChallenge()}\n          >\n            {buttonText}\n          </Button>\n          <Spacer size='xxs' />\n          {this.state.downloadURL ? (\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              download={`${dashedName}.txt`}\n              href={this.state.downloadURL}\n            >\n              {t('learn.download-solution')}\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6848,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "804ec06378c7bd4056afef14feaae99e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
    "source_type": "git_repo",
    "title": "completion-modal",
    "content": "onClose={close} open={!!isOpen} size='large' // eslint-disable-next-line @typescript-eslint/unbound-method onKeyDown={isOpen ? this.handleKeypress : undefined} > <Modal.Header closeButtonClassNames='close'>{message}</Modal.Header> <Modal.Body className='completion-modal-body'> <GreenPass className='completion-success-icon' data-testid='fcc-completion-success-icon' data-playwright-test-label='completion-success-icon' /> <div className='completion-block-details'> <Progress /> </div> </Modal.Body> <Modal.Footer> {isSignedIn ? null : ( <div className='completion-modal-login-btn'> <Login block={true}>{t('learn.sign-in-save')}</Login> <Spacer size='xxs' /> </div> )} <Button block={true} size='large' variant='primary' disabled={isSubmitting} onClick={() => submitChallenge()} > {buttonText} </Button> <Spacer size='xxs' /> {this.state.downloadURL ? ( <Button block={true} size='large' variant='primary' download={`${dashedName}.txt`} href={this.state.downloadURL} > {t('learn.download-solution')} </Button> ) : null} </Modal.Footer> </Modal> ); } }\n\nCompletionModal.displayName = 'CompletionModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(CompletionModal));\n\nexport function combineFileData(challengeFiles: DownloadableChallengeFile[]) {\n  return challengeFiles.reduce<string>(function (\n    allFiles: string,\n    currentFile: DownloadableChallengeFile\n  ) {\n    const beforeText = `** start of ${currentFile.name + '.' + currentFile.ext} **\\n\\n`;\n    const afterText = `\\n\\n** end of ${currentFile.name + '.' + currentFile.ext} **\\n\\n`;\n    allFiles +=\n      challengeFiles.length > 0\n        ? `${beforeText}${currentFile.contents}${afterText}`\n        : currentFile.contents;\n    return allFiles;\n  }, '');\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6848,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\completion-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "58258d26d015cccd551f18d8a58cecdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.css",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": ".alert > p > strong {\n  color: inherit;\n}\n\n.fa-circle-exclamation {\n  font-size: 3rem;\n  padding-bottom: 10px;\n}\n\n.help-form-legend {\n  color: var(--secondary-color);\n  border: 0;\n  font-size: 18px;\n}\n\n.checkbox-container {\n  display: flex;\n  width: 100%;\n  text-align: left;\n}\n\n.help-text-warning {\n  text-align: left;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 322,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 94,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a0b21247b03afd885aa59df35b907d3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\fill-in-the-blanks.tsx",
    "source_type": "git_repo",
    "title": "fill-in-the-blanks",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport { parseBlanks } from '../fill-in-the-blank/parse-blanks';\nimport PrismFormatted from '../components/prism-formatted';\nimport { FillInTheBlank } from '../../../redux/prop-types';\nimport ChallengeHeading from './challenge-heading';\n\ntype FillInTheBlankProps = {\n  fillInTheBlank: FillInTheBlank;\n  answersCorrect: (boolean | null)[];\n  showFeedback: boolean;\n  feedback: string | null;\n  showWrong: boolean;\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction FillInTheBlanks({\n  fillInTheBlank: { sentence, blanks },\n  answersCorrect,\n  showFeedback,\n  feedback,\n  showWrong,\n  handleInputChange\n}: FillInTheBlankProps): JSX.Element {\n  const { t } = useTranslation();\n\nconst getInputClass = (index: number): string => {\n    let cls = 'fill-in-the-blank-input';\n\nif (answersCorrect[index] === false) {\n      cls += ' incorrect-blank-answer';\n    }\n\nreturn cls;\n  };\n\nconst paragraphs = parseBlanks(sentence);\n  const blankAnswers = blanks.map(b => b.answer);\n\nreturn (\n    <>\n      <ChallengeHeading heading={t('learn.fill-in-the-blank.heading')} />\n      <Spacer size='xs' />\n      <div className='fill-in-the-blank-wrap'>\n        {paragraphs.map((p, i) => {\n          return (\n            // both keys, i and j, are stable between renders, since\n            // the paragraphs are static.\n            <p key={i}>\n              {p.map((node, j) => {\n                const { type, value } = node;\n                if (type === 'text') {\n                  return value;\n                }\n\n// If a blank is answered correctly, render the answer as part of the sentence.\n                if (type === 'blank' && answersCorrect[value] === true) {\n                  return (\n                    <span key={j} className='correct-blank-answer'>\n                      {blankAnswers[value]}\n                    </span>\n                  );\n                }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3180,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\fill-in-the-blanks.tsx",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f66b1afb0101a837e17e5110204f35f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\fill-in-the-blanks.tsx",
    "source_type": "git_repo",
    "title": "fill-in-the-blanks",
    "content": "{paragraphs.map((p, i) => { return ( // both keys, i and j, are stable between renders, since // the paragraphs are static. <p key={i}> {p.map((node, j) => { const { type, value } = node; if (type === 'text') { return value; } // If a blank is answered correctly, render the answer as part of the sentence. if (type === 'blank' && answersCorrect[value] === true) { return ( <span key={j} className='correct-blank-answer'> {blankAnswers[value]} </span> ); }\n\nreturn (\n                  <input\n                    key={j}\n                    type='text'\n                    maxLength={blankAnswers[value].length + 3}\n                    className={getInputClass(value)}\n                    onChange={handleInputChange}\n                    data-index={node.value}\n                    size={blankAnswers[value].length}\n                    autoComplete='off'\n                    aria-label={t('learn.fill-in-the-blank.blank')}\n                    {...(answersCorrect[value] === false\n                      ? { 'aria-invalid': 'true' }\n                      : {})}\n                  />\n                );\n              })}\n            </p>\n          );\n        })}\n      </div>\n      <Spacer size='m' />\n      <div aria-live='polite'>\n        {showWrong && (\n          <div className='text-center'>\n            <span>{t('learn.wrong-answer')}</span>\n            <Spacer size='m' />\n          </div>\n        )}\n        {showFeedback && feedback && <PrismFormatted text={feedback} />}\n      </div>\n    </>\n  );\n}\n\nFillInTheBlanks.displayName = 'FillInTheBlanks';\n\nexport default FillInTheBlanks;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3180,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\fill-in-the-blanks.tsx",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b11e1e22d46fe75453556bcd29fd7170",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.test.tsx",
    "source_type": "git_repo",
    "title": "help-modal.test",
    "content": "import i18n from '../../../../i18n/config-for-tests';\nimport { generateSearchLink } from './help-modal';\n\ndescribe('generateSearchLink', () => {\n  it(\"should return a link with search query containing block name and challenge title if the title includes 'step'\", async () => {\n    await i18n.reloadResources('en', 'intro');\n    const link = generateSearchLink(\n      'Step 10',\n      'learn-basic-javascript-by-building-a-role-playing-game',\n      'javascript-algorithms-and-data-structures-v8'\n    );\n\nexpect(link).toBe(\n      'https://forum.freecodecamp.org/search?q=javascript-algorithms-and-data-structures-v8.blocks.learn-basic-javascript-by-building-a-role-playing-game.title%20-%20Step%2010%20in%3Atitle'\n    );\n  });\n\nit(\"should return a link with search query containing block name and challenge title if the title includes 'task'\", () => {\n    const link = generateSearchLink(\n      'Task 10',\n      'learn-greetings-in-your-first-day-at-the-office',\n      'a2-english-for-developers'\n    );\n\nexpect(link).toBe(\n      'https://forum.freecodecamp.org/search?q=a2-english-for-developers.blocks.learn-greetings-in-your-first-day-at-the-office.title%20-%20Task%2010%20in%3Atitle'\n    );\n  });\n\nit(\"should return a link with search query containing only challenge title if the title does not include 'step' or 'task'\", () => {\n    const link = generateSearchLink(\n      'Perform Basic String Formatting in C#',\n      'write-your-first-code-using-c-sharp',\n      'foundational-c-sharp-with-microsoft'\n    );\n\nexpect(link).toBe(\n      'https://forum.freecodecamp.org/search?q=foundational-c-sharp-with-microsoft.blocks.write-your-first-code-using-c-sharp.title%20-%20Perform%20Basic%20String%20Formatting%20in%20C%23%20in%3Atitle'\n    );\n  });\n});",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1767,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.test.tsx",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a0fcc1ee1904a5e22871a53fcd76a41e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.css",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "/* hide the outline for the HotKeys component */\ndiv[tabindex='-1']:focus {\n  outline-color: transparent;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 108,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.css",
      "source_type": "git_repo"
    },
    "token_count": 26,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9fff7b711c772a8f84d418236d476144",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "import { navigate } from 'gatsby';\nimport React from 'react';\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport type {\n  ChallengeFiles,\n  Test,\n  ChallengeMeta,\n  User\n} from '../../../redux/prop-types';\nimport { userSelector } from '../../../redux/selectors';\nimport {\n  setEditorFocusability,\n  submitChallenge,\n  openModal,\n  setIsAdvancing\n} from '../redux/actions';\nimport {\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeMetaSelector,\n  challengeTestsSelector,\n  isHelpModalOpenSelector,\n  isProjectPreviewModalOpenSelector,\n  isResetModalOpenSelector,\n  isShortcutsModalOpenSelector\n} from '../redux/selectors';\nimport './hotkeys.css';\nimport { isProjectBased } from '../../../utils/curriculum-layout';\nimport type { EditorProps } from '../classic/editor';\n\nconst mapStateToProps = createSelector(\n  isHelpModalOpenSelector,\n  isResetModalOpenSelector,\n  isShortcutsModalOpenSelector,\n  isProjectPreviewModalOpenSelector,\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeTestsSelector,\n  userSelector,\n  challengeMetaSelector,\n  (\n    isHelpModalOpen: boolean,\n    isResetModalOpen: boolean,\n    isShortcutsModalOpen: boolean,\n    isProjectPreviewModalOpen: boolean,\n    canFocusEditor: boolean,\n    challengeFiles: ChallengeFiles,\n    tests: Test[],\n    user: User | null,\n    { nextChallengePath, prevChallengePath }: ChallengeMeta\n  ) => ({\n    isHelpModalOpen,\n    isResetModalOpen,\n    isShortcutsModalOpen,\n    isProjectPreviewModalOpen,\n    canFocusEditor,\n    challengeFiles,\n    tests,\n    keyboardShortcuts: !!user?.keyboardShortcuts,\n    nextChallengePath,\n    prevChallengePath\n  })\n);\n\nconst mapDispatchToProps = {\n  setEditorFocusability,\n  submitChallenge,\n  openShortcutsModal: () => openModal('shortcuts'),\n  setIsAdvancing\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a0f2c9c269d9f5e70e972569acf0e290",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "isProjectBased } from '../../../utils/curriculum-layout'; import type { EditorProps } from '../classic/editor'; const mapStateToProps = createSelector( isHelpModalOpenSelector, isResetModalOpenSelector, isShortcutsModalOpenSelector, isProjectPreviewModalOpenSelector, canFocusEditorSelector, challengeFilesSelector, challengeTestsSelector, userSelector, challengeMetaSelector, ( isHelpModalOpen: boolean, isResetModalOpen: boolean, isShortcutsModalOpen: boolean, isProjectPreviewModalOpen: boolean, canFocusEditor: boolean, challengeFiles: ChallengeFiles, tests: Test[], user: User | null, { nextChallengePath, prevChallengePath }: ChallengeMeta ) => ({ isHelpModalOpen, isResetModalOpen, isShortcutsModalOpen, isProjectPreviewModalOpen, canFocusEditor, challengeFiles, tests, keyboardShortcuts: !!user?.keyboardShortcuts, nextChallengePath, prevChallengePath }) ); const mapDispatchToProps = { setEditorFocusability, submitChallenge, openShortcutsModal: () => openModal('shortcuts'), setIsAdvancing };\n\nexport type HotkeysProps = Pick<\n  ChallengeMeta,\n  'nextChallengePath' | 'prevChallengePath'\n> &\n  Partial<\n    Pick<\n      EditorProps,\n      'usesMultifileEditor' | 'editorRef' | 'challengeType' | 'executeChallenge'\n    >\n  > &\n  Pick<\n    EditorProps,\n    | 'containerRef'\n    | 'tests'\n    | 'challengeFiles'\n    | 'submitChallenge'\n    | 'setEditorFocusability'\n  > & {\n    isHelpModalOpen?: boolean;\n    isResetModalOpen?: boolean;\n    isShortcutsModalOpen?: boolean;\n    isProjectPreviewModalOpen?: boolean;\n    canFocusEditor: boolean;\n    children: React.ReactElement;\n    instructionsPanelRef?: React.RefObject<HTMLElement>;\n    setEditorFocusability: (arg0: boolean) => void;\n    setIsAdvancing: (arg0: boolean) => void;\n    openShortcutsModal: () => void;\n    playScene?: () => void;\n    keyboardShortcuts: boolean;\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "dbf3f37d4195702de2181ae8f45905e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "setIsAdvancing }; export type HotkeysProps = Pick< ChallengeMeta, 'nextChallengePath' | 'prevChallengePath' > & Partial< Pick< EditorProps, 'usesMultifileEditor' | 'editorRef' | 'challengeType' | 'executeChallenge' > > & Pick< EditorProps, | 'containerRef' | 'tests' | 'challengeFiles' | 'submitChallenge' | 'setEditorFocusability' > & { isHelpModalOpen?: boolean; isResetModalOpen?: boolean; isShortcutsModalOpen?: boolean; isProjectPreviewModalOpen?: boolean; canFocusEditor: boolean; children: React.ReactElement; instructionsPanelRef?: React.RefObject<HTMLElement>; setEditorFocusability: (arg0: boolean) => void; setIsAdvancing: (arg0: boolean) => void; openShortcutsModal: () => void; playScene?: () => void; keyboardShortcuts: boolean; };\n\nfunction Hotkeys({\n  canFocusEditor,\n  challengeType,\n  children,\n  instructionsPanelRef,\n  editorRef,\n  executeChallenge,\n  containerRef,\n  nextChallengePath,\n  prevChallengePath,\n  setEditorFocusability,\n  setIsAdvancing,\n  submitChallenge,\n  tests,\n  usesMultifileEditor,\n  openShortcutsModal,\n  playScene,\n  keyboardShortcuts,\n  isHelpModalOpen,\n  isResetModalOpen,\n  isShortcutsModalOpen,\n  isProjectPreviewModalOpen\n}: HotkeysProps): JSX.Element {\n  const isModalOpen = [\n    isHelpModalOpen,\n    isResetModalOpen,\n    isShortcutsModalOpen,\n    isProjectPreviewModalOpen\n  ].some(Boolean);\n\nconst keyMap = {\n    // The Modal component needs to listen to the 'Escape' keypress event\n    // in order to close itself when the key is press.\n    // Therefore, we don't want HotKeys to hijack the 'escape' event when a modal is open.\n    navigationMode: isModalOpen ? '' : 'escape',\n    executeChallenge: ['ctrl+enter', 'command+enter'],\n    focusEditor: 'e',\n    focusInstructionsPanel: 'r',\n    navigatePrev: ['p'],\n    navigateNext: ['n'],\n    showShortcuts: 'shift+/',\n    playScene: ['ctrl+space']\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "08fb5698476c18ff5cd4552da29c7120",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "JSX.Element { const isModalOpen = [ isHelpModalOpen, isResetModalOpen, isShortcutsModalOpen, isProjectPreviewModalOpen ].some(Boolean); const keyMap = { // The Modal component needs to listen to the 'Escape' keypress event // in order to close itself when the key is press. // Therefore, we don't want HotKeys to hijack the 'escape' event when a modal is open. navigationMode: isModalOpen ? '' : 'escape', executeChallenge: ['ctrl+enter', 'command+enter'], focusEditor: 'e', focusInstructionsPanel: 'r', navigatePrev: ['p'], navigateNext: ['n'], showShortcuts: 'shift+/', playScene: ['ctrl+space'] };\n\nconst handlers = {\n    executeChallenge: (keyEvent?: KeyboardEvent) => {\n      // the 'enter' part of 'ctrl+enter' stops HotKeys from listening, so it\n      // needs to be prevented.\n      // TODO: 'enter' on its own also disables HotKeys, but default behaviour\n      // should not be prevented in that case.\n      keyEvent?.preventDefault();\n\nif (!executeChallenge) return;\n\nconst testsArePassing = tests.every(test => test.pass && !test.err);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c54014f2b31babac115fceba015d33ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": ": 'escape', executeChallenge: ['ctrl+enter', 'command+enter'], focusEditor: 'e', focusInstructionsPanel: 'r', navigatePrev: ['p'], navigateNext: ['n'], showShortcuts: 'shift+/', playScene: ['ctrl+space'] }; const handlers = { executeChallenge: (keyEvent?: KeyboardEvent) => { // the 'enter' part of 'ctrl+enter' stops HotKeys from listening, so it // needs to be prevented. // TODO: 'enter' on its own also disables HotKeys, but default behaviour // should not be prevented in that case. keyEvent?.preventDefault(); if (!executeChallenge) return; const testsArePassing = tests.every(test => test.pass && !test.err);\n\nif (\n        usesMultifileEditor &&\n        typeof challengeType == 'number' &&\n        !isProjectBased(challengeType)\n      ) {\n        if (testsArePassing) {\n          submitChallenge();\n        } else {\n          executeChallenge();\n        }\n      } else {\n        executeChallenge({ showCompletionModal: true });\n      }\n    },\n    ...(keyboardShortcuts\n      ? {\n          showShortcuts: (keyEvent?: KeyboardEvent) => {\n            if (keyEvent?.key === '?') {\n              openShortcutsModal();\n            }\n          },\n          focusEditor: (keyEvent?: KeyboardEvent) => {\n            keyEvent?.preventDefault();\n            if (editorRef && editorRef.current) {\n              editorRef.current.focus();\n            }\n          },\n          focusInstructionsPanel: () => {\n            if (instructionsPanelRef && instructionsPanelRef.current) {\n              instructionsPanelRef.current.focus();\n            }\n          },\n          navigationMode: () => setEditorFocusability(false),\n          navigatePrev: () => {\n            if (!canFocusEditor) {\n              if (prevChallengePath) {\n                setIsAdvancing(true);\n                void navigate(prevChallengePath);\n              } else {\n                void navigate('/learn');\n              }\n            }\n          },\n          navigateNext: () => {\n            if (!canFocusEditor) {\n              if (nextChallengePath) {\n                setIsAdvancing(true);\n                void navigate(nextChallengePath);\n              } else {\n                void navigate('/learn');\n              }\n            }\n          },\n          playScene: () => {\n            if (!playScene) return;\n            playScene();\n          }\n        }\n      : {})\n  };\n  // GlobalHotKeys is always mounted and tracks all keypresses. Without it,\n  // keyup events can be missed and react-hotkeys assumes that key is still\n  // being pressed.\n  // allowChanges is necessary if the handlers depend on props (in this case\n  // canFocusEditor)\n  return (\n    <HotKeys\n      id='editor-layout'\n      data-playwright-test-label='hotkeys'\n      allowChanges={true}\n      handlers={handlers}\n      innerRef={containerRef}\n      keyMap={keyMap}\n    >\n      {children}\n      <GlobalHotKeys />\n    </HotKeys>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "dd4df06d2298dfa602352d9c1db708d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
    "source_type": "git_repo",
    "title": "hotkeys",
    "content": "void navigate('/learn'); } } }, playScene: () => { if (!playScene) return; playScene(); } } : {}) }; // GlobalHotKeys is always mounted and tracks all keypresses. Without it, // keyup events can be missed and react-hotkeys assumes that key is still // being pressed. // allowChanges is necessary if the handlers depend on props (in this case // canFocusEditor) return ( <HotKeys id='editor-layout' data-playwright-test-label='hotkeys' allowChanges={true} handlers={handlers} innerRef={containerRef} keyMap={keyMap} > {children} <GlobalHotKeys /> </HotKeys> ); }\n\nHotkeys.displayName = 'Hotkeys';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Hotkeys);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6660,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\hotkeys.tsx",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "4fc9649de20a28c2b0e53e64396ce889",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "import React, { useMemo, useState, useRef, useEffect } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { Button, FormControl, Modal, Spacer } from '@freecodecamp/ui';\n\nimport { t } from 'i18next';\nimport envData from '../../../../config/env.json';\nimport { createQuestion, closeModal } from '../redux/actions';\nimport { isHelpModalOpenSelector } from '../redux/selectors';\n\nimport './help-modal.css';\nimport callGA from '../../../analytics/call-ga';\n\ninterface HelpModalProps {\n  closeHelpModal: () => void;\n  createQuestion: (description: string) => void;\n  isOpen?: boolean;\n  challengeTitle: string;\n  challengeBlock: string;\n  superBlock: string;\n}\n\nconst { forumLocation } = envData;\nconst DESCRIPTION_MIN_CHARS = 50;\nconst DESCRIPTION_MAX_CHARS = 500;\nconst RSA = forumLocation + '/t/19514';\n\nconst mapStateToProps = (state: unknown) => ({\n  isOpen: isHelpModalOpenSelector(state) as boolean\n});\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    { createQuestion, closeHelpModal: () => closeModal('help') },\n    dispatch\n  );\n\nexport const generateSearchLink = (\n  title: string,\n  block: string,\n  superBlock: string\n) => {\n  const titleText = t(`intro:${superBlock}.blocks.${block}.title`);\n  const selector = 'in:title';\n  const query = encodeURIComponent(`${titleText} - ${title} ${selector}`);\n\nconst search = `${forumLocation}/search?q=${query}`;\n  return search;\n};\n\ninterface CheckboxProps {\n  name: string;\n  i18nKey: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  value: boolean;\n  href: string;\n  label: string;\n}\n\nfunction Checkbox({\n  name,\n  i18nKey,\n  onChange,\n  value,\n  href,\n  label\n}: CheckboxProps) {\n  const { t } = useTranslation();",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "e383adc1f6f46692ea48cb39b64061fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "closeModal('help') }, dispatch ); export const generateSearchLink = ( title: string, block: string, superBlock: string ) => { const titleText = t(`intro:${superBlock}.blocks.${block}.title`); const selector = 'in:title'; const query = encodeURIComponent(`${titleText} - ${title} ${selector}`); const search = `${forumLocation}/search?q=${query}`; return search; }; interface CheckboxProps { name: string; i18nKey: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void; value: boolean; href: string; label: string; } function Checkbox({ name, i18nKey, onChange, value, href, label }: CheckboxProps) { const { t } = useTranslation();\n\nreturn (\n    <div className='checkbox-container'>\n      <input\n        id={name}\n        name={name}\n        type='checkbox'\n        onChange={onChange}\n        checked={value}\n        required\n        // Instead of reusing the `i18nKey`, use a plain text version for label\n        // as input label should not contain interactive elements\n        aria-label={t(label)}\n      />\n\n<span>\n        <Trans i18nKey={i18nKey}>\n          <a href={href} rel='noopener noreferrer' target='_blank'>\n            placeholder\n            <span className='sr-only'>{t('aria.opens-new-window')}</span>\n          </a>\n        </Trans>\n      </span>\n    </div>\n  );\n}\n\nfunction HelpModal({\n  closeHelpModal,\n  createQuestion,\n  isOpen,\n  challengeBlock,\n  superBlock,\n  challengeTitle\n}: HelpModalProps): JSX.Element {\n  const { t } = useTranslation();\n  const [showHelpForm, setShowHelpForm] = useState(false);\n  const [description, setDescription] = useState('');\n  const [readSearchCheckbox, setReadSearchCheckbox] = useState(false);\n  const [similarQuestionsCheckbox, setSimilarQuestionsCheckbox] =\n    useState(false);\n\nconst formRef = useRef<HTMLFormElement>(null);\n\nuseEffect(() => {\n    if (showHelpForm) {\n      formRef.current?.querySelector('input')?.focus();\n    }\n  }, [showHelpForm]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "095cbd5fc16ca088e6cecfd84ecdfbbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "should not contain interactive elements aria-label={t(label)} /> <span> <Trans i18nKey={i18nKey}> <a href={href} rel='noopener noreferrer' target='_blank'> placeholder <span className='sr-only'>{t('aria.opens-new-window')}</span> </a> </Trans> </span> </div> ); } function HelpModal({ closeHelpModal, createQuestion, isOpen, challengeBlock, superBlock, challengeTitle }: HelpModalProps): JSX.Element { const { t } = useTranslation(); const [showHelpForm, setShowHelpForm] = useState(false); const [description, setDescription] = useState(''); const [readSearchCheckbox, setReadSearchCheckbox] = useState(false); const [similarQuestionsCheckbox, setSimilarQuestionsCheckbox] = useState(false); const formRef = useRef<HTMLFormElement>(null); useEffect(() => { if (showHelpForm) { formRef.current?.querySelector('input')?.focus(); } }, [showHelpForm]);\n\nconst canSubmitForm = useMemo(() => {\n    return (\n      description.length >= DESCRIPTION_MIN_CHARS &&\n      readSearchCheckbox &&\n      similarQuestionsCheckbox\n    );\n  }, [description, readSearchCheckbox, similarQuestionsCheckbox]);\n\nconst resetFormValues = () => {\n    setDescription('');\n    setReadSearchCheckbox(false);\n    setSimilarQuestionsCheckbox(false);\n  };\n\nconst handleClose = () => {\n    closeHelpModal();\n    setShowHelpForm(false);\n    resetFormValues();\n  };\n\nconst handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\nif (!canSubmitForm) {\n      return;\n    }\n\nsetShowHelpForm(false);\n    resetFormValues();\n    createQuestion(description);\n    closeHelpModal();\n  };\n\nif (isOpen) {\n    callGA({ event: 'pageview', pagePath: '/help-modal' });\n  }\n  return (\n    <Modal onClose={handleClose} open={!!isOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('buttons.ask-for-help')}\n      </Modal.Header>\n      <Modal.Body>\n        {showHelpForm ? (\n          <form onSubmit={handleSubmit} ref={formRef}>\n            <fieldset>\n              <legend className='help-form-legend'>\n                {t('learn.must-confirm-statements')}\n              </legend>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "585310a5635fa31911de8c24955aff27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "&& similarQuestionsCheckbox ); }, [description, readSearchCheckbox, similarQuestionsCheckbox]); const resetFormValues = () => { setDescription(''); setReadSearchCheckbox(false); setSimilarQuestionsCheckbox(false); }; const handleClose = () => { closeHelpModal(); setShowHelpForm(false); resetFormValues(); }; const handleSubmit = (event: React.FormEvent) => { event.preventDefault(); if (!canSubmitForm) { return; } setShowHelpForm(false); resetFormValues(); createQuestion(description); closeHelpModal(); }; if (isOpen) { callGA({ event: 'pageview', pagePath: '/help-modal' }); } return ( <Modal onClose={handleClose} open={!!isOpen}> <Modal.Header closeButtonClassNames='close'> {t('buttons.ask-for-help')} </Modal.Header> <Modal.Body> {showHelpForm ? ( <form onSubmit={handleSubmit} ref={formRef}> <fieldset> <legend className='help-form-legend'> {t('learn.must-confirm-statements')} </legend>\n\n<Checkbox\n                name='read-search-ask-checkbox'\n                i18nKey='learn.read-search-ask-checkbox'\n                label='aria.rsa-checkbox'\n                onChange={event => setReadSearchCheckbox(event.target.checked)}\n                value={readSearchCheckbox}\n                href={RSA}\n              />\n\n<Spacer size='xs' />\n\n<Checkbox\n                name='similar-questions-checkbox'\n                i18nKey='learn.similar-questions-checkbox'\n                label='aria.similar-questions-checkbox'\n                onChange={event =>\n                  setSimilarQuestionsCheckbox(event.target.checked)\n                }\n                value={similarQuestionsCheckbox}\n                href={generateSearchLink(\n                  challengeTitle,\n                  challengeBlock,\n                  superBlock\n                )}\n              />\n            </fieldset>\n\n<Spacer size='s' />\n\n<label htmlFor='help-modal-form-description'>\n              {t('forum-help.whats-happening')}\n              <span className='sr-only'>{t('learn.min-50-max-500')}</span>\n            </label>\n\n<FormControl\n              id='help-modal-form-description'\n              name='description'\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setDescription(event.target.value);\n              }}\n              componentClass='textarea'\n              rows={5}\n              value={description}\n              placeholder={t('forum-help.describe')}\n              minLength={DESCRIPTION_MIN_CHARS}\n              maxLength={DESCRIPTION_MAX_CHARS}\n              required\n            />\n\n<Spacer size='s' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "d3a83c4052e19cacf9eddf9030161785",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "onClose={handleClose} open={!!isOpen}> <Modal.Header closeButtonClassNames='close'> {t('buttons.ask-for-help')} </Modal.Header> <Modal.Body> {showHelpForm ? ( <form onSubmit={handleSubmit} ref={formRef}> <fieldset> <legend className='help-form-legend'> {t('learn.must-confirm-statements')} </legend> <Checkbox name='read-search-ask-checkbox' i18nKey='learn.read-search-ask-checkbox' label='aria.rsa-checkbox' onChange={event => setReadSearchCheckbox(event.target.checked)} value={readSearchCheckbox} href={RSA} /> <Spacer size='xs' /> <Checkbox name='similar-questions-checkbox' i18nKey='learn.similar-questions-checkbox' label='aria.similar-questions-checkbox' onChange={event => setSimilarQuestionsCheckbox(event.target.checked) } value={similarQuestionsCheckbox} href={generateSearchLink( challengeTitle, challengeBlock, superBlock )} /> </fieldset> <Spacer size='s' /> <label htmlFor='help-modal-form-description'> {t('forum-help.whats-happening')} <span className='sr-only'>{t('learn.min-50-max-500')}</span> </label> <FormControl id='help-modal-form-description' name='description' onChange={(event: React.ChangeEvent<HTMLInputElement>) => { setDescription(event.target.value); }} componentClass='textarea' rows={5} value={description} placeholder={t('forum-help.describe')} minLength={DESCRIPTION_MIN_CHARS} maxLength={DESCRIPTION_MAX_CHARS} required /> <Spacer size='s' />\n\n{description.length < DESCRIPTION_MIN_CHARS ? (\n              <p>\n                {t('learn.minimum-characters', {\n                  characters: DESCRIPTION_MIN_CHARS - description.length\n                })}\n              </p>\n            ) : (\n              <p>\n                {t('learn.characters-left', {\n                  characters: DESCRIPTION_MAX_CHARS - description.length\n                })}\n              </p>\n            )}\n\n<Spacer size='xxs' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "61f82aa3e6b0368b84dec443b9d8373c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": "/> <Checkbox name='similar-questions-checkbox' i18nKey='learn.similar-questions-checkbox' label='aria.similar-questions-checkbox' onChange={event => setSimilarQuestionsCheckbox(event.target.checked) } value={similarQuestionsCheckbox} href={generateSearchLink( challengeTitle, challengeBlock, superBlock )} /> </fieldset> <Spacer size='s' /> <label htmlFor='help-modal-form-description'> {t('forum-help.whats-happening')} <span className='sr-only'>{t('learn.min-50-max-500')}</span> </label> <FormControl id='help-modal-form-description' name='description' onChange={(event: React.ChangeEvent<HTMLInputElement>) => { setDescription(event.target.value); }} componentClass='textarea' rows={5} value={description} placeholder={t('forum-help.describe')} minLength={DESCRIPTION_MIN_CHARS} maxLength={DESCRIPTION_MAX_CHARS} required /> <Spacer size='s' /> {description.length < DESCRIPTION_MIN_CHARS ? ( <p> {t('learn.minimum-characters', { characters: DESCRIPTION_MIN_CHARS - description.length })} </p> ) : ( <p> {t('learn.characters-left', { characters: DESCRIPTION_MAX_CHARS - description.length })} </p> )} <Spacer size='xxs' />\n\n<Button\n              block={true}\n              size='large'\n              variant='primary'\n              type='submit'\n              disabled={!canSubmitForm}\n            >\n              {t('buttons.submit')}\n            </Button>\n            <Spacer size='xxs' />\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={handleClose}\n            >\n              {t('buttons.cancel')}\n            </Button>\n          </form>\n        ) : (\n          <>\n            <div className='alert'>\n              <div className='help-text-warning'>\n                <p>\n                  <Trans i18nKey='learn.tried-rsa'>\n                    <a href={RSA} rel='noopener noreferrer' target='_blank'>\n                      placeholder\n                    </a>\n                  </Trans>\n                </p>\n                <p>\n                  <Trans i18nKey='learn.rsa-forum'>\n                    <a\n                      href={generateSearchLink(\n                        challengeTitle,\n                        challengeBlock,\n                        superBlock\n                      )}\n                      rel='noopener noreferrer'\n                      target='_blank'\n                    >\n                      placeholder\n                    </a>\n                    placeholder\n                  </Trans>\n                </p>\n              </div>\n            </div>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "ed39a1080a433f14be9790e42bb31b67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
    "source_type": "git_repo",
    "title": "help-modal",
    "content": ": ( <p> {t('learn.characters-left', { characters: DESCRIPTION_MAX_CHARS - description.length })} </p> )} <Spacer size='xxs' /> <Button block={true} size='large' variant='primary' type='submit' disabled={!canSubmitForm} > {t('buttons.submit')} </Button> <Spacer size='xxs' /> <Button block={true} size='large' variant='primary' onClick={handleClose} > {t('buttons.cancel')} </Button> </form> ) : ( <> <div className='alert'> <div className='help-text-warning'> <p> <Trans i18nKey='learn.tried-rsa'> <a href={RSA} rel='noopener noreferrer' target='_blank'> placeholder </a> </Trans> </p> <p> <Trans i18nKey='learn.rsa-forum'> <a href={generateSearchLink( challengeTitle, challengeBlock, superBlock )} rel='noopener noreferrer' target='_blank' > placeholder </a> placeholder </Trans> </p> </div> </div>\n\n<Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={() => setShowHelpForm(true)}\n            >\n              {t('buttons.create-post')}\n            </Button>\n            <Spacer size='xxs' />\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={closeHelpModal}\n            >\n              {t('buttons.cancel')}\n            </Button>\n          </>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nHelpModal.displayName = 'HelpModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HelpModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8702,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\help-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "4e699c9cde092cb3a59cc95f2462146e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.css",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": ".independent-lower-jaw {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  z-index: 10;\n}\n\n.independent-lower-jaw .hint-container {\n  background-color: var(--background-quaternary);\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 12px;\n  margin: 12px;\n}\n\n.independent-lower-jaw .btn-cta {\n  padding: 4px 10px;\n}\n\n.independent-lower-jaw .buttons-row-container {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  background-color: var(--background-secondary);\n  border: var(--background-quaternary) 1px solid;\n  padding: 12px;\n}\n\n.action-row-right {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.independent-lower-jaw .hint-container button {\n  height: 30px;\n  font-size: 1.5rem;\n  min-width: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: none;\n}\n\n.independent-lower-jaw .action-row-right button {\n  height: 40px;\n  width: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  margin-left: 10px;\n}\n\n.independent-lower-jaw .tooltip {\n  position: relative;\n  display: inline-block;\n}\n\n/* Tooltip text */\n.independent-lower-jaw .tooltip .tooltiptext {\n  visibility: hidden;\n  opacity: 0;\n  background-color: var(--background-quaternary);\n  color: var(--foreground-primary);\n  border: 1px solid var(--foreground-secondary);\n  padding: 5px 10px;\n  font-size: 1rem;\n  text-align: center;\n  position: absolute;\n  top: -60px;\n  z-index: 1;\n}\n\n/* Show the tooltip text when you mouse over the tooltip container */\n.independent-lower-jaw .tooltip:hover .tooltiptext {\n  visibility: visible;\n  opacity: 1;\n  transition: opacity 0.5s ease 0.5s;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 2201,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.css",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d344d0a80b55d323b198d33ef981d33d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.css",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": "align-items: center; border: none; margin-left: 10px; } .independent-lower-jaw .tooltip { position: relative; display: inline-block; } /* Tooltip text */ .independent-lower-jaw .tooltip .tooltiptext { visibility: hidden; opacity: 0; background-color: var(--background-quaternary); color: var(--foreground-primary); border: 1px solid var(--foreground-secondary); padding: 5px 10px; font-size: 1rem; text-align: center; position: absolute; top: -60px; z-index: 1; } /* Show the tooltip text when you mouse over the tooltip container */ .independent-lower-jaw .tooltip:hover .tooltiptext { visibility: visible; opacity: 1; transition: opacity 0.5s ease 0.5s; }\n\n.tooltiptext::after {\n  content: '';\n  position: absolute;\n  display: block;\n  width: 0.5rem;\n  height: 0.5rem;\n  border-style: solid;\n  border-width: 0px 1px 1px 0px;\n  border-color: var(--color-border-primary);\n  transform: rotate(45deg);\n  bottom: -5px;\n  left: calc(50% - 0.25rem);\n  background-image: linear-gradient(\n    to top left,\n    var(--background-quaternary) 55%,\n    rgba(0, 0, 0, 0) 20%\n  );\n}\n\n.independent-lower-jaw .tooltip .tooltiptext.left-tooltip {\n  left: 0;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 2201,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.css",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "61b60829b68a60307f12d875b150d71d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@freecodecamp/ui';\nimport { Test } from '../../../redux/prop-types';\nimport { challengeTestsSelector } from '../redux/selectors';\nimport { isSignedInSelector } from '../../../redux/selectors';\nimport { apiLocation } from '../../../../config/env.json';\nimport { openModal, submitChallenge, executeChallenge } from '../redux/actions';\nimport Help from '../../../assets/icons/help';\nimport callGA from '../../../analytics/call-ga';\n\nimport './independent-lower-jaw.css';\nimport Reset from '../../../assets/icons/reset';\n\nconst mapStateToProps = createSelector(\n  challengeTestsSelector,\n  isSignedInSelector,\n  (tests: Test[], isSignedIn: boolean) => ({\n    tests,\n    isSignedIn\n  })\n);\n\nconst mapDispatchToProps = {\n  openHelpModal: () => openModal('help'),\n  openResetModal: () => openModal('reset'),\n  executeChallenge,\n  submitChallenge\n};\n\ninterface IndependentLowerJawProps {\n  openHelpModal: () => void;\n  openResetModal: () => void;\n  executeChallenge: () => void;\n  submitChallenge: () => void;\n  tests: Test[];\n  isSignedIn: boolean;\n}\nexport function IndependentLowerJaw({\n  openHelpModal,\n  openResetModal,\n  executeChallenge,\n  submitChallenge,\n  tests,\n  isSignedIn\n}: IndependentLowerJawProps): JSX.Element {\n  const { t } = useTranslation();\n  const firstFailedTest = tests.find(test => !!test.err);\n  const hint = firstFailedTest?.message;\n  const [showHint, setShowHint] = React.useState(false);\n  const [showSubmissionHint, setShowSubmissionHint] = React.useState(true);\n\nconst isChallengeComplete = tests.every(test => test.pass);\n\nReact.useEffect(() => {\n    setShowHint(!!hint);\n  }, [hint]);\n\nconst isMacOS = navigator.userAgent.includes('Mac OS');\n  const checkButtonText = isMacOS ? t('command-enter') : t('ctrl-enter');",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "75e5d498f9fcaa7f28aae6522863c42f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": "() => void; submitChallenge: () => void; tests: Test[]; isSignedIn: boolean; } export function IndependentLowerJaw({ openHelpModal, openResetModal, executeChallenge, submitChallenge, tests, isSignedIn }: IndependentLowerJawProps): JSX.Element { const { t } = useTranslation(); const firstFailedTest = tests.find(test => !!test.err); const hint = firstFailedTest?.message; const [showHint, setShowHint] = React.useState(false); const [showSubmissionHint, setShowSubmissionHint] = React.useState(true); const isChallengeComplete = tests.every(test => test.pass); React.useEffect(() => { setShowHint(!!hint); }, [hint]); const isMacOS = navigator.userAgent.includes('Mac OS'); const checkButtonText = isMacOS ? t('command-enter') : t('ctrl-enter');\n\nreturn (\n    <div className='independent-lower-jaw' tabIndex={-1}>\n      {showHint && hint && (\n        <div className='hint-container'>\n          <div dangerouslySetInnerHTML={{ __html: hint }} />\n          <button className={'tooltip'} onClick={() => setShowHint(false)}>\n            ×<span className='tooltiptext'> {t('buttons.close')}</span>\n          </button>\n        </div>\n      )}\n      {isChallengeComplete && showSubmissionHint && (\n        <div className='hint-container'>\n          <div>\n            <p>{t('learn.congratulations-code-passes')}</p>\n            {!isSignedIn && (\n              <a\n                href={`${apiLocation}/signin`}\n                className='btn-cta btn btn-block'\n                onClick={() => {\n                  callGA({\n                    event: 'sign_in'\n                  });\n                }}\n              >\n                {t('learn.sign-in-save')}\n              </a>\n            )}\n          </div>\n          <button\n            className={'tooltip'}\n            onClick={() => setShowSubmissionHint(false)}\n          >\n            ×<span className='tooltiptext'> {t('buttons.close')}</span>\n          </button>\n        </div>\n      )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "39a5347c7d6d525151015f3370aff361",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": "isMacOS ? t('command-enter') : t('ctrl-enter'); return ( <div className='independent-lower-jaw' tabIndex={-1}> {showHint && hint && ( <div className='hint-container'> <div dangerouslySetInnerHTML={{ __html: hint }} /> <button className={'tooltip'} onClick={() => setShowHint(false)}> ×<span className='tooltiptext'> {t('buttons.close')}</span> </button> </div> )} {isChallengeComplete && showSubmissionHint && ( <div className='hint-container'> <div> <p>{t('learn.congratulations-code-passes')}</p> {!isSignedIn && ( <a href={`${apiLocation}/signin`} className='btn-cta btn btn-block' onClick={() => { callGA({ event: 'sign_in' }); }} > {t('learn.sign-in-save')} </a> )} </div> <button className={'tooltip'} onClick={() => setShowSubmissionHint(false)} > ×<span className='tooltiptext'> {t('buttons.close')}</span> </button> </div> )}\n\n<div className='buttons-row-container'>\n        <div className='action-row-left'>\n          {isChallengeComplete ? (\n            <Button\n              block\n              className={`${isSignedIn && 'btn-cta'} tooltip`}\n              onClick={() => submitChallenge()}\n            >\n              {t('buttons.submit-continue')}\n              <span className='tooltiptext left-tooltip '>\n                {checkButtonText}\n              </span>\n            </Button>\n          ) : (\n            <button\n              type='button'\n              className='btn-cta tooltip'\n              onClick={() => executeChallenge()}\n            >\n              {t('buttons.check-code')}\n              <span className='tooltiptext left-tooltip '>\n                {checkButtonText}\n              </span>\n            </button>\n          )}\n        </div>\n        <div className='action-row-right'>\n          <button\n            type='button'\n            className='icon-botton tooltip'\n            onClick={openResetModal}\n          >\n            <Reset />\n            <span className='tooltiptext'> {t('buttons.reset')}</span>\n          </button>\n          <button\n            type='button'\n            className='icon-botton tooltip'\n            onClick={openHelpModal}\n          >\n            <Help />\n            <span className='tooltiptext'> {t('buttons.help')}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "13dff245a6c3f5b2594b55aae4d06ab2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
    "source_type": "git_repo",
    "title": "independent-lower-jaw",
    "content": "className='buttons-row-container'> <div className='action-row-left'> {isChallengeComplete ? ( <Button block className={`${isSignedIn && 'btn-cta'} tooltip`} onClick={() => submitChallenge()} > {t('buttons.submit-continue')} <span className='tooltiptext left-tooltip '> {checkButtonText} </span> </Button> ) : ( <button type='button' className='btn-cta tooltip' onClick={() => executeChallenge()} > {t('buttons.check-code')} <span className='tooltiptext left-tooltip '> {checkButtonText} </span> </button> )} </div> <div className='action-row-right'> <button type='button' className='icon-botton tooltip' onClick={openResetModal} > <Reset /> <span className='tooltiptext'> {t('buttons.reset')}</span> </button> <button type='button' className='icon-botton tooltip' onClick={openHelpModal} > <Help /> <span className='tooltiptext'> {t('buttons.help')}</span> </button> </div> </div> </div> ); }\n\nIndependentLowerJaw.displayName = 'IndependentLowerJaw';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(IndependentLowerJaw);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4703,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\independent-lower-jaw.tsx",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0df52f8f5d96007c48fd1fc893633c3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\notes.tsx",
    "source_type": "git_repo",
    "title": "notes",
    "content": "import React from 'react';\nimport PrismFormatted from './prism-formatted';\n\ninterface NotesProps {\n  notes?: string;\n}\n\nfunction Notes({ notes }: NotesProps): JSX.Element | null {\n  return notes ? <PrismFormatted text={notes} /> : null;\n}\n\nNotes.displayName = 'Notes';\n\nexport default Notes;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\notes.tsx",
      "source_type": "git_repo"
    },
    "token_count": 66,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5492dad013c1d69ae6f2f17e52a8f4f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
    "source_type": "git_repo",
    "title": "multiple-choice-questions",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Spacer } from '@freecodecamp/ui';\nimport { Question } from '../../../redux/prop-types';\nimport ChallengeHeading from './challenge-heading';\nimport PrismFormatted from './prism-formatted';\n\ntype MultipleChoiceQuestionsProps = {\n  questions: Question[];\n  selectedOptions: (number | null)[];\n  handleOptionChange: (questionIndex: number, answerIndex: number) => void;\n  submittedMcqAnswers: (number | null)[];\n  showFeedback: boolean;\n};\n\nfunction removeParagraphTags(text: string): string {\n  return text.replace(/^<p>|<\\/p>$/g, '');\n}\n\nfunction MultipleChoiceQuestions({\n  questions,\n  selectedOptions,\n  handleOptionChange,\n  submittedMcqAnswers,\n  showFeedback\n}: MultipleChoiceQuestionsProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <>\n      <ChallengeHeading\n        heading={\n          questions.length > 1 ? t('learn.questions') : t('learn.question')\n        }\n      />\n      {questions.map((question, questionIndex) => (\n        <fieldset key={questionIndex}>\n          <legend className='mcq-question-text'>\n            <PrismFormatted className={'line-numbers'} text={question.text} />\n          </legend>\n          <div className='video-quiz-options'>\n            {question.answers.map(({ answer }, answerIndex) => {\n              const isSubmittedAnswer =\n                submittedMcqAnswers[questionIndex] === answerIndex;\n              const feedback =\n                questions[questionIndex].answers[answerIndex].feedback;\n              const isCorrect =\n                submittedMcqAnswers[questionIndex] ===\n                // -1 because the solution is 1-indexed\n                questions[questionIndex].solution - 1;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bc69e5ecd6397f73dabdb2a8d67e9050",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
    "source_type": "git_repo",
    "title": "multiple-choice-questions",
    "content": "MultipleChoiceQuestions({ questions, selectedOptions, handleOptionChange, submittedMcqAnswers, showFeedback }: MultipleChoiceQuestionsProps): JSX.Element { const { t } = useTranslation(); return ( <> <ChallengeHeading heading={ questions.length > 1 ? t('learn.questions') : t('learn.question') } /> {questions.map((question, questionIndex) => ( <fieldset key={questionIndex}> <legend className='mcq-question-text'> <PrismFormatted className={'line-numbers'} text={question.text} /> </legend> <div className='video-quiz-options'> {question.answers.map(({ answer }, answerIndex) => { const isSubmittedAnswer = submittedMcqAnswers[questionIndex] === answerIndex; const feedback = questions[questionIndex].answers[answerIndex].feedback; const isCorrect = submittedMcqAnswers[questionIndex] === // -1 because the solution is 1-indexed questions[questionIndex].solution - 1;\n\nreturn (\n                <React.Fragment key={answerIndex}>\n                  <label\n                    className={`video-quiz-option-label \n                      ${showFeedback && isSubmittedAnswer ? 'mcq-hide-border' : ''} \n                      ${showFeedback && isSubmittedAnswer ? (isCorrect ? 'mcq-correct-border' : 'mcq-incorrect-border') : ''}`}\n                    htmlFor={`mc-question-${questionIndex}-answer-${answerIndex}`}\n                  >\n                    <input\n                      name={`mc-question-${questionIndex}`}\n                      checked={selectedOptions[questionIndex] === answerIndex}\n                      className='sr-only'\n                      onChange={() =>\n                        handleOptionChange(questionIndex, answerIndex)\n                      }\n                      type='radio'\n                      value={answerIndex}\n                      id={`mc-question-${questionIndex}-answer-${answerIndex}`}\n                    />{' '}\n                    <span className='video-quiz-input-visible'>\n                      {selectedOptions[questionIndex] === answerIndex ? (\n                        <span className='video-quiz-selected-input' />\n                      ) : null}\n                    </span>\n                    <PrismFormatted\n                      className={'video-quiz-option'}\n                      text={removeParagraphTags(answer)}\n                      useSpan\n                      noAria\n                    />\n                  </label>\n                  {showFeedback && isSubmittedAnswer && (\n                    <div\n                      className={`video-quiz-option-label mcq-feedback ${isCorrect ? 'mcq-correct' : 'mcq-incorrect'}`}\n                    >\n                      <p>\n                        {isCorrect\n                          ? t('learn.quiz.correct-answer')\n                          : t('learn.quiz.incorrect-answer')}\n                      </p>\n                      {feedback && (\n                        <p>\n                          <PrismFormatted\n                            className={\n                              isCorrect\n                                ? 'mcq-prism-correct'\n                                : 'mcq-prism-incorrect'\n                            }\n                            text={removeParagraphTags(feedback)}\n                            useSpan\n                            noAria\n                          />\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </div>\n          <Spacer size='m' />\n        </fieldset>\n      ))}\n      <Spacer size='m' />\n    </>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 639,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e229407beb3f6b48921d6c2171ee46bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
    "source_type": "git_repo",
    "title": "multiple-choice-questions",
    "content": "className='video-quiz-input-visible'> {selectedOptions[questionIndex] === answerIndex ? ( <span className='video-quiz-selected-input' /> ) : null} </span> <PrismFormatted className={'video-quiz-option'} text={removeParagraphTags(answer)} useSpan noAria /> </label> {showFeedback && isSubmittedAnswer && ( <div className={`video-quiz-option-label mcq-feedback ${isCorrect ? 'mcq-correct' : 'mcq-incorrect'}`} > <p> {isCorrect ? t('learn.quiz.correct-answer') : t('learn.quiz.incorrect-answer')} </p> {feedback && ( <p> <PrismFormatted className={ isCorrect ? 'mcq-prism-correct' : 'mcq-prism-incorrect' } text={removeParagraphTags(feedback)} useSpan noAria /> </p> )} </div> )} </React.Fragment> ); })} </div> <Spacer size='m' /> </fieldset> ))} <Spacer size='m' /> </> ); }\n\nMultipleChoiceQuestions.displayName = 'MultipleChoiceQuestions';\n\nexport default MultipleChoiceQuestions;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\multiple-choice-questions.tsx",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1d71514749c4871e4b0cd6e5894bebb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\output.css",
    "source_type": "git_repo",
    "title": "output",
    "content": ".output-text {\n  white-space: pre-wrap;\n  word-break: normal;\n  padding-top: 0;\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n}\n\npre.output-text code {\n  background-color: var(--quaternary-background);\n  color: var(--tertiary-color);\n  font-size: 90%;\n  padding: 2px 4px;\n}\n\n.output-text:focus-visible {\n  outline-offset: -2px;\n}\n\n@supports not selector(:focus-visible) {\n  .output-text:focus {\n    outline-offset: -2px;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 432,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\output.css",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cfc2b6710c8672809955441ef1c3180c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\output.tsx",
    "source_type": "git_repo",
    "title": "output",
    "content": "import { isEmpty } from 'lodash-es';\nimport React from 'react';\nimport sanitizeHtml from 'sanitize-html';\nimport i18next from 'i18next';\n\nimport './output.css';\n\ninterface OutputProps {\n  defaultOutput: string;\n  output: string;\n}\n\nfunction Output({ defaultOutput, output }: OutputProps): JSX.Element {\n  const message = sanitizeHtml(!isEmpty(output) ? output : defaultOutput, {\n    allowedTags: ['b', 'i', 'em', 'strong', 'code', 'wbr']\n  });\n  return (\n    <pre\n      className='output-text'\n      data-playwright-test-label='output-text'\n      dangerouslySetInnerHTML={{ __html: message }}\n      role='region'\n      aria-label={i18next.t('learn.editor-tabs.console')}\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n      tabIndex={0}\n    />\n  );\n}\n\nexport default Output;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 798,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\output.tsx",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "004e12857c01b029e8a69ccb7400ab48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview.css",
    "source_type": "git_repo",
    "title": "preview",
    "content": ".challenge-preview,\n.challenge-preview-frame {\n  height: 100%;\n  width: 100%;\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: white;\n}\n\n.enable-iframe {\n  pointer-events: auto;\n}\n\n.disable-iframe {\n  pointer-events: none;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 239,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview.css",
      "source_type": "git_repo"
    },
    "token_count": 67,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "90767876d2ada2bbfa1b5675e9b3196a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview.tsx",
    "source_type": "git_repo",
    "title": "preview",
    "content": "import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { mainPreviewId, scrollManager } from '../utils/frame';\n\nimport './preview.css';\n\nexport interface PreviewProps {\n  className?: string;\n  disableIframe?: boolean;\n  previewMounted: () => void;\n  previewId?: string;\n}\n\nfunction Preview({\n  disableIframe,\n  previewMounted,\n  previewId\n}: PreviewProps): JSX.Element {\n  const { t } = useTranslation();\n  const [iframeStatus, setIframeStatus] = useState<boolean | undefined>(false);\n  const iframeToggle = iframeStatus ? 'disable' : 'enable';\n\nuseEffect(() => {\n    previewMounted();\n  }, [previewMounted]);\n\nuseEffect(() => {\n    setIframeStatus(disableIframe);\n  }, [disableIframe]);\n\nuseEffect(() => {\n    return () => {\n      scrollManager.setPreviewScrollPosition(0);\n    };\n  }, []);\n\nconst id = previewId ?? mainPreviewId;\n\nreturn (\n    <div\n      data-playwright-test-label='preview-iframe'\n      className={`notranslate challenge-preview ${iframeToggle}-iframe`}\n    >\n      <iframe\n        className={'challenge-preview-frame'}\n        id={id}\n        title={t('learn.chal-preview')}\n      />\n    </div>\n  );\n}\n\nPreview.displayName = 'Preview';\n\nexport default Preview;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1245,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview.tsx",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4380c9527bca1fd950467171e3b25060",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\prism-formatted.tsx",
    "source_type": "git_repo",
    "title": "prism-formatted",
    "content": "import Prism from 'prismjs';\nimport React, { useRef, useEffect } from 'react';\nimport { enhancePrismAccessibility } from '../utils';\n\ninterface PrismFormattedProps {\n  className?: string;\n  text: string;\n  useSpan?: boolean;\n  noAria?: boolean;\n}\n\nfunction PrismFormatted({\n  className,\n  text,\n  useSpan,\n  noAria\n}: PrismFormattedProps): JSX.Element {\n  const instructionsRef = useRef<HTMLDivElement>(null);\n  const ElementName = useSpan ? 'span' : 'div';\n\nif (noAria) {\n    text = text.replace(/<pre( [^>]+)?>/, '<pre$1 data-no-aria=\"true\">');\n  }\n\nuseEffect(() => {\n    // Just in case 'current' has not been created, though it should have been.\n    if (instructionsRef.current) {\n      Prism.hooks.add('complete', enhancePrismAccessibility);\n      Prism.highlightAllUnder(instructionsRef.current);\n    }\n  }, []);\n\nreturn (\n    <ElementName\n      className={className}\n      dangerouslySetInnerHTML={{ __html: text }}\n      ref={instructionsRef}\n    />\n  );\n}\n\nPrismFormatted.displayName = 'PrismFormatted';\n\nexport default PrismFormatted;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1051,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\prism-formatted.tsx",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "06d074f750d320730d5c5c0d0e5f78d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\project-preview-modal.css",
    "source_type": "git_repo",
    "title": "project-preview-modal",
    "content": ".project-preview-modal-body {\n  line-height: 0;\n  padding: 0;\n  min-height: 70vh;\n  height: 70vh;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\project-preview-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 34,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "14e9f1f1f07e784e706125125742de6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
    "source_type": "git_repo",
    "title": "preview-portal",
    "content": "import { Component, ReactElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport {\n  storePortalWindow,\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane,\n  setIsAdvancing,\n  setChapterSlug\n} from '../redux/actions';\nimport {\n  showPreviewPortalSelector,\n  portalWindowSelector,\n  isAdvancingToChallengeSelector,\n  chapterSlugSelector\n} from '../redux/selectors';\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';\n\ninterface PreviewPortalProps {\n  children: ReactElement | null;\n  windowTitle: string;\n  t: TFunction;\n  storePortalWindow: (window: Window | null) => void;\n  removePortalWindow: () => void;\n  showPreviewPortal: boolean;\n  portalWindow: null | Window;\n  setShowPreviewPortal: (arg: boolean) => void;\n  setShowPreviewPane: (arg: boolean) => void;\n  setIsAdvancing: (arg: boolean) => void;\n  isAdvancing: boolean;\n  setChapterSlug: (arg: string) => void;\n  chapterSlug: string;\n  onResize: () => void;\n}\n\nconst mapDispatchToProps = {\n  storePortalWindow,\n  removePortalWindow,\n  setShowPreviewPortal,\n  setShowPreviewPane,\n  setIsAdvancing,\n  setChapterSlug\n};\n\nconst mapStateToProps = createSelector(\n  isAdvancingToChallengeSelector,\n  chapterSlugSelector,\n  showPreviewPortalSelector,\n  portalWindowSelector,\n  (\n    isAdvancing: boolean,\n    chapterSlug: string,\n    showPreviewPortal: boolean,\n    portalWindow: null | Window\n  ) => ({\n    isAdvancing,\n    chapterSlug,\n    showPreviewPortal,\n    portalWindow\n  })\n);\n\nconst getChapterSlug = (w: Window): string => {\n  const urlSegments = w.location.href.split('/');\n  // minus two to account for starting at zero and skipping the \"step\" number segment\n  return urlSegments[urlSegments.length - 2];\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5168,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "615da26367442cb967774123d43acd9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
    "source_type": "git_repo",
    "title": "preview-portal",
    "content": "onResize: () => void; } const mapDispatchToProps = { storePortalWindow, removePortalWindow, setShowPreviewPortal, setShowPreviewPane, setIsAdvancing, setChapterSlug }; const mapStateToProps = createSelector( isAdvancingToChallengeSelector, chapterSlugSelector, showPreviewPortalSelector, portalWindowSelector, ( isAdvancing: boolean, chapterSlug: string, showPreviewPortal: boolean, portalWindow: null | Window ) => ({ isAdvancing, chapterSlug, showPreviewPortal, portalWindow }) ); const getChapterSlug = (w: Window): string => { const urlSegments = w.location.href.split('/'); // minus two to account for starting at zero and skipping the \"step\" number segment return urlSegments[urlSegments.length - 2]; };\n\nclass PreviewPortal extends Component<PreviewPortalProps> {\n  static displayName = 'PreviewPortal';\n  mainWindow: Window;\n  externalWindow: Window | null = null;\n  isAdvancing: boolean;\n  chapterSlug: string;\n  containerEl;\n  titleEl;\n  styleEl;\n\nconstructor(props: PreviewPortalProps) {\n    super(props);\n    this.mainWindow = window;\n    this.externalWindow = this.props.portalWindow;\n    this.isAdvancing = this.props.isAdvancing;\n    this.chapterSlug = this.props.chapterSlug;\n    this.containerEl = document.createElement('div');\n    this.titleEl = document.createElement('title');\n    this.styleEl = document.createElement('style');\n  }\n\ncomponentDidMount() {\n    const { t, windowTitle } = this.props;\n\nif (!this.externalWindow) {\n      this.externalWindow = window.open(\n        '',\n        '',\n        'width=960,height=540,left=100,top=100'\n      );\n      this.props.setChapterSlug(getChapterSlug(this.mainWindow));\n    } else {\n      this.externalWindow.document.head.innerHTML = '';\n      this.externalWindow.document.body.innerHTML = '';\n    }\n\nthis.titleEl.innerText = `${t(\n      'learn.editor-tabs.preview'\n    )} | ${windowTitle}`;\n\nthis.styleEl.innerHTML = `\n      #fcc-main-frame {\n        width: 100%;\n        height: 100%;\n        border: none;\n      }\n    `;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5168,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1e35cbe6b54295c82263c8c051dc3831",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
    "source_type": "git_repo",
    "title": "preview-portal",
    "content": "constructor(props: PreviewPortalProps) { super(props); this.mainWindow = window; this.externalWindow = this.props.portalWindow; this.isAdvancing = this.props.isAdvancing; this.chapterSlug = this.props.chapterSlug; this.containerEl = document.createElement('div'); this.titleEl = document.createElement('title'); this.styleEl = document.createElement('style'); } componentDidMount() { const { t, windowTitle } = this.props; if (!this.externalWindow) { this.externalWindow = window.open( '', '', 'width=960,height=540,left=100,top=100' ); this.props.setChapterSlug(getChapterSlug(this.mainWindow)); } else { this.externalWindow.document.head.innerHTML = ''; this.externalWindow.document.body.innerHTML = ''; } this.titleEl.innerText = `${t( 'learn.editor-tabs.preview' )} | ${windowTitle}`; this.styleEl.innerHTML = ` #fcc-main-frame { width: 100%; height: 100%; border: none; } `;\n\nthis.externalWindow?.document.head.appendChild(this.titleEl);\n    this.externalWindow?.document.head.appendChild(this.styleEl);\n    this.externalWindow?.document.body.setAttribute(\n      'style',\n      `\n        margin: 0px;\n        padding: 0px;\n        overflow: hidden;\n      `\n    );\n    this.externalWindow?.document.body.appendChild(this.containerEl);\n    this.externalWindow?.addEventListener('beforeunload', () => {\n      this.props.setShowPreviewPortal(false);\n      if (this.mainWindow.innerWidth < MAX_MOBILE_WIDTH) {\n        this.props.setShowPreviewPane(true);\n      }\n      this.props.removePortalWindow();\n    });\n\nthis.externalWindow?.addEventListener('resize', () => {\n      this.props.onResize();\n    });\n\nthis.props.storePortalWindow(this.externalWindow);\n\n// close the portal if the main window closes\n    this.mainWindow?.addEventListener('beforeunload', () => {\n      this.externalWindow?.close();\n    });\n  }\n\ncomponentWillUnmount() {\n    const currentSlug = getChapterSlug(this.mainWindow);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5168,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4a4712d317faa86d8a58e9879f0505db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
    "source_type": "git_repo",
    "title": "preview-portal",
    "content": "= `${t( 'learn.editor-tabs.preview' )} | ${windowTitle}`; this.styleEl.innerHTML = ` #fcc-main-frame { width: 100%; height: 100%; border: none; } `; this.externalWindow?.document.head.appendChild(this.titleEl); this.externalWindow?.document.head.appendChild(this.styleEl); this.externalWindow?.document.body.setAttribute( 'style', ` margin: 0px; padding: 0px; overflow: hidden; ` ); this.externalWindow?.document.body.appendChild(this.containerEl); this.externalWindow?.addEventListener('beforeunload', () => { this.props.setShowPreviewPortal(false); if (this.mainWindow.innerWidth < MAX_MOBILE_WIDTH) { this.props.setShowPreviewPane(true); } this.props.removePortalWindow(); }); this.externalWindow?.addEventListener('resize', () => { this.props.onResize(); }); this.props.storePortalWindow(this.externalWindow); // close the portal if the main window closes this.mainWindow?.addEventListener('beforeunload', () => { this.externalWindow?.close(); }); } componentWillUnmount() { const currentSlug = getChapterSlug(this.mainWindow);\n\n// if not moving between pages in chapters and chapter slug changes\n    if (!this.props.isAdvancing && currentSlug !== this.props.chapterSlug) {\n      // means we navigated away from current chapter so close preview window\n      this.props.setChapterSlug('');\n      this.externalWindow?.close();\n      this.props.removePortalWindow();\n      // else if moving between pages in chapters\n    } else if (this.props.isAdvancing) {\n      // if moving from one chapter to the next\n      if (currentSlug !== this.props.chapterSlug) {\n        // update chapter slug\n        this.props.setChapterSlug(currentSlug);\n      }\n\n// set moving chapter state to false now\n      this.props.setIsAdvancing(false);\n    }\n  }\n\nrender() {\n    return ReactDOM.createPortal(this.props.children, this.containerEl);\n  }\n}\n\nPreviewPortal.displayName = 'PreviewPortal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(PreviewPortal));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5168,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\preview-portal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6c69e0b5294ed6baab737013a5aaa8bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\project-preview-modal.tsx",
    "source_type": "git_repo",
    "title": "project-preview-modal",
    "content": "import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport type { ChallengeData } from '../../../redux/prop-types';\nimport {\n  closeModal,\n  setEditorFocusability,\n  projectPreviewMounted\n} from '../redux/actions';\nimport { isProjectPreviewModalOpenSelector } from '../redux/selectors';\nimport { projectPreviewId } from '../utils/frame';\nimport Preview from './preview';\n\nimport './project-preview-modal.css';\n\ninterface ProjectPreviewMountedPayload {\n  challengeData: ChallengeData | null;\n}\n\ninterface Props {\n  closeModal: (arg: string) => void;\n  isOpen: boolean;\n  projectPreviewMounted: (payload: ProjectPreviewMountedPayload) => void;\n  challengeData?: ChallengeData | null;\n  setEditorFocusability: (focusability: boolean) => void;\n  previewTitle: string;\n  closeText: string;\n}\n\nconst mapStateToProps = (state: unknown) => ({\n  isOpen: isProjectPreviewModalOpenSelector(state) as boolean\n});\nconst mapDispatchToProps = {\n  closeModal,\n  setEditorFocusability,\n  projectPreviewMounted\n};\n\nfunction ProjectPreviewModal({\n  closeModal,\n  isOpen,\n  projectPreviewMounted,\n  challengeData = null,\n  setEditorFocusability,\n  previewTitle,\n  closeText\n}: Props): JSX.Element {\n  useEffect(() => {\n    if (isOpen) setEditorFocusability(false);\n  });\n\nreturn (\n    <Modal\n      size='large'\n      onClose={() => {\n        closeModal('projectPreview');\n        setEditorFocusability(true);\n      }}\n      open={isOpen}\n    >\n      <Modal.Header closeButtonClassNames='close'>{previewTitle}</Modal.Header>\n      <Modal.Body className='project-preview-modal-body'>\n        <Preview\n          previewId={projectPreviewId}\n          previewMounted={() => projectPreviewMounted({ challengeData })}\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          block={true}\n          size='large'\n          variant='primary'\n          onClick={() => {\n            closeModal('projectPreview');\n            setEditorFocusability(true);\n          }}\n        >\n          {closeText}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nProjectPreviewModal.displayName = 'ProjectPreviewModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProjectPreviewModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2278,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\project-preview-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "26e8d0d1b3f0cb00b3d4de3dfd4cdca6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\reset-modal.tsx",
    "source_type": "git_repo",
    "title": "reset-modal",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport { closeModal, resetChallenge } from '../redux/actions';\nimport { isResetModalOpenSelector } from '../redux/selectors';\nimport callGA from '../../../analytics/call-ga';\nimport { canSaveToDB } from '../../../../../shared/config/challenge-types';\n\ninterface ResetModalProps {\n  close: () => void;\n  isOpen: boolean;\n  challengeType: number;\n  reset: () => void;\n  challengeTitle: string;\n}\n\nconst mapStateToProps = createSelector(\n  isResetModalOpenSelector,\n  (isOpen: boolean) => ({\n    isOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      close: () => closeModal('reset'),\n      reset: () => resetChallenge()\n    },\n    dispatch\n  );\n\nfunction withActions(...fns: Array<() => void>) {\n  return () => fns.forEach(fn => fn());\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2261,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\reset-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "60c5a53e18d4f94fd50c5a208e64c882",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\reset-modal.tsx",
    "source_type": "git_repo",
    "title": "reset-modal",
    "content": "isResetModalOpenSelector } from '../redux/selectors'; import callGA from '../../../analytics/call-ga'; import { canSaveToDB } from '../../../../../shared/config/challenge-types'; interface ResetModalProps { close: () => void; isOpen: boolean; challengeType: number; reset: () => void; challengeTitle: string; } const mapStateToProps = createSelector( isResetModalOpenSelector, (isOpen: boolean) => ({ isOpen }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { close: () => closeModal('reset'), reset: () => resetChallenge() }, dispatch ); function withActions(...fns: Array<() => void>) { return () => fns.forEach(fn => fn()); }\n\nfunction ResetModal({\n  reset,\n  close,\n  challengeType,\n  isOpen,\n  challengeTitle\n}: ResetModalProps): JSX.Element {\n  const { t } = useTranslation();\n  if (isOpen) {\n    callGA({ event: 'pageview', pagePath: '/reset-modal' });\n  }\n  return (\n    <Modal onClose={close} open={isOpen} variant='danger'>\n      <Modal.Header showCloseButton={true} closeButtonClassNames='close'>\n        {t('learn.reset')}\n      </Modal.Header>\n      <Modal.Body alignment='center'>\n        <p>\n          {canSaveToDB(challengeType)\n            ? t('learn.revert-warn')\n            : t('learn.reset-warn', {\n                title: challengeTitle\n              })}\n        </p>\n        <p>\n          <em>{t('learn.reset-warn-2')}</em>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          block={true}\n          size='large'\n          variant='danger'\n          onClick={withActions(reset, close)}\n        >\n          {canSaveToDB(challengeType)\n            ? t('buttons.revert-to-saved-code')\n            : t('buttons.reset-lesson')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nResetModal.displayName = 'ResetModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2261,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\reset-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3fbe46c7f55aaddbfd824046bc133a0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.css",
    "source_type": "git_repo",
    "title": "shortcuts-modal",
    "content": ".shortcuts-modal-table {\n  width: 100%;\n  margin-bottom: 2rem !important;\n}\n\n.shortcuts-modal-table caption {\n  text-align: center;\n}\n\n.shortcuts-modal-table th {\n  font-weight: bold;\n  text-align: center;\n}\n\n.shortcuts-modal-table tbody tr {\n  line-height: 2rem;\n  border-bottom: 1px solid #ccc;\n}\n\n.shortcuts-modal-table tbody tr td:nth-child(2) {\n  text-align: right;\n  font-weight: bold;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 394,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 102,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d24acef60d1913bea262b165a20b132",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.css",
    "source_type": "git_repo",
    "title": "side-panel",
    "content": ".MathJax,\n.MathJax_SVG,\n.MathJax_Display {\n  max-width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n\n.instructions-panel {\n  position: relative;\n  padding: 0 10px;\n  overflow-y: scroll;\n  height: 100%;\n  width: 100%;\n}\n\n#mobile-layout-pane-instructions > .instructions-panel {\n  height: auto;\n  overflow-y: none;\n}\n\n.example-app-link {\n  text-decoration: underline;\n}\n\n.example-app-link:hover,\n.example-app-link:active,\n.example-app-link:focus {\n  text-decoration: none;\n  background-color: var(--tertiary-background);\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 527,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.css",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7ae6a8744cd7a3d7e1621c27bea304ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
    "source_type": "git_repo",
    "title": "shortcuts-modal",
    "content": "import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport { closeModal } from '../redux/actions';\nimport { isShortcutsModalOpenSelector } from '../redux/selectors';\nimport { updateMyKeyboardShortcuts } from '../../../redux/settings/actions';\nimport { userSelector } from '../../../redux/selectors';\nimport type { User } from '../../../redux/prop-types';\nimport KeyboardShortcutsSettings from '../../../components/settings/keyboard-shortcuts';\n\nimport './shortcuts-modal.css';\n\ninterface ShortcutsModalProps {\n  closeShortcutsModal: () => void;\n  toggleKeyboardShortcuts: (keyboardShortcuts: boolean) => void;\n  isOpen: boolean;\n  t: (text: string) => string;\n  keyboardShortcuts: boolean;\n}\n\nconst mapStateToProps = createSelector(\n  isShortcutsModalOpenSelector,\n  userSelector,\n  (isOpen: boolean, user: User | null) => ({\n    isOpen,\n    keyboardShortcuts: !!user?.keyboardShortcuts\n  })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeShortcutsModal: () => closeModal('shortcuts'),\n      toggleKeyboardShortcuts: (keyboardShortcuts: boolean) =>\n        updateMyKeyboardShortcuts({ keyboardShortcuts })\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3482,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "cabc6563ef268bd0356f425882e10c42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
    "source_type": "git_repo",
    "title": "shortcuts-modal",
    "content": "import type { User } from '../../../redux/prop-types'; import KeyboardShortcutsSettings from '../../../components/settings/keyboard-shortcuts'; import './shortcuts-modal.css'; interface ShortcutsModalProps { closeShortcutsModal: () => void; toggleKeyboardShortcuts: (keyboardShortcuts: boolean) => void; isOpen: boolean; t: (text: string) => string; keyboardShortcuts: boolean; } const mapStateToProps = createSelector( isShortcutsModalOpenSelector, userSelector, (isOpen: boolean, user: User | null) => ({ isOpen, keyboardShortcuts: !!user?.keyboardShortcuts }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { closeShortcutsModal: () => closeModal('shortcuts'), toggleKeyboardShortcuts: (keyboardShortcuts: boolean) => updateMyKeyboardShortcuts({ keyboardShortcuts }) }, dispatch );\n\nfunction ShortcutsModal({\n  closeShortcutsModal,\n  toggleKeyboardShortcuts,\n  isOpen,\n  t,\n  keyboardShortcuts\n}: ShortcutsModalProps): JSX.Element {\n  return (\n    <Modal onClose={closeShortcutsModal} open={isOpen}>\n      <Modal.Header showCloseButton={false}>\n        {t('shortcuts.title')}\n      </Modal.Header>\n      <Modal.Body alignment='start'>\n        <table className='shortcuts-modal-table'>\n          <thead>\n            <tr>\n              <th scope='col'>{t('shortcuts.table-header-action')}</th>\n              <th scope='col'>{t('shortcuts.table-header-key')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{t('shortcuts.navigation-mode')}</td>\n              <td>ESC</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.execute-challenge')}</td>\n              <td>CTRL/Command + Enter</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.play-video')}</td>\n              <td>CTRL + Space</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.focus-editor')}</td>\n              <td>e</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.focus-instructions-panel')}</td>\n              <td>r</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.navigate-previous')}</td>\n              <td>p</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.navigate-next')}</td>\n              <td>n</td>\n            </tr>\n          </tbody>\n        </table>\n      </Modal.Body>\n      <Modal.Footer>\n        <KeyboardShortcutsSettings\n          keyboardShortcuts={keyboardShortcuts}\n          toggleKeyboardShortcuts={toggleKeyboardShortcuts}\n        />\n        <Button\n          block={true}\n          size='small'\n          variant='primary'\n          onClick={closeShortcutsModal}\n        >\n          {t('buttons.close')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3482,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 633,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3c24016a210c74ec88eca2a443675cf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
    "source_type": "git_repo",
    "title": "shortcuts-modal",
    "content": "JSX.Element { return ( <Modal onClose={closeShortcutsModal} open={isOpen}> <Modal.Header showCloseButton={false}> {t('shortcuts.title')} </Modal.Header> <Modal.Body alignment='start'> <table className='shortcuts-modal-table'> <thead> <tr> <th scope='col'>{t('shortcuts.table-header-action')}</th> <th scope='col'>{t('shortcuts.table-header-key')}</th> </tr> </thead> <tbody> <tr> <td>{t('shortcuts.navigation-mode')}</td> <td>ESC</td> </tr> <tr> <td>{t('shortcuts.execute-challenge')}</td> <td>CTRL/Command + Enter</td> </tr> <tr> <td>{t('shortcuts.play-video')}</td> <td>CTRL + Space</td> </tr> <tr> <td>{t('shortcuts.focus-editor')}</td> <td>e</td> </tr> <tr> <td>{t('shortcuts.focus-instructions-panel')}</td> <td>r</td> </tr> <tr> <td>{t('shortcuts.navigate-previous')}</td> <td>p</td> </tr> <tr> <td>{t('shortcuts.navigate-next')}</td> <td>n</td> </tr> </tbody> </table> </Modal.Body> <Modal.Footer> <KeyboardShortcutsSettings keyboardShortcuts={keyboardShortcuts} toggleKeyboardShortcuts={toggleKeyboardShortcuts} /> <Button block={true} size='small' variant='primary' onClick={closeShortcutsModal} > {t('buttons.close')} </Button> </Modal.Footer> </Modal> ); }\n\nShortcutsModal.displayName = 'ShortcutsModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShortcutsModal));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3482,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\shortcuts-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a49bececd4c8a6f9bda05e785d4d9229",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-frame.css",
    "source_type": "git_repo",
    "title": "test-frame",
    "content": ".hide-test-frame {\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n  visibility: hidden;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 98,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-frame.css",
      "source_type": "git_repo"
    },
    "token_count": 31,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bd18faea8e973445e0751716f165a734",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.tsx",
    "source_type": "git_repo",
    "title": "side-panel",
    "content": "import React, { ReactElement, ReactNode } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Trans } from 'react-i18next';\nimport { Spacer } from '@freecodecamp/ui';\n\nimport { Test } from '../../../redux/prop-types';\nimport { challengeTestsSelector } from '../redux/selectors';\nimport { openModal } from '../redux/actions';\nimport TestSuite from './test-suite';\nimport IndependentLowerJaw from './independent-lower-jaw';\n\nimport './side-panel.css';\n\nconst mapStateToProps = createSelector(\n  challengeTestsSelector,\n  (tests: Test[]) => ({\n    tests\n  })\n);\n\nconst mapDispatchToProps: {\n  openModal: (modal: string) => void;\n} = {\n  openModal\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\ninterface SidePanelProps extends DispatchProps, StateProps {\n  challengeDescription: ReactElement;\n  challengeTitle: ReactElement;\n  instructionsPanelRef: React.RefObject<HTMLDivElement>;\n  hasDemo: boolean;\n  toolPanel: ReactNode;\n  tests: Test[];\n  showIndependentLowerJaw: boolean;\n}\n\nexport function SidePanel({\n  challengeDescription,\n  challengeTitle,\n  instructionsPanelRef,\n  hasDemo,\n  toolPanel,\n  tests,\n  openModal,\n  showIndependentLowerJaw\n}: SidePanelProps): JSX.Element {\n  return (\n    <>\n      <div\n        className='instructions-panel'\n        ref={instructionsPanelRef}\n        tabIndex={-1}\n      >\n        {challengeTitle}\n        {hasDemo && (\n          <p>\n            <Trans i18nKey='learn.example-app'>\n              <span\n                className='example-app-link'\n                onClick={() => openModal('projectPreview')}\n                role='button'\n                tabIndex={0}\n                onKeyDown={e => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    openModal('projectPreview');\n                  }\n                }}\n              ></span>\n            </Trans>\n          </p>\n        )}{' '}\n        {challengeDescription}\n        {!showIndependentLowerJaw && (\n          <>\n            <Spacer size='m' />\n            {toolPanel}\n            <TestSuite tests={tests} />\n          </>\n        )}\n      </div>\n      {showIndependentLowerJaw && <IndependentLowerJaw />}\n    </>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2377,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "12077f1cb33a9f3fa3e8a9e5a7127e66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.tsx",
    "source_type": "git_repo",
    "title": "side-panel",
    "content": "challengeTitle, instructionsPanelRef, hasDemo, toolPanel, tests, openModal, showIndependentLowerJaw }: SidePanelProps): JSX.Element { return ( <> <div className='instructions-panel' ref={instructionsPanelRef} tabIndex={-1} > {challengeTitle} {hasDemo && ( <p> <Trans i18nKey='learn.example-app'> <span className='example-app-link' onClick={() => openModal('projectPreview')} role='button' tabIndex={0} onKeyDown={e => { if (e.key === 'Enter' || e.key === ' ') { openModal('projectPreview'); } }} ></span> </Trans> </p> )}{' '} {challengeDescription} {!showIndependentLowerJaw && ( <> <Spacer size='m' /> {toolPanel} <TestSuite tests={tests} /> </> )} </div> {showIndependentLowerJaw && <IndependentLowerJaw />} </> ); }\n\nSidePanel.displayName = 'SidePanel';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidePanel);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2377,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\side-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2895ac18601ca09bec9b1de1becbc718",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.css",
    "source_type": "git_repo",
    "title": "test-suite",
    "content": ".challenge-test-suite {\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  margin: 15px 0;\n  padding-inline-start: 0;\n}\n\n.challenge-test-suite-heading {\n  font-size: 0.9em;\n  text-align: center;\n}\n\n.sk-spinner {\n  color: var(--primary-color);\n}\n\n.challenge-test-suite code {\n  white-space: pre-wrap;\n  overflow-wrap: anywhere;\n}\n\n.test-result {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  line-height: 1.5;\n}\n\n.test-result:nth-child(odd) {\n  background-color: var(--tertiary-background);\n}\n\n.test-result:nth-child(odd) code {\n  background-color: var(--secondary-background);\n}\n\n.test-output {\n  padding: 5px 10px;\n}\n\n.test-output p {\n  margin: 0;\n}\n\n.test-status-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 60px;\n  min-height: 60px;\n}\n\n.test-status-icon > svg {\n  width: 40px;\n  height: 40px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 876,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.css",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40fddbce2242af38f44aed719bc2ca3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.css",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": ".tool-panel-group button,\n.tool-panel-group a {\n  font-size: 1.1rem;\n}\n\n.tool-panel-group-mobile button,\n.tool-panel-group-mobile a {\n  font-size: 0.8rem;\n}\n\n.tool-panel-group-mobile {\n  display: flex;\n  flex-direction: row-reverse;\n  height: 37px;\n  width: 100%;\n  background-color: var(--tertiary-background);\n  position: absolute;\n  bottom: 0;\n}\n\n.tool-panel-group-mobile #get-help-dropdown {\n  height: 36.5px;\n}\n\n.tool-panel-group-mobile button:focus-visible {\n  outline-offset: -3px;\n  border-color: var(--focus-outline-color);\n  outline: none;\n  box-shadow: none;\n}\n\n@media screen and (max-width: 450px) {\n  #get-help-dropdown {\n    min-width: 90px;\n  }\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 662,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.css",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bf087a1cf4531305a73dfab68fd105da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
    "source_type": "git_repo",
    "title": "test-suite",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-spinkit';\nimport Fail from '../../../assets/icons/fail';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport Initial from '../../../assets/icons/initial';\n\nimport './test-suite.css';\nimport { ChallengeTest, Test } from '../../../redux/prop-types';\ntype TestSuiteTest = {\n  err?: string;\n  pass?: boolean;\n  running?: boolean;\n} & ChallengeTest;\n\nfunction isTestSuiteTest(test: Test): test is TestSuiteTest {\n  return 'text' in test;\n}\n\ninterface TestSuiteProps {\n  tests: Test[];\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ee258781f7f1e2e07cda747616e2d9e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
    "source_type": "git_repo",
    "title": "test-suite",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-spinkit';\nimport Fail from '../../../assets/icons/fail';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport Initial from '../../../assets/icons/initial';\n\nimport './test-suite.css';\nimport { ChallengeTest, Test } from '../../../redux/prop-types';\ntype TestSuiteTest = {\n  err?: string;\n  pass?: boolean;\n  running?: boolean;\n} & ChallengeTest;\n\nfunction isTestSuiteTest(test: Test): test is TestSuiteTest {\n  return 'text' in test;\n}\n\ninterface TestSuiteProps {\n  tests: Test[];\n}\n\nfunction TestSuite({ tests }: TestSuiteProps): JSX.Element {\n  const { t } = useTranslation();\n  const testSuiteTests = tests.filter(isTestSuiteTest);\n  return (\n    <>\n      <h2 className='challenge-test-suite-heading'>\n        {t('learn.editor-tabs.tests')}\n      </h2>\n      <ul className='challenge-test-suite'>\n        {testSuiteTests.map(\n          ({ err, pass = false, text = '', running }, index) => {\n            const isInitial = !pass && !err && !running;\n            const statusIcon = running ? (\n              <Spinner name='circle' fadeIn='none' />\n            ) : pass && !err ? (\n              <GreenPass data-playwright-test-label='test-pass-icon' />\n            ) : (\n              <Fail />\n            );\n            const initialText = t('icons.waiting');\n            const statusText =\n              pass && !err ? t('icons.passed') : t('icons.failed');\n            // Remove opening/closing <p> so screen reader will read both\n            // status message and test text as one block.\n            text = `${index + 1}. ${text.replace(/^<p>|<\\/p>$/g, '')}`;\n            return (\n              <li\n                className='test-result'\n                data-playwright-test-label='test-result'\n                key={text.slice(-6) + String(index)}\n              >\n                <div className='test-status-icon' aria-hidden='true'>\n                  {isInitial ? <Initial /> : statusIcon}\n                </div>\n                <div className='test-output'>\n                  <span className='sr-only'>\n                    {isInitial ? initialText : statusText}:{' '}\n                  </span>\n                  <span dangerouslySetInnerHTML={{ __html: text }} />\n                </div>\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
      "source_type": "git_repo"
    },
    "token_count": 524,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "13f1d06c28083b83dd340890248a9c49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
    "source_type": "git_repo",
    "title": "test-suite",
    "content": "!err ? t('icons.passed') : t('icons.failed'); // Remove opening/closing <p> so screen reader will read both // status message and test text as one block. text = `${index + 1}. ${text.replace(/^<p>|<\\/p>$/g, '')}`; return ( <li className='test-result' data-playwright-test-label='test-result' key={text.slice(-6) + String(index)} > <div className='test-status-icon' aria-hidden='true'> {isInitial ? <Initial /> : statusIcon} </div> <div className='test-output'> <span className='sr-only'> {isInitial ? initialText : statusText}:{' '} </span> <span dangerouslySetInnerHTML={{ __html: text }} /> </div> </li> ); } )} </ul> </> ); }\n\nTestSuite.displayName = 'TestSuite';\n\nexport default TestSuite;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\test-suite.tsx",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "01932120b17543a3d9845c6d0eb11107",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-modal.css",
    "source_type": "git_repo",
    "title": "video-modal",
    "content": ".video-modal-body {\n  height: 85vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.video-modal-body iframe {\n  flex-grow: 1;\n}\n\n.video-modal-body p {\n  margin-bottom: 0;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 187,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-modal.css",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "93f6fcc36b4d616467b9059eb9c24f57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-modal.tsx",
    "source_type": "git_repo",
    "title": "video-modal",
    "content": "import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Modal } from '@freecodecamp/ui';\nimport { closeModal } from '../redux/actions';\nimport { isVideoModalOpenSelector } from '../redux/selectors';\nimport callGA from '../../../analytics/call-ga';\n\nimport './video-modal.css';\n\ninterface VideoModalProps {\n  closeVideoModal: () => void;\n  isOpen: boolean;\n  t: (attribute: string) => string;\n  videoUrl?: string;\n}\n\nconst mapStateToProps = (state: unknown) => ({\n  isOpen: isVideoModalOpenSelector(state) as boolean\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ closeVideoModal: () => closeModal('video') }, dispatch);\n\nfunction VideoModal({\n  closeVideoModal,\n  isOpen,\n  t,\n  videoUrl\n}: VideoModalProps): JSX.Element {\n  if (isOpen) {\n    callGA({ event: 'pageview', pagePath: '/completion-modal' });\n  }\n  return (\n    <Modal onClose={closeVideoModal} size='xLarge' open={isOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('buttons.watch-video')}\n      </Modal.Header>\n      <Modal.Body alignment='start' className='video-modal-body'>\n        <iframe\n          data-playwright-test-label='video-modal-video-player-iframe'\n          src={videoUrl}\n          title={t('buttons.watch-video')}\n        />\n        <p>{t('learn.scrimba-tip')}</p>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nVideoModal.displayName = 'VideoModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(VideoModal));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1599,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1872e689cd14ebd82bd23acd74d8b753",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-player.tsx",
    "source_type": "git_repo",
    "title": "video-player",
    "content": "import React from 'react';\nimport YouTube, { YouTubeEvent } from 'react-youtube';\nimport store from 'store';\n\nimport Loader from '../../../components/helpers/loader';\nimport envData from '../../../../config/env.json';\nimport type { BilibiliIds, VideoLocaleIds } from '../../../redux/prop-types';\n\n// TODO: pull these types from all-langs\nconst { clientLocale } = envData as {\n  clientLocale:\n    | 'english'\n    | 'chinese'\n    | 'chinese-traditional'\n    | 'espanol'\n    | 'italian'\n    | 'portuguese';\n};\n\ninterface VideoPlayerProps {\n  videoId: string;\n  videoLocaleIds?: VideoLocaleIds;\n  onVideoLoad: (e: YouTubeEvent) => void;\n  videoIsLoaded: boolean;\n  bilibiliIds?: BilibiliIds;\n  title: string;\n}\n\nfunction setPlaybackRate(e: YouTubeEvent<number>) {\n  store.set('fcc-yt-playback-rate', e.data);\n}\n\nfunction VideoPlayer({\n  videoId,\n  videoLocaleIds,\n  onVideoLoad,\n  videoIsLoaded,\n  bilibiliIds,\n  title\n}: VideoPlayerProps): JSX.Element {\n  let bilibiliSrc = null;\n\nif (\n    bilibiliIds &&\n    ['chinese', 'chinese-traditional'].includes(clientLocale)\n  ) {\n    const { aid, bvid, cid } = bilibiliIds;\n    bilibiliSrc = `//player.bilibili.com/player.html?aid=${aid}&bvid=${bvid}&cid=${cid}`;\n  }\n\nif (videoLocaleIds) {\n    const localeId = videoLocaleIds[clientLocale as keyof VideoLocaleIds];\n    videoId = localeId || videoId;\n  }\n\nreturn (\n    <div className='video-wrapper'>\n      {!videoIsLoaded ? (\n        <div className='video-placeholder-loader'>\n          <Loader />\n        </div>\n      ) : null}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2142,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-player.tsx",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a08272524c3576ad18cd932a0aac7fb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-player.tsx",
    "source_type": "git_repo",
    "title": "video-player",
    "content": "string; } function setPlaybackRate(e: YouTubeEvent<number>) { store.set('fcc-yt-playback-rate', e.data); } function VideoPlayer({ videoId, videoLocaleIds, onVideoLoad, videoIsLoaded, bilibiliIds, title }: VideoPlayerProps): JSX.Element { let bilibiliSrc = null; if ( bilibiliIds && ['chinese', 'chinese-traditional'].includes(clientLocale) ) { const { aid, bvid, cid } = bilibiliIds; bilibiliSrc = `//player.bilibili.com/player.html?aid=${aid}&bvid=${bvid}&cid=${cid}`; } if (videoLocaleIds) { const localeId = videoLocaleIds[clientLocale as keyof VideoLocaleIds]; videoId = localeId || videoId; } return ( <div className='video-wrapper'> {!videoIsLoaded ? ( <div className='video-placeholder-loader'> <Loader /> </div> ) : null}\n\n{bilibiliSrc ? (\n        <iframe\n          frameBorder='no'\n          scrolling='no'\n          src={bilibiliSrc}\n          title={title}\n        />\n      ) : (\n        <YouTube\n          className={\n            videoIsLoaded ? 'display-youtube-video' : 'hide-youtube-video'\n          }\n          onReady={onVideoLoad}\n          onPlaybackRateChange={setPlaybackRate}\n          opts={{\n            playerVars: {\n              rel: 0\n            },\n            width: 'auto',\n            height: 'auto'\n          }}\n          videoId={videoId}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default VideoPlayer;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2142,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\video-player.tsx",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "822fea0d7356060c7244b84ebb5df4da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": "import { Dropdown, MenuItem, Button, Spacer } from '@freecodecamp/ui';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { canSaveToDB } from '../../../../../shared/config/challenge-types';\nimport { openModal, executeChallenge } from '../redux/actions';\nimport { challengeMetaSelector } from '../redux/selectors';\nimport { saveChallenge } from '../../../redux/actions';\nimport { isSignedInSelector } from '../../../redux/selectors';\n\nimport './tool-panel.css';\n\nconst mapStateToProps = createSelector(\n  challengeMetaSelector,\n  isSignedInSelector,\n  (\n    { challengeType }: { challengeId: string; challengeType: number },\n    isSignedIn\n  ) => ({\n    challengeType,\n    isSignedIn\n  })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      executeChallenge,\n      openHelpModal: () => openModal('help'),\n      openVideoModal: () => openModal('video'),\n      openResetModal: () => openModal('reset'),\n      saveChallenge\n    },\n    dispatch\n  );\n\ninterface ToolPanelProps {\n  challengeType: number;\n  executeChallenge: (options?: { showCompletionModal: boolean }) => void;\n  saveChallenge: () => void;\n  isMobile?: boolean;\n  isSignedIn: boolean;\n  openHelpModal: () => void;\n  openVideoModal: () => void;\n  openResetModal: () => void;\n  guideUrl: string;\n  videoUrl?: string;\n} function ToolPanel({\n  challengeType,\n  executeChallenge,\n  saveChallenge,\n  isMobile,\n  isSignedIn,\n  openHelpModal,\n  openVideoModal,\n  openResetModal,\n  guideUrl,\n  videoUrl\n}: ToolPanelProps) {\n  const handleRunTests = () => {\n    executeChallenge({ showCompletionModal: true });\n  };\n  const { t } = useTranslation();\n  return (\n    <div\n      className={`tool-panel-group ${\n        isMobile",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9cc5d926f138ad1afd81e12102973d5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": "interface ToolPanelProps { challengeType: number; executeChallenge: (options?: { showCompletionModal: boolean }) => void; saveChallenge: () => void; isMobile?: boolean; isSignedIn: boolean; openHelpModal: () => void; openVideoModal: () => void; openResetModal: () => void; guideUrl: string; videoUrl?: string; } function ToolPanel({ challengeType, executeChallenge, saveChallenge, isMobile, isSignedIn, openHelpModal, openVideoModal, openResetModal, guideUrl, videoUrl }: ToolPanelProps) { const handleRunTests = () => { executeChallenge({ showCompletionModal: true }); }; const { t } = useTranslation(); return ( <div className={`tool-panel-group ${ isMobile'tool-panel-group-mobile' : ''\n      }`}\n    >\n      <Button block={true} variant='primary' onClick={handleRunTests}>\n        {isMobile t('buttons run') : t('buttons run-test')}\n      </Button>\n      {isSignedIn && canSaveToDB(challengeType) && (\n        <>\n          <Spacer size='xxs' />\n          <Button block={true} variant='primary' onClick={saveChallenge}>\n            {isMobile t('buttons save') : t('buttons save-code')}\n          </Button>\n        </>\n      )}\n      <Spacer size='xxs' />\n      <Button block={true} variant='primary' onClick={openResetModal}>\n        {isMobile t(canSaveToDB(challengeType) 'buttons revert' : 'buttons reset')\n          : t(\n              canSaveToDB(challengeType) 'buttons revert-to-saved-code'\n                : 'buttons reset-lesson'\n            )}\n      </Button>\n      <Spacer size='xxs' />\n      <Dropdown dropup>\n        <Dropdown Toggle\n          id={'get-help-dropdown'}\n          data-playwright-test-label='get-help-dropdown'\n        >\n          {isMobile t('buttons help') : t('buttons get-help')}\n        </Dropdown Toggle>\n        <Dropdown Menu>\n          {guideUrl (\n            <MenuItem\n              href={guideUrl}\n              target='_blank'\n              data-playwright-test-label='get-hint'\n            >\n              {t('buttons get-hint')}{' '}\n              <FontAwesomeIcon icon={faExternalLinkAlt} />\n              <span className='sr-only'>, {t('aria",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ce0879f16452795cb474b5d1077fd14a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": "<Spacer size='xxs' /> <Button block={true} variant='primary' onClick={saveChallenge}> {isMobile t('buttons save') : t('buttons save-code')} </Button> </> )} <Spacer size='xxs' /> <Button block={true} variant='primary' onClick={openResetModal}> {isMobile t(canSaveToDB(challengeType) 'buttons revert' : 'buttons reset') : t( canSaveToDB(challengeType) 'buttons revert-to-saved-code' : 'buttons reset-lesson' )} </Button> <Spacer size='xxs' /> <Dropdown dropup> <Dropdown Toggle id={'get-help-dropdown'} data-playwright-test-label='get-help-dropdown' > {isMobile t('buttons help') : t('buttons get-help')} </Dropdown Toggle> <Dropdown Menu> {guideUrl ( <MenuItem href={guideUrl} target='_blank' data-playwright-test-label='get-hint' > {t('buttons get-hint')}{' '} <FontAwesomeIcon icon={faExternalLinkAlt} /> <span className='sr-only'>, {t('ariaopens-new-window')}</span>\n            </MenuItem>\n          ) : null}\n          {videoUrl (\n            <MenuItem\n              onClick={openVideoModal}\n              data-playwright-test-label='watch-a-video'\n            >\n              {t('buttons watch-video')}\n            </MenuItem>\n          ) : null}\n          <MenuItem\n            onClick={openHelpModal}\n            data-playwright-test-label='ask-for-help'\n          >\n            {t('buttons ask-for-help')}\n          </MenuItem>\n        </Dropdown Menu>\n      </Dropdown>\n    </div>\n  );\n}\n\nToolPanel.displayName = 'ToolPanel';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolPanel);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\tool-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bead2c01c8a9923e62446f3425b9a810",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\exam.css",
    "source_type": "git_repo",
    "title": "exam",
    "content": ".exam-wrapper,\n.exam-results-wrapper {\n  margin-top: 60px;\n  padding: 25px;\n  background-color: var(--primary-background);\n  border: 2px solid var(--tertiary-background);\n}\n\n@media (max-width: 600px) {\n  .exam-wrapper,\n  .exam-results-wrapper {\n    margin-top: 80px;\n  }\n}\n\n.exam-header,\n.exam-results-header {\n  width: 100%;\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.exam-questions {\n  padding: 0 30px;\n}\n\n.exam-answers {\n  display: flex;\n  flex-direction: column;\n}\n\n.exam-answer-label {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n  padding: 20px;\n  cursor: pointer;\n  font-weight: normal;\n}\n\n.exam-answer-label > .line-numbers,\n.exam-questions > .line-numbers {\n  display: inline-block;\n}\n\n.exam-answers pre,\n.exam-questions pre {\n  color: var(--tertiary-color);\n  border: 1px solid var(--secondary-color);\n  background-color: var(--quaternary-background);\n  padding: 10px;\n}\n\n.exam-answer-label p {\n  margin: 0;\n}\n\n.exam-answer-input-visible {\n  margin-inline-end: 15px;\n  position: relative;\n  top: 2px;\n  display: inline-block;\n  min-width: 20px;\n  min-height: 20px;\n  max-width: 20px;\n  max-height: 20px;\n  border-radius: 50%;\n  background-color: var(--secondary-background);\n  border: 2px solid var(--primary-color);\n}\n\n.exam-answer-input-selected {\n  width: 10px;\n  height: 10px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  background-color: var(--primary-color);\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.exam-buttons {\n  display: flex;\n  justify-content: center;\n}\n\n.exam-buttons .exam-button {\n  margin: 0 10px;\n  max-width: 40%;\n}\n\n.exam-results-message {\n  text-align: center;\n}\n\n.exam-results {\n  display: flex;\n  justify-content: space-evenly;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 1719,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\exam.css",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b550adedd1ba907e91369eafde1307c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import React, { useEffect, useState } from 'react';\nimport { Button, Spacer } from '@freecodecamp/ui';\nimport { isEmpty } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { FullWidthRow } from '../../../components/helpers';\nimport useDetectOS from '../utils/use-detect-os';\n\ninterface GitProps {\n  tag_name: string;\n  assets: {\n    browser_download_url: string;\n  }[];\n}\n\nfunction ShowExamDownload(): JSX.Element {\n  const [latestVersion, setLatestVersion] = useState<string | null>(null);\n\nconst [downloadLink, setDownloadLink] = useState<string | undefined>('');\n  const [downloadLinks, setDownloadLinks] = useState<string[]>([]);\n\nconst os = useDetectOS();\n\nconst { t } = useTranslation();\n\nconst handleDownloadLink = (downloadLinks: string[]) => {\n    const win = downloadLinks.find(link => link.match(/\\.msi/));\n    const macARM = downloadLinks.find(\n      link => link.match(/aarch64/) && link.match(/\\.dmg/)\n    );\n    const macX64 = downloadLinks.find(\n      link => link.match(/x64/) && link.match(/\\.dmg/)\n    );\n\nconst linuxARM = downloadLinks.find(\n      link => link.match(/aarch64/) && link.match(/tar\\.gz/)\n    );\n\nconst linuxX64 = downloadLinks.find(\n      link => link.match(/amd64/) && link.match(/AppImage/)\n    );\n\nif (os.os === 'WIN') {\n      if (isEmpty(win)) return '';\n\nreturn win;\n    }\n\nif (os.os === 'MAC') {\n      if (os.architecture.toLowerCase() === 'arm') {\n        if (isEmpty(macARM)) return '';\n\nreturn macARM;\n      } else {\n        if (isEmpty(macX64)) return '';\n\nreturn macX64;\n      }\n    }\n\nif (os.os === 'LINUX') {\n      if (os.architecture.toLowerCase() === 'arm') {\n        if (isEmpty(linuxARM)) return '';\n\nreturn linuxARM;\n      } else {\n        if (isEmpty(linuxX64)) return '';\n\nreturn linuxX64;\n      }\n    }\n\nreturn '';\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3865,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "29002391ac2fc43e4b8f577c1ca6faa6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "downloadLinks.find( link => link.match(/amd64/) && link.match(/AppImage/) ); if (os.os === 'WIN') { if (isEmpty(win)) return ''; return win; } if (os.os === 'MAC') { if (os.architecture.toLowerCase() === 'arm') { if (isEmpty(macARM)) return ''; return macARM; } else { if (isEmpty(macX64)) return ''; return macX64; } } if (os.os === 'LINUX') { if (os.architecture.toLowerCase() === 'arm') { if (isEmpty(linuxARM)) return ''; return linuxARM; } else { if (isEmpty(linuxX64)) return ''; return linuxX64; } } return ''; };\n\nuseEffect(() => {\n    const checkLatestVersion = async () => {\n      return await fetch(\n        'https://api.github.com/repos/freeCodeCamp/exam-env/releases/latest'\n      );\n    };\n    checkLatestVersion()\n      .then(response => {\n        if (response.ok) {\n          void response.json().then(data => {\n            const { tag_name, assets } = data as GitProps;\n            setLatestVersion(tag_name);\n\nsetDownloadLink(\n              handleDownloadLink(\n                assets.map(links => links.browser_download_url)\n              )\n            );\n\nsetDownloadLinks(assets.map(links => links.browser_download_url));\n          });\n        }\n      })\n      .catch(() => {\n        setLatestVersion('...');\n      });\n  });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3865,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "094fcd300f5af7021e7e869b5ad7d7d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "if (isEmpty(linuxARM)) return ''; return linuxARM; } else { if (isEmpty(linuxX64)) return ''; return linuxX64; } } return ''; }; useEffect(() => { const checkLatestVersion = async () => { return await fetch( 'https://api.github.com/repos/freeCodeCamp/exam-env/releases/latest' ); }; checkLatestVersion() .then(response => { if (response.ok) { void response.json().then(data => { const { tag_name, assets } = data as GitProps; setLatestVersion(tag_name); setDownloadLink( handleDownloadLink( assets.map(links => links.browser_download_url) ) ); setDownloadLinks(assets.map(links => links.browser_download_url)); }); } }) .catch(() => { setLatestVersion('...'); }); });\n\nreturn (\n    <FullWidthRow>\n      <Spacer size='l' />\n      <h2>{t('exam.download-header')}</h2>\n      <p>{t('exam.explanation')}</p>\n      <p>\n        {t('exam.version', {\n          version: latestVersion || '...'\n        })}\n      </p>\n      <Button\n        disabled={!downloadLink}\n        aria-disabled={!downloadLink}\n        href={downloadLink}\n        download={downloadLink}\n      >\n        {t('buttons.download-latest-version')}\n      </Button>\n      {!downloadLink && <strong>{t('exam.unable-to-detect-os')}</strong>}\n      <Spacer size='l' />\n      <details>\n        <summary>{t('exam.download-details')}</summary>\n        <ul>\n          {downloadLinks\n            .filter(link => !link.match(/\\.sig|\\.json/))\n            .map((link, index) => {\n              return (\n                <li key={index} style={{ listStyle: 'none' }}>\n                  <a href={link} download={link}>\n                    {link}\n                  </a>\n                </li>\n              );\n            })}\n        </ul>\n      </details>\n      <Spacer size='l' />\n      <strong>{t('exam.download-trouble')}</strong>\n      <a href='mailto: support@freecodecamp.org'>support@freecodecamp.org</a>\n    </FullWidthRow>\n  );\n}\n\nexport default ShowExamDownload;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3865,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam-download\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "34be432c583f6c23bdd9ef9b896daba8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
    "source_type": "git_repo",
    "title": "parse-blanks.test",
    "content": "import { parseBlanks } from './parse-blanks';\n\ndescribe('parseBlanks', () => {\n  it('handles strings without blanks', () => {\n    expect(parseBlanks('<p>hello world</p>')).toEqual([\n      [{ type: 'text', value: 'hello world' }]\n    ]);\n  });\n\nit('handles strings without blanks and with multiple paragraphs', () => {\n    expect(parseBlanks('<p>hello world</p><p>dlrow olleh</p>')).toEqual([\n      [{ type: 'text', value: 'hello world' }],\n      [{ type: 'text', value: 'dlrow olleh' }]\n    ]);\n  });\n\nit('handles strings with blanks', () => {\n    expect(parseBlanks('<p>hello BLANK!</p>')).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '!' }\n      ]\n    ]);\n\nexpect(parseBlanks('<p>hello BLANK! Nice BLANK to meet you.</p>')).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '! Nice ' },\n        { type: 'blank', value: 1 },\n        { type: 'text', value: ' to meet you.' }\n      ]\n    ]);\n  });\n\nit('handles paragraphs with a leading blank', () => {\n    expect(parseBlanks('<p>BLANK hello</p>')).toEqual([\n      [\n        { type: 'blank', value: 0 },\n        { type: 'text', value: ' hello' }\n      ]\n    ]);\n  });\n\nit('removes trailing empty strings', () => {\n    expect(parseBlanks('<p>hello BLANK</p>')).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 }\n      ]\n    ]);\n  });",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3520,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ee78d12578293f515b375886532c9985",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
    "source_type": "git_repo",
    "title": "parse-blanks.test",
    "content": "'! Nice ' }, { type: 'blank', value: 1 }, { type: 'text', value: ' to meet you.' } ] ]); }); it('handles paragraphs with a leading blank', () => { expect(parseBlanks('<p>BLANK hello</p>')).toEqual([ [ { type: 'blank', value: 0 }, { type: 'text', value: ' hello' } ] ]); }); it('removes trailing empty strings', () => { expect(parseBlanks('<p>hello BLANK</p>')).toEqual([ [ { type: 'text', value: 'hello ' }, { type: 'blank', value: 0 } ] ]); });\n\nit('handles strings with blanks and multiple paragraphs', () => {\n    expect(parseBlanks(`<p>hello BLANK!</p><p>dlrow BLANK</p>`)).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '!' }\n      ],\n      [\n        { type: 'text', value: 'dlrow ' },\n        { type: 'blank', value: 1 }\n      ]\n    ]);\n  });\n\nit('ignores newlines between paragraphs', () => {\n    expect(\n      parseBlanks(`<p>hello BLANK!</p>\n\n<p>dlrow BLANK</p>`)\n    ).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '!' }\n      ],\n      [\n        { type: 'text', value: 'dlrow ' },\n        { type: 'blank', value: 1 }\n      ]\n    ]);\n  });\n\nit('ignores whitespace surrounding the input', () => {\n    expect(\n      parseBlanks(` <p>hello BLANK!</p>\n    `)\n    ).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '!' }\n      ]\n    ]);\n  });",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3520,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "caababd0d837c506fd36d7a5d6b047b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
    "source_type": "git_repo",
    "title": "parse-blanks.test",
    "content": ").toEqual([ [ { type: 'text', value: 'hello ' }, { type: 'blank', value: 0 }, { type: 'text', value: '!' } ], [ { type: 'text', value: 'dlrow ' }, { type: 'blank', value: 1 } ] ]); }); it('ignores whitespace surrounding the input', () => { expect( parseBlanks(` <p>hello BLANK!</p> `) ).toEqual([ [ { type: 'text', value: 'hello ' }, { type: 'blank', value: 0 }, { type: 'text', value: '!' } ] ]); });\n\nit('counts blanks across multiple paragraphs', () => {\n    expect(\n      parseBlanks(\n        `<p>hello BLANK!</p><p>dlrow BLANK BLANK</p><p> even BLANK more BLANK</p>`\n      )\n    ).toEqual([\n      [\n        { type: 'text', value: 'hello ' },\n        { type: 'blank', value: 0 },\n        { type: 'text', value: '!' }\n      ],\n      [\n        { type: 'text', value: 'dlrow ' },\n        { type: 'blank', value: 1 },\n        { type: 'text', value: ' ' },\n        { type: 'blank', value: 2 }\n      ],\n      [\n        { type: 'text', value: ' even ' },\n        { type: 'blank', value: 3 },\n        { type: 'text', value: ' more ' },\n        { type: 'blank', value: 4 }\n      ]\n    ]);\n  });\n\nit('throws if the string is not wrapped in p tags', () => {\n    expect(() => parseBlanks('hello BLANK!')).toThrow();\n    expect(() => parseBlanks('<p>hello BLANK!</p>hello BLANK!')).toThrow();\n    expect(() => parseBlanks('hello BLANK!<p>hello</p>')).toThrow();\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3520,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "70252d3514b0db98f409c1b82fee45ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.ts",
    "source_type": "git_repo",
    "title": "parse-blanks",
    "content": "type TextNode = { type: 'text'; value: string };\ntype BlankNode = { type: 'blank'; value: number };\ntype ParagraphElement = TextNode | BlankNode;\n\nexport const parseBlanks = (text: string) => {\n  const trimmed = text.trim();\n  if (!trimmed.startsWith('<p>') || !trimmed.endsWith('</p>')) {\n    throw new Error(`Expected\n${text}\nto be wrapped in <p> tags`);\n  }\n  // We're expecting only paragraphs, so text after </p> and before <p> can be\n  // ignored.\n  const rawParagraphs = trimmed\n    .split('<p>')\n    .map(s => s.replace(/<\\/p>\\s*/, ''));\n  // There is always a leading empty string, so we remove it.\n  rawParagraphs.shift();\n\nconst { paragraphs } = rawParagraphs.reduce(\n    (acc, p) => {\n      const splitByBlank = p.split('BLANK');\n\nconst parsedParagraph = splitByBlank\n        .map<ParagraphElement[]>((text, i) => [\n          { type: 'text', value: text },\n          { type: 'blank', value: acc.count + i }\n        ])\n        .flat();\n      parsedParagraph.pop(); // remove last blank\n\nconst paragraph = parsedParagraph.filter(p => {\n        // remove empty strings\n        if (p.type === 'text') {\n          return p.value;\n        } else {\n          return true;\n        }\n      });\n      return {\n        count: acc.count + splitByBlank.length - 1,\n        paragraphs: [...acc.paragraphs, paragraph]\n      };\n    },\n    { count: 0, paragraphs: [] } as {\n      count: number;\n      paragraphs: ParagraphElement[][];\n    }\n  );\n\nreturn paragraphs;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1480,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\parse-blanks.ts",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "09d09a8912b0fd5b684b7f53c3699082",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.css",
    "source_type": "git_repo",
    "title": "show",
    "content": ".fill-in-the-blank-wrap {\n  background-color: var(--primary-background);\n  padding: 20px;\n  border: 4px solid var(--tertiary-background);\n  display: flex;\n  align-items: start;\n  justify-content: center;\n  flex-direction: column;\n  gap: 1em;\n}\n\n.fill-in-the-blank-wrap > p {\n  margin: 0;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.fill-in-the-blank-input {\n  font-family: monospace;\n  padding: 0;\n  text-align: center;\n  background-color: var(--primary-background);\n  border-radius: 0;\n  overflow-wrap: anywhere;\n  line-height: 1.5;\n  z-index: 1;\n  position: relative;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  border-bottom-width: 4px;\n  border-bottom-color: var(--gray-45) !important;\n}\n\n.fill-in-the-blank-input:focus {\n  z-index: 2;\n}\n\n.correct-blank-answer {\n  color: var(--background-success) !important;\n  font-weight: bold;\n}\n\n.incorrect-blank-answer {\n  border-bottom-color: var(--background-danger) !important;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 949,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.css",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6aadd1877b0aabbbd3d5989eb667110",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "// Package Utilities\nimport { graphql, navigate } from 'gatsby';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Alert, Row, Button, Spacer } from '@freecodecamp/ui';\nimport { micromark } from 'micromark';\n\n// Local Utilities\nimport LearnLayout from '../../../components/layouts/learn';\nimport ChallengeTitle from '../components/challenge-title';\nimport PrismFormatted from '../components/prism-formatted';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport Hotkeys from '../components/hotkeys';\nimport { clearExamResults, startExam, stopExam } from '../../../redux/actions';\nimport {\n  completedChallengesSelector,\n  completedSurveysSelector,\n  isSignedInSelector,\n  examInProgressSelector,\n  examResultsSelector\n} from '../../../redux/selectors';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  closeModal,\n  submitChallenge,\n  setUserCompletedExam,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { getGenerateExam } from '../../../utils/ajax';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  CompletedChallenge,\n  UserExamQuestion,\n  UserExam,\n  GeneratedExamResults,\n  GeneratedExamQuestion,\n  PrerequisiteChallenge,\n  SurveyResults,\n  Test\n} from '../../../redux/prop-types';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport { formatSecondsToTime } from '../../../utils/format-seconds';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport ExitExamModal from './components/exit-exam-modal';\nimport FinishExamModal from './components/finish-exam-modal';\nimport ExamResults from './components/exam-results';\nimport MissingPrerequisites from './components/missing-prerequisites';\nimport FoundationalCSharpSurveyAlert from './components/foundational-c-sharp-survey-alert';\n\nimport './exam.css';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "d8b75bad99042a19200179ae126a765a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "} from '../redux/actions'; import { getGenerateExam } from '../../../utils/ajax'; import { isChallengeCompletedSelector } from '../redux/selectors'; import { createFlashMessage } from '../../../components/Flash/redux'; import { ChallengeNode, ChallengeMeta, CompletedChallenge, UserExamQuestion, UserExam, GeneratedExamResults, GeneratedExamQuestion, PrerequisiteChallenge, SurveyResults, Test } from '../../../redux/prop-types'; import { FlashMessages } from '../../../components/Flash/redux/flash-messages'; import { formatSecondsToTime } from '../../../utils/format-seconds'; import { getChallengePaths } from '../utils/challenge-paths'; import ExitExamModal from './components/exit-exam-modal'; import FinishExamModal from './components/finish-exam-modal'; import ExamResults from './components/exam-results'; import MissingPrerequisites from './components/missing-prerequisites'; import FoundationalCSharpSurveyAlert from './components/foundational-c-sharp-survey-alert'; import './exam.css';\n\n// Redux\nconst mapStateToProps = createSelector(\n  completedChallengesSelector,\n  completedSurveysSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  examInProgressSelector,\n  examResultsSelector,\n  (\n    completedChallenges: CompletedChallenge[],\n    completedSurveys: SurveyResults[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean,\n    examInProgress: boolean,\n    examResults: GeneratedExamResults | null\n  ) => ({\n    completedChallenges,\n    completedSurveys,\n    isChallengeCompleted,\n    isSignedIn,\n    examInProgress,\n    examResults\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      challengeMounted,\n      createFlashMessage,\n      openExitExamModal: () => openModal('exitExam'),\n      closeExitExamModal: () => closeModal('exitExam'),\n      openFinishExamModal: () => openModal('finishExam'),\n      closeFinishExamModal: () => closeModal('finishExam'),\n      startExam,\n      stopExam,\n      setUserCompletedExam,\n      clearExamResults,\n      submitChallenge,\n      initTests,\n      updateChallengeMeta,\n      updateSolutionFormValues\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "2fe5021a55850fe9de73e652806f59e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "'./exam.css'; // Redux const mapStateToProps = createSelector( completedChallengesSelector, completedSurveysSelector, isChallengeCompletedSelector, isSignedInSelector, examInProgressSelector, examResultsSelector, ( completedChallenges: CompletedChallenge[], completedSurveys: SurveyResults[], isChallengeCompleted: boolean, isSignedIn: boolean, examInProgress: boolean, examResults: GeneratedExamResults | null ) => ({ completedChallenges, completedSurveys, isChallengeCompleted, isSignedIn, examInProgress, examResults }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { challengeMounted, createFlashMessage, openExitExamModal: () => openModal('exitExam'), closeExitExamModal: () => closeModal('exitExam'), openFinishExamModal: () => openModal('finishExam'), closeFinishExamModal: () => closeModal('finishExam'), startExam, stopExam, setUserCompletedExam, clearExamResults, submitChallenge, initTests, updateChallengeMeta, updateSolutionFormValues }, dispatch );\n\n// Types\ninterface ShowExamProps {\n  challengeMounted: (arg0: string) => void;\n  completedChallenges: CompletedChallenge[];\n  completedSurveys: SurveyResults[];\n  clearExamResults: () => void;\n  createFlashMessage: typeof createFlashMessage;\n  data: { challengeNode: ChallengeNode };\n  examInProgress: boolean;\n  examResults: GeneratedExamResults | null;\n  initTests: (arg0: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  openExitExamModal: () => void;\n  closeExitExamModal: () => void;\n  openFinishExamModal: () => void;\n  closeFinishExamModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  startExam: () => void;\n  stopExam: () => void;\n  submitChallenge: () => void;\n  setUserCompletedExam: (arg0: UserExam) => void;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n}\n\nfunction convertMd(md: string): string {\n  return micromark(md);\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "3a4f127779e36a2149d916a6c91c51fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "typeof createFlashMessage; data: { challengeNode: ChallengeNode }; examInProgress: boolean; examResults: GeneratedExamResults | null; initTests: (arg0: Test[]) => void; isChallengeCompleted: boolean; isSignedIn: boolean; openExitExamModal: () => void; closeExitExamModal: () => void; openFinishExamModal: () => void; closeFinishExamModal: () => void; pageContext: { challengeMeta: ChallengeMeta; }; t: TFunction; startExam: () => void; stopExam: () => void; submitChallenge: () => void; setUserCompletedExam: (arg0: UserExam) => void; updateChallengeMeta: (arg0: ChallengeMeta) => void; } function convertMd(md: string): string { return micromark(md); }\n\nfunction ShowExam(props: ShowExamProps) {\n  const {\n    data: {\n      challengeNode: {\n        challenge: {\n          block,\n          dashedName,\n          description,\n          fields: { blockName },\n          instructions,\n          prerequisites,\n          superBlock,\n          title,\n          translationPending\n        }\n      }\n    },\n    examInProgress,\n    examResults,\n    completedChallenges,\n    completedSurveys,\n    isChallengeCompleted,\n    openExitExamModal,\n    openFinishExamModal,\n    t\n  } = props;\n\nlet timerInterval: NodeJS.Timeout;\n\nconst container = useRef<HTMLElement>(null);\n\nconst [examTimeInSeconds, setExamTimeInSeconds] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [generatedExamQuestions, setGeneratedExamQuestions] = useState<\n    GeneratedExamQuestion[]\n  >([]);\n  const [userExamQuestions, setUserExamQuestions] = useState<\n    UserExamQuestion[]\n  >([]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "e31fb5052c5297fa28329bef9708383a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "convertMd(md: string): string { return micromark(md); } function ShowExam(props: ShowExamProps) { const { data: { challengeNode: { challenge: { block, dashedName, description, fields: { blockName }, instructions, prerequisites, superBlock, title, translationPending } } }, examInProgress, examResults, completedChallenges, completedSurveys, isChallengeCompleted, openExitExamModal, openFinishExamModal, t } = props; let timerInterval: NodeJS.Timeout; const container = useRef<HTMLElement>(null); const [examTimeInSeconds, setExamTimeInSeconds] = useState(0); const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); const [generatedExamQuestions, setGeneratedExamQuestions] = useState< GeneratedExamQuestion[] >([]); const [userExamQuestions, setUserExamQuestions] = useState< UserExamQuestion[] >([]);\n\nuseEffect(() => {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            challengeType,\n            helpCategory,\n            title\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = props;\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n\ncontainer.current?.focus();\n\nreturn () => {\n      cleanUp();\n      props.stopExam();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n// Normally you would clear listeners in a useEffect cleanup function, but we\n  // need to set them in the runExam function (rather than in a useEffect). The\n  // refs make them stable across renders and thus removable.\n  const stopWindowCloseRef = useRef((event: Event) => {\n    event.preventDefault();\n    alert(props.t('misc.navigation-warning'));\n  });\n\nconst stopBrowserBackRef = useRef((event: Event) => {\n    event.preventDefault();\n    window.history.forward();\n    // TODO: useTranslation\n    alert(props.t('misc.navigation-warning'));\n  });",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "dfdecefe3812c88d6869c34783014eec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "challengeMounted(challengeMeta.id); container.current?.focus(); return () => { cleanUp(); props.stopExam(); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); // Normally you would clear listeners in a useEffect cleanup function, but we // need to set them in the runExam function (rather than in a useEffect). The // refs make them stable across renders and thus removable. const stopWindowCloseRef = useRef((event: Event) => { event.preventDefault(); alert(props.t('misc.navigation-warning')); }); const stopBrowserBackRef = useRef((event: Event) => { event.preventDefault(); window.history.forward(); // TODO: useTranslation alert(props.t('misc.navigation-warning')); });\n\nconst runExam = async () => {\n    // TODO: show loader\n    const {\n      createFlashMessage,\n      data: {\n        challengeNode: {\n          challenge: { id: challengeId }\n        }\n      }\n    } = props;\n\nconst generateExamResponse = await getGenerateExam(challengeId);\n    const { response, data } = generateExamResponse;\n\nif (response.status === 200) {\n      const { generatedExam = [] } = data as {\n        generatedExam: GeneratedExamQuestion[];\n      };\n      const emptyUserExamQuestions = generatedExam.map(q => {\n        return {\n          id: q.id,\n          question: q.question,\n          answer: { id: null, answer: null }\n        };\n      }) as UserExamQuestion[];\n\nsetGeneratedExamQuestions(generatedExam);\n      setUserExamQuestions(emptyUserExamQuestions);\n\ntimerInterval = setInterval(() => {\n        setExamTimeInSeconds(t => t + 1);\n      }, 1000);\n\nprops.startExam();\n\nwindow.addEventListener('beforeunload', stopWindowCloseRef.current);\n      window.addEventListener('popstate', stopBrowserBackRef.current);\n    } else {\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.GenerateExamError\n      });\n    }\n  };\n\nconst selectAnswer = (index: number, id: string, answer: string): void => {\n    const newUserExamQuestions = Array.from(userExamQuestions);\n    newUserExamQuestions[index].answer.id = id;\n    newUserExamQuestions[index].answer.answer = answer;\n    setUserExamQuestions(newUserExamQuestions);\n  };\n\nconst goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "3ba1bb62124c7abdf38c5aa5f5c0ae35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "q.question, answer: { id: null, answer: null } }; }) as UserExamQuestion[]; setGeneratedExamQuestions(generatedExam); setUserExamQuestions(emptyUserExamQuestions); timerInterval = setInterval(() => { setExamTimeInSeconds(t => t + 1); }, 1000); props.startExam(); window.addEventListener('beforeunload', stopWindowCloseRef.current); window.addEventListener('popstate', stopBrowserBackRef.current); } else { createFlashMessage({ type: 'danger', message: FlashMessages.GenerateExamError }); } }; const selectAnswer = (index: number, id: string, answer: string): void => { const newUserExamQuestions = Array.from(userExamQuestions); newUserExamQuestions[index].answer.id = id; newUserExamQuestions[index].answer.answer = answer; setUserExamQuestions(newUserExamQuestions); }; const goToPreviousQuestion = () => { setCurrentQuestionIndex(currentQuestionIndex - 1); };\n\nconst goToNextQuestion = () => {\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\nconst cleanUp = () => {\n    clearInterval(timerInterval);\n\nsetExamTimeInSeconds(0);\n    setCurrentQuestionIndex(0);\n\nwindow.removeEventListener('beforeunload', stopWindowCloseRef.current);\n    window.removeEventListener('popstate', stopBrowserBackRef.current);\n\nprops.clearExamResults();\n    props.closeExitExamModal();\n    props.closeFinishExamModal();\n  };\n\nconst finishExam = () => {\n    // TODO: show loader\n    cleanUp();\n\nconst { setUserCompletedExam, submitChallenge } = props;\n\nsetUserCompletedExam({ userExamQuestions, examTimeInSeconds });\n    submitChallenge();\n  };\n\nconst exitExam = () => {\n    cleanUp();\n\nconst {\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { blockHashSlug }\n          }\n        }\n      },\n      stopExam\n    } = props;\n    stopExam();\n    void navigate(blockHashSlug || '/learn');\n  };\n\nlet missingPrerequisites: PrerequisiteChallenge[] = [];\n  if (prerequisites) {\n    missingPrerequisites = prerequisites?.filter(\n      prerequisite =>\n        !completedChallenges.find(({ id }) => prerequisite.id === id)\n    );\n  }\n\nconst surveyCompleted = completedSurveys.some(\n    s => s.title === 'Foundational C# with Microsoft Survey'\n  );\n  const prerequisitesComplete = missingPrerequisites.length === 0;\n  const qualifiedForExam = prerequisitesComplete && surveyCompleted;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "7b3e8e3292d8164e53f545d9aa355fab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "=> { cleanUp(); const { data: { challengeNode: { challenge: { fields: { blockHashSlug } } } }, stopExam } = props; stopExam(); void navigate(blockHashSlug || '/learn'); }; let missingPrerequisites: PrerequisiteChallenge[] = []; if (prerequisites) { missingPrerequisites = prerequisites?.filter( prerequisite => !completedChallenges.find(({ id }) => prerequisite.id === id) ); } const surveyCompleted = completedSurveys.some( s => s.title === 'Foundational C# with Microsoft Survey' ); const prerequisitesComplete = missingPrerequisites.length === 0; const qualifiedForExam = prerequisitesComplete && surveyCompleted;\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )}: ${title}`;\n  const windowTitle = `${blockNameTitle} | freeCodeCamp.org`;\n\n// TODO: If already taken exam, show different messages\n\nreturn examInProgress ? (\n    <Container>\n      <Row>\n        <Spacer size='m' />\n        <Col md={10} mdOffset={1} sm={10} smOffset={1} xs={12}>\n          {examResults ? (\n            <ExamResults\n              dashedName={dashedName}\n              title={title}\n              examResults={examResults}\n              exitExam={exitExam}\n            />\n          ) : (\n            <div className='exam-wrapper'>\n              <div className='exam-header'>\n                <div data-playwright-test-label='exam-show-title'>{title}</div>\n                <span>|</span>\n                <div data-playwright-test-label='exam-show-question-time'>\n                  {t('learn.exam.time', {\n                    t: formatSecondsToTime(examTimeInSeconds)\n                  })}\n                </div>\n                <span>|</span>\n                <div>\n                  {t('learn.exam.questions', {\n                    n: currentQuestionIndex + 1,\n                    t: generatedExamQuestions.length\n                  })}\n                </div>\n              </div>\n              <hr />\n              <Spacer size='m' />\n\n<div className='exam-questions'>\n                <PrismFormatted\n                  text={convertMd(\n                    generatedExamQuestions[currentQuestionIndex].question\n                  )}\n                />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "112b373975b855c46a529b73634f9a06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "// TODO: If already taken exam, show different messages return examInProgress ? ( <Container> <Row> <Spacer size='m' /> <Col md={10} mdOffset={1} sm={10} smOffset={1} xs={12}> {examResults ? ( <ExamResults dashedName={dashedName} title={title} examResults={examResults} exitExam={exitExam} /> ) : ( <div className='exam-wrapper'> <div className='exam-header'> <div data-playwright-test-label='exam-show-title'>{title}</div> <span>|</span> <div data-playwright-test-label='exam-show-question-time'> {t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })} </div> <span>|</span> <div> {t('learn.exam.questions', { n: currentQuestionIndex + 1, t: generatedExamQuestions.length })} </div> </div> <hr /> <Spacer size='m' /> <div className='exam-questions'> <PrismFormatted text={convertMd( generatedExamQuestions[currentQuestionIndex].question )} />\n\n<Spacer size='l' />\n                <div className='exam-answers'>\n                  {generatedExamQuestions[currentQuestionIndex].answers.map(\n                    ({ answer, id }) => (\n                      <label className='exam-answer-label' key={id}>\n                        <input\n                          checked={\n                            userExamQuestions[currentQuestionIndex].answer\n                              .id === id\n                          }\n                          className='sr-only'\n                          name={id}\n                          onChange={() =>\n                            selectAnswer(currentQuestionIndex, id, answer)\n                          }\n                          type='radio'\n                          value={id}\n                        />{' '}\n                        <span className='exam-answer-input-visible'>\n                          {userExamQuestions[currentQuestionIndex].answer.id ===\n                          id ? (\n                            <span className='exam-answer-input-selected' />\n                          ) : null}\n                        </span>\n                        <PrismFormatted text={convertMd(answer)} />\n                      </label>\n                    )\n                  )}\n                </div>\n              </div>\n              <Spacer size='l' />\n\n<div className='exam-buttons'>\n                <Button\n                  block={true}\n                  className='exam-button'\n                  disabled={currentQuestionIndex <= 0}\n                  variant='primary'\n                  onClick={goToPreviousQuestion}\n                >\n                  {t('buttons.previous-question')}\n                </Button>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "0a395ec6ff3fddf96a4cef3050024a38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "text={convertMd( generatedExamQuestions[currentQuestionIndex].question )} /> <Spacer size='l' /> <div className='exam-answers'> {generatedExamQuestions[currentQuestionIndex].answers.map( ({ answer, id }) => ( <label className='exam-answer-label' key={id}> <input checked={ userExamQuestions[currentQuestionIndex].answer .id === id } className='sr-only' name={id} onChange={() => selectAnswer(currentQuestionIndex, id, answer) } type='radio' value={id} />{' '} <span className='exam-answer-input-visible'> {userExamQuestions[currentQuestionIndex].answer.id === id ? ( <span className='exam-answer-input-selected' /> ) : null} </span> <PrismFormatted text={convertMd(answer)} /> </label> ) )} </div> </div> <Spacer size='l' /> <div className='exam-buttons'> <Button block={true} className='exam-button' disabled={currentQuestionIndex <= 0} variant='primary' onClick={goToPreviousQuestion} > {t('buttons.previous-question')} </Button>\n\n{currentQuestionIndex === generatedExamQuestions.length - 1 ? (\n                  <Button\n                    block={true}\n                    disabled={\n                      !userExamQuestions[currentQuestionIndex].answer.id\n                    }\n                    className='exam-button'\n                    variant='primary'\n                    onClick={openFinishExamModal}\n                  >\n                    {t('buttons.finish-exam')}\n                  </Button>\n                ) : (\n                  <Button\n                    block={true}\n                    disabled={\n                      !userExamQuestions[currentQuestionIndex].answer.id\n                    }\n                    className='exam-button'\n                    variant='primary'\n                    onClick={goToNextQuestion}\n                  >\n                    {t('buttons.next-question')}\n                  </Button>\n                )}\n              </div>\n\n<Spacer size='m' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "819c6a16cb67ffcf9d7ac016ae32083f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "'} <span className='exam-answer-input-visible'> {userExamQuestions[currentQuestionIndex].answer.id === id ? ( <span className='exam-answer-input-selected' /> ) : null} </span> <PrismFormatted text={convertMd(answer)} /> </label> ) )} </div> </div> <Spacer size='l' /> <div className='exam-buttons'> <Button block={true} className='exam-button' disabled={currentQuestionIndex <= 0} variant='primary' onClick={goToPreviousQuestion} > {t('buttons.previous-question')} </Button> {currentQuestionIndex === generatedExamQuestions.length - 1 ? ( <Button block={true} disabled={ !userExamQuestions[currentQuestionIndex].answer.id } className='exam-button' variant='primary' onClick={openFinishExamModal} > {t('buttons.finish-exam')} </Button> ) : ( <Button block={true} disabled={ !userExamQuestions[currentQuestionIndex].answer.id } className='exam-button' variant='primary' onClick={goToNextQuestion} > {t('buttons.next-question')} </Button> )} </div> <Spacer size='m' />\n\n<div className='exam-buttons'>\n                <Button\n                  block={true}\n                  className='exam-button'\n                  variant='primary'\n                  onClick={openExitExamModal}\n                >\n                  {t('buttons.exit-exam')}\n                </Button>\n              </div>\n            </div>\n          )}\n        </Col>\n        <ExitExamModal exitExam={exitExam} />\n        <FinishExamModal finishExam={finishExam} />\n      </Row>\n    </Container>\n  ) : (\n    <Hotkeys containerRef={container}>\n      <LearnLayout>\n        <Helmet title={windowTitle} />\n        <Container>\n          <Row>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n              <Spacer size='m' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "bff6b8975d9df9505ad7d408b29ada52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "disabled={ !userExamQuestions[currentQuestionIndex].answer.id } className='exam-button' variant='primary' onClick={openFinishExamModal} > {t('buttons.finish-exam')} </Button> ) : ( <Button block={true} disabled={ !userExamQuestions[currentQuestionIndex].answer.id } className='exam-button' variant='primary' onClick={goToNextQuestion} > {t('buttons.next-question')} </Button> )} </div> <Spacer size='m' /> <div className='exam-buttons'> <Button block={true} className='exam-button' variant='primary' onClick={openExitExamModal} > {t('buttons.exit-exam')} </Button> </div> </div> )} </Col> <ExitExamModal exitExam={exitExam} /> <FinishExamModal finishExam={finishExam} /> </Row> </Container> ) : ( <Hotkeys containerRef={container}> <LearnLayout> <Helmet title={windowTitle} /> <Container> <Row> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <Spacer size='m' />\n\n{qualifiedForExam ? (\n                <Alert variant='info'>\n                  <p>{t('learn.exam.qualified')}</p>\n                </Alert>\n              ) : !prerequisitesComplete ? (\n                <MissingPrerequisites\n                  missingPrerequisites={missingPrerequisites}\n                />\n              ) : (\n                <FoundationalCSharpSurveyAlert />\n              )}\n              <PrismFormatted text={description} />\n              <Spacer size='m' />\n              <PrismFormatted text={instructions} />\n\n<Button\n                block={true}\n                variant='primary'\n                disabled={!qualifiedForExam}\n                // `runExam` being an async callback is acceptable\n                //eslint-disable-next-line @typescript-eslint/no-misused-promises\n                onClick={runExam}\n              >\n                {t('buttons.click-start-exam')}\n              </Button>\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n}\n\nShowExam.displayName = 'ShowExam';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "c49239dc8fecc1987b5636afb74fd7bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "smOffset={1} xs={12}> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <Spacer size='m' /> {qualifiedForExam ? ( <Alert variant='info'> <p>{t('learn.exam.qualified')}</p> </Alert> ) : !prerequisitesComplete ? ( <MissingPrerequisites missingPrerequisites={missingPrerequisites} /> ) : ( <FoundationalCSharpSurveyAlert /> )} <PrismFormatted text={description} /> <Spacer size='m' /> <PrismFormatted text={instructions} /> <Button block={true} variant='primary' disabled={!qualifiedForExam} // `runExam` being an async callback is acceptable //eslint-disable-next-line @typescript-eslint/no-misused-promises onClick={runExam} > {t('buttons.click-start-exam')} </Button> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> </LearnLayout> </Hotkeys> ); } ShowExam.displayName = 'ShowExam';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowExam));\n\n// GraphQL\nexport const query = graphql`\n  query ExamChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        block\n        challengeType\n        dashedName\n        description\n        fields {\n          blockHashSlug\n          blockName\n          tests {\n            text\n            testString\n          }\n        }\n        helpCategory\n        id\n        instructions\n        prerequisites {\n          id\n          title\n        }\n        superBlock\n        title\n        translationPending\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 16957,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "f4a3495cf0d00d5f1cbc3a4b4327299c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.css",
    "source_type": "git_repo",
    "title": "show",
    "content": "input[type='checkbox'] {\n  display: grid;\n  place-content: center;\n  -webkit-appearance: none;\n  appearance: none;\n  background-color: var(--primary-background);\n  min-width: 1.15em;\n  min-height: 1.15em;\n  max-width: 1.15em;\n  max-height: 1.15em;\n  margin-inline-end: 15px;\n  border: 2px solid var(--primary-color);\n  border-radius: 0.15em;\n  transform: translateY(-0.075em);\n  cursor: pointer;\n}\n\ninput[type='checkbox']::before {\n  content: '';\n  width: 0.65em;\n  height: 0.65em;\n  transform: scale(0);\n  transition: 120ms transform ease-in-out;\n  box-shadow: inset 1em 1em var(--primary-color);\n}\n\ninput[type='checkbox']:checked::before {\n  transform: scale(1);\n}\n\naudio {\n  background-color: aqua;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 704,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.css",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "282f06e5336c0f634d66a623c67a775b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "// Package Utilities\nimport { graphql } from 'gatsby';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { ObserveKeys } from 'react-hotkeys';\nimport type { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Button, Spacer } from '@freecodecamp/ui';\nimport ShortcutsModal from '../components/shortcuts-modal';\n\n// Local Utilities\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport Hotkeys from '../components/hotkeys';\nimport ChallengeTitle from '../components/challenge-title';\nimport ChallegeExplanation from '../components/challenge-explanation';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport FillInTheBlanks from '../components/fill-in-the-blanks';\nimport ChallengeTranscript from '../components/challenge-transcript';\nimport PrismFormatted from '../components/prism-formatted';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport Scene from '../components/scene/scene';\nimport { SceneSubject } from '../components/scene/scene-subject';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { replaceAppleQuotes } from '../../../utils/replace-apple-quotes';\n\nimport './show.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion'),\n      openHelpModal: () => openModal('help')\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "0f3eb633ddea6ed8e70bdcd6f92075a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "challengeMounted, updateChallengeMeta, openModal, updateSolutionFormValues, initTests } from '../redux/actions'; import Scene from '../components/scene/scene'; import { SceneSubject } from '../components/scene/scene-subject'; import { getChallengePaths } from '../utils/challenge-paths'; import { isChallengeCompletedSelector } from '../redux/selectors'; import { replaceAppleQuotes } from '../../../utils/replace-apple-quotes'; import './show.css'; // Redux Setup const mapStateToProps = createSelector( isChallengeCompletedSelector, (isChallengeCompleted: boolean) => ({ isChallengeCompleted }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { initTests, updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion'), openHelpModal: () => openModal('help') }, dispatch );\n\n// Types\ninterface ShowFillInTheBlankProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  isChallengeCompleted: boolean;\n  initTests: (xs: Test[]) => void;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\nconst ShowFillInTheBlank = ({\n  data: {\n    challengeNode: {\n      challenge: {\n        title,\n        description,\n        instructions,\n        explanation,\n        transcript,\n        superBlock,\n        block,\n        translationPending,\n        fields: { blockName, tests },\n        challengeType,\n        fillInTheBlank,\n        helpCategory,\n        scene\n      }\n    }\n  },\n  challengeMounted,\n  openHelpModal,\n  updateChallengeMeta,\n  openCompletionModal,\n  pageContext: { challengeMeta },\n  isChallengeCompleted\n}: ShowFillInTheBlankProps) => {\n  const { t } = useTranslation();\n  const emptyArray = fillInTheBlank.blanks.map(() => null);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "c4f7e4b72e1e080b865f5f7394a601d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "openHelpModal: () => void; pageContext: { challengeMeta: ChallengeMeta; }; t: TFunction; updateChallengeMeta: (arg0: ChallengeMeta) => void; updateSolutionFormValues: () => void; } const ShowFillInTheBlank = ({ data: { challengeNode: { challenge: { title, description, instructions, explanation, transcript, superBlock, block, translationPending, fields: { blockName, tests }, challengeType, fillInTheBlank, helpCategory, scene } } }, challengeMounted, openHelpModal, updateChallengeMeta, openCompletionModal, pageContext: { challengeMeta }, isChallengeCompleted }: ShowFillInTheBlankProps) => { const { t } = useTranslation(); const emptyArray = fillInTheBlank.blanks.map(() => null);\n\nconst [showWrong, setShowWrong] = useState(false);\n  const [userAnswers, setUserAnswers] = useState<(null | string)[]>(emptyArray);\n  const [answersCorrect, setAnswersCorrect] =\n    useState<(null | boolean)[]>(emptyArray);\n  const [allBlanksFilled, setAllBlanksFilled] = useState(false);\n  const [feedback, setFeedback] = useState<string | null>(null);\n  const [showFeedback, setShowFeedback] = useState(false);\n\nconst container = useRef<HTMLElement | null>(null);\n\nuseEffect(() => {\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst handleSubmit = () => {\n    const blankAnswers = fillInTheBlank.blanks.map(b => b.answer);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "6be0ca854052fdfef2dec1a21cf2a921",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "const [answersCorrect, setAnswersCorrect] = useState<(null | boolean)[]>(emptyArray); const [allBlanksFilled, setAllBlanksFilled] = useState(false); const [feedback, setFeedback] = useState<string | null>(null); const [showFeedback, setShowFeedback] = useState(false); const container = useRef<HTMLElement | null>(null); useEffect(() => { initTests(tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const handleSubmit = () => { const blankAnswers = fillInTheBlank.blanks.map(b => b.answer);\n\nconst newAnswersCorrect = userAnswers.map(\n      (userAnswer, i) =>\n        !!userAnswer &&\n        replaceAppleQuotes(userAnswer.trim()).toLowerCase() ===\n          blankAnswers[i].toLowerCase()\n    );\n    setAnswersCorrect(newAnswersCorrect);\n    const hasWrongAnswer = newAnswersCorrect.some(a => a === false);\n    if (!hasWrongAnswer) {\n      setShowFeedback(false);\n      setFeedback(null);\n      openCompletionModal();\n    } else {\n      const firstWrongIndex = newAnswersCorrect.findIndex(a => a === false);\n      const feedback =\n        firstWrongIndex >= 0\n          ? fillInTheBlank.blanks[firstWrongIndex].feedback\n          : null;\n\nsetFeedback(feedback);\n      setShowWrong(true);\n      setShowFeedback(true);\n    }\n  };\n\nconst handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const inputIndex = parseInt(e.target.getAttribute('data-index') as string);\n\nconst newUserAnswers = [...userAnswers];\n    newUserAnswers[inputIndex] = e.target.value;\n\nconst newAnswersCorrect = [...answersCorrect];\n    newAnswersCorrect[inputIndex] = null;\n\nconst allBlanksFilled = newUserAnswers.every(a => a);\n\nsetUserAnswers(newUserAnswers);\n    setAnswersCorrect(newAnswersCorrect);\n    setAllBlanksFilled(allBlanksFilled);\n    setShowWrong(false);\n  };\n\nconst handlePlayScene = () => {\n    sceneSubject.notify('play');\n  };\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "b368b7e5585c9ef0dd9176a02760e94c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "= newAnswersCorrect.findIndex(a => a === false); const feedback = firstWrongIndex >= 0 ? fillInTheBlank.blanks[firstWrongIndex].feedback : null; setFeedback(feedback); setShowWrong(true); setShowFeedback(true); } }; const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => { const inputIndex = parseInt(e.target.getAttribute('data-index') as string); const newUserAnswers = [...userAnswers]; newUserAnswers[inputIndex] = e.target.value; const newAnswersCorrect = [...answersCorrect]; newAnswersCorrect[inputIndex] = null; const allBlanksFilled = newUserAnswers.every(a => a); setUserAnswers(newUserAnswers); setAnswersCorrect(newAnswersCorrect); setAllBlanksFilled(allBlanksFilled); setShowWrong(false); }; const handlePlayScene = () => { sceneSubject.notify('play'); }; const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`;\n\nconst sceneSubject = new SceneSubject();\n\nreturn (\n    <Hotkeys\n      executeChallenge={() => handleSubmit()}\n      containerRef={container}\n      playScene={handlePlayScene}\n    >\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container>\n          <Row>\n            <Spacer size='m' />\n            <ChallengeTitle\n              isCompleted={isChallengeCompleted}\n              translationPending={translationPending}\n            >\n              {title}\n            </ChallengeTitle>\n\n<Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <PrismFormatted text={description} />\n              <Spacer size='m' />\n            </Col>\n\n{scene && <Scene scene={scene} sceneSubject={sceneSubject} />}\n\n<Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              {transcript && <ChallengeTranscript transcript={transcript} />}\n\n{instructions && (\n                <>\n                  <PrismFormatted text={instructions} />\n                  <Spacer size='xs' />\n                </>\n              )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "e562a2d3cf2e5559fbeeee1359a0d5ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "${title}`; const sceneSubject = new SceneSubject(); return ( <Hotkeys executeChallenge={() => handleSubmit()} containerRef={container} playScene={handlePlayScene} > <LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container> <Row> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <PrismFormatted text={description} /> <Spacer size='m' /> </Col> {scene && <Scene scene={scene} sceneSubject={sceneSubject} />} <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> {transcript && <ChallengeTranscript transcript={transcript} />} {instructions && ( <> <PrismFormatted text={instructions} /> <Spacer size='xs' /> </> )}\n\n{/* what we want to observe is ctrl/cmd + enter, but ObserveKeys is buggy and throws an error\n                if it encounters a key combination, so we have to pass in the individual keys to observe */}\n              <ObserveKeys only={['ctrl', 'cmd', 'enter']}>\n                <FillInTheBlanks\n                  fillInTheBlank={fillInTheBlank}\n                  answersCorrect={answersCorrect}\n                  showFeedback={showFeedback}\n                  feedback={feedback}\n                  showWrong={showWrong}\n                  handleInputChange={handleInputChange}\n                />\n              </ObserveKeys>\n\n{explanation ? (\n                <ChallegeExplanation explanation={explanation} />\n              ) : (\n                <Spacer size='m' />\n              )}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "9f3c3abe20d45c7b7dfbcb73b7b57378",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "transcript={transcript} />} {instructions && ( <> <PrismFormatted text={instructions} /> <Spacer size='xs' /> </> )} {/* what we want to observe is ctrl/cmd + enter, but ObserveKeys is buggy and throws an error if it encounters a key combination, so we have to pass in the individual keys to observe */} <ObserveKeys only={['ctrl', 'cmd', 'enter']}> <FillInTheBlanks fillInTheBlank={fillInTheBlank} answersCorrect={answersCorrect} showFeedback={showFeedback} feedback={feedback} showWrong={showWrong} handleInputChange={handleInputChange} /> </ObserveKeys> {explanation ? ( <ChallegeExplanation explanation={explanation} /> ) : ( <Spacer size='m' /> )}\n\n<Button\n                block={true}\n                variant='primary'\n                disabled={!allBlanksFilled}\n                onClick={() => handleSubmit()}\n              >\n                {t('buttons.check-answer')}\n              </Button>\n              <Spacer size='xxs' />\n              <Button block={true} variant='primary' onClick={openHelpModal}>\n                {t('buttons.ask-for-help')}\n              </Button>\n              <Spacer size='l' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n        <ShortcutsModal />\n      </LearnLayout>\n    </Hotkeys>\n  );\n};\n\nShowFillInTheBlank.displayName = 'ShowFillInTheBlank';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowFillInTheBlank);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "01a94271bf2519e241a49ee5116dcef0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "individual keys to observe */} <ObserveKeys only={['ctrl', 'cmd', 'enter']}> <FillInTheBlanks fillInTheBlank={fillInTheBlank} answersCorrect={answersCorrect} showFeedback={showFeedback} feedback={feedback} showWrong={showWrong} handleInputChange={handleInputChange} /> </ObserveKeys> {explanation ? ( <ChallegeExplanation explanation={explanation} /> ) : ( <Spacer size='m' /> )} <Button block={true} variant='primary' disabled={!allBlanksFilled} onClick={() => handleSubmit()} > {t('buttons.check-answer')} </Button> <Spacer size='xxs' /> <Button block={true} variant='primary' onClick={openHelpModal}> {t('buttons.ask-for-help')} </Button> <Spacer size='l' /> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> <ShortcutsModal /> </LearnLayout> </Hotkeys> ); }; ShowFillInTheBlank.displayName = 'ShowFillInTheBlank'; export default connect(mapStateToProps, mapDispatchToProps)(ShowFillInTheBlank);\n\nexport const query = graphql`\n  query FillInTheBlankChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        title\n        description\n        instructions\n        explanation\n        challengeType\n        helpCategory\n        superBlock\n        block\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n        fillInTheBlank {\n          sentence\n          blanks {\n            answer\n            feedback\n          }\n        }\n        transcript\n        scene {\n          setup {\n            background\n            characters {\n              character\n              position {\n                x\n                y\n                z\n              }\n              opacity\n            }\n            audio {\n              filename\n              startTime\n              startTimestamp\n              finishTimestamp\n            }\n            alwaysShowDialogue\n          }\n          commands {\n            background\n            character\n            position {\n              x\n              y\n              z\n            }\n            opacity\n            startTime\n            finishTime\n            dialogue {\n              text\n              align\n            }\n          }\n        }\n        translationPending\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\fill-in-the-blank\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "daa24204c104c3b696a0e97988b7eb22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\hooks\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "export { usePageLeave } from './use-page-leave';",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 49,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\hooks\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 13,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "391f184ee3b111a861fc853dae43b2dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\hooks\\use-page-leave.ts",
    "source_type": "git_repo",
    "title": "use-page-leave",
    "content": "import { useEffect } from 'react';\nimport { useLocation, globalHistory } from '@gatsbyjs/reach-router';\n\ninterface Props {\n  onWindowClose: (event: BeforeUnloadEvent) => void;\n  onHistoryChange: (targetPathname: string) => void;\n}\n\nexport const usePageLeave = ({ onWindowClose, onHistoryChange }: Props) => {\n  const curLocation = useLocation();\n\nuseEffect(() => {\n    window.addEventListener('beforeunload', onWindowClose);\n\n// This is a workaround as @gatsbyjs/reach-router doesn't support blocking history change.\n    // https://github.com/reach/router/issues/464\n    const unlistenHistory = globalHistory.listen(({ action, location }) => {\n      const isBack = action === 'POP';\n      const isRouteChanged =\n        action === 'PUSH' && location.pathname !== curLocation.pathname;\n\nif (isBack || isRouteChanged) {\n        onHistoryChange(location.pathname);\n      }\n    });\n\nreturn () => {\n      window.removeEventListener('beforeunload', onWindowClose);\n      unlistenHistory();\n    };\n  }, [onWindowClose, onHistoryChange, curLocation]);\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1063,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\hooks\\use-page-leave.ts",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8a2a8d37b90c3635e8551d9f38bb1670",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.css",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": ".link-ms-user-ol li {\n  margin-bottom: 5px;\n}\n\n.link-ms-user-ol li a {\n  word-break: break-all;\n}\n\n.link-ms-user-ol li:last-child {\n  margin-bottom: 0;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 154,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.css",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2135a318abd5d7e51fe3c64c85f39cdf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql } from 'gatsby';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Container, Col, Row, Button, Spacer } from '@freecodecamp/ui';\nimport { isEqual } from 'lodash';\nimport store from 'store';\nimport { YouTubeEvent } from 'react-youtube';\nimport { ObserveKeys } from 'react-hotkeys';\n\n// Local Utilities\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport ChallengeTitle from '../components/challenge-title';\nimport VideoPlayer from '../components/video-player';\nimport CompletionModal from '../components/completion-modal';\nimport Assignments from '../components/assignments';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { BlockTypes } from '../../../../../shared/config/blocks';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport Scene from '../components/scene/scene';\nimport MultipleChoiceQuestions from '../components/multiple-choice-questions';\nimport ChallengeExplanation from '../components/challenge-explanation';\nimport ChallengeTranscript from '../components/challenge-transcript';\nimport HelpModal from '../components/help-modal';\nimport { SceneSubject } from '../components/scene/scene-subject';\n\n// Styles\nimport './show.css';\nimport '../video.css';\n\n// Redux Setup\nconst mapStateToProps = (state: unknown) => ({\n  isChallengeCompleted: isChallengeCompletedSelector(state)\n});\n\nconst mapDispatchToProps = {\n  initTests,\n  updateChallengeMeta,\n  challengeMounted,\n  updateSolutionFormValues,\n  openCompletionModal: () => openModal('completion'),\n  openHelpModal: () => openModal('help')\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "71acdc3297b40fe2451f2d62d5cdf97b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "from '../redux/selectors'; import { BlockTypes } from '../../../../../shared/config/blocks'; import { getChallengePaths } from '../utils/challenge-paths'; import Scene from '../components/scene/scene'; import MultipleChoiceQuestions from '../components/multiple-choice-questions'; import ChallengeExplanation from '../components/challenge-explanation'; import ChallengeTranscript from '../components/challenge-transcript'; import HelpModal from '../components/help-modal'; import { SceneSubject } from '../components/scene/scene-subject'; // Styles import './show.css'; import '../video.css'; // Redux Setup const mapStateToProps = (state: unknown) => ({ isChallengeCompleted: isChallengeCompletedSelector(state) }); const mapDispatchToProps = { initTests, updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion'), openHelpModal: () => openModal('help') };\n\n// Types\ninterface ShowQuizProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\nconst ShowGeneric = ({\n  challengeMounted,\n  data: {\n    challengeNode: {\n      challenge: {\n        assignments,\n        bilibiliIds,\n        block,\n        blockType,\n        description,\n        explanation,\n        challengeType,\n        fields: { blockName, tests },\n        helpCategory,\n        instructions,\n        questions,\n        title,\n        transcript,\n        translationPending,\n        scene,\n        superBlock,\n        videoId,\n        videoLocaleIds\n      }\n    }\n  },\n  pageContext: { challengeMeta },\n  initTests,\n  updateChallengeMeta,\n  openCompletionModal,\n  openHelpModal,\n  isChallengeCompleted\n}: ShowQuizProps) => {\n  const { t } = useTranslation();\n  const container = useRef<HTMLElement | null>(null);\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "4fc0a90233cb0871b8ed0dfddf9e5263",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "=> void; updateSolutionFormValues: () => void; } const ShowGeneric = ({ challengeMounted, data: { challengeNode: { challenge: { assignments, bilibiliIds, block, blockType, description, explanation, challengeType, fields: { blockName, tests }, helpCategory, instructions, questions, title, transcript, translationPending, scene, superBlock, videoId, videoLocaleIds } } }, pageContext: { challengeMeta }, initTests, updateChallengeMeta, openCompletionModal, openHelpModal, isChallengeCompleted }: ShowQuizProps) => { const { t } = useTranslation(); const container = useRef<HTMLElement | null>(null); const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`;\n\nuseEffect(() => {\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      blockType,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n// video\n  const [videoIsLoaded, setVideoIsLoaded] = useState(false);\n\nconst handleVideoIsLoaded = (e: YouTubeEvent) => {\n    const playbackRate = Number(store.get('fcc-yt-playback-rate')) || 1;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const player = e.target;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    player.setPlaybackRate(playbackRate);\n\nsetVideoIsLoaded(true);\n  };\n\n// assignments\n  const [assignmentsCompleted, setAssignmentsCompleted] = useState(0);\n  const allAssignmentsCompleted = assignmentsCompleted === assignments.length;\n\nconst handleAssignmentChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const isCompleted = event.target.checked; // extract value before target is nullified\n    setAssignmentsCompleted(a => (isCompleted ? a + 1 : a - 1));\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "91c075f84d222e139733b7fa8e47eaaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "[videoIsLoaded, setVideoIsLoaded] = useState(false); const handleVideoIsLoaded = (e: YouTubeEvent) => { const playbackRate = Number(store.get('fcc-yt-playback-rate')) || 1; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment const player = e.target; // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access player.setPlaybackRate(playbackRate); setVideoIsLoaded(true); }; // assignments const [assignmentsCompleted, setAssignmentsCompleted] = useState(0); const allAssignmentsCompleted = assignmentsCompleted === assignments.length; const handleAssignmentChange = ( event: React.ChangeEvent<HTMLInputElement> ) => { const isCompleted = event.target.checked; // extract value before target is nullified setAssignmentsCompleted(a => (isCompleted ? a + 1 : a - 1)); };\n\n// multiple choice questions\n  const [selectedMcqOptions, setSelectedMcqOptions] = useState(\n    questions.map<number | null>(() => null)\n  );\n  const [submittedMcqAnswers, setSubmittedMcqAnswers] = useState(\n    questions.map<number | null>(() => null)\n  );\n\nconst [hasAnsweredMcqCorrectly, sethasAnsweredMcqCorrectly] = useState(true);\n\nconst [showFeedback, setShowFeedback] = useState(false);\n\nconst handleMcqOptionChange = (\n    questionIndex: number,\n    answerIndex: number\n  ): void => {\n    setSelectedMcqOptions(prev =>\n      prev.map((option, index) =>\n        index === questionIndex ? answerIndex : option\n      )\n    );\n  };\n\nconst handleSubmit = () => {\n    const hasCompletedAssignments =\n      assignments.length === 0 || allAssignmentsCompleted;\n    const mcqSolutions = questions.map(question => question.solution - 1);\n    const mcqCorrect = isEqual(mcqSolutions, selectedMcqOptions);\n\nsetSubmittedMcqAnswers(selectedMcqOptions);\n    setShowFeedback(true);\n    if (hasCompletedAssignments && mcqCorrect) {\n      openCompletionModal();\n    }\n\nif (mcqSolutions.length > selectedMcqOptions.length || !mcqCorrect) {\n      sethasAnsweredMcqCorrectly(false);\n    } else {\n      sethasAnsweredMcqCorrectly(true);\n    }\n  };\n\nconst sceneSubject = new SceneSubject();",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "f518f7d583486ff21fe30261d35ee1cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "answerIndex: number ): void => { setSelectedMcqOptions(prev => prev.map((option, index) => index === questionIndex ? answerIndex : option ) ); }; const handleSubmit = () => { const hasCompletedAssignments = assignments.length === 0 || allAssignmentsCompleted; const mcqSolutions = questions.map(question => question.solution - 1); const mcqCorrect = isEqual(mcqSolutions, selectedMcqOptions); setSubmittedMcqAnswers(selectedMcqOptions); setShowFeedback(true); if (hasCompletedAssignments && mcqCorrect) { openCompletionModal(); } if (mcqSolutions.length > selectedMcqOptions.length || !mcqCorrect) { sethasAnsweredMcqCorrectly(false); } else { sethasAnsweredMcqCorrectly(true); } }; const sceneSubject = new SceneSubject();\n\nreturn (\n    <Hotkeys\n      executeChallenge={handleSubmit}\n      containerRef={container}\n      playScene={scene ? () => sceneSubject.notify('play') : undefined}\n    >\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container>\n          <Row>\n            <Spacer size='m' />\n            <ChallengeTitle\n              isCompleted={isChallengeCompleted}\n              translationPending={translationPending}\n            >\n              {title}\n            </ChallengeTitle>\n\n<Spacer size='m' />\n\n{description && (\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <ChallengeDescription\n                  description={description}\n                  superBlock={superBlock}\n                />\n                <Spacer size='m' />\n              </Col>\n            )}\n\n<Col lg={10} lgOffset={1} md={10} mdOffset={1}>\n              {videoId && (\n                <>\n                  <VideoPlayer\n                    bilibiliIds={bilibiliIds}\n                    onVideoLoad={handleVideoIsLoaded}\n                    title={title}\n                    videoId={videoId}\n                    videoIsLoaded={videoIsLoaded}\n                    videoLocaleIds={videoLocaleIds}\n                  />\n                  <Spacer size='m' />\n                </>\n              )}\n            </Col>\n\n{scene && <Scene scene={scene} sceneSubject={sceneSubject} />}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "f80ef140fe775792f35aa0c19931a1de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "? () => sceneSubject.notify('play') : undefined} > <LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container> <Row> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <Spacer size='m' /> {description && ( <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <ChallengeDescription description={description} superBlock={superBlock} /> <Spacer size='m' /> </Col> )} <Col lg={10} lgOffset={1} md={10} mdOffset={1}> {videoId && ( <> <VideoPlayer bilibiliIds={bilibiliIds} onVideoLoad={handleVideoIsLoaded} title={title} videoId={videoId} videoIsLoaded={videoIsLoaded} videoLocaleIds={videoLocaleIds} /> <Spacer size='m' /> </> )} </Col> {scene && <Scene scene={scene} sceneSubject={sceneSubject} />}\n\n<Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              {transcript && <ChallengeTranscript transcript={transcript} />}\n\n{instructions && (\n                <>\n                  <ChallengeDescription\n                    instructions={instructions}\n                    superBlock={superBlock}\n                  />\n                  <Spacer size='m' />\n                </>\n              )}\n\n{assignments.length > 0 && (\n                <ObserveKeys only={['ctrl', 'cmd', 'enter']}>\n                  <Assignments\n                    assignments={assignments}\n                    allAssignmentsCompleted={allAssignmentsCompleted}\n                    handleAssignmentChange={handleAssignmentChange}\n                  />\n                </ObserveKeys>\n              )}\n\n{questions.length > 0 && (\n                <ObserveKeys only={['ctrl', 'cmd', 'enter']}>\n                  <MultipleChoiceQuestions\n                    questions={questions}\n                    selectedOptions={selectedMcqOptions}\n                    handleOptionChange={handleMcqOptionChange}\n                    submittedMcqAnswers={submittedMcqAnswers}\n                    showFeedback={showFeedback}\n                  />\n                </ObserveKeys>\n              )}\n\n{explanation ? (\n                <ChallengeExplanation explanation={explanation} />\n              ) : null}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "ace51950d9a370f033561f6334e08165",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "</> )} </Col> {scene && <Scene scene={scene} sceneSubject={sceneSubject} />} <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> {transcript && <ChallengeTranscript transcript={transcript} />} {instructions && ( <> <ChallengeDescription instructions={instructions} superBlock={superBlock} /> <Spacer size='m' /> </> )} {assignments.length > 0 && ( <ObserveKeys only={['ctrl', 'cmd', 'enter']}> <Assignments assignments={assignments} allAssignmentsCompleted={allAssignmentsCompleted} handleAssignmentChange={handleAssignmentChange} /> </ObserveKeys> )} {questions.length > 0 && ( <ObserveKeys only={['ctrl', 'cmd', 'enter']}> <MultipleChoiceQuestions questions={questions} selectedOptions={selectedMcqOptions} handleOptionChange={handleMcqOptionChange} submittedMcqAnswers={submittedMcqAnswers} showFeedback={showFeedback} /> </ObserveKeys> )} {explanation ? ( <ChallengeExplanation explanation={explanation} /> ) : null}\n\n{!hasAnsweredMcqCorrectly && (\n                <p className='text-center'>{t('learn.answered-mcq')}</p>\n              )}\n\n<Button block={true} variant='primary' onClick={handleSubmit}>\n                {blockType === BlockTypes.review\n                  ? t('buttons.submit')\n                  : t('buttons.check-answer')}\n              </Button>\n              <Spacer size='xxs' />\n              <Button block={true} variant='primary' onClick={openHelpModal}>\n                {t('buttons.ask-for-help')}\n              </Button>\n\n<Spacer size='l' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n};\n\nShowGeneric.displayName = 'ShowGeneric';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowGeneric);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "649729a3d1c0684d9e79d3607c562a7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "0 && ( <ObserveKeys only={['ctrl', 'cmd', 'enter']}> <MultipleChoiceQuestions questions={questions} selectedOptions={selectedMcqOptions} handleOptionChange={handleMcqOptionChange} submittedMcqAnswers={submittedMcqAnswers} showFeedback={showFeedback} /> </ObserveKeys> )} {explanation ? ( <ChallengeExplanation explanation={explanation} /> ) : null} {!hasAnsweredMcqCorrectly && ( <p className='text-center'>{t('learn.answered-mcq')}</p> )} <Button block={true} variant='primary' onClick={handleSubmit}> {blockType === BlockTypes.review ? t('buttons.submit') : t('buttons.check-answer')} </Button> <Spacer size='xxs' /> <Button block={true} variant='primary' onClick={openHelpModal}> {t('buttons.ask-for-help')} </Button> <Spacer size='l' /> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> </LearnLayout> </Hotkeys> ); }; ShowGeneric.displayName = 'ShowGeneric'; export default connect(mapStateToProps, mapDispatchToProps)(ShowGeneric);\n\nexport const query = graphql`\n  query GenericChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        assignments\n        bilibiliIds {\n          aid\n          bvid\n          cid\n        }\n        block\n        blockType\n        challengeType\n        description\n        explanation\n        helpCategory\n        instructions\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n        questions {\n          text\n          answers {\n            answer\n            feedback\n          }\n          solution\n        }\n        scene {\n          setup {\n            background\n            characters {\n              character\n              position {\n                x\n                y\n                z\n              }\n              opacity\n            }\n            audio {\n              filename\n              startTime\n              startTimestamp\n              finishTimestamp\n            }\n            alwaysShowDialogue\n          }\n          commands {\n            background\n            character\n            position {\n              x\n              y\n              z\n            }\n            opacity\n            startTime\n            finishTime\n            dialogue {\n              text\n              align\n            }\n          }\n        }\n        superBlock\n        title\n        transcript\n        translationPending\n        videoId\n        videoId\n        videoLocaleIds {\n          espanol\n          italian\n          portuguese\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11528,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\generic\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "eb3b90bbaf7ab1bb4af77c3462038922",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": "import React, { useState } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  Button,\n  Spacer\n} from '@freecodecamp/ui';\n\nimport { isMicrosoftTranscriptLink } from '../../../../../shared/utils/validate';\nimport {\n  linkMsUsername,\n  unlinkMsUsername,\n  setIsProcessing\n} from '../../../redux/actions';\nimport {\n  isSignedInSelector,\n  msUsernameSelector,\n  isProcessingSelector\n} from '../../../redux/selectors';\nimport Login from '../../../components/Header/components/login';\nimport ChallengeHeading from '../components/challenge-heading';\n\nimport './link-ms-user.css';\n\nconst mapState = createSelector(\n  isSignedInSelector,\n  msUsernameSelector,\n  isProcessingSelector,\n  (\n    isSignedIn: boolean,\n    msUsername: string | undefined | null,\n    isProcessing: boolean\n  ) => ({\n    isSignedIn,\n    msUsername,\n    isProcessing\n  })\n);\n\nconst mapDispatch = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      linkMsUsername,\n      unlinkMsUsername,\n      setIsProcessing\n    },\n    dispatch\n  );\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction LinkMsUser({\n  isSignedIn,\n  msUsername,\n  linkMsUsername,\n  unlinkMsUsername,\n  isProcessing,\n  setIsProcessing\n}: Props): JSX.Element {\n  const { t } = useTranslation();\n  const [msTranscriptUrl, setMsTranscriptUrl] = useState('');\n\nfunction handleLinkUsername(e: React.FormEvent) {\n    e.preventDefault();\n    setIsProcessing(true);\n    linkMsUsername({ msTranscriptUrl });\n  }\n\nfunction handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    setMsTranscriptUrl(e.target.value);\n  }\n\nconst isValid = isMicrosoftTranscriptLink(msTranscriptUrl);\n  const isPristine = msTranscriptUrl === '';\n  const isDisabled = isProcessing || !isValid;\n  const showWarning = !isPristine && !isValid;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "468a5dc99ceb1f9a9cc05def7ad096d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": "setIsProcessing }, dispatch ); const connector = connect(mapState, mapDispatch); type Props = ConnectedProps<typeof connector>; function LinkMsUser({ isSignedIn, msUsername, linkMsUsername, unlinkMsUsername, isProcessing, setIsProcessing }: Props): JSX.Element { const { t } = useTranslation(); const [msTranscriptUrl, setMsTranscriptUrl] = useState(''); function handleLinkUsername(e: React.FormEvent) { e.preventDefault(); setIsProcessing(true); linkMsUsername({ msTranscriptUrl }); } function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) { e.preventDefault(); setMsTranscriptUrl(e.target.value); } const isValid = isMicrosoftTranscriptLink(msTranscriptUrl); const isPristine = msTranscriptUrl === ''; const isDisabled = isProcessing || !isValid; const showWarning = !isPristine && !isValid;\n\nreturn !isSignedIn ? (\n    <>\n      <ChallengeHeading heading={t('learn.ms.link-header')} />\n      <Spacer size='xs' />\n\n<p>{t('learn.ms.link-signin')}</p>\n      <Login />\n    </>\n  ) : msUsername ? (\n    <>\n      <p>{t('learn.ms.linked', { msUsername })}</p>\n      <Button\n        block={true}\n        variant='primary'\n        disabled={isProcessing}\n        onClick={unlinkMsUsername}\n      >\n        {t('buttons.unlink-account')}\n      </Button>\n    </>\n  ) : (\n    <div>\n      <ChallengeHeading heading={'learn.ms.link-header'} />\n      <Spacer size='xs' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
      "source_type": "git_repo"
    },
    "token_count": 327,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "45f4de1776072a2131974449da5b272b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": "msTranscriptUrl }); } function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) { e.preventDefault(); setMsTranscriptUrl(e.target.value); } const isValid = isMicrosoftTranscriptLink(msTranscriptUrl); const isPristine = msTranscriptUrl === ''; const isDisabled = isProcessing || !isValid; const showWarning = !isPristine && !isValid; return !isSignedIn ? ( <> <ChallengeHeading heading={t('learn.ms.link-header')} /> <Spacer size='xs' /> <p>{t('learn.ms.link-signin')}</p> <Login /> </> ) : msUsername ? ( <> <p>{t('learn.ms.linked', { msUsername })}</p> <Button block={true} variant='primary' disabled={isProcessing} onClick={unlinkMsUsername} > {t('buttons.unlink-account')} </Button> </> ) : ( <div> <ChallengeHeading heading={'learn.ms.link-header'} /> <Spacer size='xs' />\n\n<p>{t('learn.ms.unlinked')}</p>\n      <ol className='link-ms-user-ol'>\n        <li>\n          <Trans i18nKey='learn.ms.link-li-1'>\n            <a\n              href='https://learn.microsoft.com/users/me/transcript'\n              rel='noreferrer'\n              target='_blank'\n            >\n              placeholder\n            </a>\n          </Trans>\n        </li>\n        <li>{t('learn.ms.link-li-2')}</li>\n        <li>{t('learn.ms.link-li-3')}</li>\n        <li>{t('learn.ms.link-li-4')}</li>\n        <li>\n          <Trans i18nKey='learn.ms.link-li-5'>\n            <pre className='language-html'>placeholder</pre>\n          </Trans>\n        </li>\n        <li>{t('learn.ms.link-li-6')}</li>\n      </ol>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0f0f96148cb6c9a87df64c5163b610e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": "showWarning = !isPristine && !isValid; return !isSignedIn ? ( <> <ChallengeHeading heading={t('learn.ms.link-header')} /> <Spacer size='xs' /> <p>{t('learn.ms.link-signin')}</p> <Login /> </> ) : msUsername ? ( <> <p>{t('learn.ms.linked', { msUsername })}</p> <Button block={true} variant='primary' disabled={isProcessing} onClick={unlinkMsUsername} > {t('buttons.unlink-account')} </Button> </> ) : ( <div> <ChallengeHeading heading={'learn.ms.link-header'} /> <Spacer size='xs' /> <p>{t('learn.ms.unlinked')}</p> <ol className='link-ms-user-ol'> <li> <Trans i18nKey='learn.ms.link-li-1'> <a href='https://learn.microsoft.com/users/me/transcript' rel='noreferrer' target='_blank' > placeholder </a> </Trans> </li> <li>{t('learn.ms.link-li-2')}</li> <li>{t('learn.ms.link-li-3')}</li> <li>{t('learn.ms.link-li-4')}</li> <li> <Trans i18nKey='learn.ms.link-li-5'> <pre className='language-html'>placeholder</pre> </Trans> </li> <li>{t('learn.ms.link-li-6')}</li> </ol>\n\n<Spacer size='m' />\n      <form onSubmit={handleLinkUsername}>\n        <FormGroup validationState={isValid ? 'success' : 'error'}>\n          <ControlLabel htmlFor='transcript-link'>\n            <strong>{t('learn.ms.transcript-label')}</strong>\n          </ControlLabel>\n          <FormControl\n            id='transcript-link'\n            type='url'\n            onChange={handleInputChange}\n            placeholder='https://learn.microsoft.com/en-us/users/username/transcript/transcriptId'\n          />\n        </FormGroup>\n        <Button\n          disabled={isDisabled}\n          block={true}\n          variant='primary'\n          onClick={handleLinkUsername}\n        >\n          {t('buttons.link-account')}\n        </Button>\n        {showWarning && (\n          <HelpBlock>\n            <Trans i18nKey='learn.ms.invalid-transcript'>\n              placeholder <code>placeholder</code> placeholder\n            </Trans>\n          </HelpBlock>\n        )}\n      </form>\n    </div>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5e0d2d1a19e39c9d2a0e67dda6c9ac6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
    "source_type": "git_repo",
    "title": "link-ms-user",
    "content": "<Spacer size='xs' /> <p>{t('learn.ms.unlinked')}</p> <ol className='link-ms-user-ol'> <li> <Trans i18nKey='learn.ms.link-li-1'> <a href='https://learn.microsoft.com/users/me/transcript' rel='noreferrer' target='_blank' > placeholder </a> </Trans> </li> <li>{t('learn.ms.link-li-2')}</li> <li>{t('learn.ms.link-li-3')}</li> <li>{t('learn.ms.link-li-4')}</li> <li> <Trans i18nKey='learn.ms.link-li-5'> <pre className='language-html'>placeholder</pre> </Trans> </li> <li>{t('learn.ms.link-li-6')}</li> </ol> <Spacer size='m' /> <form onSubmit={handleLinkUsername}> <FormGroup validationState={isValid ? 'success' : 'error'}> <ControlLabel htmlFor='transcript-link'> <strong>{t('learn.ms.transcript-label')}</strong> </ControlLabel> <FormControl id='transcript-link' type='url' onChange={handleInputChange} placeholder='https://learn.microsoft.com/en-us/users/username/transcript/transcriptId' /> </FormGroup> <Button disabled={isDisabled} block={true} variant='primary' onClick={handleLinkUsername} > {t('buttons.link-account')} </Button> {showWarning && ( <HelpBlock> <Trans i18nKey='learn.ms.invalid-transcript'> placeholder <code>placeholder</code> placeholder </Trans> </HelpBlock> )} </form> </div> ); }\n\nLinkMsUser.displayName = 'LinkMsUser';\n\nexport default connector(LinkMsUser);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\link-ms-user.tsx",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "34e328dd483d978fb2e5350381369467",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\ns.json",
    "source_type": "git_repo",
    "title": "ns",
    "content": "\"project\"",
    "metadata": {
      "file_extension": ".json",
      "file_type": "json",
      "file_size": 10,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\ns.json",
      "source_type": "git_repo"
    },
    "token_count": 3,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "60c22ee4fd53d282673e88e9bc0535bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
    "source_type": "git_repo",
    "title": "solution-form",
    "content": "import React, { Component } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport type { WithTranslation } from 'react-i18next';\n\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport {\n  StrictSolutionForm,\n  ValidatedValues\n} from '../../../components/formHelpers/form';\n\ninterface SubmitProps {\n  showCompletionModal: boolean;\n}\n\ninterface SolutionFormProps extends WithTranslation {\n  challengeType: number;\n  description?: string;\n  onSubmit: (arg0: SubmitProps) => void;\n  updateSolutionForm: (arg0: Record<string, unknown>) => void;\n}\n\nexport class SolutionForm extends Component<SolutionFormProps> {\n  constructor(props: SolutionFormProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\ncomponentDidMount(): void {\n    this.props.updateSolutionForm({});\n  }\n\nhandleSubmit = (validatedValues: ValidatedValues): void => {\n    // Do not execute challenge, if errors\n    if (validatedValues.errors.length === 0) {\n      // updates values on store\n      this.props.updateSolutionForm(validatedValues.values);\n      if (validatedValues.invalidValues.length === 0) {\n        this.props.onSubmit({ showCompletionModal: true });\n      } else {\n        this.props.onSubmit({ showCompletionModal: false });\n      }\n    }\n  };\n\nrender(): JSX.Element {\n    const { challengeType, description, t } = this.props;\n\n// back end challenges and front end projects use a single form field\n    const solutionField = [\n      { name: 'solution', label: t('learn.solution-link') }\n    ];\n    const backEndProjectFields = [\n      { name: 'solution', label: t('learn.solution-link') },\n      { name: 'githubLink', label: t('learn.source-code-link') }\n    ];\n\nconst buttonCopy = t('learn.i-completed');\n\nconst options = {\n      types: {\n        solution: 'url',\n        githubLink: 'url'\n      },\n      required: ['solution'],\n      isEditorLinkAllowed: false,\n      isLocalLinkAllowed: false,\n      isSourceCodeLinkRequired: false\n    };\n\nlet formFields = solutionField;\n    let solutionLink = 'ex: ';\n    let solutionFormID = 'front-end-form';",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4089,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "69410946ff2ce1a1258c9288768c4226",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
    "source_type": "git_repo",
    "title": "solution-form",
    "content": "end challenges and front end projects use a single form field const solutionField = [ { name: 'solution', label: t('learn.solution-link') } ]; const backEndProjectFields = [ { name: 'solution', label: t('learn.solution-link') }, { name: 'githubLink', label: t('learn.source-code-link') } ]; const buttonCopy = t('learn.i-completed'); const options = { types: { solution: 'url', githubLink: 'url' }, required: ['solution'], isEditorLinkAllowed: false, isLocalLinkAllowed: false, isSourceCodeLinkRequired: false }; let formFields = solutionField; let solutionLink = 'ex: '; let solutionFormID = 'front-end-form';\n\nswitch (challengeType) {\n      case challengeTypes.frontEndProject:\n        formFields = solutionField;\n        solutionLink =\n          solutionLink + 'https://codepen.io/camperbot/full/oNvPqqo';\n        break;\n\ncase challengeTypes.backend:\n        formFields = solutionField;\n        options.isLocalLinkAllowed = true;\n        solutionLink = solutionLink + 'http://localhost:3000/';\n        break;\n\ncase challengeTypes.backEndProject:\n        formFields = backEndProjectFields;\n        // options.required.push('githubLink');\n        options.isSourceCodeLinkRequired = true;\n        options.isLocalLinkAllowed = true;\n        solutionLink = solutionLink + 'http://localhost:3000/';\n        solutionFormID = 'back-end-form';\n        break;\n\ncase challengeTypes.pythonProject:\n      case challengeTypes.colab:\n        formFields = solutionField;\n        options.isEditorLinkAllowed = true;\n        solutionLink =\n          solutionLink +\n          (description?.includes('Colaboratory')\n            ? 'https://colab.research.google.com/drive/1i5EmInTWi1RFvFr2_aRXky96YxY6sbWy'\n            : 'https://replit.com/@camperbot/hello');\n        break;\n\ncase challengeTypes.codeAllyCert:\n        formFields = solutionField;\n        options.isEditorLinkAllowed = true;\n        solutionLink = solutionLink + 'https://your-git-repo.url/files';\n        break;\n\ndefault:\n        formFields = solutionField;\n        solutionLink =\n          solutionLink + 'https://codepen.io/camperbot/full/oNvPqqo';\n    }",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4089,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e0d3be52fe09c5af7fe117296208300b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
    "source_type": "git_repo",
    "title": "solution-form",
    "content": "solutionField; options.isLocalLinkAllowed = true; solutionLink = solutionLink + 'http://localhost:3000/'; break; case challengeTypes.backEndProject: formFields = backEndProjectFields; // options.required.push('githubLink'); options.isSourceCodeLinkRequired = true; options.isLocalLinkAllowed = true; solutionLink = solutionLink + 'http://localhost:3000/'; solutionFormID = 'back-end-form'; break; case challengeTypes.pythonProject: case challengeTypes.colab: formFields = solutionField; options.isEditorLinkAllowed = true; solutionLink = solutionLink + (description?.includes('Colaboratory') ? 'https://colab.research.google.com/drive/1i5EmInTWi1RFvFr2_aRXky96YxY6sbWy' : 'https://replit.com/@camperbot/hello'); break; case challengeTypes.codeAllyCert: formFields = solutionField; options.isEditorLinkAllowed = true; solutionLink = solutionLink + 'https://your-git-repo.url/files'; break; default: formFields = solutionField; solutionLink = solutionLink + 'https://codepen.io/camperbot/full/oNvPqqo'; }\n\nreturn (\n      <StrictSolutionForm\n        buttonText={`${buttonCopy}`}\n        formFields={formFields}\n        id={solutionFormID}\n        options={{\n          ...options,\n          placeholders: {\n            solution: solutionLink,\n            githubLink: 'ex: https://your-git-repo.url/files'\n          }\n        }}\n        submit={this.handleSubmit}\n      />\n    );\n  }\n}\n\nexport default withTranslation()(SolutionForm);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4089,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\solution-form.tsx",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d2c4e146cbb1ff05cc19a2eab1f1a090",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\tool-panel.css",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": ".project-tool-panel {\n  width: 100%;\n  padding: 0 15px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 58,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\tool-panel.css",
      "source_type": "git_repo"
    },
    "token_count": 20,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1872f7c2b66558fc55288a141816953b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\tool-panel.tsx",
    "source_type": "git_repo",
    "title": "tool-panel",
    "content": "import React from 'react';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Button, Spacer } from '@freecodecamp/ui';\n\nimport { openModal } from '../redux/actions';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      openHelpModal: () => openModal('help')\n    },\n    dispatch\n  );\n\ninterface ToolPanelProps {\n  guideUrl?: string;\n  openHelpModal: () => void;\n  t: TFunction;\n}\n\nfunction ToolPanel({\n  guideUrl,\n  openHelpModal,\n  t\n}: ToolPanelProps): JSX.Element {\n  return (\n    <div>\n      {guideUrl && (\n        <>\n          <Button\n            block={true}\n            variant='primary'\n            href={guideUrl}\n            target='_blank'\n          >\n            {t('buttons.get-hint')}\n          </Button>\n          <Spacer size='xxs' />\n        </>\n      )}\n      <Button block={true} variant='primary' onClick={openHelpModal}>\n        {t('buttons.ask-for-help')}\n      </Button>\n    </div>\n  );\n}\n\nToolPanel.displayName = 'ProjectToolPanel';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ToolPanel));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1267,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\tool-panel.tsx",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6496763f2123eeca521eb410986bd9d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\exit-quiz-modal.tsx",
    "source_type": "git_repo",
    "title": "exit-quiz-modal",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\nimport { closeModal } from '../redux/actions';\nimport { isExitQuizModalOpenSelector } from '../redux/selectors';\n\ninterface ExitQuizModalProps {\n  closeExitQuizModal: () => void;\n  isExitQuizModalOpen: boolean;\n  onExit: () => void;\n}\n\nconst mapStateToProps = (state: unknown) => ({\n  isExitQuizModalOpen: isExitQuizModalOpenSelector(state) as boolean\n});\n\nconst mapDispatchToProps = {\n  closeExitQuizModal: () => closeModal('exitQuiz')\n};\n\nconst ExitQuizModal = ({\n  closeExitQuizModal,\n  isExitQuizModalOpen,\n  onExit\n}: ExitQuizModalProps) => {\n  const { t } = useTranslation();\n\nreturn (\n    <Modal\n      onClose={closeExitQuizModal}\n      open={isExitQuizModalOpen}\n      variant='danger'\n    >\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.quiz.exit-modal-header')}\n      </Modal.Header>\n      <Modal.Body alignment='center'>\n        {t('learn.quiz.exit-modal-body')}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button block variant='primary' onClick={closeExitQuizModal}>\n          {t('learn.quiz.exit-modal-no')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button block variant='danger' onClick={onExit}>\n          {t('learn.quiz.exit-modal-yes')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nExitQuizModal.displayName = 'ExitQuizModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExitQuizModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1557,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\exit-quiz-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ecde0841af09cb9b5ad2a71f9b4107a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\finish-quiz-modal.tsx",
    "source_type": "git_repo",
    "title": "finish-quiz-modal",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\nimport { closeModal } from '../redux/actions';\nimport { isFinishQuizModalOpenSelector } from '../redux/selectors';\n\ninterface FinishQuizModalProps {\n  closeFinishQuizModal: () => void;\n  isFinishQuizModalOpen: boolean;\n  onFinish: () => void;\n}\n\nconst mapStateToProps = (state: unknown) => ({\n  isFinishQuizModalOpen: isFinishQuizModalOpenSelector(state) as boolean\n});\n\nconst mapDispatchToProps = {\n  closeFinishQuizModal: () => closeModal('finishQuiz')\n};\n\nconst FinishQuizModal = ({\n  closeFinishQuizModal,\n  isFinishQuizModalOpen,\n  onFinish\n}: FinishQuizModalProps) => {\n  const { t } = useTranslation();\n\nreturn (\n    <Modal onClose={closeFinishQuizModal} open={isFinishQuizModalOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.quiz.finish-modal-header')}\n      </Modal.Header>\n      <Modal.Body alignment='center'>\n        {t('learn.quiz.finish-modal-body')}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button block size='medium' variant='primary' onClick={onFinish}>\n          {t('learn.quiz.finish-modal-yes')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button\n          block\n          size='medium'\n          variant='primary'\n          onClick={closeFinishQuizModal}\n        >\n          {t('learn.quiz.finish-modal-no')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nFinishQuizModal.displayName = 'FinishQuizModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishQuizModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1645,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\finish-quiz-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32be6ec1d02a3758d4f2b3e1b22c8a35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.css",
    "source_type": "git_repo",
    "title": "show",
    "content": "/* Override global ul styles */\n.quiz-challenge-container ul {\n  padding-inline-start: 0;\n  list-style-type: none;\n}\n\n/* Override the bottom margin set in global.css */\n.quiz-challenge-container .quiz-answer-label p:last-child,\n.quiz-challenge-container div[role='radiogroup'] label p:last-child {\n  margin-bottom: 0;\n}\n\n/* Quiz question text and option text have the <p> tag removed\n   so the HTML can be semantically correct. \n   This also removes the `p` styles that the text should have,\n   so we need to clone the CSS of the `p` element here. */\n.quiz-question-label,\n.quiz-answer-label {\n  line-height: 1.5rem;\n  font-weight: 400;\n  font-size: 1rem;\n  margin: 0 0 1.2rem;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 680,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.css",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3a311058e6e89b735d96d113904b20ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql } from 'gatsby';\nimport React, { useEffect, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { Container, Col, Row, Button, Spacer } from '@freecodecamp/ui';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport ChallengeTitle from '../components/challenge-title';\nimport CompletionModal from '../components/completion-modal';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport HelpModal from '../components/help-modal';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  submitChallenge,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { setIsProcessing } from '../../../redux/actions';\nimport {\n  isProcessingSelector,\n  msUsernameSelector\n} from '../../../redux/selectors';\nimport LinkMsUser from './link-ms-user';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  isProcessingSelector,\n  msUsernameSelector,\n  (\n    isChallengeCompleted: boolean,\n    isProcessing: boolean,\n    msUsername: string | undefined | null\n  ) => ({\n    isChallengeCompleted,\n    isProcessing,\n    msUsername\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion'),\n      openHelpModal: () => openModal('help'),\n      setIsProcessing,\n      submitChallenge\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "70796b580e6b1f559764e32ab34561f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "{ isChallengeCompletedSelector } from '../redux/selectors'; import { setIsProcessing } from '../../../redux/actions'; import { isProcessingSelector, msUsernameSelector } from '../../../redux/selectors'; import LinkMsUser from './link-ms-user'; // Redux Setup const mapStateToProps = createSelector( isChallengeCompletedSelector, isProcessingSelector, msUsernameSelector, ( isChallengeCompleted: boolean, isProcessing: boolean, msUsername: string | undefined | null ) => ({ isChallengeCompleted, isProcessing, msUsername }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { initTests, updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion'), openHelpModal: () => openModal('help'), setIsProcessing, submitChallenge }, dispatch );\n\n// Types\ninterface MsTrophyProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isProcessing: boolean;\n  setIsProcessing: (arg0: boolean) => void;\n  msUsername: string | undefined | null;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  submitChallenge: () => void;\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "0a89c3826af8e5edd2c7c948fa1f9c3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion'), openHelpModal: () => openModal('help'), setIsProcessing, submitChallenge }, dispatch ); // Types interface MsTrophyProps { challengeMounted: (arg0: string) => void; data: { challengeNode: ChallengeNode }; initTests: (xs: Test[]) => void; isChallengeCompleted: boolean; isProcessing: boolean; setIsProcessing: (arg0: boolean) => void; msUsername: string | undefined | null; openCompletionModal: () => void; openHelpModal: () => void; pageContext: { challengeMeta: ChallengeMeta; }; submitChallenge: () => void; t: TFunction; updateChallengeMeta: (arg0: ChallengeMeta) => void; }\n\nfunction MsTrophy(props: MsTrophyProps) {\n  const container = useRef<HTMLElement>(null);\n  const {\n    data: {\n      challengeNode: {\n        challenge: { title }\n      }\n    }\n  } = props;\n  useEffect(() => {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = props;\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst handleSubmit = () => {\n    const { setIsProcessing, submitChallenge } = props;\n\nsetIsProcessing(true);\n    submitChallenge();\n  };\n\nconst {\n    data: {\n      challengeNode: {\n        challenge: {\n          description,\n          instructions,\n          superBlock,\n          block,\n          translationPending,\n          fields: { blockName }\n        }\n      }\n    },\n    isChallengeCompleted,\n    isProcessing,\n    msUsername,\n    openHelpModal,\n    t\n  } = props;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d9e361d17c30a8aec057b2ddab9c9824",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "props; initTests(tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const handleSubmit = () => { const { setIsProcessing, submitChallenge } = props; setIsProcessing(true); submitChallenge(); }; const { data: { challengeNode: { challenge: { description, instructions, superBlock, block, translationPending, fields: { blockName } } } }, isChallengeCompleted, isProcessing, msUsername, openHelpModal, t } = props;\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "07bc03c7834f8e007a1e7d551333d3f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "}); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const handleSubmit = () => { const { setIsProcessing, submitChallenge } = props; setIsProcessing(true); submitChallenge(); }; const { data: { challengeNode: { challenge: { description, instructions, superBlock, block, translationPending, fields: { blockName } } } }, isChallengeCompleted, isProcessing, msUsername, openHelpModal, t } = props; const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`;\n\nreturn (\n    <Hotkeys containerRef={container}>\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container>\n          <Row>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='m' />\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n              <ChallengeDescription\n                superBlock={superBlock}\n                description={description}\n                instructions={instructions}\n              />\n              <LinkMsUser />\n              <hr />\n              <Button\n                block={true}\n                variant='primary'\n                data-playwright-test-label='verify-trophy-button'\n                disabled={!msUsername || isProcessing}\n                onClick={handleSubmit}\n              >\n                {t('buttons.verify-trophy')}\n              </Button>\n              <Spacer size='xxs' />\n              <Button\n                block={true}\n                variant='primary'\n                data-playwright-test-label='ask-for-help-button'\n                onClick={openHelpModal}\n              >\n                {t('buttons.ask-for-help')}\n              </Button>\n              <br />\n              <Spacer size='m' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "784e48bcd51e23c28c17a1e779c83e11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "containerRef={container}> <LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container> <Row> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <ChallengeDescription superBlock={superBlock} description={description} instructions={instructions} /> <LinkMsUser /> <hr /> <Button block={true} variant='primary' data-playwright-test-label='verify-trophy-button' disabled={!msUsername || isProcessing} onClick={handleSubmit} > {t('buttons.verify-trophy')} </Button> <Spacer size='xxs' /> <Button block={true} variant='primary' data-playwright-test-label='ask-for-help-button' onClick={openHelpModal} > {t('buttons.ask-for-help')} </Button> <br /> <Spacer size='m' /> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> </LearnLayout> </Hotkeys> ); }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(MsTrophy));\n\nexport const query = graphql`\n  query MsTrophyChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\ms-trophy\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "40c84c8966e73879d8e64fac72109d70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\builders.ts",
    "source_type": "git_repo",
    "title": "builders",
    "content": "import { template as _template } from 'lodash-es';\n\ninterface ConcatHTMLOptions {\n  required?: { src?: string; link?: string }[];\n  template?: string;\n  contents?: string;\n  testRunner?: string;\n}\n\nexport function concatHtml({\n  required = [],\n  template,\n  contents\n}: ConcatHTMLOptions): string {\n  const embedSource = template\n    ? _template(template)\n    : ({ source }: { source: ConcatHTMLOptions['contents'] }) => source;\n  const head = required\n    .map(({ link, src }) => {\n      if (link && src) {\n        throw new Error(`\nA required file can not have both a src and a link: src = ${src}, link = ${link}\n`);\n      }\n      if (src) {\n        return `<script src='${src}' type='text/javascript'></script>`;\n      }\n      if (link) {\n        return `<link href='${link}' rel='stylesheet' />`;\n      }\n      return '';\n    })\n    .join('\\n');\n\nreturn `<head>${head}</head>${embedSource({ source: contents }) || ''}`;\n}\n\nexport function createPythonTerminal(pythonRunnerSrc: string): string {\n  const head =\n    '<head><style>#terminal { margin-top: 10px; width: 100%; height: 350px; background-color: #000; color: #00ff00; padding: 5px; overflow: auto; border: 1px solid #ccc; border-radius: 3px; }</style></head>';\n\nconst body = `<body><div id='terminal'></div><script src='${pythonRunnerSrc}' type='text/javascript'></script></body>`;\n  return `<html>${head}${body}</html>`;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1390,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\builders.ts",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e57329e25b52a3b171aca8e1af147d3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql, navigate } from 'gatsby';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { ObserveKeys } from 'react-hotkeys';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { useLocation, navigate as reachNavigate } from '@gatsbyjs/reach-router';\nimport {\n  Container,\n  Col,\n  Row,\n  Button,\n  Quiz,\n  useQuiz,\n  Spacer\n} from '@freecodecamp/ui';\n\n// Local Utilities\nimport { shuffleArray } from '../../../../../shared/utils/shuffle-array';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport ChallengeTitle from '../components/challenge-title';\nimport CompletionModal from '../components/completion-modal';\nimport { getChallengePaths } from '../utils/challenge-paths';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  closeModal,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport PrismFormatted from '../components/prism-formatted';\nimport { usePageLeave } from '../hooks';\nimport ExitQuizModal from './exit-quiz-modal';\nimport FinishQuizModal from './finish-quiz-modal';\n\nimport './show.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion'),\n      openExitQuizModal: () => openModal('exitQuiz'),\n      closeExitQuizModal: () => closeModal('exitQuiz'),\n      openFinishQuizModal: () => openModal('finishQuiz'),\n      closeFinishQuizModal: () => closeModal('finishQuiz')\n    },\n    dispatch\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "605e268308f64c947a0b6b5c575820b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { isChallengeCompletedSelector } from '../redux/selectors'; import PrismFormatted from '../components/prism-formatted'; import { usePageLeave } from '../hooks'; import ExitQuizModal from './exit-quiz-modal'; import FinishQuizModal from './finish-quiz-modal'; import './show.css'; // Redux Setup const mapStateToProps = createSelector( isChallengeCompletedSelector, (isChallengeCompleted: boolean) => ({ isChallengeCompleted }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { initTests, updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion'), openExitQuizModal: () => openModal('exitQuiz'), closeExitQuizModal: () => closeModal('exitQuiz'), openFinishQuizModal: () => openModal('finishQuiz'), closeFinishQuizModal: () => closeModal('finishQuiz') }, dispatch );\n\n// Types\ninterface ShowQuizProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n  openCompletionModal: () => void;\n  openExitQuizModal: () => void;\n  closeExitQuizModal: () => void;\n  openFinishQuizModal: () => void;\n  closeFinishQuizModal: () => void;\n}\n\nconst removeParagraphTags = (text: string) => text.replace(/^<p>|<\\/p>$/g, '');\n\nconst ShowQuiz = ({\n  challengeMounted,\n  data: {\n    challengeNode: {\n      challenge: {\n        fields: { tests, blockHashSlug },\n        title,\n        description,\n        challengeType,\n        helpCategory,\n        superBlock,\n        block,\n        translationPending,\n        quizzes\n      }\n    }\n  },\n  pageContext: { challengeMeta },\n  initTests,\n  updateChallengeMeta,\n  isChallengeCompleted,\n  openCompletionModal,\n  openExitQuizModal,\n  closeExitQuizModal,\n  openFinishQuizModal,\n  closeFinishQuizModal\n}: ShowQuizProps) => {\n  const { t } = useTranslation();\n  const curLocation = useLocation();\n\nconst container = useRef<HTMLElement | null>(null);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "01ec9bb5e23b31747000c3666f477279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "openFinishQuizModal: () => void; closeFinishQuizModal: () => void; } const removeParagraphTags = (text: string) => text.replace(/^<p>|<\\/p>$/g, ''); const ShowQuiz = ({ challengeMounted, data: { challengeNode: { challenge: { fields: { tests, blockHashSlug }, title, description, challengeType, helpCategory, superBlock, block, translationPending, quizzes } } }, pageContext: { challengeMeta }, initTests, updateChallengeMeta, isChallengeCompleted, openCompletionModal, openExitQuizModal, closeExitQuizModal, openFinishQuizModal, closeFinishQuizModal }: ShowQuizProps) => { const { t } = useTranslation(); const curLocation = useLocation(); const container = useRef<HTMLElement | null>(null);\n\n// Campers are not allowed to change their answers once the quiz is submitted.\n  // `hasSubmitted` is used as a flag to disable the quiz.\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n\n// `isPassed` is used as a flag to conditionally render the test or submit button.\n  const [isPassed, setIsPassed] = useState(false);\n\nconst [showUnanswered, setShowUnanswered] = useState(false);\n\nconst [exitConfirmed, setExitConfirmed] = useState(false);\n\nconst [exitPathname, setExitPathname] = useState(blockHashSlug);\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;\n\nconst [quizId] = useState(Math.floor(Math.random() * quizzes.length));\n  const quiz = quizzes[quizId].questions;\n\n// Initialize the data passed to `useQuiz`\n  const [initialQuizData] = useState(\n    quiz.map(question => {\n      const distractors = question.distractors.map((distractor, index) => {\n        return {\n          label: (\n            <PrismFormatted\n              className='quiz-answer-label'\n              text={removeParagraphTags(distractor)}\n              useSpan\n              noAria\n            />\n          ),\n          value: index + 1\n        };\n      });\n\nconst answer = {\n        label: (\n          <PrismFormatted\n            className='quiz-answer-label'\n            text={removeParagraphTags(question.answer)}\n            useSpan\n            noAria\n          />\n        ),\n        value: 4\n      };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "0a7631b6e4885403652d114e5b3de18c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "[exitPathname, setExitPathname] = useState(blockHashSlug); const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`; const [quizId] = useState(Math.floor(Math.random() * quizzes.length)); const quiz = quizzes[quizId].questions; // Initialize the data passed to `useQuiz` const [initialQuizData] = useState( quiz.map(question => { const distractors = question.distractors.map((distractor, index) => { return { label: ( <PrismFormatted className='quiz-answer-label' text={removeParagraphTags(distractor)} useSpan noAria /> ), value: index + 1 }; }); const answer = { label: ( <PrismFormatted className='quiz-answer-label' text={removeParagraphTags(question.answer)} useSpan noAria /> ), value: 4 };\n\nreturn {\n        question: (\n          <PrismFormatted\n            className='quiz-question-label'\n            text={question.text}\n          />\n        ),\n        answers: shuffleArray([...distractors, answer]),\n        correctAnswer: answer.value\n      };\n    })\n  );\n\nconst {\n    questions: quizData,\n    validateAnswers,\n    validated,\n    correctAnswerCount\n  } = useQuiz({\n    initialQuestions: initialQuizData,\n    showCorrectAnswersOnSuccess: true,\n    validationMessages: {\n      correct: t('learn.quiz.correct-answer'),\n      incorrect: t('learn.quiz.incorrect-answer')\n    },\n    passingPercent: 90,\n    onSuccess: () => {\n      openCompletionModal();\n      setIsPassed(true);\n    },\n    onFailure: () => setIsPassed(false)\n  });\n\nconst unanswered = quizData.reduce<number[]>(\n    (acc, curr, id) => (curr.selectedAnswer == null ? [...acc, id + 1] : acc),\n    []\n  );\n\nuseEffect(() => {\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "1059d992dc5bc3b279d9c8ed3e12d79c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "true, validationMessages: { correct: t('learn.quiz.correct-answer'), incorrect: t('learn.quiz.incorrect-answer') }, passingPercent: 90, onSuccess: () => { openCompletionModal(); setIsPassed(true); }, onFailure: () => setIsPassed(false) }); const unanswered = quizData.reduce<number[]>( (acc, curr, id) => (curr.selectedAnswer == null ? [...acc, id + 1] : acc), [] ); useEffect(() => { initTests(tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []);\n\nconst handleFinishQuiz = () => {\n    setShowUnanswered(true);\n\nif (unanswered.length === 0) {\n      openFinishQuizModal();\n    }\n  };\n\nconst handleFinishQuizModalBtnClick = () => {\n    validateAnswers();\n    setHasSubmitted(true);\n    closeFinishQuizModal();\n  };\n\nconst handleSubmitAndGo = () => {\n    openCompletionModal();\n  };\n\nconst handleExitQuiz = () => {\n    openExitQuizModal();\n  };\n\nconst handleExitQuizModalBtnClick = () => {\n    setExitConfirmed(true);\n    void navigate(exitPathname || '/learn');\n    closeExitQuizModal();\n  };\n\nconst onWindowClose = useCallback(\n    (event: BeforeUnloadEvent) => {\n      event.preventDefault();\n      window.confirm(t('misc.navigation-warning'));\n    },\n    [t]\n  );\n\nconst onHistoryChange = useCallback(\n    (targetPathname: string) => {\n      // We don't block navigation in the following cases.\n      // - When campers have submitted the quiz:\n      //   - If they don't pass, the Finish Quiz button is disabled, there isn't anything for them to do other than leaving the page\n      //   - If they pass, the Submit-and-go button shows up, and campers should be allowed to leave the page\n      // - When they have clicked the exit button on the exit modal\n      if (hasSubmitted || exitConfirmed) {\n        return;\n      }\n\nconst newPathname = targetPathname.startsWith('/learn')\n        ? blockHashSlug\n        : targetPathname;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "4df8bcee52a7625ee1090d1db4d35a89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "campers have submitted the quiz: // - If they don't pass, the Finish Quiz button is disabled, there isn't anything for them to do other than leaving the page // - If they pass, the Submit-and-go button shows up, and campers should be allowed to leave the page // - When they have clicked the exit button on the exit modal if (hasSubmitted || exitConfirmed) { return; } const newPathname = targetPathname.startsWith('/learn') ? blockHashSlug : targetPathname;\n\n// Save the pathname of the page the user wants to navigate to before we block the navigation.\n      setExitPathname(newPathname);\n\n// We need to use Reach Router, because the pathname is already prefixed\n      // with the language and Gatsby's navigate will prefix it again.\n      void reachNavigate(`${curLocation.pathname}`);\n      openExitQuizModal();\n    },\n    [\n      curLocation.pathname,\n      hasSubmitted,\n      exitConfirmed,\n      openExitQuizModal,\n      blockHashSlug\n    ]\n  );\n\nusePageLeave({\n    onWindowClose,\n    onHistoryChange\n  });\n\nfunction getErrorMessage() {\n    if (showUnanswered && unanswered.length > 0) {\n      return t('learn.quiz.unanswered-questions', {\n        unansweredQuestions: unanswered.join(', ')\n      });\n    }\n\nif (validated) {\n      // TODO: Update the message to include link(s) to the review materials\n      // if campers didn't pass the quiz.\n      return t('learn.quiz.have-n-correct-questions', {\n        correctAnswerCount,\n        total: quiz.length\n      });\n    }\n\nreturn '';\n  }\n\nconst errorMessage = getErrorMessage();\n\nreturn (\n    <Hotkeys\n      executeChallenge={!isPassed ? handleFinishQuiz : handleSubmitAndGo}\n      containerRef={container}\n    >\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container className='quiz-challenge-container'>\n          <Row>\n            <Spacer size='m' />\n            <ChallengeTitle\n              isCompleted={isChallengeCompleted}\n              translationPending={translationPending}\n            >\n              {title}\n            </ChallengeTitle>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "b104ba7a7ef777b4f60e80ce08d38b6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "{ return t('learn.quiz.unanswered-questions', { unansweredQuestions: unanswered.join(', ') }); } if (validated) { // TODO: Update the message to include link(s) to the review materials // if campers didn't pass the quiz. return t('learn.quiz.have-n-correct-questions', { correctAnswerCount, total: quiz.length }); } return ''; } const errorMessage = getErrorMessage(); return ( <Hotkeys executeChallenge={!isPassed ? handleFinishQuiz : handleSubmitAndGo} containerRef={container} > <LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container className='quiz-challenge-container'> <Row> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle>\n\n<Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='m' />\n              <ChallengeDescription\n                description={description}\n                superBlock={superBlock}\n              />\n              <Spacer size='l' />\n              <ObserveKeys>\n                <Quiz questions={quizData} disabled={hasSubmitted} />\n              </ObserveKeys>\n              <Spacer size='m' />\n              <div aria-live='polite' aria-atomic='true'>\n                {errorMessage}\n              </div>\n              <Spacer size='m' />\n              {!isPassed ? (\n                <Button\n                  block={true}\n                  variant='primary'\n                  onClick={handleFinishQuiz}\n                  disabled={hasSubmitted}\n                >\n                  {t('buttons.finish-quiz')}\n                </Button>\n              ) : (\n                <Button\n                  block={true}\n                  variant='primary'\n                  onClick={handleSubmitAndGo}\n                >\n                  {t('buttons.submit-and-go')}\n                </Button>\n              )}\n              <Spacer size='xxs' />\n              <Button block={true} variant='primary' onClick={handleExitQuiz}>\n                {t('buttons.exit-quiz')}\n              </Button>\n              <Spacer size='l' />\n            </Col>\n          </Row>\n        </Container>\n        <CompletionModal />\n        <ExitQuizModal onExit={handleExitQuizModalBtnClick} />\n        <FinishQuizModal onFinish={handleFinishQuizModalBtnClick} />\n      </LearnLayout>\n    </Hotkeys>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "80f68d48ad1fe2b9669e9fdf8eb03671",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "<Spacer size='m' /> <ChallengeDescription description={description} superBlock={superBlock} /> <Spacer size='l' /> <ObserveKeys> <Quiz questions={quizData} disabled={hasSubmitted} /> </ObserveKeys> <Spacer size='m' /> <div aria-live='polite' aria-atomic='true'> {errorMessage} </div> <Spacer size='m' /> {!isPassed ? ( <Button block={true} variant='primary' onClick={handleFinishQuiz} disabled={hasSubmitted} > {t('buttons.finish-quiz')} </Button> ) : ( <Button block={true} variant='primary' onClick={handleSubmitAndGo} > {t('buttons.submit-and-go')} </Button> )} <Spacer size='xxs' /> <Button block={true} variant='primary' onClick={handleExitQuiz}> {t('buttons.exit-quiz')} </Button> <Spacer size='l' /> </Col> </Row> </Container> <CompletionModal /> <ExitQuizModal onExit={handleExitQuizModalBtnClick} /> <FinishQuizModal onFinish={handleFinishQuizModalBtnClick} /> </LearnLayout> </Hotkeys> ); };\n\nShowQuiz.displayName = 'ShowQuiz';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowQuiz);\n\nexport const query = graphql`\n  query QuizChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        title\n        description\n        challengeType\n        helpCategory\n        superBlock\n        block\n        fields {\n          blockHashSlug\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n        quizzes {\n          questions {\n            distractors\n            text\n            answer\n          }\n        }\n        translationPending\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 11674,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\quiz\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "aee8eedd9bc9dfa819cb925ebcf28a87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\action-types.js",
    "source_type": "git_repo",
    "title": "action-types",
    "content": "import { createAsyncTypes, createTypes } from '../../../utils/create-types';\n\nexport const CURRENT_CHALLENGE_KEY = 'currentChallengeId';\n\nexport const ns = 'challenge';\n\nexport const actionTypes = createTypes(\n  [\n    'createFiles',\n    'createQuestion',\n    'initHooks',\n    'initTests',\n    'initConsole',\n    'initLogs',\n    'initVisibleEditors',\n    'updateConsole',\n    'updateChallengeMeta',\n    'updateFile',\n    'updateSolutionFormValues',\n    'updateSuccessMessage',\n    'updateTests',\n    'updateLogs',\n    'cancelTests',\n    'logsToConsole',\n    'disableBuildOnError',\n    'noStoredCodeFound',\n    'saveEditorContent',\n    'setShowPreviewPane',\n    'setShowPreviewPortal',\n    'closeModal',\n    'openModal',\n    'setIsAdvancing',\n    'setChapterSlug',\n    'setUserCompletedExam',\n    'previewMounted',\n    'projectPreviewMounted',\n    'storePortalWindow',\n    'removePortalWindow',\n    'challengeMounted',\n    'checkChallenge',\n    'resetChallenge',\n    'stopResetting',\n    'resetAttempts',\n    'setEditorFocusability',\n    'toggleVisibleEditor',\n    ...createAsyncTypes('submitChallenge'),\n    ...createAsyncTypes('executeChallenge')\n  ],\n  ns\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1160,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\action-types.js",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "95dcdf5b101dea7d2ad9f3ba0d4b434a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\actions.js",
    "source_type": "git_repo",
    "title": "actions",
    "content": "import { createAction } from 'redux-actions';\n\nimport { actionTypes } from './action-types';\n\nexport const createFiles = createAction(actionTypes.createFiles);\n\nexport const createQuestion = createAction(actionTypes.createQuestion);\nexport const initTests = createAction(actionTypes.initTests);\nexport const initHooks = createAction(actionTypes.initHooks);\nexport const updateTests = createAction(actionTypes.updateTests);\nexport const cancelTests = createAction(actionTypes.cancelTests);\nexport const initConsole = createAction(actionTypes.initConsole);\nexport const initLogs = createAction(actionTypes.initLogs);\nexport const initVisibleEditors = createAction(actionTypes.initVisibleEditors);\nexport const updateChallengeMeta = createAction(\n  actionTypes.updateChallengeMeta\n);\nexport const updateFile = createAction(actionTypes.updateFile);\nexport const updateConsole = createAction(actionTypes.updateConsole);\nexport const updateLogs = createAction(actionTypes.updateLogs);\nexport const updateSolutionFormValues = createAction(\n  actionTypes.updateSolutionFormValues\n);\nexport const updateSuccessMessage = createAction(\n  actionTypes.updateSuccessMessage\n);\nexport const setShowPreviewPortal = createAction(\n  actionTypes.setShowPreviewPortal\n);\nexport const setShowPreviewPane = createAction(actionTypes.setShowPreviewPane);\n\nexport const logsToConsole = createAction(actionTypes.logsToConsole);\n\nexport const disableBuildOnError = createAction(\n  actionTypes.disableBuildOnError\n);\nexport const noStoredCodeFound = createAction(actionTypes.noStoredCodeFound);\nexport const saveEditorContent = createAction(actionTypes.saveEditorContent);\nexport const setIsAdvancing = createAction(actionTypes.setIsAdvancing);\nexport const setChapterSlug = createAction(actionTypes.setChapterSlug);\nexport const setUserCompletedExam = createAction(\n  actionTypes.setUserCompletedExam\n);\n\nexport const closeModal = createAction(actionTypes.closeModal);\nexport const openModal = createAction(actionTypes.openModal);\n\nexport const previewMounted = createAction(actionTypes.previewMounted);\nexport const projectPreviewMounted = createAction(\n  actionTypes.projectPreviewMounted\n);\n\nexport const storePortalWindow = createAction(actionTypes.storePortalWindow);\nexport const removePortalWindow = createAction(actionTypes.removePortalWindow);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\actions.js",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22c0487e69c65569b2d0cb5c3682f187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\actions.js",
    "source_type": "git_repo",
    "title": "actions",
    "content": "export const setShowPreviewPane = createAction(actionTypes.setShowPreviewPane); export const logsToConsole = createAction(actionTypes.logsToConsole); export const disableBuildOnError = createAction( actionTypes.disableBuildOnError ); export const noStoredCodeFound = createAction(actionTypes.noStoredCodeFound); export const saveEditorContent = createAction(actionTypes.saveEditorContent); export const setIsAdvancing = createAction(actionTypes.setIsAdvancing); export const setChapterSlug = createAction(actionTypes.setChapterSlug); export const setUserCompletedExam = createAction( actionTypes.setUserCompletedExam ); export const closeModal = createAction(actionTypes.closeModal); export const openModal = createAction(actionTypes.openModal); export const previewMounted = createAction(actionTypes.previewMounted); export const projectPreviewMounted = createAction( actionTypes.projectPreviewMounted ); export const storePortalWindow = createAction(actionTypes.storePortalWindow); export const removePortalWindow = createAction(actionTypes.removePortalWindow);\n\nexport const challengeMounted = createAction(actionTypes.challengeMounted);\nexport const checkChallenge = createAction(actionTypes.checkChallenge);\nexport const executeChallenge = createAction(actionTypes.executeChallenge);\nexport const executeChallengeComplete = createAction(\n  actionTypes.executeChallengeComplete\n);\nexport const resetChallenge = createAction(actionTypes.resetChallenge);\nexport const stopResetting = createAction(actionTypes.stopResetting);\nexport const submitChallenge = createAction(actionTypes.submitChallenge);\nexport const submitChallengeComplete = createAction(\n  actionTypes.submitChallengeComplete\n);\nexport const submitChallengeError = createAction(\n  actionTypes.submitChallengeError\n);\nexport const resetAttempts = createAction(actionTypes.resetAttempts);\n\nexport const setEditorFocusability = createAction(\n  actionTypes.setEditorFocusability\n);\nexport const toggleVisibleEditor = createAction(\n  actionTypes.toggleVisibleEditor\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\actions.js",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b24a381d543e1136d8a50c5d13ea91ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "import protect from '@freecodecamp/loop-protect';\nimport {\n  cond,\n  flow,\n  identity,\n  matchesProperty,\n  overSome,\n  partial,\n  stubTrue\n} from 'lodash-es';\n\nimport sassData from '../../../../config/browser-scripts/sass-compile.json';\nimport {\n  transformContents,\n  transformHeadTailAndContents,\n  compileHeadTail,\n  createSource\n} from '../../../../../shared/utils/polyvinyl';\nimport { WorkerExecutor } from '../utils/worker-executor';\nimport {\n  compileTypeScriptCode,\n  checkTSServiceIsReady\n} from '../utils/typescript-worker-handler';\n\nconst { filename: sassCompile } = sassData;\n\nconst protectTimeout = 100;\nconst testProtectTimeout = 1500;\nconst loopsPerTimeoutCheck = 100;\nconst testLoopsPerTimeoutCheck = 2000;\nconst MODULE_TRANSFORM_PLUGIN = 'transform-modules-umd';\n\nfunction loopProtectCB(line) {\n  console.log(\n    `Potential infinite loop detected on line ${line}. Tests may fail if this is not changed.`\n  );\n}\n\nfunction testLoopProtectCB(line) {\n  console.log(\n    `Potential infinite loop detected on line ${line}. Tests may be failing because of this.`\n  );\n}\n\n// hold Babel and presets so we don't try to import them multiple times\n\nlet Babel;\nlet presetEnv, presetReact;\nlet presetsJS, presetsJSX;\n\nasync function loadBabel() {\n  if (Babel) return;\n  Babel = await import(\n    /* webpackChunkName: \"@babel/standalone\" */ '@babel/standalone'\n  );\n  Babel.registerPlugin(\n    'loopProtection',\n    protect(protectTimeout, loopProtectCB, loopsPerTimeoutCheck)\n  );\n  Babel.registerPlugin(\n    'testLoopProtection',\n    protect(testProtectTimeout, testLoopProtectCB, testLoopsPerTimeoutCheck)\n  );\n}\n\nasync function loadPresetEnv() {\n  if (!presetEnv)\n    presetEnv = await import(\n      /* webpackChunkName: \"@babel/preset-env\" */ '@babel/preset-env'\n    );\n\npresetsJS = {\n    presets: [presetEnv]\n  };\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "797fb9d2cde2ef0540ade13d2d9aa210",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "} // hold Babel and presets so we don't try to import them multiple times let Babel; let presetEnv, presetReact; let presetsJS, presetsJSX; async function loadBabel() { if (Babel) return; Babel = await import( /* webpackChunkName: \"@babel/standalone\" */ '@babel/standalone' ); Babel.registerPlugin( 'loopProtection', protect(protectTimeout, loopProtectCB, loopsPerTimeoutCheck) ); Babel.registerPlugin( 'testLoopProtection', protect(testProtectTimeout, testLoopProtectCB, testLoopsPerTimeoutCheck) ); } async function loadPresetEnv() { if (!presetEnv) presetEnv = await import( /* webpackChunkName: \"@babel/preset-env\" */ '@babel/preset-env' ); presetsJS = { presets: [presetEnv] }; }\n\nasync function loadPresetReact() {\n  if (!presetReact)\n    presetReact = await import(\n      /* webpackChunkName: \"@babel/preset-react\" */ '@babel/preset-react'\n    );\n  if (!presetEnv)\n    presetEnv = await import(\n      /* webpackChunkName: \"@babel/preset-env\" */ '@babel/preset-env'\n    );\n\npresetsJSX = {\n    presets: [presetEnv, presetReact]\n  };\n}\n\nconst babelTransformCode = options => code =>\n  Babel.transform(code, options).code;\n\nconst NBSPReg = new RegExp(String.fromCharCode(160), 'g');\n\nconst testJS = matchesProperty('ext', 'js');\nconst testJSX = matchesProperty('ext', 'jsx');\nconst testTypeScript = matchesProperty('ext', 'ts');\nconst testHTML = matchesProperty('ext', 'html');\nconst testHTML$JS$JSX$TS = overSome(testHTML, testJS, testJSX, testTypeScript);\n\nconst replaceNBSP = cond([\n  [\n    testHTML$JS$JSX$TS,\n    partial(transformContents, contents => contents.replace(NBSPReg, ' '))\n  ],\n  [stubTrue, identity]\n]);\n\nconst getJSTranspiler = loopProtectOptions => async challengeFile => {\n  await loadBabel();\n  await loadPresetEnv();\n  const babelOptions = getBabelOptions(presetsJS, loopProtectOptions);\n  return transformHeadTailAndContents(\n    babelTransformCode(babelOptions),\n    challengeFile\n  );\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "b9e452a77e3f381af95b011ca29e48ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "=> Babel.transform(code, options).code; const NBSPReg = new RegExp(String.fromCharCode(160), 'g'); const testJS = matchesProperty('ext', 'js'); const testJSX = matchesProperty('ext', 'jsx'); const testTypeScript = matchesProperty('ext', 'ts'); const testHTML = matchesProperty('ext', 'html'); const testHTML$JS$JSX$TS = overSome(testHTML, testJS, testJSX, testTypeScript); const replaceNBSP = cond([ [ testHTML$JS$JSX$TS, partial(transformContents, contents => contents.replace(NBSPReg, ' ')) ], [stubTrue, identity] ]); const getJSTranspiler = loopProtectOptions => async challengeFile => { await loadBabel(); await loadPresetEnv(); const babelOptions = getBabelOptions(presetsJS, loopProtectOptions); return transformHeadTailAndContents( babelTransformCode(babelOptions), challengeFile ); };\n\nconst getJSXTranspiler = loopProtectOptions => async challengeFile => {\n  await loadBabel();\n  await loadPresetReact();\n  const babelOptions = getBabelOptions(presetsJSX, loopProtectOptions);\n  return transformHeadTailAndContents(\n    babelTransformCode(babelOptions),\n    challengeFile\n  );\n};\n\nconst getJSXModuleTranspiler = loopProtectOptions => async challengeFile => {\n  await loadBabel();\n  await loadPresetReact();\n  const baseOptions = getBabelOptions(presetsJSX, loopProtectOptions);\n  const babelOptions = {\n    ...baseOptions,\n    plugins: [...baseOptions.plugins, MODULE_TRANSFORM_PLUGIN],\n    moduleId: 'index' // TODO: this should be dynamic\n  };\n  return transformContents(babelTransformCode(babelOptions), challengeFile);\n};\n\nconst getTSTranspiler = loopProtectOptions => async challengeFile => {\n  await loadBabel();\n  await checkTSServiceIsReady();\n  const babelOptions = getBabelOptions(presetsJS, loopProtectOptions);\n  return flow(\n    partial(transformHeadTailAndContents, compileTypeScriptCode),\n    partial(transformHeadTailAndContents, babelTransformCode(babelOptions))\n  )(challengeFile);\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "f0ebfaaa09877e4ff4686952c1307c19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "const babelOptions = getBabelOptions(presetsJSX, loopProtectOptions); return transformHeadTailAndContents( babelTransformCode(babelOptions), challengeFile ); }; const getJSXModuleTranspiler = loopProtectOptions => async challengeFile => { await loadBabel(); await loadPresetReact(); const baseOptions = getBabelOptions(presetsJSX, loopProtectOptions); const babelOptions = { ...baseOptions, plugins: [...baseOptions.plugins, MODULE_TRANSFORM_PLUGIN], moduleId: 'index' // TODO: this should be dynamic }; return transformContents(babelTransformCode(babelOptions), challengeFile); }; const getTSTranspiler = loopProtectOptions => async challengeFile => { await loadBabel(); await checkTSServiceIsReady(); const babelOptions = getBabelOptions(presetsJS, loopProtectOptions); return flow( partial(transformHeadTailAndContents, compileTypeScriptCode), partial(transformHeadTailAndContents, babelTransformCode(babelOptions)) )(challengeFile); };\n\nconst createTranspiler = loopProtectOptions => {\n  return cond([\n    [testJS, getJSTranspiler(loopProtectOptions)],\n    [testJSX, getJSXTranspiler(loopProtectOptions)],\n    [testTypeScript, getTSTranspiler(loopProtectOptions)],\n    [testHTML, getHtmlTranspiler({ useModules: false })],\n    [stubTrue, identity]\n  ]);\n};\n\nconst createModuleTransformer = loopProtectOptions => {\n  return cond([\n    [testJSX, getJSXModuleTranspiler(loopProtectOptions)],\n    [testHTML, getHtmlTranspiler({ useModules: true })],\n    [stubTrue, identity]\n  ]);\n};\n\nfunction getBabelOptions(\n  presets,\n  { preview, disableLoopProtectTests, disableLoopProtectPreview } = {\n    preview: false,\n    disableLoopProtectTests: false,\n    disableLoopProtectPreview: false\n  }\n) {\n  // we protect the preview unless specifically disabled, since it evaluates as\n  // the user types and they may briefly have infinite looping code accidentally\n  if (preview && !disableLoopProtectPreview)\n    return { ...presets, plugins: ['loopProtection'] };\n  if (!disableLoopProtectTests)\n    return { ...presets, plugins: ['testLoopProtection'] };\n  return presets;\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "90811d9a2a5dd2e02a3d634bfb0bd91e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "[testJSX, getJSXModuleTranspiler(loopProtectOptions)], [testHTML, getHtmlTranspiler({ useModules: true })], [stubTrue, identity] ]); }; function getBabelOptions( presets, { preview, disableLoopProtectTests, disableLoopProtectPreview } = { preview: false, disableLoopProtectTests: false, disableLoopProtectPreview: false } ) { // we protect the preview unless specifically disabled, since it evaluates as // the user types and they may briefly have infinite looping code accidentally if (preview && !disableLoopProtectPreview) return { ...presets, plugins: ['loopProtection'] }; if (!disableLoopProtectTests) return { ...presets, plugins: ['testLoopProtection'] }; return presets; }\n\nconst sassWorkerExecutor = new WorkerExecutor(sassCompile);\nasync function transformSASS(documentElement) {\n  // we only teach scss syntax, not sass. Also the compiler does not seem to be\n  // able to deal with sass.\n  const styleTags = documentElement.querySelectorAll(\n    'style[type~=\"text/scss\"]'\n  );\n\nawait Promise.all(\n    [].map.call(styleTags, async style => {\n      style.type = 'text/css';\n      style.innerHTML = await sassWorkerExecutor.execute(style.innerHTML, 5000)\n        .done;\n    })\n  );\n}\n\nasync function transformScript(documentElement, { useModules }) {\n  await loadBabel();\n  await loadPresetEnv();\n  await loadPresetReact();\n  const scriptTags = documentElement.querySelectorAll('script');\n  scriptTags.forEach(script => {\n    const isBabel = script.type === 'text/babel';\n    const hasSource = !!script.src;\n    // TODO: make the use of JSX conditional on more than just the script type.\n    // It should only be used for React challenges since it would be confusing\n    // for learners to see the results of a transformation they didn't ask for.\n    const baseOptions = isBabel ? presetsJSX : presetsJS;\n\nconst options = {\n      ...baseOptions,\n      ...(useModules && { plugins: [MODULE_TRANSFORM_PLUGIN] })\n    };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "e6ec35ea95f2df04eabd2b5f2cefc5b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "scriptTags.forEach(script => { const isBabel = script.type === 'text/babel'; const hasSource = !!script.src; // TODO: make the use of JSX conditional on more than just the script type. // It should only be used for React challenges since it would be confusing // for learners to see the results of a transformation they didn't ask for. const baseOptions = isBabel ? presetsJSX : presetsJS; const options = { ...baseOptions, ...(useModules && { plugins: [MODULE_TRANSFORM_PLUGIN] }) };\n\n// The type has to be removed, otherwise the browser will ignore the script.\n    // However, if we're importing modules, the type will be removed when the\n    // scripts are embedded in the HTML.\n    if (isBabel && !useModules) script.removeAttribute('type');\n    // We could use babel standalone to transform inline code in the preview,\n    // but that generates a warning that's shown to learner. By removing the\n    // type attribute and transforming the code we can avoid that warning.\n    if (isBabel && !hasSource) {\n      script.removeAttribute('type');\n      script.setAttribute('data-type', 'text/babel');\n    }\n\n// Skip unnecessary transformations\n    script.innerHTML = script.innerHTML\n      ? babelTransformCode(options)(script.innerHTML)\n      : '';\n  });\n}\n\n// This does the final transformations of the files needed to embed them into\n// HTML.\nexport const embedFilesInHtml = async function (challengeFiles) {\n  const { indexHtml, stylesCss, scriptJs, indexJsx, indexTs } =\n    challengeFilesToObject(challengeFiles);\n\nconst embedStylesAndScript = contentDocument => {\n    const documentElement = contentDocument.documentElement;\n    const link =\n      documentElement.querySelector('link[href=\"styles.css\"]') ??\n      documentElement.querySelector('link[href=\"./styles.css\"]');\n    const script =\n      documentElement.querySelector('script[src=\"script.js\"]') ??\n      documentElement.querySelector('script[src=\"./script.js\"]');\n\nconst tsScript =\n      documentElement.querySelector('script[src=\"index.ts\"]') ??\n      documentElement.querySelector('script[src=\"./index.ts\"]');",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "612ca4e54d22c96a1ede74949dce58c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "} // Skip unnecessary transformations script.innerHTML = script.innerHTML ? babelTransformCode(options)(script.innerHTML) : ''; }); } // This does the final transformations of the files needed to embed them into // HTML. export const embedFilesInHtml = async function (challengeFiles) { const { indexHtml, stylesCss, scriptJs, indexJsx, indexTs } = challengeFilesToObject(challengeFiles); const embedStylesAndScript = contentDocument => { const documentElement = contentDocument.documentElement; const link = documentElement.querySelector('link[href=\"styles.css\"]') ?? documentElement.querySelector('link[href=\"./styles.css\"]'); const script = documentElement.querySelector('script[src=\"script.js\"]') ?? documentElement.querySelector('script[src=\"./script.js\"]'); const tsScript = documentElement.querySelector('script[src=\"index.ts\"]') ?? documentElement.querySelector('script[src=\"./index.ts\"]');\n\nconst jsxScript =\n      documentElement.querySelector(\n        `script[data-plugins=\"${MODULE_TRANSFORM_PLUGIN}\"][type=\"text/babel\"][src=\"index.jsx\"]`\n      ) ??\n      documentElement.querySelector(\n        `script[data-plugins=\"${MODULE_TRANSFORM_PLUGIN}\"][type=\"text/babel\"][src=\"./index.jsx\"]`\n      );\n\nif (link) {\n      const style = contentDocument.createElement('style');\n      style.classList.add('fcc-injected-styles');\n      style.innerHTML = stylesCss?.contents;\n\nlink.parentNode.appendChild(style);\n\nlink.removeAttribute('href');\n      link.dataset.href = 'styles.css';\n    }\n    if (script) {\n      script.innerHTML = scriptJs?.contents;\n      script.removeAttribute('src');\n      script.setAttribute('data-src', 'script.js');\n    }\n    if (tsScript) {\n      tsScript.innerHTML = indexTs?.contents;\n      tsScript.removeAttribute('src');\n      tsScript.setAttribute('data-src', 'index.ts');\n    }\n    if (jsxScript) {\n      jsxScript.innerHTML = indexJsx?.contents;\n      jsxScript.removeAttribute('src');\n      jsxScript.removeAttribute('type');\n      jsxScript.setAttribute('data-src', 'index.jsx');\n      jsxScript.setAttribute('data-type', 'text/babel');\n    }\n    return documentElement.innerHTML;\n  };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "e41f73d7960e06a60f04476698d8d53c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "documentElement.querySelector('link[href=\"./styles.css\"]'); const script = documentElement.querySelector('script[src=\"script.js\"]') ?? documentElement.querySelector('script[src=\"./script.js\"]'); const tsScript = documentElement.querySelector('script[src=\"index.ts\"]') ?? documentElement.querySelector('script[src=\"./index.ts\"]'); const jsxScript = documentElement.querySelector( `script[data-plugins=\"${MODULE_TRANSFORM_PLUGIN}\"][type=\"text/babel\"][src=\"index.jsx\"]` ) ?? documentElement.querySelector( `script[data-plugins=\"${MODULE_TRANSFORM_PLUGIN}\"][type=\"text/babel\"][src=\"./index.jsx\"]` ); if (link) { const style = contentDocument.createElement('style'); style.classList.add('fcc-injected-styles'); style.innerHTML = stylesCss?.contents; link.parentNode.appendChild(style); link.removeAttribute('href'); link.dataset.href = 'styles.css'; } if (script) { script.innerHTML = scriptJs?.contents; script.removeAttribute('src'); script.setAttribute('data-src', 'script.js'); } if (tsScript) { tsScript.innerHTML = indexTs?.contents; tsScript.removeAttribute('src'); tsScript.setAttribute('data-src', 'index.ts'); } if (jsxScript) { jsxScript.innerHTML = indexJsx?.contents; jsxScript.removeAttribute('src'); jsxScript.removeAttribute('type'); jsxScript.setAttribute('data-src', 'index.jsx'); jsxScript.setAttribute('data-type', 'text/babel'); } return documentElement.innerHTML; };\n\nif (indexHtml) {\n    const contents = await parseAndTransform(\n      embedStylesAndScript,\n      indexHtml.contents\n    );\n    return contents;\n  } else if (indexJsx) {\n    return `<script>${indexJsx.contents}</script>`;\n  } else if (scriptJs) {\n    return `<script>${scriptJs.contents}</script>`;\n  } else if (indexTs) {\n    return `<script>${indexTs.contents}</script>`;\n  } else {\n    throw Error('No html, ts or js(x) file found');\n  }\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "4f2ff71e1f9f061e1388e5855c2fc6d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "script.setAttribute('data-src', 'script.js'); } if (tsScript) { tsScript.innerHTML = indexTs?.contents; tsScript.removeAttribute('src'); tsScript.setAttribute('data-src', 'index.ts'); } if (jsxScript) { jsxScript.innerHTML = indexJsx?.contents; jsxScript.removeAttribute('src'); jsxScript.removeAttribute('type'); jsxScript.setAttribute('data-src', 'index.jsx'); jsxScript.setAttribute('data-type', 'text/babel'); } return documentElement.innerHTML; }; if (indexHtml) { const contents = await parseAndTransform( embedStylesAndScript, indexHtml.contents ); return contents; } else if (indexJsx) { return `<script>${indexJsx.contents}</script>`; } else if (scriptJs) { return `<script>${scriptJs.contents}</script>`; } else if (indexTs) { return `<script>${indexTs.contents}</script>`; } else { throw Error('No html, ts or js(x) file found'); } };\n\nfunction challengeFilesToObject(challengeFiles) {\n  const indexHtml = challengeFiles.find(file => file.fileKey === 'indexhtml');\n  const indexJsx = challengeFiles.find(file => file.fileKey === 'indexjsx');\n  const stylesCss = challengeFiles.find(file => file.fileKey === 'stylescss');\n  const scriptJs = challengeFiles.find(file => file.fileKey === 'scriptjs');\n  const indexTs = challengeFiles.find(file => file.fileKey === 'indexts');\n  return { indexHtml, indexJsx, stylesCss, scriptJs, indexTs };\n}\n\nconst parseAndTransform = async function (transform, contents) {\n  const parser = new DOMParser();\n  const newDoc = parser.parseFromString(contents, 'text/html');\n\nreturn await transform(newDoc);\n};\n\nconst getHtmlTranspiler = scriptOptions =>\n  async function (file) {\n    const transform = async contentDocument => {\n      const documentElement = contentDocument.documentElement;\n      await Promise.all([\n        transformSASS(documentElement),\n        transformScript(documentElement, scriptOptions)\n      ]);\n      return documentElement.innerHTML;\n    };\n\nconst contents = await parseAndTransform(transform, file.contents);\n    return transformContents(() => contents, file);\n  };\n\nexport const getTransformers = loopProtectOptions => [\n  createSource,\n  replaceNBSP,\n  createTranspiler(loopProtectOptions),\n  partial(compileHeadTail, '')\n];",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "23051ca617db46d9e87cee68f7e9bfdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
    "source_type": "git_repo",
    "title": "transformers",
    "content": "const parseAndTransform = async function (transform, contents) { const parser = new DOMParser(); const newDoc = parser.parseFromString(contents, 'text/html'); return await transform(newDoc); }; const getHtmlTranspiler = scriptOptions => async function (file) { const transform = async contentDocument => { const documentElement = contentDocument.documentElement; await Promise.all([ transformSASS(documentElement), transformScript(documentElement, scriptOptions) ]); return documentElement.innerHTML; }; const contents = await parseAndTransform(transform, file.contents); return transformContents(() => contents, file); }; export const getTransformers = loopProtectOptions => [ createSource, replaceNBSP, createTranspiler(loopProtectOptions), partial(compileHeadTail, '') ];\n\nexport const getMultifileJSXTransformers = loopProtectOptions => [\n  createSource,\n  replaceNBSP,\n  createModuleTransformer(loopProtectOptions)\n];\n\nexport const getPythonTransformers = () => [\n  createSource,\n  replaceNBSP,\n  partial(compileHeadTail, '')\n];",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 11472,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\rechallenge\\transformers.js",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "76df2e6f4927703b4565c8594abf70da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "import { combineEpics, ofType } from 'redux-observable';\nimport { of } from 'rxjs';\nimport { filter, ignoreElements, map, switchMap, tap } from 'rxjs/operators';\nimport store from 'store';\n\nimport { isPoly, setContent } from '../../../../../shared/utils/polyvinyl';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport { savedChallengesSelector } from '../../../redux/selectors';\nimport { actionTypes as appTypes } from '../../../redux/action-types';\nimport {\n  getIsDailyCodingChallenge,\n  getDailyCodingChallengeLanguage\n} from '../../../../../shared/config/challenge-types';\nimport { actionTypes } from './action-types';\nimport { noStoredCodeFound, updateFile } from './actions';\nimport { challengeFilesSelector, challengeMetaSelector } from './selectors';\n\nconst legacyPrefixes = [\n  'Bonfire: ',\n  'Waypoint: ',\n  'Zipline: ',\n  'Basejump: ',\n  'Checkpoint: '\n];\nconst legacyPostfix = 'Val';\n\nfunction getCode(id) {\n  const code = store.get(id);\n  return code ? code : null;\n}\n\nfunction getLegacyCode(legacy) {\n  const key = legacy + legacyPostfix;\n  let code = null;\n  const maybeCode = store.get(key);\n  if (maybeCode) {\n    code = '' + maybeCode;\n    store.remove(key);\n    return code;\n  }\n  return legacyPrefixes.reduce((code, prefix) => {\n    if (code) {\n      return code;\n    }\n    return store.get(prefix + key);\n  }, null);\n}\n\nfunction legacyToFile(code, challengeFiles, fileKey) {\n  if (isFilesAllPoly(challengeFiles)) {\n    return {\n      ...setContent(\n        code,\n        challengeFiles.find(x => x.fileKey === fileKey)\n      )\n    };\n  }\n  return false;\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2898a752c23c109bd7398dc3014205ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "code ? code : null; } function getLegacyCode(legacy) { const key = legacy + legacyPostfix; let code = null; const maybeCode = store.get(key); if (maybeCode) { code = '' + maybeCode; store.remove(key); return code; } return legacyPrefixes.reduce((code, prefix) => { if (code) { return code; } return store.get(prefix + key); }, null); } function legacyToFile(code, challengeFiles, fileKey) { if (isFilesAllPoly(challengeFiles)) { return { ...setContent( code, challengeFiles.find(x => x.fileKey === fileKey) ) }; } return false; }\n\nfunction isFilesAllPoly(challengeFiles) {\n  if (Array.isArray(challengeFiles)) {\n    return challengeFiles?.every(file => isPoly(file));\n  } else {\n    // TODO: After sufficient time, remove parsing of old code-storage format\n    // This was pushed to production with https://github.com/freeCodeCamp/freeCodeCamp/pull/43023\n    return Object.keys(challengeFiles)\n      .map(key => challengeFiles[key])\n      .every(file => isPoly(file));\n  }\n}\n\nfunction clearCodeEpic(action$, state$) {\n  return action$.pipe(\n    ofType(appTypes.submitComplete, actionTypes.resetChallenge),\n    tap(() => {\n      const { challengeType, id } = challengeMetaSelector(state$.value);\n      const isDailyCodingChallenge = getIsDailyCodingChallenge(challengeType);\n\nconst storageId = isDailyCodingChallenge\n        ? id + getDailyCodingChallengeLanguage(challengeType)\n        : id;\n\nstore.remove(storageId);\n    }),\n    ignoreElements()\n  );\n}\n\nfunction saveCodeEpic(action$, state$) {\n  return action$.pipe(\n    ofType(actionTypes.executeChallenge, actionTypes.saveEditorContent),\n    // do not save challenge if code is locked\n    map(action => {\n      const state = state$.value;\n      const { id, challengeType } = challengeMetaSelector(state);\n      const challengeFiles = challengeFilesSelector(state);\n      try {\n        const isDailyCodingChallenge = getIsDailyCodingChallenge(challengeType);\n\nconst storageId = isDailyCodingChallenge\n          ? id + getDailyCodingChallengeLanguage(challengeType)\n          : id;\n\nstore.set(storageId, challengeFiles);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "fe0dba114cfc74ebb294dc117888b317",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "id } = challengeMetaSelector(state$.value); const isDailyCodingChallenge = getIsDailyCodingChallenge(challengeType); const storageId = isDailyCodingChallenge ? id + getDailyCodingChallengeLanguage(challengeType) : id; store.remove(storageId); }), ignoreElements() ); } function saveCodeEpic(action$, state$) { return action$.pipe( ofType(actionTypes.executeChallenge, actionTypes.saveEditorContent), // do not save challenge if code is locked map(action => { const state = state$.value; const { id, challengeType } = challengeMetaSelector(state); const challengeFiles = challengeFilesSelector(state); try { const isDailyCodingChallenge = getIsDailyCodingChallenge(challengeType); const storageId = isDailyCodingChallenge ? id + getDailyCodingChallengeLanguage(challengeType) : id; store.set(storageId, challengeFiles);\n\nconst stored = store.get(storageId);\n        const fileKey = challengeFiles[0].fileKey;\n        if (\n          stored.find(challengeFile => challengeFile.fileKey === fileKey)\n            .contents !==\n          challengeFiles.find(challengeFile => challengeFile.fileKey).contents\n        ) {\n          throw Error('Failed to save to localStorage');\n        }\n        return action;\n      } catch {\n        return { ...action, error: true };\n      }\n    }),\n    ofType(actionTypes.saveEditorContent),\n    switchMap(({ error }) =>\n      of(\n        createFlashMessage({\n          type: error ? 'warning' : 'success',\n          message: error\n            ? FlashMessages.LocalCodeSaveError\n            : FlashMessages.LocalCodeSaved\n        })\n      )\n    )\n  );\n}\n\nfunction loadCodeEpic(action$, state$) {\n  return action$.pipe(\n    ofType(actionTypes.challengeMounted),\n    filter(() => {\n      const challengeFiles = challengeFilesSelector(state$.value);\n      return challengeFiles?.length > 0;\n    }),\n    switchMap(({ payload: id }) => {\n      let finalFiles;\n      const state = state$.value;\n      const challenge = challengeMetaSelector(state);\n      const challengeFiles = challengeFilesSelector(state);\n      const fileKeys = challengeFiles.map(x => x.fileKey);\n      const invalidForLegacy = fileKeys.length > 1;\n      const { title: legacyKey } = challenge;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "37c48084043871903a5623e0af72b159",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "createFlashMessage({ type: error ? 'warning' : 'success', message: error ? FlashMessages.LocalCodeSaveError : FlashMessages.LocalCodeSaved }) ) ) ); } function loadCodeEpic(action$, state$) { return action$.pipe( ofType(actionTypes.challengeMounted), filter(() => { const challengeFiles = challengeFilesSelector(state$.value); return challengeFiles?.length > 0; }), switchMap(({ payload: id }) => { let finalFiles; const state = state$.value; const challenge = challengeMetaSelector(state); const challengeFiles = challengeFilesSelector(state); const fileKeys = challengeFiles.map(x => x.fileKey); const invalidForLegacy = fileKeys.length > 1; const { title: legacyKey } = challenge;\n\nconst isDailyCodingChallenge = getIsDailyCodingChallenge(\n        challenge.challengeType\n      );\n      const storageId = isDailyCodingChallenge\n        ? id + getDailyCodingChallengeLanguage(challenge.challengeType)\n        : id;\n\nconst codeFound = getCode(storageId);\n\n// first check if the store (which is synchronized with the db) has saved\n      // code\n      const savedChallenges = savedChallengesSelector(state);\n      const savedChallenge = savedChallenges?.find(saved => {\n        return saved.id === challenge.id;\n      });",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "01831ffa5daa8ebad0ce42c657a93b7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "= challengeMetaSelector(state); const challengeFiles = challengeFilesSelector(state); const fileKeys = challengeFiles.map(x => x.fileKey); const invalidForLegacy = fileKeys.length > 1; const { title: legacyKey } = challenge; const isDailyCodingChallenge = getIsDailyCodingChallenge( challenge.challengeType ); const storageId = isDailyCodingChallenge ? id + getDailyCodingChallengeLanguage(challenge.challengeType) : id; const codeFound = getCode(storageId); // first check if the store (which is synchronized with the db) has saved // code const savedChallenges = savedChallengesSelector(state); const savedChallenge = savedChallenges?.find(saved => { return saved.id === challenge.id; });\n\n// if the store is already populated with the saved files, we should not\n      // overwrite them with the local storage data\n      if (savedChallenge) {\n        return of(noStoredCodeFound());\n      } else if (codeFound && isFilesAllPoly(codeFound)) {\n        finalFiles = challengeFiles.reduce((challengeFiles, challengeFile) => {\n          let foundChallengeFile = {};\n          // TODO: after sufficient time, say 6 months from this commit, we can\n          // assume that the majority of users have revisited any pages with old\n          // stored code. At this point we can remove everything related to\n          // indexjsCode.\n          let indexjsCode = null;\n          if (Array.isArray(codeFound)) {\n            foundChallengeFile = codeFound.find(\n              x => x.fileKey === challengeFile.fileKey\n            );\n            indexjsCode = codeFound.find(x => x.fileKey === 'indexjs');\n          } else {\n            // TODO: After sufficient time, remove parsing of old code-storage format\n            // This was pushed to production with https://github.com/freeCodeCamp/freeCodeCamp/pull/43023\n            foundChallengeFile = codeFound[challengeFile.fileKey];\n            indexjsCode = codeFound['indexjs'];\n          }\n          let isCodeFound;\n          // Fix the format of the old file\n          if (indexjsCode) {\n            indexjsCode.fileKey = 'scriptjs';\n            delete indexjsCode.key;\n            indexjsCode.history = ['script.js'];\n            indexjsCode.name = 'script';\n            indexjsCode.path = 'script.js';\n          }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "b93e806ba1b3732281da6f1e2f589b94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
    "source_type": "git_repo",
    "title": "code-storage-epic",
    "content": "if (Array.isArray(codeFound)) { foundChallengeFile = codeFound.find( x => x.fileKey === challengeFile.fileKey ); indexjsCode = codeFound.find(x => x.fileKey === 'indexjs'); } else { // TODO: After sufficient time, remove parsing of old code-storage format // This was pushed to production with https://github.com/freeCodeCamp/freeCodeCamp/pull/43023 foundChallengeFile = codeFound[challengeFile.fileKey]; indexjsCode = codeFound['indexjs']; } let isCodeFound; // Fix the format of the old file if (indexjsCode) { indexjsCode.fileKey = 'scriptjs'; delete indexjsCode.key; indexjsCode.history = ['script.js']; indexjsCode.name = 'script'; indexjsCode.path = 'script.js'; }\n\nif (foundChallengeFile) {\n            isCodeFound = Object.keys(foundChallengeFile).length > 0;\n          } else if (indexjsCode) {\n            isCodeFound = Object.keys(indexjsCode).length > 0;\n            foundChallengeFile = indexjsCode;\n            // Repair the store, by replacing old style code with the repaired\n            // file\n            store.set(id, [indexjsCode]);\n          } else if (!getIsDailyCodingChallenge(challenge.challengeType)) {\n            // The stored code is neither old code nor new, so we do not know\n            // how to handle it.  The safest option is to delete it.\n            store.remove(id);\n          }\n          return [\n            ...challengeFiles,\n            {\n              ...challengeFile,\n              ...(isCodeFound ? foundChallengeFile : {})\n            }\n          ];\n        }, []);\n      } else {\n        const legacyCode = getLegacyCode(legacyKey);\n        if (legacyCode && !invalidForLegacy) {\n          finalFiles = legacyToFile(legacyCode, challengeFiles, fileKeys[0]);\n        }\n      }\n      if (finalFiles) {\n        // update the contents, rather than replacing the entire file, so that\n        // we do not lose the seed values.\n        return of(...finalFiles.map(file => updateFile(file)));\n      }\n      return of(noStoredCodeFound());\n    })\n  );\n}\n\nexport default combineEpics(saveCodeEpic, loadCodeEpic, clearCodeEpic);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8167,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\code-storage-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "8ee45926e6c48fe06936179d74f30998",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.test.js",
    "source_type": "git_repo",
    "title": "completion-epic.test",
    "content": "import { TestScheduler } from 'rxjs/testing';\nimport completionEpic from './completion-epic';\nimport { submitChallenge, submitChallengeComplete } from './actions';\n\ndescribe('completionEpic', () => {\n  describe('signed out user', () => {\n    const testScheduler = new TestScheduler((actual, expected) => {\n      it('should dispatch submitChallengeComplete', () => {\n        expect(actual).toEqual(expect.arrayContaining(expected));\n      });\n    });\n\ntestScheduler.run(({ hot, expectObservable }) => {\n      const action$ = hot('a', {\n        a: submitChallenge()\n      });\n      const state$ = {\n        value: {\n          challenge: { challengeMeta: { challengeType: 0 } },\n          app: {\n            user: { username: 'test' },\n            allChallengesInfo: { challengeNodes: [], certificateNodes: [] }\n          }\n        }\n      };\n\nconst output$ = completionEpic(action$, state$);\n\nexpectObservable(output$).toBe('a', {\n        a: submitChallengeComplete()\n      });\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1010,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.test.js",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5b454cd9c6f47153dedada84d75200f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "import { navigate } from 'gatsby';\nimport { omit } from 'lodash-es';\nimport { ofType } from 'redux-observable';\nimport { empty, of } from 'rxjs';\nimport {\n  catchError,\n  concat,\n  retry,\n  switchMap,\n  tap,\n  mergeMap\n} from 'rxjs/operators';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport {\n  standardErrorMessage,\n  msTrophyVerified\n} from '../../../utils/error-messages';\nimport {\n  canSaveToDB,\n  challengeTypes,\n  getIsDailyCodingChallenge,\n  getDailyCodingChallengeLanguage,\n  submitTypes\n} from '../../../../../shared/config/challenge-types';\nimport { actionTypes as submitActionTypes } from '../../../redux/action-types';\nimport {\n  allowSectionDonationRequests,\n  setIsProcessing,\n  setRenderStartTime,\n  submitComplete,\n  updateComplete,\n  updateFailed\n} from '../../../redux/actions';\nimport { isSignedInSelector, userSelector } from '../../../redux/selectors';\nimport { mapFilesToChallengeFiles } from '../../../utils/ajax';\nimport { standardizeRequestBody } from '../../../utils/challenge-request-helpers';\nimport postUpdate$ from '../utils/post-update';\nimport { SuperBlocks } from '../../../../../shared/config/curriculum';\nimport { actionTypes } from './action-types';\nimport {\n  closeModal,\n  updateSolutionFormValues,\n  setIsAdvancing,\n  submitChallengeComplete,\n  submitChallengeError\n} from './actions';\nimport {\n  challengeFilesSelector,\n  challengeMetaSelector,\n  challengeTestsSelector,\n  userCompletedExamSelector,\n  projectFormValuesSelector,\n  isBlockNewlyCompletedSelector,\n  isModuleNewlyCompletedSelector\n} from './selectors';\n\nfunction postChallenge(update) {\n  const {\n    payload: { challengeType }\n  } = update;\n  const saveChallenge = postUpdate$(update).pipe(\n    retry(3),\n    switchMap(({ data }) => {\n      const {\n        type,\n        completedDailyCodingChallenges,\n        savedChallenges,\n        message,\n        examResults\n      } = data;\n      const payloadWithClientProperties = {\n        ...omit(update.payload, ['files'])\n      };\n      if (update.payload.files) {\n        payloadWithClientProperties.challengeFiles = update.payload.files.map(\n          ({ key, ...rest }) => ({\n            ...rest,\n            fileKey: key\n          })\n        );\n      }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1ff77fe847986b01fc79f982c8ca434c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "updateSolutionFormValues, setIsAdvancing, submitChallengeComplete, submitChallengeError } from './actions'; import { challengeFilesSelector, challengeMetaSelector, challengeTestsSelector, userCompletedExamSelector, projectFormValuesSelector, isBlockNewlyCompletedSelector, isModuleNewlyCompletedSelector } from './selectors'; function postChallenge(update) { const { payload: { challengeType } } = update; const saveChallenge = postUpdate$(update).pipe( retry(3), switchMap(({ data }) => { const { type, completedDailyCodingChallenges, savedChallenges, message, examResults } = data; const payloadWithClientProperties = { ...omit(update.payload, ['files']) }; if (update.payload.files) { payloadWithClientProperties.challengeFiles = update.payload.files.map( ({ key, ...rest }) => ({ ...rest, fileKey: key }) ); }\n\nlet actions = [\n        submitComplete({\n          submittedChallenge: payloadWithClientProperties,\n          completedDailyCodingChallenges,\n          savedChallenges: mapFilesToChallengeFiles(savedChallenges),\n          examResults\n        }),\n        updateComplete(),\n        submitChallengeComplete()\n      ];\n\nif (\n        type === 'error' ||\n        (message && challengeType === challengeTypes.msTrophy)\n      ) {\n        actions = [];\n        if (message) {\n          actions.push(createFlashMessage(data));\n        }\n        actions.push(submitChallengeError());\n      } else if (challengeType === challengeTypes.msTrophy) {\n        actions.push(createFlashMessage(msTrophyVerified));\n      }\n\nreturn of(...actions);\n    }),\n    catchError(() => of(updateFailed(update), submitChallengeError()))\n  );\n  return saveChallenge;\n}\n\nfunction submitModern(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length === 0 || tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.checkChallenge) {\n      return of({ type: 'this was a check challenge' });\n    }\n\nif (type === actionTypes.submitChallenge) {\n      const { id, block, challengeType } = challengeMetaSelector(state);\n\nlet update;\n\nif (getIsDailyCodingChallenge(challengeType)) {\n        const language = getDailyCodingChallengeLanguage(challengeType);\n\nconst body = {\n          id,\n          challengeType,\n          language\n        };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "769bf1422de664afe18a05319a4fd9ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "} return of(...actions); }), catchError(() => of(updateFailed(update), submitChallengeError())) ); return saveChallenge; } function submitModern(type, state) { const tests = challengeTestsSelector(state); if (tests.length === 0 || tests.every(test => test.pass && !test.err)) { if (type === actionTypes.checkChallenge) { return of({ type: 'this was a check challenge' }); } if (type === actionTypes.submitChallenge) { const { id, block, challengeType } = challengeMetaSelector(state); let update; if (getIsDailyCodingChallenge(challengeType)) { const language = getDailyCodingChallengeLanguage(challengeType); const body = { id, challengeType, language };\n\nupdate = {\n          endpoint: '/daily-coding-challenge-completed',\n          payload: body\n        };\n      } else {\n        const challengeFiles = challengeFilesSelector(state);\n\nlet body;\n        if (\n          block === 'javascript-algorithms-and-data-structures-projects' ||\n          canSaveToDB(challengeType)\n        ) {\n          body = standardizeRequestBody({ id, challengeType, challengeFiles });\n        } else {\n          body = {\n            id,\n            challengeType\n          };\n        }\n\nupdate = {\n          endpoint: '/modern-challenge-completed',\n          payload: body\n        };\n      }\n      return postChallenge(update);\n    }\n  }\n  return empty();\n}\n\nfunction submitProject(type, state) {\n  if (type === actionTypes.checkChallenge) {\n    return empty();\n  }\n\nconst { solution, githubLink } = projectFormValuesSelector(state);\n  const { id, challengeType } = challengeMetaSelector(state);\n  const { username } = userSelector(state);\n  const challengeInfo = { id, challengeType, solution };\n  if (challengeType === challengeTypes.backEndProject) {\n    challengeInfo.githubLink = githubLink;\n  }\n\nconst update = {\n    endpoint: '/project-completed',\n    payload: challengeInfo\n  };\n  return postChallenge(update, username).pipe(\n    concat(of(updateSolutionFormValues({})))\n  );\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "048d615e2d9561a66f4901043ac1ede0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "'/modern-challenge-completed', payload: body }; } return postChallenge(update); } } return empty(); } function submitProject(type, state) { if (type === actionTypes.checkChallenge) { return empty(); } const { solution, githubLink } = projectFormValuesSelector(state); const { id, challengeType } = challengeMetaSelector(state); const { username } = userSelector(state); const challengeInfo = { id, challengeType, solution }; if (challengeType === challengeTypes.backEndProject) { challengeInfo.githubLink = githubLink; } const update = { endpoint: '/project-completed', payload: challengeInfo }; return postChallenge(update, username).pipe( concat(of(updateSolutionFormValues({}))) ); }\n\nfunction submitBackendChallenge(type, state) {\n  const tests = challengeTestsSelector(state);\n  if (tests.length > 0 && tests.every(test => test.pass && !test.err)) {\n    if (type === actionTypes.submitChallenge) {\n      const { id } = challengeMetaSelector(state);\n      const {\n        solution: { value: solution }\n      } = projectFormValuesSelector(state);\n      const challengeInfo = { id, solution };\n\nconst update = {\n        endpoint: '/backend-challenge-completed',\n        payload: challengeInfo\n      };\n      return postChallenge(update);\n    }\n  }\n  return empty();\n}\n\nconst submitters = {\n  tests: submitModern,\n  backend: submitBackendChallenge,\n  'project.frontEnd': submitProject,\n  'project.backEnd': submitProject,\n  exam: submitExam,\n  msTrophy: submitMsTrophy\n};\n\nfunction submitExam(type, state) {\n  // TODO: verify shape of examResults?\n  if (type === actionTypes.submitChallenge) {\n    const { id, challengeType } = challengeMetaSelector(state);\n    const userCompletedExam = userCompletedExamSelector(state);\n\nconst { username } = userSelector(state);\n    const challengeInfo = { id, challengeType, userCompletedExam };\n\nconst update = {\n      endpoint: '/exam-challenge-completed',\n      payload: challengeInfo\n    };\n    return postChallenge(update, username);\n  }\n  return empty();\n}\n\nfunction submitMsTrophy(type, state) {\n  if (type === actionTypes.submitChallenge) {\n    const { id, challengeType } = challengeMetaSelector(state);\n\nconst challengeInfo = { id, challengeType };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a6ab6c9cf1d45de4c537cc67e318684c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "{ // TODO: verify shape of examResults? if (type === actionTypes.submitChallenge) { const { id, challengeType } = challengeMetaSelector(state); const userCompletedExam = userCompletedExamSelector(state); const { username } = userSelector(state); const challengeInfo = { id, challengeType, userCompletedExam }; const update = { endpoint: '/exam-challenge-completed', payload: challengeInfo }; return postChallenge(update, username); } return empty(); } function submitMsTrophy(type, state) { if (type === actionTypes.submitChallenge) { const { id, challengeType } = challengeMetaSelector(state); const challengeInfo = { id, challengeType };\n\nconst update = {\n      endpoint: '/ms-trophy-challenge-completed',\n      payload: challengeInfo\n    };\n    return postChallenge(update);\n  }\n  return empty();\n}\n\nexport default function completionEpic(action$, state$) {\n  return action$.pipe(\n    ofType(actionTypes.submitChallenge),\n    switchMap(({ type }) => {\n      const state = state$.value;\n\nconst {\n        isLastChallengeInBlock,\n        nextChallengePath,\n        challengeType,\n        superBlock,\n        blockType,\n        block,\n        module,\n        blockHashSlug\n      } = challengeMetaSelector(state);\n      // Default to submitChallengeComplete since we do not want the user to\n      // be stuck in the 'isSubmitting' state.\n      let submitter = () => of(submitChallengeComplete());\n      if (\n        !(challengeType in submitTypes) ||\n        !(submitTypes[challengeType] in submitters)\n      ) {\n        throw new Error(\n          'Unable to find the correct submit function for challengeType ' +\n            challengeType\n        );\n      }\n\nif (isSignedInSelector(state)) {\n        submitter = submitters[submitTypes[challengeType]];\n      }\n\nlet pathToNavigateTo = nextChallengePath;\n\nif (isLastChallengeInBlock) {\n        pathToNavigateTo = blockHashSlug;\n      }\n\n// TODO: Navigate to the next daily challenge if it exists - archive if not.\n      if (getIsDailyCodingChallenge(challengeType)) {\n        pathToNavigateTo = '/learn/daily-coding-challenge/archive';\n      }\n\nconst canAllowDonationRequest = (state, action) => {\n        if (action.type !== submitActionTypes.submitComplete) return null;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "ce0ff91a53ef910334674c4a00fcc89c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
    "source_type": "git_repo",
    "title": "completion-epic",
    "content": "|| !(submitTypes[challengeType] in submitters) ) { throw new Error( 'Unable to find the correct submit function for challengeType ' + challengeType ); } if (isSignedInSelector(state)) { submitter = submitters[submitTypes[challengeType]]; } let pathToNavigateTo = nextChallengePath; if (isLastChallengeInBlock) { pathToNavigateTo = blockHashSlug; } // TODO: Navigate to the next daily challenge if it exists - archive if not. if (getIsDailyCodingChallenge(challengeType)) { pathToNavigateTo = '/learn/daily-coding-challenge/archive'; } const canAllowDonationRequest = (state, action) => { if (action.type !== submitActionTypes.submitComplete) return null;\n\nconst donationData =\n          superBlock === SuperBlocks.FullStackDeveloper &&\n          blockType !== 'review' &&\n          isModuleNewlyCompletedSelector(state)\n            ? { module, superBlock }\n            : superBlock !== SuperBlocks.FullStackDeveloper &&\n                isBlockNewlyCompletedSelector(state)\n              ? { block, superBlock }\n              : null;\n\nreturn donationData ? allowSectionDonationRequests(donationData) : null;\n      };\n\nreturn submitter(type, state).pipe(\n        concat(\n          of(setIsAdvancing(!isLastChallengeInBlock), setIsProcessing(false))\n        ),\n        mergeMap(x => {\n          const donationAction = canAllowDonationRequest(state, x);\n          return donationAction ? of(x, donationAction) : of(x);\n        }),\n        mergeMap(x => of(x, setRenderStartTime(Date.now()))),\n        tap(res => {\n          if (res.type !== submitActionTypes.updateFailed) {\n            if (challengeType !== challengeTypes.exam) {\n              navigate(pathToNavigateTo);\n            }\n          } else {\n            createFlashMessage(standardErrorMessage);\n          }\n        }),\n        concat(of(closeModal('completion')))\n      );\n    })\n  );\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9429,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\completion-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "07ac9f8182bdd552464f20033b0852b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.test.js",
    "source_type": "git_repo",
    "title": "create-question-epic.test",
    "content": "import { transformEditorLink } from '../utils';\nimport { insertEditableRegions } from './create-question-epic'; describe('create-question-epic', () => {\n  describe('transformEditorLink', () => {\n    const links = [\n      {\n        input: 'https://some-project camperbot repl co',\n        expected: 'https://replit com/@camperbot/some-project'\n      },\n      {\n        input: 'https://some-project glitch me/',\n        expected: 'https://glitch com/edit/# /some-project'\n      },\n      {\n        input: 'https://github com/user/repo-name',\n        expected: 'https://github com/user/repo-name'\n      }\n    ];\n    it('should correctly transform app links to editor links', () => {\n      links forEach(link => {\n        expect(transformEditorLink(link input)) toStrictEqual(link expected);\n      });\n    });\n    it('should not transform editor links in GitHub submission', () => {\n      links forEach(link => {\n        expect(transformEditorLink(link expected)) toStrictEqual(link expected);\n      });\n    });\n  });\n  describe('insertEditableRegions', () => {\n    const multiCertChallengeFiles = [\n      {\n        contents: '<h1>Hello World</h1>',\n        ext: 'html',\n        fileKey: 'indexhtml',\n        history: ['index html'],\n        head: '',\n        id: '',\n        name: 'index',\n        path: 'index html',\n        seed: '',\n        tail: ''\n      },\n      {\n        contents: '',\n        ext: 'css',\n        fileKey: 'stylescss',\n        history: ['styles css'],\n        head: '',\n        id: '',\n        name: 'styles',\n        path: 'styles css',\n        seed: '',\n        tail: ''\n      }\n    ];\n    const multiPracticeChallengeFiles = [\n      {\n        contents:\n          '<html>\\n  <body>\\n    <h1>Hello World</h1>\\n  </body>\\n</html>',\n        editableRegionBoundaries: [2, 4],\n        ext: 'html',\n        fileKey: 'indexhtml',\n        history: ['index html'],\n        head: '',\n        id: '',\n        name: 'index',\n        path: 'index",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2843,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.test.js",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "73411c50966df56f59970494a14c1af8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.test.js",
    "source_type": "git_repo",
    "title": "create-question-epic.test",
    "content": "World</h1>', ext: 'html', fileKey: 'indexhtml', history: ['index html'], head: '', id: '', name: 'index', path: 'index html', seed: '', tail: '' }, { contents: '', ext: 'css', fileKey: 'stylescss', history: ['styles css'], head: '', id: '', name: 'styles', path: 'styles css', seed: '', tail: '' } ]; const multiPracticeChallengeFiles = [ { contents: '<html>\\n <body>\\n <h1>Hello World</h1>\\n </body>\\n</html>', editableRegionBoundaries: [2, 4], ext: 'html', fileKey: 'indexhtml', history: ['index html'], head: '', id: '', name: 'index', path: 'indexhtml',\n        seed: '<html>\\n  <body>\\n    <h1>Hello World</h1>\\n  </body>\\n</html>',\n        tail: ''\n      }\n    ];\n    it('should not insert editable regions for certification projects', () => {\n      const challengeFiles = insertEditableRegions(multiCertChallengeFiles);\n      challengeFiles forEach(({ contents }) => {\n        expect(contents) not toContain('User Editable Region');\n      });\n    });\n    it('should insert editable regions for multifile practice projects', () => {\n      const challengeFiles = insertEditableRegions(multiPracticeChallengeFiles);\n      challengeFiles forEach(({ contents }) => {\n        expect(contents) toContain('User Editable Region');\n      });\n    });\n    it('should not throw if editableRegionBoundaries is undefined', () => {\n      expect(() =>\n        insertEditableRegions(multiCertChallengeFiles)\n      ) not toThrow();\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2843,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.test.js",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ba73ef24a43e1d2155dc4d051f0b2c5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\current-challenge-saga.js",
    "source_type": "git_repo",
    "title": "current-challenge-saga",
    "content": "import { put, takeEvery } from 'redux-saga/effects';\nimport store from 'store';\n\nimport { randomCompliment } from '../../../utils/get-words';\nimport { CURRENT_CHALLENGE_KEY } from './action-types';\nimport { updateSuccessMessage } from './actions';\n\nfunction* currentChallengeSaga({ payload: id }) {\n  yield store.set(CURRENT_CHALLENGE_KEY, id);\n  //     // Temporarily removed to reduce calls to database\n  //     // will need to re-import things at the top\n  //     // yield call(post, update.endpoint, update.payload);\n  // const isSignedIn = yield select(isSignedInSelector);\n  // if (isSignedIn) {\n  //   const update = {\n  //     endpoint: '/update-my-current-challenge',\n  //     payload: {\n  //       currentChallengeId: id\n  //     }\n  //   };\n  //   try {\n  //     yield put(updateComplete());\n  //   } catch {\n  //     yield put(updateFailed(update));\n  //   }\n  // }\n}\n\nfunction* updateSuccessMessageSaga() {\n  yield put(updateSuccessMessage(randomCompliment()));\n}\n\nexport function createCurrentChallengeSaga(types) {\n  return [\n    takeEvery(types.challengeMounted, currentChallengeSaga),\n    takeEvery(types.challengeMounted, updateSuccessMessageSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1173,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\current-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b0b9f3415c75f80a4feab76c3fac1bce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "import i18next from 'i18next';\nimport { ofType } from 'redux-observable';\nimport { mapTo, tap } from 'rxjs/operators';\n\nimport envData from '../../../../config/env.json';\nimport { transformEditorLink } from '../utils';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport { actionTypes } from './action-types';\nimport { closeModal } from './actions';\nimport {\n  challengeFilesSelector,\n  challengeMetaSelector,\n  projectFormValuesSelector\n} from './selectors';\n\nconst { forumLocation } = envData;\n\nfunction filesToMarkdown(challengeFiles = []) {\n  const moreThanOneFile = challengeFiles?.length > 1;\n  return challengeFiles.reduce((fileString, challengeFile) => {\n    if (!challengeFile) {\n      return fileString;\n    }\n\nconst fileExtension = challengeFile.ext;\n    const fileName = challengeFile.name;\n    let fileDescription;\n\nif (!moreThanOneFile) {\n      fileDescription = '';\n    } else {\n      switch (fileExtension) {\n        case 'html':\n          fileDescription = `<!-- file: ${fileName}.${fileExtension} -->\\n`;\n          break;\n        default:\n          fileDescription = `/* file: ${fileName}.${fileExtension} */\\n`;\n          break;\n      }\n    }\n\nreturn `${fileString}\\`\\`\\`${fileExtension}\\n${fileDescription}${challengeFile.contents}\\n\\`\\`\\`\\n\\n`;\n  }, '\\n');\n}\n\nexport function insertEditableRegions(challengeFiles = []) {\n  if (challengeFiles?.some(file => file.editableRegionBoundaries?.length > 0)) {\n    const editableRegionStrings = fileExtension => {\n      switch (fileExtension) {\n        case 'html':\n          return '\\n<!-- User Editable Region -->\\n';\n        case 'css':\n          return '\\n/* User Editable Region */\\n';\n        case 'py':\n          return '\\n# User Editable Region\\n';\n        case 'js':\n          return '\\n// User Editable Region\\n';\n        case 'jsx':\n          return '\\n{/* User Editable Region */}\\n';\n        default:\n          return '\\nUser Editable Region\\n';\n      }\n    };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "c247c8e6f1485cd8f510a2983add6b0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "*/\\n`; break; } } return `${fileString}\\`\\`\\`${fileExtension}\\n${fileDescription}${challengeFile.contents}\\n\\`\\`\\`\\n\\n`; }, '\\n'); } export function insertEditableRegions(challengeFiles = []) { if (challengeFiles?.some(file => file.editableRegionBoundaries?.length > 0)) { const editableRegionStrings = fileExtension => { switch (fileExtension) { case 'html': return '\\n<!-- User Editable Region -->\\n'; case 'css': return '\\n/* User Editable Region */\\n'; case 'py': return '\\n# User Editable Region\\n'; case 'js': return '\\n// User Editable Region\\n'; case 'jsx': return '\\n{/* User Editable Region */}\\n'; default: return '\\nUser Editable Region\\n'; } };\n\nconst filesWithEditableRegions = challengeFiles.map(file => {\n      const { contents, editableRegionBoundaries, ext } = file;\n      if (editableRegionBoundaries.length > 0) {\n        const comment = editableRegionStrings(ext);\n        const [start, end] = editableRegionBoundaries;\n        const lines = contents.split('\\n');\n        lines.splice(start, 0, comment);\n        lines.splice(end, 0, comment);\n        return { ...file, contents: lines.join('\\n') };\n      }\n      return file;\n    });\n    return filesWithEditableRegions;\n  }\n  return challengeFiles;\n}\n\nfunction editableRegionsToMarkdown(challengeFiles = []) {\n  const moreThanOneFile = challengeFiles?.length > 1;\n  return challengeFiles.reduce((fileString, challengeFile) => {\n    if (!challengeFile) {\n      return fileString;\n    }\n\nconst fileExtension = challengeFile.ext;\n    const fileName = challengeFile.name;\n\nlet fileDescription;\n\nif (!moreThanOneFile) {\n      fileDescription = '';\n    } else {\n      switch (fileExtension) {\n        case 'html':\n          fileDescription = `<!-- file: ${fileName}.${fileExtension} -->\\n`;\n          break;\n        default:\n          fileDescription = `/* file: ${fileName}.${fileExtension} */\\n`;\n          break;\n      }\n    }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "0cace245fce902bc7a5c9a5a6bcbdc10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "contents: lines.join('\\n') }; } return file; }); return filesWithEditableRegions; } return challengeFiles; } function editableRegionsToMarkdown(challengeFiles = []) { const moreThanOneFile = challengeFiles?.length > 1; return challengeFiles.reduce((fileString, challengeFile) => { if (!challengeFile) { return fileString; } const fileExtension = challengeFile.ext; const fileName = challengeFile.name; let fileDescription; if (!moreThanOneFile) { fileDescription = ''; } else { switch (fileExtension) { case 'html': fileDescription = `<!-- file: ${fileName}.${fileExtension} -->\\n`; break; default: fileDescription = `/* file: ${fileName}.${fileExtension} */\\n`; break; } }\n\nconst [start, end] = challengeFile.editableRegionBoundaries;\n    const lines = challengeFile.contents.split('\\n');\n    const editableRegion = lines.slice(start + 1, end + 4).join('\\n');\n\nreturn `${fileString}\\`\\`\\`${fileExtension}\\n${fileDescription}${editableRegion}\\n\\`\\`\\`\\n\\n`;\n  }, '\\n');\n}\n\nfunction linksOrMarkdown(projectFormValues, markdown) {\n  return (\n    projectFormValues\n      ?.map(([key, val]) => `${key}: ${transformEditorLink(val)}\\n\\n`)\n      ?.join('') || markdown\n  );\n}\n\nfunction createQuestionEpic(action$, state$, { window }) {\n  return action$.pipe(\n    ofType(actionTypes.createQuestion),\n    tap(({ payload: describe }) => {\n      const state = state$.value;\n      let challengeFiles = challengeFilesSelector(state);\n      const {\n        title: challengeTitle,\n        superBlock,\n        block,\n        helpCategory,\n        challengeType\n      } = challengeMetaSelector(state);\n\nchallengeFiles = insertEditableRegions(challengeFiles);\n\nconst nonCodeChallenges = [\n        challengeTypes.fillInTheBlank,\n        challengeTypes.exam,\n        challengeTypes.multipleChoice,\n        challengeTypes.video,\n        challengeTypes.dialogue,\n        challengeTypes.msTrophy,\n        challengeTypes.quiz\n      ];\n\nconst {\n        navigator: { userAgent },\n        location: { pathname, origin }\n      } = window;\n      // Removes query params\n      const challengeUrl = new URL(pathname, origin).href;\n      const projectFormValues = Object.entries(\n        projectFormValuesSelector(state)\n      );",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "079c91ad2a4c509952da8cb4cce7b487",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "window }) { return action$.pipe( ofType(actionTypes.createQuestion), tap(({ payload: describe }) => { const state = state$.value; let challengeFiles = challengeFilesSelector(state); const { title: challengeTitle, superBlock, block, helpCategory, challengeType } = challengeMetaSelector(state); challengeFiles = insertEditableRegions(challengeFiles); const nonCodeChallenges = [ challengeTypes.fillInTheBlank, challengeTypes.exam, challengeTypes.multipleChoice, challengeTypes.video, challengeTypes.dialogue, challengeTypes.msTrophy, challengeTypes.quiz ]; const { navigator: { userAgent }, location: { pathname, origin } } = window; // Removes query params const challengeUrl = new URL(pathname, origin).href; const projectFormValues = Object.entries( projectFormValuesSelector(state) );\n\nconst browserInfoHeading = i18next.t('forum-help.browser-info');\n      const userAgentHeading = i18next.t('forum-help.user-agent', {\n        userAgent\n      });\n      const challengeHeading = i18next.t('forum-help.challenge');\n      const blockTitle = i18next.t(`intro:${superBlock}.blocks.${block}.title`);\n      const endingText = `### ${browserInfoHeading}\\n\\n${userAgentHeading}\\n\\n### ${challengeHeading}\\n${blockTitle} - ${challengeTitle}\\n${challengeUrl}`;\n\nconst camperCodeHeading = nonCodeChallenges.includes(challengeType)\n        ? ''\n        : '### ' + i18next.t('forum-help.camper-code') + '\\n\\n';\n\nconst whatsHappeningHeading = i18next.t('forum-help.whats-happening');\n      const projectOrCodeHeading = projectFormValues.length\n        ? `###${i18next.t('forum-help.camper-project')}\\n\\n`\n        : camperCodeHeading;\n\nconst fullCode = filesToMarkdown(challengeFiles);\n      const fullCodeOrLinks = linksOrMarkdown(projectFormValues, fullCode);\n\nconst onlyEditableRegion = editableRegionsToMarkdown(challengeFiles);\n      const editableRegionOrLinks = linksOrMarkdown(\n        projectFormValues,\n        onlyEditableRegion\n      );",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "7bba5f75ee2d07188ae152e09e5ef23e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "= Object.entries( projectFormValuesSelector(state) ); const browserInfoHeading = i18next.t('forum-help.browser-info'); const userAgentHeading = i18next.t('forum-help.user-agent', { userAgent }); const challengeHeading = i18next.t('forum-help.challenge'); const blockTitle = i18next.t(`intro:${superBlock}.blocks.${block}.title`); const endingText = `### ${browserInfoHeading}\\n\\n${userAgentHeading}\\n\\n### ${challengeHeading}\\n${blockTitle} - ${challengeTitle}\\n${challengeUrl}`; const camperCodeHeading = nonCodeChallenges.includes(challengeType) ? '' : '### ' + i18next.t('forum-help.camper-code') + '\\n\\n'; const whatsHappeningHeading = i18next.t('forum-help.whats-happening'); const projectOrCodeHeading = projectFormValues.length ? `###${i18next.t('forum-help.camper-project')}\\n\\n` : camperCodeHeading; const fullCode = filesToMarkdown(challengeFiles); const fullCodeOrLinks = linksOrMarkdown(projectFormValues, fullCode); const onlyEditableRegion = editableRegionsToMarkdown(challengeFiles); const editableRegionOrLinks = linksOrMarkdown( projectFormValues, onlyEditableRegion );\n\nconst textMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${fullCodeOrLinks}${endingText}`;\n      const textMessageOnlyEditableRegion = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${editableRegionOrLinks}${endingText}`;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "f720d474c48d6b2ae71bbcc182a21a0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "= i18next.t('forum-help.user-agent', { userAgent }); const challengeHeading = i18next.t('forum-help.challenge'); const blockTitle = i18next.t(`intro:${superBlock}.blocks.${block}.title`); const endingText = `### ${browserInfoHeading}\\n\\n${userAgentHeading}\\n\\n### ${challengeHeading}\\n${blockTitle} - ${challengeTitle}\\n${challengeUrl}`; const camperCodeHeading = nonCodeChallenges.includes(challengeType) ? '' : '### ' + i18next.t('forum-help.camper-code') + '\\n\\n'; const whatsHappeningHeading = i18next.t('forum-help.whats-happening'); const projectOrCodeHeading = projectFormValues.length ? `###${i18next.t('forum-help.camper-project')}\\n\\n` : camperCodeHeading; const fullCode = filesToMarkdown(challengeFiles); const fullCodeOrLinks = linksOrMarkdown(projectFormValues, fullCode); const onlyEditableRegion = editableRegionsToMarkdown(challengeFiles); const editableRegionOrLinks = linksOrMarkdown( projectFormValues, onlyEditableRegion ); const textMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${fullCodeOrLinks}${endingText}`; const textMessageOnlyEditableRegion = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${editableRegionOrLinks}${endingText}`;\n\nconst warning = i18next.t('forum-help.warning');\n      const tooLongOne = i18next.t('forum-help.too-long-one');\n      const tooLongTwo = i18next.t('forum-help.too-long-two');\n      const tooLongThree = i18next.t('forum-help.too-long-three');\n      const addCodeOne = i18next.t('forum-help.add-code-one');\n      const addCodeTwo = i18next.t('forum-help.add-code-two');\n      const addCodeThree = i18next.t('forum-help.add-code-three');\n      const altTextMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${camperCodeHeading}\\n\\n${warning}\\n\\n${tooLongOne}\\n\\n${tooLongTwo}\\n\\n${tooLongThree}\\n\\n\\`\\`\\`text\\n${addCodeOne}\\n${addCodeTwo}\\n${addCodeThree}\\n\\`\\`\\`\\n\\n${endingText}`;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "337a9801fe2285ce4ce19579d40a022b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "'\\n\\n'; const whatsHappeningHeading = i18next.t('forum-help.whats-happening'); const projectOrCodeHeading = projectFormValues.length ? `###${i18next.t('forum-help.camper-project')}\\n\\n` : camperCodeHeading; const fullCode = filesToMarkdown(challengeFiles); const fullCodeOrLinks = linksOrMarkdown(projectFormValues, fullCode); const onlyEditableRegion = editableRegionsToMarkdown(challengeFiles); const editableRegionOrLinks = linksOrMarkdown( projectFormValues, onlyEditableRegion ); const textMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${fullCodeOrLinks}${endingText}`; const textMessageOnlyEditableRegion = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${editableRegionOrLinks}${endingText}`; const warning = i18next.t('forum-help.warning'); const tooLongOne = i18next.t('forum-help.too-long-one'); const tooLongTwo = i18next.t('forum-help.too-long-two'); const tooLongThree = i18next.t('forum-help.too-long-three'); const addCodeOne = i18next.t('forum-help.add-code-one'); const addCodeTwo = i18next.t('forum-help.add-code-two'); const addCodeThree = i18next.t('forum-help.add-code-three'); const altTextMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${camperCodeHeading}\\n\\n${warning}\\n\\n${tooLongOne}\\n\\n${tooLongTwo}\\n\\n${tooLongThree}\\n\\n\\`\\`\\`text\\n${addCodeOne}\\n${addCodeTwo}\\n${addCodeThree}\\n\\`\\`\\`\\n\\n${endingText}`;\n\nconst titleText = window.encodeURIComponent(\n        `${i18next.t(\n          `intro:${superBlock}.blocks.${block}.title`\n        )} - ${challengeTitle}`\n      );\n\nconst category = window.encodeURIComponent(\n        i18next.t('links:help.' + helpCategory || 'Help')\n      );\n\nconst studentCode = window.encodeURIComponent(textMessage);\n      const editableRegionCode = window.encodeURIComponent(\n        textMessageOnlyEditableRegion\n      );\n      const altStudentCode = window.encodeURIComponent(altTextMessage);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "6f7a379614ddfbd60efc5637cd9d5a1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "textMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${fullCodeOrLinks}${endingText}`; const textMessageOnlyEditableRegion = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${projectOrCodeHeading}${editableRegionOrLinks}${endingText}`; const warning = i18next.t('forum-help.warning'); const tooLongOne = i18next.t('forum-help.too-long-one'); const tooLongTwo = i18next.t('forum-help.too-long-two'); const tooLongThree = i18next.t('forum-help.too-long-three'); const addCodeOne = i18next.t('forum-help.add-code-one'); const addCodeTwo = i18next.t('forum-help.add-code-two'); const addCodeThree = i18next.t('forum-help.add-code-three'); const altTextMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${camperCodeHeading}\\n\\n${warning}\\n\\n${tooLongOne}\\n\\n${tooLongTwo}\\n\\n${tooLongThree}\\n\\n\\`\\`\\`text\\n${addCodeOne}\\n${addCodeTwo}\\n${addCodeThree}\\n\\`\\`\\`\\n\\n${endingText}`; const titleText = window.encodeURIComponent( `${i18next.t( `intro:${superBlock}.blocks.${block}.title` )} - ${challengeTitle}` ); const category = window.encodeURIComponent( i18next.t('links:help.' + helpCategory || 'Help') ); const studentCode = window.encodeURIComponent(textMessage); const editableRegionCode = window.encodeURIComponent( textMessageOnlyEditableRegion ); const altStudentCode = window.encodeURIComponent(altTextMessage);\n\nconst baseURI = `${forumLocation}/new-topic?category=${category}&title=${titleText}&body=`;\n      const defaultURI = `${baseURI}${studentCode}`;\n      const onlyEditableRegionURI = `${baseURI}${editableRegionCode}`;\n      const altURI = `${baseURI}${altStudentCode}`;\n\nlet URIToOpen = defaultURI;\n      if (defaultURI.length > 8000) {\n        URIToOpen = onlyEditableRegionURI;\n      }\n      if (onlyEditableRegionURI.length > 8000) {\n        URIToOpen = altURI;\n      }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "ab95e799badb05f6f0f0f4a3b5de33fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
    "source_type": "git_repo",
    "title": "create-question-epic",
    "content": "altTextMessage = `### ${whatsHappeningHeading}\\n${describe}\\n\\n${camperCodeHeading}\\n\\n${warning}\\n\\n${tooLongOne}\\n\\n${tooLongTwo}\\n\\n${tooLongThree}\\n\\n\\`\\`\\`text\\n${addCodeOne}\\n${addCodeTwo}\\n${addCodeThree}\\n\\`\\`\\`\\n\\n${endingText}`; const titleText = window.encodeURIComponent( `${i18next.t( `intro:${superBlock}.blocks.${block}.title` )} - ${challengeTitle}` ); const category = window.encodeURIComponent( i18next.t('links:help.' + helpCategory || 'Help') ); const studentCode = window.encodeURIComponent(textMessage); const editableRegionCode = window.encodeURIComponent( textMessageOnlyEditableRegion ); const altStudentCode = window.encodeURIComponent(altTextMessage); const baseURI = `${forumLocation}/new-topic?category=${category}&title=${titleText}&body=`; const defaultURI = `${baseURI}${studentCode}`; const onlyEditableRegionURI = `${baseURI}${editableRegionCode}`; const altURI = `${baseURI}${altStudentCode}`; let URIToOpen = defaultURI; if (defaultURI.length > 8000) { URIToOpen = onlyEditableRegionURI; } if (onlyEditableRegionURI.length > 8000) { URIToOpen = altURI; }\n\nwindow.open(URIToOpen, '_blank');\n    }),\n    mapTo(closeModal('help'))\n  );\n}\n\nexport default createQuestionEpic;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\create-question-epic.js",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "0e9fd4aebc644b5a22bef7e3b921df22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.test.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga.test",
    "content": "import { expectSaga } from 'redux-saga-test-plan';\n\njest.mock('redux-saga/effects', () => ({\n  ...jest.requireActual('redux-saga/effects'),\n  delay: jest.fn()\n}));\n\nconst initialState = {\n  challenge: { isBuildEnabled: true, isExecuting: false, challengeMeta: {} }\n};\n\n// We're not testing the reducer here, so just return the initial state\nfunction reducer(state = initialState) {\n  return state;\n}\n\nimport { previewChallengeSaga } from './execute-challenge-saga';\n\nconst challengeMounted = { type: 'challenge.challengeMounted' };\nconst previewMounted = { type: 'challenge.previewMounted' };\nconst resetChallenge = { type: 'challenge.resetChallenge' };\n\ndescribe('execute-challenge-saga', () => {\n  it('flushes logs on challengeMounted', () => {\n    return expectSaga(previewChallengeSaga, challengeMounted)\n      .withReducer(reducer)\n      .put({ type: 'challenge.initLogs' })\n      .silentRun();\n    // TODO: figure out why silentRun is necessary. Without it, we get timeout\n    // warnings. Increasing the timeout just makes the tests take longer.\n  });\n  it('flushes logs on reset', () => {\n    return expectSaga(previewChallengeSaga, resetChallenge)\n      .withReducer(reducer)\n      .put({ type: 'challenge.initLogs' })\n      .silentRun();\n  });\n  it('does not flush logs on previewMounted', () => {\n    return expectSaga(previewChallengeSaga, previewMounted)\n      .withReducer(reducer)\n      .not.put({ type: 'challenge.initLogs' })\n      .silentRun();\n  });\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1473,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.test.js",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f3711fa31f3a37c2d992f8a0b13492ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "import i18next from 'i18next';\nimport { escape } from 'lodash-es';\nimport { channel } from 'redux-saga';\nimport {\n  call,\n  cancel,\n  delay,\n  fork,\n  getContext,\n  put,\n  select,\n  take,\n  takeEvery,\n  takeLatest\n} from 'redux-saga/effects';\n\nimport {\n  canSaveToDB,\n  challengeTypes\n} from '../../../../../shared/config/challenge-types';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport {\n  bodySizeFits,\n  getStringSizeInBytes,\n  MAX_BODY_SIZE,\n  standardizeRequestBody\n} from '../../../utils/challenge-request-helpers';\nimport { playTone } from '../../../utils/tone';\nimport {\n  buildChallenge,\n  canBuildChallenge,\n  challengeHasPreview,\n  getTestRunner,\n  isJavaScriptChallenge,\n  updatePreview,\n  updateProjectPreview\n} from '../utils/build';\nimport {\n  interruptCodeExecution,\n  runPythonCode\n} from '../utils/python-worker-handler';\nimport { fireConfetti } from '../../../utils/fire-confetti';\nimport callGA from '../../../analytics/call-ga';\nimport { actionTypes } from './action-types';\nimport {\n  disableBuildOnError,\n  executeChallengeComplete,\n  initConsole,\n  initLogs,\n  logsToConsole,\n  openModal,\n  updateConsole,\n  updateLogs,\n  updateTests\n} from './actions';\nimport {\n  challengeDataSelector,\n  challengeMetaSelector,\n  challengeTestsSelector,\n  challengeHooksSelector,\n  isBuildEnabledSelector,\n  isExecutingSelector,\n  portalDocumentSelector,\n  isBlockNewlyCompletedSelector\n} from './selectors';\n\n// How long before bailing out of a preview.\nconst previewTimeout = 2500;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "2115576a333a60e90aa3900ad15f53f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "'../../../utils/tone'; import { buildChallenge, canBuildChallenge, challengeHasPreview, getTestRunner, isJavaScriptChallenge, updatePreview, updateProjectPreview } from '../utils/build'; import { interruptCodeExecution, runPythonCode } from '../utils/python-worker-handler'; import { fireConfetti } from '../../../utils/fire-confetti'; import callGA from '../../../analytics/call-ga'; import { actionTypes } from './action-types'; import { disableBuildOnError, executeChallengeComplete, initConsole, initLogs, logsToConsole, openModal, updateConsole, updateLogs, updateTests } from './actions'; import { challengeDataSelector, challengeMetaSelector, challengeTestsSelector, challengeHooksSelector, isBuildEnabledSelector, isExecutingSelector, portalDocumentSelector, isBlockNewlyCompletedSelector } from './selectors'; // How long before bailing out of a preview. const previewTimeout = 2500;\n\nconst LOGS_TO_IGNORE = [\n  // https://cdn.tailwindcss.com\n  'cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation',\n  // https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4\n  'The browser build of Tailwind CSS should not be used in production. To use Tailwind CSS in production, use the Tailwind CLI, Vite plugin, or PostCSS plugin: https://tailwindcss.com/docs/installation'\n];\n\n// when 'run tests' is clicked, do this first\nfunction* executeCancellableChallengeSaga(payload) {\n  const { challengeType, id } = yield select(challengeMetaSelector);\n  const { challengeFiles } = yield select(challengeDataSelector);\n\n// if canSaveToDB, see if body/code size is submittable\n  if (canSaveToDB(challengeType)) {\n    const body = standardizeRequestBody({ id, challengeFiles, challengeType });\n    const bodySizeInBytes = getStringSizeInBytes(body);\n\nif (!bodySizeFits(bodySizeInBytes)) {\n      return yield put(\n        createFlashMessage({\n          type: 'danger',\n          message: FlashMessages.ChallengeSubmitTooBig,\n          variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes }\n        })\n      );\n    }\n  }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "4d9cdeafe01670f73c4dc25dd5ec0514",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "plugin: https://tailwindcss.com/docs/installation' ]; // when 'run tests' is clicked, do this first function* executeCancellableChallengeSaga(payload) { const { challengeType, id } = yield select(challengeMetaSelector); const { challengeFiles } = yield select(challengeDataSelector); // if canSaveToDB, see if body/code size is submittable if (canSaveToDB(challengeType)) { const body = standardizeRequestBody({ id, challengeFiles, challengeType }); const bodySizeInBytes = getStringSizeInBytes(body); if (!bodySizeFits(bodySizeInBytes)) { return yield put( createFlashMessage({ type: 'danger', message: FlashMessages.ChallengeSubmitTooBig, variables: { 'max-size': MAX_BODY_SIZE, 'user-size': bodySizeInBytes } }) ); } }\n\n// executeChallenge with payload containing {showCompletionModal}\n  const task = yield fork(executeChallengeSaga, payload);\n\nyield take(actionTypes.cancelTests);\n  yield cancel(task);\n}\n\nexport function* executeChallengeSaga({ payload }) {\n  const isBuildEnabled = yield select(isBuildEnabledSelector);\n  if (!isBuildEnabled) {\n    return;\n  }\n\nconst consoleProxy = yield channel();\n\ntry {\n    yield put(initLogs());\n    yield put(initConsole(i18next.t('learn.running-tests')));\n    // reset tests to initial state\n    const tests = (yield select(challengeTestsSelector)).map(\n      ({ text, testString }) => ({ text, testString, running: true })\n    );\n    const hooks = yield select(challengeHooksSelector);\n    yield put(updateTests(tests));\n\nconst challengeData = yield select(challengeDataSelector);\n    const challengeMeta = yield select(challengeMetaSelector);\n    // The buildData is used even if there are build errors, so that lessons\n    // with syntax errors can be tested.\n    const buildData = yield buildChallengeData(challengeData, {\n      preview: false,\n      disableLoopProtectTests: challengeMeta.disableLoopProtectTests,\n      disableLoopProtectPreview: challengeMeta.disableLoopProtectPreview,\n      usesTestRunner: true\n    });\n    const testRunner = yield call(getTestRunner, { ...buildData, hooks });\n    const testResults = yield executeTests(testRunner, tests);\n    yield put(updateTests(testResults));",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "566382ec8d5e3b50666802695250fe2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "text, testString, running: true }) ); const hooks = yield select(challengeHooksSelector); yield put(updateTests(tests)); const challengeData = yield select(challengeDataSelector); const challengeMeta = yield select(challengeMetaSelector); // The buildData is used even if there are build errors, so that lessons // with syntax errors can be tested. const buildData = yield buildChallengeData(challengeData, { preview: false, disableLoopProtectTests: challengeMeta.disableLoopProtectTests, disableLoopProtectPreview: challengeMeta.disableLoopProtectPreview, usesTestRunner: true }); const testRunner = yield call(getTestRunner, { ...buildData, hooks }); const testResults = yield executeTests(testRunner, tests); yield put(updateTests(testResults));\n\nconst challengeComplete = testResults.every(test => test.pass && !test.err);\n    const isBlockCompleted = yield select(isBlockNewlyCompletedSelector);\n    if (challengeComplete) {\n      playTone('tests-completed');\n      if (isBlockCompleted) {\n        fireConfetti();\n      }\n    } else {\n      playTone('tests-failed');\n      if (challengeMeta.certification === 'responsive-web-design') {\n        yield call(callGA, {\n          event: 'challenge_failed',\n          challenge_id: challengeMeta.id,\n          challenge_path: window?.location?.pathname,\n          challenge_files: challengeData.challengeFiles\n        });\n      }\n    }\n\nif (challengeComplete && payload?.showCompletionModal) {\n      yield put(openModal('completion'));\n    }\n    yield put(updateConsole(i18next.t('learn.tests-completed')));\n    yield put(logsToConsole(i18next.t('learn.console-output')));\n  } catch (e) {\n    yield put(updateConsole(e));\n  } finally {\n    yield put(executeChallengeComplete());\n    consoleProxy.close();\n  }\n}\n\nfunction* takeEveryConsole(channel) {\n  // TODO: move all stringifying and escaping into the reducer so there is a\n  // single place responsible for formatting the console output.\n  yield takeEvery(channel, function* (args) {\n    yield put(updateConsole(escape(args)));\n  });\n}\n\nfunction* buildChallengeData(challengeData, options) {\n  try {\n    return yield call(buildChallenge, challengeData, options);\n  } catch (e) {\n    yield put(disableBuildOnError());\n    throw e;\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "f48ff3870fe3ec26a9832a254d8d8393",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "put(openModal('completion')); } yield put(updateConsole(i18next.t('learn.tests-completed'))); yield put(logsToConsole(i18next.t('learn.console-output'))); } catch (e) { yield put(updateConsole(e)); } finally { yield put(executeChallengeComplete()); consoleProxy.close(); } } function* takeEveryConsole(channel) { // TODO: move all stringifying and escaping into the reducer so there is a // single place responsible for formatting the console output. yield takeEvery(channel, function* (args) { yield put(updateConsole(escape(args))); }); } function* buildChallengeData(challengeData, options) { try { return yield call(buildChallenge, challengeData, options); } catch (e) { yield put(disableBuildOnError()); throw e; } }\n\nfunction* executeTests(testRunner, tests, testTimeout = 5000) {\n  const testResults = [];\n  for (let i = 0; i < tests.length; i++) {\n    const { text, testString } = tests[i];\n    const newTest = { text, testString, running: false };\n    // only the first test outputs console.logs to avoid log duplication.\n    const firstTest = i === 0;\n    try {\n      const {\n        pass,\n        err,\n        logs = []\n      } = yield call(testRunner, testString, testTimeout);\n\nconst logString = logs.map(log => log.msg).join('\\n');\n      if (firstTest && logString) {\n        yield put(updateLogs(logString));\n      }\n\nif (pass) {\n        newTest.pass = true;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      const { actual, expected, type } = err;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "8dc82c7276f10c47484e0d2419ea91b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "{ text, testString, running: false }; // only the first test outputs console.logs to avoid log duplication. const firstTest = i === 0; try { const { pass, err, logs = [] } = yield call(testRunner, testString, testTimeout); const logString = logs.map(log => log.msg).join('\\n'); if (firstTest && logString) { yield put(updateLogs(logString)); } if (pass) { newTest.pass = true; } else { throw err; } } catch (err) { const { actual, expected, type } = err;\n\nnewTest.message = text\n        .replace('--fcc-expected--', expected)\n        .replace('--fcc-actual--', actual);\n      if (err === 'timeout') {\n        newTest.err = 'Test timed out';\n        newTest.message = `${newTest.message} (${newTest.err})`;\n      } else if (type === 'IndentationError' || type === 'SyntaxError') {\n        const msgKey =\n          type === 'IndentationError'\n            ? 'learn.indentation-error'\n            : 'learn.syntax-error';\n        newTest.message = `<p>${i18next.t(msgKey)}</p>`;\n      } else {\n        const { message, stack } = err;\n        newTest.err = message + '\\n' + stack;\n        newTest.stack = stack;\n      }\n\nconst withIndex = newTest.message.replace(/<p>/, `<p>${i + 1}. `);\n      yield put(updateConsole(withIndex));\n    } finally {\n      testResults.push(newTest);\n    }\n  }\n  return testResults;\n}\n\n// updates preview frame and the fcc console.\nexport function* previewChallengeSaga(action) {\n  const flushLogs = action?.type !== actionTypes.previewMounted;\n  const isBuildEnabled = yield select(isBuildEnabledSelector);\n  if (!isBuildEnabled) {\n    return;\n  }\n\nconst isExecuting = yield select(isExecutingSelector);\n  // executeChallengeSaga flushes the logs, so there's no need to if that's\n  // just happened.\n  if (flushLogs && !isExecuting) {\n    yield put(initLogs());\n    yield put(initConsole(''));\n  }\n  yield delay(700);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "ea5a94302a1a2a27a9603f3b656af4ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "newTest.message.replace(/<p>/, `<p>${i + 1}. `); yield put(updateConsole(withIndex)); } finally { testResults.push(newTest); } } return testResults; } // updates preview frame and the fcc console. export function* previewChallengeSaga(action) { const flushLogs = action?.type !== actionTypes.previewMounted; const isBuildEnabled = yield select(isBuildEnabledSelector); if (!isBuildEnabled) { return; } const isExecuting = yield select(isExecutingSelector); // executeChallengeSaga flushes the logs, so there's no need to if that's // just happened. if (flushLogs && !isExecuting) { yield put(initLogs()); yield put(initConsole('')); } yield delay(700);\n\nconst logProxy = yield channel();\n  const proxyLogger = args => {\n    if (!LOGS_TO_IGNORE.some(msg => args === msg)) {\n      logProxy.put(args);\n    }\n  };\n\ntry {\n    yield fork(takeEveryConsole, logProxy);\n\nconst challengeData = yield select(challengeDataSelector);\n\nif (canBuildChallenge(challengeData)) {\n      const challengeMeta = yield select(challengeMetaSelector);\n      const buildData = yield buildChallengeData(challengeData, {\n        preview: true,\n        disableLoopProtectTests: challengeMeta.disableLoopProtectTests,\n        disableLoopProtectPreview: challengeMeta.disableLoopProtectPreview\n      });\n      // If there's an error building the challenge then throwing it here will\n      // let the user know there's a problem.\n      if (buildData.error) throw buildData.error;\n\n// evaluate the user code in the preview frame or in the worker\n      if (challengeHasPreview(challengeData)) {\n        const document = yield getContext('document');\n        const portalDocument = yield select(portalDocumentSelector);\n        const finalDocument = portalDocument || document;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "ebc4897bc346244e07a6e12f23263335",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "{ const challengeMeta = yield select(challengeMetaSelector); const buildData = yield buildChallengeData(challengeData, { preview: true, disableLoopProtectTests: challengeMeta.disableLoopProtectTests, disableLoopProtectPreview: challengeMeta.disableLoopProtectPreview }); // If there's an error building the challenge then throwing it here will // let the user know there's a problem. if (buildData.error) throw buildData.error; // evaluate the user code in the preview frame or in the worker if (challengeHasPreview(challengeData)) { const document = yield getContext('document'); const portalDocument = yield select(portalDocumentSelector); const finalDocument = portalDocument || document;\n\n// Python challenges do not use the preview frame, they use a web worker\n        // to run the code. The UI is handled by the xterm component, so there\n        // is no need to update the preview frame.\n        if (\n          challengeData.challengeType === challengeTypes.python ||\n          challengeData.challengeType ===\n            challengeTypes.multifilePythonCertProject ||\n          challengeData.challengeType === challengeTypes.pyLab ||\n          challengeData.challengeType === challengeTypes.dailyChallengePy\n        ) {\n          yield updatePython(challengeData);\n        } else {\n          yield call(updatePreview, buildData, finalDocument, proxyLogger);\n        }\n      } else if (isJavaScriptChallenge(challengeData)) {\n        const runUserCode = yield call(getTestRunner, buildData);\n        // without a testString the testRunner just evaluates the user's code\n        const out = yield call(runUserCode, null, previewTimeout);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "3e4cb8d823892629c7afefc280242f15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "is handled by the xterm component, so there // is no need to update the preview frame. if ( challengeData.challengeType === challengeTypes.python || challengeData.challengeType === challengeTypes.multifilePythonCertProject || challengeData.challengeType === challengeTypes.pyLab || challengeData.challengeType === challengeTypes.dailyChallengePy ) { yield updatePython(challengeData); } else { yield call(updatePreview, buildData, finalDocument, proxyLogger); } } else if (isJavaScriptChallenge(challengeData)) { const runUserCode = yield call(getTestRunner, buildData); // without a testString the testRunner just evaluates the user's code const out = yield call(runUserCode, null, previewTimeout);\n\nif (out) {\n          const logs = out.logs?.filter(\n            log => !LOGS_TO_IGNORE.some(msg => log.msg === msg)\n          );\n          yield put(updateConsole(logs?.map(log => log.msg).join('\\n')));\n        }\n      }\n    }\n  } catch (err) {\n    if (err[0] === 'timeout') {\n      // TODO: translate the error\n      err[0] = `The code you have written is taking longer than the ${previewTimeout}ms our challenges allow. You may have created an infinite loop or need to write a more efficient algorithm`;\n    }\n    // If the preview fails, the most useful thing to do is to show the learner\n    // what the error is. As such, we replace whatever is in the console with\n    // the error message.\n    yield put(initConsole(escape(err)));\n  }\n}\n\n// TODO: refactor this so that we can use a single saga for all challenge\n// updates (then they can all go in the same `takeLatest` call and be cancelled\n// appropriately)\nfunction* updatePreviewSaga(action) {\n  const challengeData = yield select(challengeDataSelector);\n  if (\n    challengeData.challengeType === challengeTypes.python ||\n    challengeData.challengeType === challengeTypes.multifilePythonCertProject ||\n    challengeData.challengeType === challengeTypes.pyLab ||\n    challengeData.challengeType === challengeTypes.dailyChallengePy\n  ) {\n    yield updatePython(challengeData);\n  } else {\n    // all other challenges have to recreate the preview\n    yield previewChallengeSaga(action);\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "a4e493d42472692ec1896f20a52d9f80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
    "source_type": "git_repo",
    "title": "execute-challenge-saga",
    "content": "TODO: refactor this so that we can use a single saga for all challenge // updates (then they can all go in the same `takeLatest` call and be cancelled // appropriately) function* updatePreviewSaga(action) { const challengeData = yield select(challengeDataSelector); if ( challengeData.challengeType === challengeTypes.python || challengeData.challengeType === challengeTypes.multifilePythonCertProject || challengeData.challengeType === challengeTypes.pyLab || challengeData.challengeType === challengeTypes.dailyChallengePy ) { yield updatePython(challengeData); } else { // all other challenges have to recreate the preview yield previewChallengeSaga(action); } }\n\nfunction* updatePython(challengeData) {\n  // TODO: refactor the build pipeline so that we have discrete, composable\n  // functions to handle transforming code, embedding it and building the\n  // final html. Then we can just use the transformation function here.\n  const buildData = yield buildChallengeData(challengeData);\n  interruptCodeExecution();\n  const code = {\n    contents: buildData.sources.index,\n    editableContents: buildData.sources.editableContents\n  };\n\nrunPythonCode(code);\n  // TODO: proxy errors to the console\n}\n\nfunction* previewProjectSolutionSaga({ payload }) {\n  if (!payload?.challengeData) return;\n  const { challengeData } = payload;\n\ntry {\n    if (canBuildChallenge(challengeData)) {\n      const buildData = yield buildChallengeData(challengeData);\n      if (buildData.error) throw Error(buildData.error);\n\nif (challengeHasPreview(challengeData)) {\n        const document = yield getContext('document');\n        yield call(updateProjectPreview, buildData, document);\n      } else {\n        throw Error('Project does not have a preview');\n      }\n    }\n  } catch (err) {\n    console.error('Unable to show project preview');\n    console.error(err);\n  }\n}\n\nexport function createExecuteChallengeSaga(types) {\n  return [\n    takeLatest(types.executeChallenge, executeCancellableChallengeSaga),\n    takeLatest(types.updateFile, updatePreviewSaga),\n    takeLatest(\n      [types.challengeMounted, types.resetChallenge, types.previewMounted],\n      previewChallengeSaga\n    ),\n    takeLatest(types.projectPreviewMounted, previewProjectSolutionSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 13100,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\execute-challenge-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "fecdedaa681f65b62f1af358bc3941d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "import { isEmpty } from 'lodash-es';\nimport { handleActions } from 'redux-actions';\n\nimport { getLines } from '../../../../../shared/utils/get-lines';\nimport { getTargetEditor } from '../utils/get-target-editor';\nimport { actionTypes, ns } from './action-types';\nimport codeStorageEpic from './code-storage-epic';\nimport completionEpic from './completion-epic';\nimport createQuestionEpic from './create-question-epic';\nimport { createCurrentChallengeSaga } from './current-challenge-saga';\nimport { createExecuteChallengeSaga } from './execute-challenge-saga';\n\nexport { ns };\n\nconst initialState = {\n  canFocusEditor: true,\n  attempts: 0,\n  visibleEditors: {},\n  challengeFiles: [],\n  challengeMeta: {\n    superBlock: '',\n    block: '',\n    blockHashSlug: '/',\n    blockType: '',\n    id: '',\n    isLastChallengeInBlock: false,\n    nextChallengePath: '/',\n    prevChallengePath: '/',\n    challengeType: -1\n  },\n  challengeTests: [],\n  consoleOut: [],\n  userCompletedExam: null,\n  hasCompletedBlock: false,\n  isBuildEnabled: true,\n  isExecuting: false,\n  isResetting: false,\n  logsOut: [],\n  modal: {\n    completion: false,\n    help: false,\n    video: false,\n    reset: false,\n    exitExam: false,\n    finishExam: false,\n    exitQuiz: false,\n    finishQuiz: false,\n    examResults: false,\n    survey: false,\n    projectPreview: false,\n    shortcuts: false\n  },\n  portalWindow: null,\n  showPreviewPortal: false,\n  showPreviewPane: true,\n  projectFormValues: {},\n  successMessage: 'Happy Coding!',\n  isAdvancing: false,\n  chapterSlug: '',\n  isSubmitting: false\n};\n\nexport const epics = [completionEpic, createQuestionEpic, codeStorageEpic];\n\nexport const sagas = [\n  ...createExecuteChallengeSaga(actionTypes),\n  ...createCurrentChallengeSaga(actionTypes)\n]; export const reducer = handleActions(\n  {\n    [actionTypes submitChallenge]: state => ({ state,\n      isSubmitting: true\n    }),\n    [actionTypes submitChallengeComplete]: state => ({ state,\n      isSubmitting: false\n    }),\n    [actionTypes submitChallengeError]: state => ({",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c95f411dbbc1db92542a722e90b71bf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "false, exitQuiz: false, finishQuiz: false, examResults: false, survey: false, projectPreview: false, shortcuts: false }, portalWindow: null, showPreviewPortal: false, showPreviewPane: true, projectFormValues: {}, successMessage: 'Happy Coding!', isAdvancing: false, chapterSlug: '', isSubmitting: false }; export const epics = [completionEpic, createQuestionEpic, codeStorageEpic]; export const sagas = [ ...createExecuteChallengeSaga(actionTypes), ...createCurrentChallengeSaga(actionTypes) ]; export const reducer = handleActions( { [actionTypes submitChallenge]: state => ({ state, isSubmitting: true }), [actionTypes submitChallengeComplete]: state => ({ state, isSubmitting: false }), [actionTypes submitChallengeError]: state => ({state,\n      isSubmitting: false\n    }),\n    [actionTypes createFiles]: (state, { payload }) => ({ state,\n      challengeFiles: payload map(challengeFile => ({ challengeFile,\n        seed: challengeFile contents slice(),\n        editableContents: getLines(\n          challengeFile contents,\n          challengeFile editableRegionBoundaries\n        ),\n        editableRegionBoundaries:\n          challengeFile editableRegionBoundaries slice() [],\n        seedEditableRegionBoundaries:\n          challengeFile editableRegionBoundaries slice() []\n      }))\n    }),\n    [actionTypes updateFile]: (\n      state,\n      { payload: { fileKey, contents, editableRegionBoundaries } }\n    ) => {\n      const updates = {};\n      // if a given part of the payload is null, we leave that part of the state\n      // unchanged\n      if (editableRegionBoundaries == null)\n        updates editableRegionBoundaries = editableRegionBoundaries;\n      if (contents == null) updates contents = contents;\n      if (editableRegionBoundaries == null && contents == null)\n        updates editableContents = getLines(contents, editableRegionBoundaries);\n      return { state,\n        challengeFiles: state challengeFiles map(challengeFile =>\n          challengeFile fileKey === fileKey { challengeFile, updates }\n            : { challengeFile }\n        ),\n        isBuildEnabled: true\n      };\n    },\n    [actionTypes initTests]: (state, { payload }) => ({ state,\n      challengeTests: payload\n    }),\n    [actionTypes initHooks]: (state, { payload }) => ({",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4ebf02ec3aa56412b7c7f52a5dd06f0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "// unchanged if (editableRegionBoundaries == null) updates editableRegionBoundaries = editableRegionBoundaries; if (contents == null) updates contents = contents; if (editableRegionBoundaries == null && contents == null) updates editableContents = getLines(contents, editableRegionBoundaries); return { state, challengeFiles: state challengeFiles map(challengeFile => challengeFile fileKey === fileKey { challengeFile, updates } : { challengeFile } ), isBuildEnabled: true }; }, [actionTypes initTests]: (state, { payload }) => ({ state, challengeTests: payload }), [actionTypes initHooks]: (state, { payload }) => ({state,\n      challengeHooks: payload\n    }),\n    [actionTypes updateTests]: (state, { payload }) => ({ state,\n      challengeTests: payload\n    }),\n    [actionTypes initConsole]: (state, { payload }) => ({ state,\n      consoleOut: payload [payload] : []\n    }),\n    [actionTypes updateConsole]: (state, { payload }) => ({ state,\n      consoleOut: state consoleOut concat(payload)\n    }),\n    [actionTypes initLogs]: state => ({ state,\n      logsOut: []\n    }),\n    [actionTypes updateLogs]: (state, { payload }) => ({ state,\n      logsOut: state logsOut concat(payload)\n    }),\n    [actionTypes logsToConsole]: (state, { payload }) => ({ state,\n      consoleOut: isEmpty(state logsOut) state consoleOut\n        : state consoleOut concat(payload, state logsOut)\n    }),\n    [actionTypes initVisibleEditors]: state => {\n      let persistingVisibleEditors = {};\n      const prevVisibleEditorKeys = Object keys(state visibleEditors);\n      if (prevVisibleEditorKeys length > 1) {\n        // Restore states of relevant visible editors for the current challengeFiles\n        persistingVisibleEditors = prevVisibleEditorKeys filter(editorKey => {\n            return state challengeFiles find(\n              challengeFile => challengeFile fileKey === editorKey\n            );\n          }) reduce((visibleEditors, key) => {\n            visibleEditors[key] = state visibleEditors[key];\n            return visibleEditors;\n          }, {});\n      }\n      return { state,\n        visibleEditors: { persistingVisibleEditors,\n          [getTargetEditor(state challengeFiles)]: true\n        }\n      };\n    },\n    [actionTypes updateChallengeMeta]: (state, { payload }) => ({",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f3c909bb4b6f859a27f9e0d4405be792",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "= {}; const prevVisibleEditorKeys = Object keys(state visibleEditors); if (prevVisibleEditorKeys length > 1) { // Restore states of relevant visible editors for the current challengeFiles persistingVisibleEditors = prevVisibleEditorKeys filter(editorKey => { return state challengeFiles find( challengeFile => challengeFile fileKey === editorKey ); }) reduce((visibleEditors, key) => { visibleEditors[key] = state visibleEditors[key]; return visibleEditors; }, {}); } return { state, visibleEditors: { persistingVisibleEditors, [getTargetEditor(state challengeFiles)]: true } }; }, [actionTypes updateChallengeMeta]: (state, { payload }) => ({state,\n      challengeMeta: { payload }\n    }),\n    [actionTypes resetChallenge]: state => {\n      const challengeFilesReset = state challengeFiles map(challengeFile => ({ challengeFile,\n        contents: challengeFile seed slice(),\n        editableContents: getLines(\n          challengeFile seed,\n          challengeFile seedEditableRegionBoundaries\n        ),\n        editableRegionBoundaries:\n          challengeFile seedEditableRegionBoundaries slice()\n      }));\n      return { state,\n        currentTab: 2,\n        challengeFiles: challengeFilesReset,\n        challengeTests: state challengeTests map(({ text, testString }) => ({\n          text,\n          testString\n        })),\n        consoleOut: [],\n        isResetting: true,\n        attempts: 0\n      };\n    },\n    [actionTypes resetAttempts]: state => ({ state,\n      attempts: 0\n    }),\n    [actionTypes stopResetting]: state => ({ state,\n      isResetting: false\n    }),\n    [actionTypes updateSolutionFormValues]: (state, { payload }) => ({ state,\n      projectFormValues: payload\n    }),\n    [actionTypes disableBuildOnError]: state => ({ state,\n      isBuildEnabled: false\n    }),\n    [actionTypes setShowPreviewPortal]: (state, { payload }) => ({ state,\n      showPreviewPortal: payload\n    }),\n    [actionTypes setShowPreviewPane]: (state, { payload }) => ({ state,\n      showPreviewPane: payload\n    }),\n    [actionTypes storePortalWindow]: (state, { payload }) => ({ state,\n      portalWindow: payload\n    }),\n    [actionTypes removePortalWindow]: state => ({ state,\n      portalWindow: null\n    }),\n    [actionTypes",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f2aded21783801083fbd31b873f1cb57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "[actionTypes stopResetting]: state => ({ state, isResetting: false }), [actionTypes updateSolutionFormValues]: (state, { payload }) => ({ state, projectFormValues: payload }), [actionTypes disableBuildOnError]: state => ({ state, isBuildEnabled: false }), [actionTypes setShowPreviewPortal]: (state, { payload }) => ({ state, showPreviewPortal: payload }), [actionTypes setShowPreviewPane]: (state, { payload }) => ({ state, showPreviewPane: payload }), [actionTypes storePortalWindow]: (state, { payload }) => ({ state, portalWindow: payload }), [actionTypes removePortalWindow]: state => ({ state, portalWindow: null }), [actionTypesupdateSuccessMessage]: (state, { payload }) => ({ state,\n      successMessage: payload\n    }),\n    [actionTypes setIsAdvancing]: (state, { payload }) => ({ state,\n      isAdvancing: payload\n    }),\n    [actionTypes setChapterSlug]: (state, { payload }) => ({ state,\n      chapterSlug: payload\n    }),\n    [actionTypes setUserCompletedExam]: (state, { payload }) => ({ state,\n      userCompletedExam: payload\n    }),\n    [actionTypes closeModal]: (state, { payload }) => ({ state,\n      modal: { state modal,\n        [payload]: false\n      }\n    }),\n    [actionTypes openModal]: (state, { payload }) => ({ state,\n      modal: { state modal,\n        [payload]: true\n      }\n    }),\n    [actionTypes executeChallenge]: state => ({ state,\n      currentTab: 3,\n      attempts: state attempts + 1,\n      isExecuting: true\n    }),\n    [actionTypes executeChallengeComplete]: state => ({ state,\n      isExecuting: false\n    }),\n    [actionTypes setEditorFocusability]: (state, { payload }) => ({ state,\n      canFocusEditor: payload\n    }),\n    [actionTypes toggleVisibleEditor]: (state, { payload }) => {\n      return { state,\n        visibleEditors: { state visibleEditors,\n          [payload]: state visibleEditors[payload]\n        }\n      };\n    },\n    [actionTypes createQuestion]: (state, { payload }) => ({ state,\n      description: payload\n    })\n  },\n  initialState\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 8649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "094ba8666f8386309c5ed28f366a2c9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\awaitable-messenger.ts",
    "source_type": "git_repo",
    "title": "awaitable-messenger",
    "content": "export type Messenger<Message> = {\n  postMessage: (message: Message, options: WindowPostMessageOptions) => void;\n};\n\n/**\n * Sends a message via a messenger (an object containing postMessage) and awaits a response.\n *\n * @template MessageOut - The type of the message being sent.\n * @template MessageIn - The type of the message expected to be returned. Must include a `type` and `value` property.\n * @template Value - The type of the value expected in the response message.\n *\n * @param {Object} params - The parameters for the function.\n * @param {Message} params.messenger - An object cabable of sending messages via postMessage.\n * @param {MessageOut} params.message - The message to send .\n * @param {Function} params.onMessage - A callback function to handle the response.\n * @param {MessageIn} params.onMessage.response - The response message.\n * @param {Function} params.onMessage.resolve - A function which, when called, resolves the promise with its argument.\n * @param {Function} params.onMessage.reject - A function which, when called, rejects the promise with its argument.\n *\n * @returns {Promise<Value>} A promise that resolves with the response value or rejects with an error message.\n */\nexport function awaitResponse<\n  MessageOut,\n  MessageIn extends { type: string; value: Value; error: string },\n  Value\n>({\n  messenger,\n  message,\n  onMessage\n}: {\n  messenger: Messenger<MessageOut>;\n  message: MessageOut;\n  onMessage: (\n    response: MessageIn,\n    onSuccess: (res: Value) => void,\n    onFailure: (err: Error) => void\n  ) => void;\n}): Promise<Value> {\n  return new Promise(\n    (resolve: (res: Value) => void, reject: (err: Error) => void) => {\n      const channel = new MessageChannel();\n      // TODO: Figure out how to ensure the worker is ready and/or handle when it\n      // is not.\n      const id = setTimeout(() => {\n        channel.port1.close();\n        reject(Error('No response from worker'));\n      }, 5000);\n\nchannel.port1.onmessage = (event: MessageEvent<MessageIn>) => {\n        clearTimeout(id);\n        channel.port1.close();\n        onMessage(event.data, resolve, reject);\n      };",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\awaitable-messenger.ts",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7c787fd2b014a1af17b88cadcc0497ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\awaitable-messenger.ts",
    "source_type": "git_repo",
    "title": "awaitable-messenger",
    "content": "=> void, onFailure: (err: Error) => void ) => void; }): Promise<Value> { return new Promise( (resolve: (res: Value) => void, reject: (err: Error) => void) => { const channel = new MessageChannel(); // TODO: Figure out how to ensure the worker is ready and/or handle when it // is not. const id = setTimeout(() => { channel.port1.close(); reject(Error('No response from worker')); }, 5000); channel.port1.onmessage = (event: MessageEvent<MessageIn>) => { clearTimeout(id); channel.port1.close(); onMessage(event.data, resolve, reject); };\n\nmessenger.postMessage(message, {\n        targetOrigin: '*',\n        transfer: [channel.port2]\n      });\n    }\n  );\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 2253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\awaitable-messenger.ts",
      "source_type": "git_repo"
    },
    "token_count": 162,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eb81c9497bbf69a8c0b2fa6ba24355fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "import { createSelector } from 'reselect';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport {\n  completedChallengesSelector,\n  allChallengesInfoSelector,\n  isSignedInSelector,\n  completionStateSelector,\n  completedChallengesIdsSelector,\n  completedDailyCodingChallengesIdsSelector\n} from '../../../redux/selectors';\nimport {\n  getCurrentBlockIds,\n  getCompletedChallengesInBlock,\n  getCompletedPercentage\n} from '../../../utils/get-completion-percentage';\nimport { ns } from './action-types';",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 110,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "8d59e5eb57b8d98f3bcd3ad8fbbc0fc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "import { createSelector } from 'reselect';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport {\n  completedChallengesSelector,\n  allChallengesInfoSelector,\n  isSignedInSelector,\n  completionStateSelector,\n  completedChallengesIdsSelector,\n  completedDailyCodingChallengesIdsSelector\n} from '../../../redux/selectors';\nimport {\n  getCurrentBlockIds,\n  getCompletedChallengesInBlock,\n  getCompletedPercentage\n} from '../../../utils/get-completion-percentage';\nimport { ns } from './action-types';\n\nexport const challengeFilesSelector = state => state[ns].challengeFiles;\nexport const challengeMetaSelector = state => state[ns].challengeMeta;\nexport const challengeHooksSelector = state => state[ns].challengeHooks;\nexport const challengeTestsSelector = state => state[ns].challengeTests;\nexport const consoleOutputSelector = state => {\n  const TRUNCATE_AT = 500000;\n  const out = state[ns].consoleOut?.join('\\n');\n  return out?.length > TRUNCATE_AT\n    ? `${out.substring(0, TRUNCATE_AT)} Logs truncated. See browser console for more`\n    : out;\n};\nexport const isChallengeCompletedSelector = createSelector(\n  [\n    completedChallengesIdsSelector,\n    completedDailyCodingChallengesIdsSelector,\n    challengeMetaSelector\n  ],\n  (ids1, ids2, meta) => [...ids1, ...ids2].includes(meta.id)\n);\nexport const isCodeLockedSelector = state => state[ns].isCodeLocked;\nexport const isCompletionModalOpenSelector = state =>\n  state[ns].modal.completion;\nexport const isHelpModalOpenSelector = state => state[ns].modal.help;\nexport const isVideoModalOpenSelector = state => state[ns].modal.video;\nexport const isResetModalOpenSelector = state => state[ns].modal.reset;\nexport const isExitExamModalOpenSelector = state => state[ns].modal.exitExam;\nexport const isFinishExamModalOpenSelector = state =>\n  state[ns].modal.finishExam;\nexport const isSurveyModalOpenSelector = state => state[ns].modal.survey;\nexport const isExamResultsModalOpenSelector = state =>\n  state[ns].modal.examResults;\nexport const isExitQuizModalOpenSelector = state => state[ns].modal.exitQuiz;\nexport const isFinishQuizModalOpenSelector = state =>\n  state[ns].modal.finishQuiz;\nexport const isProjectPreviewModalOpenSelector = state =>\n  state[ns].modal.projectPreview;\nexport const isShortcutsModalOpenSelector = state => state[ns].modal.shortcuts;\nexport const isSubmittingSelector = state => state[ns].isSubmitting;\nexport const isResettingSelector = state => state[ns].isResetting;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a7177c89205595cc2120b63ef46e2ee5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "const isResetModalOpenSelector = state => state[ns].modal.reset; export const isExitExamModalOpenSelector = state => state[ns].modal.exitExam; export const isFinishExamModalOpenSelector = state => state[ns].modal.finishExam; export const isSurveyModalOpenSelector = state => state[ns].modal.survey; export const isExamResultsModalOpenSelector = state => state[ns].modal.examResults; export const isExitQuizModalOpenSelector = state => state[ns].modal.exitQuiz; export const isFinishQuizModalOpenSelector = state => state[ns].modal.finishQuiz; export const isProjectPreviewModalOpenSelector = state => state[ns].modal.projectPreview; export const isShortcutsModalOpenSelector = state => state[ns].modal.shortcuts; export const isSubmittingSelector = state => state[ns].isSubmitting; export const isResettingSelector = state => state[ns].isResetting;\n\nexport const isBuildEnabledSelector = state => state[ns].isBuildEnabled;\nexport const isExecutingSelector = state => state[ns].isExecuting;\nexport const successMessageSelector = state => state[ns].successMessage;\n\nexport const projectFormValuesSelector = state =>\n  state[ns].projectFormValues || {};\nexport const isAdvancingToChallengeSelector = state => state[ns].isAdvancing;\nexport const chapterSlugSelector = state => state[ns].chapterSlug;\nexport const portalDocumentSelector = state => state[ns].portalWindow?.document;\nexport const portalWindowSelector = state => state[ns].portalWindow;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "920dcf6c6aba988247077d4a78de37bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "= state => state[ns].modal.shortcuts; export const isSubmittingSelector = state => state[ns].isSubmitting; export const isResettingSelector = state => state[ns].isResetting; export const isBuildEnabledSelector = state => state[ns].isBuildEnabled; export const isExecutingSelector = state => state[ns].isExecuting; export const successMessageSelector = state => state[ns].successMessage; export const projectFormValuesSelector = state => state[ns].projectFormValues || {}; export const isAdvancingToChallengeSelector = state => state[ns].isAdvancing; export const chapterSlugSelector = state => state[ns].chapterSlug; export const portalDocumentSelector = state => state[ns].portalWindow?.document; export const portalWindowSelector = state => state[ns].portalWindow;\n\nexport const userCompletedExamSelector = state => state[ns].userCompletedExam;\nexport const challengeDataSelector = state => {\n  const { challengeType } = challengeMetaSelector(state);\n  let challengeData = { challengeType };\n  if (challengeType === challengeTypes.backend) {\n    const { solution: url = {} } = projectFormValuesSelector(state);\n    challengeData = {\n      ...challengeData,\n      url\n    };\n  } else if (\n    challengeType === challengeTypes.backEndProject ||\n    challengeType === challengeTypes.pythonProject\n  ) {\n    const values = projectFormValuesSelector(state);\n    const { solution: url } = values;\n    challengeData = {\n      ...challengeData,\n      ...values,\n      url\n    };\n  } else if (challengeType === challengeTypes.frontEndProject) {\n    challengeData = {\n      ...challengeData,\n      ...projectFormValuesSelector(state)\n    };\n  } else if (\n    challengeType === challengeTypes.html ||\n    challengeType === challengeTypes.modern ||\n    challengeType === challengeTypes.multifileCertProject ||\n    challengeType === challengeTypes.multifilePythonCertProject ||\n    challengeType === challengeTypes.python ||\n    challengeType === challengeTypes.lab ||\n    challengeType === challengeTypes.js ||\n    challengeType === challengeTypes.jsProject ||\n    challengeType === challengeTypes.jsLab ||\n    challengeType === challengeTypes.pyLab ||\n    challengeType === challengeTypes.dailyChallengeJs ||\n    challengeType === challengeTypes.dailyChallengePy\n  ) {\n    const { required = [], template = '' } = challengeMetaSelector(state);\n    challengeData = {\n      ...challengeData,\n      challengeFiles: challengeFilesSelector(state),\n      required,\n      template\n    };\n  }\n  return challengeData;\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a16b31fdfbb1eaf1fc104dd8d160ef03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "else if ( challengeType === challengeTypes.html || challengeType === challengeTypes.modern || challengeType === challengeTypes.multifileCertProject || challengeType === challengeTypes.multifilePythonCertProject || challengeType === challengeTypes.python || challengeType === challengeTypes.lab || challengeType === challengeTypes.js || challengeType === challengeTypes.jsProject || challengeType === challengeTypes.jsLab || challengeType === challengeTypes.pyLab || challengeType === challengeTypes.dailyChallengeJs || challengeType === challengeTypes.dailyChallengePy ) { const { required = [], template = '' } = challengeMetaSelector(state); challengeData = { ...challengeData, challengeFiles: challengeFilesSelector(state), required, template }; } return challengeData; };\n\nexport const currentBlockIdsSelector = createSelector(\n  challengeMetaSelector,\n  allChallengesInfoSelector,\n  (challengeMeta, allChallengesInfo) => {\n    const { block, certification, challengeType } = challengeMeta;\n\nreturn getCurrentBlockIds(\n      allChallengesInfo,\n      block,\n      certification,\n      challengeType\n    );\n  }\n);\n\nexport const completedChallengesInBlockSelector = createSelector(\n  completedChallengesIdsSelector,\n  currentBlockIdsSelector,\n  challengeMetaSelector,\n  (completedChallengesIds, currentBlockIds, { id }) =>\n    getCompletedChallengesInBlock(completedChallengesIds, currentBlockIds, id)\n);\n\nexport const completedPercentageSelector = createSelector(\n  isSignedInSelector,\n  completedChallengesSelector,\n  challengeMetaSelector,\n  currentBlockIdsSelector,\n  (isSignedIn, completedChallenges, { id }, currentBlockIds) => {\n    if (isSignedIn) {\n      const completedPercentage = getCompletedPercentage(\n        completedChallenges.map(node => node.id),\n        currentBlockIds,\n        id\n      );\n      return completedPercentage;\n    } else return 0;\n  }\n);\n\nexport const isBlockNewlyCompletedSelector = state => {\n  const completedPercentage = completedPercentageSelector(state);\n  const completedChallengesIds = completedChallengesIdsSelector(state);\n  const { id } = challengeMetaSelector(state);\n  return completedPercentage === 100 && !completedChallengesIds.includes(id);\n};\n\nexport const isModuleNewlyCompletedSelector = state => {\n  const isBlockNewlyCompleted = isBlockNewlyCompletedSelector(state);\n  const { chapter, module, block } = challengeMetaSelector(state);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a0b38febe80a6946e0a0fde93c47d4c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "(isSignedIn, completedChallenges, { id }, currentBlockIds) => { if (isSignedIn) { const completedPercentage = getCompletedPercentage( completedChallenges.map(node => node.id), currentBlockIds, id ); return completedPercentage; } else return 0; } ); export const isBlockNewlyCompletedSelector = state => { const completedPercentage = completedPercentageSelector(state); const completedChallengesIds = completedChallengesIdsSelector(state); const { id } = challengeMetaSelector(state); return completedPercentage === 100 && !completedChallengesIds.includes(id); }; export const isModuleNewlyCompletedSelector = state => { const isBlockNewlyCompleted = isBlockNewlyCompletedSelector(state); const { chapter, module, block } = challengeMetaSelector(state);\n\nif (!isBlockNewlyCompleted || !chapter || !module) return;\n\nconst completionState = completionStateSelector(state);\n\nconst incompleteBlocksInModule = completionState\n    .find(({ name }) => name === chapter)\n    ?.modules.find(({ name }) => name === module)\n    ?.blocks.filter(({ isCompleted }) => !isCompleted);\n\n// The module is completed if the newly completed block\n  // is the last block that has `isCompleted === false`.\n  return (\n    incompleteBlocksInModule?.length === 1 &&\n    incompleteBlocksInModule.some(({ name }) => name === block)\n  );\n};\n\nexport const attemptsSelector = state => state[ns].attempts;\nexport const canFocusEditorSelector = state => state[ns].canFocusEditor;\nexport const visibleEditorsSelector = state => state[ns].visibleEditors;\nexport const showPreviewPortalSelector = state => state[ns].showPreviewPortal;\nexport const showPreviewPaneSelector = state => state[ns].showPreviewPane;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\redux\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "461799c90dcf0c86b271c3ce7904ebec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\challenge-paths.ts",
    "source_type": "git_repo",
    "title": "challenge-paths",
    "content": "import { NavigationPaths } from '../../../redux/prop-types';\n\nexport const getChallengePaths = ({\n  currentCurriculumPaths\n}: {\n  currentCurriculumPaths: NavigationPaths;\n}): NavigationPaths => {\n  return {\n    nextChallengePath: currentCurriculumPaths.nextChallengePath,\n    prevChallengePath: currentCurriculumPaths.prevChallengePath\n  };\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 344,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\challenge-paths.ts",
      "source_type": "git_repo"
    },
    "token_count": 73,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ef7ca901049e6a37faf738ba181dfc9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "import { challengeTypes } from '../../../../../shared/config/challenge-types';\n\nimport type { ChallengeFile } from '../../../redux/prop-types';\nimport { concatHtml } from '../rechallenge/builders';\nimport {\n  getTransformers,\n  embedFilesInHtml,\n  getPythonTransformers,\n  getMultifileJSXTransformers\n} from '../rechallenge/transformers';\nimport {\n  runTestInTestFrame,\n  createMainPreviewFramer,\n  createProjectPreviewFramer,\n  ProxyLogger,\n  Context,\n  Source,\n  prepTestRunner\n} from './frame';\n\ninterface BuildChallengeData extends Context {\n  challengeType: number;\n  challengeFiles?: ChallengeFile[];\n  required: { src?: string }[];\n  template: string;\n  url: string;\n}\n\ninterface BuildOptions {\n  preview: boolean;\n  disableLoopProtectTests: boolean;\n  disableLoopProtectPreview: boolean;\n  usesTestRunner?: boolean;\n}\n\ntype ApplyFunctionProps = (\n  file: ChallengeFile\n) => Promise<ChallengeFile> | ChallengeFile;\n\nconst applyFunction =\n  (fn: ApplyFunctionProps) => async (file: ChallengeFile) => {\n    try {\n      if (file.error) {\n        return file;\n      }\n      const newFile = await fn.call(this, file);\n      if (typeof newFile !== 'undefined') {\n        return newFile;\n      }\n      return file;\n    } catch (error) {\n      return { ...file, error };\n    }\n  };\n\nconst composeFunctions = (...fns: ApplyFunctionProps[]) =>\n  fns.map(applyFunction).reduce((f, g) => x => f(x).then(g));\n\nfunction buildSourceMap(challengeFiles: ChallengeFile[]): Source | undefined {\n  // TODO: rename sources.index to sources.contents.\n  const source: Source | undefined = challengeFiles?.reduce(\n    (sources, challengeFile) => {\n      sources.index += challengeFile.source || '';\n      sources.contents = sources.index;\n      sources.editableContents += challengeFile.editableContents || '';\n      return sources;\n    },\n    {\n      index: '',\n      editableContents: ''\n    } as Source\n  );\n  return source;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "699cd9a74bb96980767a62a885b47e62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "file; } catch (error) { return { ...file, error }; } }; const composeFunctions = (...fns: ApplyFunctionProps[]) => fns.map(applyFunction).reduce((f, g) => x => f(x).then(g)); function buildSourceMap(challengeFiles: ChallengeFile[]): Source | undefined { // TODO: rename sources.index to sources.contents. const source: Source | undefined = challengeFiles?.reduce( (sources, challengeFile) => { sources.index += challengeFile.source || ''; sources.contents = sources.index; sources.editableContents += challengeFile.editableContents || ''; return sources; }, { index: '', editableContents: '' } as Source ); return source; }\n\nexport const buildFunctions = {\n  [challengeTypes.js]: buildJSChallenge,\n  [challengeTypes.jsProject]: buildJSChallenge,\n  [challengeTypes.html]: buildDOMChallenge,\n  [challengeTypes.modern]: buildDOMChallenge,\n  [challengeTypes.backend]: buildBackendChallenge,\n  [challengeTypes.backEndProject]: buildBackendChallenge,\n  [challengeTypes.pythonProject]: buildBackendChallenge,\n  [challengeTypes.multifileCertProject]: buildDOMChallenge,\n  [challengeTypes.colab]: buildBackendChallenge,\n  [challengeTypes.python]: buildPythonChallenge,\n  [challengeTypes.multifilePythonCertProject]: buildPythonChallenge,\n  [challengeTypes.lab]: buildDOMChallenge,\n  [challengeTypes.jsLab]: buildJSChallenge,\n  [challengeTypes.pyLab]: buildPythonChallenge,\n  [challengeTypes.dailyChallengeJs]: buildJSChallenge,\n  [challengeTypes.dailyChallengePy]: buildPythonChallenge\n};\n\nexport function canBuildChallenge(challengeData: BuildChallengeData): boolean {\n  const { challengeType } = challengeData;\n  return Object.prototype.hasOwnProperty.call(buildFunctions, challengeType);\n}\n\nexport async function buildChallenge(\n  challengeData: BuildChallengeData,\n  options: BuildOptions\n) {\n  const { challengeType } = challengeData;\n  const build = buildFunctions[challengeType];\n  if (build) {\n    return build(challengeData, options);\n  }\n  throw new Error(`Cannot build challenge of type ${challengeType}`);\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "12b9766034a701c5ce1681916812dfac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "buildBackendChallenge, [challengeTypes.backEndProject]: buildBackendChallenge, [challengeTypes.pythonProject]: buildBackendChallenge, [challengeTypes.multifileCertProject]: buildDOMChallenge, [challengeTypes.colab]: buildBackendChallenge, [challengeTypes.python]: buildPythonChallenge, [challengeTypes.multifilePythonCertProject]: buildPythonChallenge, [challengeTypes.lab]: buildDOMChallenge, [challengeTypes.jsLab]: buildJSChallenge, [challengeTypes.pyLab]: buildPythonChallenge, [challengeTypes.dailyChallengeJs]: buildJSChallenge, [challengeTypes.dailyChallengePy]: buildPythonChallenge }; export function canBuildChallenge(challengeData: BuildChallengeData): boolean { const { challengeType } = challengeData; return Object.prototype.hasOwnProperty.call(buildFunctions, challengeType); } export async function buildChallenge( challengeData: BuildChallengeData, options: BuildOptions ) { const { challengeType } = challengeData; const build = buildFunctions[challengeType]; if (build) { return build(challengeData, options); } throw new Error(`Cannot build challenge of type ${challengeType}`); }\n\nexport const runnerTypes: Record<\n  (typeof challengeTypes)[keyof typeof challengeTypes],\n  'javascript' | 'dom' | 'python'\n> = {\n  [challengeTypes.html]: 'dom',\n  [challengeTypes.js]: 'javascript',\n  [challengeTypes.backend]: 'dom',\n  [challengeTypes.zipline]: 'dom',\n  [challengeTypes.frontEndProject]: 'dom',\n  [challengeTypes.backEndProject]: 'dom',\n  [challengeTypes.pythonProject]: 'python',\n  [challengeTypes.jsProject]: 'javascript',\n  [challengeTypes.modern]: 'dom',\n  [challengeTypes.step]: 'dom',\n  [challengeTypes.quiz]: 'dom',\n  [challengeTypes.invalid]: 'dom',\n  [challengeTypes.video]: 'dom',\n  [challengeTypes.codeAllyPractice]: 'dom',\n  [challengeTypes.codeAllyCert]: 'dom',\n  [challengeTypes.multifileCertProject]: 'dom',\n  [challengeTypes.theOdinProject]: 'dom',\n  [challengeTypes.colab]: 'dom',\n  [challengeTypes.exam]: 'dom',\n  [challengeTypes.msTrophy]: 'dom',\n  [challengeTypes.multipleChoice]: 'dom',\n  [challengeTypes.python]: 'python',\n  [challengeTypes.dialogue]: 'dom',\n  [challengeTypes.fillInTheBlank]: 'dom',\n  [challengeTypes.multifilePythonCertProject]: 'python',\n  [challengeTypes.generic]: 'dom',\n  [challengeTypes.lab]: 'dom',\n  [challengeTypes.jsLab]: 'javascript',\n  [challengeTypes.pyLab]: 'python',\n  [challengeTypes.dailyChallengeJs]: 'javascript',\n  [challengeTypes.dailyChallengePy]: 'python'\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 578,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "f33861d280938577fdc18824218622dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "Record< (typeof challengeTypes)[keyof typeof challengeTypes], 'javascript' | 'dom' | 'python' > = { [challengeTypes.html]: 'dom', [challengeTypes.js]: 'javascript', [challengeTypes.backend]: 'dom', [challengeTypes.zipline]: 'dom', [challengeTypes.frontEndProject]: 'dom', [challengeTypes.backEndProject]: 'dom', [challengeTypes.pythonProject]: 'python', [challengeTypes.jsProject]: 'javascript', [challengeTypes.modern]: 'dom', [challengeTypes.step]: 'dom', [challengeTypes.quiz]: 'dom', [challengeTypes.invalid]: 'dom', [challengeTypes.video]: 'dom', [challengeTypes.codeAllyPractice]: 'dom', [challengeTypes.codeAllyCert]: 'dom', [challengeTypes.multifileCertProject]: 'dom', [challengeTypes.theOdinProject]: 'dom', [challengeTypes.colab]: 'dom', [challengeTypes.exam]: 'dom', [challengeTypes.msTrophy]: 'dom', [challengeTypes.multipleChoice]: 'dom', [challengeTypes.python]: 'python', [challengeTypes.dialogue]: 'dom', [challengeTypes.fillInTheBlank]: 'dom', [challengeTypes.multifilePythonCertProject]: 'python', [challengeTypes.generic]: 'dom', [challengeTypes.lab]: 'dom', [challengeTypes.jsLab]: 'javascript', [challengeTypes.pyLab]: 'python', [challengeTypes.dailyChallengeJs]: 'javascript', [challengeTypes.dailyChallengePy]: 'python' };\n\nexport async function getTestRunner(buildData: BuildChallengeData) {\n  const { challengeType } = buildData;\n  // TODO: Fully type BuildChallengeData\n  const type =\n    runnerTypes[challengeType as unknown as keyof typeof runnerTypes];\n  if (!type) {\n    throw new Error(\n      `Cannot get test runner for challenge type ${challengeType}`\n    );\n  }\n  await prepTestRunner({ ...buildData, type });\n\nreturn (testString: string, testTimeout: number) =>\n    runTestInTestFrame(testString, testTimeout, type);\n}\n\ntype BuildResult = {\n  challengeType: number;\n  build?: string;\n  sources: Source | undefined;\n  loadEnzyme?: boolean;\n  error?: unknown;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "13fce7ecc8a987998ed355294362b055",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "}; export async function getTestRunner(buildData: BuildChallengeData) { const { challengeType } = buildData; // TODO: Fully type BuildChallengeData const type = runnerTypes[challengeType as unknown as keyof typeof runnerTypes]; if (!type) { throw new Error( `Cannot get test runner for challenge type ${challengeType}` ); } await prepTestRunner({ ...buildData, type }); return (testString: string, testTimeout: number) => runTestInTestFrame(testString, testTimeout, type); } type BuildResult = { challengeType: number; build?: string; sources: Source | undefined; loadEnzyme?: boolean; error?: unknown; };\n\n// TODO: All the buildXChallenge files have a similar structure, so make that\n// abstraction (function, class, whatever) and then create the various functions\n// out of it.\nexport async function buildDOMChallenge(\n  {\n    challengeFiles,\n    required = [],\n    template = '',\n    challengeType\n  }: BuildChallengeData,\n  options?: BuildOptions\n): Promise<BuildResult> {\n  // TODO: make this required in the schema.\n  if (!challengeFiles) throw Error('No challenge files provided');\n  const hasJsx = challengeFiles.some(\n    challengeFile => challengeFile.ext === 'jsx'\n  );\n  const isMultifile = challengeFiles.length > 1;\n\nconst requiresReact16 = required.some(({ src }) =>\n    src?.includes('https://cdnjs.cloudflare.com/ajax/libs/react/16.')\n  );\n\n// I'm reasonably sure this is fine, but we need to migrate transformers to\n  // TypeScript to be sure.\n  const transformers: ApplyFunctionProps[] = (isMultifile && hasJsx\n    ? getMultifileJSXTransformers(options)\n    : getTransformers(options)) as unknown as ApplyFunctionProps[];\n\nconst pipeLine = composeFunctions(...transformers);\n  const finalFiles = await Promise.all(challengeFiles.map(pipeLine));\n  const error = finalFiles.find(({ error }) => error)?.error;\n  const contents = (await embedFilesInHtml(finalFiles)) as string;\n\n// if there is an error, we just build the test runner so that it can be\n  // used to run tests against the code without actually running the code.\n  const toBuild = error\n    ? {}\n    : {\n        required,\n        template,\n        contents\n      };",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "b9a5b55871dd69c692f3ad5d368553bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "&& hasJsx ? getMultifileJSXTransformers(options) : getTransformers(options)) as unknown as ApplyFunctionProps[]; const pipeLine = composeFunctions(...transformers); const finalFiles = await Promise.all(challengeFiles.map(pipeLine)); const error = finalFiles.find(({ error }) => error)?.error; const contents = (await embedFilesInHtml(finalFiles)) as string; // if there is an error, we just build the test runner so that it can be // used to run tests against the code without actually running the code. const toBuild = error ? {} : { required, template, contents };\n\nreturn {\n    challengeType,\n    build: concatHtml(toBuild),\n    sources: buildSourceMap(finalFiles),\n    loadEnzyme: requiresReact16,\n    error\n  };\n}\n\nexport async function buildJSChallenge(\n  {\n    challengeFiles,\n    challengeType\n  }: { challengeFiles?: ChallengeFile[]; challengeType: number },\n  options: BuildOptions\n): Promise<BuildResult> {\n  if (!challengeFiles) throw Error('No challenge files provided');\n  const pipeLine = composeFunctions(\n    ...(getTransformers(options) as unknown as ApplyFunctionProps[])\n  );\n\nconst finalFiles = await Promise.all(challengeFiles?.map(pipeLine));\n  const error = finalFiles.find(({ error }) => error)?.error;\n\nconst toBuild = error ? [] : finalFiles;\n\nreturn {\n    challengeType,\n    build: toBuild\n      .reduce(\n        (body, challengeFile) => [\n          ...body,\n          challengeFile.head,\n          challengeFile.contents,\n          challengeFile.tail\n        ],\n        [] as string[]\n      )\n      .join('\\n'),\n    sources: buildSourceMap(finalFiles),\n    error\n  };\n}\n\nfunction buildBackendChallenge({ url, challengeType }: BuildChallengeData) {\n  return {\n    challengeType,\n    build: '',\n    sources: { contents: url }\n  };\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "833642e4a1c9e7c21724810433372baf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "provided'); const pipeLine = composeFunctions( ...(getTransformers(options) as unknown as ApplyFunctionProps[]) ); const finalFiles = await Promise.all(challengeFiles?.map(pipeLine)); const error = finalFiles.find(({ error }) => error)?.error; const toBuild = error ? [] : finalFiles; return { challengeType, build: toBuild .reduce( (body, challengeFile) => [ ...body, challengeFile.head, challengeFile.contents, challengeFile.tail ], [] as string[] ) .join('\\n'), sources: buildSourceMap(finalFiles), error }; } function buildBackendChallenge({ url, challengeType }: BuildChallengeData) { return { challengeType, build: '', sources: { contents: url } }; }\n\nexport async function buildPythonChallenge({\n  challengeFiles,\n  challengeType\n}: BuildChallengeData): Promise<BuildResult> {\n  if (!challengeFiles) throw new Error('No challenge files provided');\n  const pipeLine = composeFunctions(\n    ...(getPythonTransformers() as unknown as ApplyFunctionProps[])\n  );\n  const finalFiles = await Promise.all(challengeFiles.map(pipeLine));\n  const error = finalFiles.find(({ error }) => error)?.error;\n  const sources = buildSourceMap(finalFiles);\n\nreturn {\n    challengeType,\n    sources,\n    build: sources?.contents,\n    error\n  };\n}\n\nexport function updatePreview(\n  buildData: BuildChallengeData,\n  document: Document,\n  proxyLogger: ProxyLogger\n): Promise<void> {\n  if (challengeHasPreview(buildData)) {\n    return new Promise<void>(resolve =>\n      createMainPreviewFramer(\n        document,\n        proxyLogger,\n        getDocumentTitle(buildData),\n        resolve\n      )(buildData)\n    );\n  } else {\n    throw new Error(\n      `Cannot show preview for challenge type ${buildData.challengeType}`\n    );\n  }\n}\n\nfunction getDocumentTitle(buildData: BuildChallengeData) {\n  // Give iframe a title attribute for accessibility using the preview\n  // document's <title>.\n\nconst parser = new DOMParser();\n  const doc = parser.parseFromString(buildData?.sources?.index, 'text/html');\n  const title = doc.querySelector('title');\n\nreturn title?.innerText ?? 'challenge';\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "e23b03c3708aaf74904451a32820df9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
    "source_type": "git_repo",
    "title": "build",
    "content": "buildData: BuildChallengeData, document: Document, proxyLogger: ProxyLogger ): Promise<void> { if (challengeHasPreview(buildData)) { return new Promise<void>(resolve => createMainPreviewFramer( document, proxyLogger, getDocumentTitle(buildData), resolve )(buildData) ); } else { throw new Error( `Cannot show preview for challenge type ${buildData.challengeType}` ); } } function getDocumentTitle(buildData: BuildChallengeData) { // Give iframe a title attribute for accessibility using the preview // document's <title>. const parser = new DOMParser(); const doc = parser.parseFromString(buildData?.sources?.index, 'text/html'); const title = doc.querySelector('title'); return title?.innerText ?? 'challenge'; }\n\nexport function updateProjectPreview(\n  buildData: BuildChallengeData,\n  document: Document\n): void {\n  if (challengeHasPreview(buildData)) {\n    createProjectPreviewFramer(\n      document,\n      getDocumentTitle(buildData)\n    )(buildData);\n  } else {\n    throw new Error(\n      `Cannot show preview for challenge type ${buildData.challengeType}`\n    );\n  }\n}\n\nexport function challengeHasPreview({\n  challengeType\n}: {\n  challengeType: number;\n}): boolean {\n  return (\n    challengeType === challengeTypes.html ||\n    challengeType === challengeTypes.modern ||\n    challengeType === challengeTypes.multifileCertProject ||\n    challengeType === challengeTypes.multifilePythonCertProject ||\n    challengeType === challengeTypes.python ||\n    challengeType === challengeTypes.lab ||\n    challengeType === challengeTypes.pyLab ||\n    challengeType === challengeTypes.dailyChallengePy\n  );\n}\n\nexport function isJavaScriptChallenge({\n  challengeType\n}: {\n  challengeType: number;\n}): boolean {\n  return (\n    challengeType === challengeTypes.js ||\n    challengeType === challengeTypes.jsProject ||\n    challengeType === challengeTypes.jsLab ||\n    challengeType === challengeTypes.dailyChallengeJs\n  );\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 10658,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\build.ts",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "49fc1a284695e8fcf68e9718f14e727b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\get-target-editor.ts",
    "source_type": "git_repo",
    "title": "get-target-editor",
    "content": "import { isEmpty } from 'lodash-es';\nimport { sortChallengeFiles } from '../../../../utils/sort-challengefiles';\nimport { ChallengeFiles } from '../../../redux/prop-types';\n\nexport function getTargetEditor(challengeFiles: ChallengeFiles): string | null {\n  if (isEmpty(challengeFiles)) return null;\n\nconst targetEditor = challengeFiles?.find(\n    ({ editableRegionBoundaries }) => !isEmpty(editableRegionBoundaries)\n  )?.fileKey;\n\n// fallback for when there is no editable region.\n\nreturn targetEditor || sortChallengeFiles(challengeFiles ?? [])[0].fileKey;\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 566,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\get-target-editor.ts",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f33ac22e28bab8911530d34aa604fc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.test.ts",
    "source_type": "git_repo",
    "title": "index.test",
    "content": "import envData from '../../../../config/env.json';\nimport { getGuideUrl } from './index';\n\nconst { forumLocation } = envData;\n\ndescribe('index', () => {\n  describe('getGuideUrl', () => {\n    it('should use forum topic url when forumTopicId is supplied', () => {\n      const value = getGuideUrl({\n        forumTopicId: 12345,\n        title: 'a sample title'\n      });\n      expect(value).toEqual(`${forumLocation}/t/12345`);\n    });\n\nit('should use search endpoint when no forumTopicId is supplied', () => {\n      const value = getGuideUrl({\n        title: '& a sample title?'\n      });\n      expect(value).toEqual(\n        `${forumLocation}/search?q=%26%20a%20sample%20title%3F%20in%3Atitle%20order%3Aviews`\n      );\n    });\n  });\n});",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 739,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.test.ts",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9495e756cee57aa4e23c97334bef6801",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "import { flow } from 'lodash-es';\nimport i18next, { type i18n } from 'i18next';\n\nimport {\n  version as _helperVersion,\n  type FCCTestRunner\n} from '../../../../../tools/client-plugins/browser-scripts/test-runner';\n\nimport { format } from '../../../utils/format';\nimport type {\n  FrameDocument,\n  PythonDocument\n} from '../../../../../tools/client-plugins/browser-scripts';\nimport { Hooks } from '../../../redux/prop-types';\n\nexport const helperVersion = _helperVersion;\n\ndeclare global {\n  interface Window {\n    FCCTestRunner: FCCTestRunner;\n  }\n}\n\nconst utilsFormat: <T>(x: T) => string = format;\n\nexport interface Source {\n  index: string;\n  contents?: string;\n  editableContents: string;\n}\n\nexport interface Context {\n  window?: Window &\n    typeof globalThis & {\n      i18nContent?: i18n;\n      __pyodide: unknown;\n      document: FrameDocument | PythonDocument;\n    };\n  element: HTMLIFrameElement;\n  build: string;\n  sources: Source;\n  hooks?: Hooks;\n  type: 'dom' | 'javascript' | 'python';\n  loadEnzyme?: boolean;\n}\n\nexport type ProxyLogger = (msg: string) => void;\n\ntype InitFrame = (\n  frameInitiateDocument?: () => unknown,\n  frameConsoleLogger?: ProxyLogger\n) => (frameContext: Context) => Context;\n\nclass ScrollManager {\n  #previewScrollPosition = 0;\n\ngetPreviewScrollPosition = () => {\n    return this.#previewScrollPosition;\n  };\n\nsetPreviewScrollPosition = (position: number) => {\n    this.#previewScrollPosition = position;\n  };\n\nregisterScrollEventListener = (iframe: HTMLIFrameElement) => {\n    iframe.contentDocument?.addEventListener('scroll', event => {\n      const currentTarget = event.currentTarget as Document | null;\n      if (currentTarget?.body.scrollTop) {\n        this.setPreviewScrollPosition(currentTarget?.body.scrollTop);\n      }\n    });\n  };\n\nrestorePreviewScrollPosition = (iframe: HTMLIFrameElement) => {\n    if (iframe.contentDocument?.body) {\n      iframe.contentDocument.body.scrollTop = this.#previewScrollPosition;\n    }\n  };\n}\n\nexport const scrollManager = new ScrollManager();",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "70e96d81ecffb77d38ecef78f5407191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": ") => (frameContext: Context) => Context; class ScrollManager { #previewScrollPosition = 0; getPreviewScrollPosition = () => { return this.#previewScrollPosition; }; setPreviewScrollPosition = (position: number) => { this.#previewScrollPosition = position; }; registerScrollEventListener = (iframe: HTMLIFrameElement) => { iframe.contentDocument?.addEventListener('scroll', event => { const currentTarget = event.currentTarget as Document | null; if (currentTarget?.body.scrollTop) { this.setPreviewScrollPosition(currentTarget?.body.scrollTop); } }); }; restorePreviewScrollPosition = (iframe: HTMLIFrameElement) => { if (iframe.contentDocument?.body) { iframe.contentDocument.body.scrollTop = this.#previewScrollPosition; } }; } export const scrollManager = new ScrollManager();\n\n// we use two different frames to make them all essentially pure functions\n// main iframe is responsible rendering the preview and is where we proxy the\nexport const mainPreviewId = 'fcc-main-frame';\n// the project preview frame demos the finished project\nexport const projectPreviewId = 'fcc-project-preview-frame';\nconst ASSET_PATH = `/js/test-runner/${helperVersion}/`;\n\nconst DOCUMENT_NOT_FOUND_ERROR = 'misc.document-notfound';\n\n// base tag here will force relative links\n// within iframe to point to '' instead of\n// append to the current challenge url\n// this also allows in-page anchors to work properly\n// rather than load another instance of the learn\n\n// window.onerror is added here to report any errors thrown during the building\n// of the frame.  React dom errors already appear in the console, so onerror\n// does not need to pass them on to the default error handler.\n\n// The \"fcc-hide-header\" class on line 95 is added to ensure that the CSSHelper class ignores this style element\n// during tests, preventing CSS-related test failures.",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "150499b7347d11e986c6131c2092c161",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "properly // rather than load another instance of the learn // window.onerror is added here to report any errors thrown during the building // of the frame. React dom errors already appear in the console, so onerror // does not need to pass them on to the default error handler. // The \"fcc-hide-header\" class on line 95 is added to ensure that the CSSHelper class ignores this style element // during tests, preventing CSS-related test failures.\n\nconst createHeader = (id = mainPreviewId) =>\n  `\n  <base href='' />\n  <style class=\"fcc-hide-header\">\n    head *, title, meta, link, script {\n      display: none !important;\n    }\n  </style>\n  <script>\n    window.__frameId = '${id}';\n    window.onerror = function(msg) {\n      const string = msg.toLowerCase();\n      if (string.includes('script error')) {\n        msg = 'Build error, open your browser console to learn more.';\n      }\n      console.log(msg);\n      return true;\n    };\n    document.addEventListener('click', function(e) {\n      let element = e.target;\n      while(element && element.nodeName !== 'A') {\n        element = element.parentElement;\n      }\n      if (element && element.nodeName === 'A' && new URL(element.href).hash === '') {\n        e.preventDefault();\n        window.parent.window.alert(\n          i18nContent.t('misc.iframe-alert', { externalLink: element.href })\n        )\n      }\n      if (element) {\n        const href = element.getAttribute('href');\n        if (!href || href[0] !== '#' && !href.match(/^https?:\\\\/\\\\//)) {\n          e.preventDefault();\n        }\n        else if (href.match(/^#.+/)) {\n          e.preventDefault();\n          const scrollId = href.substring(1);\n          window.location.hash = scrollId;\n        }\n      }\n    }, false);\n    document.addEventListener('submit', function(e) {\n      const action = e.target.getAttribute('action');\n      e.preventDefault();\n      if (action && action.match(/https?:\\\\/\\\\//)) {\n        window.parent.window.alert(\n          i18nContent.t('misc.iframe-form-submit-alert', { externalLink: action  })\n        )\n      }\n    }, false);\n  </script>\n`;\n\ntype TestResult =\n  | { pass: boolean }\n  | { err: { message: string; stack?: string } };",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "cb1afc22c3d445aa0a01a36df515ac59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "(element) { const href = element.getAttribute('href'); if (!href || href[0] !== '#' && !href.match(/^https?:\\\\/\\\\//)) { e.preventDefault(); } else if (href.match(/^#.+/)) { e.preventDefault(); const scrollId = href.substring(1); window.location.hash = scrollId; } } }, false); document.addEventListener('submit', function(e) { const action = e.target.getAttribute('action'); e.preventDefault(); if (action && action.match(/https?:\\\\/\\\\//)) { window.parent.window.alert( i18nContent.t('misc.iframe-form-submit-alert', { externalLink: action }) ) } }, false); </script> `; type TestResult = | { pass: boolean } | { err: { message: string; stack?: string } };\n\nfunction getContentDocument<T extends Document = FrameDocument>(\n  document: Document,\n  id: string\n) {\n  const frame = document.getElementById(id);\n  if (!frame) return null;\n  const frameDocument = (frame as HTMLIFrameElement).contentDocument;\n  return frameDocument as T;\n}\n\nexport const runTestInTestFrame = async function (\n  test: string,\n  timeout: number,\n  type: 'dom' | 'javascript' | 'python'\n): Promise<TestResult | undefined> {\n  const runner = window?.FCCTestRunner.getRunner(type);\n\nreturn await Promise.race([\n    new Promise<\n      { pass: boolean } | { err: { message: string; stack?: string } }\n    >((_, reject) => setTimeout(() => reject(Error('timeout')), timeout)),\n    runner?.runTest(test)\n  ]);\n};\n\nexport const prepTestRunner = async ({\n  sources,\n  loadEnzyme,\n  build,\n  hooks,\n  type\n}: {\n  sources: Source;\n  loadEnzyme?: boolean;\n  build: string;\n  hooks?: Hooks;\n  type: 'dom' | 'javascript' | 'python';\n}) => {\n  const source = type === 'dom' ? prefixDoctype({ build, sources }) : build;\n  await loadTestRunner(document);\n  await window?.FCCTestRunner.createTestRunner({\n    type,\n    code: sources,\n    source,\n    assetPath: ASSET_PATH,\n    hooks,\n    loadEnzyme\n  });\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "30a149592921925ec746ba8b84ad3466",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "{ err: { message: string; stack?: string } } >((_, reject) => setTimeout(() => reject(Error('timeout')), timeout)), runner?.runTest(test) ]); }; export const prepTestRunner = async ({ sources, loadEnzyme, build, hooks, type }: { sources: Source; loadEnzyme?: boolean; build: string; hooks?: Hooks; type: 'dom' | 'javascript' | 'python'; }) => { const source = type === 'dom' ? prefixDoctype({ build, sources }) : build; await loadTestRunner(document); await window?.FCCTestRunner.createTestRunner({ type, code: sources, source, assetPath: ASSET_PATH, hooks, loadEnzyme }); };\n\nexport const runPythonInFrame = function (\n  document: Document,\n  code: string,\n  previewId: string\n): void {\n  const contentDocument = getContentDocument<PythonDocument>(\n    document,\n    previewId\n  );\n  void contentDocument?.__runPython(code);\n};\n\nconst TEST_RUNNER_ID = 'fcc-test-runner';\nconst createRunnerScript = (document: Document) => {\n  const script = document.createElement('script');\n  script.src = ASSET_PATH + 'index.js';\n  script.id = TEST_RUNNER_ID;\n  return script;\n};\n\nconst loadTestRunner = async (document: Document) => {\n  const done = new Promise<void>((resolve, reject) => {\n    const alreadyLoaded = !!window?.FCCTestRunner;\n\nif (alreadyLoaded) return resolve();\n\nconst script =\n      document.getElementById(TEST_RUNNER_ID) ?? createRunnerScript(document);\n\nconst errorListener = (err: ErrorEvent) => {\n      console.error(err);\n      reject(new Error('Test runner failed to load'));\n    };\n\nscript.addEventListener(\n      'load',\n      () => {\n        // Since it's loaded, we no longer need to listen for errors\n        script.removeEventListener('error', errorListener);\n        resolve();\n      },\n      { once: true }\n    );\n    script.addEventListener('error', errorListener, { once: true });\n\ndocument.head.appendChild(script);\n  });\n  return done;\n};\n\nconst createFrame =\n  (document: Document, id: string, title?: string) =>\n  (frameContext: Context) => {\n    const frame = document.createElement('iframe');",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "b62b6279f3edd45a512e139ebf85b55a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "const script = document.getElementById(TEST_RUNNER_ID) ?? createRunnerScript(document); const errorListener = (err: ErrorEvent) => { console.error(err); reject(new Error('Test runner failed to load')); }; script.addEventListener( 'load', () => { // Since it's loaded, we no longer need to listen for errors script.removeEventListener('error', errorListener); resolve(); }, { once: true } ); script.addEventListener('error', errorListener, { once: true }); document.head.appendChild(script); }); return done; }; const createFrame = (document: Document, id: string, title?: string) => (frameContext: Context) => { const frame = document.createElement('iframe');\n\nframe.srcdoc = createContent(id, frameContext);\n    frame.id = id;\n    if (typeof title === 'string') {\n      frame.title = i18next.t('misc.iframe-preview', { title });\n      frame.lang = 'en';\n    }\n    return {\n      ...frameContext,\n      element: frame\n    };\n  };\n\nconst mountFrame = (document: Document) => (frameContext: Context) => {\n  const { element }: { element: HTMLIFrameElement } = frameContext;\n  const oldFrame = document.getElementById(element.id) as HTMLIFrameElement;\n  if (oldFrame) {\n    element.className = oldFrame.className;\n    oldFrame.parentNode!.replaceChild(element, oldFrame);\n    // only test frames can be added (and hidden) here, other frames must be\n    // added by react\n  }\n  return {\n    ...frameContext,\n    element,\n    window: element.contentWindow\n  };\n};\n\nconst noop = <T>(x: T) => x;\n\nconst actRE = new RegExp(/act\\(\\.\\.\\.\\) is not supported in production builds/);\n\nconst updateProxyConsole =\n  (proxyLogger?: ProxyLogger) => (frameContext: Context) => {\n    // window does not exist if the preview is hidden, so we have to check.\n    if (proxyLogger && frameContext?.window) {\n      const oldLog = frameContext.window.console.log.bind(\n        frameContext.window.console\n      );\n      const oldInfo = frameContext.window.console.info.bind(\n        frameContext.window.console\n      );\n\nconst oldWarn = frameContext.window.console.warn.bind(\n        frameContext.window.console\n      );",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "085da9ced07a4118b9f8b348febf5d95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "react } return { ...frameContext, element, window: element.contentWindow }; }; const noop = <T>(x: T) => x; const actRE = new RegExp(/act\\(\\.\\.\\.\\) is not supported in production builds/); const updateProxyConsole = (proxyLogger?: ProxyLogger) => (frameContext: Context) => { // window does not exist if the preview is hidden, so we have to check. if (proxyLogger && frameContext?.window) { const oldLog = frameContext.window.console.log.bind( frameContext.window.console ); const oldInfo = frameContext.window.console.info.bind( frameContext.window.console ); const oldWarn = frameContext.window.console.warn.bind( frameContext.window.console );\n\nconst oldError = frameContext.window.console.error.bind(\n        frameContext.window.console\n      );\n\nframeContext.window.console.log = function proxyConsole(\n        ...args: string[]\n      ) {\n        proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' '));\n        return oldLog(...(args as []));\n      };\n\nframeContext.window.console.info = function proxyInfo(...args: string[]) {\n        proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' '));\n        return oldInfo(...(args as []));\n      };\n\nframeContext.window.console.warn = function proxyWarn(...args: string[]) {\n        proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' '));\n        return oldWarn(...(args as []));\n      };\n\nframeContext.window.console.error = function proxyWarn(\n        ...args: string[]\n      ) {\n        if (args.every(arg => !actRE.test(arg))) {\n          proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' '));\n        }\n        return oldError(...(args as []));\n      };\n    }\n\nreturn frameContext;\n  };\n\nconst updateWindowI18next = (frameContext: Context) => {\n  // window does not exist if the preview is hidden, so we have to check.\n  if (frameContext?.window) {\n    frameContext.window.i18nContent = i18next;\n  }\n  return frameContext;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "c8704dec928ad5a5ded1cde41c3eb1da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "frameContext.window.console.warn = function proxyWarn(...args: string[]) { proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' ')); return oldWarn(...(args as [])); }; frameContext.window.console.error = function proxyWarn( ...args: string[] ) { if (args.every(arg => !actRE.test(arg))) { proxyLogger(args.map((arg: string) => utilsFormat(arg)).join(' ')); } return oldError(...(args as [])); }; } return frameContext; }; const updateWindowI18next = (frameContext: Context) => { // window does not exist if the preview is hidden, so we have to check. if (frameContext?.window) { frameContext.window.i18nContent = i18next; } return frameContext; };\n\nconst initMainFrame =\n  (frameReady?: () => void, proxyLogger?: ProxyLogger) =>\n  (frameContext: Context) => {\n    waitForFrame(frameContext)\n      .then(async () => {\n        // Overwriting the onerror added by createHeader to catch any errors thrown\n        // after the frame is ready. It has to be overwritten, as proxyLogger cannot\n        // be added as part of createHeader.\n\nif (frameContext.window) {\n          frameContext.window.onerror = function (msg) {\n            if (typeof msg === 'string') {\n              const string = msg.toLowerCase();\n              if (string.includes('script error')) {\n                msg = 'Error, open your browser console to learn more.';\n              }\n              if (proxyLogger) {\n                proxyLogger(msg);\n              }\n            }\n            // let the error propagate so it appears in the browser console, otherwise\n            // an error from a cross origin script just appears as 'Script error.'\n            return false;\n          };\n        }\n\nconst document = frameContext.window?.document;\n        if (document && '__initPythonFrame' in document) {\n          await document.__initPythonFrame();\n        }\n        if (frameReady) frameReady();\n      })\n      .catch(handleDocumentNotFound);\n    return frameContext;\n  };\n\nfunction handleDocumentNotFound(err: string) {\n  if (err !== DOCUMENT_NOT_FOUND_ERROR) {\n    console.log(err);\n  }\n}\n\nconst initPreviewFrame = () => (frameContext: Context) => frameContext;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "4fab162f1dc210365fef3eda7ca958a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "proxyLogger(msg); } } // let the error propagate so it appears in the browser console, otherwise // an error from a cross origin script just appears as 'Script error.' return false; }; } const document = frameContext.window?.document; if (document && '__initPythonFrame' in document) { await document.__initPythonFrame(); } if (frameReady) frameReady(); }) .catch(handleDocumentNotFound); return frameContext; }; function handleDocumentNotFound(err: string) { if (err !== DOCUMENT_NOT_FOUND_ERROR) { console.log(err); } } const initPreviewFrame = () => (frameContext: Context) => frameContext;\n\nconst waitForFrame = (frameContext: Context) => {\n  return new Promise<void>((resolve, reject) => {\n    const rejectId = setTimeout(() => {\n      // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n      reject(DOCUMENT_NOT_FOUND_ERROR);\n    }, 10000);\n\n// We have to add the listener to the frame, not its contentWindow, because\n    // the latter does not receive the load event in Safari. It does not\n    // matter which we use for Chrome and Firefox.\n    frameContext.element?.addEventListener('load', () => {\n      clearTimeout(rejectId);\n      resolve();\n    });\n  });\n};\n\nexport const prefixDoctype = ({\n  build,\n  sources\n}: {\n  build: string;\n  sources: Source;\n}) => {\n  // DOCTYPE should be the first thing written to the frame, so if the user code\n  // includes a DOCTYPE declaration, we need to find it and write it first.\n  const doctype = sources.contents?.match(/^<!DOCTYPE html>/i)?.[0] || '';\n  return doctype + build;\n};\n\nconst createContent = (\n  id: string,\n  { build, sources }: { build: string; sources: Source; hooks?: Hooks }\n) => {\n  return prefixDoctype({ build: createHeader(id) + build, sources });\n};\n\nconst restoreScrollPosition = (frameContext: Context) => {\n  scrollManager.registerScrollEventListener(frameContext.element);\n\nif (scrollManager.getPreviewScrollPosition()) {\n    scrollManager.restorePreviewScrollPosition(frameContext.element);\n  }\n  return frameContext;\n};",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "02c07c88af54745679a36e0fdc28a312",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
    "source_type": "git_repo",
    "title": "frame",
    "content": "if the user code // includes a DOCTYPE declaration, we need to find it and write it first. const doctype = sources.contents?.match(/^<!DOCTYPE html>/i)?.[0] || ''; return doctype + build; }; const createContent = ( id: string, { build, sources }: { build: string; sources: Source; hooks?: Hooks } ) => { return prefixDoctype({ build: createHeader(id) + build, sources }); }; const restoreScrollPosition = (frameContext: Context) => { scrollManager.registerScrollEventListener(frameContext.element); if (scrollManager.getPreviewScrollPosition()) { scrollManager.restorePreviewScrollPosition(frameContext.element); } return frameContext; };\n\nexport const createMainPreviewFramer = (\n  document: Document,\n  proxyLogger: ProxyLogger,\n  frameTitle: string,\n  frameReady?: () => void\n): ((args: Context) => void) =>\n  createFramer({\n    document,\n    id: mainPreviewId,\n    init: initMainFrame,\n    proxyLogger,\n    frameReady,\n    frameTitle\n  });\n\nexport const createProjectPreviewFramer = (\n  document: Document,\n  frameTitle: string\n): ((args: Context) => void) =>\n  createFramer({\n    document,\n    id: projectPreviewId,\n    init: initPreviewFrame,\n    frameTitle\n  });\n\nconst createFramer = ({\n  document,\n  id,\n  init,\n  proxyLogger,\n  frameReady,\n  frameTitle,\n  updateWindowFunctions\n}: {\n  document: Document;\n  id: string;\n  init: InitFrame;\n  proxyLogger?: ProxyLogger;\n  frameReady?: () => void;\n  frameTitle?: string;\n  updateWindowFunctions?: (frameContext: Context) => Context;\n}) =>\n  flow(\n    createFrame(document, id, frameTitle),\n    mountFrame(document),\n    updateWindowFunctions ?? noop,\n    updateProxyConsole(proxyLogger),\n    updateWindowI18next,\n    restoreScrollPosition,\n    init(frameReady, proxyLogger)\n  ) as (args: Context) => void;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 14319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\frame.ts",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "53ffb94ebbd380059b868bb59f7a1d37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "import i18next from 'i18next';\nimport envData from '../../../../config/env.json';\n\nconst { forumLocation } = envData;\n\ninterface GuideData {\n  forumTopicId?: number;\n  title?: string;\n}\n\nexport function getGuideUrl({ forumTopicId, title = '' }: GuideData): string {\n  title = encodeURIComponent(title);\n  return forumTopicId\n    ? `https://forum.freecodecamp.org/t/${forumTopicId}`\n    : `${forumLocation}/search?q=${title}%20in%3Atitle%20order%3Aviews`;\n}\n\nexport function isGoodXHRStatus(status?: string): boolean {\n  if (!status) return false;\n  const statusInt = parseInt(status, 10);\n  return (statusInt >= 200 && statusInt < 400) || statusInt === 402;\n}\n\nexport function transformEditorLink(url: string): string {\n  return url\n    .replace(\n      /(\\/\\/)(?<projectname>[^.]+)\\.(?<username>[^.]+)\\.repl\\.co\\/?/,\n      '//replit.com/@$<username>/$<projectname>'\n    )\n    .replace(\n      /(\\/\\/)(?<projectname>[^.]+)\\.glitch\\.me\\/?/,\n      '//glitch.com/edit/#!/$<projectname>'\n    );\n}\n\n// Adds region role and accessible name to PrismJS code blocks\nexport function enhancePrismAccessibility(\n  prismEnv: Prism.hooks.ElementHighlightedEnvironment\n): void {\n  const langs: { [key: string]: string } = {\n    js: 'JavaScript',\n    javascript: 'JavaScript',\n    css: 'CSS',\n    html: 'HTML',\n    python: 'python',\n    py: 'python',\n    xml: 'XML',\n    jsx: 'JSX',\n    scss: 'SCSS',\n    sql: 'SQL',\n    http: 'HTTP',\n    json: 'JSON',\n    pug: 'pug',\n    ts: 'TypeScript',\n    typescript: 'TypeScript'\n  };\n  const parent = prismEnv?.element?.parentElement;\n  if (\n    !parent ||\n    parent.nodeName !== 'PRE' ||\n    parent.tabIndex !== 0 ||\n    parent.dataset.noAria === 'true'\n  ) {\n    return;\n  }",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3939,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "628037b6ea81935bd928074c1c668f16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "name to PrismJS code blocks export function enhancePrismAccessibility( prismEnv: Prism.hooks.ElementHighlightedEnvironment ): void { const langs: { [key: string]: string } = { js: 'JavaScript', javascript: 'JavaScript', css: 'CSS', html: 'HTML', python: 'python', py: 'python', xml: 'XML', jsx: 'JSX', scss: 'SCSS', sql: 'SQL', http: 'HTTP', json: 'JSON', pug: 'pug', ts: 'TypeScript', typescript: 'TypeScript' }; const parent = prismEnv?.element?.parentElement; if ( !parent || parent.nodeName !== 'PRE' || parent.tabIndex !== 0 || parent.dataset.noAria === 'true' ) { return; }\n\nparent.setAttribute('role', 'region');\n  const codeType = prismEnv.element?.className\n    .replace(/language-(.*)/, '$1')\n    .toLowerCase();\n  const codeName = langs[codeType] || '';\n  parent.setAttribute(\n    'aria-label',\n    i18next.t('aria.code-example', {\n      codeName\n    })\n  );\n}\n\n// Make PrismJS code blocks collapsible\nexport function makePrismCollapsible(\n  prismEnv: Prism.hooks.ElementHighlightedEnvironment\n): void {\n  const preElem = prismEnv?.element?.parentElement;\n  const sectionElem = preElem?.parentElement;\n  if (\n    !preElem ||\n    preElem.nodeName !== 'PRE' ||\n    preElem.tabIndex !== 0 ||\n    !sectionElem ||\n    sectionElem.nodeName !== 'SECTION'\n  ) {\n    return;\n  }\n\nconst details = document.createElement('details');\n  details.classList.add('code-details');\n\nconst summary = document.createElement('summary');\n  summary.classList.add('code-details-summary');\n  summary.innerHTML = i18next.t('learn.example-code');\n\ndetails.appendChild(summary);\n  details.appendChild(preElem.cloneNode(true));\n  details.open = true;\n\nsectionElem.replaceChild(details, preElem);\n}\n\n// Adjusts scrollbar arrows based on scrollbar width\nexport function setScrollbarArrowStyles(scrollbarWidth: number): void {\n  const root = document.documentElement;\n\n// make the arrow box a square\n  root.style.setProperty(\n    '--monaco-scrollbar-arrow-box-size',\n    `${scrollbarWidth}px`\n  );",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3939,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8b5549f86f970442a01828bd9a4d26ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
    "source_type": "git_repo",
    "title": "index",
    "content": "prismEnv?.element?.parentElement; const sectionElem = preElem?.parentElement; if ( !preElem || preElem.nodeName !== 'PRE' || preElem.tabIndex !== 0 || !sectionElem || sectionElem.nodeName !== 'SECTION' ) { return; } const details = document.createElement('details'); details.classList.add('code-details'); const summary = document.createElement('summary'); summary.classList.add('code-details-summary'); summary.innerHTML = i18next.t('learn.example-code'); details.appendChild(summary); details.appendChild(preElem.cloneNode(true)); details.open = true; sectionElem.replaceChild(details, preElem); } // Adjusts scrollbar arrows based on scrollbar width export function setScrollbarArrowStyles(scrollbarWidth: number): void { const root = document.documentElement; // make the arrow box a square root.style.setProperty( '--monaco-scrollbar-arrow-box-size', `${scrollbarWidth}px` );\n\n// adjust arrow icon size to fit arrow box\n  const iconSize = scrollbarWidth < 11 ? scrollbarWidth : scrollbarWidth - 5;\n  const iconFontSize =\n    scrollbarWidth < 11 ? scrollbarWidth : scrollbarWidth - 5;\n  root.style.setProperty('--monaco-scrollbar-arrow-icon-size', `${iconSize}px`);\n  root.style.setProperty(\n    '--monaco-scrollbar-arrow-icon-font-size',\n    `${iconFontSize}px`\n  );\n\n// position arrow icon in arrow box\n  const iconTopBottom =\n    scrollbarWidth < 11 ? 0 : scrollbarWidth / 2 - iconFontSize / 2 - 1;\n  const iconLeftPosition =\n    scrollbarWidth < 11 ? 0 : (scrollbarWidth - iconFontSize) / 2;\n  root.style.setProperty(\n    '--monaco-scrollbar-arrow-icon-top-bottom',\n    `${iconTopBottom}px`\n  );\n  root.style.setProperty(\n    '--monaco-scrollbar-arrow-icon-left',\n    `${iconLeftPosition}px`\n  );\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3939,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\index.ts",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d7b85c7f05279a9f680ba51b65ce531d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\post-update.ts",
    "source_type": "git_repo",
    "title": "post-update",
    "content": "import { from, Observable } from 'rxjs';\nimport { post } from '../../../utils/ajax';\nimport type { ResponseWithData } from '../../../utils/ajax';\n\ninterface PostData {\n  endpoint: string;\n  payload: unknown;\n}\n\nexport default function postUpdate$({\n  endpoint,\n  payload\n}: PostData): Observable<ResponseWithData<void>> {\n  return from(post(endpoint, payload));\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 364,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\post-update.ts",
      "source_type": "git_repo"
    },
    "token_count": 77,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a5051d1b1330399ca3d5ce2d245a807d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\typescript-worker-handler.ts",
    "source_type": "git_repo",
    "title": "typescript-worker-handler",
    "content": "import typeScriptWorkerData from '../../../../config/browser-scripts/typescript-worker.json';\nimport { awaitResponse } from './awaitable-messenger';\n\nconst typeScriptWorkerSrc = `/js/${typeScriptWorkerData.filename}.js`;\n\nlet worker: Worker | null = null;\n\nfunction getTypeScriptWorker(): Worker {\n  if (!worker) {\n    worker = new Worker(typeScriptWorkerSrc);\n  }\n  return worker;\n}\n\nexport function compileTypeScriptCode(code: string): Promise<string> {\n  return awaitResponse({\n    messenger: getTypeScriptWorker(),\n    message: { type: 'compile', code },\n    onMessage: (data, onSuccess, onFailure) => {\n      if (data.type === 'compiled') {\n        if (!data.error) {\n          onSuccess(data.value);\n        } else {\n          onFailure(Error(data.error));\n        }\n      } else {\n        onFailure(Error('unable to compile code'));\n      }\n    }\n  });\n}\n\nexport function checkTSServiceIsReady(): Promise<boolean> {\n  return awaitResponse({\n    messenger: getTypeScriptWorker(),\n    message: { type: 'check-is-ready' },\n    onMessage: (data, onSuccess) => {\n      if (data.type === 'ready') {\n        onSuccess(true);\n      }\n      // otherwise it times out.\n    }\n  });\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1180,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\typescript-worker-handler.ts",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f0ed299392ff92be26a17eb656d4438a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\use-detect-os.ts",
    "source_type": "git_repo",
    "title": "use-detect-os",
    "content": "import { useEffect, useState } from 'react';\n\ntype UserOS = 'MAC' | 'WIN' | 'LINUX' | 'AIX' | 'OTHER' | 'LOADING';\n\ntype UserOSState = {\n  os: UserOS;\n  architecture: string;\n};\n\ninterface NavigatorUAData {\n  getHighEntropyValues(hints: string[]): Promise<Record<string, string>>;\n}\n\ninterface Navigator {\n  userAgentData?: NavigatorUAData;\n}\n\nconst getArchitecture = async (): Promise<string> => {\n  if ((navigator as Navigator).userAgentData?.getHighEntropyValues) {\n    try {\n      const { architecture } =\n        (await (navigator as Navigator).userAgentData?.getHighEntropyValues([\n          'architecture'\n        ])) ?? {};\n      if (architecture) {\n        return architecture;\n      }\n    } catch (error) {\n      console.error(\n        'Error fetching architecture via User-Agent Client Hints:',\n        error\n      );\n    }\n  }\n\nconst userAgent = navigator.userAgent;\n\nif (/x86_64|Win64|WOW64|amd64/.test(userAgent)) {\n    return 'x86_64';\n  } else if (/i686|x86|Win32/.test(userAgent)) {\n    return 'x86';\n  } else if (/arm|aarch64/.test(userAgent)) {\n    return /aarch64/.test(userAgent) ? 'ARM64' : 'ARM';\n  }\n\nreturn 'Unknown';\n};\n\nexport const detectOsInUserAgent = (userAgent: string | undefined): UserOS => {\n  const osMatch = userAgent?.match(/(Win|Mac|Linux)/);\n  return osMatch ? (osMatch[1].toUpperCase() as UserOS) : 'OTHER';\n};\n\nexport const detectOS = (): UserOS => detectOsInUserAgent(navigator?.userAgent);\n\nconst useDetectOS = () => {\n  const [userOS, setUserOS] = useState<UserOSState>({\n    os: 'LOADING',\n    architecture: 'LOADING'\n  });\n\nuseEffect(() => {\n    Promise.all([getArchitecture()])\n      .then(([arch]) => {\n        setUserOS({\n          os: detectOS(),\n          architecture: arch ? arch : ''\n        });\n      })\n      .catch(console.error);\n  }, []);\n\nreturn userOS;\n};\n\nexport default useDetectOS;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 1857,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\use-detect-os.ts",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5ef37427f3c972d75a73422801817bdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
    "source_type": "git_repo",
    "title": "python-worker-handler",
    "content": "// TODO: This might be cleaner as a class.\nimport pythonWorkerData from '../../../../config/browser-scripts/python-worker.json';\n\nconst pythonWorkerSrc = `/js/${pythonWorkerData.filename}.js`;\n\nlet worker: Worker | null = null;\nlet listener: ((event: MessageEvent) => void) | null = null;\ntype Code = {\n  contents: string;\n  editableContents: string;\n};\n// We need to keep track of the last code message so we can re-run it if the\n// worker is reset.\nlet lastCodeMessage: Code | null = null;\n\nfunction getPythonWorker(): Worker {\n  if (!worker) {\n    worker = new Worker(pythonWorkerSrc);\n  }\n  return worker;\n}\n\ntype PythonWorkerEvent = {\n  data: {\n    type:\n      | 'print'\n      | 'input'\n      | 'contentLoaded'\n      | 'reset'\n      | 'stopped'\n      | 'is-alive';\n    text?: string;\n  };\n};\n\n/**\n * Registers a terminal to receive print and input messages from the python worker.\n * @param handlers\n * @param handlers.print - A function that handles print messages from the python worker\n * @param handlers.input - A function that handles input messages from the python worker\n * @param reset - A function that resets the terminal\n */\nexport function registerTerminal(handlers: {\n  print: (text?: string) => void;\n  input: (text?: string) => void;\n  reset: () => void;\n}): void {\n  const pythonWorker = getPythonWorker();\n  if (listener) pythonWorker.removeEventListener('message', listener);\n  listener = (event: PythonWorkerEvent) => {\n    // TODO: refactor text -> value or msg.\n    const { type, text } = event.data;",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3761,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "851637447aaefb37d79a6a828f6f3422",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
    "source_type": "git_repo",
    "title": "python-worker-handler",
    "content": "worker * @param handlers.input - A function that handles input messages from the python worker * @param reset - A function that resets the terminal */ export function registerTerminal(handlers: { print: (text?: string) => void; input: (text?: string) => void; reset: () => void; }): void { const pythonWorker = getPythonWorker(); if (listener) pythonWorker.removeEventListener('message', listener); listener = (event: PythonWorkerEvent) => { // TODO: refactor text -> value or msg. const { type, text } = event.data;\n\n// TODO: this is a bit messy with the 'handlers' as well as the implicit\n    // handlers reacting to stopped and contentLoaded messages.\n    if (type === 'contentLoaded') return; // Ignore contentLoaded messages for now.\n    if (type === 'is-alive') {\n      clearTimeout(Number(text));\n      return;\n    }\n    // 'stopped' means the worker is ignoring 'run' messages.\n    if (type === 'stopped') {\n      clearTimeout(Number(text));\n      sendListenMessage();\n      // Generally, we get here if the learner changes their code while the\n      // worker is busy. In that case, we want to re-run the code on receipt of\n      // the 'stopped' message.\n      if (lastCodeMessage) runPythonCode(lastCodeMessage);\n    } else {\n      handlers[type](text);\n    }\n  };\n  pythonWorker.addEventListener('message', listener);\n}\n\n/**\n * Tries to cancel the currently running code and, if it cannot, terminate the worker.\n */\nexport function interruptCodeExecution(): void {\n  const resetId = setTimeout(() => {\n    getPythonWorker().terminate();\n    worker = new Worker(pythonWorkerSrc);\n    if (listener) getPythonWorker().addEventListener('message', listener);\n  }, 1000) as unknown as number; // This is running the browser, so setTimeout returns a number, but TS doesn't know that.\n  navigator.serviceWorker.controller?.postMessage(\n    JSON.stringify({\n      type: 'cancel',\n      value: '' + resetId // Converting to string for convenience. (TODO: check if necessary)\n    })\n  );",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3761,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "50589299d26f74174c1d18fa2bf50db6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
    "source_type": "git_repo",
    "title": "python-worker-handler",
    "content": "to cancel the currently running code and, if it cannot, terminate the worker. */ export function interruptCodeExecution(): void { const resetId = setTimeout(() => { getPythonWorker().terminate(); worker = new Worker(pythonWorkerSrc); if (listener) getPythonWorker().addEventListener('message', listener); }, 1000) as unknown as number; // This is running the browser, so setTimeout returns a number, but TS doesn't know that. navigator.serviceWorker.controller?.postMessage( JSON.stringify({ type: 'cancel', value: '' + resetId // Converting to string for convenience. (TODO: check if necessary) }) );\n\n// TODO: Since loading pyodide is slow, there's a risk that this will\n  // terminate the worker before it's finished loading. As such we should check\n  // if the worker has loaded before attempting to reset it (or send run\n  // messages).\n\n// TODO: sort out the terminology.\n  getPythonWorker().postMessage({ type: 'cancel', value: resetId });\n}\n\nexport function runPythonCode(code: {\n  contents: string;\n  editableContents: string;\n}): void {\n  lastCodeMessage = code;\n  getPythonWorker().postMessage({ type: 'run', code });\n}\n\n// If the python worker reports that it has stopped, we need to send a listen\n// message to get it to listen to run messages again.\nfunction sendListenMessage(): void {\n  getPythonWorker().postMessage({ type: 'listen' });\n}",
    "metadata": {
      "file_extension": ".ts",
      "file_type": "typescript",
      "file_size": 3761,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\python-worker-handler.ts",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "90e2fe930ae631a196c6bafe6bde4560",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
    "source_type": "git_repo",
    "title": "worker-executor",
    "content": "export class WorkerExecutor {\n  constructor(\n    workerName,\n    { location = '/js/', maxWorkers = 2, terminateWorker = false } = {}\n  ) {\n    this._workerPool = [];\n    this._taskQueue = [];\n    this._workersInUse = 0;\n    this._maxWorkers = maxWorkers;\n    this._terminateWorker = terminateWorker;\n    this._scriptURL = `${location}${workerName}.js`;\n\nthis._getWorker = this._getWorker.bind(this);\n  }\n\nasync _getWorker() {\n    return this._workerPool.length\n      ? this._workerPool.shift()\n      : this._createWorker();\n  }\n\n_createWorker() {\n    return new Promise((resolve, reject) => {\n      const newWorker = new Worker(this._scriptURL);\n      newWorker.onmessage = e => {\n        if (e.data?.type === 'contentLoaded') {\n          resolve(newWorker);\n        }\n      };\n      newWorker.onerror = err => reject(err);\n    });\n  }\n\n_handleTaskEnd(task) {\n    return () => {\n      this._workersInUse--;\n      const worker = task._worker;\n      if (worker) {\n        if (this._terminateWorker) {\n          worker.terminate();\n        } else {\n          worker.onmessage = null;\n          worker.onerror = null;\n          this._workerPool.push(worker);\n        }\n      }\n      this._processQueue();\n    };\n  }\n\n_processQueue() {\n    while (this._workersInUse < this._maxWorkers && this._taskQueue.length) {\n      const task = this._taskQueue.shift();\n      const handleTaskEnd = this._handleTaskEnd(task);\n      task._execute(this._getWorker).done.then(handleTaskEnd, handleTaskEnd);\n      this._workersInUse++;\n    }\n  }\n\nexecute(data, timeout = 1000) {\n    const task = eventify({});\n    task._execute = function (getWorker) {\n      getWorker().then(\n        worker => {\n          task._worker = worker;\n          const timeoutId = setTimeout(() => {\n            task._worker.terminate();\n            task._worker = null;\n            this.emit('error', { message: 'timeout' });\n          }, timeout);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3873,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bb9c130a65f0254a595601316134c0d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
    "source_type": "git_repo",
    "title": "worker-executor",
    "content": "worker.terminate(); } else { worker.onmessage = null; worker.onerror = null; this._workerPool.push(worker); } } this._processQueue(); }; } _processQueue() { while (this._workersInUse < this._maxWorkers && this._taskQueue.length) { const task = this._taskQueue.shift(); const handleTaskEnd = this._handleTaskEnd(task); task._execute(this._getWorker).done.then(handleTaskEnd, handleTaskEnd); this._workersInUse++; } } execute(data, timeout = 1000) { const task = eventify({}); task._execute = function (getWorker) { getWorker().then( worker => { task._worker = worker; const timeoutId = setTimeout(() => { task._worker.terminate(); task._worker = null; this.emit('error', { message: 'timeout' }); }, timeout);\n\nworker.onmessage = e => {\n            clearTimeout(timeoutId);\n            // data.type is undefined when the message has been processed\n            // successfully and defined when something else has happened (e.g.\n            // an error occurred)\n            if (e.data?.type) {\n              this.emit(e.data.type, e.data.data);\n            } else {\n              this.emit('done', e.data);\n            }\n          };\n\nworker.onerror = e => {\n            clearTimeout(timeoutId);\n            this.emit('error', { message: e.message });\n          };\n\nworker.postMessage(data);\n        },\n        err => this.emit('error', err)\n      );\n      return this;\n    };\n\ntask.done = new Promise((resolve, reject) => {\n      task\n        .once('done', data => resolve(data))\n        .once('error', err => reject(err.message));\n    });\n\nthis._taskQueue.push(task);\n    this._processQueue();\n    return task;\n  }\n}\n\n// Error and completion handling\nconst eventify = self => {\n  self._events = {};\n\nself.on = (event, listener) => {\n    if (typeof self._events[event] === 'undefined') {\n      self._events[event] = [];\n    }\n    self._events[event].push(listener);\n    return self;\n  };",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3873,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "da3e6edea5710b7c172eb45d405407b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
    "source_type": "git_repo",
    "title": "worker-executor",
    "content": "=> { clearTimeout(timeoutId); this.emit('error', { message: e.message }); }; worker.postMessage(data); }, err => this.emit('error', err) ); return this; }; task.done = new Promise((resolve, reject) => { task .once('done', data => resolve(data)) .once('error', err => reject(err.message)); }); this._taskQueue.push(task); this._processQueue(); return task; } } // Error and completion handling const eventify = self => { self._events = {}; self.on = (event, listener) => { if (typeof self._events[event] === 'undefined') { self._events[event] = []; } self._events[event].push(listener); return self; };\n\nself.removeListener = (event, listener) => {\n    if (typeof self._events[event] !== 'undefined') {\n      const index = self._events[event].indexOf(listener);\n      if (index !== -1) {\n        self._events[event].splice(index, 1);\n      }\n    }\n    return self;\n  };\n\nself.emit = (event, ...args) => {\n    if (typeof self._events[event] !== 'undefined') {\n      const listeners = self._events[event].slice();\n      for (let listener of listeners) {\n        listener.apply(self, args);\n      }\n    }\n    return self;\n  };\n\nself.once = (event, listener) => {\n    self.on(event, function handler(...args) {\n      self.removeListener(event, handler);\n      listener.apply(self, args);\n    });\n    return self;\n  };\n\nreturn self;\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3873,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.js",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f0d9e41d97eb392b8f37e8b9112af328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "/**\n * @jest-environment node\n */\n\nimport { WorkerExecutor } from './worker-executor';\n\nfunction mockWorker({ init, postMessage, terminate } = {}) {\n  global.Worker = jest.fn(function () {\n    setImmediate(\n      (init && init(this)) ||\n        (() =>\n          this.onmessage && this.onmessage({ data: { type: 'contentLoaded' } }))\n    );\n    this.onmessage = null;\n    this.postMessage =\n      postMessage ||\n      function (data) {\n        setImmediate(\n          () => this.onmessage && this.onmessage({ data: `${data} processed` })\n        );\n      };\n    this.terminate = terminate || (() => {});\n    return this;\n  });\n}\n\nafterEach(() => {\n  delete global.Worker;\n});\n\nit('Worker executor should successfully execute one task', async () => {\n  const terminateHandler = jest.fn();\n  mockWorker({ terminate: terminateHandler });\n  const testWorker = new WorkerExecutor('test');\n  expect(testWorker).not.toBeUndefined();\n\nconst task = testWorker.execute('test');\n  expect(task).not.toBeUndefined();\n  expect(task.done).not.toBeUndefined();\n  const handler = jest.fn();\n  task.on('done', handler);\n  const errorHandler = jest.fn();\n  task.on('error', errorHandler);\n\nawait expect(task.done).resolves.toBe('test processed');\n\nexpect(handler).toHaveBeenCalledTimes(1);\n  expect(handler).toHaveBeenCalledWith('test processed');\n\nexpect(errorHandler).not.toHaveBeenCalled();\n  expect(terminateHandler).not.toHaveBeenCalled();\n\nexpect(global.Worker).toHaveBeenCalledTimes(1);\n  expect(global.Worker).toHaveBeenCalledWith('/js/test.js');\n});\n\nit('Worker executor should successfully execute two tasks in parallel', async () => {\n  const terminateHandler = jest.fn();\n  mockWorker({ terminate: terminateHandler });\n  const testWorker = new WorkerExecutor('test');\n\nconst task1 = testWorker.execute('test1');\n  const handler1 = jest.fn();\n  task1.on('done', handler1);\n  const errorHandler1 = jest.fn();\n  task1.on('error', errorHandler1);\n\nconst task2 = testWorker.execute('test2');\n  const handler2 = jest.fn();\n  task2.on('done', handler2);\n  const errorHandler2 = jest.fn();\n  task2.on('error', errorHandler2);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "516df066ca9167b2c64f24ab496e4e7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "handler); const errorHandler = jest.fn(); task.on('error', errorHandler); await expect(task.done).resolves.toBe('test processed'); expect(handler).toHaveBeenCalledTimes(1); expect(handler).toHaveBeenCalledWith('test processed'); expect(errorHandler).not.toHaveBeenCalled(); expect(terminateHandler).not.toHaveBeenCalled(); expect(global.Worker).toHaveBeenCalledTimes(1); expect(global.Worker).toHaveBeenCalledWith('/js/test.js'); }); it('Worker executor should successfully execute two tasks in parallel', async () => { const terminateHandler = jest.fn(); mockWorker({ terminate: terminateHandler }); const testWorker = new WorkerExecutor('test'); const task1 = testWorker.execute('test1'); const handler1 = jest.fn(); task1.on('done', handler1); const errorHandler1 = jest.fn(); task1.on('error', errorHandler1); const task2 = testWorker.execute('test2'); const handler2 = jest.fn(); task2.on('done', handler2); const errorHandler2 = jest.fn(); task2.on('error', errorHandler2);\n\nawait expect(Promise.all([task1.done, task2.done])).resolves.toEqual([\n    'test1 processed',\n    'test2 processed'\n  ]);\n\nexpect(handler1).toHaveBeenCalledTimes(1);\n  expect(handler1).toHaveBeenCalledWith('test1 processed');\n  expect(errorHandler1).not.toHaveBeenCalled();\n\nexpect(handler2).toHaveBeenCalledTimes(1);\n  expect(handler2).toHaveBeenCalledWith('test2 processed');\n  expect(errorHandler2).not.toHaveBeenCalled();\n  expect(terminateHandler).not.toHaveBeenCalled();\n\nexpect(global.Worker).toHaveBeenCalledTimes(2);\n});\n\nit('Worker executor should successfully execute 3 tasks in parallel and use two workers', async () => {\n  mockWorker();\n  const testWorker = new WorkerExecutor('test');\n\nconst task1 = testWorker.execute('test1');\n  const task2 = testWorker.execute('test2');\n  const task3 = testWorker.execute('test3');\n  await expect(\n    Promise.all([task1.done, task2.done, task3.done])\n  ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']);\n\nexpect(global.Worker).toHaveBeenCalledTimes(2);\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "3a45fd977bd993fb6cdc9c33a5713ed2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "jest.fn(); task2.on('done', handler2); const errorHandler2 = jest.fn(); task2.on('error', errorHandler2); await expect(Promise.all([task1.done, task2.done])).resolves.toEqual([ 'test1 processed', 'test2 processed' ]); expect(handler1).toHaveBeenCalledTimes(1); expect(handler1).toHaveBeenCalledWith('test1 processed'); expect(errorHandler1).not.toHaveBeenCalled(); expect(handler2).toHaveBeenCalledTimes(1); expect(handler2).toHaveBeenCalledWith('test2 processed'); expect(errorHandler2).not.toHaveBeenCalled(); expect(terminateHandler).not.toHaveBeenCalled(); expect(global.Worker).toHaveBeenCalledTimes(2); }); it('Worker executor should successfully execute 3 tasks in parallel and use two workers', async () => { mockWorker(); const testWorker = new WorkerExecutor('test'); const task1 = testWorker.execute('test1'); const task2 = testWorker.execute('test2'); const task3 = testWorker.execute('test3'); await expect( Promise.all([task1.done, task2.done, task3.done]) ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']); expect(global.Worker).toHaveBeenCalledTimes(2); });\n\nit('Worker executor should successfully execute 3 tasks, use 3 workers and terminate each worker', async () => {\n  const terminateHandler = jest.fn();\n  mockWorker({ terminate: terminateHandler });\n  const testWorker = new WorkerExecutor('test', { terminateWorker: true });\n\nconst task1 = testWorker.execute('test1');\n  const task2 = testWorker.execute('test2');\n  const task3 = testWorker.execute('test3');\n  await expect(\n    Promise.all([task1.done, task2.done, task3.done])\n  ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']);\n\nexpect(terminateHandler).toHaveBeenCalledTimes(3);\n  expect(global.Worker).toHaveBeenCalledTimes(3);\n});\n\nit('Worker executor should successfully execute 3 tasks in parallel and use 3 workers', async () => {\n  mockWorker();\n  const testWorker = new WorkerExecutor('test', { maxWorkers: 3 });",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "52c71dcc64691e7bc09b6af6ee93f3f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "each worker', async () => { const terminateHandler = jest.fn(); mockWorker({ terminate: terminateHandler }); const testWorker = new WorkerExecutor('test', { terminateWorker: true }); const task1 = testWorker.execute('test1'); const task2 = testWorker.execute('test2'); const task3 = testWorker.execute('test3'); await expect( Promise.all([task1.done, task2.done, task3.done]) ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']); expect(terminateHandler).toHaveBeenCalledTimes(3); expect(global.Worker).toHaveBeenCalledTimes(3); }); it('Worker executor should successfully execute 3 tasks in parallel and use 3 workers', async () => { mockWorker(); const testWorker = new WorkerExecutor('test', { maxWorkers: 3 });\n\nconst task1 = testWorker.execute('test1');\n  const task2 = testWorker.execute('test2');\n  const task3 = testWorker.execute('test3');\n  await expect(\n    Promise.all([task1.done, task2.done, task3.done])\n  ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']);\n\nexpect(global.Worker).toHaveBeenCalledTimes(3);\n});\n\nit('Worker executor should successfully execute 3 tasks and use 1 worker', async () => {\n  mockWorker();\n  const testWorker = new WorkerExecutor('test', { maxWorkers: 1 });\n\nconst task1 = testWorker.execute('test1');\n  const task2 = testWorker.execute('test2');\n  const task3 = testWorker.execute('test3');\n  await expect(\n    Promise.all([task1.done, task2.done, task3.done])\n  ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']);\n\nexpect(global.Worker).toHaveBeenCalledTimes(1);\n});\n\nit('Worker executor should reject task', async () => {\n  const error = { message: 'Error on init worker' };\n  mockWorker({\n    init: () => {\n      throw error;\n    }\n  });\n  const testWorker = new WorkerExecutor('test');\n\nconst task = testWorker.execute('test');\n  const errorHandler = jest.fn();\n  task.on('error', errorHandler);\n  await expect(task.done).rejects.toBe(error.message);\n\nexpect(errorHandler).toHaveBeenCalledTimes(1);\n  expect(errorHandler).toHaveBeenCalledWith(error);\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "06d15a84f12222880bce2801e4082fdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "maxWorkers: 1 }); const task1 = testWorker.execute('test1'); const task2 = testWorker.execute('test2'); const task3 = testWorker.execute('test3'); await expect( Promise.all([task1.done, task2.done, task3.done]) ).resolves.toEqual(['test1 processed', 'test2 processed', 'test3 processed']); expect(global.Worker).toHaveBeenCalledTimes(1); }); it('Worker executor should reject task', async () => { const error = { message: 'Error on init worker' }; mockWorker({ init: () => { throw error; } }); const testWorker = new WorkerExecutor('test'); const task = testWorker.execute('test'); const errorHandler = jest.fn(); task.on('error', errorHandler); await expect(task.done).rejects.toBe(error.message); expect(errorHandler).toHaveBeenCalledTimes(1); expect(errorHandler).toHaveBeenCalledWith(error); });\n\nit('Worker executor should emit LOG events', async () => {\n  mockWorker({\n    postMessage: function (data) {\n      setImmediate(() => {\n        for (let i = 0; i < 3; i++) {\n          // eslint-disable-next-line no-unused-expressions\n          this.onmessage && this.onmessage({ data: { type: 'LOG', data: i } });\n        }\n        // eslint-disable-next-line no-unused-expressions\n        this.onmessage && this.onmessage({ data: `${data} processed` });\n        setImmediate(\n          () =>\n            this.onmessage && this.onmessage({ data: { type: 'LOG', data: 3 } })\n        );\n      });\n    }\n  });\n  const testWorker = new WorkerExecutor('test');\n\nconst task = testWorker.execute('test');\n  const handler = jest.fn();\n  task.on('done', handler);\n  const errorHandler = jest.fn();\n  task.on('error', errorHandler);\n  const logHandler = jest.fn();\n  task.on('LOG', logHandler);\n\nawait expect(task.done).resolves.toBe('test processed');\n\nexpect(handler).toHaveBeenCalledTimes(1);\n  expect(handler).toHaveBeenCalledWith('test processed');\n  expect(errorHandler).not.toHaveBeenCalled();\n\nexpect(logHandler).toHaveBeenCalledTimes(3);\n  for (let i = 0; i < 3; i++) {\n    expect(logHandler.mock.calls[i][0]).toBe(i);\n  }\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "b75faa902700d87efd821f1fd524c434",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
    "source_type": "git_repo",
    "title": "worker-executor.test",
    "content": "// eslint-disable-next-line no-unused-expressions this.onmessage && this.onmessage({ data: `${data} processed` }); setImmediate( () => this.onmessage && this.onmessage({ data: { type: 'LOG', data: 3 } }) ); }); } }); const testWorker = new WorkerExecutor('test'); const task = testWorker.execute('test'); const handler = jest.fn(); task.on('done', handler); const errorHandler = jest.fn(); task.on('error', errorHandler); const logHandler = jest.fn(); task.on('LOG', logHandler); await expect(task.done).resolves.toBe('test processed'); expect(handler).toHaveBeenCalledTimes(1); expect(handler).toHaveBeenCalledWith('test processed'); expect(errorHandler).not.toHaveBeenCalled(); expect(logHandler).toHaveBeenCalledTimes(3); for (let i = 0; i < 3; i++) { expect(logHandler.mock.calls[i][0]).toBe(i); } });\n\nit('Worker executor should reject task on timeout', async () => {\n  const terminateHandler = jest.fn();\n  mockWorker({\n    postMessage: () => {},\n    terminate: terminateHandler\n  });\n  const testWorker = new WorkerExecutor('test');\n\nconst task = testWorker.execute('test', 0);\n  const errorHandler = jest.fn();\n  task.on('error', errorHandler);\n  await expect(task.done).rejects.toBe('timeout');\n\nexpect(errorHandler).toHaveBeenCalledTimes(1);\n  expect(errorHandler.mock.calls[0][0]).toEqual({ message: 'timeout' });\n\nexpect(terminateHandler).toHaveBeenCalledTimes(1);\n});\n\nit('Worker executor should get worker from specified location', async () => {\n  mockWorker();\n  const testWorker = new WorkerExecutor('test', {\n    location: '/other/location/'\n  });\n\nconst task = testWorker.execute('test');\n  await expect(task.done).resolves.toBe('test processed');\n\nexpect(global.Worker).toHaveBeenCalledTimes(1);\n  expect(global.Worker).toHaveBeenCalledWith('/other/location/test.js');\n});\n\nit('Task should only emit handler once', () => {\n  mockWorker();\n  const testWorker = new WorkerExecutor('test');\n  const task = testWorker.execute('test');\n  const handler = jest.fn();\n  task.once('testOnce', handler);\n\ntask.emit('testOnce', handler);\n  task.emit('testOnce', handler);\n  expect(handler).toHaveBeenCalledTimes(1);\n});",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7954,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\utils\\worker-executor.test.js",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "be0f41edf91b20181ddc8131fb95c8f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql } from 'gatsby';\nimport React, { useEffect, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport { withTranslation } from 'react-i18next';\nimport type { TFunction } from 'i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Spacer } from '@freecodecamp/ui';\n\nimport LearnLayout from '../../../../components/layouts/learn';\nimport { isSignedInSelector } from '../../../../redux/selectors';\nimport {\n  ChallengeMeta,\n  ChallengeNode,\n  Test\n} from '../../../../redux/prop-types';\nimport ChallengeDescription from '../../components/challenge-description';\nimport Hotkeys from '../../components/hotkeys';\nimport ChallengeTitle from '../../components/challenge-title';\nimport CompletionModal from '../../components/completion-modal';\nimport HelpModal from '../../components/help-modal';\nimport Output from '../../components/output';\nimport TestSuite from '../../components/test-suite';\nimport {\n  challengeMounted,\n  executeChallenge,\n  initConsole,\n  initTests,\n  updateChallengeMeta,\n  updateSolutionFormValues\n} from '../../redux/actions';\nimport {\n  challengeTestsSelector,\n  consoleOutputSelector,\n  isChallengeCompletedSelector\n} from '../../redux/selectors';\n\nimport { getGuideUrl } from '../../utils';\nimport { getChallengePaths } from '../../utils/challenge-paths';\nimport SolutionForm from '../solution-form';\nimport ProjectToolPanel from '../tool-panel';\n\nimport '../../components/test-frame.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  consoleOutputSelector,\n  challengeTestsSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  (\n    output: string,\n    tests: Test[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean\n  ) => ({\n    tests,\n    output,\n    isChallengeCompleted,\n    isSignedIn\n  })\n);\n\nconst mapDispatchToActions = {\n  challengeMounted,\n  executeChallenge,\n  initConsole,\n  initTests,\n  updateChallengeMeta,\n  updateSolutionFormValues\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6271,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "2cfbdff064c8469b62fdadd92351bc2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "initTests, updateChallengeMeta, updateSolutionFormValues } from '../../redux/actions'; import { challengeTestsSelector, consoleOutputSelector, isChallengeCompletedSelector } from '../../redux/selectors'; import { getGuideUrl } from '../../utils'; import { getChallengePaths } from '../../utils/challenge-paths'; import SolutionForm from '../solution-form'; import ProjectToolPanel from '../tool-panel'; import '../../components/test-frame.css'; // Redux Setup const mapStateToProps = createSelector( consoleOutputSelector, challengeTestsSelector, isChallengeCompletedSelector, isSignedInSelector, ( output: string, tests: Test[], isChallengeCompleted: boolean, isSignedIn: boolean ) => ({ tests, output, isChallengeCompleted, isSignedIn }) ); const mapDispatchToActions = { challengeMounted, executeChallenge, initConsole, initTests, updateChallengeMeta, updateSolutionFormValues };\n\n// Types\ninterface BackEndProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  executeChallenge: (options: { showCompletionModal: boolean }) => void;\n  forumTopicId: number;\n  id: string;\n  initConsole: () => void;\n  initTests: (tests: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  output: string;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  tests: Test[];\n  title: string;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\nconst ShowBackEnd = (props: BackEndProps) => {\n  const container = useRef<HTMLElement>(null);\n\nconst handleSubmit = ({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }) => {\n    props.executeChallenge({ showCompletionModal });\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6271,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "973c4473f735f7c27e212b0c4d631ecf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "string; executeChallenge: (options: { showCompletionModal: boolean }) => void; forumTopicId: number; id: string; initConsole: () => void; initTests: (tests: Test[]) => void; isChallengeCompleted: boolean; isSignedIn: boolean; output: string; pageContext: { challengeMeta: ChallengeMeta; }; t: TFunction; tests: Test[]; title: string; updateChallengeMeta: (arg0: ChallengeMeta) => void; updateSolutionFormValues: () => void; } const ShowBackEnd = (props: BackEndProps) => { const container = useRef<HTMLElement>(null); const handleSubmit = ({ showCompletionModal }: { showCompletionModal: boolean; }) => { props.executeChallenge({ showCompletionModal }); };\n\nuseEffect(() => {\n    const {\n      challengeMounted,\n      initConsole,\n      initTests,\n      updateChallengeMeta,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta }\n    } = props;\n    initConsole();\n    initTests(tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst {\n    data: {\n      challengeNode: {\n        challenge: {\n          fields: { blockName },\n          challengeType,\n          forumTopicId,\n          title,\n          description,\n          instructions,\n          translationPending,\n          superBlock,\n          block\n        }\n      }\n    },\n    isChallengeCompleted,\n    output,\n    t,\n    tests,\n    updateSolutionFormValues\n  } = props;\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6271,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "761d0dbd8cf8a7417b4cea6586de4d32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "}, title, challengeType, helpCategory } } }, pageContext: { challengeMeta } } = props; initConsole(); initTests(tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const { data: { challengeNode: { challenge: { fields: { blockName }, challengeType, forumTopicId, title, description, instructions, translationPending, superBlock, block } } }, isChallengeCompleted, output, t, tests, updateSolutionFormValues } = props; const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`;\n\nreturn (\n    <Hotkeys containerRef={container}>\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container>\n          <Row>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='m' />\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n              <ChallengeDescription\n                superBlock={superBlock}\n                description={description}\n                instructions={instructions}\n              />\n              <Spacer size='m' />\n              <SolutionForm\n                challengeType={challengeType}\n                onSubmit={handleSubmit}\n                updateSolutionForm={updateSolutionFormValues}\n              />\n              <ProjectToolPanel\n                guideUrl={getGuideUrl({ forumTopicId, title })}\n              />\n              <br />\n              <Output\n                defaultOutput={`/**\n*\n* ${t('learn.test-output')}\n*\n*\n*/`}\n                output={output}\n              />\n              <TestSuite tests={tests} />\n              <Spacer size='m' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6271,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "db0f0b42d2a649dcfb5b3e3ca11e14e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "<LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container> <Row> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <ChallengeDescription superBlock={superBlock} description={description} instructions={instructions} /> <Spacer size='m' /> <SolutionForm challengeType={challengeType} onSubmit={handleSubmit} updateSolutionForm={updateSolutionFormValues} /> <ProjectToolPanel guideUrl={getGuideUrl({ forumTopicId, title })} /> <br /> <Output defaultOutput={`/** * * ${t('learn.test-output')} * * */`} output={output} /> <TestSuite tests={tests} /> <Spacer size='m' /> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> </LearnLayout> </Hotkeys> ); };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToActions\n)(withTranslation()(ShowBackEnd));\n\nexport const query = graphql`\n  query BackendChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        forumTopicId\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 6271,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\backend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a41ca8f8920bcc7a1ebd2d80bbc5d430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "import { graphql } from 'gatsby';\nimport React, { useEffect, useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport { type TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Spacer } from '@freecodecamp/ui';\n\nimport LearnLayout from '../../../../components/layouts/learn';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  Test\n} from '../../../../redux/prop-types';\nimport ChallengeDescription from '../../components/challenge-description';\nimport Hotkeys from '../../components/hotkeys';\nimport ChallengeTitle from '../../components/challenge-title';\nimport CompletionModal from '../../components/completion-modal';\nimport HelpModal from '../../components/help-modal';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../../redux/actions';\nimport { isChallengeCompletedSelector } from '../../redux/selectors';\nimport { getGuideUrl } from '../../utils';\nimport SolutionForm from '../solution-form';\nimport ProjectToolPanel from '../tool-panel';\nimport { getChallengePaths } from '../../utils/challenge-paths';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion')\n    },\n    dispatch\n  );\n\n// Types\ninterface ProjectProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f613e4382be598872dbe15ef59f8fccf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "Redux Setup const mapStateToProps = createSelector( isChallengeCompletedSelector, (isChallengeCompleted: boolean) => ({ isChallengeCompleted }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { initTests, updateChallengeMeta, challengeMounted, updateSolutionFormValues, openCompletionModal: () => openModal('completion') }, dispatch ); // Types interface ProjectProps { challengeMounted: (arg0: string) => void; data: { challengeNode: ChallengeNode }; initTests: (xs: Test[]) => void; isChallengeCompleted: boolean; openCompletionModal: () => void; pageContext: { challengeMeta: ChallengeMeta; }; t: TFunction; updateChallengeMeta: (arg0: ChallengeMeta) => void; updateSolutionFormValues: () => void; }\n\nconst ShowFrontEndProject = (props: ProjectProps) => {\n  const handleSubmit = ({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }): void => {\n    if (showCompletionModal) {\n      props.openCompletionModal();\n    }\n  };\n\nconst container = useRef<HTMLElement>(null);\n\nuseEffect(() => {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { fields, title, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = props;\n    initTests(fields.tests);\n    const challengePaths = getChallengePaths({\n      currentCurriculumPaths: challengeMeta\n    });\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory,\n      ...challengePaths\n    });\n    challengeMounted(challengeMeta.id);\n    container.current?.focus();\n    // This effect should be run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst {\n    data: {\n      challengeNode: {\n        challenge: {\n          challengeType,\n          fields: { blockName },\n          forumTopicId,\n          title,\n          description,\n          instructions,\n          superBlock,\n          block,\n          translationPending\n        }\n      }\n    },\n    isChallengeCompleted,\n    t,\n    updateSolutionFormValues\n  } = props;\n\nconst blockNameTitle = `${t(\n    `intro:${superBlock}.blocks.${block}.title`\n  )} - ${title}`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "13a4bb308e4e2112b1a516457bf125f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "{ challengeMeta }, initTests, updateChallengeMeta } = props; initTests(fields.tests); const challengePaths = getChallengePaths({ currentCurriculumPaths: challengeMeta }); updateChallengeMeta({ ...challengeMeta, title, challengeType, helpCategory, ...challengePaths }); challengeMounted(challengeMeta.id); container.current?.focus(); // This effect should be run once on mount // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const { data: { challengeNode: { challenge: { challengeType, fields: { blockName }, forumTopicId, title, description, instructions, superBlock, block, translationPending } } }, isChallengeCompleted, t, updateSolutionFormValues } = props; const blockNameTitle = `${t( `intro:${superBlock}.blocks.${block}.title` )} - ${title}`;\n\nreturn (\n    <Hotkeys containerRef={container}>\n      <LearnLayout>\n        <Helmet\n          title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n        />\n        <Container>\n          <Row>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='m' />\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n              <ChallengeDescription\n                superBlock={superBlock}\n                description={description}\n                instructions={instructions}\n              />\n              <Spacer size='m' />\n              <SolutionForm\n                challengeType={challengeType}\n                description={description}\n                onSubmit={handleSubmit}\n                updateSolutionForm={updateSolutionFormValues}\n              />\n              <ProjectToolPanel\n                guideUrl={getGuideUrl({ forumTopicId, title })}\n              />\n              <br />\n              <Spacer size='m' />\n            </Col>\n            <CompletionModal />\n            <HelpModal\n              challengeTitle={title}\n              challengeBlock={blockName}\n              superBlock={superBlock}\n            />\n          </Row>\n        </Container>\n      </LearnLayout>\n    </Hotkeys>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowFrontEndProject));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "73caa922449d3e9589d37a76bbc92765",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
    "source_type": "git_repo",
    "title": "show",
    "content": "- ${title}`; return ( <Hotkeys containerRef={container}> <LearnLayout> <Helmet title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`} /> <Container> <Row> <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}> <Spacer size='m' /> <ChallengeTitle isCompleted={isChallengeCompleted} translationPending={translationPending} > {title} </ChallengeTitle> <ChallengeDescription superBlock={superBlock} description={description} instructions={instructions} /> <Spacer size='m' /> <SolutionForm challengeType={challengeType} description={description} onSubmit={handleSubmit} updateSolutionForm={updateSolutionFormValues} /> <ProjectToolPanel guideUrl={getGuideUrl({ forumTopicId, title })} /> <br /> <Spacer size='m' /> </Col> <CompletionModal /> <HelpModal challengeTitle={title} challengeBlock={blockName} superBlock={superBlock} /> </Row> </Container> </LearnLayout> </Hotkeys> ); }; export default connect( mapStateToProps, mapDispatchToProps )(withTranslation()(ShowFrontEndProject));\n\nexport const query = graphql`\n  query ProjectChallenge($id: String!) {\n    challengeNode(id: { eq: $id }) {\n      challenge {\n        forumTopicId\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5608,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\projects\\frontend\\show.tsx",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b290063133590c37c1a31607d18cc386",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
    "source_type": "git_repo",
    "title": "exam-results",
    "content": "import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Spacer } from '@freecodecamp/ui';\n\nimport { formatSecondsToTime } from '../../../../utils/format-seconds';\nimport { GeneratedExamResults } from '../../../../redux/prop-types';\n\ninterface ExamResultsProps {\n  dashedName: string;\n  examResults: GeneratedExamResults;\n  exitExam: () => void;\n  title: string;\n}\n\nfunction ExamResults({\n  dashedName,\n  examResults,\n  exitExam,\n  title\n}: ExamResultsProps): JSX.Element {\n  const { t } = useTranslation();\n\nconst {\n    numberOfCorrectAnswers,\n    examTimeInSeconds,\n    numberOfQuestionsInExam,\n    passed,\n    percentCorrect\n  } = examResults;\n\n// keep this formatting\n  const downloadContent = `${title}: ${\n    passed ? t('learn.exam.passed') : t('learn.exam.not-passed')\n  }\n\n${t('learn.exam.number-of-questions', { n: numberOfQuestionsInExam })}\n${t('learn.exam.correct-answers', { n: numberOfCorrectAnswers })}\n${t('learn.exam.percent-correct', { n: percentCorrect })}\n${t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })}\n`;\n\nconst blob = new Blob([downloadContent], {\n    type: 'text/plain'\n  });\n  const downloadURL = URL.createObjectURL(blob);\n\nuseEffect(() => {\n    return () => {\n      URL.revokeObjectURL(downloadURL);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nconst examResultsMessage = passed\n    ? t('learn.exam.passed-message')\n    : t('learn.exam.not-passed-message');\n\n// TODO: Add share button\n  return (\n    <div className='exam-results-wrapper'>\n      <div\n        className='exam-results-header'\n        data-playwright-test-label='exam-results-header'\n      >\n        {t('learn.exam.results-header', { title })}\n      </div>\n      <hr />\n      <Spacer size='m' />",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3299,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "82486706d72484e9ca08d8e128e28aae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
    "source_type": "git_repo",
    "title": "exam-results",
    "content": "numberOfQuestionsInExam })} ${t('learn.exam.correct-answers', { n: numberOfCorrectAnswers })} ${t('learn.exam.percent-correct', { n: percentCorrect })} ${t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })} `; const blob = new Blob([downloadContent], { type: 'text/plain' }); const downloadURL = URL.createObjectURL(blob); useEffect(() => { return () => { URL.revokeObjectURL(downloadURL); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); const examResultsMessage = passed ? t('learn.exam.passed-message') : t('learn.exam.not-passed-message'); // TODO: Add share button return ( <div className='exam-results-wrapper'> <div className='exam-results-header' data-playwright-test-label='exam-results-header' > {t('learn.exam.results-header', { title })} </div> <hr /> <Spacer size='m' />\n\n<div\n        className='exam-results-message'\n        data-playwright-test-label='exam-results-message'\n      >\n        {examResultsMessage}\n      </div>\n      <Spacer size='m' />\n      <div className='exam-results'>\n        <div data-playwright-test-label='exam-results-question-results'>\n          {t('learn.exam.question-results', {\n            n: numberOfCorrectAnswers,\n            q: numberOfQuestionsInExam\n          })}\n        </div>\n        <div>|</div>\n        <div data-playwright-test-label='exam-results-percent-results'>\n          {t('learn.exam.percent-results', {\n            p: percentCorrect\n          })}\n        </div>\n        <div>|</div>\n        <div data-playwright-test-label='exam-time'>\n          {t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })}\n        </div>\n      </div>\n      <Spacer size='m' />\n      <Spacer size='m' />\n      <div>\n        <Button\n          block={true}\n          variant='primary'\n          data-playwright-test-label='download-exam-results'\n          download={`${dashedName}.txt`}\n          href={downloadURL}\n        >\n          {t('learn.download-results')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button\n          block={true}\n          variant='primary'\n          data-playwright-test-label='exit-exam'\n          onClick={exitExam}\n        >\n          {t('buttons.exit')}\n        </Button>\n      </div>\n    </div>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3299,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
      "source_type": "git_repo"
    },
    "token_count": 528,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4f7ab745a919a95f3091ef646bd8ce49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
    "source_type": "git_repo",
    "title": "exam-results",
    "content": "<hr /> <Spacer size='m' /> <div className='exam-results-message' data-playwright-test-label='exam-results-message' > {examResultsMessage} </div> <Spacer size='m' /> <div className='exam-results'> <div data-playwright-test-label='exam-results-question-results'> {t('learn.exam.question-results', { n: numberOfCorrectAnswers, q: numberOfQuestionsInExam })} </div> <div>|</div> <div data-playwright-test-label='exam-results-percent-results'> {t('learn.exam.percent-results', { p: percentCorrect })} </div> <div>|</div> <div data-playwright-test-label='exam-time'> {t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })} </div> </div> <Spacer size='m' /> <Spacer size='m' /> <div> <Button block={true} variant='primary' data-playwright-test-label='download-exam-results' download={`${dashedName}.txt`} href={downloadURL} > {t('learn.download-results')} </Button> <Spacer size='xxs' /> <Button block={true} variant='primary' data-playwright-test-label='exit-exam' onClick={exitExam} > {t('buttons.exit')} </Button> </div> </div> ); }\n\nExamResults.displayName = 'ExamResults';\n\nexport default ExamResults;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 3299,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exam-results.tsx",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "57f87def5b06bc57ee2083c4570df088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exit-exam-modal.tsx",
    "source_type": "git_repo",
    "title": "exit-exam-modal",
    "content": "// Package Utilities\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\n// Local Utilities\nimport { closeModal } from '../../redux/actions';\nimport { isExitExamModalOpenSelector } from '../../redux/selectors';\n\n// Types\ninterface ExitExamModalProps {\n  closeExitExamModal: () => void;\n  isExitExamModalOpen: boolean;\n  exitExam: () => void;\n}\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isExitExamModalOpenSelector,\n  (isExitExamModalOpen: boolean) => ({\n    isExitExamModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeExitExamModal: () => closeModal('exitExam')\n    },\n    dispatch\n  );\n\n// Component\nfunction ExitExamModal({\n  closeExitExamModal,\n  isExitExamModalOpen,\n  exitExam\n}: ExitExamModalProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <Modal\n      onClose={closeExitExamModal}\n      open={isExitExamModalOpen}\n      variant='danger'\n    >\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.exam.exit-header')}\n      </Modal.Header>\n      <Modal.Body>\n        <div className='text-center'>{t('learn.exam.exit')}</div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button block={true} variant='primary' onClick={closeExitExamModal}>\n          {t('learn.exam.exit-no')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button block={true} variant='danger' onClick={exitExam}>\n          {t('learn.exam.exit-yes')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nExitExamModal.displayName = 'ExitExamModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExitExamModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1851,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\exit-exam-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "450039a7e87634e29fa6109afd110658",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\finish-exam-modal.tsx",
    "source_type": "git_repo",
    "title": "finish-exam-modal",
    "content": "// Package Utilities\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\n// Local Utilities\nimport { closeModal } from '../../redux/actions';\nimport { isFinishExamModalOpenSelector } from '../../redux/selectors';\n\n// Types\ninterface FinishExamModalProps {\n  closeFinishExamModal: () => void;\n  isFinishExamModalOpen: boolean;\n  finishExam: () => void;\n}\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isFinishExamModalOpenSelector,\n  (isFinishExamModalOpen: boolean) => ({\n    isFinishExamModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeFinishExamModal: () => closeModal('finishExam')\n    },\n    dispatch\n  );\n\n// Component\nfunction FinishExamModal({\n  closeFinishExamModal,\n  isFinishExamModalOpen,\n  finishExam\n}: FinishExamModalProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <Modal onClose={closeFinishExamModal} open={isFinishExamModalOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.exam.finish-header')}\n      </Modal.Header>\n      <Modal.Body>\n        <div className='text-center'>{t('learn.exam.finish')}</div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          onClick={finishExam}\n        >\n          {t('learn.exam.finish-yes')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          onClick={closeFinishExamModal}\n        >\n          {t('learn.exam.finish-no')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nFinishExamModal.displayName = 'FinishExamModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishExamModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1990,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\finish-exam-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a1f6e5d846601f7dd6e514e45dbfb568",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey-alert.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey-alert",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { useTranslation } from 'react-i18next';\nimport { Panel, Button, Spacer } from '@freecodecamp/ui';\nimport { openModal } from '../../redux/actions';\nimport SurveyModal from './survey-modal';\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      openSurveyModal: () => openModal('survey')\n    },\n    dispatch\n  );\n\ninterface FoudationalCSharpSurveyAlertProps {\n  openSurveyModal: () => void;\n}\n\nfunction FoundationalCSharpSurveyAlert({\n  openSurveyModal\n}: FoudationalCSharpSurveyAlertProps): JSX.Element {\n  const { t } = useTranslation();\n\nreturn (\n    <Panel variant='info' data-playwright-test-label='c-sharp-survey-alert'>\n      <Panel.Heading>{t('survey.foundational-c-sharp.title')}</Panel.Heading>\n      <Panel.Body className='text-center'>\n        <p>{t('survey.misc.two-questions')}</p>\n        <Spacer size='xs' />\n        <Button\n          block={true}\n          variant='info'\n          onClick={openSurveyModal}\n          type='button'\n        >\n          {t('survey.misc.take')}\n        </Button>\n        <SurveyModal />\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nFoundationalCSharpSurveyAlert.displayName = 'FoundationalCSharpSurveyAlert';\n\nexport default connect(null, mapDispatchToProps)(FoundationalCSharpSurveyAlert);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1395,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey-alert.tsx",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d59a06d2312a79822f16a8f263c7514d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\missing-prerequisites.tsx",
    "source_type": "git_repo",
    "title": "missing-prerequisites",
    "content": "import { useStaticQuery, graphql } from 'gatsby';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert, Spacer } from '@freecodecamp/ui';\n\nimport {\n  AllChallengeNode,\n  PrerequisiteChallenge\n} from '../../../../redux/prop-types';\nimport { Link } from '../../../../components/helpers';\n\ninterface MissingPrerequisitesProps {\n  missingPrerequisites: PrerequisiteChallenge[];\n}\n\nfunction MissingPrerequisites({\n  missingPrerequisites\n}: MissingPrerequisitesProps): JSX.Element {\n  const { t } = useTranslation();\n  const { challengeEdges } = useAllPrerequisiteChallenges();\n\nconst allPrerequisiteChallenges: PrerequisiteChallenge[] = challengeEdges.map(\n    ({ node }) => ({\n      id: node.challenge.id,\n      title: node.challenge.title,\n      slug: node.challenge.fields.slug\n    })\n  );\n\nconst newMissingPrerequisites: PrerequisiteChallenge[] =\n    missingPrerequisites.map(missing => {\n      const matchingPrerequisite = allPrerequisiteChallenges.find(\n        matching => matching.id === missing.id\n      );\n      return matchingPrerequisite || missing;\n    });\n\nreturn (\n    <Alert variant='danger'>\n      <p>{t('learn.exam.not-qualified')}</p>\n      <Spacer size='xs' />\n      <ul>\n        {newMissingPrerequisites.map(({ title, id, slug }) =>\n          slug ? (\n            <li key={id}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          ) : (\n            <li key={id}>{title}</li>\n          )\n        )}\n      </ul>\n    </Alert>\n  );\n}\n\nMissingPrerequisites.displayName = 'MissingPrerequisites';\n\nexport default MissingPrerequisites;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2492,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\missing-prerequisites.tsx",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6d7822deb3a21aacb203dd3c4bcc46bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\missing-prerequisites.tsx",
    "source_type": "git_repo",
    "title": "missing-prerequisites",
    "content": "challengeEdges.map( ({ node }) => ({ id: node.challenge.id, title: node.challenge.title, slug: node.challenge.fields.slug }) ); const newMissingPrerequisites: PrerequisiteChallenge[] = missingPrerequisites.map(missing => { const matchingPrerequisite = allPrerequisiteChallenges.find( matching => matching.id === missing.id ); return matchingPrerequisite || missing; }); return ( <Alert variant='danger'> <p>{t('learn.exam.not-qualified')}</p> <Spacer size='xs' /> <ul> {newMissingPrerequisites.map(({ title, id, slug }) => slug ? ( <li key={id}> <Link to={slug}>{title}</Link> </li> ) : ( <li key={id}>{title}</li> ) )} </ul> </Alert> ); } MissingPrerequisites.displayName = 'MissingPrerequisites'; export default MissingPrerequisites;\n\nconst useAllPrerequisiteChallenges = () => {\n  const {\n    allChallengeNode: { edges: challengeEdges }\n  }: {\n    allChallengeNode: AllChallengeNode;\n  } = useStaticQuery(graphql`\n    query getPrerequisiteChallenges {\n      allChallengeNode(\n        filter: {\n          challenge: {\n            id: {\n              in: [\n                \"647f85d407d29547b3bee1bb\"\n                \"647f87dc07d29547b3bee1bf\"\n                \"647f882207d29547b3bee1c0\"\n                \"647f867a07d29547b3bee1bc\"\n                \"647f877f07d29547b3bee1be\"\n                \"647f86ff07d29547b3bee1bd\"\n              ]\n            }\n          }\n        }\n      ) {\n        edges {\n          node {\n            challenge {\n              title\n              id\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\nreturn { challengeEdges };\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 2492,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\missing-prerequisites.tsx",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "84090bdf4028716107cededc034e79c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\survey-modal.tsx",
    "source_type": "git_repo",
    "title": "survey-modal",
    "content": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Modal } from '@freecodecamp/ui';\n\nimport { closeModal } from '../../redux/actions';\nimport { isSurveyModalOpenSelector } from '../../redux/selectors';\nimport { isProcessingSelector } from '../../../../redux/selectors';\nimport FoundationalCSharpSurvey from './foundational-c-sharp-survey';\n\ninterface SurveyModalProps {\n  closeSurveyModal: () => void;\n  isProcessing: boolean;\n  isSurveyModalOpen: boolean;\n}\n\nconst mapStateToProps = createSelector(\n  isProcessingSelector,\n  isSurveyModalOpenSelector,\n  (isProcessing: boolean, isSurveyModalOpen: boolean) => ({\n    isProcessing,\n    isSurveyModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeSurveyModal: () => closeModal('survey')\n    },\n    dispatch\n  );\n\nfunction SurveyModal({\n  closeSurveyModal,\n  isSurveyModalOpen,\n  isProcessing\n}: SurveyModalProps): JSX.Element {\n  return (\n    <Modal\n      onClose={() => (isProcessing ? '' : closeSurveyModal())}\n      open={isSurveyModalOpen}\n    >\n      <FoundationalCSharpSurvey />\n    </Modal>\n  );\n}\n\nSurveyModal.displayName = 'SurveyModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SurveyModal);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\survey-modal.tsx",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e8240e610c5a9e16f8fd337d9047c1b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.css",
    "source_type": "git_repo",
    "title": "character",
    "content": ".character-wrap {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  transition: all 0.5s ease;\n}\n\n.character-wrap-hidden {\n  visibility: hidden;\n}\n\n.character-feature {\n  position: absolute;\n  max-width: 100%;\n  max-height: 100%;\n  top: 0;\n  left: 0;\n  object-fit: cover;\n  transform-origin: left;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 344,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.css",
      "source_type": "git_repo"
    },
    "token_count": 103,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1c409b9a02d6b4509c9370b7d5ddafc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal, Spacer } from '@freecodecamp/ui';\n\nimport { SurveyResults, SurveyResponse } from '../../../../redux/prop-types';\nimport { setIsProcessing, submitSurvey } from '../../../../redux/actions';\nimport { closeModal } from '../../redux/actions';\nimport { isProcessingSelector } from '../../../../redux/selectors';\n\ninterface FoundationalCSharpSurveyProps {\n  closeSurveyModal: () => void;\n  submitSurvey: (arg0: SurveyResults) => void;\n  isProcessing: boolean;\n  setIsProcessing: (arg0: boolean) => void;\n}\n\ninterface SurveyState {\n  questionIndex: number;\n  responseIndex: null | number;\n}\n\nconst mapStateToProps = createSelector(\n  isProcessingSelector,\n  (isProcessing: boolean) => ({\n    isProcessing\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeSurveyModal: () => closeModal('survey'),\n      setIsProcessing,\n      submitSurvey\n    },\n    dispatch\n  );\n\nfunction FoundationalCSharpSurvey({\n  closeSurveyModal,\n  submitSurvey,\n  setIsProcessing,\n  isProcessing\n}: FoundationalCSharpSurveyProps): JSX.Element {\n  const { t } = useTranslation();",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "ab2665483923cc83a8a3a8e809cb767a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "'../../../../redux/selectors'; interface FoundationalCSharpSurveyProps { closeSurveyModal: () => void; submitSurvey: (arg0: SurveyResults) => void; isProcessing: boolean; setIsProcessing: (arg0: boolean) => void; } interface SurveyState { questionIndex: number; responseIndex: null | number; } const mapStateToProps = createSelector( isProcessingSelector, (isProcessing: boolean) => ({ isProcessing }) ); const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators( { closeSurveyModal: () => closeModal('survey'), setIsProcessing, submitSurvey }, dispatch ); function FoundationalCSharpSurvey({ closeSurveyModal, submitSurvey, setIsProcessing, isProcessing }: FoundationalCSharpSurveyProps): JSX.Element { const { t } = useTranslation();\n\n// submit English values to server and save those to database\n  const englishTitle = t('survey.foundational-c-sharp.title', { lng: 'en' });\n  const englishSurvey = [\n    {\n      question: t('survey.foundational-c-sharp.q1.q', { lng: 'en' }),\n      options: [\n        t('survey.foundational-c-sharp.q1.o1', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o2', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o3', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o4', { lng: 'en' })\n      ]\n    },\n    {\n      question: t('survey.foundational-c-sharp.q2.q', { lng: 'en' }),\n      options: [\n        t('survey.foundational-c-sharp.q2.o1', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o2', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o3', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o4', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o5', { lng: 'en' })\n      ]\n    }\n  ];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "68380f7717499c748880e941aeee989e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "{ lng: 'en' }); const englishSurvey = [ { question: t('survey.foundational-c-sharp.q1.q', { lng: 'en' }), options: [ t('survey.foundational-c-sharp.q1.o1', { lng: 'en' }), t('survey.foundational-c-sharp.q1.o2', { lng: 'en' }), t('survey.foundational-c-sharp.q1.o3', { lng: 'en' }), t('survey.foundational-c-sharp.q1.o4', { lng: 'en' }) ] }, { question: t('survey.foundational-c-sharp.q2.q', { lng: 'en' }), options: [ t('survey.foundational-c-sharp.q2.o1', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o2', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o3', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o4', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o5', { lng: 'en' }) ] } ];\n\n// display survey in i18n\n  const i18nSurvey = [\n    {\n      question: t('survey.foundational-c-sharp.q1.q'),\n      options: [\n        t('survey.foundational-c-sharp.q1.o1'),\n        t('survey.foundational-c-sharp.q1.o2'),\n        t('survey.foundational-c-sharp.q1.o3'),\n        t('survey.foundational-c-sharp.q1.o4')\n      ]\n    },\n    {\n      question: t('survey.foundational-c-sharp.q2.q'),\n      options: [\n        t('survey.foundational-c-sharp.q2.o1'),\n        t('survey.foundational-c-sharp.q2.o2'),\n        t('survey.foundational-c-sharp.q2.o3'),\n        t('survey.foundational-c-sharp.q2.o4'),\n        t('survey.foundational-c-sharp.q2.o5')\n      ]\n    }\n  ];\n\nconst emptySurvey: SurveyState[] = i18nSurvey.map((question, i) => ({\n    questionIndex: i,\n    responseIndex: null\n  }));",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "f7675efca37a6f6106f16a39fe5cc872",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "options: [ t('survey.foundational-c-sharp.q2.o1', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o2', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o3', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o4', { lng: 'en' }), t('survey.foundational-c-sharp.q2.o5', { lng: 'en' }) ] } ]; // display survey in i18n const i18nSurvey = [ { question: t('survey.foundational-c-sharp.q1.q'), options: [ t('survey.foundational-c-sharp.q1.o1'), t('survey.foundational-c-sharp.q1.o2'), t('survey.foundational-c-sharp.q1.o3'), t('survey.foundational-c-sharp.q1.o4') ] }, { question: t('survey.foundational-c-sharp.q2.q'), options: [ t('survey.foundational-c-sharp.q2.o1'), t('survey.foundational-c-sharp.q2.o2'), t('survey.foundational-c-sharp.q2.o3'), t('survey.foundational-c-sharp.q2.o4'), t('survey.foundational-c-sharp.q2.o5') ] } ]; const emptySurvey: SurveyState[] = i18nSurvey.map((question, i) => ({ questionIndex: i, responseIndex: null }));\n\nconst [surveyResponses, setSurveyResponses] = useState(emptySurvey);\n\nfunction handleOptionChange(questionIndex: number, responseIndex: number) {\n    const newSurveyResponses = Array.from(surveyResponses);\n    newSurveyResponses[questionIndex].responseIndex = responseIndex;\n    setSurveyResponses(newSurveyResponses);\n  }\n\nfunction createSurveyResults() {\n    setIsProcessing(true);\n\n// convert responses to English before submitting\n    const englishResponses: SurveyResponse[] = surveyResponses.map(r => ({\n      question: englishSurvey[r.questionIndex].question,\n      response:\n        englishSurvey[r.questionIndex].options[r.responseIndex as number]\n    }));\n\nconst surveyResults = {\n      title: englishTitle,\n      responses: englishResponses\n    };\n\nsubmitSurvey(surveyResults);\n  }\n\nconst cantSubmitSurvey = surveyResponses.some(q => q.responseIndex === null);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "564707f69ed7fb825e8fa8c19055ddb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "emptySurvey: SurveyState[] = i18nSurvey.map((question, i) => ({ questionIndex: i, responseIndex: null })); const [surveyResponses, setSurveyResponses] = useState(emptySurvey); function handleOptionChange(questionIndex: number, responseIndex: number) { const newSurveyResponses = Array.from(surveyResponses); newSurveyResponses[questionIndex].responseIndex = responseIndex; setSurveyResponses(newSurveyResponses); } function createSurveyResults() { setIsProcessing(true); // convert responses to English before submitting const englishResponses: SurveyResponse[] = surveyResponses.map(r => ({ question: englishSurvey[r.questionIndex].question, response: englishSurvey[r.questionIndex].options[r.responseIndex as number] })); const surveyResults = { title: englishTitle, responses: englishResponses }; submitSurvey(surveyResults); } const cantSubmitSurvey = surveyResponses.some(q => q.responseIndex === null);\n\nreturn (\n    <>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('survey.foundational-c-sharp.title')}\n      </Modal.Header>\n      <Modal.Body>\n        {i18nSurvey.map((question, i) => (\n          <div key={i}>\n            <Spacer size='m' />\n            <div>{question.question}</div>\n            <Spacer size='xs' />\n            <div className='video-quiz-options'>\n              {question.options.map((option, j) => (\n                <label className='video-quiz-option-label' key={j}>\n                  <input\n                    checked={surveyResponses[i].responseIndex === j}\n                    className='sr-only'\n                    name={question.question}\n                    onChange={() => handleOptionChange(i, j)}\n                    type='radio'\n                    value={option}\n                  />{' '}\n                  <span className='video-quiz-input-visible'>\n                    {surveyResponses[i].responseIndex === j ? (\n                      <span className='video-quiz-selected-input' />\n                    ) : null}\n                  </span>\n                  {option}{' '}\n                </label>\n              ))}\n            </div>\n          </div>\n        ))}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          disabled={cantSubmitSurvey || isProcessing}\n          onClick={createSurveyResults}\n        >\n          {t('survey.misc.submit')}\n        </Button>\n        <Spacer size='xxs' />\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          disabled={isProcessing}\n          onClick={closeSurveyModal}\n        >\n          {t('survey.misc.exit')}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 551,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "22f4dbebe34b1a3f974f4403f5b87185",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
    "source_type": "git_repo",
    "title": "foundational-c-sharp-survey",
    "content": "<Spacer size='xs' /> <div className='video-quiz-options'> {question.options.map((option, j) => ( <label className='video-quiz-option-label' key={j}> <input checked={surveyResponses[i].responseIndex === j} className='sr-only' name={question.question} onChange={() => handleOptionChange(i, j)} type='radio' value={option} />{' '} <span className='video-quiz-input-visible'> {surveyResponses[i].responseIndex === j ? ( <span className='video-quiz-selected-input' /> ) : null} </span> {option}{' '} </label> ))} </div> </div> ))} </Modal.Body> <Modal.Footer> <Button block={true} size='medium' variant='primary' disabled={cantSubmitSurvey || isProcessing} onClick={createSurveyResults} > {t('survey.misc.submit')} </Button> <Spacer size='xxs' /> <Button block={true} size='medium' variant='primary' disabled={isProcessing} onClick={closeSurveyModal} > {t('survey.misc.exit')} </Button> </Modal.Footer> </> ); }\n\nFoundationalCSharpSurvey.displayName = 'FoundationalCSharpSurvey';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoundationalCSharpSurvey);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 5974,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\exam\\components\\foundational-c-sharp-survey.tsx",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "4d7a08ea8333a0bb50e44ac6b4acf33b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
    "source_type": "git_repo",
    "title": "character",
    "content": "import React, { useEffect, useState } from 'react';\nimport { Characters, CharacterPosition } from '../../../../redux/prop-types';\nimport { characterAssets } from './scene-assets';\n\nimport './character.css';\nimport { SceneSubject } from './scene-subject';\n\ninterface CharacterProps {\n  position: CharacterPosition;\n  opacity: number;\n  name: Characters;\n  isTalking: boolean;\n  sceneSubject: SceneSubject;\n}\n\ninterface CharacterStyles {\n  left?: string;\n  top?: string;\n  transform?: string;\n  opacity?: number;\n}\n\nfunction getRandomInt(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function Character({\n  position,\n  opacity,\n  name,\n  isTalking,\n  sceneSubject\n}: CharacterProps): JSX.Element {\n  const [eyesAreOpen, setEyesAreOpen] = useState(true);\n  const [mouthIsOpen, setMouthIsOpen] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n\nconst onNotify = (eventType: 'play' | 'pause' | 'stop') => {\n    if (eventType === 'play') {\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(false);\n    }\n  };\n\nuseEffect(() => {\n    sceneSubject.attach(onNotify);\n    return () => {\n      sceneSubject.detach(onNotify);\n    };\n  }, [sceneSubject]);\n\nuseEffect(() => {\n    if (!isPlaying) return;\n    let blinkTimeoutId: NodeJS.Timeout;\n\nconst blinkPeriod = getRandomInt(2000, 5000);\n    const blinkIntervalId = setInterval(() => {\n      const blinkJitter = getRandomInt(0, 1000);\n      blinkTimeoutId = setTimeout(() => {\n        setEyesAreOpen(false);\n\nblinkTimeoutId = setTimeout(() => {\n          setEyesAreOpen(true);\n        }, 30); // always unblink after 30ms\n      }, blinkJitter);\n    }, blinkPeriod);\n\n// Clear intervals when component is unmounted or conditions change\n    return () => {\n      setEyesAreOpen(true);\n      clearInterval(blinkIntervalId);\n      clearTimeout(blinkTimeoutId);\n    };\n  }, [isPlaying]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "19307e1d79c5b71d75e142ac8198361a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
    "source_type": "git_repo",
    "title": "character",
    "content": "return () => { sceneSubject.detach(onNotify); }; }, [sceneSubject]); useEffect(() => { if (!isPlaying) return; let blinkTimeoutId: NodeJS.Timeout; const blinkPeriod = getRandomInt(2000, 5000); const blinkIntervalId = setInterval(() => { const blinkJitter = getRandomInt(0, 1000); blinkTimeoutId = setTimeout(() => { setEyesAreOpen(false); blinkTimeoutId = setTimeout(() => { setEyesAreOpen(true); }, 30); // always unblink after 30ms }, blinkJitter); }, blinkPeriod); // Clear intervals when component is unmounted or conditions change return () => { setEyesAreOpen(true); clearInterval(blinkIntervalId); clearTimeout(blinkTimeoutId); }; }, [isPlaying]);\n\nuseEffect(() => {\n    if (!isPlaying) return;\n    let talkIntervalId: NodeJS.Timeout;\n    let mouthOpenTimeoutId: NodeJS.Timeout;\n    let mouthCloseTimeoutId: NodeJS.Timeout;\n\nif (isTalking) {\n      const talk = () => {\n        const openTimeout = getRandomInt(0, 100);\n        const closeTimeout = getRandomInt(150, 300);\n\nmouthOpenTimeoutId = setTimeout(() => {\n          setMouthIsOpen(true);\n        }, openTimeout);\n\nmouthCloseTimeoutId = setTimeout(() => {\n          setMouthIsOpen(false);\n        }, closeTimeout);\n      };\n\ntalk();\n      talkIntervalId = setInterval(() => {\n        talk();\n      }, 300);\n    }\n\n// Clear intervals when component is unmounted or conditions change\n    return () => {\n      setMouthIsOpen(false);\n      clearInterval(talkIntervalId);\n      clearTimeout(mouthOpenTimeoutId);\n      clearTimeout(mouthCloseTimeoutId);\n    };\n  }, [isTalking, isPlaying]);\n\nconst characterWrapStyles: CharacterStyles = {\n    opacity\n  };\n  if (position.x) characterWrapStyles.left = `${position.x}%`;\n  if (position.y) characterWrapStyles.top = `${position.y}%`;\n\nconst characterFeatureStyles: CharacterStyles = {\n    transform: position.z\n      ? `translate(-${50 * position.z}%) scale(${position.z})`\n      : `translate(-50%)`\n  };\n\nconst { base, brows, eyesOpen, eyesClosed, mouthOpen, mouthClosed, glasses } =\n    characterAssets[name];",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3c0a07ceee76bc71f6aacc5d822c5508",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
    "source_type": "git_repo",
    "title": "character",
    "content": "talk(); talkIntervalId = setInterval(() => { talk(); }, 300); } // Clear intervals when component is unmounted or conditions change return () => { setMouthIsOpen(false); clearInterval(talkIntervalId); clearTimeout(mouthOpenTimeoutId); clearTimeout(mouthCloseTimeoutId); }; }, [isTalking, isPlaying]); const characterWrapStyles: CharacterStyles = { opacity }; if (position.x) characterWrapStyles.left = `${position.x}%`; if (position.y) characterWrapStyles.top = `${position.y}%`; const characterFeatureStyles: CharacterStyles = { transform: position.z ? `translate(-${50 * position.z}%) scale(${position.z})` : `translate(-50%)` }; const { base, brows, eyesOpen, eyesClosed, mouthOpen, mouthClosed, glasses } = characterAssets[name];\n\nreturn (\n    <div style={characterWrapStyles} className='character-wrap'>\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={base}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={brows}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={eyesAreOpen ? eyesOpen : eyesClosed}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={mouthIsOpen ? mouthOpen : mouthClosed}\n        alt=''\n      />\n      {glasses && (\n        <img\n          style={characterFeatureStyles}\n          className='character-feature'\n          src={glasses}\n          alt=''\n        />\n      )}\n    </div>\n  );\n}\n\nCharacter.displayName = 'Character';\n\nexport default Character;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 4255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\character.tsx",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ee00dda56d6e5cf4e86514a42831d32a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-subject.tsx",
    "source_type": "git_repo",
    "title": "scene-subject",
    "content": "type Observer = (eventType: 'play' | 'pause' | 'stop') => void;\n\nexport class SceneSubject {\n  #observers: Observer[];\n  constructor() {\n    this.#observers = [];\n  }\n\nattach(observer: Observer) {\n    this.#observers.push(observer);\n  }\n\ndetach(observer: Observer) {\n    this.#observers = this.#observers.filter(obs => obs !== observer);\n  }\n\n// For now, we don't need to pass any data to the observers, so notify()\n  // doesn't take any arguments.\n  notify(eventType: 'play' | 'pause' | 'stop') {\n    this.#observers.forEach(observer => observer(eventType));\n  }\n}",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 572,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-subject.tsx",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8f17c7b062f87baf5018c125f06a127",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.css",
    "source_type": "git_repo",
    "title": "scene",
    "content": ".scene-wrapper {\n  overflow: hidden;\n  position: relative;\n  color: var(--gray-00);\n}\n\n.scene-dialogue-wrap {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 5px calc(5px + 3.5vw);\n  font-size: calc(0.25vw + 0.75rem);\n  min-height: calc(35px + 1vw + 2rem);\n  flex: 0 0 80%;\n  background: var(--primary-background-translucent);\n  color: var(--primary-color);\n}\n\n.scene-dialogue-label {\n  color: var(--highlight-color);\n  font-weight: bold;\n}\n\n.scene-dialogue-align-left {\n  text-align: left;\n}\n\n.scene-dialogue-align-right {\n  text-align: right;\n}\n\n.scene-dialogue-align-center {\n  text-align: center;\n}\n\n.scene-dialogue-text {\n  font-size: calc(0.25vw + 1rem);\n  padding: 0 10px;\n}\n\n.scene-controls {\n  display: flex;\n  justify-content: space-between;\n  align-self: center;\n  background: var(--primary-background);\n  padding: 0 10px;\n  min-height: 60px;\n  max-height: 60px;\n}\n\n.scene-btn,\n.scene-btn:hover,\n.scene-btn:focus,\n.scene-btn:active {\n  color: var(--tertiary-color);\n  background: rgba(0, 0, 0, 0);\n  border: none;\n  scale: 0.75;\n}\n\n.scene-play-btn {\n  background: rgba(0, 0, 0, 0);\n}\n\n.scene-a11y-btn svg {\n  width: 60px;\n  height: 60px;\n}",
    "metadata": {
      "file_extension": ".css",
      "file_type": "css",
      "file_size": 1240,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.css",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6f6d1cd3d3577793988d17a37c801fa4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "// TODO: get domain from env\nconst domain =\n  'https://cdn.freecodecamp.org/curriculum/english/animation-assets';\n\nexport const sounds = `${domain}/sounds`;\nconst images = `${domain}/images`;\nexport const backgrounds = `${images}/backgrounds`;\nexport const characters = `${images}/characters`;\n\n// All the character folders on our CDN. Do not add to this unless we add more characters there.\nconst character = {\n  alice: `${characters}/alice`,\n  anna: `${characters}/anna`,\n  bob: `${characters}/bob`,\n  brian: `${characters}/brian`,\n  david: `${characters}/david`,\n  jake: `${characters}/jake`,\n  james: `${characters}/james`,\n  linda: `${characters}/linda`,\n  lisa: `${characters}/lisa`,\n  maria: `${characters}/maria`,\n  npc: `${characters}/npc`,\n  sarah: `${characters}/sarah`,\n  sophie: `${characters}/sophie`,\n  tom: `${characters}/tom`\n}; // All the available characters on our CDN Do not add to this unless we add more characters there const characterImages = {\n  alice: {\n    base: `${character alice}/base png`,\n    brows: `${character alice}/brows-neutral png`,\n    eyesClosed: `${character alice}/eyes-closed png`,\n    eyesOpen: `${character alice}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character alice}/mouth-smile png`,\n    mouthOpen: `${character alice}/mouth-laugh png`\n  },\n  anna: {\n    base: `${character anna}/base png`,\n    brows: `${character anna}/brows-normal png`,\n    eyesClosed: `${character anna}/eyes-closed png`,\n    eyesOpen: `${character anna}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character anna}/mouth-smile png`,\n    mouthOpen: `${character anna}/mouth-laugh png`\n  },\n  bob: {\n    base: `${character bob}/base png`,\n    brows: `${character bob}/brows-neutral png`,\n    eyesClosed: `${character bob}/eyes-closed png`,\n    eyesOpen: `${character bob}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character bob}/mouth-smile png`,\n    mouthOpen: `${character bob}/mouth-laugh",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "ac03ad16f15a86b9dafbdb26b53f5578",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "png`, eyesClosed: `${character alice}/eyes-closed png`, eyesOpen: `${character alice}/eyes-open png`, glasses: null, mouthClosed: `${character alice}/mouth-smile png`, mouthOpen: `${character alice}/mouth-laugh png` }, anna: { base: `${character anna}/base png`, brows: `${character anna}/brows-normal png`, eyesClosed: `${character anna}/eyes-closed png`, eyesOpen: `${character anna}/eyes-open png`, glasses: null, mouthClosed: `${character anna}/mouth-smile png`, mouthOpen: `${character anna}/mouth-laugh png` }, bob: { base: `${character bob}/base png`, brows: `${character bob}/brows-neutral png`, eyesClosed: `${character bob}/eyes-closed png`, eyesOpen: `${character bob}/eyes-open png`, glasses: null, mouthClosed: `${character bob}/mouth-smile png`, mouthOpen: `${character bob}/mouth-laughpng`\n  },\n  brian: {\n    base: `${character brian}/base png`,\n    brows: `${character brian}/brows-neutral png`,\n    eyesClosed: `${character brian}/eyes-closed png`,\n    eyesOpen: `${character brian}/eyes-open png`,\n    glasses: `${character brian}/glasses png`,\n    mouthClosed: `${character brian}/mouth-smile png`,\n    mouthOpen: `${character brian}/mouth-laugh png`\n  },\n  david: {\n    base: `${character david}/base png`,\n    brows: `${character david}/brows-neutral png`,\n    eyesClosed: `${character david}/eyes-closed png`,\n    eyesOpen: `${character david}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character david}/mouth-smile png`,\n    mouthOpen: `${character david}/mouth-laugh png`\n  },\n  jake: {\n    base: `${character jake}/base png`,\n    brows: `${character jake}/brows png`,\n    eyesClosed: `${character jake}/eyes-closed png`,\n    eyesOpen: `${character jake}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character jake}/mouth-smile png`,\n    mouthOpen: `${character jake}/mouth-laugh png`\n  },\n  james: {\n    base: `${character",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "475b8c63435389974e868deb0f992c3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "png`, glasses: `${character brian}/glasses png`, mouthClosed: `${character brian}/mouth-smile png`, mouthOpen: `${character brian}/mouth-laugh png` }, david: { base: `${character david}/base png`, brows: `${character david}/brows-neutral png`, eyesClosed: `${character david}/eyes-closed png`, eyesOpen: `${character david}/eyes-open png`, glasses: null, mouthClosed: `${character david}/mouth-smile png`, mouthOpen: `${character david}/mouth-laugh png` }, jake: { base: `${character jake}/base png`, brows: `${character jake}/brows png`, eyesClosed: `${character jake}/eyes-closed png`, eyesOpen: `${character jake}/eyes-open png`, glasses: null, mouthClosed: `${character jake}/mouth-smile png`, mouthOpen: `${character jake}/mouth-laugh png` }, james: { base: `${characterjames}/base png`,\n    brows: `${character james}/brows-neutral png`,\n    eyesClosed: `${character james}/eyes-closed png`,\n    eyesOpen: `${character james}/eyes-open png`,\n    glasses: `${character james}/glasses png`,\n    mouthClosed: `${character james}/mouth-smile png`,\n    mouthOpen: `${character james}/mouth-laugh png`\n  },\n  linda: {\n    base: `${character linda}/base png`,\n    brows: `${character linda}/brows-neutral png`,\n    eyesClosed: `${character linda}/eyes-closed png`,\n    eyesOpen: `${character linda}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character linda}/mouth-smile png`,\n    mouthOpen: `${character linda}/mouth-laugh png`\n  },\n  lisa: {\n    base: `${character lisa}/base png`,\n    brows: `${character lisa}/brows-neutral png`,\n    eyesClosed: `${character lisa}/eyes-closed png`,\n    eyesOpen: `${character lisa}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character lisa}/mouth-smile png`,\n    mouthOpen: `${character lisa}/mouth-laugh png`\n  },\n  maria: {\n    base: `${character maria}/base png`,\n    brows: `${character maria}/brows-normal",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "64b0c5c990f01d2f40892e8fe8275cc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "mouthClosed: `${character james}/mouth-smile png`, mouthOpen: `${character james}/mouth-laugh png` }, linda: { base: `${character linda}/base png`, brows: `${character linda}/brows-neutral png`, eyesClosed: `${character linda}/eyes-closed png`, eyesOpen: `${character linda}/eyes-open png`, glasses: null, mouthClosed: `${character linda}/mouth-smile png`, mouthOpen: `${character linda}/mouth-laugh png` }, lisa: { base: `${character lisa}/base png`, brows: `${character lisa}/brows-neutral png`, eyesClosed: `${character lisa}/eyes-closed png`, eyesOpen: `${character lisa}/eyes-open png`, glasses: null, mouthClosed: `${character lisa}/mouth-smile png`, mouthOpen: `${character lisa}/mouth-laugh png` }, maria: { base: `${character maria}/base png`, brows: `${character maria}/brows-normalpng`,\n    eyesClosed: `${character maria}/eyes-closed png`,\n    eyesOpen: `${character maria}/eyes-open png`,\n    glasses: `${character maria}/glasses png`,\n    mouthClosed: `${character maria}/mouth-smile png`,\n    mouthOpen: `${character maria}/mouth-laugh png`\n  },\n  npcBoy: {\n    base: `${character npc}/boy-base png`,\n    brows: `${character npc}/boy-base png`,\n    eyesClosed: `${character npc}/boy-eyes-closed png`,\n    eyesOpen: `${character npc}/boy-eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character npc}/boy-mouth-smile png`,\n    mouthOpen: `${character npc}/boy-mouth-laugh png`\n  },\n  npcGirl: {\n    base: `${character npc}/girl-base png`,\n    brows: `${character npc}/girl-base png`,\n    eyesClosed: `${character npc}/girl-eyes-closed png`,\n    eyesOpen: `${character npc}/girl-eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character npc}/girl-mouth-smile png`,\n    mouthOpen: `${character npc}/girl-mouth-laugh png`\n  },\n  npcMan: {\n    base: `${character npc}/man-base png`,\n    brows: `${character npc}/man-base png`,\n    eyesClosed: `${character",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "81bc8e545bb0db10daefa52d427e6ed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "png`, mouthOpen: `${character maria}/mouth-laugh png` }, npcBoy: { base: `${character npc}/boy-base png`, brows: `${character npc}/boy-base png`, eyesClosed: `${character npc}/boy-eyes-closed png`, eyesOpen: `${character npc}/boy-eyes-open png`, glasses: null, mouthClosed: `${character npc}/boy-mouth-smile png`, mouthOpen: `${character npc}/boy-mouth-laugh png` }, npcGirl: { base: `${character npc}/girl-base png`, brows: `${character npc}/girl-base png`, eyesClosed: `${character npc}/girl-eyes-closed png`, eyesOpen: `${character npc}/girl-eyes-open png`, glasses: null, mouthClosed: `${character npc}/girl-mouth-smile png`, mouthOpen: `${character npc}/girl-mouth-laugh png` }, npcMan: { base: `${character npc}/man-base png`, brows: `${character npc}/man-base png`, eyesClosed: `${characternpc}/man-eyes-closed png`,\n    eyesOpen: `${character npc}/man-eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character npc}/man-mouth-smile png`,\n    mouthOpen: `${character npc}/man-mouth-laugh png`\n  },\n  npcWoman: {\n    base: `${character npc}/woman-base png`,\n    brows: `${character npc}/woman-base png`,\n    eyesClosed: `${character npc}/woman-eyes-closed png`,\n    eyesOpen: `${character npc}/woman-eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character npc}/woman-mouth-smile png`,\n    mouthOpen: `${character npc}/woman-mouth-laugh png`\n  },\n  sarah: {\n    base: `${character sarah}/base png`,\n    brows: `${character sarah}/brows-normal png`,\n    eyesClosed: `${character sarah}/eyes-closed png`,\n    eyesOpen: `${character sarah}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character sarah}/mouth-smile png`,\n    mouthOpen: `${character sarah}/mouth-laugh png`\n  },\n  sophie: {\n    base: `${character sophie}/base png`,\n    brows: `${character sophie}/brows-neutral png`,\n    eyesClosed: `${character sophie}/eyes-closed",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "49caacc9f2e0de95a80b60f5f85befbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "mouthOpen: `${character npc}/man-mouth-laugh png` }, npcWoman: { base: `${character npc}/woman-base png`, brows: `${character npc}/woman-base png`, eyesClosed: `${character npc}/woman-eyes-closed png`, eyesOpen: `${character npc}/woman-eyes-open png`, glasses: null, mouthClosed: `${character npc}/woman-mouth-smile png`, mouthOpen: `${character npc}/woman-mouth-laugh png` }, sarah: { base: `${character sarah}/base png`, brows: `${character sarah}/brows-normal png`, eyesClosed: `${character sarah}/eyes-closed png`, eyesOpen: `${character sarah}/eyes-open png`, glasses: null, mouthClosed: `${character sarah}/mouth-smile png`, mouthOpen: `${character sarah}/mouth-laugh png` }, sophie: { base: `${character sophie}/base png`, brows: `${character sophie}/brows-neutral png`, eyesClosed: `${character sophie}/eyes-closedpng`,\n    eyesOpen: `${character sophie}/eyes-open png`,\n    glasses: `${character sophie}/glasses png`,\n    mouthClosed: `${character sophie}/mouth-smile png`,\n    mouthOpen: `${character sophie}/mouth-laugh png`\n  },\n  tom: {\n    base: `${character tom}/base png`,\n    brows: `${character tom}/brows-normal png`,\n    eyesClosed: `${character tom}/eyes-closed png`,\n    eyesOpen: `${character tom}/eyes-open png`,\n    glasses: null,\n    mouthClosed: `${character tom}/mouth-smile png`,\n    mouthOpen: `${character tom}/mouth-laugh png`\n  }\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "d1f35bda153f81c4cdf51e6b8eb42ff7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "png`, eyesOpen: `${character sarah}/eyes-open png`, glasses: null, mouthClosed: `${character sarah}/mouth-smile png`, mouthOpen: `${character sarah}/mouth-laugh png` }, sophie: { base: `${character sophie}/base png`, brows: `${character sophie}/brows-neutral png`, eyesClosed: `${character sophie}/eyes-closedpng`, eyesOpen: `${character sophie}/eyes-open png`, glasses: `${character sophie}/glasses png`, mouthClosed: `${character sophie}/mouth-smile png`, mouthOpen: `${character sophie}/mouth-laugh png` }, tom: { base: `${character tom}/base png`, brows: `${character tom}/brows-normal png`, eyesClosed: `${character tom}/eyes-closed png`, eyesOpen: `${character tom}/eyes-open png`, glasses: null, mouthClosed: `${character tom}/mouth-smile png`, mouthOpen: `${character tom}/mouth-laugh png` } };\n\n// Add new characters here\nexport const characterAssets = {\n  // English\n  Alice: characterImages.alice,\n  Amy: characterImages.npcGirl,\n  Anna: characterImages.anna,\n  Bob: characterImages.bob,\n  Brian: characterImages.brian,\n  Candidate: characterImages.npcBoy,\n  David: characterImages.david,\n  'Delivery Man': characterImages.npcMan,\n  Expert: characterImages.npcMan,\n  Jake: characterImages.jake,\n  James: characterImages.james,\n  Jessica: characterImages.npcWoman,\n  Jim: characterImages.npcMan,\n  Josh: characterImages.npcMan,\n  Linda: characterImages.linda,\n  Lisa: characterImages.lisa,\n  Maria: characterImages.maria,\n  Mark: characterImages.npcBoy,\n  Riker: characterImages.npcMan,\n  Sarah: characterImages.sarah,\n  'Second Candidate': characterImages.npcMan,\n  Sophie: characterImages.sophie,\n  Tom: characterImages.tom,",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "a44571f3d159d35ca5a77646e7c44923",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
    "source_type": "git_repo",
    "title": "scene-assets",
    "content": "eyesOpen: `${character tom}/eyes-open png`, glasses: null, mouthClosed: `${character tom}/mouth-smile png`, mouthOpen: `${character tom}/mouth-laugh png` } }; // Add new characters here export const characterAssets = { // English Alice: characterImages.alice, Amy: characterImages.npcGirl, Anna: characterImages.anna, Bob: characterImages.bob, Brian: characterImages.brian, Candidate: characterImages.npcBoy, David: characterImages.david, 'Delivery Man': characterImages.npcMan, Expert: characterImages.npcMan, Jake: characterImages.jake, James: characterImages.james, Jessica: characterImages.npcWoman, Jim: characterImages.npcMan, Josh: characterImages.npcMan, Linda: characterImages.linda, Lisa: characterImages.lisa, Maria: characterImages.maria, Mark: characterImages.npcBoy, Riker: characterImages.npcMan, Sarah: characterImages.sarah, 'Second Candidate': characterImages.npcMan, Sophie: characterImages.sophie, Tom: characterImages.tom,\n\n// Spanish\n  Alex: characterImages.npcGirl,\n  Ángela: characterImages.sarah,\n  Camila: characterImages.sophie,\n  Carlos: characterImages.brian,\n  Elena: characterImages.anna,\n  Esteban: characterImages.james,\n  Joaquín: characterImages.jake,\n  Julieta: characterImages.maria,\n  Luis: characterImages.bob,\n  Luna: characterImages.lisa,\n  Marisol: characterImages.linda,\n  Mateo: characterImages.npcBoy,\n  Noelia: characterImages.npcWoman,\n  René: characterImages.npcMan,\n  Sebastián: characterImages.david,\n  Diego: characterImages.tom,\n  Valeria: characterImages.alice\n};",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 8230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene-assets.tsx",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "f58e3c98b7bfe3f2ecd99040f2ef8776",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\action-types.js",
    "source_type": "git_repo",
    "title": "action-types",
    "content": "import { createTypes, createAsyncTypes } from '../../utils/create-types';\n\nexport const ns = 'settings';\n\nexport const actionTypes = createTypes(\n  [\n    ...createAsyncTypes('validateUsername'),\n    ...createAsyncTypes('submitNewAbout'),\n    ...createAsyncTypes('submitNewUsername'),\n    ...createAsyncTypes('updateMyEmail'),\n    ...createAsyncTypes('updateMySocials'),\n    ...createAsyncTypes('updateMySound'),\n    ...createAsyncTypes('updateMyKeyboardShortcuts'),\n    ...createAsyncTypes('updateMyHonesty'),\n    ...createAsyncTypes('updateMyQuincyEmail'),\n    ...createAsyncTypes('updateMyPortfolio'),\n    ...createAsyncTypes('submitProfileUI'),\n    ...createAsyncTypes('verifyCert'),\n    ...createAsyncTypes('resetProgress'),\n    ...createAsyncTypes('resetMyEditorLayout'),\n    ...createAsyncTypes('deleteAccount')\n  ],\n  ns\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 831,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\action-types.js",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3f713e42f8ad4a1a4310d4c88a76b2cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "import React, {\n  useEffect,\n  useState,\n  useRef,\n  useMemo,\n  useCallback\n} from 'react';\nimport { Col, Spacer } from '@freecodecamp/ui';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCirclePause, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\nimport { isEmpty } from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { FullScene } from '../../../../redux/prop-types';\nimport { Loader } from '../../../../components/helpers';\nimport ClosedCaptionsIcon from '../../../../assets/icons/closedcaptions';\nimport { sounds, backgrounds, characterAssets } from './scene-assets';\nimport Character from './character';\nimport { SceneSubject } from './scene-subject';\n\nimport './scene.css';\n\nconst sToMs = (n: number) => n * 1000;\n\nconst loadImage = (src: string | null) => {\n  if (src) new Image().src = src;\n};\n\nconst initDialogue = { label: '', text: '', align: 'left' };\n\nexport function Scene({\n  scene,\n  sceneSubject\n}: {\n  scene: FullScene;\n  sceneSubject: SceneSubject;\n}): JSX.Element {\n  const { t } = useTranslation();\n  const canPauseRef = useRef(false);\n  const { setup, commands } = scene;\n  const { audio, alwaysShowDialogue } = setup;\n\nconst audioRef = useRef<HTMLAudioElement>(new Audio());\n\n// if there are timestamps, we use the difference between them as the duration\n  // if not, we assume we're playing the whole audio file.\n  const duration =\n    audio.startTimestamp !== null && audio.finishTimestamp !== null\n      ? sToMs(audio.finishTimestamp - audio.startTimestamp)\n      : Infinity;\n\nconst pauseAudio = () => {\n    // Until the play() promise resolves, we can't pause the audio\n    if (canPauseRef.current) audioRef.current.pause();\n    canPauseRef.current = false;\n    clearTimeout(startTimerRef.current);\n    clearTimeout(finishTimerRef.current);\n  };\n\nconst pauseAnimation = () => {\n    setIsPlaying(false);\n    // @ts-expect-error cancelAnimationFrame accepts undefined, but TS doesn't\n    // know that\n    window.cancelAnimationFrame(animationRef.current);\n  };",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "440729e36b9ebb01183121362658ab5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "as the duration // if not, we assume we're playing the whole audio file. const duration = audio.startTimestamp !== null && audio.finishTimestamp !== null ? sToMs(audio.finishTimestamp - audio.startTimestamp) : Infinity; const pauseAudio = () => { // Until the play() promise resolves, we can't pause the audio if (canPauseRef.current) audioRef.current.pause(); canPauseRef.current = false; clearTimeout(startTimerRef.current); clearTimeout(finishTimerRef.current); }; const pauseAnimation = () => { setIsPlaying(false); // @ts-expect-error cancelAnimationFrame accepts undefined, but TS doesn't // know that window.cancelAnimationFrame(animationRef.current); };\n\nconst resetAudio = useCallback(() => {\n    pauseAudio();\n    audioRef.current.currentTime = audio.startTimestamp || 0;\n    pausedAtRef.current = 0;\n  }, [audio.startTimestamp]);\n\n// on mount\n  useEffect(() => {\n    const { current } = audioRef;\n    const { audio } = setup;\n\nif (current) {\n      const audioTimestamp =\n        duration !== Infinity ? `#t=${audio.startTimestamp}` : '';\n      current.volume = 1;\n      current.addEventListener('canplaythrough', audioLoaded);\n      current.src = `${sounds}/${audio.filename}${audioTimestamp}`;\n      current.preload = 'auto';\n      current.load();\n    }\n\n// preload images\n    loadImage(`${backgrounds}/${setup.background}`);\n\nsetup.characters\n      .map(({ character }) => Object.values(characterAssets[character]))\n      .flat()\n      .forEach(loadImage);\n\ncommands\n      .map(({ background }) =>\n        background ? `${backgrounds}/${background}` : null\n      )\n      .forEach(loadImage);\n\n// on unmount\n    return () => {\n      resetAudio();\n      current.removeEventListener('canplaythrough', audioLoaded);\n    };\n  }, [duration, setup, commands, resetAudio]);\n\nconst initBackground = setup.background;\n\n// The characters are memoized to prevent the useEffect from running on every\n  // render,\n  const initCharacters = useMemo(\n    () =>\n      setup.characters.map(character => {\n        return {\n          ...character,\n          opacity: character.opacity ?? 1,\n          isTalking: false\n        };\n      }),\n    [setup.characters]\n  );",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "efa644c0ab2fd20bee01174f7385ffb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": ".map(({ character }) => Object.values(characterAssets[character])) .flat() .forEach(loadImage); commands .map(({ background }) => background ? `${backgrounds}/${background}` : null ) .forEach(loadImage); // on unmount return () => { resetAudio(); current.removeEventListener('canplaythrough', audioLoaded); }; }, [duration, setup, commands, resetAudio]); const initBackground = setup.background; // The characters are memoized to prevent the useEffect from running on every // render, const initCharacters = useMemo( () => setup.characters.map(character => { return { ...character, opacity: character.opacity ?? 1, isTalking: false }; }), [setup.characters] );\n\nconst [isPlaying, setIsPlaying] = useState(false);\n  const [sceneIsReady, setSceneIsReady] = useState(false);\n  const [accessibilityOn, setAccessibilityOn] = useState(false);\n  const [characters, setCharacters] = useState(initCharacters);\n  const [dialogue, setDialogue] = useState(initDialogue);\n  const [background, setBackground] = useState(initBackground);\n  const startClocktimeRef = useRef<number>(0);\n  const pausedAtRef = useRef<number>(0);\n  const startTimerRef = useRef<number>();\n  const finishTimerRef = useRef<number>();\n  const animationRef = useRef<number>();\n  const usedCommandsRef = useRef(new Set<number>());\n\nconst [currentTime, setCurrentTime] = useState(0);\n  // TODO: I'm using a ref so that the maybeStopAudio closure doesn't get stuck\n  // with the initial value of isPlaying. Given that we also have a state,\n  // isPlaying, it feels like there's a better way.\n  const isPlayingSceneRef = useRef(false);\n\n// memoizing to prevent the useEffect from running on every render\n  const sortedCommands = useMemo(() => {\n    const normalized = commands.flatMap(command => {\n      const { startTime, finishTime, ...rest } = command;\n\nconst startCommand = {\n        ...rest,\n        time: sToMs(startTime),\n        isTalking: !!rest.dialogue\n      };\n      const finishCommand = finishTime\n        ? { ...rest, time: sToMs(finishTime), isTalking: false }\n        : null;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "579172ff6ad2f918557c55993192eedb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "isPlaying. Given that we also have a state, // isPlaying, it feels like there's a better way. const isPlayingSceneRef = useRef(false); // memoizing to prevent the useEffect from running on every render const sortedCommands = useMemo(() => { const normalized = commands.flatMap(command => { const { startTime, finishTime, ...rest } = command; const startCommand = { ...rest, time: sToMs(startTime), isTalking: !!rest.dialogue }; const finishCommand = finishTime ? { ...rest, time: sToMs(finishTime), isTalking: false } : null;\n\nreturn finishCommand ? [startCommand, finishCommand] : [startCommand];\n    });\n    normalized.sort((a, b) => a.time - b.time);\n    return normalized;\n  }, [commands]);\n\n// an extra 500ms at the end to let the characters fade out (CSS transition\n  const resetTime = sortedCommands.at(-1)!.time + 500;\n\nconst audioLoaded = () => {\n    setSceneIsReady(true);\n  };\n\nconst handlePlay = useCallback(() => {\n    const pausedAt = pausedAtRef.current;\n    const updateCurrentTime = () => {\n      const time = Date.now() - startClocktimeRef.current;\n      setCurrentTime(time);\n\nif (isPlayingSceneRef.current) {\n        animationRef.current = window.requestAnimationFrame(updateCurrentTime);\n      }\n    };\n    // TODO: if we manage the playing state in another module, we should not\n    // need the early return here. It should not be possible for this to be\n    // called at all if the scene is already playing.\n    if (isPlaying || !sceneIsReady) return;\n    setIsPlaying(true);\n    isPlayingSceneRef.current = true;\n\n// when we paused, the startRef was the clock time when we started and\n    // pausedAt was the currentTime (i.e. how long we've been playing). That\n    // means to resume we need to set the startRef to the current time minus\n    // the time we've already played.\n    startClocktimeRef.current = Date.now() - pausedAt;\n    updateCurrentTime();\n\nconst audioStartDelay = sToMs(audio.startTime) - pausedAt;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "be4a90076aeef8c4d9ff7224e617fbec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "at all if the scene is already playing. if (isPlaying || !sceneIsReady) return; setIsPlaying(true); isPlayingSceneRef.current = true; // when we paused, the startRef was the clock time when we started and // pausedAt was the currentTime (i.e. how long we've been playing). That // means to resume we need to set the startRef to the current time minus // the time we've already played. startClocktimeRef.current = Date.now() - pausedAt; updateCurrentTime(); const audioStartDelay = sToMs(audio.startTime) - pausedAt;\n\n// @ts-expect-error it's not a node timer\n    startTimerRef.current = setTimeout(() => {\n      if (audioRef.current.paused) {\n        void audioRef.current.play().then(() => {\n          canPauseRef.current = true;\n\n// If the duration is Infinity, that means the duration is simply the\n          // length of the file. However we need to actively stop the audio to\n          // ensure that cleanup (i.e. resetAudio is called) )\n          const effectiveDuration =\n            duration === Infinity ? sToMs(audioRef.current.duration) : duration;\n\n// If the delay is positive, the setTimeout will have already waited\n          // that amount of time. However, if it's negative, then the setTimeout\n          // has no delay and we need to account for that when calculating how\n          // much audio is left to play.\n          const effectiveStartDelay = Math.min(0, audioStartDelay);\n          const audioEndDelay = effectiveDuration + effectiveStartDelay;\n\nif (audioEndDelay < 0) {\n            resetAudio();\n            return;\n          }\n          // @ts-expect-error it's not a node timer\n          finishTimerRef.current = setTimeout(() => {\n            const endTimeStamp = sToMs(audio.finishTimestamp!); // it exists because duration is not Infinity\n            const audioCurrentTime = sToMs(audioRef.current.currentTime);\n            const remainingTime = endTimeStamp - audioCurrentTime;\n            // For some reason, despite the setTimeout resolving at the right\n            // time, the currentTime can be smaller than expected. That means\n            // that if we pause now it will cut off the last part.\n            if (remainingTime < 100) {\n              // 100ms is arbitrary and may need to be adjusted if people still\n              // notice the cut off",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "573594c14f19ec62a74a6f5c1c3576de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "// it exists because duration is not Infinity const audioCurrentTime = sToMs(audioRef.current.currentTime); const remainingTime = endTimeStamp - audioCurrentTime; // For some reason, despite the setTimeout resolving at the right // time, the currentTime can be smaller than expected. That means // that if we pause now it will cut off the last part. if (remainingTime < 100) { // 100ms is arbitrary and may need to be adjusted if people still // notice the cut off\n\nresetAudio();\n            } else {\n              // @ts-expect-error it's not a node timer\n              finishTimerRef.current = setTimeout(() => {\n                resetAudio();\n              }, remainingTime);\n            }\n          }, audioEndDelay);\n        });\n      }\n    }, audioStartDelay);\n  }, [audio, duration, isPlaying, resetAudio, sceneIsReady]);\n\nconst handlePause = useCallback(() => {\n    isPlayingSceneRef.current = false;\n    pausedAtRef.current = currentTime;\n    pauseAudio();\n    pauseAnimation();\n  }, [currentTime]);\n\nconst handleStop = useCallback(() => {\n    usedCommandsRef.current.clear();\n    pauseAudio();\n    pauseAnimation();\n    audioRef.current.currentTime = audio.startTimestamp || 0;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    isPlayingSceneRef.current = false;\n    setDialogue(initDialogue);\n    setCharacters(initCharacters);\n    setBackground(initBackground);\n  }, [audio, initCharacters, initBackground]);\n\nconst resetAnimation = useCallback(() => {\n    usedCommandsRef.current.clear();\n    startClocktimeRef.current = 0;\n    setCurrentTime(0);\n    setDialogue(initDialogue);\n    setCharacters(initCharacters);\n    setBackground(initBackground);\n  }, [initCharacters, initBackground]);\n\nconst resetScene = () => {\n    setIsPlaying(false);\n    isPlayingSceneRef.current = false;\n    pausedAtRef.current = 0;\n  };\n\nconst onNotify = useCallback(\n    (eventType: 'play' | 'pause' | 'stop') => {\n      if (eventType === 'play') {\n        handlePlay();\n      } else if (eventType === 'pause') {\n        handlePause();\n      } else {\n        handleStop();\n      }\n    },\n    [handlePlay, handlePause, handleStop]\n  );\n\nuseEffect(() => {\n    sceneSubject.attach(onNotify);\n    return () => {\n      sceneSubject.detach(onNotify);\n    };\n  }, [onNotify, sceneSubject]);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "80cc1a3a0a5f2aed4828452196f0bf51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "=> { usedCommandsRef.current.clear(); startClocktimeRef.current = 0; setCurrentTime(0); setDialogue(initDialogue); setCharacters(initCharacters); setBackground(initBackground); }, [initCharacters, initBackground]); const resetScene = () => { setIsPlaying(false); isPlayingSceneRef.current = false; pausedAtRef.current = 0; }; const onNotify = useCallback( (eventType: 'play' | 'pause' | 'stop') => { if (eventType === 'play') { handlePlay(); } else if (eventType === 'pause') { handlePause(); } else { handleStop(); } }, [handlePlay, handlePause, handleStop] ); useEffect(() => { sceneSubject.attach(onNotify); return () => { sceneSubject.detach(onNotify); }; }, [onNotify, sceneSubject]);\n\nuseEffect(() => {\n    if (isEmpty(sortedCommands)) return;\n\nsortedCommands.forEach((command, commandIndex) => {\n      // Start command timeout\n      if (\n        currentTime > command.time &&\n        !usedCommandsRef.current.has(commandIndex)\n      ) {\n        usedCommandsRef.current.add(commandIndex);\n        if (command.background) setBackground(command.background);\n\nsetDialogue(\n          command.dialogue\n            ? { ...command.dialogue, label: command.character }\n            : initDialogue\n        );\n\nsetCharacters(prevCharacters => {\n          const newCharacters = prevCharacters.map(character => {\n            if (character.character === command.character) {\n              return {\n                ...character,\n                position: command.position ?? character.position,\n                opacity: command.opacity ?? character.opacity,\n                isTalking: command.isTalking\n              };\n            }\n            return character;\n          });\n          return newCharacters;\n        });\n      }\n    });\n\nif (currentTime >= resetTime) {\n      // resetAnimation only works if called AFTER the commands, otherwise the\n      // commands will undo the reset.\n      resetAnimation();\n      resetScene();\n    }\n  }, [currentTime, resetTime, sortedCommands, resetAnimation]);\n\nuseEffect(() => {\n    return () => {\n      clearTimeout(startTimerRef.current);\n      clearTimeout(finishTimerRef.current);\n      // @ts-expect-error cancelAnimationFrame accepts undefined, but TS doesn't\n      // know that\n      window.cancelAnimationFrame(animationRef.current);\n    };\n  }, []);",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "f9145d7aac62ba38876723dca59e3aeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "{ ...character, position: command.position ?? character.position, opacity: command.opacity ?? character.opacity, isTalking: command.isTalking }; } return character; }); return newCharacters; }); } }); if (currentTime >= resetTime) { // resetAnimation only works if called AFTER the commands, otherwise the // commands will undo the reset. resetAnimation(); resetScene(); } }, [currentTime, resetTime, sortedCommands, resetAnimation]); useEffect(() => { return () => { clearTimeout(startTimerRef.current); clearTimeout(finishTimerRef.current); // @ts-expect-error cancelAnimationFrame accepts undefined, but TS doesn't // know that window.cancelAnimationFrame(animationRef.current); }; }, []);\n\nreturn (\n    <Col lg={10} lgOffset={1} md={10} mdOffset={1}>\n      <div\n        className='scene-wrapper'\n        style={{\n          backgroundImage: `url(\"${backgrounds}/${background}\")`,\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center center',\n          aspectRatio: '16 / 9'\n        }}\n      >\n        {!sceneIsReady ? (\n          <Loader />\n        ) : (\n          <>\n            {characters.map(\n              (\n                { character, position = {}, opacity = 1, isTalking = false },\n                i\n              ) => {\n                return (\n                  <Character\n                    key={i}\n                    name={character}\n                    position={position}\n                    opacity={opacity}\n                    isTalking={isPlaying && isTalking}\n                    sceneSubject={sceneSubject}\n                  />\n                );\n              }\n            )}\n\n{(alwaysShowDialogue || accessibilityOn) && (\n              <div\n                className={`scene-dialogue-wrap ${\n                  dialogue.align ? `scene-dialogue-align-${dialogue.align}` : ''\n                }`}\n              >\n                <div className='scene-dialogue-label'>{dialogue.label}</div>\n                <div className='scene-dialogue-text'>{dialogue.text}</div>\n              </div>\n            )}\n          </>\n        )}\n      </div>",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "45ff1830c244dd7f3eac8358432eba89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
    "source_type": "git_repo",
    "title": "scene",
    "content": "'no-repeat', backgroundPosition: 'center center', aspectRatio: '16 / 9' }} > {!sceneIsReady ? ( <Loader /> ) : ( <> {characters.map( ( { character, position = {}, opacity = 1, isTalking = false }, i ) => { return ( <Character key={i} name={character} position={position} opacity={opacity} isTalking={isPlaying && isTalking} sceneSubject={sceneSubject} /> ); } )} {(alwaysShowDialogue || accessibilityOn) && ( <div className={`scene-dialogue-wrap ${ dialogue.align ? `scene-dialogue-align-${dialogue.align}` : '' }`} > <div className='scene-dialogue-label'>{dialogue.label}</div> <div className='scene-dialogue-text'>{dialogue.text}</div> </div> )} </> )} </div>\n\n<div className='scene-controls'>\n        <button\n          className='scene-btn scene-play-btn'\n          onClick={() => sceneSubject.notify(isPlaying ? 'pause' : 'play')}\n        >\n          {isPlaying ? (\n            <>\n              <span className='sr-only'>{t('buttons.pause')}</span>\n              <FontAwesomeIcon icon={faCirclePause} size='3x' />\n            </>\n          ) : (\n            <>\n              <span className='sr-only'>{t('buttons.play')}</span>\n              <FontAwesomeIcon icon={faCirclePlay} size='3x' />\n            </>\n          )}\n        </button>\n\n{alwaysShowDialogue ? (\n          <div className='scene-a11y-btn'></div>\n        ) : (\n          <button\n            className='scene-btn scene-a11y-btn'\n            aria-label={t('buttons.closed-caption')}\n            aria-pressed={accessibilityOn}\n            onClick={() => setAccessibilityOn(!accessibilityOn)}\n          >\n            <ClosedCaptionsIcon\n              fill={\n                accessibilityOn ? 'var(--tertiary-color)' : 'var(--gray-45)'\n              }\n            />\n          </button>\n        )}\n      </div>\n      <Spacer size='m' />\n    </Col>\n  );\n}\n\nScene.displayName = 'Scene';\n\nexport default Scene;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 14369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\templates\\Challenges\\components\\scene\\scene.tsx",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "061f71f2cc83e243685036d4b2e1894b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
    "source_type": "git_repo",
    "title": "actions",
    "content": "import { createAction } from 'redux-actions';\n\nimport { actionTypes as types } from './action-types';\n\nconst checkForSuccessPayload = ({ type, payload }) =>\n  type === 'success' ? payload : null;\n\nexport const submitNewAbout = createAction(types.submitNewAbout);\nexport const submitNewAboutComplete = createAction(\n  types.submitNewAboutComplete,\n  checkForSuccessPayload\n);\nexport const submitNewAboutError = createAction(types.submitNewAboutError);\n\nexport const submitNewUsername = createAction(types.submitNewUsername);\nexport const submitNewUsernameComplete = createAction(\n  types.submitNewUsernameComplete,\n  ({ type, username }) => (type === 'success' ? username : null)\n);\nexport const submitNewUsernameError = createAction(\n  types.submitNewUsernameError\n);\n\nexport const submitProfileUI = createAction(types.submitProfileUI);\nexport const submitProfileUIComplete = createAction(\n  types.submitProfileUIComplete,\n  checkForSuccessPayload\n);\nexport const submitProfileUIError = createAction(types.submitProfileUIError);\n\nexport const updateMyEmail = createAction(types.updateMyEmail);\nexport const updateMyEmailComplete = createAction(types.updateMyEmailComplete);\nexport const updateMyEmailError = createAction(types.updateMyEmailError);\n\nexport const updateMySocials = createAction(types.updateMySocials);\nexport const updateMySocialsComplete = createAction(\n  types.updateMySocialsComplete,\n  checkForSuccessPayload\n);\nexport const updateMySocialsError = createAction(types.updateMySocialsError);\n\nexport const updateMySound = createAction(types.updateMySound);\nexport const updateMySoundComplete = createAction(\n  types.updateMySoundComplete,\n  checkForSuccessPayload\n);\nexport const updateMySoundError = createAction(types.updateMySoundError);\n\nexport const updateMyKeyboardShortcuts = createAction(\n  types.updateMyKeyboardShortcuts\n);\nexport const updateMyKeyboardShortcutsComplete = createAction(\n  types.updateMyKeyboardShortcutsComplete,\n  checkForSuccessPayload\n);\nexport const updateMyKeyboardShortcutsError = createAction(\n  types.updateMyKeyboardShortcutsError\n);\n\nexport const updateMyHonesty = createAction(types.updateMyHonesty);\nexport const updateMyHonestyComplete = createAction(\n  types.updateMyHonestyComplete,\n  checkForSuccessPayload\n);\nexport const updateMyHonestyError = createAction(types.updateMyHonestyError);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eb06568453ed63364da15234feaf859f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
    "source_type": "git_repo",
    "title": "actions",
    "content": "export const updateMySocials = createAction(types.updateMySocials); export const updateMySocialsComplete = createAction( types.updateMySocialsComplete, checkForSuccessPayload ); export const updateMySocialsError = createAction(types.updateMySocialsError); export const updateMySound = createAction(types.updateMySound); export const updateMySoundComplete = createAction( types.updateMySoundComplete, checkForSuccessPayload ); export const updateMySoundError = createAction(types.updateMySoundError); export const updateMyKeyboardShortcuts = createAction( types.updateMyKeyboardShortcuts ); export const updateMyKeyboardShortcutsComplete = createAction( types.updateMyKeyboardShortcutsComplete, checkForSuccessPayload ); export const updateMyKeyboardShortcutsError = createAction( types.updateMyKeyboardShortcutsError ); export const updateMyHonesty = createAction(types.updateMyHonesty); export const updateMyHonestyComplete = createAction( types.updateMyHonestyComplete, checkForSuccessPayload ); export const updateMyHonestyError = createAction(types.updateMyHonestyError);\n\nexport const updateMyQuincyEmail = createAction(types.updateMyQuincyEmail);\nexport const updateMyQuincyEmailComplete = createAction(\n  types.updateMyQuincyEmailComplete,\n  checkForSuccessPayload\n);\nexport const updateMyQuincyEmailError = createAction(\n  types.updateMyQuincyEmailError\n);\n\nexport const updateMyPortfolio = createAction(types.updateMyPortfolio);\nexport const updateMyPortfolioComplete = createAction(\n  types.updateMyPortfolioComplete,\n  checkForSuccessPayload\n);\nexport const updateMyPortfolioError = createAction(\n  types.updateMyPortfolioError\n);\n\nexport const validateUsername = createAction(types.validateUsername);\nexport const validateUsernameComplete = createAction(\n  types.validateUsernameComplete\n);\nexport const validateUsernameError = createAction(types.validateUsernameError);\n\nexport const verifyCert = createAction(types.verifyCert);\nexport const verifyCertComplete = createAction(\n  types.verifyCertComplete,\n  checkForSuccessPayload\n);\nexport const verifyCertError = createAction(types.verifyCertError);\n\nexport const resetProgress = createAction(types.resetProgress);\nexport const resetProgressError = createAction(types.resetProgressError);\n\nexport const resetMyEditorLayout = createAction(types.resetMyEditorLayout);\nexport const resetMyEditorLayoutComplete = createAction(\n  types.resetMyEditorLayoutComplete\n);\nexport const resetMyEditorLayoutError = createAction(\n  types.resetMyEditorLayoutError\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "85ceee65997bd049318704854e07e910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
    "source_type": "git_repo",
    "title": "actions",
    "content": "= createAction( types.updateMyPortfolioComplete, checkForSuccessPayload ); export const updateMyPortfolioError = createAction( types.updateMyPortfolioError ); export const validateUsername = createAction(types.validateUsername); export const validateUsernameComplete = createAction( types.validateUsernameComplete ); export const validateUsernameError = createAction(types.validateUsernameError); export const verifyCert = createAction(types.verifyCert); export const verifyCertComplete = createAction( types.verifyCertComplete, checkForSuccessPayload ); export const verifyCertError = createAction(types.verifyCertError); export const resetProgress = createAction(types.resetProgress); export const resetProgressError = createAction(types.resetProgressError); export const resetMyEditorLayout = createAction(types.resetMyEditorLayout); export const resetMyEditorLayoutComplete = createAction( types.resetMyEditorLayoutComplete ); export const resetMyEditorLayoutError = createAction( types.resetMyEditorLayoutError );\n\nexport const deleteAccount = createAction(types.deleteAccount);\nexport const deleteAccountError = createAction(types.deleteAccountError);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3927,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\actions.js",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "da90d416bbeb48d74cb526139f205a35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\danger-zone-saga.js",
    "source_type": "git_repo",
    "title": "danger-zone-saga",
    "content": "import { navigate } from 'gatsby';\nimport { call, put, take, takeEvery } from 'redux-saga/effects';\n\nimport { createFlashMessage } from '../../components/Flash/redux';\nimport { FlashMessages } from '../../components/Flash/redux/flash-messages';\nimport { postDeleteAccount, postResetProgress } from '../../utils/ajax';\nimport { actionTypes as appTypes } from '../action-types';\nimport { fetchUser, resetUserData } from '../actions';\nimport { deleteAccountError, resetProgressError } from './actions';\n\nfunction* deleteAccountSaga() {\n  try {\n    yield call(postDeleteAccount);\n    yield put(\n      createFlashMessage({\n        type: 'info',\n        message: FlashMessages.AccountDeleted\n      })\n    );\n    // remove current user information from application state\n    yield put(resetUserData());\n    yield call(navigate, '/learn');\n  } catch (e) {\n    yield put(deleteAccountError(e));\n  }\n}\n\nfunction* resetProgressSaga() {\n  try {\n    yield call(postResetProgress);\n    yield put(\n      createFlashMessage({\n        type: 'info',\n        message: FlashMessages.ProgressReset\n      })\n    );\n    // refresh current user data in application state\n    yield put(fetchUser());\n    // wait for the refresh to complete\n    yield take(appTypes.fetchUserComplete);\n    // the complete action has been called\n    yield call(navigate, '/');\n  } catch (e) {\n    yield put(resetProgressError(e));\n  }\n}\n\nexport function createDangerZoneSaga(types) {\n  return [\n    takeEvery(types.deleteAccount, deleteAccountSaga),\n    takeEvery(types.resetProgress, resetProgressSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1567,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\danger-zone-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c3c60c752ef79df74fa3eacbcd862832",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\selectors.js",
    "source_type": "git_repo",
    "title": "selectors",
    "content": "import { ns } from './action-types';\n\nexport const usernameValidationSelector = state => state[ns].usernameValidation;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 119,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\selectors.js",
      "source_type": "git_repo"
    },
    "token_count": 24,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "207014d561241244be230f48f722e889",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\index.js",
    "source_type": "git_repo",
    "title": "index",
    "content": "import { handleActions } from 'redux-actions';\nimport { actionTypes as types, ns } from './action-types';\nimport { createDangerZoneSaga } from './danger-zone-saga';\nimport { createSettingsSagas } from './settings-sagas';\nimport { createUpdateMyEmailSaga } from './update-email-saga';\n\nexport { ns };\n\nconst defaultFetchState = {\n  pending: false,\n  complete: false,\n  errored: false,\n  error: null\n};\n\nconst initialState = {\n  usernameValidation: {\n    isValidUsername: false,\n    fetchState: { ...defaultFetchState }\n  }\n};\n\nexport const sagas = [\n  ...createSettingsSagas(types),\n  ...createUpdateMyEmailSaga(types),\n  ...createDangerZoneSaga(types)\n];\n\nexport const reducer = handleActions(\n  {\n    [types.submitNewUsernameComplete]: state => ({\n      ...state,\n      usernameValidation: { ...initialState.usernameValidation }\n    }),\n    [types.validateUsername]: state => ({\n      ...state,\n      usernameValidation: {\n        ...state.usernameValidation,\n        isValidUsername: false,\n        fetchState: { ...defaultFetchState, pending: true }\n      }\n    }),\n    [types.validateUsernameComplete]: (state, { payload }) => ({\n      ...state,\n      usernameValidation: {\n        ...state.usernameValidation,\n        isValidUsername: !payload,\n        fetchState: { ...defaultFetchState, pending: false, complete: true }\n      }\n    })\n  },\n  initialState\n);",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1365,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\index.js",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2419784c34ceb2502baa490cf019af7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\update-email-saga.js",
    "source_type": "git_repo",
    "title": "update-email-saga",
    "content": "import { call, put, takeEvery } from 'redux-saga/effects';\nimport isEmail from 'validator/lib/isEmail';\n\nimport { createFlashMessage } from '../../components/Flash/redux';\nimport { putUserUpdateEmail } from '../../utils/ajax';\nimport { reallyWeirdErrorMessage } from '../../utils/error-messages';\nimport { updateMyEmailComplete, updateMyEmailError } from './actions';\n\nfunction* updateMyEmailSaga({ payload: email = '' }) {\n  if (!email || !isEmail(email)) {\n    yield put(createFlashMessage(reallyWeirdErrorMessage));\n    return;\n  }\n  try {\n    const { data } = yield call(putUserUpdateEmail, email);\n    yield put(\n      updateMyEmailComplete({\n        ...data,\n        payload: { email, isEmailVerified: false }\n      })\n    );\n    yield put(createFlashMessage(data));\n  } catch (e) {\n    yield put(updateMyEmailError(e));\n  }\n}\n\nexport function createUpdateMyEmailSaga(types) {\n  return [takeEvery(types.updateMyEmail, updateMyEmailSaga)];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 947,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\update-email-saga.js",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb490826d082f4bb674f1e00c37be873",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a1-professional-chinese\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: A1 Professional Chinese\nsuperBlock: a1-professional-chinese\ncertification: a1-professional-chinese\nIntroduction to A1 Professional Chinese\nA1 Professional Chinese",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 183,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a1-professional-chinese\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 38,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1e24236f53946f23d9b0b924f9082580",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-english-for-developers\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: A2 English for Developers\nsuperBlock: a2-english-for-developers\ncertification: a2-english-for-developers\nIntroduction to A2 English for Developers\nA2 English for Developers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 193,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-english-for-developers\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bdc0ab67cda5b09888272014d28a12f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-professional-chinese\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: A2 Professional Chinese\nsuperBlock: a2-professional-chinese\ncertification: a2-professional-chinese\nIntroduction to A2 Professional Chinese\nA2 Professional Chinese",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 183,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-professional-chinese\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 38,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "642db1512973451481f3cc12b174d465",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-professional-spanish\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: A2 Professional Spanish\nsuperBlock: a2-professional-spanish\ncertification: a2-professional-spanish\nIntroduction to A2 Professional Spanish\nA2 Professional Spanish",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 183,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\a2-professional-spanish\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 38,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "18c888941cb512c96c7f26fe6ee91dfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\b1-english-for-developers\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: B1 English for Developers\nsuperBlock: b1-english-for-developers\ncertification: b1-english-for-developers\nIntroduction to B1 English for Developers\nB1 English for Developers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 193,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\b1-english-for-developers\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5309ccce8b973fdff6f94bec2e7eff3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "import { omit } from 'lodash-es';\nimport {\n  call,\n  debounce,\n  put,\n  select,\n  takeEvery,\n  takeLatest\n} from 'redux-saga/effects';\nimport store from 'store';\nimport { navigate } from 'gatsby';\n\nimport {\n  certTypeIdMap,\n  certTypes\n} from '../../../../shared/config/certification-settings';\nimport { createFlashMessage } from '../../components/Flash/redux';\nimport { liveCerts } from '../../../config/cert-and-project-map';\nimport {\n  getUsernameExists,\n  putUpdateMyAbout,\n  putUpdateMyHonesty,\n  putUpdateMyKeyboardShortcuts,\n  putUpdateMyPortfolio,\n  putUpdateMyProfileUI,\n  putUpdateMyQuincyEmail,\n  putUpdateMySocials,\n  putUpdateMyUsername,\n  putVerifyCert\n} from '../../utils/ajax';\nimport { completedChallengesSelector } from '../selectors';\nimport {\n  resetMyEditorLayoutComplete,\n  resetMyEditorLayoutError,\n  submitNewAboutComplete,\n  submitNewAboutError,\n  submitNewUsernameComplete,\n  submitNewUsernameError,\n  submitProfileUIComplete,\n  submitProfileUIError,\n  updateMyHonestyComplete,\n  updateMyHonestyError,\n  updateMyKeyboardShortcutsComplete,\n  updateMyKeyboardShortcutsError,\n  updateMyPortfolioComplete,\n  updateMyPortfolioError,\n  updateMyQuincyEmailComplete,\n  updateMyQuincyEmailError,\n  updateMySocialsComplete,\n  updateMySocialsError,\n  updateMySoundComplete,\n  updateMySoundError,\n  validateUsernameComplete,\n  validateUsernameError,\n  verifyCertComplete,\n  verifyCertError\n} from './actions';\n\nfunction* submitNewAboutSaga({ payload }) {\n  try {\n    const { data } = yield call(putUpdateMyAbout, payload);\n    yield put(submitNewAboutComplete({ ...data, payload }));\n    yield put(createFlashMessage(data));\n  } catch (e) {\n    yield put(submitNewAboutError(e));\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "b0f57067c5b13c590335a095c54ceac6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "putUpdateMyHonesty, putUpdateMyKeyboardShortcuts, putUpdateMyPortfolio, putUpdateMyProfileUI, putUpdateMyQuincyEmail, putUpdateMySocials, putUpdateMyUsername, putVerifyCert } from '../../utils/ajax'; import { completedChallengesSelector } from '../selectors'; import { resetMyEditorLayoutComplete, resetMyEditorLayoutError, submitNewAboutComplete, submitNewAboutError, submitNewUsernameComplete, submitNewUsernameError, submitProfileUIComplete, submitProfileUIError, updateMyHonestyComplete, updateMyHonestyError, updateMyKeyboardShortcutsComplete, updateMyKeyboardShortcutsError, updateMyPortfolioComplete, updateMyPortfolioError, updateMyQuincyEmailComplete, updateMyQuincyEmailError, updateMySocialsComplete, updateMySocialsError, updateMySoundComplete, updateMySoundError, validateUsernameComplete, validateUsernameError, verifyCertComplete, verifyCertError } from './actions'; function* submitNewAboutSaga({ payload }) { try { const { data } = yield call(putUpdateMyAbout, payload); yield put(submitNewAboutComplete({ ...data, payload })); yield put(createFlashMessage(data)); } catch (e) { yield put(submitNewAboutError(e)); } }\n\nfunction* submitNewUsernameSaga({ payload: username }) {\n  try {\n    const { data } = yield call(putUpdateMyUsername, username);\n    yield put(submitNewUsernameComplete({ ...data, username }));\n    // When the username is updated, the user would otherwise still be on their old profile:\n    navigate(`/${username}`);\n    yield put(createFlashMessage(data));\n  } catch (e) {\n    yield put(submitNewUsernameError(e));\n  }\n}\n\nfunction* submitProfileUISaga({ payload }) {\n  try {\n    const { data } = yield call(putUpdateMyProfileUI, payload);\n    yield put(submitProfileUIComplete({ ...data, payload }));\n    yield put(createFlashMessage(data));\n  } catch {\n    yield put(submitProfileUIError);\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "57724e5a3ca575a06f069e1d5ad7cf09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "submitNewUsernameSaga({ payload: username }) { try { const { data } = yield call(putUpdateMyUsername, username); yield put(submitNewUsernameComplete({ ...data, username })); // When the username is updated, the user would otherwise still be on their old profile: navigate(`/${username}`); yield put(createFlashMessage(data)); } catch (e) { yield put(submitNewUsernameError(e)); } } function* submitProfileUISaga({ payload }) { try { const { data } = yield call(putUpdateMyProfileUI, payload); yield put(submitProfileUIComplete({ ...data, payload })); yield put(createFlashMessage(data)); } catch { yield put(submitProfileUIError); } }\n\nfunction* updateMySocialsSaga({ payload: update }) {\n  try {\n    const { data } = yield call(putUpdateMySocials, update);\n    yield put(updateMySocialsComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMySocialsError);\n  }\n}\n\nfunction* updateMySoundSaga({ payload: update }) {\n  try {\n    store.set('fcc-sound', !!update.sound);\n    const data = {\n      message: 'flash.updated-sound',\n      type: 'success'\n    };\n    yield put(updateMySoundComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMySoundError);\n  }\n}\n\nfunction* resetMyEditorLayoutSaga() {\n  const layout = store.get('challenge-layout');\n\nif (layout) {\n    try {\n      const data = {\n        message: 'flash.reset-editor-layout',\n        type: 'success'\n      };\n\nstore.remove('challenge-layout');\n\nyield put(createFlashMessage({ ...data }));\n      yield put(resetMyEditorLayoutComplete({ ...data }));\n    } catch {\n      yield put(resetMyEditorLayoutError);\n    }\n  }\n}\n\nfunction* updateMyKeyboardShortcutsSaga({ payload: update }) {\n  try {\n    const { data } = yield call(putUpdateMyKeyboardShortcuts, update);\n    yield put(updateMyKeyboardShortcutsComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMyKeyboardShortcutsError);\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "12370bfa4ac30b42b5a94f783ea8bb57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "{ yield put(updateMySoundError); } } function* resetMyEditorLayoutSaga() { const layout = store.get('challenge-layout'); if (layout) { try { const data = { message: 'flash.reset-editor-layout', type: 'success' }; store.remove('challenge-layout'); yield put(createFlashMessage({ ...data })); yield put(resetMyEditorLayoutComplete({ ...data })); } catch { yield put(resetMyEditorLayoutError); } } } function* updateMyKeyboardShortcutsSaga({ payload: update }) { try { const { data } = yield call(putUpdateMyKeyboardShortcuts, update); yield put(updateMyKeyboardShortcutsComplete({ ...data, payload: update })); yield put(createFlashMessage({ ...data })); } catch { yield put(updateMyKeyboardShortcutsError); } }\n\nfunction* updateMyHonestySaga({ payload: update }) {\n  try {\n    const { data } = yield call(putUpdateMyHonesty, update);\n    yield put(updateMyHonestyComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMyHonestyError);\n  }\n}\n\nfunction* updateMyQuincyEmailSaga({ payload: update }) {\n  try {\n    const { data } = yield call(putUpdateMyQuincyEmail, update);\n    yield put(updateMyQuincyEmailComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMyQuincyEmailError);\n  }\n}\n\nfunction* updateMyPortfolioSaga({ payload: update }) {\n  try {\n    const { data } = yield call(putUpdateMyPortfolio, update);\n    yield put(updateMyPortfolioComplete({ ...data, payload: update }));\n    yield put(createFlashMessage({ ...data }));\n  } catch {\n    yield put(updateMyPortfolioError);\n  }\n}\n\nfunction* validateUsernameSaga({ payload }) {\n  try {\n    const {\n      data: { exists }\n    } = yield call(getUsernameExists, payload);\n    yield put(validateUsernameComplete(exists));\n  } catch (e) {\n    yield put(validateUsernameError(e));\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "9a2c333780849411b9e3051826947050",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "...data, payload: update })); yield put(createFlashMessage({ ...data })); } catch { yield put(updateMyQuincyEmailError); } } function* updateMyPortfolioSaga({ payload: update }) { try { const { data } = yield call(putUpdateMyPortfolio, update); yield put(updateMyPortfolioComplete({ ...data, payload: update })); yield put(createFlashMessage({ ...data })); } catch { yield put(updateMyPortfolioError); } } function* validateUsernameSaga({ payload }) { try { const { data: { exists } } = yield call(getUsernameExists, payload); yield put(validateUsernameComplete(exists)); } catch (e) { yield put(validateUsernameError(e)); } }\n\nfunction* verifyCertificationSaga({ payload }) {\n  // check redux if can claim cert before calling backend\n  const currentCert = liveCerts.find(cert => cert.certSlug === payload);\n  const completedChallenges = yield select(completedChallengesSelector);\n  const certTitle = currentCert?.title || payload;\n\n// (20/06/2022) Full Stack client-side validation is already done here:\n  // https://github.com/freeCodeCamp/freeCodeCamp/blob/main/client/src/components/settings/certification.js#L309\n  if (currentCert?.id !== certTypeIdMap[certTypes.fullStack]) {\n    const flash = {\n      type: 'info',\n      message: 'flash.incomplete-steps',\n      variables: { name: certTitle }\n    };\n\nconst currentCertIds = currentCert?.projects?.map(project => project.id);\n    const canClaimCert = currentCertIds.every(id =>\n      completedChallenges.find(challenge => challenge.id === id)\n    );\n\nif (!canClaimCert) {\n      yield put(createFlashMessage(flash));\n      return;\n    }\n  }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "4e5a93d6b2a0a762f2377c2f77e6a747",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "backend const currentCert = liveCerts.find(cert => cert.certSlug === payload); const completedChallenges = yield select(completedChallengesSelector); const certTitle = currentCert?.title || payload; // (20/06/2022) Full Stack client-side validation is already done here: // https://github.com/freeCodeCamp/freeCodeCamp/blob/main/client/src/components/settings/certification.js#L309 if (currentCert?.id !== certTypeIdMap[certTypes.fullStack]) { const flash = { type: 'info', message: 'flash.incomplete-steps', variables: { name: certTitle } }; const currentCertIds = currentCert?.projects?.map(project => project.id); const canClaimCert = currentCertIds.every(id => completedChallenges.find(challenge => challenge.id === id) ); if (!canClaimCert) { yield put(createFlashMessage(flash)); return; } }\n\n// redux says challenges are complete, call back end\n  try {\n    const {\n      data: { response, isCertMap, completedChallenges }\n    } = yield call(putVerifyCert, payload);\n    yield put(\n      verifyCertComplete({\n        ...response,\n        payload: {\n          ...isCertMap,\n          completedChallenges: completedChallenges.map(x => ({\n            ...omit(x, 'files'),\n            challengeFiles: x.files ?? null\n          }))\n        }\n      })\n    );\n    yield put(createFlashMessage(response));\n  } catch (e) {\n    yield put(verifyCertError(e));\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "615ba5dfcb5a058a88786a6dd7da9818",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
    "source_type": "git_repo",
    "title": "settings-sagas",
    "content": "=> project.id); const canClaimCert = currentCertIds.every(id => completedChallenges.find(challenge => challenge.id === id) ); if (!canClaimCert) { yield put(createFlashMessage(flash)); return; } } // redux says challenges are complete, call back end try { const { data: { response, isCertMap, completedChallenges } } = yield call(putVerifyCert, payload); yield put( verifyCertComplete({ ...response, payload: { ...isCertMap, completedChallenges: completedChallenges.map(x => ({ ...omit(x, 'files'), challengeFiles: x.files ?? null })) } }) ); yield put(createFlashMessage(response)); } catch (e) { yield put(verifyCertError(e)); } }\n\nexport function createSettingsSagas(types) {\n  return [\n    takeEvery(types.updateMySocials, updateMySocialsSaga),\n    takeEvery(types.updateMyHonesty, updateMyHonestySaga),\n    takeEvery(types.updateMySound, updateMySoundSaga),\n    takeEvery(types.resetMyEditorLayout, resetMyEditorLayoutSaga),\n    takeEvery(types.updateMyKeyboardShortcuts, updateMyKeyboardShortcutsSaga),\n    takeEvery(types.updateMyQuincyEmail, updateMyQuincyEmailSaga),\n    takeEvery(types.updateMyPortfolio, updateMyPortfolioSaga),\n    takeLatest(types.submitNewAbout, submitNewAboutSaga),\n    takeLatest(types.submitNewUsername, submitNewUsernameSaga),\n    debounce(2000, types.validateUsername, validateUsernameSaga),\n    takeLatest(types.submitProfileUI, submitProfileUISaga),\n    takeEvery(types.verifyCert, verifyCertificationSaga)\n  ];\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 7348,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\redux\\settings\\settings-sagas.js",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "e957e5fce54f4e626127261f4066d060",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\back-end-development-and-apis\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Back End Development and APIs\nsuperBlock: back-end-development-and-apis\ncertification: back-end-development-and-apis\nIntroduction to Back End Development and APIs\nThis is a stub introduction for Back End Development and APIs\nMicroservices\nSo, what are Microservices Here is a fairly simple definition from Techtarget - Microservices, or microservice architecture, is an approach to application development in which a large application is built as a suite of modular components or services Basically, it is an architectural style of developing large applications through a multitude of small, self contained services that interact with one another to provide the overall functionality The style is best understood by comparing it to a traditional application built as a monolith A monolith typically has the three key components of any application - the UI, Business logic and the Data storage - all bundled up into a single codebase This is deployed on a server, and managed thereby through change management As long as the application is small, doesn't change too often and is able to effectively scale easily, managing it is not a problem However, most applications grow over a period of time, become more complex and are unable to scale very well While horizontal scaling is one way of scaling monoliths, the issue of managing change and operational efficiency of a large codebase is daunting, at best To overcome some of the issues, one of the suggestions that was made early on was to functionally decompose an application, referred to as the Scale Cube in the book The Art of Scalability This eventually led to the microservices pattern that we see now A microservice takes a single bit of functionality and bundles all the layers of technology into it This means that each microservice has its own UI, business logic and data store To deliver a larger piece of functionality, microservices talk to one another through common communication methods like APIs or messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3575,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\back-end-development-and-apis\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2df8beca684d7fc5033f8207fb184beb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\back-end-development-and-apis\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "application, referred to as the Scale Cube in the book The Art of Scalability This eventually led to the microservices pattern that we see now A microservice takes a single bit of functionality and bundles all the layers of technology into it This means that each microservice has its own UI, business logic and data store To deliver a larger piece of functionality, microservices talk to one another through common communication methods like APIs or messagesKey benefits\nMicroservices can be developed and deployed independently of one another, thereby reducing the risk of one wrong piece of code bringing down an entire application\nEasier to isolate and find where issues lie, while debugging\nFits the modern DevOps paradigm, as the architecture is well placed for Continuous Integration/Continuous Deployment\nEnables developers to choose a language and data store technology best suited for that bit of functionality\nEase of automated deployment means it's best suited for the cloud\nWay easier to scale than monoliths, due to ease in deploying multiple instances of the same service\nEasy to change, as it encapsulates a single piece of business functionality\nKey drawbacks\nAdditional operational overheads to monitor and manage multiple services\nManage communications between services\nAdditional effort to build fault tolerance\nGetting the right balance of functional and data separation is not easy\nDistributed transaction model comes with its own share of issues regarding data consistency (eventual consistency)\nSources\nMicroservices, a definition - by Martin Fowler and James Lewis : https://www martinfowler com/articles/microservices html\nIntroduction to Microservices - NGINX blog : https://www nginx com/blog/introduction-to-microservices/\nWhat are microservices - Smartbear : https://smartbear com/learn/api-design/what-are-microservices/",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3575,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\back-end-development-and-apis\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c7c8ee773943e73bd6c72a9737a0d18f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\basic-html\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Basic HTML\nsuperBlock: basic-html\ncertification: basic-html\nIntroduction to Basic HTML\nIntroduction to Basic HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 135,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\basic-html\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 27,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "88a1e352d6fb75bc5e5d87374844903c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\coding-interview-prep\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Coding Interview Prep\nsuperBlock: coding-interview-prep\ncertification: coding-interview-prep\nIntroduction to Coding Interview Prep\nThis introduction is a stub\nHelp us make it real on GitHub.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 283,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\coding-interview-prep\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "022386b9e02474d5115a492ab878f007",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\college-algebra-with-python\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: College Algebra with Python\nsuperBlock: college-algebra-with-python\ncertification: college-algebra-with-python\nIntroduction to College Algebra with Python\nThis course is designed as a one-semester college course. It consists of instructional videos, with Google Colaboratory notebooks to follow along interactively, assignments, and challenging projects.\nAs you go through each part of this course in sequence, you will gain a full understanding of Algebra and how to write Python code to solve Algebra problems.\nThroughout this course, you will also build your own Algebra Colab notebook that you will be able to use as your custom calculator. This course (and the code you write here) will give you the foundation for a deeper math and data science understanding.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 788,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\college-algebra-with-python\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c009891efecbe5d8d10380bbaf12dacf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\daily-coding-challenge\\[...].tsx",
    "source_type": "git_repo",
    "title": "[...]",
    "content": "/* eslint-disable filenames-simple/naming-convention */\nimport { Router } from '@gatsbyjs/reach-router';\nimport { withPrefix } from 'gatsby';\nimport React from 'react';\n\nimport ShowDailyCodingChallenge from '../../../client-only-routes/show-daily-coding-challenge';\nimport RedirectToArchive from '../../../components/redirect-daily-challenge-archive';\n\nconst inlineStyles = {\n  minHeight: 0,\n  height: '100%'\n};\n\nfunction DailyCodingChallengeAll(): JSX.Element {\n  return (\n    // Router adds an element around the editor, messing with the layout because the editor is a flex item\n    // These few inline styles fix it.\n    <Router style={inlineStyles}>\n      <ShowDailyCodingChallenge\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        path={withPrefix('/learn/daily-coding-challenge/:date')}\n      />\n\n<RedirectToArchive default />\n    </Router>\n  );\n}\n\nDailyCodingChallengeAll.displayName = 'DailyCodingChallengeAll';\nexport default DailyCodingChallengeAll;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1016,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\daily-coding-challenge\\[...].tsx",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce88f4f7b3c5a042355ff64fd40ddcc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\daily-coding-challenge\\archive.tsx",
    "source_type": "git_repo",
    "title": "archive",
    "content": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Container, Col, Row, Spacer } from '@freecodecamp/ui';\nimport Map from '../../../components/Map';\nimport DailyCodingChallengeCalendar from '../../../components/daily-coding-challenge/calendar';\nimport DailyCodingChallengeIcon from '../../../assets/icons/daily-coding-challenge';\nimport FourOhFour from '../../../components/FourOhFour';\nimport { showDailyCodingChallenges } from '../../../../config/env.json';\n\nfunction Archive(): JSX.Element {\n  const { t } = useTranslation();\n\nif (!showDailyCodingChallenges) {\n    return <FourOhFour />;\n  }\n\nreturn (\n    <Container>\n      <Row>\n        <Col md={12} sm={12} xs={12}>\n          <Spacer size='l' />\n          <h1 className='text-center big-heading'>\n            {t('daily-coding-challenges.title')}\n          </h1>\n          <Spacer size='m' />\n          <DailyCodingChallengeIcon className='cert-header-icon' />\n          <Spacer size='l' />\n          <DailyCodingChallengeCalendar />\n        </Col>\n        <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n          <Spacer size='l' />\n          <Map />\n          <Spacer size='l' />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nArchive.displayName = 'Archive';\n\nexport default Archive;",
    "metadata": {
      "file_extension": ".tsx",
      "file_type": "tsx",
      "file_size": 1292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\daily-coding-challenge\\archive.tsx",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c399b657505a610faa744ec3f15cf31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\data-analysis-with-python\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Data Analysis with Python\nsuperBlock: data-analysis-with-python\ncertification: data-analysis-with-python\nIntroduction to Data Analysis with Python\nLearn the basics of data analysis with Python.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 214,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\data-analysis-with-python\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 39,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c1783a0bd188482ca597269a5bfc685d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\data-visualization\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Data Visualization\nsuperBlock: data-visualization\ncertification: data-visualization\nIntroduction to Data Visualization\nThis is a stub introduction for Data Visualization",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 190,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\data-visualization\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 32,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2e461f442f5ede731f8022b8e2e1c7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\foundational-c-sharp-with-microsoft\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Foundational C# with Microsoft\nsuperBlock: foundational-c-sharp-with-microsoft\ncertification: foundational-c-sharp-with-microsoft\nIntroduction to Foundational C# with Microsoft\nFoundational C# with Microsoft",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 228,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\foundational-c-sharp-with-microsoft\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a191274bed5e97b0dbf987bb396c96a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\dev-playground\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Dev Playground\nsuperBlock: dev-playground\ncertification: dev-playground\nIntroduction to the Dev Playground\nPlayground for creating and testing new challenges",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 178,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\dev-playground\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 33,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "890cee503dec245e01cf34f7c8d7a224",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\front-end-development-libraries\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Front End Development Libraries\nsuperBlock: front-end-development-libraries\ncertification: front-end-development-libraries\nIntroduction to Front End Development Libraries\nThis is a stub introduction for Front End Development Libraries",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\front-end-development-libraries\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 42,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fd736ef21ef4fcdd717d8ea7ffb0799d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Certified Full Stack Developer\nsuperBlock: full-stack-developer\ncertification: full-stack-developer\nCertified Full Stack Developer\nLearn HTML, CSS, JavaScript, Relational Databases, React, and Node.js to become a Certified Full Stack Developer.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 265,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "19606bfd994094ceed4174403a16def5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Legacy JavaScript Algorithms and Data Structures\nsuperBlock: javascript-algorithms-and-data-structures\ncertification: javascript-algorithms-and-data-structures\nIntroduction to JavaScript Algorithms and Data Structures\nJavaScript Algorithms and Data Structures will teach you basic JavaScript in a series of challenges. It will teach you how to assign variables, arrays, create functions, and some of the various loop types used in JavaScript. Then it will teach you to apply what you’ve learned in multiple algorithm creation challenges. Once you have completed all the challenges and the required projects you will receive the JavaScript Algorithms and Data Structures Certification.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 707,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 119,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c30124fad6d0ce7a2658eab62eb2721",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Information Security\nsuperBlock: information-security\ncertification: information-security\nIntroduction to Information Security\nThis is a stub introduction for Information Security",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 200,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 30,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8491f26c25fde52d64c347e7b9248f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: JavaScript Algorithms and Data Structures\nsuperBlock: javascript-algorithms-and-data-structures-v8\ncertification: javascript-algorithms-and-data-structures\nDoes it need a title?\nNaomi will put stuff here eventually.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 236,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5813b60a59024259d3b0915d84298984",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Machine Learning with Python\nsuperBlock: machine-learning-with-python\ncertification: machine-learning-with-python\nIntroduction to Machine Learning with Python\nLearn the basics of Machine Learning with Python.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 229,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 39,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c02edc8ff007f5ef1aa00ef65abc9dbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler\nsuperBlock: project-euler\ncertification: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 798,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 144,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f4107a7def010614f6745c2d1ac1d93a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\python-for-everybody\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Python for Everybody\nsuperBlock: python-for-everybody\ncertification: python-for-everybody\nIntroduction to Python for Everybody\nLearn the basics of Python.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 175,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\python-for-everybody\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 36,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a026b530bed10a178743bded96d58fa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Quality Assurance\nsuperBlock: quality-assurance\ncertification: quality-assurance\nIntroduction to Quality Assurance\nThis is a stub introduction for Quality Assurance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 185,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 32,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f48ff72e7cdab933f6bddab54a35ca2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\relational-database\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Relational Database\nsuperBlock: relational-database\ncertification: relational-database\nIntroduction to Relational Database\nThis introduction is a stub\nHelp us make it real on GitHub.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 275,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\relational-database\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 40,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a470cf3242521e756f03bf2c8e56f62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\rosetta-code\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Rosetta Code\nsuperBlock: rosetta-code\ncertification: rosetta-code\nRosetta Code\nThe Rosetta Code is a list of programming challenges which will help you build your programming skills.\n\"The idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.\" - Homepage of the Rosetta Code site",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 510,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\rosetta-code\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 98,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "52f5f388bd14e568f14684e8e37696b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Responsive Web Design\nsuperBlock: responsive-web-design\ncertification: responsive-web-design\nIntroduction to Responsive Web Design\nWelcome to Responsive Web Design!\nLet's first take a look at what is in the scope of Responsive Web Design (and what is not).\nThe Web part of Responsive Web Design means that the content you are creating is designed to be delivered over the web to users' browsers. To do this, you will need to learn the language that browsers use to describe web pages: HTML (Hypertext Markup Language) for content, and CSS (Cascading Style Sheets) for design.\nThat brings us to design. Web Design focuses on how websites should look and behave to the end user. There are plenty of additional aspects to websites, including how to host a website so people can access it, how to protect your websites and store your users' data, and the ethos behind what should go on a website in the first place. These are somewhat harder to teach, but do require a good understanding of the capabilities of the web in modern contexts.\nAnd what of the word Responsive? Well, that brings us to the idea of modern contexts. In today's world, websites are expected to be just as accessible on laptops, tablets and phones. If you compare your user experience on a document-editing program on a computer versus a document-editing program on a mobile, the features on mobile are likely to be far more constrained. This applies in some way to websites as well, but developers have found interesting ways to adapt to the mobile experience, not in the least by harnessing powerful features built for flexible (a.k.a responsive) web displays such as CSS flexbox and CSS grid.\nReady to learn about good design practices for the web? Let's get started!\nBegin Course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1865,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b0b9249e735b12876da723aeabe8d21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Semantic HTML\nsuperBlock: semantic-html\ncertification: semantic-html\nIntroduction to Semantic HTML\nIntroduction to Semantic HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 150,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 27,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c4b22558a05fc78f5dcba51827466669",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Scientific Computing with Python\nsuperBlock: scientific-computing-with-python\ncertification: scientific-computing-with-python\nIntroduction to Scientific Computing with Python\nThe Scientific Computing with Python curriculum will equip you with the fundamentals of scientific computing, including data structures and algorithms to solidify your understanding of Python programming.\nAmong the projects, you'll learn Python list comprehensions by building a case converter program, and master string manipulation by developing a cipher. The course also includes lessons on working with numbers and strings through implementing the Luhn algorithm and using lambda functions by creating an expense tracker.\nThe curriculum also covers algorithm design with the shortest path algorithm, recursion with the Tower of Hanoi puzzle, and data structures with the merge sort algorithm.\nIn addition to core programming skills, the curriculum emphasizes real-world applications of scientific computing. You'll learn about numerical methods, building a vector space and simulating projectile motion, making you proficient in scientific and analytical programming.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1169,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4c652681e7529fd7a3039c0db5da56b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: The Odin Project\nsuperBlock: the-odin-project\ncertification: the-odin-project\nThe Odin project\nThe Odin Project is one of those \"What I wish I had when I was learning\" resources. Not everyone has access to a computer science education or the funds to attend an intensive coding school and neither of those is right for everyone anyway. This project is designed to fill in the gap for people who are trying to hack it on their own but still want a high quality education.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 491,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 104,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e700c614b0b3302c632b648c06664a0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-build-a-recipe-page-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Build a Recipe Page'\nblock: top-build-a-recipe-project\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Build a Recipe Page\nDescription is to be determined",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 209,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-build-a-recipe-page-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4ebd18c02878156fdff784ced1f23ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-css-foundations\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Learn CSS Foundations'\nblock: top-learn-css-foundations\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Learn CSS Foundations\nCSS (Cascading Style Sheets) foundations are essential for anyone looking to design visually appealing and user-friendly web pages. Understanding the basics of CSS allows you to control the layout, appearance, and responsiveness of your web content, making your websites more engaging and accessible.\nThe goal of this project is to master the fundamental concepts of CSS. You'll learn how to select HTML elements, apply styles, and understand the cascade and specificity rules. This includes working with colors, fonts, margins, paddings, and positioning to create well-structured and visually appealing web pages.\nProficiency in CSS is crucial for creating modern, responsive web designs. Throughout this project, you'll engage in hands-on exercises that cover a range of topics, such as styling text, creating layouts, and building responsive designs that adapt to different screen sizes. By the end, you'll have the skills to effectively style your web pages, enhancing the user experience and visual appeal.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1194,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-css-foundations\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7e50b6af622b0f4630db5f5c88209c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-css-specificity\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Learn CSS Specificity'\nblock: top-learn-css-specificity\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Learn CSS Specificity\nUnderstanding CSS specificity is vital for any web developer aiming to create precise and maintainable stylesheets. Specificity determines which CSS rules are applied when multiple rules target the same element, allowing you to control and predict the outcome of your styling choices.\nThe goal of this project is to master the concept of CSS specificity. You'll learn how specificity is calculated, the impact of different selector types, and best practices for managing specificity in your stylesheets. This includes working with element selectors, class selectors, ID selectors, and inline styles, as well as understanding the importance of the cascade and inheritance.\nProficiency in CSS specificity is crucial for creating consistent and predictable web designs. Throughout this project, you'll engage in hands-on exercises that simulate real-world scenarios, such as resolving specificity conflicts, organizing your stylesheets for clarity, and avoiding common pitfalls like overly specific selectors. By the end, you'll have the skills to manage specificity effectively, ensuring your CSS is clean, scalable, and easy to maintain.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1319,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-css-specificity\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7170f00b9f6404e94e27176099b9bcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-html-foundations\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Learn HTML Foundations'\nblock: top-learn-html-foundations\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Learn HTML Foundations\nHTML (HyperText Markup Language) foundations are essential for anyone looking to create web pages. Understanding the basics of HTML is the first step towards building structured, semantic, and accessible web content.\nThe goal of this project is to master the fundamental concepts of HTML. You'll learn how to create and structure web pages using HTML tags and elements. This includes working with headings, paragraphs, lists, links, images, tables, and forms, as well as understanding the importance of semantic HTML for accessibility and SEO.\nProficiency in HTML is crucial for any web developer, as it forms the backbone of web content. Throughout this project, you'll engage in hands-on exercises that guide you through creating various HTML elements, nesting them correctly, and ensuring your code is clean and well-organized. By the end, you'll have the skills to build basic web pages and a strong foundation to build upon with CSS and JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1139,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-learn-html-foundations\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3d09a1926d4b963319c05e4ea760be28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-working-with-text\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Working with Text'\nblock: top-working-with-text\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Working with Text\nText is a fundamental element of web content, serving as the primary means of communication on most websites. Mastering the art of working with text in web development involves understanding how to structure, style, and manipulate textual content to create clear, readable, and visually appealing web pages.\nThe goal of this project is to explore the various aspects of working with text in web development. You'll learn how to use HTML to structure text content, apply CSS for typography and text styling, and leverage JavaScript for dynamic text manipulation. You'll also delve into important concepts like web fonts, text accessibility, and responsive text design.\nEffective text handling is crucial for creating engaging and user-friendly websites. Throughout this project, you'll work on practical exercises that cover a range of text-related challenges, from creating visually appealing headings and paragraphs to implementing dynamic text effects. By the end, you'll have the skills to craft web pages with polished, professional-looking text that enhances both the aesthetics and usability of your sites.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1283,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-working-with-text\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3eae7247d37ec50741ecbf039dd31901",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-links-and-images\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: 'The Odin Project: Links and Images'\nblock: top-links-and-images\nsuperBlock: the-odin-project\nIntroduction to The Odin Project: Links and Images\nLinks and images are fundamental building blocks of the web, allowing users to navigate between pages and providing visual content that enhances the user experience. Understanding how to properly implement and manipulate these elements is crucial for creating effective and engaging websites.\nThe goal of this project is to master the implementation of links and images in web development. You'll learn how to create various types of hyperlinks, embed images with proper attributes, and understand best practices for optimizing web graphics. You'll also explore advanced techniques like image maps and responsive images.\nProficiency in working with links and images is essential for creating well-structured and visually appealing websites. Throughout this project, you'll engage in practical exercises that cover everything from basic link structures to complex image handling scenarios. By the end, you'll have the skills to create seamless navigation and visually rich web pages that enhance user engagement and accessibility.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1197,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\the-odin-project\\top-links-and-images\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "035bb3cfa7f933e621c44b5540b19443",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\cat-blog-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Cat Blog Page\nblock: cat-blog-page\nsuperBlock: semantic-html\nIntroduction to the Build a Cat Blog Page\nIn this workshop, you will build an HTML only blog page using semantic elements including the main, nav, article and footer elements.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 337,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\cat-blog-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3a6ac2deec3d608468298ed63e0a30fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\event-hub\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Event Hub\nblock: event-hub\nsuperBlock: semantic-html\nIntroduction to the Build an Event Hub\nIn this lab, you will build an event hub using semantic HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 190,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\semantic-html\\event-hub\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 41,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ec4df9db61d4132d4240a90f45d55f7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-budget-app-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Budget App Project\nblock: build-a-budget-app-project\nsuperBlock: scientific-computing-with-python\nIntroduction to the Build a Budget App Project\nBuild a Budget App Project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 220,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-budget-app-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fd647aea02591aa276770cfa105255b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-polygon-area-calculator-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Polygon Area Calculator Project\nblock: build-a-polygon-area-calculator-project\nsuperBlock: scientific-computing-with-python\nIntroduction to the Build a Polygon Area Calculator Project\nBuild a Polygon Area Calculator Project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 272,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-polygon-area-calculator-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0aeb660e22bd52f0a9f5ebcd0af00fe1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-probability-calculator-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Probability Calculator Project\nblock: build-a-probability-calculator-project\nsuperBlock: scientific-computing-with-python\nIntroduction to the Build a Probability Calculator Project\nBuild a Probability Calculator Project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 268,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-probability-calculator-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "96f0c84e417f3518f742a59cd2429649",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-time-calculator-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Time Calculator Project\nblock: build-a-time-calculator-project\nsuperBlock: scientific-computing-with-python\nIntroduction to the Build a Time Calculator Project\nBuild a Time Calculator Project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 240,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-a-time-calculator-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "66d006520bf66b6f751333b4cafa5918",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-an-arithmetic-formatter-project\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Arithmetic Formatter Project\nblock: build-an-arithmetic-formatter-project\nsuperBlock: scientific-computing-with-python\nIntroduction to the Build an Arithmetic Formatter Project\nThis is a test for the new project-based curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 279,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\build-an-arithmetic-formatter-project\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dbc60a9b9a636476f098f9fdb48a02ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Algorithm Design by Building a Shortest Path Algorithm\nblock: learn-algorithm-design-by-building-a-shortest-path-algorithm\nsuperBlock: scientific-computing-with-python\nLearn Algorithm Design by Building a Shortest Path Algorithm\nA shortest path algorithm finds the minimum distance between two nodes in a graph, ensuring the most efficient route. For finding the shortest path, lists and dictionaries are an excellent choice.\nIn the process of finding the shortest path, lists store sequences of nodes or edges. They facilitate easy indexing and iteration, making them ideal for managing collections of graph elements, such as unvisited nodes or adjacent nodes.\nDictionaries enhance the algorithm's efficiency with fast lookups. They can map nodes to their shortest path distances or store adjacency lists, allowing quick access and updates.\nYou'll also come across tuples that are useful for handling immutable data, representing edges or (node, distance) pairs that shouldn't change. Their immutability ensures data consistency throughout the algorithm's execution, contributing to a reliable implementation.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1140,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "df0f400665eb70641f9ba66494466764",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Classes and Objects by Building a Sudoku Solver\nblock: learn-classes-and-objects-by-building-a-sudoku-solver\nsuperBlock: scientific-computing-with-python\nLearn Classes and Objects by Building a Sudoku Solver\nClasses and objects are important programming concepts. These Object-Oriented Programming tools help developers to achieve code modularity, abstraction, and readability. They also promote reusability.\nSudoku Solver is a classical problem-solving game that requires logical thinking. It is a 9x9 grid puzzle where the objective is to fill each row, column, and 3x3 subgrid with numbers from 1 to 9 without repeating any number. The puzzle starts with some numbers already filled in, and the player must fill in the remaining cells to solve the puzzle.\nIn this Sudoku Solver project, you'll learn how to use classes and objects to build a Sudoku grid and to solve a Sudoku puzzle. The project leverages a Board class to represent the Sudoku grid and includes methods to check the validity of numbers, find empty cells, and solve the puzzle using a backtracking algorithm.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1108,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85f04073c14ada1a3ad8da8b9e3ceda9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Encapsulation by Building a Projectile Trajectory Calculator\nblock: learn-encapsulation-by-building-a-projectile-trajectory-calculator\nsuperBlock: scientific-computing-with-python\nIntroduction to the Learn Encapsulation by Building a Projectile Trajectory Calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c18108229799538b6eda257b2904ab0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Data Structures by Building the Merge Sort Algorithm\nblock: learn-data-structures-by-building-the-merge-sort-algorithm\nsuperBlock: scientific-computing-with-python\nLearn Data Structures by Building the Merge Sort Algorithm\nData structures are fundamental concepts in computer science that allow you to organize and store data efficiently. Different data structures are used for various types of applications, each optimized for specific tasks.\nThe Merge Sort Algorithm is a sorting algorithm based on the divide and conquer principle, which involves breaking down a problem into smaller subproblems, solving each subproblem independently, and then combining the solutions to solve the original problem.\nIn this project, you'll learn how to interact with data structures by sorting a list of random numbers using the Merge Sort Algorithm. The Merge Sort Algorithm recursively divides the list into smaller sublists until each sublist contains a single element, then merges the sublists back together in the correct order.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1049,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "850c261bfb3d9ce1b8dad42f54795fc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-inheritance-by-building-an-equation-solver\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Interfaces by Building an Equation Solver\nblock: learn-interfaces-by-building-an-equation-solver\nsuperBlock: scientific-computing-with-python\nIntroduction to the Learn Interfaces by Building an Equation Solver\nThis is a test for the new project-based curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 309,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-inheritance-by-building-an-equation-solver\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ef273d901e0a6f1f69b0eac61128dbcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn How to Work with Numbers and Strings by Implementing the Luhn Algorithm\nblock: learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\nsuperBlock: scientific-computing-with-python\nLearn How to Work with Numbers and Strings by Implementing the Luhn Algorithm\nAlgorithms can be employed to see the validity of the given data. One such algorithm is the Luhn Algorithm, which is used to validate a variety of identification numbers, particularly credit card numbers. It is a simple formula that helps in detecting accidental errors in the sequences of numbers by verifying the final digit, known as the check digit, which is determined by a specific calculation on the other digits.\nIn this project, you will verify a given credit card number using the Luhn Algorithm. By building this project, you'll gain experience working with numerical computations and string manipulation. You will also perform operations like reversing strings and handling character replacements.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1017,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d139694642c1f7bd7db06864dbb3c5b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\index.md",
    "source_type": "git_repo",
    "title": "Output: [2, 4, 6]",
    "content": "title: Learn Lambda Functions by Building an Expense Tracker\nblock: learn-lambda-functions-by-building-an-expense-tracker\nsuperBlock: scientific-computing-with-python\nLearn Lambda Functions by Building an Expense Tracker\nLambda functions in Python, also known as anonymous functions, are small, unnamed functions defined using the lambda keyword. They provide a concise way to write simple, throwaway functions directly in your code, typically for use in a single, short-lived context.\nIf you were to write a function that filters out odd numbers, the function would look like this:\n```python\ndef is_even(x):\nreturn x % 2 == 0\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(is_even, numbers))\nprint(even_numbers)\nOutput: [2, 4, 6]\n```\nHowever, if you were to write the same function using a lambda function, it would look like this:\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)\nOutput: [2, 4, 6]\n```\nConcise, right?\nIn this project, you'll explore the power of lambda functions by creating an expense tracker that allows you to add, list, total, and filter expenses by category. You'll see how the application leverages lambda functions to streamline certain operations, making the code more concise and easier to read.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1333,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c3eb8dc9e0f186dc164c115ddcc27a57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn List Comprehension by Building a Case Converter Program\nblock: learn-list-comprehension-by-building-a-case-converter-program\nsuperBlock: scientific-computing-with-python\nLearn List Comprehension by Building a Case Converter Program\nList comprehension is a way to construct a new Python list from an iterable, such as lists, tuples, and strings, without using a for loop or the .append() list method. It provides a concise and readable way to create lists and can be used to apply an expression to each item in the iterable.\nIn this project, you'll write a program that takes a string formatted in Camel Case or Pascal Case and converts it into Snake Case. Camel Case and Pascal Case are naming conventions where each word in the identifier is capitalized, with Camel Case starting with a lowercase letter (e.g., camelCase) and Pascal Case starting with an uppercase letter (e.g., PascalCase). Snake Case, on the other hand, separates words with underscores and uses only lowercase letters (e.g., snake_case).\nThe project has two phases: first, you'll use a for loop to implement the program. Then you'll learn how to use list comprehension instead of a loop to achieve the same results. This will help you understand the efficiency and elegance that list comprehension can bring to your code.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1329,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a5984aa1bfccabf7ffce41804b7c7e9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Regular Expressions by Building a Password Generator\nblock: learn-regular-expressions-by-building-a-password-generator\nsuperBlock: scientific-computing-with-python\nLearn Regular Expressions by Building a Password Generator\nRegular expressions are a powerful tool used for matching patterns within strings. They are a sequence of characters that define a search pattern, primarily used for string searching and validation.\nIn this project, you'll learn the basics of regular expressions. You'll also learn how to import modules from the Python standard library. A Python module is a file containing Python definitions and statements.\nYou'll build your password generator that sets complexity requirements using regular expressions. Python's random module is used to generate random numbers within a range. It is also used to shuffle the characters in a string. The strings module is used to get a string containing all ASCII characters, both lowercase and uppercase, digits and punctuation.\nWith the help of these modules, you'll also see how to create a password with specific strength requirements, such as including numbers, special characters, uppercase letters, and lowercase letters, all using regex patterns.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1244,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-regular-expressions-by-building-a-password-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "36a75e4c19ef058f5e0c562fbc4c2498",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Recursion by Solving the Tower of Hanoi Puzzle\nblock: learn-recursion-by-solving-the-tower-of-hanoi-puzzle\nsuperBlock: scientific-computing-with-python\nLearn Recursion by Solving the Tower of Hanoi Puzzle\nRecursion is a programming technique where a function calls itself to solve smaller instances of the same problem. This approach is particularly useful for problems that can be divided into similar subproblems, each of which can be solved independently and combined to form a solution to the original problem.\nYou'll learn about recursion in detail by building a solution to the Tower of Hanoi puzzle. The Tower of Hanoi is a classic problem that involves moving a stack of disks from one peg to another. The puzzle consists of three rods and several disks of different diameters.\nThe goal of this puzzle is to move the disks from the first rod to the third rod, subjected to the following constraints:\nOnly one disk can be moved at a time.\nA larger disk cannot be placed on top of a smaller disk.\nThis recursive approach ensures that each step of the puzzle is handled correctly, breaking down the problem into smaller and smaller subproblems until the base case is reached. Thus, the Tower of Hanoi is a clear and classic example of how recursion can simplify and solve complex problems.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1329,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cdf74e19f13002dea9a4d1fe1b7f3a19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn String Manipulation by Building a Cipher\nblock: learn-string-manipulation-by-building-a-cipher\nsuperBlock: scientific-computing-with-python\nLearn String Manipulation by Building a Cipher\nA cipher is a method or algorithm for performing encryption or decryption—a process that converts plain text into coded text (ciphertext) and vice versa. The purpose of a cipher is to secure information by making it unreadable to unauthorized users while allowing intended recipients to decode and access the original message.\nThe project involves writing functions to encrypt and decrypt messages using a custom key. By cycling through the key and shifting characters accordingly, the Vigenère cipher illustrates how text can be transformed into a coded form and then back to its original state. This hands-on approach helps in understanding the principles of encryption and decryption.\nThrough this project, you will learn key concepts such as string indexing, character manipulation, and the use of modular arithmetic for encoding and decoding text.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1071,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-string-manipulation-by-building-a-cipher\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "df3bdd23b4bfebe30eb1c32fb3e36993",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Special Methods by Building a Vector Space\nblock: learn-special-methods-by-building-a-vector-space\nsuperBlock: scientific-computing-with-python\nIntroduction to the Learn Special Methods by Building a Vector Space\nPython special methods are called in response to specific operations and enable you to customize the behavior of your objects in a detailed and effective way. These methods, often known as magic methods or dunder methods (due to their double underscores), allow you to define how objects of your custom classes behave with built-in operations like addition, subtraction, comparison, and string representation.\nFor instance, you can add two instances of a custom class by implementing the __add__ method like this:\npython\ndef __add__(self, other):\nreturn MyClass(self.value + other.value)\nWhen you add two instances of MyClass, Python calls the __add__ method, which returns a new instance with the sum of the values.\nSimilarly, you can customize the behavior of other operations by implementing the corresponding special methods. For example, the __str__ method defines how an object is represented as a string when you call the str() function:\npython\ndef __str__(self):\nreturn f\"MyClass instance with value {self.value}\"\nIn this project, you are going to explore some of the most common special methods while learning about vectors by building a vector space. By creating vector classes and implementing special methods, you'll learn how to enable operations such as vector addition, subtraction, scalar multiplication, dot products, and comparisons.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1649,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-special-methods-by-building-a-vector-space\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31c113783f3e4f60308362f0386d3604",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Learn Tree Traversal by Building a Binary Search Tree\nblock: learn-tree-traversal-by-building-a-binary-search-tree\nsuperBlock: scientific-computing-with-python\nLearn Tree Traversal by Building a Binary Search Tree\nIn computer science, \"trees\" refer to a data structure that consists of nodes connected by edges. Each node contains a value and may have zero or more child nodes. Tree traversal is a process of visiting each node in a tree data structure exactly once.\nUnderstanding how to create and traverse trees is essential for working with hierarchical data structures. Tree-like data structures organize data for sorting, quick search, insertion, and deletion operations.\nIn this project, you will gain a deep understanding of how binary search trees function and how traversal techniques can be applied to efficiently access and manipulate tree data structures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 890,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-tree-traversal-by-building-a-binary-search-tree\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "57d57f7f9c71634e5d1798a1a1fe0b4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn the Bisection Method by Finding the Square Root of a Number\nblock: learn-the-bisection-method-by-finding-the-square-root-of-a-number\nsuperBlock: scientific-computing-with-python\nLearn the Bisection Method by Finding the Square Root of a Number\nNumerical analysis is essential in scientific computing for solving equations where analytical solutions are not feasible.\nThis project introduces numerical analysis by finding the square root of a number using the bisection method—a straightforward iterative technique to approximate solutions to problems that are difficult to solve analytically.\nBy setting an initial range and iteratively narrowing it down based on midpoints, the code converges on an approximate value for the square root. This approach emphasizes the importance of iterative methods and tolerance levels in numerical computations.\nCore concepts taught in this project include the implementation of the bisection method, handling edge cases, and understanding convergence criteria in numerical algorithms.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1073,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\scientific-computing-with-python\\learn-the-bisection-method-by-finding-the-square-root-of-a-number\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e23c1943eaa97d6cf225768665db86b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\rosetta-code\\rosetta-code-challenges\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Rosetta Code Challenges\nblock: rosetta-code-challenges\nsuperBlock: rosetta-code\nIntroduction to the Rosetta Code Challenges\nThe Rosetta Code is a list of programming challenges which will help you build your programming skills.\n\"The idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.\" - Homepage of the Rosetta Code site",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 555,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\rosetta-code\\rosetta-code-challenges\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 104,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6d37e133ee2e82e44099ea991dad080",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\applied-accessibility\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Applied Accessibility Challenges\nblock: applied-accessibility\nsuperBlock: responsive-web-design\nIntroduction to the Applied Accessibility Challenges\n\"Accessibility\" generally means having web content and a user interface that can be understood, navigated, and interacted with by a broad audience. This includes people with visual, auditory, mobility, or cognitive disabilities.\nWebsites should be open and accessible to everyone, regardless of a user's abilities or resources. Some users rely on assistive technology such as a screen reader or voice recognition software. Other users may be able to navigate through a site only using a keyboard. Keeping the needs of various users in mind when developing your project can go a long way towards creating an open web.\nHere are three general concepts this section will explore throughout the following challenges:\nhave well-organized code that uses appropriate markup\nensure text alternatives exist for non-text and visual content\ncreate an easily-navigated page that's keyboard-friendly\nHaving accessible web content is an ongoing challenge. A great resource for your projects going forward is the W3 Consortium's Web Content Accessibility Guidelines (WCAG). They set the international standard for accessibility and provide a number of criteria you can use to check your work.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1379,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\applied-accessibility\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9db1d6cb6173f42f8a17bb3f8cc76cd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\applied-visual-design\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Applied Visual Design Challenges\nblock: applied-visual-design\nsuperBlock: responsive-web-design\nIntroduction to the Applied Visual Design Challenges\nVisual Design in web development is a broad topic. It combines typography, color theory, graphics, animation, and page layout to help deliver a site's message. The definition of good design is a well-discussed subject, with many books on the theme.At a basic level, most web content provides a user with information. The visual design of the page can influence its presentation and a user's experience. In web development, HTML gives structure and semantics to a page's content, and CSS controls the layout and appearance of it.This section covers some of the basic tools developers use to create their own visual designs.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 828,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\applied-visual-design\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0024683f82ede706543613cb5d23695a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\basic-css\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Basic CSS\nblock: basic-css\nsuperBlock: responsive-web-design\nIntroduction to Basic CSS\nCascading Style Sheets (CSS) tell the browser how to display the text and other content that you write in HTML.\nNote that CSS is case-sensitive so be careful with your capitalization.\nCSS has been adopted by all major browsers and allows you to control:\ncolor\nfonts\npositioning\nspacing\nsizing\ndecorations\ntransitions\nThere are three main ways to apply CSS styling. You can apply inline styles directly to HTML elements with the style attribute. Alternatively, you can place CSS rules within style tags in an HTML document. Finally, you can write CSS rules in an external style sheet, then reference that file in the HTML document. Even though the first two options have their use cases, most developers prefer external style sheets because they keep the styles separate from the HTML elements. This improves the readability and reusability of your code.\nThe idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page.\nIn this section, you'll see how adding CSS styles to the elements of your CatPhotoApp can change it from simple text to something more.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1351,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\basic-css\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5faa8a9701e3e39e242004bb674b811a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\basic-html-and-html5\\index.md",
    "source_type": "git_repo",
    "title": "Top level heading: Maybe a page title",
    "content": "title: Introduction to Basic HTML and HTML5\nblock: basic-html-and-html5\nsuperBlock: responsive-web-design\nIntroduction to Basic HTML & HTML5\nHTML, or HyperText Markup Language, is a markup language used to describe the structure of a web page. It uses a special syntax or notation to organize and give information about the page to the browser. Elements usually have opening and closing tags that surround and give meaning to content. For example, there are different tag options to place around text to show whether it is a heading, a paragraph, or a list.\nFor example:\n```html\nTop level heading: Maybe a page title\nA paragraph of text. Some information we would like to communicate to the\nviewer. This can be as long or short as we would like.\nNumber one on the list\nNumber two\nA third item\n```\nBecomes:\nTop level heading: Maybe a page title\nA paragraph of text. Some information we would like to communicate to the user. This can be as long or short as we would like.\nNumber one on the list\nNumber two\nA third item\nThe HyperText part of HTML comes from the early days of the web and its original use case. Pages usually contained static documents that contained references to other documents. These references contained hypertext links used by the browser to navigate to the reference document so the user could read the reference document without having to manually search for it.\nAs web pages and web applications grow more complex, the W3 Consortium updates the HTML specification to ensure that a webpage can be shown reliably on any browser. The latest version of HTML is HTML5.\nThis section introduces how to use HTML elements to give structure and meaning to your web content.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1842,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\basic-html-and-html5\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1bfcda65c2bbf6d0e9d645dea2738229",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\css-flexbox\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the CSS Flexbox Challenges\nblock: css-flexbox\nsuperBlock: responsive-web-design\nIntroduction to the CSS Flexbox Challenges\nA website's User Interface (\"UI\") has two components. First, there are the visual elements, such as colors, fonts, and images. Second, there is the placement or positioning of those elements. In Responsive Web Design, a UI layout must accommodate many different browsers and devices accessing the content.CSS3 introduced Flexible Boxes, or flexbox, to create page layouts for a dynamic UI. It is a layout mode that arranges elements in a predictable way for different screen sizes and browsers. While somewhat new, all popular modern browsers support flexbox. This section covers how to use flexbox and the different layout options it offers.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 810,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\css-flexbox\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7e37bf67269fc7e3c05266a8096d206c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\css-grid\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the CSS Grid Challenges\nblock: css-grid\nsuperBlock: responsive-web-design\nIntroduction to the CSS Grid Challenges\nCSS Grid helps you easily build complex web designs. It works by turning an HTML element into a grid container with rows and columns for you to place children elements where you want within the grid.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 361,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\css-grid\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 66,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "14db8bec7ba7b91db2ac0c1c76e23da7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\responsive-web-design-principles\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Responsive Web Design Challenges\nblock: responsive-web-design-principles\nsuperBlock: responsive-web-design\nIntroduction to the Responsive Web Design Challenges\nToday, there are many types of devices that can access the web. They range from large desktop computers to small mobile phones. These devices have different screen sizes, resolutions, and processing power.\nResponsive Web Design is an approach to designing web content that responds to the constraints of different devices. The page structure and CSS rules should be flexible to accommodate these differences.\nIn general, design the page's CSS to your target audience. If you expect most of your traffic to be from mobile users, take a 'mobile-first' approach. Then add conditional rules for larger screen sizes. If your visitors are desktop users, then design for larger screens with conditional rules for smaller sizes.\nCSS gives you the tools to write different style rules, then apply them depending on the device displaying the page. This section will cover the basic ways to use CSS for Responsive Web Design.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1115,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\responsive-web-design-principles\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ee7c91db41d8f7387b920080a9168791",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\responsive-web-design-projects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Responsive Web Design Projects\nblock: responsive-web-design-projects\nsuperBlock: responsive-web-design\nIntroduction to the Responsive Web Design Projects\nTime to put your newly learnt skills to work! By working on projects you would have the opportunity of applying all the skills, principles and concepts you have learnt so far HTML, CSS, Visual Design, Accessibility, etc.\nIn this section you get the chance to:\nBuild a Tribute Page\nBuild a Survey Form\nBuild a Product Landing Page\nBuild a Technical Documentation Page\nBuild a Personal Portfolio Webpage\nBy the end of this, you would have 5 responsive websites under your belt that you can show off to friends, family, employers, etc. Have fun and remember to use the Read-Search-Ask method if you get stuck.\nNote: If you work locally on the projects you must use a server in order to get accurate results from the test.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1015,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\responsive-web-design\\responsive-web-design-projects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "19bfa11e31e299ac80fd7755082e1282",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\relational-database\\learn-relational-databases\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Relational Databases\nblock: learn-relational-databases\nsuperBlock: relational-database\nIntroduction to Relational Databases\nFor these courses, you will use real developer tools and software including VS Code, PostgreSQL, and the Linux / Unix command line to complete interactive tutorials and build projects.\nThese courses start off with basic Bash commands. Using the terminal, you will learn everything from navigating and manipulating a file system, scripting in Bash, all the way to advanced usage.\nNext, you will learn how to create and use a relational database with PostgreSQL, a database management system, and SQL, the language of these databases.\nFinally, you will learn Git, the version control system, an essential tool of every developer.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 791,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\relational-database\\learn-relational-databases\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "120b70a3d083786226908e239763e090",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\advanced-node-and-express\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Advanced Node and Express Challenges\nblock: advanced-node-and-express\nsuperBlock: quality-assurance\nIntroduction to Advanced Node and Express Challenges\nAuthentication is the process or action of verifying the identity of a user or process. Up to this point you have not been able to create an app utilizing this key concept.\nThe most common and easiest way to use authentication middleware for Node.js is Passport. It is easy to learn, light-weight, and extremely flexible allowing for many strategies, which we will talk about in later challenges. In addition to authentication we will also look at template engines which allow for use of Pug and web sockets which allow for real time communication between all your clients and your server.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 816,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\advanced-node-and-express\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "14eb85ff6fce64360f20b448b6d39319",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\quality-assurance-projects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Quality Assurance Projects\nblock: quality-assurance-projects\nsuperBlock: quality-assurance\nIntroduction to the Quality Assurance Projects\nNow it’s time to put your newly learned skills to work! By working on these projects, you will have the opportunity of applying all the skills, principles, and concepts from the Quality Assurance sections.\nIn this section you get the chance to:\nBuild a Metric-Imperial Converter\nBuild an Issue Tracker\nBuild a Personal Library\nSudoku Solver\nAmerican British Translator\nWhen you are done, you will have plenty of Quality Assurance projects under your belt along with a certification that you can show off to friends, family, and employers. Have fun and remember to use the Read-Search-Ask method if you get stuck.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 883,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\quality-assurance-projects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97bbbf8a1c02e779a615658baee9f3bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\quality-assurance-and-testing-with-chai\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Quality Assurance with Chai Challenges\nblock: quality-assurance-and-testing-with-chai\nsuperBlock: quality-assurance\nIntroduction to Quality Assurance with Chai Challenges\nAs your programs become more complex, you need to test them often to make sure any new code you add doesn't break the program's original functionality. Chai is a JavaScript testing library that helps you check that your program still behaves the way you expect it to after you make changes. Using Chai, you can write tests that describe your program's requirements and see if your program meets them.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 612,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\quality-assurance\\quality-assurance-and-testing-with-chai\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "60cde0d1e05531197cc400b3b7fc7a6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\python-for-everybody\\python-for-everybody\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Python for Everybody\nblock: python-for-everybody\nsuperBlock: python-for-everybody\nIntroduction to Python for Everybody\nPython for Everybody is a video course that teaches the basics of programming computers using Python 3.\nThe course was created by Dr. Charles Severance (a.k.a. Dr. Chuck). He is a Clinical Professor at the University of Michigan School of Information, where he teaches various technology-oriented courses including programming, database design, and Web development.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 522,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\python-for-everybody\\python-for-everybody\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 100,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e0a71bd2f86802e60937240ec5b66ff2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-1-to-100\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler Problems 1 to 100\nblock: project-euler-problems-1-to-100\nsuperBlock: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 826,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-1-to-100\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c1452349c10bd7b508d47591f5efd79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-101-to-200\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler Problems 101 to 200\nblock: project-euler-problems-101-to-200\nsuperBlock: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 830,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-101-to-200\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b8546ffb8480eeb7c75851b81611becf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-201-to-300\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler Problems 201 to 300\nblock: project-euler-problems-201-to-300\nsuperBlock: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 830,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-201-to-300\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "58052641b8c0b70df305a0ed3ae29156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-301-to-400\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler Problems 301 to 400\nblock: project-euler-problems-301-to-400\nsuperBlock: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 830,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-301-to-400\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1af4a2544a6616cc9a9625be64d1248b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-401-to-480\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Project Euler Problems 401 to 480\nblock: project-euler-problems-401-to-480\nsuperBlock: project-euler\nProject Euler\nProject Euler is a series of challenging mathematical and computational problems that require creative problem-solving and programming skills to solve. It was created by Colin Hughes in 2001 and has since become a popular platform for individuals to test and improve their mathematical and programming abilities. With over 400 problems to solve, Project Euler provides an opportunity for individuals to challenge themselves and learn new concepts in a fun and engaging way. Whether you are a beginner or an experienced programmer, Project Euler has something to offer for everyone, and its growing community of users from around the world makes it a great place to learn, collaborate, and grow.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 830,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\project-euler\\project-euler-problems-401-to-480\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb98d55cdec6ed9385ec1b5478be8072",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\how-neural-networks-work\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the How Neural Networks Work Lectures\nblock: how-neural-networks-work\nsuperBlock: machine-learning-with-python\nIntroduction to the How Neural Networks Work Challenges\nNeural networks are at the core of what we are calling Artificial Intelligence today. They can seem impenetrable, and even mystical, if you are trying to understand them for the first time, but they don't have to.\nEven if you are completely new to neural networks, these lectures by Brandon Rohrer will get you comfortable with the concepts and the math behind them.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 570,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\how-neural-networks-work\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 114,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f54b7065f22b3354dc0bdb28527a517b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\machine-learning-with-python-projects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Machine Learning Projects\nblock: machine-learning-with-python-projects\nsuperBlock: machine-learning-with-python\nIntroduction to the Machine Learning Projects\nMachine learning has many practical applications. By completing these projects, you will demonstrate that you have a good foundational knowledge of machine learning.\nWe are still developing the interactive instructional content for the machine learning curriculum. For now, check out the videos in this machine learning playlist on the freeCodeCamp YouTube channel. You may also have to use other resources (just like you would have to do when learning new technologies in a job).\nIn this section you will develop the following projects:\nRock Paper Scissors\nCat and Dog Image Classifier\nBook Recommendation Engine using KNN\nLinear Regression Health Costs Calculator\nNeural Network SMS Text Classifier\nHave fun and remember to use the Read-Search-Ask method if you get stuck.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1147,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\machine-learning-with-python-projects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1ffcbb6ee4d2109ac51b59d9d34dde9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\tensorflow\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the TensorFlow Lectures\nblock: tensorflow\nsuperBlock: machine-learning-with-python\nIntroduction to the TensorFlow Challenges\nTensorFlow is an open source framework developed by the Google Brain team aimed to make the powers of machine learning and neural networking easier to use.\nThe following lectures were created by Tim Ruscica, otherwise known as “Tech With Tim” from his educational programming YouTube channel. They will help you to understand TensorFlow and some of its capabilities.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 533,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\machine-learning-with-python\\tensorflow\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 94,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cedb1ce61d29a47b98f1c0d4d93a68b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\basic-javascript-rpg-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Basic JavaScript RPG Game\nblock: basic-javascript-rpg-game\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Basic JavaScript RPG Game\nJavaScript is the programming language that brings websites to life, enabling interactive and dynamic web experiences. As a foundational skill for web development, understanding JavaScript basics is essential for anyone looking to create modern, engaging websites.\nThe goal of this project is to introduce you to the fundamental concepts of JavaScript programming. You'll start with the building blocks of the language, including variables, data types, and basic operations, then progress to more complex ideas like functions, loops, and conditional statements.\nLearning JavaScript opens up a world of possibilities in web development. Throughout this project, you'll work on hands-on exercises and small projects that will help you apply your new skills, building a solid foundation for your future as a web developer.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1021,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\basic-javascript-rpg-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4def86bbba30857ae54aaf46713c86f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\intermediate-javascript-calorie-counter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Intermediate JavaScript Calorie Counter\nblock: intermediate-javascript-calorie-counter\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Intermediate JavaScript Calorie Counter\nJavaScript is a powerful and versatile programming language that forms the backbone of modern web development. As you move beyond the basics, you'll discover a wealth of advanced concepts and techniques that can elevate your coding skills to new heights.\nThe goal of this project is to explore intermediate JavaScript concepts that will enhance your ability to create dynamic, efficient, and interactive web applications. You'll delve into topics such as advanced functions, object-oriented programming, asynchronous JavaScript, and more.\nMastering intermediate JavaScript is a crucial step in your journey as a web developer. Throughout this project, you'll encounter challenging exercises, real-world examples, and best practices that will deepen your understanding of the language and prepare you for more complex development tasks.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1079,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\intermediate-javascript-calorie-counter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd86a6c44e41bad4bec40aef48e024da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-advanced-array-methods-by-building-a-statistics-calculator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: >-\nIntroduction to the Learn Advanced Array Methods by Building a Statistics\nCalculator\nblock: learn-advanced-array-methods-by-building-a-statistics-calculator\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Learn Advanced Array Methods by Building a Statistics Calculator\nArrays are fundamental data structures in JavaScript, and mastering advanced array methods can significantly enhance your coding efficiency and problem-solving skills. These powerful tools allow you to manipulate, transform, and analyze data with elegance and precision.\nThe goal of this project is to explore and master advanced array methods in JavaScript. You'll dive deep into methods like map, filter, reduce, forEach, and more, learning how to leverage their full potential to write cleaner, more expressive code.\nProficiency in advanced array methods is a hallmark of skilled JavaScript developers. Throughout this project, you'll tackle increasingly complex challenges, work with real-world data scenarios, and discover how these methods can simplify intricate data operations, setting you apart in the world of web development.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1162,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-advanced-array-methods-by-building-a-statistics-calculator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75f9bb8f5cb832a02be937b526ea04bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-asynchronous-programming-by-building-an-fcc-forum-leaderboard\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Asynchronous Programming by Building an fCC Forum Leaderboard\nblock: learn-asynchronous-programming-by-building-an-fcc-forum-leaderboard\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Asynchronous Programming by Building an fCC Forum Leaderboard\nIn the world of modern web development, asynchronous programming is a crucial skill. It allows applications to handle time-consuming operations without blocking the main thread, resulting in smoother, more responsive user experiences.\nThe goal of this project is to demystify asynchronous programming in JavaScript. You'll explore concepts like callbacks, promises, and async/await, learning how to manage complex sequences of operations and handle errors effectively in asynchronous code.\nMastering asynchronous programming is essential for building efficient, scalable web applications. Throughout this project, you'll work on practical examples that simulate real-world scenarios, from fetching data from APIs to managing multiple concurrent operations, equipping you with the skills to tackle the challenges of modern web development.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1166,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-asynchronous-programming-by-building-an-fcc-forum-leaderboard\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2d65f71f3e14d0489a8cc73941482118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Basic Algorithmic Thinking by Building a Number Sorter\nblock: learn-basic-algorithmic-thinking-by-building-a-number-sorter\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Basic Algorithmic Thinking by Building a Number Sorter\nAlgorithmic thinking is the foundation of computer science and a crucial skill for any programmer. It's the ability to break down complex problems into smaller, manageable steps that can be solved systematically and efficiently.\nThe goal of this project is to introduce you to the fundamentals of algorithmic thinking. You'll learn how to approach problem-solving methodically, develop logical reasoning skills, and create step-by-step solutions to various computational challenges.\nDeveloping algorithmic thinking skills is essential for becoming a proficient programmer. Throughout this project, you'll engage with puzzles, coding exercises, and real-world problems that will hone your ability to think like a computer scientist, setting the stage for tackling more advanced programming concepts in the future.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1119,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1df093ef07302eb3c4f9d29774cc9ec3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-debugging-by-building-a-random-background-color-changer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Basic Debugging by Building a Random Background Color Changer\nblock: learn-basic-debugging-by-building-a-random-background-color-changer\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn Basic Debugging by Building a Random Background Color Changer\nDebugging is an essential skill for every programmer. It's the process of identifying, isolating, and fixing errors in code. Mastering basic debugging techniques can save you countless hours of frustration and help you write more reliable software.\nThe goal of this project is to introduce you to fundamental debugging concepts and tools. You'll learn how to read error messages, use console logging effectively, and leverage browser developer tools to track down and resolve common coding issues.\nEffective debugging is what separates novice programmers from experienced ones. Throughout this project, you'll work with real-world code examples containing typical bugs, developing your problem-solving skills and building confidence in your ability to tackle coding challenges head-on.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1116,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-debugging-by-building-a-random-background-color-changer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f1bc826cc9c8fb2e5a472ae0f9d68a09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-oop-by-building-a-shopping-cart\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Basic OOP by Building a Shopping Cart\nblock: learn-basic-oop-by-building-a-shopping-cart\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Basic OOP By Building A Shopping Cart\nObject-Oriented Programming (OOP) is a powerful paradigm that forms the backbone of many modern programming languages, including JavaScript. It provides a way to structure code that's both intuitive and efficient, mirroring real-world objects and their interactions.\nThe goal of this project is to introduce you to the fundamental concepts of OOP. You'll learn about objects, classes, inheritance, and encapsulation, discovering how these principles can help you write cleaner, more organized, and reusable code.\nUnderstanding OOP is a crucial step in your journey as a programmer. Throughout this project, you'll build progressively complex programs using OOP principles, gaining hands-on experience in designing and implementing object-oriented solutions to common programming challenges.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1046,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-oop-by-building-a-shopping-cart\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a7ebc669f33062f7910c20350878df7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-string-and-array-methods-by-building-a-music-player\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Basic String and Array Methods by Building a Music Player\nblock: learn-basic-string-and-array-methods-by-building-a-music-player\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn Basic String and Array Methods by Building a Music Player\nStrings and arrays are fundamental data types in JavaScript, and mastering their basic methods is essential for effective programming. These methods provide powerful tools for manipulating text and collections of data, enabling you to solve a wide range of programming challenges.\nThe goal of this project is to explore and practice using common string and array methods in JavaScript. You'll learn how to perform operations like searching, slicing, and modifying strings, as well as adding, removing, and transforming elements in arrays.\nProficiency with string and array methods is crucial for handling data in JavaScript. Throughout this project, you'll work on practical exercises that simulate real-world scenarios, building your confidence in using these methods to process and manipulate data efficiently in your programs.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1148,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-basic-string-and-array-methods-by-building-a-music-player\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b38d34c938218ff28e612241ccff1c4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Fetch and Promises by Building an fCC Authors Page\nblock: learn-fetch-and-promises-by-building-an-fcc-authors-page\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Fetch and Promises by Building an fCC Authors Page\nIn modern web development, fetching data from servers and handling asynchronous operations are crucial skills. The Fetch API and Promises in JavaScript provide powerful tools for managing these tasks, enabling smooth and efficient communication between your application and external resources.\nThe goal of this project is to demystify the Fetch API and dive deep into the world of Promises. You'll learn how to make HTTP requests, handle responses, and manage asynchronous operations in a clean and organized manner.\nMastering Fetch and Promises is essential for building responsive and data-driven web applications. Throughout this project, you'll work on practical exercises that simulate real-world scenarios, from retrieving data from APIs to handling multiple asynchronous operations concurrently, equipping you with the skills to create robust and efficient web applications.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1176,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-fetch-and-promises-by-building-an-fcc-authors-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70785b9a537bd49cb1087cb1086c4e02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-functional-programming-by-building-a-spreadsheet\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Functional Programming by Building a Spreadsheet\nblock: learn-functional-programming-by-building-a-spreadsheet\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Functional Programming by Building a Spreadsheet\nFunctional Programming is a powerful paradigm that emphasizes the use of pure functions, immutability, and declarative code. It offers a different approach to solving problems and structuring code, leading to more predictable, testable, and maintainable software.\nThe goal of this project is to introduce you to the core concepts of Functional Programming in JavaScript. You'll explore ideas such as pure functions, higher-order functions, function composition, and immutability, learning how to apply these principles to write cleaner and more efficient code.\nEmbracing Functional Programming can significantly enhance your problem-solving skills and code quality. Throughout this project, you'll tackle increasingly complex challenges, refactoring imperative code into functional alternatives and discovering how functional techniques can simplify complex operations, particularly when working with data transformations and asynchronous operations.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1239,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-functional-programming-by-building-a-spreadsheet\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2911a933ef3902b43e1c0796e4931d7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-intermediate-oop-by-building-a-platformer-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Intermediate OOP by Building a Platformer Game\nblock: learn-intermediate-oop-by-building-a-platformer-game\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn Intermediate OOP by Building a Platformer Game\nObject-Oriented Programming (OOP) is a powerful paradigm that becomes even more valuable as you delve deeper into its principles and advanced concepts. Intermediate OOP skills allow you to design more complex systems, write more maintainable code, and solve intricate programming challenges with elegance.\nThe goal of this project is to build upon your basic OOP knowledge and explore more advanced concepts. You'll dive into topics such as polymorphism, abstract classes, interfaces, and design patterns. You'll also learn about SOLID principles and how to apply them to create more robust and flexible object-oriented designs.\nMastering intermediate OOP concepts is a significant step towards becoming a proficient software developer. Throughout this project, you'll work on increasingly sophisticated programming challenges that simulate real-world scenarios, helping you to develop a deeper understanding of how to leverage OOP to create scalable, modular, and easily maintainable software systems.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1288,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-intermediate-oop-by-building-a-platformer-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3dccc900b99fecd3ee7e28a330de9c54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-localstorage-by-building-a-todo\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn localStorage by Building a Todo App\nblock: learn-localstorage-by-building-a-todo-app\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn LocalStorage by Building a Todo App\nLocalStorage is a powerful feature of modern web browsers that allows web applications to store data directly in the user's browser. This client-side storage solution enables developers to create more responsive and personalized web experiences, even when users are offline.\nThe goal of this project is to explore the capabilities and practical applications of LocalStorage in web development. You'll learn how to store, retrieve, and manage data using LocalStorage, understanding its advantages and limitations compared to other storage options.\nMastering LocalStorage is an essential skill for creating web applications that maintain state and provide a seamless user experience. Throughout this project, you'll work on hands-on exercises that demonstrate real-world use cases, from saving user preferences to building simple offline-capable applications, equipping you with the knowledge to enhance your web projects with persistent client-side data storage.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1214,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-localstorage-by-building-a-todo\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f666d8b7cf69a26c90cb1b8b3350206c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-introductory-javascript-by-building-a-pyramid-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Introductory JavaScript by Building a Pyramid Generator\nblock: learn-introductory-javascript-by-building-a-pyramid-generator\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn Introductory JavaScript by Building a Pyramid Generator\nJavaScript is the language of the web, powering interactive and dynamic content on millions of websites worldwide. As the first step in your programming journey, learning JavaScript opens up a world of possibilities in web development and beyond.\nThe goal of this project is to introduce you to the very basics of JavaScript programming. You'll start with the absolute fundamentals: what JavaScript is, how to write and run your first script, and understanding basic concepts like variables, data types, and simple operations.\nBeginning your JavaScript journey is an exciting adventure into the world of programming. Throughout this project, you'll engage in simple exercises and mini-projects designed to build your confidence and spark your curiosity. By the end, you'll have taken your first steps towards becoming a web developer and gained a foundation for further exploration of this versatile language.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1222,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-introductory-javascript-by-building-a-pyramid-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "19839524225060594f3f2831f583e324",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-modern-javascript-methods-by-building-football-team-cards\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Modern JavaScript Methods By Building Football Team Cards\nblock: Learn Modern JavaScript Methods by Building Football Team Cards\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Modern JavaScript Methods by Building Football Team Cards\nJavaScript is constantly evolving, with new methods and features being introduced to make coding more efficient and expressive. Staying up-to-date with these modern JavaScript methods is crucial for writing clean, concise, and powerful code in today's development landscape.\nThe goal of this project is to explore and master the latest JavaScript methods and features. You'll dive into topics such as ES6+ array methods, object manipulation techniques, new string methods, and modern syntax improvements. This knowledge will empower you to write more elegant and efficient code.\nEmbracing modern JavaScript methods is key to becoming a proficient and current developer. Throughout this project, you'll work on practical exercises that showcase how these new methods can simplify complex operations, improve code readability, and boost performance. By the end, you'll have expanded your JavaScript toolkit with cutting-edge techniques used by top developers in the field.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1286,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-modern-javascript-methods-by-building-football-team-cards\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9842b51930cb48c699412b0489fa308c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-recursion-by-building-a-decimal-to-binary-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Learn Recursion by Building a Decimal to Binary Converter\nblock: Learn Recursion by Building a Decimal to Binary Converter\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to Learn Recursion by Building a Decimal to Binary Converter\nRecursion is a powerful programming concept where a function calls itself to solve complex problems by breaking them down into simpler, repetitive tasks. It's a fundamental technique in computer science that enables elegant solutions to a wide range of programming challenges.\nThe goal of this project is to demystify recursion and help you master its application in JavaScript. You'll learn how to think recursively, understand the anatomy of recursive functions, and recognize problems that are well-suited for recursive solutions.\nMastering recursion is a significant milestone in your journey as a programmer. Throughout this project, you'll tackle increasingly complex recursive problems, from classic examples like factorial calculations to more advanced applications in tree traversal and dynamic programming. By the end, you'll have gained a powerful tool for solving intricate problems and a deeper understanding of how to approach complex algorithmic challenges.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1262,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-recursion-by-building-a-decimal-to-binary-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3614fe6a1f3aa8c20f5193c4af67a68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-regular-expressions-by-building-a-spam-filter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn Regular Expressions by Building a Spam Filter\nblock: learn-regular-expressions-by-building-a-spam-filter\nsuperBlock: JavaScript Algorithms and Data Structures\nIntroduction to the Learn Regular Expressions by Building a Spam Filter\nRegular Expressions, often called \"regex\" or \"regexp\", are powerful tools for pattern matching and text manipulation. They provide a concise and flexible means for identifying strings of text, such as particular characters, words, or patterns of characters, making them invaluable in various programming tasks.\nThe goal of this project is to demystify regular expressions and help you harness their power in JavaScript. You'll learn how to construct regex patterns, use regex methods, and apply these skills to solve real-world problems like form validation, data extraction, and text processing.\nMastering regular expressions can significantly enhance your efficiency as a programmer. Throughout this project, you'll work on practical exercises that simulate common use cases, from simple pattern matching to complex text analysis. By the end, you'll have added a versatile and powerful tool to your programming toolkit, enabling you to handle complex string operations with ease and precision.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1275,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-regular-expressions-by-building-a-spam-filter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ebaf33dd9648c7aed3400ba1c980e187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-the-date-object-by-building-a-date-formatter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn the Date Object by Building a Date Formatter\nblock: learn-the-date-object-by-building-a-date-formatter\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Learn the Date Object by Building a Date Formatter\nWorking with dates and times is a common requirement in many applications, from scheduling systems to data analysis tools. JavaScript's built-in Date object provides a powerful set of tools for handling these tasks, allowing developers to create, manipulate, and format dates with ease.\nThe goal of this project is to explore the JavaScript Date object in depth. You'll learn how to create date objects, extract specific components like day or month, perform date arithmetic, and format dates for display. You'll also delve into important concepts like timezones and the challenges of working with dates across different locales.\nMastering the Date object is crucial for building applications that handle time-sensitive operations effectively. Throughout this project, you'll work on practical exercises that simulate real-world scenarios, from building a calendar application to calculating time differences. By the end, you'll be equipped with the skills to confidently manage date and time operations in your JavaScript projects.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1312,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\learn-the-date-object-by-building-a-date-formatter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff2f9a22d2b3a2bdf5a6e11162da9a86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-algorithmic-thinking-by-building-a-dice-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Review Algorithmic Thinking by Building a Dice Game\nblock: review-algorithmic-thinking-by-building-a-dice-game\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Review Algorithmic Thinking by Building a Dice Game\nBuilding on the foundations of basic algorithmic thinking, intermediate algorithmic skills take your problem-solving abilities to the next level. This stage focuses on more complex problem-solving strategies, efficiency considerations, and the ability to analyze and optimize algorithms.\nThe goal of this project is to deepen your understanding of algorithmic thinking and introduce you to more advanced problem-solving techniques. You'll explore topics such as recursion, dynamic programming, and greedy algorithms, learning how to approach and solve more challenging computational problems.\nDeveloping intermediate algorithmic thinking skills is crucial for tackling real-world programming challenges and preparing for technical interviews. Throughout this project, you'll work on progressively complex coding exercises and algorithm implementations, honing your ability to design efficient solutions and analyze algorithm performance.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1220,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-algorithmic-thinking-by-building-a-dice-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "381bfc1a7b2104516207a6cd38c07aa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Review DOM Manipulation by Building a Rock, Paper, Scissors Game\nblock: review-dom-manipulation-by-building-a-rock-paper-scissors-game\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Review DOM Manipulation by Building a Rock, Paper, Scissors Game\nThe Document Object Model (DOM) is the bridge between JavaScript and the content of a web page. DOM manipulation is a fundamental skill for front-end developers, allowing you to dynamically update, add, and remove content, creating interactive and responsive web applications.\nThe goal of this project is to master the art of DOM manipulation using JavaScript. You'll learn how to select and traverse DOM elements, modify content and attributes, create and remove elements, and handle events. Through these skills, you'll be able to transform static web pages into dynamic, interactive experiences.\nProficiency in DOM manipulation is essential for creating modern, user-friendly websites. Throughout this project, you'll work on hands-on exercises that simulate real-world scenarios, from building interactive forms to creating dynamic content loaders. By the end, you'll have the skills to bring your web pages to life, enhancing user engagement and interactivity.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1285,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b75c7b9480515119690ca70b00500b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Basic Algorithm Scripting\nblock: basic-algorithm-scripting\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to Basic Algorithm Scripting\nA computer algorithm is a sequence of steps that is followed to achieve a particular outcome. To write an algorithm, you must first understand a problem, and then solve it with coding.\nTo make solving problems easier, it can be helpful to break them down into many chunks. Then, each chunk can be solved one by one. For example, if you are building a calculator, don't try to solve the problem as a whole. First, consider how to get inputs. Then, determine each arithmetic operation one by one. Finally, display the results.\nIn this section we will learn to solve basic algorithm problems using JavaScript. This will help you improve your problem solving skills and prepare you to later solve more complex problems.\nHint: If you get stuck, try using console.log() to log variable values to the console. This will help to debug problems.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1037,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17878cc6026c149829e162af16803440",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-js-fundamentals-by-building-a-gradebook-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Review JavaScript Fundamentals by Building a Gradebook App\nblock: review-js-fundamentals-by-building-a-gradebook-app\nsuperBlock: javascript-algorithms-and-data-structures-v8\nIntroduction to the Review JavaScript Fundamentals by Building a Gradebook App\nReviewing JavaScript Fundamentals is crucial for any aspiring web developer. Mastering the basics of JavaScript ensures a strong foundation, enabling you to build complex, efficient, and scalable web applications. Whether you're revisiting these concepts or learning them for the first time, understanding the core principles of JavaScript is essential.\nThe goal of this project is to solidify your understanding of JavaScript fundamentals. You'll delve into variables, data types, functions, loops, and conditional statements. These building blocks are the cornerstone of all JavaScript programming, empowering you to write clean, effective, and optimized code.\nProficiency in JavaScript fundamentals is indispensable for creating modern web applications. Throughout this project, you'll engage in hands-on exercises that mirror real-world coding challenges, from algorithm development to solving practical problems. By the end, you'll have a robust grasp of JavaScript basics, preparing you for more advanced topics and enhancing your coding confidence and efficiency.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1366,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures-v8\\review-js-fundamentals-by-building-a-gradebook-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ec624b3e22e12434b4185c1e2e50c62a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-data-structures\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Basic Data Structure Challenges\nblock: basic-data-structures\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Basic Data Structure Challenges\nData can be stored and accessed in many different ways, both in JavaScript and other languages. This section will teach you how to manipulate arrays, as well as access and copy the information within them. It will also teach you how to manipulate and access the data within JavaScript objects, using both dot and bracket notation. When you're done with this section, you should understand the basic properties and differences between arrays and objects, as well as how to choose which to use for a given purpose.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 720,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-data-structures\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f0db6f184118b58b7bee162a841a8387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-javascript\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to JavaScript\nblock: basic-javascript\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to JavaScript\nJavaScript is a high-level programming language that all modern web browsers support. It is also one of the core technologies of the web, along with HTML and CSS that you may have learned previously. This section will cover basic JavaScript programming concepts, which range from variables and arithmetic to objects and loops.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 479,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\basic-javascript\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 85,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "65ce4754088f34e9827c4d29f436e32a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\es6\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the ES6 Challenges\nblock: es6\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the ES6 Challenges\nECMAScript is a standardized version of JavaScript with the goal of unifying the language's specifications and features. As all major browsers and JavaScript-runtimes follow this specification, the term ECMAScript is interchangeable with the term JavaScript.\nMost of the challenges on freeCodeCamp use the ECMAScript 5 (ES5) specification of the language, finalized in 2009. But JavaScript is an evolving programming language. As features are added and revisions are made, new versions of the language are released for use by developers.\nThe most recent standardized version is called ECMAScript 6 (ES6), released in 2015. This new version of the language adds some powerful features that will be covered in this section of challenges, including:\nArrow functions\nClasses\nModules\nPromises\nGenerators\nlet and const\nNote: Not all browsers support ES6 features. If you use ES6 in your own projects, you may need to use a program (transpiler) to convert your ES6 code into ES5 until browsers support ES6.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1183,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\es6\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "78f5fc34d76f6275cf57a07cd2d6a991",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\debugging\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Debugging Challenges\nblock: debugging\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Debugging Challenges\nDebugging is a valuable and (unfortunately) necessary tool for programmers It follows the testing phase of checking if your code works as intended, and discovering it does not Debugging is the process of finding exactly what isn't working and fixing it After spending time creating a brilliant block of code, it is tough realizing it may have errors These issues generally come in three forms:\nsyntax errors that prevent a program from running\nruntime errors when code fails to execute or has unexpected behavior\nsemantic (or logical) errors when code doesn't do what it's meant to Modern code editors (and experience) can help identify syntax errors Semantic and runtime errors are harder to find They may cause your program to crash, make it run forever, or give incorrect output Think of debugging as trying to understand why your code is behaving the way it is Example of a syntax error - often detected by the code editor:\njs\nfuntcion willNotWork(\nconsole log(\"Yuck\");\n}\n// \"function\" keyword is misspelled and there's a missing parenthesis\nHere's an example of a runtime error - often detected while the program executes:\njs\nfunction loopy() {\nwhile (true) {\nconsole log('Hello, world ');\n}\n}\n// Calling loopy starts an infinite loop, which may crash your browser\nExample of a semantic error - often detected after testing code output:\njs\nfunction calcAreaOfRect(w, h) {\nreturn w + h; // This should be w * h\n}\nlet myRectArea = calcAreaOfRect(2, 3);\n// Correct syntax and the program executes, but this gives the wrong answer\nDebugging is frustrating, but it helps to develop (and follow) a step-by-step approach to review your code This means checking the intermediate values and types of variables to see if they are what they should be You can start with a simple process of elimination For example, if function A works and returns what it's supposed to, then function B may have the issue Or start checking values in a block of code from the middle to try to cut the search space in half A problem in one spot indicates a bug in the first half of the code If not, it's likely in the second This section will cover a couple helpful tools to find bugs, and some of the common forms they take",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2559,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\debugging\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7957292877f60a034e823c7170b8d5ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\debugging\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "works and returns what it's supposed to, then function B may have the issue Or start checking values in a block of code from the middle to try to cut the search space in half A problem in one spot indicates a bug in the first half of the code If not, it's likely in the second This section will cover a couple helpful tools to find bugs, and some of the common forms they takeFortunately, debugging is a learnable skill that just requires a little patience and practice to master",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2559,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\debugging\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 99,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "35b712be3a2c1ed40c577013e6deff47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\functional-programming\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Functional Programming Challenges\nblock: functional-programming\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Functional Programming Challenges\nFunctional programming is an approach to software development based around the evaluation of functions. Like mathematics, functions in programming map input to output to produce a result. You can combine basic functions in many ways to build more and more complex programs.\nFunctional programming follows a few core principles:\nFunctions are independent from the state of the program or global variables. They only depend on the arguments passed into them to make a calculation\nFunctions try to limit any changes to the state of the program and avoid changes to the global objects holding data\nFunctions have minimal side effects in the program\nThe functional programming software development approach breaks a program into small, testable parts. This section covers basic functional programming principles in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1043,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\functional-programming\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d409d1fbe36dde161e5d1a4498a86502",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Intermediate Algorithm Scripting Challenges\nblock: intermediate-algorithm-scripting\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Intermediate Algorithm Scripting Challenges\nThe following challenges are part of FCC's Intermediate Algorithm Scripting Challenges. These should prepare you to complete the final challenges for the JavaScript Algorithms And Data Structures Certification.\nThese challenges will allow you to test how much you have learned and which parts you may need to review again before starting the projects.\nWith that being said-\nHave fun and remember to use the Read-Search-Ask method if you get stuck.\nGood Luck!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 789,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "36cdcaeb74345d061c85f1fd85846178",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\object-oriented-programming\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Object Oriented Programming Challenges\nblock: object-oriented-programming\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Object Oriented Programming Challenges\nAt its core, software development solves a problem or achieves a result with computation. The software development process first defines a problem, then presents a solution. Object oriented programming is one of several major approaches to the software development process.As its name implies, object oriented programming organizes code into object definitions. These are sometimes called classes, and they group together data with related behavior. The data is an object's attributes, and the behavior (or functions) are methods.The object structure makes it flexible within a program. Objects can transfer information by calling and passing data to another object's methods. Also, new classes can receive, or inherit, all the features from a base or parent class. This helps to reduce repeated code.Your choice of programming approach depends on a few factors. These include the type of problem, as well as how you want to structure your data and algorithms. This section covers object oriented programming principles in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1286,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\object-oriented-programming\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c218292d7d1920831c080efb41ffffc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the JavaScript Algorithms and Data Structures Projects\nblock: javascript-algorithms-and-data-structures-projects\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the JavaScript Algorithms and Data Structures Projects\nTime to put your new JavaScript skills to work! These challenges will be similar to the algorithm scripting challenges but more difficult. This will allow you to prove how much you have learned.\nIn this section you will create the following small JavaScript programs:\nPalindrome Checker\nRoman Numeral Converter\nCaesars Cipher\nTelephone Number Validator\nCash Register\nHave fun and remember to use the Read-Search-Ask method if you get stuck.\nGood Luck!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 824,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 134,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c81ee658c2607cac58af91dbc6b93752",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\regular-expressions\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Regular Expression Challenges\nblock: regular-expressions\nsuperBlock: javascript-algorithms-and-data-structures\nIntroduction to the Regular Expression Challenges\nRegular expressions are special strings that represent a search pattern. Also known as \"regex\" or \"regexp\", they help programmers match, search, and replace text. Regular expressions can appear cryptic because a few characters have special meaning. The goal is to combine the symbols and text into a pattern that matches what you want, but only what you want. This section will cover the characters, a few shortcuts, and the common uses for writing regular expressions.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 671,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\javascript-algorithms-and-data-structures\\regular-expressions\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bdc88bb31220b33269902449f9868a17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\information-security-projects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Information Security Projects\nblock: information-security-projects\nsuperBlock: information-security\nIntroduction to the Information Security Projects\nNow it’s time to put your newly learned skills to work! By working on these projects, you will have the opportunity of applying all the skills, principles, and concepts from the Information Security sections.\nIn this section you get the chance to:\nBuild a Stock Price Checker\nBuild an Anonymous Message Board\nPort Scanner\nPacket Capturer\nSecure Real Time Multiplayer Game\nWhen you are done, you will have plenty of Information Security projects under your belt along with a certification that you can show off to friends, family, and employers. Have fun and remember to use the Read-Search-Ask method if you get stuck.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 901,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\information-security-projects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "606bc4b1e143bc37d5309221b80fb7de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\information-security-with-helmetjs\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Information Security with HelmetJS Challenges\nblock: information-security-with-helmetjs\nsuperBlock: information-security\nIntroduction to Information Security with HelmetJS Challenges\nHelmetJS is a type of middleware for Express-based applications that automatically sets HTTP headers to prevent sensitive information from unintentionally being passed between the server and client. While HelmetJS does not account for all situations, it does include support for common ones like Content Security Policy, XSS Filtering, and HTTP Strict Transport Security, among others. HelmetJS can be installed on an Express project from npm, after which each layer of protection can be configured to best fit the project.\nOptionally, you may write your project on another platform, but it must be publicly visible for our testing.\nStart this project by cloning this repository on GitHub!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1020,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\information-security-with-helmetjs\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97046f262f2a16855acbe81e587e58ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\build-a-multimedia-player\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Multimedia Player Lab\nblock: lab-multimedia-player\nsuperBlock: full-stack-developer\nIntroduction to the Build a Multimedia Player\nFor this lab, you will build a multimedia player using HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 231,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\build-a-multimedia-player\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c4f5edf35e7975f84347daa6f16fe8b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\python-for-penetration-testing\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Python for Penetration Testing Lectures\nblock: python-for-penetration-testing\nsuperBlock: information-security\nIntroduction to the Python for Penetration Testing Challenges\nPython for Penetration Testing Placeholder Introduction.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 281,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\information-security\\python-for-penetration-testing\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7e720388df478dbf7053d5efb98022c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\exam-certified-full-stack-developer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Certified Full Stack Developer Exam\nblock: exam-certified-full-stack-developer\nsuperBlock: full-stack-developer\nIntroduction to the Certified Full Stack Developer Exam\nPass the exam to become a Certified Full Stack Developer.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 266,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\exam-certified-full-stack-developer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3e90a497f61c470cd2899efb63e4ea89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-adjacency-list-to-matrix-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Adjacency List to Matrix Converter\nblock: lab-adjacency-list-to-matrix-converter\nsuperBlock: full-stack-developer\nIntroduction to the Build an Adjacency List to Matrix Converter\nIn this lab, you will implement a function that converts an adjacency list representation of a graph into an adjacency matrix representation.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-adjacency-list-to-matrix-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 71,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3a96aba2cb09b3f22c3d3c5ebe7b79b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-availability-table\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Availability Table\nblock: lab-availability-table\nsuperBlock: full-stack-developer\nIntroduction to the Build an Availability Table\nFor this lab, you will create an availability table.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 232,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-availability-table\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31a7e1eb0848c2058e6006927abf14d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bank-account-manager\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Bank Account Management Program\nblock: lab-bank-account-manager\nsuperBlock: full-stack-developer\nIntroduction to the Build a Bank Account Management Program\nIn this lab, you will build a simple transaction management system for a bank account.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 292,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bank-account-manager\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "60051b5c3f15bc385986c6ea43c1095c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bisection-method\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Bisection Method\nblock: lab-bisection-method\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Bisection Method\nIn this lab, you will implement the bisection method to find the square root of a number.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 273,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bisection-method\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 59,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "20607ccfd06f29f1f77fdda7eed3c158",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-catalog-table\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Book Catalog Table\nblock: lab-book-catalog-table\nsuperBlock: full-stack-developer\nIntroduction to the Build a Book Catalog Table\nIn this lab, you will create table filled with book information.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 242,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-catalog-table\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f00f5e6954abd27bc160a136364c340",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-blog-post-card\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Blog Post Card\nblock: lab-blog-post-card\nsuperBlock: full-stack-developer\nIntroduction to the Design a Blog Post Card\nIn this lab, you'll design a blog post card using HTML and CSS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 230,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-blog-post-card\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c47d8137a4b300dabf2b695472fae619",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-organizer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Book Organizer\nblock: lab-book-organizer\nsuperBlock: full-stack-developer\nIntroduction to the Build a Book Organizer\nIn this lab, you will build a book organizer using higher order functions in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 254,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-organizer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1a0fbafac5cf07be988fb7125420b6d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-inventory-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Book Inventory App\nblock: lab-book-inventory-app\nsuperBlock: full-stack-developer\nIntroduction to the Build a Book Inventory App\nFor this lab, you will create a book inventory app.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 229,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-book-inventory-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46adb7cd4fc4532b3a3f4f60d11dafb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-boolean-check\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Boolean Check Function\nblock: lab-boolean-check\nsuperBlock: full-stack-developer\nIntroduction to the Build a Boolean Check Function\nIn this lab, you'll implement a function that checks if a value is a boolean.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 258,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-boolean-check\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e14e81d4bdda839b3036e4ae7a51ca67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bookmark-manager-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Bookmark Manager App\nblock: lab-bookmark-manager-app\nsuperBlock: full-stack-developer\nIntroduction to the Build a Bookmark Manager App\nFor this lab, you will build a bookmark manager app.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 236,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-bookmark-manager-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b6aeb63ce62b79c729633308e6d2aeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-budget-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Budget App\nblock: lab-budget-app\nsuperBlock: full-stack-developer\nIntroduction to the Build a Budget App\nIn this lab you will build a budget app and practice creating a class and methods for that class.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 251,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-budget-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9663a9d584c4121d74bd87eae0835a79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-business-card\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Designing a Business Card\nblock: lab-business-card\nsuperBlock: full-stack-developer\nLearn CSS by Designing a Business Card\nIn this lab, you'll create a business card and style it using CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 226,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-business-card\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87829a8b32b1c506179fa52ef108a291",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-celestial-bodies-database\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Celestial Bodies Database\nblock: lab-celestial-bodies-database\nsuperBlock: full-stack-developer\nIntroduction to the Build a Celestial Bodies Database\nIn this lab you will build a Celestial Bodies Database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-celestial-bodies-database\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ed596b5cbe98f95c7ecba87c33380b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-celsius-to-fahrenheit-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Celsius to Fahrenheit Converter\nblock: lab-celsius-to-fahrenheit-converter\nsuperBlock: full-stack-developer\nIntroduction to the Build a Celsius to Fahrenheit Converter\nIn this lab you will implement a function that converts the temperature from Celsius to Fahrenheit.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 316,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-celsius-to-fahrenheit-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a67a99775aaabd72703014a0f8d41bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-checkout-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Checkout Page\nblock: lab-checkout-page\nsuperBlock: full-stack-developer\nIntroduction to the Build a Checkout Page\nFor this lab, you will build a checkout page.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 208,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-checkout-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e61c034dcb90f0a93f0b8644c60e0fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-chunky-monkey\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Chunky Monkey Algorithm\nblock: lab-chunky-monkey\nsuperBlock: full-stack-developer\nIntroduction to the Chunky Monkey Algorithm\nThis lab will focus on dividing an array into smaller arrays.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 228,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-chunky-monkey\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2edd7b99038a20108835e3a27ccaa734",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-color-picker\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Color Picker\nblock: lab-color-picker\nsuperBlock: full-stack-developer\nIntroduction to the Build a Color Picker\nIn this lab, you will use React to build a color picker.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 216,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-color-picker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2bb8072a5290f25e23b18b2e3ae0f6c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-colored-boxes\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Set of Colored Boxes\nblock: lab-colored-boxes\nsuperBlock: full-stack-developer\nIntroduction to the Design Colored Boxes\nIn this lab, you'll practice using CSS colors by designing colored boxes.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 243,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-colored-boxes\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9261df4534fba8b2cb190338539e4d25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-confidential-email-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Confidential Email Page Lab\nblock: lab-confidential-email-page\nsuperBlock: full-stack-developer\nIntroduction to the Confidential Email Page Lab\nFor this lab, you will create a web page of a confidential email.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 250,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-confidential-email-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad67e00f9f987bec935abffe7755baa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-contact-form\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Contact Form\nblock: lab-contact-form\nsuperBlock: full-stack-developer\nIntroduction to the Design a Contact Form\nIn this lab, you will design a contact form in HTML and style it using CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 237,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-contact-form\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "34b930ef272775493f624667ab361ba5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-currency-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Currency Converter\nblock: lab-currency-converter\nsuperBlock: full-stack-developer\nIntroduction to the Build a Currency Converter\nFor this lab, you'll build a currency converter app.\nYou'll use React state, memoization, and controlled components to convert between currencies.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 325,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-currency-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 63,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0feda64c3db63c83185a1f87e6666f2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-customer-complaint-form\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Customer Complaint Form\nblock: lab-customer-complaint-form\nsuperBlock: full-stack-developer\nIntroduction to the Build a Customer Complaint Form\nFor this lab, you will use JavaScript to validate a customer complaint form.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 269,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-customer-complaint-form\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85df1b747dfae0495eb0f981039c33d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-date-conversion\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Date Conversion Program\nblock: lab-date-conversion\nsuperBlock: full-stack-developer\nIntroduction to the Build a Date Conversion Program\nIn this lab, you will build a program to convert a date from one format to another.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 268,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-date-conversion\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5dd60c408a2d995f2756dd90469193ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-debug-camperbots-profile-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Debug Camperbot's Profile Page\nblock: lab-debug-camperbots-profile-page\nsuperBlock: full-stack-developer\nIntroduction to the Debug Camperbot's Profile Page\nIn this lab, you will help Camperbot debug the errors in their HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 265,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-debug-camperbots-profile-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c7525c0541063d00854de5bf082f199",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-debug-pet-adoption-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Debug a Pet Adoption Page\nblock: lab-debug-pet-adoption-page\nsuperBlock: full-stack-developer\nIntroduction to the Debug a Pet Adoption Page\nIn this lab, you will find and fix the errors in this pet adoption page.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-debug-pet-adoption-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40180961ce162ef6bee3257e6800d3f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-drum-machine\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Drum Machine\nblock: lab-drum-machine\nsuperBlock: full-stack-developer\nIntroduction to the Build a Drum Machine\nFor this lab you will use the audio element to build a drum machine.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 241,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-drum-machine\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "224a52b7fefa9e7a7df7e07462b3d57c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-email-masker\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Email Masker\nblock: lab-email-masker\nsuperBlock: full-stack-developer\nIntroduction to the Build an Email Masker\nIn this lab, you'll build an email masker that will take an email address and obscure it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 251,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-email-masker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "444ddc35a6da190cdfa3f8b55d374d86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-flyer-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Event Flyer Page\nblock: lab-event-flyer-page\nsuperBlock: full-stack-developer\nIntroduction to the Build an Event Flyer Page\nIn this lab, you will use absolute and relative CSS units to create an event flyer page.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 262,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-flyer-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 57,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "23625b5a90fdeebac4c969e730e28b53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-hub\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Event Hub\nblock: lab-event-hub\nsuperBlock: full-stack-developer\nIntroduction to the Build an Event Hub\nIn this lab, you will build an event hub using semantic HTML.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 214,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-hub\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "197f3b71d2a1d7a5cd9d779b9538c778",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-rsvp\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Event RSVP\nblock: lab-event-rsvp\nsuperBlock: full-stack-developer\nIntroduction to the Build an Event RSVP\nFor this lab you will use React.useState to manage a form in a React component.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 248,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-event-rsvp\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "34c6f0b6f7e57155882bc30435062280",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-factorial-calculator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Factorial Calculator\nblock: lab-factorial-calculator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Factorial Calculator\nIn this lab, you will build a factorial calculator.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 235,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-factorial-calculator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8fa06126eaaaa83315de8ef7f052d3f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-favorite-icon-toggler\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Favorite Icon Toggler\nblock: lab-favorite-icon-toggler\nsuperBlock: full-stack-developer\nIntroduction to the Build a Favorite Icon Toggler\nIn this lab, you will build a favorite icon toggler by utilizing JavaScript click events.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 276,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-favorite-icon-toggler\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a11b727c43da961e96799913b61ce518",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-fcc-forum-leaderboard\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an fCC Forum Leaderboard\nblock: lab-fcc-forum-leaderboard\nsuperBlock: full-stack-developer\nIntroduction to the Build an fCC Forum Leaderboard\nFor this lab you will practice asynchronous JavaScript by coding your own freeCodeCamp forum leaderboard.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 294,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-fcc-forum-leaderboard\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 61,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35048da122fa91d6a0d43cc183355c2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-first-element-finder\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a First Element Finder\nblock: lab-first-element-finder\nsuperBlock: full-stack-developer\nIntroduction to the Build a First Element Finder\nIn this lab, you will create a function that looks through an array and returns the first element in it that passes a \"truth test\".",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 315,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-first-element-finder\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 64,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3bf496b579ee6e120aa0c826bc4cca8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-football-team-cards\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Set of Football Team Cards\nblock: lab-football-team-cards\nsuperBlock: full-stack-developer\nIntroduction to the Build a Set of Football Team Cards\nOne common aspect of building web applications: processing datasets, and then outputting information to the screen. In this sports team cards project, you'll have to use DOM manipulation, object destructuring, event handling, and data filtering.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 440,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-football-team-cards\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 86,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0930f26ff432dea92e6d84d772842f86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-fortune-teller\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Fortune Teller\nblock: lab-fortune-teller\nsuperBlock: full-stack-developer\nIntroduction to Building a Fortune Teller\nIn this lab, you will build a fortune teller by randomly selecting a fortune from the available fortunes.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 270,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-fortune-teller\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 57,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7565d818f3b718c2c1a30480c4716c1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-golf-score-translator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Golf Score Translator\nblock: lab-golf-score-translator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Golf Score Translator\nFor this lab, you will use array methods to translate golf pars and strokes into their nicknames.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 284,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-golf-score-translator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 57,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94b5dfdded08b132ea70d1d6c0999476",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-gradebook-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Gradebook App\nblock: lab-gradebook-app\nsuperBlock: full-stack-developer\nIntroduction to the Build a Gradebook App\nFor this lab, you will create a gradebook app.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 209,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-gradebook-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a7a1a653ecf8c7876853e2baaa74a1cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-hash-table\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Hash Table\nblock: lab-hash-table\nsuperBlock: full-stack-developer\nIntroduction to the Build a Hash Table\nA hash table is a data structure that is used to store key-value pairs and is optimized for quick lookups. In this lab, you will use your knowledge about data structures to build a hash table.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 346,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-hash-table\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 73,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46b7ddca74e477234697c1dff8df4407",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-house-painting\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a House Painting\nblock: lab-house-painting\nsuperBlock: full-stack-developer\nIntroduction to the Build a House Painting\nFor this lab, you will build a house painting using CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 222,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-house-painting\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8a948b974a9799e5ac85bc674ac09db1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-html-entitiy-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Implement an HTML Entity Converter\nblock: lab-html-entitiy-converter\nsuperBlock: full-stack-developer\nIntroduction to Implement an HTML Entity Converter\nIn this lab, you will convert special characters in a string to their corresponding HTML entities.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 288,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-html-entitiy-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4040872ed39ff187f6aad68143160fa8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-inventory-management-program\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an Inventory Management Program\nblock: lab-inventory-management-program\nsuperBlock: full-stack-developer\nIntroduction to the Build an Inventory Management Program\nFor this lab, you will build an inventory management program using JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 288,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-inventory-management-program\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "126917afedd1995e7c5d5719dcbc9046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-isbn-validator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Debug an ISBN Validator\nblock: lab-isbn-validator\nsuperBlock: full-stack-developer\nIntroduction to the Debug an ISBN Validator\nIn this lab, you will start with a bugged app, and you will need to debug and fix the bugs until it is working properly.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 288,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-isbn-validator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d874531149f077aa1bc7264ed6a5784",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-job-application-form\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Job Application Form\nblock: lab-job-application-form\nsuperBlock: full-stack-developer\nIntroduction to the Build a Job Application Form\nIn this lab you will build a job application form and style it using pseudo-classes.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 268,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-job-application-form\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46bd2c096911d1ff948e1465f2f89b3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-javascript-trivia-bot\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a JavaScript Trivia Bot\nblock: lab-javascript-trivia-bot\nsuperBlock: full-stack-developer\nIntroduction to the Build a JavaScript Trivia Bot\nIn this lab, you will practice working with JavaScript variables and strings by building a trivia bot.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 289,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-javascript-trivia-bot\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17ceae80351c52f3a6872701bbe5518a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-leap-year-calculator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the  a Leap Year Calculator\nblock: lab-leap-year-calculator\nsuperBlock: full-stack-developer\nIntroduction to Leap Year Calculator\nIn this lab you will utilize conditional statements and loops to create a leap year calculator.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 262,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-leap-year-calculator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0316ee1d3447ba69bdfdadd73ca0f842",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-largest-number-finder\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build the Largest Number Finder\nblock: lab-largest-number-finder\nsuperBlock: full-stack-developer\nIntroduction to the Build the Largest Number Finder\nIn this lab, you will use JavaScript fundamentals to create a function that finds the largest number in each sub-array of a given array.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 327,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-largest-number-finder\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 63,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "187aa5737aae521ce1192d5a631a2441",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-lightbox-viewer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Lightbox Viewer\nblock: lab-lightbox-viewer\nsuperBlock: full-stack-developer\nIntroduction to the Build a Lightbox Viewer\nIn this lab, you will build a lightbox viewer for viewing images in a focused mode.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 252,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-lightbox-viewer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "30f062fe34f055aa632910d109b04203",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-longest-word-in-a-string\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Longest Word Finder App\nblock: lab-longest-word-in-a-string\nsuperBlock: full-stack-developer\nIntroduction to the Build a Longest Word Finder App\nIn this lab, you will use JavaScript loops to find the length of the longest word in the given sentence.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 298,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-longest-word-in-a-string\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 64,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dd1685d37af438ba24e1e3eb106a2d25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-luhn-algorithm\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Luhn Algorithm\nblock: lab-luhn-algorithm\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Luhn Algorithm\nIn this lab, you will implement the Luhn algorithm, a simple checksum formula used to validate identification numbers such as credit card numbers.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 324,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-luhn-algorithm\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 63,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6121002e4d2dbb0738069c09d493168c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-lunch-picker-program\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Lunch Picker Program\nblock: lab-lunch-picker-program\nsuperBlock: full-stack-developer\nIntroduction to the Build a Lunch Picker Program\nIn this lab, you create a lunch picker user arrays and random numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-lunch-picker-program\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3a1d11ce11a3f2f22f014c7039284981",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-magazine-layout\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Magazine Layout\nblock: lab-magazine-layout\nsuperBlock: full-stack-developer\nIntroduction to the Design a Magazine Layout\nIn this lab, you will design a magazine layout using CSS Grid, including concepts like grid rows and grid columns.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 285,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-magazine-layout\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 57,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6f436fb83eb5ed8f4bd25edc33780609",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-markdown-to-html-converter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Markdown to HTML Converter\nblock: lab-markdown-to-html-converter\nsuperBlock: full-stack-developer\nIntroduction to the Build a Markdown to HTML Converter\nFor this lab, you will build a Markdown to HTML converter using JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 277,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-markdown-to-html-converter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46f4e9bb1d0aabf8fc0989ca189fc8ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-mood-board\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Mood Board\nblock: lab-mood-board\nsuperBlock: full-stack-developer\nIntroduction to the Build a Mood Board\nIn this lab, you will create a mood board using a React with props.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 221,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-mood-board\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "496b764f6c6cfbbfd70e3eb243fa491e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-moon-orbit\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Learn CSS Animation by Creating a Moon Orbit\nblock: lab-moon-orbit\nsuperBlock: full-stack-developer\nIntroduction to the Learn CSS Animation by Creating a Moon Orbit\nThis is a test for the new project-based curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 258,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-moon-orbit\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7c4c67348a3955199ed25372c05b4846",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-movie-review-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Movie Review Page\nblock: lab-movie-review-page\nsuperBlock: full-stack-developer\nIntroduction to the Design a Movie Review Page\nIn this lab, you'll create a movie review page. You will practice using HTML, alt attributes, accessible lists, and hiding decorative content from screen readers using aria-hidden.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 361,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-movie-review-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 71,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a0f71b489ea6ab6b30fb374c827bb519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-music-shopping-cart-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Music Shopping Cart Page\nblock: lab-music-shopping-cart-page\nsuperBlock: full-stack-developer\nIntroduction to the Build a Music Shopping Cart Page\nIn this lab, you will build a music shopping cart page with Tailwind CSS.\nYou will practice working with Tailwind CSS utility classes for flexbox layouts, colors, breakpoints and more.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 380,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-music-shopping-cart-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 77,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ae71fbcd76a0ec9f65d973d47d0391ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-mutations\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Mutations Algorithm\nblock: lab-mutations\nsuperBlock: full-stack-developer\nIntroduction to the Mutations Algorithm\nThis lab will focus on iterating over two strings to compare their characters.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 233,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-mutations\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7abd0f4029195265ed69d3fec3a9ba3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-newspaper-article\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Newspaper Article Lab\nblock: lab-newspaper-article\nsuperBlock: full-stack-developer\nIntroduction to the Newspaper Article Lab\nFor this lab, you will create a newspaper article web page using HTML and CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 245,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-newspaper-article\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2a4465674c0999b9918e201b64e2ab7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-number-guessing-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Build a Number Guessing Game\nblock: lab-number-guessing-game\nsuperBlock: full-stack-developer\nIntroduction to Build a Number Guessing Game\nFor this lab, you will use Bash scripting, PostgreSQL, and Git to create a number guessing game that runs in the terminal and saves user information.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 325,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-number-guessing-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 67,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97cd53e100e35f1194c966dfe08f1acd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-number-pattern-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Number Pattern Generator\nblock: lab-number-pattern-generator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Number Pattern Generator\nIn this lab you will build a number pattern generator.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 250,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-number-pattern-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64075192a43819d5b9d7630e388d92c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-one-time-password-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a One-Time Password Generator\nblock: lab-one-time-password-generator\nsuperBlock: full-stack-developer\nIntroduction to the Build a One-Time Password Generator\nThis is a test for the new project-based curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 257,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-one-time-password-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2904c068117b7dd819e8fec8013017e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-palindrome-checker\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Palindrome Checker\nblock: lab-palindrome-checker\nsuperBlock: full-stack-developer\nIntroduction to the Build a Palindrome Checker\nFor this lab, you'll build an application that checks whether a given word is a palindrome.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 269,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-palindrome-checker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8c6b80e0c15a78592a672d162be3ec4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-password-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Password Generator App\nblock: lab-password-generator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Password Generator App\nIn this lab, you'll build a password generator app.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 237,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-password-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "988f1c9563eaca0401c1dad089a43865",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-periodic-table-database\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Periodic Table Database\nblock: lab-periodic-table-database\nsuperBlock: full-stack-developer\nIntroduction to the Build a Periodic Table Database\nFor this lab, you will create a Bash script to get information about chemical elements from a periodic table database.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 311,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-periodic-table-database\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 61,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e3f8daad2a8904469f2b232ce86a229",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-permutation-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Permutation Generator\nblock: lab-permutation-generator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Permutation Generator\nFor this lab, you will build a permutation generator that produces all possible permutations of a given string.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 298,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-permutation-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1d9ac681ce638901d917a11e00983c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-personal-portfolio\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Personal Portfolio\nblock: lab-personal-portfolio\nsuperBlock: full-stack-developer\nIntroduction to the Build a Personal Portfolio\nFor this project, you will build your own personal portfolio page.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 244,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-personal-portfolio\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "69803326c09d27b195da079a73bcbda7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-playing-card-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Build a Page of Playing Cards\nblock: lab-page-of-playing-cards\nsuperBlock: full-stack-developer\nIntroduction to Build a Page of Playing Cards\nFor this lab, you will use flexbox to create a webpage of a playing cards.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 253,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-playing-card-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2f19ae600d8cbc7bf84d5db6567f716",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-photography-exhibit\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Photography Exhibit\nblock: lab-photography-exhibit\nsuperBlock: full-stack-developer\nIntroduction to the Design a Photography Exhibit\nIn this lab, you will practice working with Tailwind CSS by designing a photography exhibit webpage.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 283,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-photography-exhibit\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b2704002405849e9e40b955c4d50d734",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-polygon-area-calculator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Polygon Area Calculator\nblock: lab-polygon-area-calculator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Polygon Area Calculator\nIn this lab, you will use object-oriented programming to calculate the areas of different polygons like squares and rectangles.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 320,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-polygon-area-calculator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 59,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bfbdf117a71fcf4c489839efebe5e549",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-profile-lookup\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Profile Lookup\nblock: lab-profile-lookup\nsuperBlock: full-stack-developer\nIntroduction to the Build a Profile Lookup\nIn this lab, you create a function that looks up profile information.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 235,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-profile-lookup\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5077d84e342fa8ae4f32922a712cc3ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-product-landing-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Product Landing Page\nblock: build-a-product-landing-page\nsuperBlock: full-stack-developer\nIntroduction to the Build a Product Landing Page\nFor this project, you will build a product landing page to market a product of your choice.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 279,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-product-landing-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27dc170608fa10fcc4283f1bf66f32ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-project-idea-board\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Project Idea Board\nblock: lab-project-idea-board\nsuperBlock: full-stack-developer\nIntroduction to the Build a Project Idea Board\nIn this lab, you will build a project idea board using OOP in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 251,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-project-idea-board\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35c3699809da40007fd9a9ecbe81a48b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-pyramid-generator\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Pyramid Generator\nblock: lab-pyramid-generator\nsuperBlock: full-stack-developer\nIntroduction to the Build a Pyramid Generator\nThis is a test for the new project-based curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 227,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-pyramid-generator\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a072e548095f4f140fe508d58097339f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-quicksort\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Quicksort Algorithm\nblock: lab-quicksort\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Quicksort Algorithm\nIn this lab you will implement the quicksort algorithm to sort a list of integers.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 265,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-quicksort\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "182ee06db4a6fe1dd90cbe9ff3ec87ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-quiz-game\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Quiz Game\nblock: lab-quiz-game\nsuperBlock: full-stack-developer\nIntroduction to the Build a Quiz Game\nIn this lab you will build a quiz game.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 190,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-quiz-game\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "398a68228687c0f63f65f766211151df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-random-background-color-changer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Debug a Random Background Color Changer\nblock: lab-random-background-color-changer\nsuperBlock: full-stack-developer\nIntroduction to the Debug a Random Background Color Changer\nFor this lab, you will debug a random background color changer and fix the errors to make it work properly.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 324,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-random-background-color-changer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 63,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "02e75063b7effcae59ce156d11c5c4bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-real-time-counter\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Build a Real Time Counter\nblock: lab-real-time-counter\nsuperBlock: full-stack-developer\nIntroduction to Build a Real Time Counter\nIn this lab, you will build a real-time character counter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 224,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-real-time-counter\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5ec0f39d1f4cf849cfcb4fbe5b78b9ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-recipe-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Recipe Page Lab\nblock: lab-recipe-page\nsuperBlock: full-stack-developer\nIntroduction to the Recipe Page Lab\nFor this lab, you will create a web page of your favorite recipe.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 214,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-recipe-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "18c2394421b05b4774e983e43ffea8ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-record-collection\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Record Collection\nblock: lab-record-collection\nsuperBlock: full-stack-developer\nIntroduction to the Build a Record Collection\nIn this lab you will build a function to manage a record collection.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 243,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-record-collection\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94e1327437d2867e511e3c37017100a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-regex-sandbox\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a RegEx Sandbox\nblock: lab-regex-sandbox\nsuperBlock: full-stack-developer\nIntroduction to the Build a RegEx Sandbox\nIn this lab you will build a regex sandbox.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 206,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-regex-sandbox\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0fa9414b4a444ae791c10d6741ea33e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-repeat-a-string\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a String Repeating Function\nblock: lab-repeat-a-string\nsuperBlock: full-stack-developer\nIntroduction to the Build a String Repeating Function\nIn this lab, you will implement loops to repeat a string a specified number of times.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 274,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-repeat-a-string\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b98f1495d33ba81f78b68d202b24fd9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-reusable-footer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Reusable Footer\nblock: lab-reusable-footer\nsuperBlock: full-stack-developer\nIntroduction to the Build a Reusable Footer\nIn this lab, you will use React to build a reusable footer.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 228,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-reusable-footer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "48317a89c4233aedac544c3c9d832fa9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-reverse-a-string\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a String Inverter\nblock: lab-reverse-a-string\nsuperBlock: full-stack-developer\nIntroduction to the Build a String Inverter\nIn this lab, you create a function that reverses a given string.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 234,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-reverse-a-string\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 51,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ee2d63fc320372cdd17fd26ebd38d963",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-rpg-character\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build an RPG Character\nblock: lab-rpg-character\nsuperBlock: full-stack-developer\nIntroduction to the Build an RPG Character\nIn this lab, you will practice basic python by building an RPG character.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 238,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-rpg-character\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6fdb266376845ac327b95888b12d478c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-salon-appointment-scheduler\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Salon Appointment Scheduler\nblock: lab-salon-appointment-scheduler\nsuperBlock: full-stack-developer\nIntroduction to the Build a Salon Appointment Scheduler\nFor this lab, you will create an interactive Bash program that uses PostgreSQL to track the customers and appointments for your salon.\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 340,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-salon-appointment-scheduler\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7cda196a4b0fcfb192b6fc0354d572f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-selection-sort\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Selection Sort Algorithm\nblock: lab-selection-sort\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Selection Sort Algorithm\nIn this lab you will implement the selection sort algorithm.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 258,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-selection-sort\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ac8094daff0d45cd6082d9012938b65b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sentence-maker\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Sentence Maker\nblock: lab-sentence-maker\nsuperBlock: full-stack-developer\nIntroduction to Build a Sentence Maker\nIn this lab, you will create different stories by assigning different words to different variables.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 261,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sentence-maker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "83d7bdfd277e563b604937906a296097",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-slice-and-splice\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Slice and Splice Algorithm\nblock: lab-slice-and-splice\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Slice and Splice Algorithm\nIn this lab you will practice merging an array with an other.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 265,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-slice-and-splice\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6344eb0bca619f44263804a4e370de8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sorting-visualizer\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Sorting Visualizer\nblock: lab-sorting-visualizer\nsuperBlock: full-stack-developer\nIntroduction to the Build a Sorting Visualizer\nFor this lab, you will use JavaScript to visualize the steps that the Bubble Sort algorithm takes to reorder an array of integers.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 308,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sorting-visualizer\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "854811adc0974403f658c81fc9f7a8bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-string-ending-checker\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Confirm the Ending Tool\nblock: lab-string-ending-checker\nsuperBlock: full-stack-developer\nIntroduction to the Build a Confirm the Ending Tool\nIn this lab, you will implement a function that checks if a given string ends with a specified target string.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 300,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-string-ending-checker\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a8e232c285107605ada160d4e08ba05f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sum-all-numbers-algorithm\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Design a Sum All Numbers Algorithm\nblock: lab-sum-all-numbers-algorithm\nsuperBlock: full-stack-developer\nIntroduction to the Design a Sum All Numbers Algorithm\nIn this lab, you will design a sum all numbers algorithm. This algorithm takes an array of two numbers and returns the sum of those two numbers plus the sum of all the numbers between them.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 390,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-sum-all-numbers-algorithm\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 79,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "534d6ab93040b68e4ad44d40b12e6853",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-stylized-to-do-list\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Stylized To-Do List\nblock: lab-stylized-to-do-list\nsuperBlock: full-stack-developer\nIntroduction to the Build a Stylized To-Do List\nIn this lab, you will practice the different styles that can be applied to links when they are hovered over, focused, clicked, and visited.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 320,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-stylized-to-do-list\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 75,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "908b44b7ff4188ed1b5f05d9c1d8c958",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-survey-form\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Survey Form\nblock: lab-survey-form\nsuperBlock: full-stack-developer\nIntroduction to the Build a Survey Form\nFor this lab, you will create a survey form.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 201,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-survey-form\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b45ea4370479665278209b567dda6933",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-technical-documentation-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Technical Documentation Page\nblock: lab-technical-documentation-page\nsuperBlock: full-stack-developer\nIntroduction to the Technical Documentation Page\nFor this project, you will build a technical documentation page to serve as instruction or reference for a topic.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 305,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-technical-documentation-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cbe03ddc6a6e28a13717d7e81a21bbcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tic-tac-toe\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Tic-Tac-Toe Game\nblock: lab-tic-tac-toe\nsuperBlock: full-stack-developer\nIntroduction to the Build a Tic-Tac-Toe Game\nIn this lab, you'll build a Tic-Tac-Toe game using React. You'll practice managing state, handling user interactions, and updating the UI dynamically.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 317,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tic-tac-toe\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 77,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1fa7d3746abc5e23f2a77713dd8d0f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-theme-switcher\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Theme Switcher\nblock: lab-theme-switcher\nsuperBlock: full-stack-developer\nIntroduction to the Build a Theme Switcher\nIn this lab, you will build a theme switcher and practice working with the aria-haspopup, aria-expanded, and aria-controls attributes.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 306,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-theme-switcher\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d468be74fb3bc54eacf7de779f41939c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tower-of-hanoi\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Tower of Hanoi Algorithm\nblock: lab-tower-of-hanoi\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Tower of Hanoi Algorithm\nIn this lab, you will implement an algorithm to solve the Tower of Hanoi puzzle.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 278,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tower-of-hanoi\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 59,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "310ddd070896d820c85cc844b338eb8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-travel-agency-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Travel Agency Page\nblock: lab-travel-agency-page\nsuperBlock: full-stack-developer\nIntroduction to the Travel Agency Page\nFor this lab, you will create a web page of a travel agency.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 222,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-travel-agency-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d421e8c60573cb20f050c23723453fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tribute-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Tribute Page\nblock: lab-tribute-page\nsuperBlock: full-stack-developer\nIntroduction to the Tribute Page\nFor this lab, you will build a tribute page for a subject of your choosing, fictional or real.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 238,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-tribute-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "816b0a64a511af948d57ad822a26d222",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-truncate-string\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Implement the Truncate String Algorithm\nblock: lab-truncate-string\nsuperBlock: full-stack-developer\nIntroduction to the Implement the Truncate String Algorithm\nIn this lab, you will practice truncating a string to a certain length.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 272,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-truncate-string\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "965ae3c7ab26d97928ac8802a7e31a10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-user-configuration-manager\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a User Configuration Manager\nblock: lab-user-configuration-manager\nsuperBlock: full-stack-developer\nIntroduction to the Build a User Configuration Manager\nIn this lab you will practice dictionaries in Python by building a small app that manages user configuration settings.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 320,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-user-configuration-manager\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "948ee8e39804438118776b648ab73149",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-video-compilation-page\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Video Compilation Page\nblock: lab-video-compilation-page\nsuperBlock: full-stack-developer\nIntroduction to the Video Compilation Page\nFor this lab, you will create a video compilation web page.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 233,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-video-compilation-page\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f90e2dba42ef3ddcc2138dd36251adfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-voting-system\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Voting System\nblock: lab-voting-system\nsuperBlock: full-stack-developer\nIntroduction to the Build a Voting System\nIn this lab, you will build a voting system using Maps and Sets.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 227,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-voting-system\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d2b524b8037ee975f56629e27e2d5ff3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-weather-app\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a Weather App\nblock: lab-weather-app\nsuperBlock: full-stack-development\nIntroduction to the Build a Weather App\nIn this lab you will build a Weather App using an API to fetch the data.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 231,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-weather-app\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 49,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "09a8cb1ab7204bbe4665feba74658d34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-world-cup-database\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Build a World Cup Database\nblock: lab-world-cup-database\nsuperBlock: full-stack-developer\nIntroduction to the Build a World Cup Database\nFor this project, you will create a Bash script that enters information from World Cup games into PostgreSQL, then query the database for useful statistics.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 334,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lab-world-cup-database\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 65,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8e69150d67546fc0f3d4c3e59e8ee59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-accessible-media-elements\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Working with Accessible Media Elements\nblock: lecture-accessible-media-elements\nsuperBlock: full-stack-developer\nIntroduction to the Working with Accessible Media Elements\nIn these lecture videos, you will learn about how to create accessible links, audio and video content.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 315,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-accessible-media-elements\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "08de1618bb1798ab73d4259b897f52db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-accessible-tables-forms\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Working with Accessible Tables and Forms\nblock: lecture-accessible-tables-forms\nsuperBlock: full-stack-developer\nIntroduction to the Working with Accessible Tables and Forms\nIn these lecture videos, you will learn about how to create accessible tables and forms.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 303,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-accessible-tables-forms\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 59,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27c656c836336d050f1904bdbac490c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-animations-and-accessibility\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Animations and Accessibility\nblock: lecture-animations-and-accessibility\nsuperBlock: full-stack-developer\nIntroduction to Animations and Accessibility\nIn these lecture videos, you will learn about animations and accessibility.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 263,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-animations-and-accessibility\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4eadd1c5ae2710f26039812ba5a6390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-accessibility-and-css\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Best Practices for Accessibility and CSS\nblock: lecture-best-practices-for-accessibility-and-css\nsuperBlock: full-stack-developer\nIntroduction to Best Practices for Accessibility and CSS\nIn these lecture videos, you will learn about best practices for accessibility in CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 310,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-accessibility-and-css\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d795e1d11658700dbb1c3931d4a482a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-responsive-web-design\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Best Practices for Responsive Web Design\nblock: lecture-best-practices-for-responsive-web-design\nsuperBlock: full-stack-developer\nIntroduction to Best Practices for Responsive Web Design\nIn these lecture videos, you will learn about the best practices for responsive web design.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 315,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-responsive-web-design\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eaf24d81a88855aee87b90229d753c21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-browsing-the-web-effectively\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Browsing the Web Effectively\nblock: lecture-browsing-the-web-effectively\nsuperBlock: full-stack-developer\nIntroduction to Browsing the Web Effectively\nIn these lecture videos, you will learn how to browse the web effectively.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 262,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-browsing-the-web-effectively\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0f4cbea71478448e15543c195dbda57d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-styling-forms\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Best Practices for Styling Forms\nblock: lecture-best-practices-for-styling-forms\nsuperBlock: full-stack-developer\nIntroduction to Best Practices for Styling Forms\nIn these lecture videos, you will learn about the best practices for styling forms.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 283,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-best-practices-for-styling-forms\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 56,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6afe46350e970f7cfd678b6e9652da3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-classes-and-objects\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Classes and Objects\nblock: lecture-classes-and-objects\nsuperBlock: full-stack-developer\nIntroduction to Classes and Objects\nLearn about Classes and Objects in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 211,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-classes-and-objects\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 40,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ddad9fcc951b3ba890582f3a9b78444d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-common-design-tools\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Common Design Tools\nblock: lecture-common-design-tools\nsuperBlock: full-stack-developer\nIntroduction to Common Design Tools\nIn these lecture videos, you will learn about common design tools.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 227,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-common-design-tools\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 42,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5bbd75091e9aa5181d41438ead891fff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-css-specificity-the-cascade-algorithm-and-inheritance\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to CSS Specificity, the Cascade Algorithm, and Inheritance\nblock: lecture-css-specificity-the-cascade-algorithm-and-inheritance\nsuperBlock: full-stack-developer\nIntroduction to CSS Specificity, the Cascade Algorithm, and Inheritance\nIn these lecture videos, you will learn about CSS specificity, the cascade algorithm, and inheritance.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 369,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-css-specificity-the-cascade-algorithm-and-inheritance\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 72,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c7f421052eb44234e7b60cb68401cb9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-debugging-css\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Debugging CSS\nblock: lecture-debugging-css\nsuperBlock: full-stack-developer\nIntroduction to Debugging CSS\nIn these lecture videos, you will learn about debugging CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 203,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-debugging-css\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 41,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "22f3193a1fe2a8789379c46004f92ef9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-debugging-techniques\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Debugging Techniques\nblock: lecture-debugging-techniques\nsuperBlock: full-stack-developer\nIntroduction to Debugging Techniques\nIn these lecture videos, you will learn debugging techniques.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 225,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-debugging-techniques\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 42,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eaafa6d56dd60138f9e0bcc753a36bed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-html-fundamentals\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the HTML Fundamentals\nblock: lecture-html-fundamentals\nsuperBlock: full-stack-developer\nIntroduction to the HTML Fundamentals\nLearn HTML fundamentals in these lecture videos.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 211,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-html-fundamentals\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 40,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5694961b3c5028fb152994c8f5a65137",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-importance-of-accessibility-and-good-html-structure\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Importance of Accessibility and Good HTML Structure\nblock: lecture-importance-of-accessibility-and-good-html-structure\nsuperBlock: full-stack-developer\nIntroduction to Importance of Accessibility and Good HTML Structure\nIn these lecture videos, you will learn about importance of accessibility and using good HTML structure.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 361,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-importance-of-accessibility-and-good-html-structure\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9799d05d23f85d54c4b30f5f22957989",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-aria\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Introduction to ARIA\nblock: lecture-introduction-to-aria\nsuperBlock: full-stack-developer\nIntroduction to the Introduction to ARIA\nIn these lecture videos, you will learn about working with ARIA roles.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 242,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-aria\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc5728bb87c9ce03ec4810a49940786a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-importance-of-semantic-html\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Importance of Semantic HTML\nblock: lecture-importance-of-semantic-html\nsuperBlock: full-stack-developer\nIntroduction to Importance of Semantic HTML\nIn these lecture videos, you will learn about semantic HTML and the importance of using it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 276,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-importance-of-semantic-html\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1de9ffffbd1ad2cfabfde17eddf68c89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-javascript\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Introduction to JavaScript\nblock: lecture-introduction-to-javascript\nsuperBlock: full-stack-developer\nIntroduction to Introduction to JavaScript\nIn these lecture videos, you will get a basic introduction to JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-javascript\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 45,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ed30cd6fc94d3227e056cbd98c32f58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-javascript-libraries-and-frameworks\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Introduction to JavaScript Libraries and Frameworks\nblock: lecture-introduction-to-javascript-libraries-and-frameworks\nsuperBlock: full-stack-developer\nIntroduction to Introduction to JavaScript Libraries and Frameworks\nIn these lecture videos, you will get an introduction to JavaScript libraries and frameworks.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 350,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-javascript-libraries-and-frameworks\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d42bb8a93875cf2598128c19f6b0243",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-typescript\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Introduction to TypeScript\nblock: lecture-introduction-to-typescript\nsuperBlock: full-stack-developer\nIntroduction to Introduction to TypeScript\nLearn about Introduction to TypeScript in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 239,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-typescript\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 40,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d1425fe91a729695781d8941c5d774d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-python\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Introduction to Python\nblock: lecture-introduction-to-python\nsuperBlock: full-stack-developer\nIntroduction to Introduction to Python\nLearn about Introduction to Python in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 223,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-introduction-to-python\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 39,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e4c1d186426a1025e373b4f8316bc6a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-react-strategies-and-debugging\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to React Strategies and Debugging\nblock: lecture-react-strategies-and-debugging\nsuperBlock: full-stack-developer\nIntroduction to React Strategies and Debugging\nLearn about React Strategies and Debugging in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-react-strategies-and-debugging\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 47,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8ffd0bde6cdd7059214475e4ba96c1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-routing-react-frameworks-and-dependency-management-tools\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Routing, React Frameworks, and Dependency Management Tools\nblock: lecture-routing-react-frameworks-and-dependency-management-tools\nsuperBlock: full-stack-developer\nIntroduction to Routing, React Frameworks, and Dependency Management Tools\nLearn about Routing, React Frameworks, and Dependency Management Tools in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 365,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-routing-react-frameworks-and-dependency-management-tools\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 65,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f4e59e4d4dabf2e1e378eb45209a4279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-searching-and-sorting-algorithms\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Searching and Sorting Algorithms\nblock: lecture-searching-and-sorting-algorithms\nsuperBlock: full-stack-developer\nIntroduction to Searching and Sorting Algorithms\nLearn about fundamental searching and sorting algorithms, including linear search, binary search, and merge sort. These lectures cover algorithm implementations, time and space complexity analysis, and the divide and conquer programming paradigm.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 446,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-searching-and-sorting-algorithms\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 74,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9eb235f8c163c12e3892733dcf2b67d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-styling-lists-and-links\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Styling Lists and Links\nblock: lecture-styling-lists-and-links\nsuperBlock: full-stack-developer\nIntroduction to Styling Lists and Links\nIn these lecture videos, you will learn about styling lists and links.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 243,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-styling-lists-and-links\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "468e02a8511f349953d898447c36b11b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-the-var-keyword-and-hoisting\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to The var Keyword and Hoisting\nblock: lecture-the-var-keyword-and-hoisting\nsuperBlock: full-stack-developer\nIntroduction to The var Keyword and Hoisting\nIn these lecture videos, you will learn about the var keyword and hoisting in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 277,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-the-var-keyword-and-hoisting\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "537dfc742a98dcaccd735152072bd635",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Understanding aria-expanded, aria-live, and Common ARIA States\nblock: lecture-understanding-aria-expanded-aria-live-and-common-aria-states\nsuperBlock: full-stack-developer\nIntroduction to the Understanding aria-expanded, aria-live, and Common ARIA States\nIn these lectures you will learn more about ARIA attributes like aria-expanded, aria-live, and common ARIA states.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 414,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 83,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a22e961bd842a7f7befe528fbf8609eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-abstraction\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Abstraction\nblock: lecture-understanding-abstraction\nsuperBlock: full-stack-developer\nIntroduction to Understanding Abstraction\nLearn about Understanding Abstraction in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 235,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-abstraction\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 39,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd5b52608ad8599dcec9a87283da82eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-asynchronous-programming\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Asynchronous Programming\nblock: lecture-understanding-asynchronous-programming\nsuperBlock: full-stack-developer\nIntroduction to Understanding Asynchronous Programming\nIn these lecture videos, you will learn about asynchronous programming.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 289,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-asynchronous-programming\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 46,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "439d3f5446e78506ceafb3752c78a333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-bash-scripting\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Bash Scripting\nblock: lecture-understanding-bash-scripting\nsuperBlock: full-stack-developer\nIntroduction to Understanding Bash Scripting\nLearn about Bash Scripting in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 233,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-bash-scripting\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b137f325c5230756ceb2fe1c9f044d27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-comparisons-and-conditionals\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Comparisons and Conditionals\nblock: lecture-understanding-comparisons-and-conditionals\nsuperBlock: full-stack-developer\nIntroduction to Understanding Comparisons and Conditionals\nIn these lecture videos, you will learn about comparisons and conditionals.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 305,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-comparisons-and-conditionals\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d3bfb115ead0eb7e336ef9a4aad5c1f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-computer-internet-and-tooling-basics\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Computer, Internet, and Tooling Basics\nblock: lecture-understanding-computer-internet-and-tooling-basics\nsuperBlock: full-stack-developer\nIntroduction to Understanding Computer, Internet, and Tooling Basics\nIn these lecture videos, you will learn about computer, internet, and tooling basics.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 343,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-computer-internet-and-tooling-basics\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 67,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "db835c8d9c622254069728868f52d747",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-dynamic-programming\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Dynamic Programming\nblock: lecture-understanding-dynamic-programming\nsuperBlock: full-stack-developer\nIntroduction to Understanding Dynamic Programming\nLearn about Understanding Dynamic Programming in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 267,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-dynamic-programming\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 41,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75661cc30efce1694397be9987edabde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-effects-and-referencing-values-in-react\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Effects and Referencing Values in React\nblock: lecture-understanding-effects-and-referencing-values-in-react\nsuperBlock: full-stack-developer\nIntroduction to Understanding Effects and Referencing Values in React\nLearn about Understanding Effects and Referencing Values in React in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 347,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-effects-and-referencing-values-in-react\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "36e503a9833af86983f6508e1ab7e06b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-error-handling\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Error Handling\nblock: lecture-understanding-error-handling\nsuperBlock: full-stack-developer\nIntroduction to Understanding Error Handling\nLearn about Understanding Error Handling in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 247,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-error-handling\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 40,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2eb593b9df6163404de4fe6b6d1fc80e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-form-validation\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Form Validation\nblock: lecture-understanding-form-validation\nsuperBlock: full-stack-developer\nIntroduction to Understanding Form Validation\nIn these lecture videos, you will learn about form validation in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 267,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-form-validation\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e55bf28a3e9fd13c7aa76a132af98f65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-functional-programming\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Functional Programming\nblock: lecture-understanding-functional-programming\nsuperBlock: full-stack-developer\nIntroduction to Understanding Functional Programming\nIn these lecture videos, you will learn about functional programming.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 281,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-functional-programming\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ebf7bc26e2bd26921ec30eb1f4f48163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-graphs-and-trees\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Graphs and Trees\nblock: lecture-understanding-graphs-and-trees\nsuperBlock: full-stack-developer\nIntroduction to Understanding Graphs and Trees\nLearn about Understanding Graphs and Trees in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 255,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-graphs-and-trees\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f639eb7564aac31f66b4d4cb672db62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-how-to-work-with-classes-in-javascript\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding How to Work with Classes in JavaScript\nblock: lecture-understanding-how-to-work-with-classes-in-javascript\nsuperBlock: full-stack-developer\nIntroduction to Understanding How to Work with Classes in JavaScript\nIn these lecture videos, you will learn about working with classes in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 341,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-how-to-work-with-classes-in-javascript\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5e9017afce2f61ec56db72bba50cbd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding How to Work with Floats and Positioning in CSS\nblock: lecture-understanding-how-to-work-with-floats-and-positioning-in-css\nsuperBlock: full-stack-developer\nIntroduction to Understanding How to Work with Floats and Positioning in CSS\nIn these lecture videos, you will learn about how to work with floats and positioning in CSS.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 377,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 77,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4646588ff7a1681bec9891db01f05c50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-html-attributes\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding HTML Attributes\nblock: lecture-understanding-html-attributes\nsuperBlock: full-stack-developer\nIntroduction to Understanding HTML Attributes\nIn these lecture videos, you will learn more about HTML (HyperText Markup Language), a markup language for creating web pages. You will learn about HTML's role on the web, and what HTML attributes are.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 392,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-html-attributes\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 73,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb374e37b2628dab7df16f379175932e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-inheritance-and-polymorphism\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Inheritance and Polymorphism\nblock: lecture-understanding-inheritance-and-polymorphism\nsuperBlock: full-stack-developer\nIntroduction to Understanding Inheritance and Polymorphism\nLearn about Understanding Inheritance and Polymorphism in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 303,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-inheritance-and-polymorphism\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 55,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "15a99ae3a2789502e81fe9211f4b361c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-modules-imports-and-exports\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Modules, Imports, and Exports\nblock: lecture-understanding-modules-imports-and-exports\nsuperBlock: full-stack-developer\nIntroduction to Understanding Modules, Imports, and Exports\nIn these lecture videos, you will learn about modules, imports, and exports in JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 321,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-modules-imports-and-exports\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4c41eff880be6e5b85336db679b5b4e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-nuanced-semantic-elements\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Understanding Nuanced Semantic Elements\nblock: lecture-understanding-nuanced-semantic-elements\nsuperBlock: full-stack-developer\nIntroduction to the Understanding Nuanced Semantic Elements\nIn these lectures, you will learn when you should use certain semantic elements like the em element over the i element, description lists, and more.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 381,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-nuanced-semantic-elements\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 69,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c0ae18c01770f23ee2f615bcef668cec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-object-oriented-programming-and-encapsulation\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Object Oriented Programming and Encapsulation\nblock: lecture-understanding-object-oriented-programming-and-encapsulation\nsuperBlock: full-stack-developer\nIntroduction to Understanding Object Oriented Programming and Encapsulation\nLearn about Understanding Object Oriented Programming and Encapsulation in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 371,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-object-oriented-programming-and-encapsulation\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4d3f3ec04a47d0be6b88be48336e8d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-performance-in-web-applications\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Performance in Web Applications\nblock: lecture-understanding-performance-in-web-applications\nsuperBlock: full-stack-developer\nIntroduction to Understanding Performance in Web Applications\nLearn about Understanding Performance in Web Applications in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 315,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-performance-in-web-applications\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0056ecf94c9bb0e337e481e00f0371bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-recursion-and-the-call-stack\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding Recursion and the Call Stack\nblock: lecture-understanding-recursion-and-the-call-stack\nsuperBlock: full-stack-developer\nIntroduction to Understanding Recursion and the Call Stack\nIn these lecture videos, you will learn about recursion and the call stack.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 305,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-recursion-and-the-call-stack\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 57,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4d33ddb972bbb39cb1cefa8dfda671e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-command-line-and-working-with-bash\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding the Command Line and Working with Bash\nblock: lecture-understanding-the-command-line-and-working-with-bash\nsuperBlock: full-stack-developer\nIntroduction to Understanding the Command Line and Working with Bash\nLearn about Understanding the Command Line and Working with Bash in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 343,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-command-line-and-working-with-bash\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 60,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8590d3a458a08b2e552b836b96d3dd40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-different-types-of-testing\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding the Different Types of Testing\nblock: lecture-understanding-the-different-types-of-testing\nsuperBlock: full-stack-developer\nIntroduction to Understanding the Different Types of Testing\nLearn about Understanding the Different Types of Testing in these lectures.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 311,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-different-types-of-testing\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 52,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "36c3e0281647f4b8bf5820f1adac417f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-event-object-and-event-delegation\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Understanding the Event Object and Event Delegation\nblock: lecture-understanding-the-event-object-and-event-delegation\nsuperBlock: full-stack-developer\nIntroduction to Understanding the Event Object and Event Delegation\nIn these lecture videos, you will learn about the event object and event delegation.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 341,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-event-object-and-event-delegation\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 61,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "659b74ce9fd49a0adeaaeb19e64eca20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-html-boilerplate\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Understanding the HTML Boilerplate\nblock: lecture-understanding-the-html-boilerplate\nsuperBlock: full-stack-developer\nIntroduction to the Understanding the HTML Boilerplate\nIn these lectures, you will learn about the HTML boilerplate which is a ready-made template for your webpages.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 324,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-understanding-the-html-boilerplate\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 62,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "edaba79dbbc14fa8fa0a1daaf00e6d93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-user-centered-design\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to User-Centered Design\nblock: lecture-user-centered-design\nsuperBlock: full-stack-developer\nIntroduction to User-Centered Design\nIn these lecture videos, you will learn about user-centered design.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 231,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-user-centered-design\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "28a93bdc214d4d1deacf03ac14035883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-user-interface-design-fundamentals\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to User Interface Design Fundamentals\nblock: lecture-user-interface-design-fundamentals\nsuperBlock: full-stack-developer\nIntroduction to User Interface Design Fundamentals\nIn these lecture videos, you will learn about user interface design fundamentals.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 287,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-user-interface-design-fundamentals\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "76260c12375388744d827cf0056fb574",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-what-is-css\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to What Is CSS?\nblock: lecture-what-is-css\nsuperBlock: full-stack-developer\nIntroduction to What Is CSS?\nIn these lecture videos, you will learn what CSS is.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 191,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-what-is-css\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 42,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f0443e6412649d51d9080e0778044571",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-welcome-to-freecodecamp\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Welcome to freeCodeCamp\nblock: lecture-welcome-to-freecodecamp\nsuperBlock: full-stack-developer\nIntroduction to Welcome to freeCodeCamp\nWatch these videos to learn what freeCodeCamp is, and how millions of people have learned to code and gotten developer jobs using it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 306,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-welcome-to-freecodecamp\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 65,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64d74f2fd1ccb861e6b1572cbf4740a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-arrays\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Arrays\nblock: lecture-working-with-arrays\nsuperBlock: full-stack-developer\nIntroduction to Working with Arrays\nIn these lecture videos, you will learn about working with JavaScript arrays.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 238,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-arrays\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 44,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d11ba66d98647394852f8ef1c962894",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-attribute-selectors\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Attribute Selectors\nblock: lecture-working-with-attribute-selectors\nsuperBlock: full-stack-developer\nIntroduction to Working with Attribute Selectors\nIn these lecture videos, you will learn about working with attribute selectors.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 279,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-attribute-selectors\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 50,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3f1ddc281306a2b58cf8268a308fa564",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-arrays-variables-and-naming-practices\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Working with Arrays, Variables, and Naming Lectures\nblock: lecture-working-with-arrays-variables-and-naming-practices\nsuperBlock: full-stack-developer\nIntroduction to the Working with Arrays, Variables, and Naming Practices Lectures\nIn these lectures, you will learn more about working with arrays, variables, and naming practices.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 372,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-arrays-variables-and-naming-practices\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 73,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e8f448f21114cbb059f60146c0605371",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-audio-and-video\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Audio and Video\nblock: lecture-working-with-audio-and-video\nsuperBlock: full-stack-developer\nIntroduction to Working with Audio and Video\nIn these lecture videos, you will learn about working with audio and video using JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 280,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-audio-and-video\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 53,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79143ff62cac35baf96d3d84cedd91d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-audio-and-video-elements\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to the Working with Audio and Video Elements\nblock: lecture-working-with-audio-and-video-elements\nsuperBlock: full-stack-developer\nIntroduction to the Working with Audio and Video Elements\nIn these lectures, you will learn how to work with the audio and video elements.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 307,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-audio-and-video-elements\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 58,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7c40584f45afde11c699c010f94217c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-backgrounds-and-borders\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Backgrounds and Borders\nblock: lecture-working-with-backgrounds-and-borders\nsuperBlock: full-stack-developer\nIntroduction to Working with Backgrounds and Borders\nIn these lecture videos, you will learn about working with backgrounds and borders.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 295,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-backgrounds-and-borders\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 54,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "65109855bdb164dd5b5ae87f381374f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-code-editors-and-ides\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Code Editors and IDE's\nblock: lecture-working-with-code-editors-and-ides\nsuperBlock: full-stack-developer\nIntroduction to Working with Code Editors and IDE's\nIn these lecture videos, you will learn about working with code editors and IDE's.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 290,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-code-editors-and-ides\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 59,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6ddd5e74af1bb49778c7bb38267e9168",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-client-side-storage-and-crud-operations\\index.md",
    "source_type": "git_repo",
    "title": "index",
    "content": "title: Introduction to Working with Client-Side Storage and CRUD Operations\nblock: lecture-working-with-client-side-storage-and-crud-operations\nsuperBlock: full-stack-developer\nIntroduction to Working with Client-Side Storage and CRUD Operations\nIn these lecture videos, you will learn about client-side storage and CRUD operations with JavaScript.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 362,
      "relative_path": "git_repos\\freeCodeCamp\\client\\src\\pages\\learn\\full-stack-developer\\lecture-working-with-client-side-storage-and-crud-operations\\index.md",
      "source_type": "git_repo"
    },
    "token_count": 66,
    "chunk_index": 0,
    "total_chunks": 1
  }
]