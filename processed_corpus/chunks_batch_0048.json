[
  {
    "id": "912980858adf428797ce45ad897b8f48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf812bb8ecd4f9cf749b8f\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nCreate one more const variable called playersDropdownList and assign it the id of \"players\" using the getElementById method --hints--\nYou should use the document getElementById() method to get the #players element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)players\\1\\s*\\)/);\nYou should use const to declare the variable called playersDropdownList and assign it the #players element js\nassert match(code, /const\\s+playersDropdownList\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3474abbde5663470c41e2eafa0a0b532",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf812bb8ecd4f9cf749b8f\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nCreate one more const variable called playersDropdownList and assign it the id of \"players\" using the getElementById method --hints--\nYou should use the document getElementById() method to get the #players element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)players\\1\\s*\\)/);\nYou should use const to declare the variable called playersDropdownList and assign it the #players element js\nassert match(code, /const\\s+playersDropdownList\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)players\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6f1aa0d754fada447b3799450544e41e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf812bb8ecd4f9cf749b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f0f7ac50d9b6a9f2b8ccca6bf64f1a12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf83fdbb51d9fa54654ae6\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nNow it is time to build out the data structure that will hold all of the information for your football team Below the variables you just created, create a new const variable called myFavoriteFootballTeam and assign it an empty object --hints--\nYou should use const to declare the variable called myFavoriteFootballTeam and assign it an empty object js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
      "source_type": "git_repo"
    },
    "token_count": 109,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3d5442d68efee8f611ba93d49b3fce9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf83fdbb51d9fa54654ae6\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nNow it is time to build out the data structure that will hold all of the information for your football team Below the variables you just created, create a new const variable called myFavoriteFootballTeam and assign it an empty object --hints--\nYou should use const to declare the variable called myFavoriteFootballTeam and assign it an empty object js\nassertmatch(code, /const\\s+myFavoriteFootballTeam\\s*=\\s*{\\s*}\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
      "source_type": "git_repo"
    },
    "token_count": 745,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "af6cc19f656bda781a1085e759f67ad6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf83fdbb51d9fa54654ae6.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a4e9fddfa0476cf7e3033789a37e8338",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf8ec006a776ff5f6e3c68\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nInside the myFavoriteFootballTeam object, add a new property with a key named team and a string value of \"Argentina\" --hints--\nYour myFavoriteFootballTeam object should have a team property js\nassert property(myFavoriteFootballTeam, 'team');\nYour team property should be set to \"Argentina\" js\nassert equal(myFavoriteFootballTeam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
      "source_type": "git_repo"
    },
    "token_count": 111,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9edb91846e5b4bab6f2052e180171900",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf8ec006a776ff5f6e3c68\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nInside the myFavoriteFootballTeam object, add a new property with a key named team and a string value of \"Argentina\" --hints--\nYour myFavoriteFootballTeam object should have a team property js\nassert property(myFavoriteFootballTeam, 'team');\nYour team property should be set to \"Argentina\" js\nassert equal(myFavoriteFootballTeamteam, 'Argentina');\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
      "source_type": "git_repo"
    },
    "token_count": 729,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "837d0c91609dff75e0e0cc1160093bf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\n--fcc-editable-region--\nconst myFavoriteFootballTeam = {\n};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf8ec006a776ff5f6e3c68.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "92d5606f2bedfa78194306bead45f836",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf90d4696d8f00851873a4\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nBelow the team property, add four property key-value pairs A key named sport and a string value of \"Football\" A key named year and a number value of 1986 A key named isWorldCupWinner and a boolean value set to true A new key called headCoach with a value of an empty object --hints--\nYour myFavoriteFootballTeam object should have a sport property js\nassert property(myFavoriteFootballTeam, 'sport');\nYour sport property should be set to Football js\nassert equal(myFavoriteFootballTeam sport, 'Football');\nYour myFavoriteFootballTeam object should have a year property js\nassert property(myFavoriteFootballTeam, 'year');\nYour year property should be a number js\nassert isNumber(myFavoriteFootballTeam year);\nYour year property should be set to 1986 js\nassert equal(myFavoriteFootballTeam year, 1986);\nYour myFavoriteFootballTeam object should have an isWorldCupWinner property js\nassert property(myFavoriteFootballTeam, 'isWorldCupWinner');\nYour isWorldCupWinner property should be a boolean js\nassert isBoolean(myFavoriteFootballTeam isWorldCupWinner);\nYour isWorldCupWinner property should be set to true js\nassert equal(myFavoriteFootballTeam isWorldCupWinner, true);\nYour myFavoriteFootballTeam object should have a headCoach property js\nassert property(myFavoriteFootballTeam, 'headCoach');\nYour headCoach value should be an object js\nassert isObject(myFavoriteFootballTeam headCoach)\nYour headCoach value should be an empty object js\nassert equal(Object keys(myFavoriteFootballTeam headCoach)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8499,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "214fc841bb419792c346ebb92b1eb05d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "assert equal(myFavoriteFootballTeam year, 1986); Your myFavoriteFootballTeam object should have an isWorldCupWinner property js assert property(myFavoriteFootballTeam, 'isWorldCupWinner'); Your isWorldCupWinner property should be a boolean js assert isBoolean(myFavoriteFootballTeam isWorldCupWinner); Your isWorldCupWinner property should be set to true js assert equal(myFavoriteFootballTeam isWorldCupWinner, true); Your myFavoriteFootballTeam object should have a headCoach property js assert property(myFavoriteFootballTeam, 'headCoach'); Your headCoach value should be an object js assert isObject(myFavoriteFootballTeam headCoach) Your headCoach value should be an empty object js assert equal(Object keys(myFavoriteFootballTeam headCoach)length, 0);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8499,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
      "source_type": "git_repo"
    },
    "token_count": 776,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2544fe3eba19013f18b36af96084fc47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\n--fcc-editable-region--\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\n};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8499,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf90d4696d8f00851873a4.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "14d28b4d7c42476349c574ecd084d9db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf93472de77d01bf8474bf\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nInside the headCoach object, add a property with a key of coachName and a string value of \"Carlos Bilardo\" Below that property, add another key called matches with a number value of 7 --hints--\nYour headCoach object should have a coachName property js\nassert property(myFavoriteFootballTeam headCoach, 'coachName');\nYour coachName property should be set to \"Carlos Bilardo\" js\nassert equal(myFavoriteFootballTeam headCoach coachName, 'Carlos Bilardo');\nYour headCoach object should have a matches property js\nassert property(myFavoriteFootballTeam headCoach, 'matches');\nYour matches property should be a number js\nassert isNumber(myFavoriteFootballTeam headCoach matches);\nYour matches property should be set to 7 js\nassert equal(myFavoriteFootballTeam headCoach",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8829f4ad26004f7fa7d44cb17f766a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "key called matches with a number value of 7 --hints-- Your headCoach object should have a coachName property js assert property(myFavoriteFootballTeam headCoach, 'coachName'); Your coachName property should be set to \"Carlos Bilardo\" js assert equal(myFavoriteFootballTeam headCoach coachName, 'Carlos Bilardo'); Your headCoach object should have a matches property js assert property(myFavoriteFootballTeam headCoach, 'matches'); Your matches property should be a number js assert isNumber(myFavoriteFootballTeam headCoach matches); Your matches property should be set to 7 js assert equal(myFavoriteFootballTeam headCoachmatches, 7);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
      "source_type": "git_repo"
    },
    "token_count": 744,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "df372e925b6524e6b9517d00c940de4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\n--fcc-editable-region--\nheadCoach: {\n},\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf93472de77d01bf8474bf.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "35997137b8700b89620dd8ae1c63c0b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 67168a7243b6396cb69c1bdf\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nCall removeSpecialChars on the title, and description properties in your taskObj For the id property, only call it on the titleInput value part of the property value This will remove issues with broken task data With that you have completed the project --hints--\nYou should call removeSpecialChars on titleInput value when assigning the id js\nassert match(code, /\\s*id:\\s*`\\$\\{removeSpecialChars\\(titleInput\\ value\\)\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\}-\\$\\{Date\\ now\\(\\s*\\)\\}`\\s*/);\nYou should call removeSpecialChars on titleInput value when assigning the title js\nassert match(code, /\\s*title:\\s*removeSpecialChars\\(titleInput\\ value\\)\\s*/);\nYou should call removeSpecialChars on descriptionInput value when assigning the description js\nassert match(code, /\\s*description:\\s*removeSpecialChars\\(descriptionInput\\ value\\)\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "987e4e001433fe6a1595dac40fea8d60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "57bcc46f5cccc8697017bf3ff1e22243",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "4c59f4cc21db0e639363db1cf81b597a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage getItem(\"data\")) || [];\nlet currentTask = {};\nconst removeSpecialChars = (val) => {\nreturn val trim() replace(/[^A-Za-z0-9-\\s]/g, '')\n}\nconst addOrUpdateTask = () => {\nif( titleInput value trim()){\nalert(\"Please provide a title\");\nreturn;\n}\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\n--fcc-editable-region--\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\n--fcc-editable-region--\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\n(tasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "20023d11f79152f573e58a582a0a53b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "dataArrIndex = taskData findIndex((item) => item id === currentTask id); --fcc-editable-region-- const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; --fcc-editable-region-- if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { (tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>)\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\naddOrUpdateTaskBtn innerText = \"Add Task\";\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nif (taskData length) {\nupdateTaskContainer();\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "a5d26eb4d694978bb1beb00d3541b8ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "= currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { addOrUpdateTaskBtn innerText = \"Add Task\"; titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } if (taskData length) { updateTaskContainer(); } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInputvalue;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```\n--solutions--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "3e33f60b43978410bca2985a243e4ec4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "1e3298707ebd6da01b3c5be96d103833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "92a82b5342de7877e46de9ef17de30f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage getItem(\"data\")) || [];\nlet currentTask = {};\nconst removeSpecialChars = (val) => {\nreturn val trim() replace(/[^A-Za-z0-9-\\s]/g, '')\n}\nconst addOrUpdateTask = () => {\nif( titleInput value trim()){\nalert(\"Please provide a title\");\nreturn;\n}\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${removeSpecialChars(titleInput value) toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle:removeSpecialChars(titleInput value) ,\ndate: dateInput value,\ndescription: removeSpecialChars(descriptionInput value),\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\n(tasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "c59d62d0c88d2dce9765b2d6ac50f167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${removeSpecialChars(titleInput value) toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title:removeSpecialChars(titleInput value) , date: dateInput value, description: removeSpecialChars(descriptionInput value), }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { (tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>)\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\naddOrUpdateTaskBtn innerText = \"Add Task\";\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nif (taskData length) {\nupdateTaskContainer();\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "1a5833cbb1242f6bdb7a71666f7691b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "= currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { addOrUpdateTaskBtn innerText = \"Add Task\"; titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } if (taskData length) { updateTaskContainer(); } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInputvalue;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\67168a7243b6396cb69c1bdf.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "53742a22201281a842974afbbfaa70d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63d120a05ee93f38353b84c0\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nBelow the headCoach property, create a new property with a key named players with the value of an empty array --hints--\nYour myFavoriteFootballTeam object should have a players property js\nassert property(myFavoriteFootballTeam, 'players');\nYour players value should be an array js\nassert isArray(myFavoriteFootballTeam players)\nYour players array should be empty js\nassert deepEqual(myFavoriteFootballTeam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
      "source_type": "git_repo"
    },
    "token_count": 121,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ae393f738221bfc3c0e3db294a09f38a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63d120a05ee93f38353b84c0\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nBelow the headCoach property, create a new property with a key named players with the value of an empty array --hints--\nYour myFavoriteFootballTeam object should have a players property js\nassert property(myFavoriteFootballTeam, 'players');\nYour players value should be an array js\nassert isArray(myFavoriteFootballTeam players)\nYour players array should be empty js\nassert deepEqual(myFavoriteFootballTeamplayers, [])\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "48c06988f2b63b346b9534023bd90755",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\n--fcc-editable-region--\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d120a05ee93f38353b84c0.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d2891dd7c3b7d7fe129921ca9febdaaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63d1214a0ac7a9389793269b\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nInside that players array, create a new object with the following properties:\nmd\nname: \"Sergio Almirón\"\nposition: \"forward\"\nnumber: 1\nisCaptain: false\nnickname: null\nNOTE: The numbers for the team are organized alphabetically by last name This differs from conventional numbering where the numbers correspond with what is on the player's jerseys --hints--\nYour myFavoriteFootballTeam players array should have the value of an object js\nassert isObject(myFavoriteFootballTeam players[0])\nYour new object should have a name property js\nassert property(myFavoriteFootballTeam players[0], 'name');\nYour name property should be set to \"Sergio Almirón\" js\nassert equal(myFavoriteFootballTeam players[0] name, 'Sergio Almirón');\nYour new object should have a position property js\nassert property(myFavoriteFootballTeam players[0], 'position');\nYour position property should be set to \"forward\" js\nassert equal(myFavoriteFootballTeam players[0] position, 'forward');\nYour new object should have a number property js\nassert property(myFavoriteFootballTeam players[0], 'number');\nYour number property should be a number js\nassert isNumber(myFavoriteFootballTeam players[0] number);\nYour number property should be set to 1 js\nassert equal(myFavoriteFootballTeam players[0] number, 1);\nYour new object should have a isCaptain property js\nassert property(myFavoriteFootballTeam players[0], 'isCaptain');\nYour isCaptain property should be a boolean js\nassert isBoolean(myFavoriteFootballTeam players[0] isCaptain);\nYour isCaptain property should be set to false js\nassert equal(myFavoriteFootballTeam players[0] isCaptain, false);\nYour new object should have a nickname property js\nassert property(myFavoriteFootballTeam players[0], 'nickname');\nYour nickname property should be set to null js\nassert isNull(myFavoriteFootballTeam players[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8987,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8d7cac44c7f2fd29ef3e423b4b7e6c4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "property should be set to 1 js assert equal(myFavoriteFootballTeam players[0] number, 1); Your new object should have a isCaptain property js assert property(myFavoriteFootballTeam players[0], 'isCaptain'); Your isCaptain property should be a boolean js assert isBoolean(myFavoriteFootballTeam players[0] isCaptain); Your isCaptain property should be set to false js assert equal(myFavoriteFootballTeam players[0] isCaptain, false); Your new object should have a nickname property js assert property(myFavoriteFootballTeam players[0], 'nickname'); Your nickname property should be set to null js assert isNull(myFavoriteFootballTeam players[0]nickname);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8987,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c3e347016e23d762f294d916f9fe16b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document getElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n--fcc-editable-region--\n--fcc-editable-region--\n]\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8987,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d1214a0ac7a9389793269b.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "efcacb8b4d80c2c12830658bc13a5be3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63d128eaedcc773d2ded2128\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nBelow that object, create a new object with the following properties:\nmd\nname: \"Sergio Batista\"\nposition: \"midfielder\"\nnumber: 2\nisCaptain: false\nnickname: null\n--hints--\nYour myFavoriteFootballTeam players array should have two values js\n// Have to assert at least, because we pre-populate data in the next step assert isAtLeast(myFavoriteFootballTeam players length, 2);\nYour myFavoriteFootballTeam players array should have an object as the second value js\nassert isObject(myFavoriteFootballTeam players[1])\nYour new object should have a name property js\nassert property(myFavoriteFootballTeam players[1], 'name');\nYour name property should be set to \"Sergio Batista\" js\nassert equal(myFavoriteFootballTeam players[1] name, 'Sergio Batista');\nYour new object should have a position property js\nassert property(myFavoriteFootballTeam players[1], 'position');\nYour position property should be set to \"midfielder\" js\nassert equal(myFavoriteFootballTeam players[1] position, 'midfielder');\nYour new object should have a number property js\nassert property(myFavoriteFootballTeam players[1], 'number');\nYour number property should be a number js\nassert isNumber(myFavoriteFootballTeam players[1] number);\nYour number property should be set to 2 js\nassert equal(myFavoriteFootballTeam players[1] number, 2);\nYour new object should have a isCaptain property js\nassert property(myFavoriteFootballTeam players[1], 'isCaptain');\nYour isCaptain property should be a boolean js\nassert isBoolean(myFavoriteFootballTeam players[1] isCaptain);\nYour isCaptain property should be set to false js\nassert equal(myFavoriteFootballTeam players[1] isCaptain, false);\nYour new object should have a nickname property js\nassert property(myFavoriteFootballTeam players[1], 'nickname');\nYour nickname property should be set to null js\nassert isNull(myFavoriteFootballTeam players[1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "37a13ef0fce2112ee637760604551eae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "property should be set to 2 js assert equal(myFavoriteFootballTeam players[1] number, 2); Your new object should have a isCaptain property js assert property(myFavoriteFootballTeam players[1], 'isCaptain'); Your isCaptain property should be a boolean js assert isBoolean(myFavoriteFootballTeam players[1] isCaptain); Your isCaptain property should be set to false js assert equal(myFavoriteFootballTeam players[1] isCaptain, false); Your new object should have a nickname property js assert property(myFavoriteFootballTeam players[1], 'nickname'); Your nickname property should be set to null js assert isNull(myFavoriteFootballTeam players[1]nickname);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "863d329c861019eedea3f7716c06bb94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2b164e83979fd5018fc9c3d9bcadbbe9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n--fcc-editable-region--\n--fcc-editable-region--\n]\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d128eaedcc773d2ded2128.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "60c262ed6c50925af7181e1d62f3cce6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e02a333354343b595d64ca\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nThe next step is to access the key called sport from the myFavoriteFootballTeam object and assign it to a new const variable called sport Remember you can use dot notation for this --hints--\nYou should use const to declare a sport variable js\nassert match(code, /const\\s+sport\\s*=/);\nYou should assign the value of the sport key from the myFavoriteFootballTeam object to the sport variable js\nassert equal(sport, myFavoriteFootballTeam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "8da9d311ae813133f1d520b73cff8cdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "63e02a333354343b595d64ca title: Step 13 challengeType: 0 dashedName: step-13 --description-- The next step is to access the key called sport from the myFavoriteFootballTeam object and assign it to a new const variable called sport Remember you can use dot notation for this --hints-- You should use const to declare a sport variable js assert match(code, /const\\s+sport\\s*=/); You should assign the value of the sport key from the myFavoriteFootballTeam object to the sport variable js assert equal(sport, myFavoriteFootballTeamsport);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "399915718a941adde9b77de6ea93b33a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9c9b9e54c99f047184ea8590ba17d415",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e980a3a7002967c6178777df1b3752e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e02a333354343b595d64ca.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "864ee6ec5f727a7763afd972e932cb9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63d12b9c7aaee43de1ba265d\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nThe rest of the data for the myFavoriteFootballTeam players array has been filled out for you The next step is to ensure that you can't modify this object by adding or removing any properties We are going to use a method called Object freeze(obj) which will freeze this object and prevent any changes being made to it Use the Object freeze() method to freeze the myFavoriteFootballTeam object --hints--\nYou should use the Object freeze() method to freeze the myFavoriteFootballTeam object js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f11b97c2de31610936eb0b79e3a0dccc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "the myFavoriteFootballTeam players array has been filled out for you The next step is to ensure that you can't modify this object by adding or removing any properties We are going to use a method called Object freeze(obj) which will freeze this object and prevent any changes being made to it Use the Object freeze() method to freeze the myFavoriteFootballTeam object --hints-- You should use the Object freeze() method to freeze the myFavoriteFootballTeam object js assertisFrozen(myFavoriteFootballTeam);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
      "source_type": "git_repo"
    },
    "token_count": 712,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "33c1082a3eba0185b60f716bc59500ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "64e09ae833aab1ed26b14b6da9108d97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63d12b9c7aaee43de1ba265d.md",
      "source_type": "git_repo"
    },
    "token_count": 966,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "05dc3abf5b96f5c973c7802adf9b55bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e0334b7a24bd3c96aca4de\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nBelow the sport variable, access the key called team from the myFavoriteFootballTeam object and assign it to a new const variable called team --hints--\nYou should use const to declare a team variable js\nassert match(code, /const\\s+team\\s*=/);\nYou should assign the value of the team key from the myFavoriteFootballTeam object to the team variable js\nassert equal(team, myFavoriteFootballTeam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "67604a66251650d3d5550c6e6735f962",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e0334b7a24bd3c96aca4de\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nBelow the sport variable, access the key called team from the myFavoriteFootballTeam object and assign it to a new const variable called team --hints--\nYou should use const to declare a team variable js\nassert match(code, /const\\s+team\\s*=/);\nYou should assign the value of the team key from the myFavoriteFootballTeam object to the team variable js\nassert equal(team, myFavoriteFootballTeamteam);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f6f3c1eafd93ef86cc710cba91eb72e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "92430b4c9d3230fb88467d4901f7a346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "db0cc1b8637db7358f21b3c780fbda65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\n--fcc-editable-region--\nconst sport = myFavoriteFootballTeam sport;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e0334b7a24bd3c96aca4de.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "506331b69ce46c235a0042244fe8ebf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e036373fc9173d284e165a\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nIn the last two steps, you have been accessing properties from the myFavoriteFootballTeam object using dot notation and assigning them to new const variables But in JavaScript, there is an easier way to accomplish the same goal The object destructuring syntax allows you to unpack values from arrays and objects:\n```js\nconst developerObj = {\nname: \"Jessica Wilkins\",\nisDeveloper: true\n};\n// Object destructuring\nconst { name, isDeveloper } = developerObj;\n```\nRewrite the two lines of code below using the new destructuring syntax Your answer should be one line of code --hints--\nUse object destructuring to access the sport and team values ```js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
      "source_type": "git_repo"
    },
    "token_count": 175,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d90e7595bc7c4cf08c639b0be40e3191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "an easier way to accomplish the same goal The object destructuring syntax allows you to unpack values from arrays and objects: ```js const developerObj = { name: \"Jessica Wilkins\", isDeveloper: true }; // Object destructuring const { name, isDeveloper } = developerObj; ``` Rewrite the two lines of code below using the new destructuring syntax Your answer should be one line of code --hints-- Use object destructuring to access the sport and team values ```js assertmatch(code, /const\\s{\\s(sport\\s,\\steam)|(team\\s,\\ssport)\\s}\\s=\\smyFavoriteFootballTeam\\s/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
      "source_type": "git_repo"
    },
    "token_count": 742,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "697d96748663d3d622a1054ae4252bef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "2f275fffa76543e87eaf88a21d3020bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "94ff82e601dba727822675768c9fa7ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\n--fcc-editable-region--\nconst sport = myFavoriteFootballTeam sport;\nconst team = myFavoriteFootballTeam team;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e036373fc9173d284e165a.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "946d5c73a0f392035df28a78a7c3ae91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e03b86008bbb3e1c3de846\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nNext, add the year and players to your destructuring assignment --hints--\nYou should add the year and players values to your destructuring assignment js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
      "source_type": "git_repo"
    },
    "token_count": 72,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "95851a479868f90308cbfbc7bb1c6cbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e03b86008bbb3e1c3de846\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nNext, add the year and players to your destructuring assignment --hints--\nYou should add the year and players values to your destructuring assignment js\nassertmatch(code, /const\\s*{\\s*((sport\\s*,\\s*team\\s*,\\s*year\\s*,\\s*players)|(team\\s*,\\s*sport\\s*,\\s*year\\s*,\\s*players)|(year\\s*,\\s*sport\\s*,\\s*team\\s*,\\s*players)|(sport\\s*,\\s*year\\s*,\\s*team\\s*,\\s*players)|(team\\s*,\\s*year\\s*,\\s*sport\\s*,\\s*players)|(year\\s*,\\s*team\\s*,\\s*sport\\s*,\\s*players)|(year\\s*,\\s*team\\s*,\\s*players\\s*,\\s*sport)|(team\\s*,\\s*year\\s*,\\s*players\\s*,\\s*sport)|(players\\s*,\\s*year\\s*,\\s*team\\s*,\\s*sport)|(year\\s*,\\s*players\\s*,\\s*team\\s*,\\s*sport)|(team\\s*,\\s*players\\s*,\\s*year\\s*,\\s*sport)|(players\\s*,\\s*team\\s*,\\s*year\\s*,\\s*sport)|(players\\s*,\\s*sport\\s*,\\s*year\\s*,\\s*team)|(sport\\s*,\\s*players\\s*,\\s*year\\s*,\\s*team)|(year\\s*,\\s*players\\s*,\\s*sport\\s*,\\s*team)|(players\\s*,\\s*year\\s*,\\s*sport\\s*,\\s*team)|(sport\\s*,\\s*year\\s*,\\s*players\\s*,\\s*team)|(year\\s*,\\s*sport\\s*,\\s*players\\s*,\\s*team)|(team\\s*,\\s*sport\\s*,\\s*players\\s*,\\s*year)|(sport\\s*,\\s*team\\s*,\\s*players\\s*,\\s*year)|(players\\s*,\\s*team\\s*,\\s*sport\\s*,\\s*year)|(team\\s*,\\s*players\\s*,\\s*sport\\s*,\\s*year)|(sport\\s*,\\s*players\\s*,\\s*team\\s*,\\s*year)|(players\\s*,\\s*sport\\s*,\\s*team\\s*,\\s*year))\\s*}\\s*=\\s*myFavoriteFootballTeam\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
      "source_type": "git_repo"
    },
    "token_count": 1191,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f324fbd6e8ab610137e360c3718d0c32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "876bcd62af4ff59213e45373b8612309",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e577ecfb4e2635332995bfa7b3a617b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\n--fcc-editable-region--\nconst { sport, team } = myFavoriteFootballTeam;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e03b86008bbb3e1c3de846.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "6fe4e9f5bc029b4ab81fe2ebbcf76026",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e050bf935ac341b88326d6\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nNow you need to start displaying the team's information on the screen Below your destructuring assignments, assign the sport variable to typeOfSport textContent Once you complete that task, you should see the result in the preview window --hints--\nYou should assign the sport variable to typeOfSport textContent ```js\nassert match(code, /typeOfSport",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
      "source_type": "git_repo"
    },
    "token_count": 109,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "a2c511c91deea07544d6b967ff70c398",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e050bf935ac341b88326d6\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nNow you need to start displaying the team's information on the screen Below your destructuring assignments, assign the sport variable to typeOfSport textContent Once you complete that task, you should see the result in the preview window --hints--\nYou should assign the sport variable to typeOfSport textContent ```js\nassert match(code, /typeOfSporttextContent\\s=\\ssport\\s*/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
      "source_type": "git_repo"
    },
    "token_count": 731,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7458616068e603ed41af22bfe91abd92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5609e5a11c1d4ecfc8be1185b39d7333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "1309cd7bfd030643fe550d02bbffe69f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e050bf935ac341b88326d6.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "258a0faa707fa2497dbaffe4aa769ef4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e042661ad2663f0d468740\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nNow you need to access the coachName value from the myFavoriteFootballTeam headCoach object using the destructuring syntax --hints--\nUse object destructuring to access the coachName value ```js\nassert match(code, /const\\s{\\s(coachName\\s}\\s=\\smyFavoriteFootballTeam headCoach|headCoach\\s:\\s{\\scoachName\\s}\\s}\\s=\\smyFavoriteFootballTeam)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4f7a40b4c50607ec95359ae3fb29ee7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e042661ad2663f0d468740\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nNow you need to access the coachName value from the myFavoriteFootballTeam headCoach object using the destructuring syntax --hints--\nUse object destructuring to access the coachName value ```js\nassert match(code, /const\\s{\\s(coachName\\s}\\s=\\smyFavoriteFootballTeam headCoach|headCoach\\s:\\s{\\scoachName\\s}\\s}\\s=\\smyFavoriteFootballTeam)\\s*;/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
      "source_type": "git_repo"
    },
    "token_count": 742,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "47c3c47f18a886e98f8daf78be0c70f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f0cef05a156f72bf59277c0e11f00bfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a00ae67e963fa655475d96502024cc8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e042661ad2663f0d468740.md",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ef3f2986041c5dcff26939f99a91fe12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e05557016dfd45ea49152c\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nNext, assign the team variable to teamName textContent --hints--\nYou should assign the team variable to teamName textContent ```js\nassert match(code, /teamName",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
      "source_type": "git_repo"
    },
    "token_count": 73,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ca263740c51348b0a39e726b6782f788",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e05557016dfd45ea49152c\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nNext, assign the team variable to teamName textContent --hints--\nYou should assign the team variable to teamName textContent ```js\nassert match(code, /teamNametextContent\\s=\\steam\\s*/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "fa920a3836b18fa5ddb8eeef25b2b2bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "87577723ed3d0c1a3e875ea727b60343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "3044cf42ac76503e67d8704e541cca87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10442,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05557016dfd45ea49152c.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "6dfe73d5109c16668d8c298244152aa3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e05c00b615bb46ac87273a\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nAssign the year variable to worldCupYear textContent Below that, assign the coachName variable to headCoach textContent You should now see all of that information displayed on the screen below Team stats --hints--\nYou should assign the year variable to worldCupYear textContent ```js\nassert match(code, /worldCupYear textContent\\s=\\syear\\s*/)\n```\nYou should assign the coachName variable to headCoach textContent ```js\nassert match(code, /headCoach",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "10044262152c14fa3621e74b7d223b88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e05c00b615bb46ac87273a\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nAssign the year variable to worldCupYear textContent Below that, assign the coachName variable to headCoach textContent You should now see all of that information displayed on the screen below Team stats --hints--\nYou should assign the year variable to worldCupYear textContent ```js\nassert match(code, /worldCupYear textContent\\s=\\syear\\s*/)\n```\nYou should assign the coachName variable to headCoach textContent ```js\nassert match(code, /headCoachtextContent\\s=\\scoachName\\s*/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
      "source_type": "git_repo"
    },
    "token_count": 762,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "80700387ac7775d3976b9c5b2189a5cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e55c6f64867c9e69ad32d2a61ce11faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "3efcf46505edd0216fcb6151e6fbfeb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e05c00b615bb46ac87273a.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e256fa8cee3adddefc02584706862659",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e060df21bca347b2d2b374\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nNow you will start building out the function that will show player cards based on the selections made by the user in the Filter Teammates dropdown menu Start by creating an empty arrow function called setPlayerCards You do not need to add a parameter because that will be taken care of in the next step --hints--\nYou should use const to declare a setPlayerCards variable js\nassert match(code, /const\\s+setPlayerCards\\s*=/);\nYour setPlayerCards variable should be a function js\nassert isFunction(setPlayerCards);\nYour setPlayerCards function should use arrow syntax js\nassert match(code, /const\\s+setPlayerCards\\s*=\\s*\\( *\\)\\s*=>/);\nYour setPlayerCards function should not take a parameter js\nassert match(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*\\)\\s*=>/);\nYour setPlayerCards function should be empty js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "69c47295e2deb4637b135e2c0bce0b80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "setPlayerCards You do not need to add a parameter because that will be taken care of in the next step --hints-- You should use const to declare a setPlayerCards variable js assert match(code, /const\\s+setPlayerCards\\s*=/); Your setPlayerCards variable should be a function js assert isFunction(setPlayerCards); Your setPlayerCards function should use arrow syntax js assert match(code, /const\\s+setPlayerCards\\s*=\\s*\\( *\\)\\s*=>/); Your setPlayerCards function should not take a parameter js assert match(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*\\)\\s*=>/); Your setPlayerCards function should be empty js assertmatch(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
      "source_type": "git_repo"
    },
    "token_count": 792,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "95b8dc3db2895a3e126c619bcf483a5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "62bcfc545ebeb94ce41dc756a039288a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e765c72843266fa760c794dab3aed748",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e060df21bca347b2d2b374.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "37c14210dbe73e959d93afcdf302802b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e949b8327aa2aca2ca8eac\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nThe next step is to create a new array that will be responsible for adding the player card information to the page Inside the setPlayerCards function, start by adding the map method to arr that will take in an empty callback function Then, use the addition assignment += operator to assign the new array to playerCards innerHTML Remember that the innerHTML property gets, or in this case, sets the HTML markup for the playerCards element --hints--\nYou should call the map() method on your arr parameter js\nassert match(setPlayerCards toString(), /arr\\ map\\( *\\)/);\nYour map() method should take an empty callback function js\nassert match(code, /arr\\ map\\(\\s*(\\(\\s*\\)\\s*=>|function\\s*\\(\\s*\\))\\s*\\{\\s*\\}\\s*\\)/);\nYou should use the += operator on playerCards innerHTML js\nassert match(setPlayerCards toString(), /playerCards\\ innerHTML\\s*\\+=/);\nYou should assign arr map() to the playerCards innerHTML using the += operator js\nassert match(code, /playerCards\\ innerHTML\\s*\\+=\\s*arr\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c3695fa8b2e21a4d20718a3e66bc44cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "in this case, sets the HTML markup for the playerCards element --hints-- You should call the map() method on your arr parameter js assert match(setPlayerCards toString(), /arr\\ map\\( *\\)/); Your map() method should take an empty callback function js assert match(code, /arr\\ map\\(\\s*(\\(\\s*\\)\\s*=>|function\\s*\\(\\s*\\))\\s*\\{\\s*\\}\\s*\\)/); You should use the += operator on playerCards innerHTML js assert match(setPlayerCards toString(), /playerCards\\ innerHTML\\s*\\+=/); You should assign arr map() to the playerCards innerHTML using the += operator js assert match(code, /playerCards\\ innerHTML\\s*\\+=\\s*arr\\map\\(\\s*(\\(\\s*\\)\\s*=>|function\\s*\\(\\s*\\))\\s*\\{\\s*\\}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
      "source_type": "git_repo"
    },
    "token_count": 803,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "beb22777f2569a52825245bdcb75b250",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "4695fd74bd79b7a155b8b50fbf06fb39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f71eca68197d20d0f00dde7318c8fdca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e949b8327aa2aca2ca8eac.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a571edd045e4e978dbfa226de6b33383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e062d6090ebb486a4eda3a\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nFunction parameters can be initialized with default values If a function is called without an argument, then the default value will be used:\n```js\nconst greeting = (name = \"Anonymous\") => {\nreturn \"Hello \" + name;\n}\nconsole log(greeting(\"John\")); // Hello John\nconsole log(greeting()); // Hello Anonymous\n```\nAdd a new parameter to your setPlayerCards function called arr and assign it a default value of players Remember that you destructured the players variable from the myFavoriteFootballTeam object on line 175 --hints--\nYour setPlayerCards function should take an arr parameter js\nassert match(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*arr/);\nYour arr parameter should have a default value of players js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c56f2cdd6daa73fa2a8efc94172d6ab8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "=> { return \"Hello \" + name; } console log(greeting(\"John\")); // Hello John console log(greeting()); // Hello Anonymous ``` Add a new parameter to your setPlayerCards function called arr and assign it a default value of players Remember that you destructured the players variable from the myFavoriteFootballTeam object on line 175 --hints-- Your setPlayerCards function should take an arr parameter js assert match(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*arr/); Your arr parameter should have a default value of players js assertmatch(code, /const\\s+setPlayerCards\\s*=\\s*\\(\\s*arr\\s*=\\s*players\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
      "source_type": "git_repo"
    },
    "token_count": 758,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "06f5ce16e8855441be792bb3e937a40b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "427aa754030d3d34aa345706d3e6bc99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7290edfb30cfedd01854d74c9647c63d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\n--fcc-editable-region--\nconst setPlayerCards = () => {};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e062d6090ebb486a4eda3a.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "46973f96788c77ac026376310abf4ad4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e94dae6dcedbad73f2f6ee\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\narr contains a series of objects that each contains a name, position, number, isCaptain and nickname property In order to access each of those properties inside the callback function, you will need to use object destructuring to unpack them into variables Here is an example:\n```js\nfunction myExampleFunction({ name, age, job, city }) {\n}\n```\nInside the parameter list in the callback function for the map method, unpack all 5 object properties from objects in arr using object destructuring --hints--\nYou should unpack all 5 object properties from objects in arr using object destructuring ```js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "68f31494400170001141f5146e51eac6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "each of those properties inside the callback function, you will need to use object destructuring to unpack them into variables Here is an example: ```js function myExampleFunction({ name, age, job, city }) { } ``` Inside the parameter list in the callback function for the map method, unpack all 5 object properties from objects in arr using object destructuring --hints-- You should unpack all 5 object properties from objects in arr using object destructuring ```js assertmatch(code, /{\\s((name|position|number|isCaptain|nickname)\\s,\\s(name|position|number|isCaptain|nickname)\\s,\\s(name|position|number|isCaptain|nickname)\\s,\\s(name|position|number|isCaptain|nickname)\\s,\\s(name|position|number|isCaptain|nickname))\\s}\\s*/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
      "source_type": "git_repo"
    },
    "token_count": 788,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4ef5c4beee1c87690818a84196a8d80b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b44df17a00aa68df0a82d25f9a5e3989",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "9ea56da17bef0af360df69e8e99b2fe8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(() => {\n})\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e94dae6dcedbad73f2f6ee.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c4e9b5dd2378dcb94c0b67b7ece92d65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e954321b0a77ae4f6d9650\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nInside the body of the callback function, you will need to return a template literal `` which will contain the HTML content for the player cards Inside the template literals, add an empty div with a class of \"player-card\" --hints--\nThe map callback should return a template literal that contains an empty div with a class of \"player-card\" ```js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
      "source_type": "git_repo"
    },
    "token_count": 114,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "05af68b79a6e60919d7cf16ce49438cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e954321b0a77ae4f6d9650\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nInside the body of the callback function, you will need to return a template literal `` which will contain the HTML content for the player cards Inside the template literals, add an empty div with a class of \"player-card\" --hints--\nThe map callback should return a template literal that contains an empty div with a class of \"player-card\" ```js\nassertmatch(code, /return\\s\\s*<div\\s+class=(\"|')\\s*player-card\\s*\\1\\s*>\\s*<\\/div>\\s*\\s/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
      "source_type": "git_repo"
    },
    "token_count": 765,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0d0e71025e3e4e1fc59fe259380449c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e6a547b46ecc64b7a1a285868b2ed20e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5839aade7f55d33e3d4c3c6c7e926883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e954321b0a77ae4f6d9650.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fb41ec7520ca09b1b5f423734b746574",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e95a45dce95baf41dd4f78\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nInside the div, add an h2 element which contains the name parameter Since you are working with template literals, you will need to use an embedded expression for the name parameter:\njs\n${expression goes here}\n--hints--\nYou should add an h2 element with the name parameter js\nassert match(code, /\\s*<h2\\s*>\\s*\\${\\s*name\\s*}\\s*<\\/h2>\\s*/)\nYour h2 should be nested in your div js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5284bedbbb5f52f9c1e7f6149cddac7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e95a45dce95baf41dd4f78\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nInside the div, add an h2 element which contains the name parameter Since you are working with template literals, you will need to use an embedded expression for the name parameter:\njs\n${expression goes here}\n--hints--\nYou should add an h2 element with the name parameter js\nassert match(code, /\\s*<h2\\s*>\\s*\\${\\s*name\\s*}\\s*<\\/h2>\\s*/)\nYour h2 should be nested in your div js\nassertmatch(code, /`\\s*<div\\s+class\\s*=\\s*\"\\s*player-card\\s*\"\\s*>\\s*<h2\\s*>\\s*\\${\\s*name\\s*}\\s*<\\/h2>\\s*<\\/div>\\s*`\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
      "source_type": "git_repo"
    },
    "token_count": 818,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6eb782dfaa60879e2dbaee2a9b0d738f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b7c0f7da43b6b677dd2cc68126360ed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2716aeed9bcd493b6dd16bb20b1109b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn `\n</div>\n`;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11110,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95a45dce95baf41dd4f78.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "747f081486be6eb0fb1f7837d06921e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e95e39860dc5b01ebe9be0\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nThe next step would be to display the word (Captain) next to the player if they are listed as a captain for the team Before the ${name} expression, add a new embedded expression Inside that expression, use a ternary operator to check if isCaptain is true If so, return \"(Captain)\" otherwise return an empty string --hints--\nYou should use a ternary operator to check if isCaptain is true and return \"(Captain)\" or return an empty string js\nassert match(code, /\\s*<h2\\s*>\\s*\\$\\{isCaptain(\\s*===\\s*true) \\s*\\ \\s*('|\"|`)\\(Captain\\)\\2\\s*:\\s*('|\"|`)\\3\\}\\s*\\${\\s*name\\s*}\\s*<\\/h2>\\s*/)\nYou should give a space between \"(Captain)\" and name js\nplayerCards innerHTML = '';\nsetPlayerCards([{name: \"Diego Maradona\", isCaptain: true}])\nassert equal(document querySelector(\" player-card h2\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "a7474978647a9ec7af31ebd05e6dbb8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "new embedded expression Inside that expression, use a ternary operator to check if isCaptain is true If so, return \"(Captain)\" otherwise return an empty string --hints-- You should use a ternary operator to check if isCaptain is true and return \"(Captain)\" or return an empty string js assert match(code, /\\s*<h2\\s*>\\s*\\$\\{isCaptain(\\s*===\\s*true) \\s*\\ \\s*('|\"|`)\\(Captain\\)\\2\\s*:\\s*('|\"|`)\\3\\}\\s*\\${\\s*name\\s*}\\s*<\\/h2>\\s*/) You should give a space between \"(Captain)\" and name js playerCards innerHTML = ''; setPlayerCards([{name: \"Diego Maradona\", isCaptain: true}]) assert equal(document querySelector(\" player-card h2\")innerText, '(Captain) Diego Maradona')\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
      "source_type": "git_repo"
    },
    "token_count": 803,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "87177e94c9cf5ce1063871ac7baa370b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b7e9cd2f066fb12febacef592ab32ebd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c9416a68d1ae84f91399dff9b7787eeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${name}</h2>\n</div>;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e95e39860dc5b01ebe9be0.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ced657bb3f873844a345935725dca66c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e9667c881b61b1e338d276\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nBelow the h2 element, add a paragraph element with the text Position: and an embedded expression that contains the position parameter --hints--\nYou should add a new paragraph element with the text Position: followed by the position variable js\nassert match(code, /\\s*<p\\s*>\\s*Position:\\s*\\${\\s*position\\s*}\\s*<\\/p>\\s*/)\nYour new p element should come after the h2 element js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
      "source_type": "git_repo"
    },
    "token_count": 134,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "0e9dd5d121796bce278f3c70e6386a12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e9667c881b61b1e338d276\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nBelow the h2 element, add a paragraph element with the text Position: and an embedded expression that contains the position parameter --hints--\nYou should add a new paragraph element with the text Position: followed by the position variable js\nassert match(code, /\\s*<p\\s*>\\s*Position:\\s*\\${\\s*position\\s*}\\s*<\\/p>\\s*/)\nYour new p element should come after the h2 element js\nassertmatch(code, /<\\/h2>\\s*<p\\s*>\\s*Position:\\s*\\${\\s*position\\s*}\\s*<\\/p>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
      "source_type": "git_repo"
    },
    "token_count": 783,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "8c1df55c13ec3ea2b63f297e8d8d8c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8839d221a9cab7e34131e48393ce13df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "741a3874759cf93296beb4c59363b7a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn `\n${isCaptain \"(Captain)\" : \"\"} ${name}\n</div>\n`;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9667c881b61b1e338d276.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "823706c6cb4e5542d40ee5f2739c54e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e96938d2a347b2734a1587\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nBelow the paragraph element, add another paragraph element with the text Number: and an embedded expression that contains the number parameter --hints--\nYou should add a new paragraph element with the text Number: followed by the number variable js\nassert match(code, /\\s*<p\\s*>\\s*Number:\\s*\\${\\s*number\\s*}\\s*<\\/p>\\s*/)\nYour new p element should come after your existing p element js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "7fdfffc5c4e635df21d806f30dc9b844",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e96938d2a347b2734a1587\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nBelow the paragraph element, add another paragraph element with the text Number: and an embedded expression that contains the number parameter --hints--\nYou should add a new paragraph element with the text Number: followed by the number variable js\nassert match(code, /\\s*<p\\s*>\\s*Number:\\s*\\${\\s*number\\s*}\\s*<\\/p>\\s*/)\nYour new p element should come after your existing p element js\nassertmatch(code, /<\\/h2>\\s*<p\\s*>\\s*Position:\\s*\\${\\s*position\\s*}\\s*<\\/p>\\s*<p\\s*>\\s*Number:\\s*\\${\\s*number\\s*}\\s*<\\/p>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1e0d0af4ed4c2abd86e39c06abd54f33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "50a5e19c93d23a58a11edc251de96160",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8391807c9398006b1fc6b6c699677749",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n</div>;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96938d2a347b2734a1587.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "7920ad3b9a3cc5a6dbd621b93b01eb62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e96eb94c97b6b31ee50f63\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nBelow your existing paragraph elements, add another paragraph element with the text Nickname: --hints--\nYou should add a new paragraph element with the text Nickname: js\nassert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*<\\/p>\\s*/)\nYour new p element should come after the h2 element js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
      "source_type": "git_repo"
    },
    "token_count": 113,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3fa9ae3f056387e1172f1cb9552a0c45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e96eb94c97b6b31ee50f63\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nBelow your existing paragraph elements, add another paragraph element with the text Nickname: --hints--\nYou should add a new paragraph element with the text Nickname: js\nassert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*<\\/p>\\s*/)\nYour new p element should come after the h2 element js\nassertmatch(code, /<\\/h2>\\s*<p\\s*>\\s*Position:\\s*\\${\\s*position\\s*}\\s*<\\/p>\\s*<p\\s*>\\s*Number:\\s*\\${\\s*number\\s*}\\s*<\\/p>\\s*<p\\s*>\\s*Nickname:\\s*<\\/p>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
      "source_type": "git_repo"
    },
    "token_count": 804,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ea0e78916fbefcff6860018be8c6211b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "69ced8cf60fc05e9663376462f46b75e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0e9efe8cf15155a54a7a7add6b12cd78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n</div>;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e96eb94c97b6b31ee50f63.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "56d4ade8da12cc3e073d182985ffc96d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e9737f686c76b4078a60f4\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nThe map() method will return a new array of player-card items separated by commas To remove the commas between each player-card so it does not show up on screen, chain the join() method to the map() method Pass an empty string as the argument for the join() method --hints--\nYou should chain the join() method to the map() method js\nassert match(code, /arr\\s*\\ map\\( *\\)\\s*\\ join\\(/s);\nYou should pass an empty string to the join() method js\nassert match(code, /arr\\s*\\ map\\( *\\)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "17983ad0858aa324d9efea23e3819f61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "new array of player-card items separated by commas To remove the commas between each player-card so it does not show up on screen, chain the join() method to the map() method Pass an empty string as the argument for the join() method --hints-- You should chain the join() method to the map() method js assert match(code, /arr\\s*\\ map\\( *\\)\\s*\\ join\\(/s); You should pass an empty string to the join() method js assert match(code, /arr\\s*\\ map\\( *\\)\\s*\\join\\(\\s*('|\"|`)\\1\\s*\\)/s);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "71ffd989ede336583763186091143043",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "219cb62b8717a6e4b49d2f39b484ce40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "eda0afa23779e24f6e34ec04b4c4fcb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div>;\n}\n)\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9737f686c76b4078a60f4.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9693705223c8f4e08a3c7d16a1c25cbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63e9718d7d490bb3940d5a0a\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nNext to the Nickname: text, add an embedded expression that will show the player's nickname if they have one Use a ternary operator to check if nickname is not null If the player has a nickname, display nickname otherwise display \"N/A\" --hints--\nYou should use a ternary operator to check if nickname is truthy js\nassert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\ /)\nIf your ternary is truthy, it should display the player's nickname js\nassert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\ \\s*nickname\\s*:/)\nIf your ternary is falsy, it should display the string \"N/A\" js\nassert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "47fa50bedcca8ba9beeadf74444a991b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "to check if nickname is not null If the player has a nickname, display nickname otherwise display \"N/A\" --hints-- You should use a ternary operator to check if nickname is truthy js assert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\ /) If your ternary is truthy, it should display the player's nickname js assert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\ \\s*nickname\\s*:/) If your ternary is falsy, it should display the string \"N/A\" js assert match(code, /\\s*<p\\s*>\\s*Nickname:\\s*\\$\\{\\s*nickname\\s*( : ==\\s*null) \\s*\\\\s*nickname\\s*:\\s*('|\"|`)\\N\\/A\\1\\s*\\}\\s*<\\/p>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 830,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "18a50d5e95f254869d1e53649de8e40a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "24e3899da00a8ee32a4758340d2d9b91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f2888c629178527f63ade7b63e5f12ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\n--fcc-editable-region--\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: </p>\n</div>;\n}\n);\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63e9718d7d490bb3940d5a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "237a36dc0dd3aca3e1f01f9eeb372764",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f28972973504e7bb58b0b3\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nThe next step is to create a function that will detect when a user makes a selection from the playersDropdownList Use the addEventListener() method on playersDropdownList Inside the event listener, pass in a \"change\" event type and an empty callback function --hints--\nYou should call the addEventListener() method on the playersDropdownList variable js\nassert match(code, /playersDropdownList\\ addEventListener\\(/);\nYour event listener should listen for the \"change\" event js\nassert match(code, /playersDropdownList\\ addEventListener\\(\\s*('|\"|`)change\\1/);\nYour event listener should have an empty callback function js\nassert match(code, /playersDropdownList\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4f8a6cd0263898375a1e428c30150e1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "that will detect when a user makes a selection from the playersDropdownList Use the addEventListener() method on playersDropdownList Inside the event listener, pass in a \"change\" event type and an empty callback function --hints-- You should call the addEventListener() method on the playersDropdownList variable js assert match(code, /playersDropdownList\\ addEventListener\\(/); Your event listener should listen for the \"change\" event js assert match(code, /playersDropdownList\\ addEventListener\\(\\s*('|\"|`)change\\1/); Your event listener should have an empty callback function js assert match(code, /playersDropdownList\\addEventListener\\(\\s*('|\"|`)change\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "514e36abb203be448b56a92be9d0464f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "47f89161680e7f051a78ad399ba04b90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "9931511f5174e2373d1d54f53f865e0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28972973504e7bb58b0b3.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "674b39fd031a0be76e22fc5a0db1c736",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f28ef082d771e8bf71f94a\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nFor the callback function, pass in e as a parameter e represents an object which contains the information for that event --hints--\nYou should pass in e as a parameter to your callback function js\nassert match(code, /playersDropdownList\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
      "source_type": "git_repo"
    },
    "token_count": 89,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "296e3dde4c3ceb485b9838681be6bd31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f28ef082d771e8bf71f94a\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nFor the callback function, pass in e as a parameter e represents an object which contains the information for that event --hints--\nYou should pass in e as a parameter to your callback function js\nassert match(code, /playersDropdownList\\addEventListener\\(\\s*('|\"|`)change\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{\\s*\\}\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "bb5846fec349873fb57630a1d0a529c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6e85707af3812bd4fa998bba1b79e882",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4ed64c3bed5245ee3ab16a80cff571e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\n--fcc-editable-region--\nplayersDropdownList addEventListener(\"change\", () => {\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f28ef082d771e8bf71f94a.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "40f824a69b3c61418993d7d12c9039cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f293c804d6f9e9a83ca4c5\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nInside the callback function, add a console log with the value of e target value Open the console, and make a selection from the teammates dropdown menu You should see the value of that selection in the console e target value represents the value property from the playersDropdownList element In future steps, you will use this value to show player cards based on the position they play --hints--\nYou should add a console log with the value of e target value js\nassert match(code, /console\\ log\\s*\\(\\s*e\\ target\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
      "source_type": "git_repo"
    },
    "token_count": 150,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "554a2ebddbe361f1a1e716f2145e1a8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "of e target value Open the console, and make a selection from the teammates dropdown menu You should see the value of that selection in the console e target value represents the value property from the playersDropdownList element In future steps, you will use this value to show player cards based on the position they play --hints-- You should add a console log with the value of e target value js assert match(code, /console\\ log\\s*\\(\\s*e\\ target\\value\\s*\\)\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
      "source_type": "git_repo"
    },
    "token_count": 712,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "01f80daac8281b7684e5a7a39500f9f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7b8b8a7a6318be118b0ce017eaa517e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4dff766aff5b792787a440640c584e53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f293c804d6f9e9a83ca4c5.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b81717ba1a1e22d92873e224f790e65a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f29ce62aea65eb041758c8\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nThe next step would be to add a switch statement which will check for the user's selection from the player dropdown menu and filter out cards based on the player's positions Add a switch statement and use e target value for the expression --hints--\nYou should use a switch statement js\nassert match(code, /switch/);\nYour switch statement should use e target value for the expression js\nassert match(code, /switch\\s*\\(\\s*e\\ target\\ value\\s*\\)/);\nYour switch statement should be empty js\nassert match(code, /\\s*switch\\s*\\(\\s*e\\ target\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "8c879c60e51e243972efc54bb28c5f0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "add a switch statement which will check for the user's selection from the player dropdown menu and filter out cards based on the player's positions Add a switch statement and use e target value for the expression --hints-- You should use a switch statement js assert match(code, /switch/); Your switch statement should use e target value for the expression js assert match(code, /switch\\s*\\(\\s*e\\ target\\ value\\s*\\)/); Your switch statement should be empty js assert match(code, /\\s*switch\\s*\\(\\s*e\\ target\\value\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
      "source_type": "git_repo"
    },
    "token_count": 735,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e03fc288674986830fa95d9fa3d0b6df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8ca6385395210f23693273ad9bbad0d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d9c27c40fb664de207efc57755b424ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29ce62aea65eb041758c8.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c147a43d864bdffaa2902a7bbd5890c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f29804e3ec00ea6fab1ec4\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nRemove the console log statement you created in the previous step The next step would be to reset the content for the playerCards element Inside the callback function, access the innerHTML property of the playerCards element and assign it a value of an empty string --hints--\nYou should not have the console log statement in your code js\nassert notMatch(code, /\\s*console\\ log\\(\\s*e\\ target\\ value\\s*\\)/);\nYou should access the innerHTML property of the playerCards element js\nassert match(code, /playerCards\\ innerHTML\\s*=/);\nYou should set the innerHTML property to an empty string js\nassert match(code, /\\s*playerCards\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "fbc60cd4f89e999dcaa1302bc43185e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "reset the content for the playerCards element Inside the callback function, access the innerHTML property of the playerCards element and assign it a value of an empty string --hints-- You should not have the console log statement in your code js assert notMatch(code, /\\s*console\\ log\\(\\s*e\\ target\\ value\\s*\\)/); You should access the innerHTML property of the playerCards element js assert match(code, /playerCards\\ innerHTML\\s*=/); You should set the innerHTML property to an empty string js assert match(code, /\\s*playerCards\\innerHTML\\s*=\\s*('|\"|`)\\1/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
      "source_type": "git_repo"
    },
    "token_count": 744,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "45b0912316eeafeb5836c43d16789e38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "c5be3d308ac4fb6a35b9d80f2fc9475c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2915568593f12254b5a59bf0f03a9188",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\n--fcc-editable-region--\nconsole log(e target value)\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f29804e3ec00ea6fab1ec4.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "dea58de7a312550fe86b1f64d67ac446",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2a0a860790eebe61bf908\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nIf the user selects Nicknames from the dropdown menu you will want to filter out player cards that have a nickname Start by adding a case clause for \"nickname\" inside your switch statement --hints--\nYou should add a new case clause for \"nickname\" inside your switch statement js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
      "source_type": "git_repo"
    },
    "token_count": 97,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d7b75d513a7cd66e4da1032be35af002",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2a0a860790eebe61bf908\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nIf the user selects Nicknames from the dropdown menu you will want to filter out player cards that have a nickname Start by adding a case clause for \"nickname\" inside your switch statement --hints--\nYou should add a new case clause for \"nickname\" inside your switch statement js\nassertmatch(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
      "source_type": "git_repo"
    },
    "token_count": 734,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a028fa4737da832f6f7ec13090174442",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "381a94684d7e76bcd6c81a878362fd36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a53bdfba530ab5d45b3b23d01143d7a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\n--fcc-editable-region--\nswitch (e target value) {\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a0a860790eebe61bf908.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "2e7b5d2124a9b8ff9ea22cc96a99758a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2a4a8087e6dec8ec47f16\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nNext, add a case clause for \"forward\" Inside that case, call the setPlayerCards function with an argument of players filter() Inside the filter() method, add a callback function with a parameter of player that will check if player position equals \"forward\" Lastly, add a break statement below the setPlayerCards function call --hints--\nYou should add a new case for \"forward\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*/)\nIn your \"forward\" case, you should call the setPlayerCards function js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(/)\nYou should pass players filter() to your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/)\nYou should pass an arrow callback function to your players filter() call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour filter() callback should take a player parameter js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/)\nYour filter() callback should implicitly return the result of checking if player position is \"forward\" js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)forward\\2|('|\"|`)forward\\3\\s*=== \\s*player\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "776b057fd931d84d42b5e3796ab31593",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "setPlayerCards function js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(/) You should pass players filter() to your setPlayerCards call js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/) You should pass an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"forward\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)forward\\2|('|\"|`)forward\\3\\s*=== \\s*player\\position)\\s*\\)/)\nYou will need to add a break statement below your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\( \\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)forward\\2|('|\"|`)forward\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "555838b521e4ef0fd3e224ea2e8ce3e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"forward\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)forward\\2|('|\"|`)forward\\3\\s*=== \\s*player\\position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assert match(code, /\\s*case\\s*('|\"|`)\\s*forward\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\( \\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)forward\\2|('|\"|`)forward\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;\\s*break/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 967,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b25129d8ed2877e766799273dd7890aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "814c10e733b5968c26f5444f54b3b2ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "b0190d2a9e19efc54481876f58ff0b83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a4a8087e6dec8ec47f16.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5937aaeba23ede19b5818dc717d16c78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2a5f09a785aed155c0a56\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nAdd a new case for \"midfielder\" that checks if player position equals \"midfielder\" following the same pattern from the previous step --hints--\nYou should add a new case for \"midfielder\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*/)\nIn your \"midfielder\" case, you should call the setPlayerCards function js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(/)\nYou should pass players filter() to your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/)\nYou should pass an arrow callback function to your players filter() call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour filter() callback should take a player parameter js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/)\nYour filter() callback should implicitly return the result of checking if player position is \"midfielder\" js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)midfielder\\2|('|\"|`)midfielder\\3\\s*=== \\s*player\\ position)\\s*\\)/)\nYou will need to add a break statement below your setPlayerCards call js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "745e1297ee71532d37e489d55249be79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/) You should pass an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"midfielder\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)midfielder\\2|('|\"|`)midfielder\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)midfielder\\2|('|\"|`)midfielder\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "08aa6cfe631a5f453284b47eacf1848f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"midfielder\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)midfielder\\2|('|\"|`)midfielder\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*midfielder\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)midfielder\\2|('|\"|`)midfielder\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;\\s*break/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 985,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "facc069df7ecbd83d8a1759f4d467759",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "e81d8e93fcce7489dd3379cdea6121c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "27a4ae90c3dc3814e827133cbe6afe91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\ncase \"forward\":\nsetPlayerCards(players filter((player) => player position === \"forward\"));\nbreak;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a5f09a785aed155c0a56.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "07105d90ce294fd06f1fa5ca57dc541f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2aa36fcdc63ee4e18fc37\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nAdd a new case for \"goalkeeper\" that checks if player position equals \"goalkeeper\" following the same pattern as the previous step --hints--\nYou should add a new case for \"goalkeeper\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*/)\nIn your \"goalkeeper\" case, you should call the setPlayerCards function js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(/)\nYou should pass players filter() to your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/)\nYou should pass an arrow callback function to your players filter() call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour filter() callback should take a player parameter js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/)\nYour filter() callback should implicitly return the result of checking if player position is \"goalkeeper\" js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)goalkeeper\\2|('|\"|`)goalkeeper\\3\\s*=== \\s*player\\ position)\\s*\\)/)\nYou will need to add a break statement below your setPlayerCards call js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c4f8f7f1071f9bc1610c912f2d81bc52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/) You should pass an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"goalkeeper\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)goalkeeper\\2|('|\"|`)goalkeeper\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)goalkeeper\\2|('|\"|`)goalkeeper\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1bd1d6f234d25a9118ab21b0f389f7f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"goalkeeper\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)goalkeeper\\2|('|\"|`)goalkeeper\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*goalkeeper\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)goalkeeper\\2|('|\"|`)goalkeeper\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;\\s*break/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 976,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0be75d187d1c107afe98685a395c86a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2e9d9683f8441359494cfb0c68c3b57a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3ddac7737fa7c0c5920542b4e25efcca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\ncase \"forward\":\nsetPlayerCards(players filter((player) => player position === \"forward\"));\nbreak;\ncase \"midfielder\":\nsetPlayerCards(\nplayers filter((player) => player position === \"midfielder\")\n);\nbreak;\ncase \"defender\":\nsetPlayerCards(\nplayers filter((player) => player position === \"defender\")\n);\nbreak;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2aa36fcdc63ee4e18fc37.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "b4c79d3816a9755408b034101faefe93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2a8e14fb388edd3242527\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nAdd a new case for \"defender\" that checks if player position equals \"defender\" following the same pattern as the previous step --hints--\nYou should add a new case for \"defender\" inside your switch statement js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*/)\nIn your \"defender\" case, you should call the setPlayerCards function js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(/)\nYou should pass players filter() to your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/)\nYou should pass an arrow callback function to your players filter() call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour filter() callback should take a player parameter js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/)\nYour filter() callback should implicitly return the result of checking if player position is \"defender\" js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)defender\\2|('|\"|`)defender\\3\\s*=== \\s*player\\ position)\\s*\\)/)\nYou will need to add a break statement below your setPlayerCards call js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "fb38f5d94d45a1d86a55dbe6704b5c7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/) You should pass an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"defender\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)defender\\2|('|\"|`)defender\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)defender\\2|('|\"|`)defender\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2d3881313d52e2bf6855cd3ddb91f237",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player position is \"defender\" js assert match(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)defender\\2|('|\"|`)defender\\3\\s*=== \\s*player\\ position)\\s*\\)/) You will need to add a break statement below your setPlayerCards call js assertmatch(code, /\\s*case\\s*('|\"|`)\\s*defender\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*( :\\(\\s*player\\s*\\)|player)\\s*=>\\s*( :player\\ position\\s*=== \\s*('|\"|`)defender\\2|('|\"|`)defender\\3\\s*=== \\s*player\\ position)\\s*\\)\\s*\\)\\s*;\\s*break/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 976,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "cf65047a75ab9d9b88543a8e92c4d6e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "4125f5cf92977c8245f4a3a75328aee4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "036f5f18840bf6a87e3b5e618bbf9f23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\ncase \"forward\":\nsetPlayerCards(players filter((player) => player position === \"forward\"));\nbreak;\ncase \"midfielder\":\nsetPlayerCards(players filter((player) => player position === \"midfielder\"));\nbreak;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2a8e14fb388edd3242527.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "274fec7cc4ec207c0351ab08a1aca430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 641fc88d8fa7127f76e0324f\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nCall the setPlayerCards function with an argument of players filter() Inside the filter method, add a callback function with a parameter called player and implicitly return player nickname is not null --hints--\nIn your nickname case, you should call the setPlayerCards function js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(/)\nYou should pass players filter() to your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/)\nYou should pass an arrow callback function to your players filter() call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nYour filter() callback should take a player parameter js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/)\nYour filter() callback should implicitly return the result of checking if player nickname is not null js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>\\s*(player\\ nickname\\s* == \\s*null|null\\s* == \\s*player\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "57693112fb683bc447b7b10757a1d0cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "function js assert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(/) You should pass players filter() to your setPlayerCards call js assert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(/) You should pass an arrow callback function to your players filter() call js assert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); Your filter() callback should take a player parameter js assert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>/) Your filter() callback should implicitly return the result of checking if player nickname is not null js assert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>\\s*(player\\ nickname\\s* == \\s*null|null\\s* == \\s*player\\nickname)\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
      "source_type": "git_repo"
    },
    "token_count": 925,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "2201aabbc3e85220d3af70d37735b8b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "31a9c905736f9bb1fc1a4128598efd3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "cf3723ffc85a6ed4597cca1a7b64173d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\n--fcc-editable-region--\nswitch (e target value) {\ncase \"nickname\":\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fc88d8fa7127f76e0324f.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "011f21994cec8cf3a303a03923d64272",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 641fcfd468185384ac218b7d\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nBefore you can move onto the next case, you will need to add a break statement Below your setPlayerCards call, add a break statement --hints--\nYou will need to add a break statement below your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>\\s*(player\\ nickname\\s* == \\s*null|null\\s* == \\s*player\\ nickname)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6368d4717a8b7463da484d72c56bdc89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 641fcfd468185384ac218b7d\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nBefore you can move onto the next case, you will need to add a break statement Below your setPlayerCards call, add a break statement --hints--\nYou will need to add a break statement below your setPlayerCards call js\nassert match(code, /\\s*case\\s*('|\"|`)\\s*nickname\\s*\\1\\s*:\\s*setPlayerCards\\(\\s*players\\ filter\\(\\s*(\\(\\s*player\\s*\\)|player)\\s*=>\\s*(player\\ nickname\\s* == \\s*null|null\\s* == \\s*player\\ nickname)\\s*\\)\\s*\\)\\s*;\\s*break/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
      "source_type": "git_repo"
    },
    "token_count": 787,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "38dfb1744dc4d24ed4881a6d16bfbbdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5db9eccc03c5d6cdb91b858154ad7ffb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d12f45b15c290577b94f9432dd3f6111",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\n--fcc-editable-region--\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\641fcfd468185384ac218b7d.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b338527103b2ab8415a110dd9184df1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 63db7f4677d06d7500a13321\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you'll build a decimal and binary converter and learn about both number systems You'll also learn about recursion by using it to perform the conversions All of the HTML and CSS for this project has been provided for you When you're ready to get started, use the getElementById() method to get the input element with the id \"number-input\", and store it in a variable called numberInput Use the same method to get the button element with the id \"convert-btn\" and store it in a variable called convertBtn, and the output element with the id \"result\" and store it in a variable called result NOTE: This project will only convert positive numbers into binary --hints--\nYou should use the document getElementById() method to get the #number-input element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)number-input\\1\\s*\\)/);\nYou should use const to declare a variable called numberInput and assign it the #number-input element js\nassert match(code, /const\\s+numberInput\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)number-input\\1\\s*\\)/);\nYou should use the document getElementById() method to get the #convert-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/);\nYou should use const to declare a variable called convertBtn and assign it the #convert-btn element js\nassert match(code, /const\\s+convertBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/);\nYou should use the document getElementById() method to get the #result element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)result\\1\\s*\\)/);\nYou should use const to declare a variable called result and assign it the #result element js\nassert match(code, /const\\s+result\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1cbdf1f35dc1983cd2a2aec62ca68569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById\\(\\s*('|\"|`)number-input\\1\\s*\\)/); You should use the document getElementById() method to get the #convert-btn element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/); You should use const to declare a variable called convertBtn and assign it the #convert-btn element js assert match(code, /const\\s+convertBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/); You should use the document getElementById() method to get the #result element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)result\\1\\s*\\)/); You should use const to declare a variable called result and assign it the #result element js assert match(code, /const\\s+result\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)result\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2207dae1f48475ff263333422261f26d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "63c5b0d11eda3132bc71e922c5430f6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63db7f4677d06d7500a13321.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "761706bf7264032ddc7fff8e7abf67a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 63e9de47885cd4d08c29f8e2\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nNow you'll do some setup to check the value in the number input element whenever the user clicks the Convert button First, create an empty function called checkUserInput --hints--\ncheckUserInput should be a function js\nassert isFunction(checkUserInput);\nYour checkUserInput function should be empty js\nassert match(String(checkUserInput), /\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d48f7d1b23356ce6045a839669922afe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9ddff4818feb626b72d6cf8ee5c550a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9de47885cd4d08c29f8e2.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d7482356dbfadb2b7df1efcde90c7b00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 63e9e5bcec5d33d21b82397e\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nA good way to test that everything is working is to log the value attribute of numberInput to the console As a reminder, you can access the value attribute of an element by using dot or bracket notation Within the checkUserInput function, use console log() to log the value of numberInput to the console --hints--\nYour console log() call should be inside the checkUserInput function js\nassert match(String(checkUserInput), /console\\ log\\(\\s* */);\nYou should use console log() to log the value of numberInput to the console js\nassert match(String(checkUserInput), /console\\ log\\(\\s*numberInput\\ value\\s*\\)|console\\ log\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "73a2603ae6cc3f457d472b9a438acb28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3cfeae5c6c0bd52e589211dec5d8a803",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9e5bcec5d33d21b82397e.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5abc5bd8103b7c0e6734145f3003e151",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63f2ab4f6c52c5eec6d68de4\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nThe final step is to add a default clause if none of the other case clauses match the user selection For the default clause, call the setPlayerCards function without any arguments passed in Test out your dropdown menu, and you should see the player cards be filtered out by position or nickname Congratulations on completing the football team cards project --hints--\nYou should add a default clause to your switch statement js\nassert match(code, /default\\s*:\\s*/)\nIn your default clause, you should call the setPlayerCards function without any arguments passed in js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "7f1275e0886b22491c70691a43684343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "match the user selection For the default clause, call the setPlayerCards function without any arguments passed in Test out your dropdown menu, and you should see the player cards be filtered out by position or nickname Congratulations on completing the football team cards project --hints-- You should add a default clause to your switch statement js assert match(code, /default\\s*:\\s*/) In your default clause, you should call the setPlayerCards function without any arguments passed in js assertmatch(code, /default\\s*:\\s*setPlayerCards\\(\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 725,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "a5d5a2013eaddc4fb30e070fc1225b75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "ccc60614011519ff8311819558a25266",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "d67ccef25581194c9adcf71ea48149c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\ncase \"forward\":\nsetPlayerCards(players filter((player) => player position === \"forward\"));\nbreak;\ncase \"midfielder\":\nsetPlayerCards(\nplayers filter((player) => player position === \"midfielder\")\n);\nbreak;\ncase \"defender\":\nsetPlayerCards(\nplayers filter((player) => player position === \"defender\")\n);\nbreak;\ncase \"goalkeeper\":\nsetPlayerCards(\nplayers filter((player) => player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "3ac2d7be7a72ce4a17d7220361d0084c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "${nickname == null nickname : \"N/A\"}</p> </div> } ) join(\"\"); }; playersDropdownList addEventListener(\"change\", (e) => { playerCards innerHTML = \"\"; switch (e target value) { case \"nickname\": setPlayerCards(players filter((player) => player nickname == null)); break; case \"forward\": setPlayerCards(players filter((player) => player position === \"forward\")); break; case \"midfielder\": setPlayerCards( players filter((player) => player position === \"midfielder\") ); break; case \"defender\": setPlayerCards( players filter((player) => player position === \"defender\") ); break; case \"goalkeeper\": setPlayerCards( players filter((player) => playerposition === \"goalkeeper\")\n);\nbreak;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```\n--solutions--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "9e215a1eaa9d3ca5151122e6e80e8de5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\nconst headCoach = document getElementById(\"head-coach\");\nconst playerCards = document getElementById(\"player-cards\");\nconst playersDropdownList = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "3b8dd719977894639b2ea9718d347582",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "2rem 0; } options-label { font-size: 1 2rem; } cards { display: flex; flex-wrap: wrap; justify-content: center; align-items: center; } player-card { background-color: var(--light-grey); padding: 1 3rem; margin: 1 2rem; width: 300px; border-radius: 15px; } @media (max-width: 768px) { team-stats { flex-direction: column; } } ``` ```js const teamName = document getElementById(\"team\"); const typeOfSport = document getElementById(\"sport\"); const worldCupYear = document getElementById(\"year\"); const headCoach = document getElementById(\"head-coach\"); const playerCards = document getElementById(\"player-cards\"); const playersDropdownList = documentgetElementById(\"players\");\nconst myFavoriteFootballTeam = {\nteam: \"Argentina\",\nsport: \"Football\",\nyear: 1986,\nisWorldCupWinner: true,\nheadCoach: {\ncoachName: \"Carlos Bilardo\",\nmatches: 7,\n},\nplayers: [\n{\nname: \"Sergio Almirón\",\nposition: \"forward\",\nnumber: 1,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Sergio Batista\",\nposition: \"midfielder\",\nnumber: 2,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Bochini\",\nposition: \"midfielder\",\nnumber: 3,\nisCaptain: false,\nnickname: \"El Bocha\",\n},\n{\nname: \"Claudio Borghi\",\nposition: \"midfielder\",\nnumber: 4,\nisCaptain: false,\nnickname: \"Bichi\",\n},\n{\nname: \"José Luis Brown\",\nposition: \"defender\",\nnumber: 5,\nisCaptain: false,\nnickname: \"Tata\",\n},\n{\nname: \"Daniel Passarella\",\nposition: \"defender\",\nnumber: 6,\nisCaptain: false,\nnickname: \"El Gran Capitán\",\n},\n{\nname: \"Jorge Burruchaga\",\nposition: \"forward\",\nnumber: 7,\nisCaptain: false,\nnickname: \"Burru\",\n},\n{\nname: \"Néstor Clausen\",\nposition: \"defender\",\nnumber: 8,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"José Luis Cuciuffo\",\nposition: \"defender\",\nnumber: 9,\nisCaptain: false,\nnickname: \"El Cuchu\",\n},\n{\nname: \"Diego Maradona\",\nposition: \"midfielder\",\nnumber: 10,\nisCaptain: true,\nnickname: \"El Pibe de Oro\",\n},\n{\nname: \"Jorge Valdano\",\nposition: \"forward\",\nnumber: 11,\nisCaptain: false,\nnickname: \"The Philosopher of Football\",\n},\n{\nname: \"Héctor Enrique\",\nposition: \"midfielder\",\nnumber: 12,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Garré\",\nposition: \"defender\",\nnumber: 13,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Ricardo Giusti\",\nposition: \"midfielder\",\nnumber: 14,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Luis Islas\",\nposition: \"goalkeeper\",\nnumber: 15,\nisCaptain: false,\nnickname: \"El loco\",\n},\n{\nname: \"Julio Olarticoechea\",\nposition: \"defender\",\nnumber: 16,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Pedro Pasculli\",\nposition: \"forward\",\nnumber: 17,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Nery Pumpido\",\nposition: \"goalkeeper\",\nnumber: 18,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Oscar Ruggeri\",\nposition: \"defender\",\nnumber: 19,\nisCaptain: false,\nnickname: \"El Cabezón\",\n},\n{\nname: \"Carlos Tapia\",\nposition: \"midfielder\",\nnumber: 20,\nisCaptain: false,\nnickname: null,\n},\n{\nname: \"Marcelo Trobbiani\",\nposition: \"midfielder\",\nnumber: 21,\nisCaptain: false,\nnickname: \"Calesita\",\n},\n{\nname: \"Héctor Zelada\",\nposition: \"goalkeeper\",\nnumber: 22,\nisCaptain: false,\nnickname: null,\n},\n],\n};\nObject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "9829ea0d1dc2c131187fdc390a4a8fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "number: 17, isCaptain: false, nickname: null, }, { name: \"Nery Pumpido\", position: \"goalkeeper\", number: 18, isCaptain: false, nickname: null, }, { name: \"Oscar Ruggeri\", position: \"defender\", number: 19, isCaptain: false, nickname: \"El Cabezón\", }, { name: \"Carlos Tapia\", position: \"midfielder\", number: 20, isCaptain: false, nickname: null, }, { name: \"Marcelo Trobbiani\", position: \"midfielder\", number: 21, isCaptain: false, nickname: \"Calesita\", }, { name: \"Héctor Zelada\", position: \"goalkeeper\", number: 22, isCaptain: false, nickname: null, }, ], }; Objectfreeze(myFavoriteFootballTeam);\nconst { sport, team, year, players } = myFavoriteFootballTeam;\nconst { coachName } = myFavoriteFootballTeam headCoach;\ntypeOfSport textContent = sport;\nteamName textContent = team;\nworldCupYear textContent = year;\nheadCoach textContent = coachName;\nconst setPlayerCards = (arr = players) => {\nplayerCards innerHTML += arr map(\n({ name, position, number, isCaptain, nickname }) => {\nreturn <div class=\"player-card\">\n<h2>${isCaptain \"(Captain)\" : \"\"} ${name}</h2>\n<p>Position: ${position}</p>\n<p>Number: ${number}</p>\n<p>Nickname: ${nickname == null nickname : \"N/A\"}</p>\n</div> }\n) join(\"\");\n};\nplayersDropdownList addEventListener(\"change\", (e) => {\nplayerCards innerHTML = \"\";\nswitch (e target value) {\ncase \"nickname\":\nsetPlayerCards(players filter((player) => player nickname == null));\nbreak;\ncase \"forward\":\nsetPlayerCards(players filter((player) => player position === \"forward\"));\nbreak;\ncase \"midfielder\":\nsetPlayerCards(\nplayers filter((player) => player position === \"midfielder\")\n);\nbreak;\ncase \"defender\":\nsetPlayerCards(\nplayers filter((player) => player position === \"defender\")\n);\nbreak;\ncase \"goalkeeper\":\nsetPlayerCards(\nplayers filter((player) => player position === \"goalkeeper\")\n);\nbreak;\ndefault:\nsetPlayerCards();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63f2ab4f6c52c5eec6d68de4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "0978f68845c14161e8be76c80dee9ce5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64005ab13a78eb062547c12d\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nNext, within the body of the if statement, call the checkUserInput() function After this, if you enter numbers into the number input and press the Enter / Return key, you should see numbers logged to the console --hints--\nYou should call the checkUserInput() function within the body of your if statement js\nassert match(code, /if\\s*\\(\\s*e\\s*\\ \\s*key\\s*=== \\s*('|\"|`)Enter\\1\\s*\\)\\s*\\{\\s*checkUserInput\\(\\s*\\)\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bb6f982c11754e3b7fa5873fe71d7379",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "12da8aed07e429767d13b67c91f52e6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\n--fcc-editable-region--\n--fcc-editable-region--\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005ab13a78eb062547c12d.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6fbd3bc21571446b7d9f77778a41a277",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64005eb6d2d06a15d9f7611f\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nIn an earlier project you learned about truthy and falsy values, which are values that evaluate to true or false In JavaScript, some common falsy values you'll see are null, undefined, the number 0, and empty strings Rather than check if a value is equal to a falsy value, you can use the logical NOT operator ( ) to check if the value itself is falsy For example:\n```js\nconst num = 0;\nconsole log(num === 0); // true\nconsole log( num); // true\n```\nUpdate the condition in your if statement to use the logical NOT operator to check if numberInput value is falsy --hints--\nYou should use the logical NOT operator ( ) to check if numberInput value is falsy js\nassert match(String(checkUserInput), /if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\{|if\\s*\\(\\s* \\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\{/)\nThe body of your if statement within checkUserInput should be empty js\nassert match(String(checkUserInput), /if\\s*\\(\\s* +\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ee3522e09d7647894b1bc96e816b089a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d930ce7e35a1038792ec4fb0c15461a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\n--fcc-editable-region--\nif (numberInput value === \"\") {\n}\n--fcc-editable-region--\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64005eb6d2d06a15d9f7611f.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a471112a0a582df2195861eb444b4484",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 63e9eb5b2328eed3d194b28a\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nIf you open your browser's console and type in the number input, you'll see event objects logged to the browser And if you take a closer look at one of those event objects, you'll see helpful properties like type and target Since you want to perform an action when the Enter key is pressed, the most helpful property is key, which tells you the string value of the key that was pressed Remove the console log() statement from the callback function and add an if statement that checks if e key is equal to the string \"Enter\" Leave the body of your if statement empty for now Note: Since the Enter and Return keys have similar functions, they both have the same string value of \"Enter\" --hints--\nYour callback function should not contain a console log() statement js\nassert notMatch(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*{\\s* *console\\ log\\(/);\nYour if statement should check if e key is equal to the string \"Enter\" js\nassert match(code, /if\\s*\\(\\s*( :e\\s*\\ \\s*key\\s*=== \\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*=== \\s*e\\s*\\ key)\\s*\\)\\s*\\{/);\nThe body of your if statement should be empty js\nassert match(code, /if\\s*\\(\\s*( :e\\s*\\ \\s*key\\s*=== \\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*=== \\s*e\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e641c1268673fa3362f4c643720ad40c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Note: Since the Enter and Return keys have similar functions, they both have the same string value of \"Enter\" --hints-- Your callback function should not contain a console log() statement js assert notMatch(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*{\\s* *console\\ log\\(/); Your if statement should check if e key is equal to the string \"Enter\" js assert match(code, /if\\s*\\(\\s*( :e\\s*\\ \\s*key\\s*=== \\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*=== \\s*e\\s*\\ key)\\s*\\)\\s*\\{/); The body of your if statement should be empty js assert match(code, /if\\s*\\(\\s*( :e\\s*\\ \\s*key\\s*=== \\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*=== \\s*e\\s*\\key)\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5b70241b3d47f099d73a845f31807d7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e74074d4cd899918a92d00546d5ec4cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\n--fcc-editable-region--\nconsole log(e);\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\63e9eb5b2328eed3d194b28a.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "315433fede00a3d4a8085c861c6ba44c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 640067f276acd525509646cc\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nBecause the input type=\"number\" element allows special characters like , +, and e, users can input floats like 2 2, equations like 2e+3, or even just e, which you don't want to allow A good way to check and normalize numbers in JavaScript is to use the built-in parseInt() function, which converts a string into an integer or whole number parseInt() takes at least one argument, a string to be converted into an integer, and returns either an integer or NaN which stands for Not a Number For example:\njs\nparseInt(2 2); // 2\nparseInt(\"2e+3\"); // 2\nparseInt(\"e\") // NaN\nAdd a logical OR operator (||) after the first condition in your if statement Then, pass the value of numberInput into the parseInt() function as the second condition of your if statement --hints--\nYou should add the logical OR operator (||) after the first condition in your if statement, then pass the value of numberInput into the parseInt() function as the second condition of your if statement js\nassert match(String(checkUserInput), /if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\{|if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)\\s*\\{/);\nThe body of your if statement within checkUserInput should be empty js\nassert match(String(checkUserInput), /if\\s*\\(\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1d4e6a25479df801c3f55c464ece4f5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "pass the value of numberInput into the parseInt() function as the second condition of your if statement --hints-- You should add the logical OR operator (||) after the first condition in your if statement, then pass the value of numberInput into the parseInt() function as the second condition of your if statement js assert match(String(checkUserInput), /if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\{|if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)\\s*\\{/); The body of your if statement within checkUserInput should be empty js assert match(String(checkUserInput), /if\\s*\\(\\s*+\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "989a17aa61d3ac7cf6d90563acaa26c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0c6521c513cb8e8e4c0bccaf36d2f356",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\n--fcc-editable-region--\nif ( numberInput value) {\n}\n--fcc-editable-region--\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\640067f276acd525509646cc.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "85671a9467d707d9777d426167356179",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64007367d54d2a7efbf44fcf\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nNext, you need to check if the value returned by the parseInt() function is a number or not To do that, you can use the isNaN() function This function takes in a string or number as an argument, and returns true if it evaluates to NaN For example:\njs\nisNaN(\"test\"); // true\nisNaN(2); // false\nisNaN(\"3 5\"); // false\nUpdate the second condition in your if statement to use the isNaN() function to check if the value returned by parseInt() is NaN Also, as we mentioned in step 1 that we are considering only positive numbers, we should add a third condition in if statement to check whether the number is less than 0 (i e negative numbers) js\n6 < 0; // false\n-1 < 0; // true\n-8 < 0; // true\n0 < 0; //false\n--hints--\nYou should wrap the value returned by parseInt() in the isNaN() function And add a third condition which checks the value returned by parseInt() to be less than 0 js\nassert match(String(checkUserInput), /if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\<\\s*0\\s*\\)\\s*\\{/);\nThe body of your if statement within checkUserInput should be empty js\nassert match(String(checkUserInput), /if\\s*\\(\\s*",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1b3eef25b158b1cdf4503c42224dc2ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "e negative numbers) js 6 < 0; // false -1 < 0; // true -8 < 0; // true 0 < 0; //false --hints-- You should wrap the value returned by parseInt() in the isNaN() function And add a third condition which checks the value returned by parseInt() to be less than 0 js assert match(String(checkUserInput), /if\\s*\\(\\s* \\s*numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\<\\s*0\\s*\\)\\s*\\{/); The body of your if statement within checkUserInput should be empty js assert match(String(checkUserInput), /if\\s*\\(\\s*+\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d1d2b394ccc29565d0c9e9439be01eda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f3364a33ddea8d9f6f8bbeb7e784df17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\n--fcc-editable-region--\nif ( numberInput value || parseInt(numberInput value)) {\n}\n--fcc-editable-region--\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64007367d54d2a7efbf44fcf.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "65899e334143176161a9636b956d45dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64475c0b61cddb6feaab4e2e\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nNow you can alert the user if they don't enter a number, or the number is invalid before you attempt to convert it into binary In the body of the if statement, use the alert() method to display the text \"Please provide a decimal number greater than or equal to 0\" Note that alert() is a method on the window object in the browser, so you can use either window alert() or alert() --hints--\nYou should call the alert() method within the body of your if statement within checkUserInput js\nassert match(String(checkUserInput), /if\\s*\\(\\s* +\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(/);\nWhen there is a falsy value in the #number-input element and the checkUserInput() function is called, the alert() method should display the text \"Please provide a decimal number greater than or equal to 0\" ```js\nconst numberInput = document getElementById(\"number-input\");\nlet alertMessage;\nwindow alert = (message) => alertMessage = message; // Override alert and store message\nnumberInput value = '';\ncheckUserInput();\nassert strictEqual(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please provide a decimal number greater than or equal to 0');\n```\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4f29ee0b7daec7ecfc5fb23374e95206",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "equal to 0'); ``` --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "df7db6dd28061f4f344e2a3bfae860c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "431651fcb0a35ff684c3fe8ff9e6e1f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64475c0b61cddb6feaab4e2e.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c4f3abac6d9e9acd02be9a9d78cbcde8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644760f4fb15ce765baebb62\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nAfter alerting the user if the number input is empty or the value is not a number, you can use the return keyword to break out of this function early This will prevent future code in this function from running Add the return keyword after alert() --hints--\nYou should use the return keyword after alert() js\nassert match(String(checkUserInput), /if\\s*\\(\\s* +\\s*\\)\\s*\\{\\s*(window\\s* |globalThis\\s* ) \\s*alert\\(\\s*('|\"|`)please provide a decimal number greater than or equal to 0\\2\\s*\\)\\s*; \\s*return\\s*; \\s*\\}/i);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6f9ca778ba659d442263d45d21818f54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "18cd334dcdd957938f96099b7249e4d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\n--fcc-editable-region--\nalert(\"Please provide a decimal number greater than or equal to 0\");\n--fcc-editable-region--\n}\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644760f4fb15ce765baebb62.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1cc9e255e8e178f8400bb886defbb4ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448ab52a902de04fc56b3fa\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nNow you'll start building the function to actually do the decimal to binary conversion Create a function called decimalToBinary with input as a parameter Leave the body of the function empty for now --hints--\ndecimalToBinary should be a function js\nassert isFunction(decimalToBinary);\nYou should pass input as a parameter to your decimalToBinary function js\nassert match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)/);\nThe body of your decimalToBinary function should be empty js\nassert match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c48f1f713aa8f57722ff465934394d2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "aa4b1724b079e8366f332e28a29639f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448ab52a902de04fc56b3fa.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dbb51d1bb3aa08556f84e639441f64d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448b2c9aec64c0ecd41573d\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nWithin your checkUserInput function, remove the console log() statement Then, call the decimalToBinary function and pass in the value of numberInput as an argument Also, make sure to use the parseInt() function to convert the input into a number --hints--\nYou should remove the console log() statement from your checkUserInput function js\nassert notMatch(String(checkUserInput), /alert\\(\\s*('|\"|`)\\s*(\\s| )*\\s*\\1\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*console\\ log\\((\\s| )*\\)/);\nYou should call the decimalToBinary function after the if statement within the body of your checkUserInput function js\nassert match(String(checkUserInput), /( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)\\s*(\\s| )*\\s*\\1\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*decimalToBinary\\(/);\nYou should use parseInt() to convert the value of numberInput into a number, and pass that as an argument to the decimalToBinary function js\nassert match(String(checkUserInput), /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)|decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5100,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "39b495446707458d6a20edfd6624af73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "a number, and pass that as an argument to the decimalToBinary function js assert match(String(checkUserInput), /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)|decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5100,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "524d0a70100a3e2a239fc6b2b9ac34a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5100,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "54e769e64fc9b951b09d5c45cf5d2036",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\n--fcc-editable-region--\nconsole log(numberInput value);\n--fcc-editable-region--\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5100,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b2c9aec64c0ecd41573d.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c6e2ac59be7f8d2873b8f61141d3edee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448b4107aadc110a6ab4f65\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nNow that your function is set up, it's time to learn about binary numbers Binary numbers are a base-2 number system Unlike the base-10 or decimal number system we use every day that uses 10 digits (0-9) to form numbers, the binary number system only has two digits, 0 and 1 In computer science, these binary digits are called bits, and are the smallest unit of data computers can process For computers, 0 represents false or \"off\", and 1 represents true or \"on\" In your decimalToBinary function, use the return keyword to return a string of the binary number representation of true Note: Binary numbers can be long sequences that start with 0, so they are often represented as strings --hints--\nYour decimalToBinary function should return a string js\nassert isString(decimalToBinary());\nYour decimalToBinary function should return 1 as a string js\nassert strictEqual(decimalToBinary(), '1');\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dbfb3e776bb7ba3b62b1cafebf7ea83c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3b3fc3c4feef3557a99a1adf1cfe831d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448b4107aadc110a6ab4f65.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bc758c58956172a1c3a1aa8fe60ff33d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448e475f904ad580cd7e722\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nNow that your checkUserInput() function is set up for testing, you can use an event listener to call the function when users click the Convert button Chain the addEventListener() method to convertBtn The event listener should listen for click events and take a reference to the checkUserInput function as a callback Remember that function references are not called with parentheses Once that's done, whenever you click the Convert button, the value of the number input should be logged to the console --hints--\nYou should call the addEventListener() method on your convertBtn element js\nassert match(code, /convertBtn\\s*\\ \\s*addEventListener\\s*\\(/);\nYour addEventListener() method should listen for the click event js\nassert match(code, /convertBtn\\s*\\ \\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*, /);\nYour addEventListener() method should take checkUserInput as the callback Remember to pass the function reference, not the function call js\nassert match(code, /convertBtn\\s*\\ \\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,\\s*checkUserInput\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ec69137eca6140e39b8e2355078ac69b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b4b0601082667be207dff2b7aa1c3476",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nconsole log(numberInput value);\n};\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448e475f904ad580cd7e722.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a930908c5e83ee568f660075cd4ae6f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448d62ce222044458b75931\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nYour Convert button should be working now But it could get tiring for users to enter in a number, then click that button each time they want to convert from decimal to binary It would be much more convenient to perform the conversion when the Enter or Return key is pressed The keydown event fires every time a user presses a key on their keyboard, and is a good way to add more interactivity to input elements Chain addEventListener() to numberInput The event listener should listen for keydown events and take an empty arrow function as a callback --hints--\nYou should call the addEventListener() method on your numberInput element js\nassert match(code, /numberInput\\s*\\ \\s*addEventListener\\s*\\(/);\nYour addEventListener() method should listen for the keydown event js\nassert match(code, /numberInput\\s*\\ \\s*addEventListener\\s*\\(\\s*('|\"|`)keydown\\1\\s*, /);\nYour addEventListener() method should take a callback function using the arrow syntax js\nassert match(code, /('|\"|`)keydown\\1\\s*,\\s*\\(\\s*\\)\\s*=>/);\nYour callback function should be empty js\nassert match(code, /('|\"|`)keydown\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4805,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dc5cf6e1d4664abca595d4820b16dc7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4805,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "da4dc987265e2973359f21f06a39f535",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4805,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448d62ce222044458b75931.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2e79365547c24a702bde7d3bcfb1ce4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6448fefcd6445d6b3d9d63db\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nWhenever an event listener is triggered by an event, an event object is created automatically You don't always need to use this object, like with your click handler above, but it can be useful to access information about the event that was triggered First, pass e as a parameter to your callback function Remember that e is a common parameter name for the event object Next, log e to the console in the body of your callback function --hints--\nYour callback function should take the parameter e js\nassert match(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>/);\nYou should log e to the console in the body of your callback function js\nassert match(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*{\\s*console\\ log\\(\\s*e\\s*\\)\\s*; \\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d57061d8b24518c659486666ce40f147",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3fc76c5f35ce477211fe192337f31b8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst checkUserInput = () => {\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\n--fcc-editable-region--\nnumberInput addEventListener(\"keydown\", () => {\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6448fefcd6445d6b3d9d63db.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2535d9221455f1971474d3d08ae31148",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644905b34f614973a8252a26\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nNow that your Convert button and number input are listening for clicks and Enter key presses, it's time to complete the checkUserInput() function It would be helpful to alert users if they don't enter a value into the number input, or the number they enter is invalid While the input type=\"number\" element makes validation easier by only allowing numbers and some special characters, remember that all values you get from HTML elements are actually strings Also, if the number input is empty, the value property will be an empty string Inside your checkUserInput function, use an if statement to check if the value of numberInput is equal to an empty string Leave the body of the if statement empty for now --hints--\nYour if statement within checkUserInput should check if the value of numberInput is equal to an empty string js\nassert match(String(checkUserInput), /if\\s*\\(\\s*numberInput\\s*\\ \\s*value\\s*=== \\s*('|\"|`)\\1\\s*\\)\\s*\\{|if\\s*\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\2\\s*\\]\\s*=== \\s*('|\"|`)\\3\\s*\\)\\s*\\{/);\nThe body of your if statement within checkUserInput should be empty js\nassert match(String(checkUserInput), /if\\s*\\(\\s* +\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c18caab55a2bd0fe95cadbbbf31a3c07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "assert match(String(checkUserInput), /if\\s*\\(\\s* +\\s*\\)\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "718e3b8a804b9a451541b2de21e76593",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "762c428d5cd189f1e1eea5382860b451",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst checkUserInput = () => {\n--fcc-editable-region--\n--fcc-editable-region--\nconsole log(numberInput value);\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644905b34f614973a8252a26.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c19c24783e080c73bcedc4e11cf12105",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644a2013b2ceea32c44d09f9\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nBits are often grouped into an octet, which is an 8-bit set known as a byte A byte can represent any number between 0 and 255 Here are the placement values for each bit in a byte:\nmd\n128 | 64 | 32 | 16 | 8 | 4 | 2 | 1\nBecause bits are often grouped into bytes, it's common to see binary numbers represented in groups of eight, sometimes with leading zeros For example, the number 52 can be represented as 110100, or 00110100 with leading zeros Here's how that breaks down with the placement values:\nmd\n128 | 64 | 32 | 16 | 8 | 4 | 2 | 1\n0 |  0 |  1 |  1 | 0 | 1 | 0 | 0\nIn your decimalToBinary function, convert the number 118 into binary with leading zeros and return it as a string --hints--\nYour decimalToBinary function should return a string js\nassert isString(decimalToBinary());\nYour decimalToBinary function should return a string with a length of 8 js\nassert strictEqual(decimalToBinary() length, 8);\nYour decimalToBinary function should return \"01110110\" as a string js\nassert strictEqual(decimalToBinary(), '01110110');\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b6ae745a791eb69ea994fd832781e6fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "js assert strictEqual(decimalToBinary(), '01110110'); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4df6384d41c6767175792bbecf5053e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0e1dd7bcba84c6f6b0b75080b8b83be6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nreturn \"1010\";\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a2013b2ceea32c44d09f9.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5b5ceeb56f5be64225d413023142099b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644a0eadcbccaf1d13c7d137\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nIn the base-2 number system, the rightmost digit represents the ones place, the next digit to the left represents the twos place, then the fours place, then the eights place, and so on In this system, each digit's place value is two times greater than the digit to its right Here are numbers zero to nine in the base-10 and base-2 number systems:\nmd\n| Base-10 | Base-2 |\n| ------- | ------ |\n|    0    |  0     |\n|    1    |  1     |\n|    2    |  10    |\n|    3    |  11    |\n|    4    |  100   |\n|    5    |  101   |\n|    6    |  110   |\n|    7    |  111   |\n|    8    |  1000  |\n|    9    |  1001  |\nNotice that binary numbers are formed from left to right, from the digit with the greatest place value on the left, to the least significant on the right For example, the number 3 in binary is 11, or 1 in the twos place and 1 in the ones place Then for the number 4, a digit to represent the fours place is included on the left and set to 1, the twos place is 0, and the ones place is 0 In your decimalToBinary function, convert the number 10 into binary and return it as a string --hints--\nYour decimalToBinary function should return a string js\nassert isString(decimalToBinary());\nYour decimalToBinary function should return a string with a length of 4 js\nassert strictEqual(decimalToBinary() length, 4);\nYour decimalToBinary function should return \"1010\" as a string js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "598fbbbe7edf6bc56bf65cc9d72ac264",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "place is included on the left and set to 1, the twos place is 0, and the ones place is 0 In your decimalToBinary function, convert the number 10 into binary and return it as a string --hints-- Your decimalToBinary function should return a string js assert isString(decimalToBinary()); Your decimalToBinary function should return a string with a length of 4 js assert strictEqual(decimalToBinary() length, 4); Your decimalToBinary function should return \"1010\" as a string js assertstrictEqual(decimalToBinary(), '1010');\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "cb917034c03e479986d195940a42f954",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6fe85fbba3c50bb25c9a1f3afccbcd6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nreturn \"1\";\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a0eadcbccaf1d13c7d137.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "caf7ea4a6f89742124d87863dc1d874b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644a37d773b7610ac5ede66e\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nNow that you're familiar with binary numbers, it's time to finish building the function to do the conversion for you You'll start off with a simpler solution first, then refactor that into a recursive solution First, you need to create some arrays to store the inputs and results of the division you'll do in the following steps These will make it easier to see how the decimal to binary conversion works Remove the return statement from your decimalToBinary function Then, declare variables named inputs, quotients, and remainders, and assign an empty array to each of them --hints--\nYou should remove the return statement from your decimalToBinary function js\nassert notMatch(String(decimalToBinary), /return\\s*('|\"|`)(\\s|\\d)*\\1\\s*; \\s*\\}$/);\nYou should declare a variable named inputs js\nassert match(String(decimalToBinary), /(var|let|const)\\s+inputs/);\nYou should assign an empty array to inputs js\nassert match(String(decimalToBinary), /inputs\\s*=\\s*\\[\\s*\\]/);\nYou should declare a variable named quotients js\nassert match(String(decimalToBinary), /(var|let|const)\\s+quotients/);\nYou should assign an empty array to quotients js\nassert match(String(decimalToBinary), /quotients\\s*=\\s*\\[\\s*\\]/);\nYou should declare a variable named remainders js\nassert match(String(decimalToBinary), /(var|let|const)\\s+remainders/);\nYou should assign an empty array to remainders js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4bb255fdcbb02dd8410d92761ba9938d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "from your decimalToBinary function js assert notMatch(String(decimalToBinary), /return\\s*('|\"|`)(\\s|\\d)*\\1\\s*; \\s*\\}$/); You should declare a variable named inputs js assert match(String(decimalToBinary), /(var|let|const)\\s+inputs/); You should assign an empty array to inputs js assert match(String(decimalToBinary), /inputs\\s*=\\s*\\[\\s*\\]/); You should declare a variable named quotients js assert match(String(decimalToBinary), /(var|let|const)\\s+quotients/); You should assign an empty array to quotients js assert match(String(decimalToBinary), /quotients\\s*=\\s*\\[\\s*\\]/); You should declare a variable named remainders js assert match(String(decimalToBinary), /(var|let|const)\\s+remainders/); You should assign an empty array to remainders js assertmatch(String(decimalToBinary), /remainders\\s*=\\s*\\[\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "06274592a1cd33f1843fed3658b16fb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "fa7f4adfb97be1a72eabb4f90074df94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nreturn \"01110110\";\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644a37d773b7610ac5ede66e.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b7a3b57ca7f957e65fa5876b0143e7ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b6a23d398bb5f05ef796b\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nFor the decimal to binary conversion, you need to divide input by 2 until the quotient, or the result of dividing two numbers, is 0 But since you don't know how many times you need to divide input by 2, you can use a while loop to run a block of code as long as input is greater than 0 and can be divided As a reminder, a while loop is used to run a block of code as long as the condition evaluates to true, and the condition is checked before the code block is executed For example:\n```js\nlet i = 0;\nwhile (i < 5) {\nconsole log(i);\ni++;\n}\n```\nCreate a while loop that runs as long as input is greater than 0 Leave the body of the loop empty for now --hints--\nThe condition of your while loop should check if input is greater than 0 js\nassert match(String(decimalToBinary), /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{/);\nYour while loop should have an empty body js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "62ec87f0d1cf972fe605484d84271d8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7672606ea7982918a6c3ecc4af191406",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\ninput = 0;\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9245b62b4e49841676d0822ef34b4788",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "document getElementById(\"result\"); const decimalToBinary = (input) => { const inputs = []; const quotients = []; const remainders = []; input = 0; --fcc-editable-region-- --fcc-editable-region-- }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6a23d398bb5f05ef796b.md",
      "source_type": "git_repo"
    },
    "token_count": 150,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "580dc70eb003d264d9a8ac8853dc01b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b6ad4fa8dfd600a9dff2c\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nTo divide numbers in JavaScript, use the division operator (/) For example:\njs\nconst quotient = 5 / 2; // 2 5\nIn the example above, 5 is the dividend, or the number to be divided, and 2 is the divisor, or the number to divide by The result, 2 5, is called the quotient Inside your while loop, create a variable named quotient and assign it the value of input divided by 2 --hints--\nYou should create a variable named quotient inside your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*(var|let|const)\\s+quotient\\s*=/);\nYou should assign quotient the value of input divided by 2 js\nassert match(String(decimalToBinary), /(var|let|const)\\s+quotient\\s*=\\s*input\\s*\\/\\s*2\\s*/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4341ac86d78eec4ce2c75278be5d626f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "42da7ea9b6b9f341f43efd74d1c9f363",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\n--fcc-editable-region--\n--fcc-editable-region--\ninput = 0;\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "46203f42c29c8a684c5c95c810c94fe0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "document getElementById(\"result\"); const decimalToBinary = (input) => { const inputs = []; const quotients = []; const remainders = []; while (input > 0) { --fcc-editable-region-- --fcc-editable-region-- input = 0; } }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b6ad4fa8dfd600a9dff2c.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "06898b4e8bfc6b5ec56bb372ed5d7497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b71f678b5e1687666c88d\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nLike you saw in the last step, division can lead to a floating point number, or a number with a decimal point The best way to handle this is to round down to the nearest whole number Use the Math floor() function to round down the quotient of input divided by 2 before it's assigned to quotient --hints--\nYou should use the Math floor() function to round down the quotient of input divided by 2 js\nassert match(String(decimalToBinary), /(var|let|const)\\s+quotient\\s*=\\s*Math\\ floor\\s*\\(\\s*input\\s*\\/\\s*2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a670d5b5f7673331ad1ce80a3d4e1006",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e19faf33ac3a5d0ba0a70e1b87abdc36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\n--fcc-editable-region--\nconst quotient = input / 2;\n--fcc-editable-region--\ninput = 0;\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b71f678b5e1687666c88d.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "03013369018ad47af86530e81d021826",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b765b3bf09e6dff5e0931\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nNow that you have an operation that will lower the value of input each time the loop runs, you don't have to worry about the loop running forever Update the last line of your while loop and assign quotient to input --hints--\nYou should assign quotient to input at the end of your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*input\\s*=\\s*quotient\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "49bc984e408fcc5b1b297829f7e3fe04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 03rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b001b123f5dce4e5610344b4f22f0ed8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\n--fcc-editable-region--\ninput = 0;\n--fcc-editable-region--\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b765b3bf09e6dff5e0931.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8a6883cd7c34dbabe67bab3fdb5a8cc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b77a563c51f6ff5237b99\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nNext, you need to calculate the remainder of input divided by 2 You can do this by using the remainder operator (%), which returns the remainder of the division of two numbers For example:\njs\nconst remainder = 5 % 2; // 1\nIn other words, the dividend, 5, can be divided by the divisor, 2, multiple times Then you're left with a remainder of 1 Inside your while loop, create a variable named remainder and use the remainder operator to assign it the remainder of input divided by 2 --hints--\nYou should create a variable named remainder inside your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*(var|let|const)\\s+remainder\\s*=/);\nYou should use input as the dividend and 2 as the divisor when calculating the remainder js\nassert match(String(decimalToBinary), /(var|let|const)\\s+remainder\\s*=\\s*input\\s*%\\s*2\\s*/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "be343b3d37ef64fba14aad4700c9cddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d159c4847b448df6a10bf0e08576928c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\n--fcc-editable-region--\n--fcc-editable-region--\ninput = quotient;\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c4ba5a6dc8f4a69a3143dc09a26a864b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ const inputs = []; const quotients = []; const remainders = []; while (input > 0) { const quotient = Math floor(input / 2); --fcc-editable-region-- --fcc-editable-region-- input = quotient; } }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b77a563c51f6ff5237b99.md",
      "source_type": "git_repo"
    },
    "token_count": 152,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "610445c9095cfd1db5b6a74d1a80473c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b82e0dc8e5e7ca47fcd9b\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nThe tricky part about while loops is that, if you're not careful, they can run forever This is called an infinite loop, and can cause your browser to crash To avoid infinite loops, you need to make sure that the condition for the while loop eventually becomes false In this case, you want to make sure that the input variable eventually becomes 0 Move the input = 0 statement into the body of the while loop This will make it so that the loop will only run up to one time --hints--\nYou should move the input = 0 statement into the body of the while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*0\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1c7790b334b37304d0f34951789ad3c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f7771939139574bb4d6bb6e9570933f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\n--fcc-editable-region--\ninput = 0;\nwhile (input > 0) {\n}\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b82e0dc8e5e7ca47fcd9b.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3f5a38a77f752aea50083d528b1d984e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b5c05986aba539ba6ca03\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nSet input equal to the number 0 for now We'll change this in the next few steps --hints--\nYou should set input equal to the number 0 js\nassert match(String(decimalToBinary), /input\\s*=\\s*0\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bc50fa37031e94446284e435fdb9466d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9937f07c80c8f291e392b8bf5af6e743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b5c05986aba539ba6ca03.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ef62e727e2b522ae9ce2c2fb208077ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 644b7ac994d7dd73a61b4fa6\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nInside your while loop, use the push() method to append input to the inputs array This will help you get a better idea of how the conversion works later when you log the contents of your arrays to the console --hints--\nYou should use the push() method on the inputs array within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*inputs\\ push\\(/);\nYou should use the push() method to append input to the inputs array js\nassert match(String(decimalToBinary), /inputs\\ push\\(\\s*input\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "85252749c287b128c729001786b4b049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fbb85c8a54ecb2228386845db12889d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\n--fcc-editable-region--\n--fcc-editable-region--\ninput = quotient;\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\644b7ac994d7dd73a61b4fa6.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "13079ad86a8371758f47303a0e966430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b6c92876e836832538e34\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nNext, log the text \"Quotients: \", followed by a comma, followed by the quotients array to the console Also, log the text \"Remainders: \", followed by a comma, followed by the remainders array --hints--\nYou should log the text \"Quotients: \" and the quotients array to the console, separated by a comma js\nassert match(String(decimalToBinary), /console\\ log\\(\\s*('|\"|`)Quotients:\\s*\\1\\s*,\\s*quotients\\s*\\)/i);\nYou should log the text \"Remainders: \" and the remainders array to the console, separated by a comma js\nassert match(String(decimalToBinary), /console\\ log\\(\\s*('|\"|`)Remainders:\\s*\\1\\s*,\\s*remainders\\s*\\)/i);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c271a4d7856963b81bfed846c2df10b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bacd670323973cced203aaed371f16df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\n--fcc-editable-region--\nconsole log(\"Inputs: \", inputs);\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6c92876e836832538e34.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d7a6bc3495afccaf32aef2adb782e6c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b6693d8e1bf60f2d92e67\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nNow's a good time to check your work Log the text \"Inputs: \", followed by a comma, followed by the inputs array to the console --hints--\nYou should log the text \"Inputs: \" and the inputs array to the console, separated by a comma js\nassert match(String(decimalToBinary), /console\\ log\\(\\s*('|\"|`)Inputs:\\s*\\1\\s*,\\s*inputs\\s*\\)/i);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "391ec538683ac12fc71f7ae8b887765a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "811f4906defa92be1acc91b4baa8e884",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4642,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6693d8e1bf60f2d92e67.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b854793f3418759808ab0f92973b242d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b65b681a62f5fa125ff62\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nUse push() to append the quotient variable to the quotients array Also, append the remainder variable to the remainders array --hints--\nYou should use the push() method on the quotients array within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*quotients\\ push\\(/);\nYou should use the push() method to append quotient to the quotients array js\nassert match(String(decimalToBinary), /quotients\\ push\\(\\s*quotient\\s*\\)\\s*; /);\nYou should use the push() method on the remainders array within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*remainders\\ push\\(/);\nYou should use the push() method to append remainder to the remainders array js\nassert match(String(decimalToBinary), /remainders\\ push\\(\\s*remainder\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5104,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3a79cabc43bb49b64f18c2fe2f083d5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5104,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "553f9cf5bf7a64e5062fcf7db8672aeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\n--fcc-editable-region--\ninputs push(input);\n--fcc-editable-region--\ninput = quotient;\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5104,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8ca29c9c08151ba58d07e79d094c930e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "const quotients = []; const remainders = []; while (input > 0) { const quotient = Math floor(input / 2); const remainder = input % 2; --fcc-editable-region-- inputs push(input); --fcc-editable-region-- input = quotient; } }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtnaddEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5104,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b65b681a62f5fa125ff62.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4620c1849e7434bfad91ac7dfe50ba49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b7f6a575ffc807877a8c6\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nYour decimalToBinary function works well, but there is an issue – because of the condition in your while loop, it only works for numbers greater than 0 If you try to convert 0 to binary, nothing will get added to the page To fix this, add an if statement to check if input is equal to 0 Leave the body of the if statement empty for now --hints--\nYou should add an if statement that checks if input is equal to 0 js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{/);\nThe body of your if statement should be empty js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{\\s*\\}/);\nYour if statement should be written before your while loop js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{\\s*\\}[\\s\\S]*while\\s*\\(/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "923cdd69ac91ca4f60f51d537d2dc34a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d8e18f06d9c61c210affd7af5c21d88e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\n--fcc-editable-region--\n--fcc-editable-region--\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\nconsole log(\"Inputs: \", inputs);\nconsole log(\"Quotients: \", quotients);\nconsole log(\"Remainders: \", remainders);\nresult innerText = remainders reverse() join(\"\");\n};\nconst checkUserInput = () => {\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9c5c59997640bcf27a03eefe3d2942fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "const decimalToBinary = (input) => { const inputs = []; const quotients = []; const remainders = []; --fcc-editable-region-- --fcc-editable-region-- while (input > 0) { const quotient = Math floor(input / 2); const remainder = input % 2; inputs push(input); quotients push(quotient); remainders push(remainder); input = quotient; } console log(\"Inputs: \", inputs); console log(\"Quotients: \", quotients); console log(\"Remainders: \", remainders); result innerText = remainders reverse() join(\"\"); }; const checkUserInput = () => { if ( numberInputvalue ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b7f6a575ffc807877a8c6.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6c70548e262af924f0e6c6590a9ce605",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b6dad50514e69df601df6\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nNow if you enter in the number 6 and click the Convert button, you'll see the following output:\nmd\nInputs:  [ 6, 3, 1 ]\nQuotients:  [ 3, 1, 0 ]\nRemainders:  [ 0, 1, 1 ]\nNotice that the remainders array is the binary representation of the number 6, but in reverse order Use the reverse() method to reverse the order of the remainders array, and join() with an empty string as a separator to join the elements into a binary number string Then, set result innerText equal to the binary number string --hints--\nYou should use the reverse() method on the remainders array js\nassert match(String(decimalToBinary), /remainders\\ reverse\\(\\s*\\)/);\nYou should use the join() with an empty string as a separator on the reversed remainders array js\nassert match(String(decimalToBinary), /remainders\\ reverse\\(\\s*\\)\\ join\\(\\s*('|\"|`)\\1\\s*\\)/);\nYou should set result innerText equal to the binary number string ```js\nconst result = document getElementById('result');\ndecimalToBinary(6);\nassert strictEqual(result innerText trim(), '110');\n```\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "737ed8ec7a847ca56cb33645f1dce3f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8872904cfdaf056a0d5d52168331da14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\nconsole log(\"Inputs: \", inputs);\nconsole log(\"Quotients: \", quotients);\nconsole log(\"Remainders: \", remainders);\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5aee4e010b5b99f0e8414c42aeb8785a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"result\"); const decimalToBinary = (input) => { const inputs = []; const quotients = []; const remainders = []; while (input > 0) { const quotient = Math floor(input / 2); const remainder = input % 2; inputs push(input); quotients push(quotient); remainders push(remainder); input = quotient; } console log(\"Inputs: \", inputs); console log(\"Quotients: \", quotients); console log(\"Remainders: \", remainders); --fcc-editable-region-- --fcc-editable-region-- }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInputvalue)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b6dad50514e69df601df6.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4f2704d67cc19269d0e3a3bc86105c21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b9d56b48971997a8055dd\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nWithin the body of the if statement, set the innerText property of result equal to the string \"0\" Then, use an early return statement to break out of the function early --hints--\nYou should set the innerText property of result equal to the string \"0\" js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{\\s*result\\ innerText\\s*=\\s*('|\"|`)\\s*0\\s*\\1/);\nAfter setting the innerText of the result element, you should use an early return statement to break out of the function early js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{\\s*result\\ innerText\\s*=\\s*('|\"|`)\\s*0\\s*\\1\\s*; \\s*return\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "843df0579fb02dd1c3a51fbe0b3f2e3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4d763abf7a098d7323dad79d5c415f0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\n--fcc-editable-region--\nif (input === 0) {\n}\n--fcc-editable-region--\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\nconsole log(\"Inputs: \", inputs);\nconsole log(\"Quotients: \", quotients);\nconsole log(\"Remainders: \", remainders);\nresult innerText = remainders reverse()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "49abbf083f9e991b7ecba0ac9cc83ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "const result = document getElementById(\"result\"); const decimalToBinary = (input) => { const inputs = []; const quotients = []; const remainders = []; --fcc-editable-region-- if (input === 0) { } --fcc-editable-region-- while (input > 0) { const quotient = Math floor(input / 2); const remainder = input % 2; inputs push(input); quotients push(quotient); remainders push(remainder); input = quotient; } console log(\"Inputs: \", inputs); console log(\"Quotients: \", quotients); console log(\"Remainders: \", remainders); result innerText = remainders reverse()join(\"\");\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9d56b48971997a8055dd.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "86cc8e091e13efa9063b80015c25b469",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b9de38df75b9a5cfc2e85\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nNow your decimalToBinary function is complete Feel free to play around with it But there are some ways to improve it For example, it's not necessary to keep track of the inputs and quotients We can clean things up so the function is more efficient First, remove everything in the body of the decimalToBinary function Then, use let to create a variable named binary and assign it an empty string --hints--\nYou should use let to create the binary variable js\nassert match(code, /let\\s+binary\\s*/);\nYou should create a variable named binary inside your decimalToBinary function js\nassert match(code, /const\\s+decimalToBinary\\s*=\\s*(\\(\\s*input\\s*\\)|input)\\s*=>\\s*\\{\\s*let\\s+binary\\s*/);\nYou should assign binary an empty string js\nassert match(code, /let\\s+binary\\s*=\\s*('|\"|`)\\1\\s*; /);\nYou should remove everything else from the body of your decimalToBinary function js\nassert match(code, /const\\s+decimalToBinary\\s*=\\s*( :\\(\\s*input\\s*\\)|input)\\s*=>\\s*\\{\\s*let\\s+binary\\s*=\\s*('|\"|`)\\1\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "405b48cc471bf49af8015e0b739c282d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "match(code, /const\\s+decimalToBinary\\s*=\\s*( :\\(\\s*input\\s*\\)|input)\\s*=>\\s*\\{\\s*let\\s+binary\\s*=\\s*('|\"|`)\\1\\s*; \\s*\\}/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "acc550ccf61767f759fc9ca5d9c0512e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "aa3fe4fc48c4c6834bf6b292380a4072",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nconst inputs = [];\nconst quotients = [];\nconst remainders = [];\nif (input === 0) {\nresult innerText = \"0\";\nreturn;\n}\nwhile (input > 0) {\nconst quotient = Math floor(input / 2);\nconst remainder = input % 2;\ninputs push(input);\nquotients push(quotient);\nremainders push(remainder);\ninput = quotient;\n}\nconsole log(\"Inputs: \", inputs);\nconsole log(\"Quotients: \", quotients);\nconsole log(\"Remainders: \", remainders);\nresult innerText = remainders reverse() join(\"\");\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9de38df75b9a5cfc2e85.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4ef07a424fba77a3f2f1b10e3e966897",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645b9ea45d3a9a9d711df81a\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nFinally, you should clear the number input by setting its value to an empty string Then later when you convert several numbers in a row, you won't have to delete the previous number before entering the next one Set the value property of numberInput to an empty string --hints--\nYou should set the value property of numberInput to an empty string js\nassert match(String(checkUserInput), /decimalToBinary\\((\\s| )*\\)\\s*; \\s*numberInput\\s*\\ \\s*value\\s*=\\s*('|\"|`)\\2|decimalToBinary\\((\\s| )*\\)\\s*; \\s*numberInput\\s*\\[\\s*('|\"|`)value\\4\\s*\\]\\s*=\\s*('|\"|`)\\5/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8a2a9b9a057ca4c5aee902927d3d65f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a9b1bcc3caefcea0c2e74f6ae70cc7da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645b9ea45d3a9a9d711df81a.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3bf91250ef2ea429dbb2a02a06bcd1e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c803cad8434791a5f57b6\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nSince you'll want to display the result of the conversion, assign the binary variable to the innerText property of result at the end of the function --hints--\nYou should assign binary to the innerText property of result js\nassert match(String(decimalToBinary), /result\\ innerText\\s*=\\s*binary\\s*/);\nYou should assign binary to the innerText property of result at the end of the function js\nassert match(String(decimalToBinary), /result\\ innerText\\s*=\\s*binary\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4856a6f86af0d8cec97eb779bc919175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 03rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2d549045d37d0adf7e7813d476e108cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c803cad8434791a5f57b6.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a0ee19419f18dacb51a3bfddf74e3321",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c80ee8b65917a24afcb14\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nCreate a while loop that runs as long as input is greater than 0 Inside the loop, assign 0 to input for now Note: Be careful not to trigger the decimalToBinary function before you set input equal to 0 inside the loop Otherwise, you could cause an infinite loop --hints--\nYou should create a while loop that runs as long as input is greater than 0 js\nassert match(String(decimalToBinary), /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{/);\nInside the loop, you should assign 0 to input js\nassert match(String(decimalToBinary), /while\\s*\\([\\s\\S]+input\\s*=\\s*0\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4667,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4380354f9dc1f3c2a9a9905245bf4418",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4667,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9e97b3ce61ded2c025d455a0b624a9c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\n--fcc-editable-region--\n--fcc-editable-region--\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4667,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c80ee8b65917a24afcb14.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "13d6a1c261c1cbf51fd9df67aefb3916",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c81683d816b7b3a044143\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nIn the previous version of this function, you pushed the remainder of input divided by 2 to binaryArray Then later you reversed and joined the entries into a binary number string But it would be easier to use string concatenation within the loop to build the binary string from right to left, so you won't need to reverse it later First, use the remainder operator (%) to set binary equal to the remainder of input divided by 2 --hints--\nYou should set the value of binary within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=/);\nYou should set binary equal to the remainder of input divided by 2 js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*input\\s*%\\s*2\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "47ef76f275cbb1b77b9f9088fe387b0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ceb75866c44b1874936e7c079c37c6bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nwhile (input > 0) {\n--fcc-editable-region--\n--fcc-editable-region--\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5f7e838044a37f1798df4feca725ede3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "(input) => { let binary = \"\"; while (input > 0) { --fcc-editable-region-- --fcc-editable-region-- input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81683d816b7b3a044143.md",
      "source_type": "git_repo"
    },
    "token_count": 147,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5f41d87fb38e474dc94674ba4489a9bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c81579c54a57ae7c1a5f7\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nRecall that, each time the loop runs, input is the quotient of the previous value of input divided by 2, rounded down Eventually, input is less than 1, and the loop stops running You can do this in a single step Inside your while loop, set input equal to the quotient of input divided by 2 Also, remember to use Math floor() to round the quotient down --hints--\nYou should set the value of input within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=/);\nYou should use Math floor() to round the quotient down js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*Math\\ floor\\(/);\nYou should set input equal to the quotient of input divided by 2, rounded down, within your while loop js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*Math\\ floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6c8b2d6504ec9d72c58bf8683cfcc5fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "05dc3c7a2d64c54bda27d0015ada48b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nwhile (input > 0) {\n--fcc-editable-region--\ninput = 0;\n--fcc-editable-region--\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "61c53cdd9f12212c84077c76996d0bdf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "const decimalToBinary = (input) => { let binary = \"\"; while (input > 0) { --fcc-editable-region-- input = 0; --fcc-editable-region-- } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c81579c54a57ae7c1a5f7.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ff86e409d71d76556cc4bb88084c71e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c85251dc1827fe4a6c4ce\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nTo clean things up a bit, wrap input % 2 in parentheses This can sometimes change the order of operations, but in this case, it just makes your code easier to read --hints--\nYou should wrap input % 2 in parentheses js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*\\(\\s*input\\s*%\\s*2\\s*\\)\\s*\\+\\s*binary\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "71b31d25d33f1a85028209b4982918ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "08e93ff7e9db781b0038b3599531b3e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nwhile (input > 0) {\n--fcc-editable-region--\nbinary = input % 2 + binary;\n--fcc-editable-region--\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c85251dc1827fe4a6c4ce.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f02ba3f335f74e56141ea00d33262292",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c82268b9a8d7c4debd8dc\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nThen, use the addition operator to add the current value of binary to the end of the equation input % 2 This is what will build the binary string from right to left --hints--\nYou should use the addition operator (+) to add binary to the end of the equation input % 2 js\nassert match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*input\\s*%\\s*2\\s*\\+\\s*binary\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "add258f8446b9e6b22659aca222f16bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "41cf2ebaeb872218435b66f5665b052a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nwhile (input > 0) {\n--fcc-editable-region--\nbinary = input % 2;\n--fcc-editable-region--\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c82268b9a8d7c4debd8dc.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "be1b05083b114274765a5f29cd5e2d0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c86f92a102d82250ce3e8\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nFinally, you need to handle cases where input is 0 Rather than update the DOM and return early like you did before, you can update the binary string and let the rest of the code in the function run Create an if statement that checks if input is equal to 0 If it is, set binary equal to the string \"0\" --hints--\nYou should add an if statement that checks if input is equal to 0 js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{ /);\nIn the body of your if statement, you should set binary equal to the string \"0\" js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{ \\s*binary\\s*=\\s*('|\"|`)0\\1\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4862,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "98294aa8e051483830625d72716c8404",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4862,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8e6dc844ef2a75b45ba8fbe818f9ab05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\n--fcc-editable-region--\n--fcc-editable-region--\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4862,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ba536f657b0e922a6ac8e501d60da408",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=> { let binary = \"\"; --fcc-editable-region-- --fcc-editable-region-- while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4862,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c86f92a102d82250ce3e8.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f95b9c551bd27a343bf9f8d7526b263b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c8a55eca2118650ee3ce3\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nAwesome Now you have a more efficient way to convert decimal numbers into binary After learning a bit about the call stack and recursion, you'll refactor the decimalToBinary function to use recursion instead of a while loop Create a function named a that returns the following: \"freeCodeCamp \" + b() --hints--\nYou should create a function named a js\nassert isFunction(a);\nYour function a should return \"freeCodeCamp \" + b() js\nassert match(String(a), /return\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*b\\s*\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "133b41694b8260bfc9b14117bdae6300",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "079596df13e30c1e819f1e9a7e159535",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8a55eca2118650ee3ce3.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "094bb76215af5bb013b62629a850420a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c8fe0c9505407650c4ac6\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nA recursive function is a function that calls itself over and over But you have to be careful because you can easily create an infinite loop That's where the base case comes in The base case is when the function stops calling itself, and it is a good idea to write it first Since your countdown() function will count down from a given number to zero, the base case is when the number parameter is equal to 0 Then it should return to break out of its recursive loop Use an if statement to check if number is equal to 0 If it is, use the return keyword to break out of the function --hints--\nYour countdown function should have an if statement that checks if number is equal to 0 js\nassert match(String(countdown), /if\\s*\\(\\s*number\\s*=== \\s*0\\s*\\)\\s*\\{ /);\nYour countdown function should return when number is equal to 0 js\nassert match(String(countdown), /if\\s*\\(\\s*number\\s*=== \\s*0\\s*\\)\\s*\\{ \\s*return\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fd71d6ed42450ace2460d5c8431b7c7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ce5eaadb2403b38cb7b72cea84f0635f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst countdown = (number) => {\nconsole log(number);\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5c88f1cdad948ca20d12ba6ae28f5ae1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const countdown = (number) => { console log(number); --fcc-editable-region-- --fcc-editable-region-- }; const decimalToBinary = (input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInputvalue) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c8fe0c9505407650c4ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c3b4067410e70b4c9c69436f2c09dc75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645c9e6cf5c7251f7b3308f6\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nRecursive functions also have a recursive case, which is where the function calls itself First, convert your if statement into an if else statement Leave the body of your else statement empty for now --hints--\nYou should change your if statement into an if else statement js\nassert match(String(countdown), /if\\s*\\(\\s*number\\s*=== \\s*0\\s*\\)\\s*\\{\\s*return\\s*; \\s*\\}\\s*else\\s*\\{/);\nThe body of your else statement should be empty js\nassert match(String(countdown), /else\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d2e7e6845918c535cb39fbf5fa327d3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e866198be06314fc7f2b1c855843abc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst countdown = (number) => {\nconsole log(number);\n--fcc-editable-region--\nif (number === 0) {\nreturn;\n}\n--fcc-editable-region--\n};\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645c9e6cf5c7251f7b3308f6.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "01f97599b744d67aa42f24d605f66cf5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ca158fb7fa3237437fbbd\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nThe first thing you need to do is log the current value of number to the console to act as the countdown Use console log() to log number to the console --hints--\nYou should use console log() to log number to the console within the body of your countdown function js\nassert match(String(countdown), /console\\ log\\(\\s*number\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "da11f5f564d4d4dc2dbc3c359cd89ab0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2b0c9a2ce6264900829a3b7637893167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst countdown = (number) => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca158fb7fa3237437fbbd.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "35567c968c68e09e440e51d00df0f82d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ca5ca11d0d7293e61c6c7\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nIt's time to test your function Call countdown() with an argument of 3 to see if it works --hints--\nYou should call countdown() with an argument of 3 js\nassert match(code, /countdown\\(\\s*3\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "adf3421442942d401424c83ceae0899c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0c5fcd5281816d0f4d0132371a72fc23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst countdown = (number) => {\nconsole log(number);\nif (number === 0) {\nreturn;\n} else {\ncountdown(number - 1);\n}\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca5ca11d0d7293e61c6c7.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3a2a6d1b29d2d5d4b0a6810269a3313a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ca381c8f87f263034954f\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nWhen writing the recursive case, you need to remember two things:\nWhat is the base case What is the least amount of work you need to do to get closer to the base case Since the base case is when number is equal to 0, you need to call countdown() again while also lowering the value of number by 1 Inside the else block, call countdown() and pass it number - 1 as an argument --hints--\nYou should call countdown() within the body of your else statement js\nassert match(String(countdown), /else\\s*\\{\\s*countdown\\(/);\nYou should pass number - 1 as an argument to countdown() js\nassert match(String(countdown), /countdown\\(\\s*number\\s*-\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "94331435a4e5c42e17bb7d0ddf4172e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ddb400706a899056cc5e5eda1f96f721",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst countdown = (number) => {\nconsole log(number);\n--fcc-editable-region--\nif (number === 0) {\nreturn;\n} else {\n}\n--fcc-editable-region--\n};\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca381c8f87f263034954f.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "303457f9a6d36c7b9ce699df52e6f47b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cb07132281a380223e458\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nThen, log number to the console after your recursive countDownAndUp(number - 1) function call --hints--\nYou should log number to the console after your recursive countDownAndUp(number - 1) function call js\nassert match(String(countDownAndUp), /countDownAndUp\\(\\s*number\\s*-\\s*1\\s*\\)\\s*; \\s*console\\ log\\(\\s*number\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f2f383b0b0306297182b7638f3d73a8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "71f69cbfdb3b8ec12d8ebb4ddf574990",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst countDownAndUp = (number) => {\nconsole log(number);\nif (number === 0) {\nconsole log(\"Reached base case\");\nreturn;\n} else {\n--fcc-editable-region--\ncountDownAndUp(number - 1);\n--fcc-editable-region--\n}\n};\ncountDownAndUp(3);\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4745,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb07132281a380223e458.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2c32b493b5d636b4d620461877359f6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cb1306eb27a397be7f18c\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nIn your base case, log \"Reached base case\" to the console --hints--\nYou should log \"Reached base case\" to the console in your base case js\nassert match(String(countDownAndUp), /if\\s*\\(\\s*number\\s*=== \\s*0\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*Reached base case\\s*\\1\\s*\\)\\s*; \\s*return\\s*; \\s*\\}/i);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e6753c3d13a188806b87e6758edddda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 03rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c4e9847c4e311dc2fa7947f33805b0f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst countDownAndUp = (number) => {\nconsole log(number);\nif (number === 0) {\n--fcc-editable-region--\n--fcc-editable-region--\nreturn;\n} else {\ncountDownAndUp(number - 1);\n}\n};\ncountDownAndUp(3);\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb1306eb27a397be7f18c.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "290128136e41573f2268b5f8dd1ba308",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ca62092c53f29f4ea9bf6\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nTo really see the call stack in action, you just need to modify the function slightly First, rename the countdown() function to countDownAndUp() Remember to update your function calls, too --hints--\nYou should not have a function named countdown() in your code js\nassert notMatch(code, /(var|let|const)\\s+countdown\\s*=\\s*\\(\\s*[^)]*\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nYou should have a function named countDownAndUp() in your code js\nassert isFunction(countDownAndUp);\nWithin the body of the else statement in your countDownAndUp() function, you should call countDownAndUp() with an argument of number - 1 js\nassert match(code, /else\\s*\\{\\s*countDownAndUp\\(\\s*number\\s*-\\s*1\\s*\\)/);\nYou should call countDownAndUp() with an argument of 3 js\nassert match(code, /countDownAndUp\\(\\s*3\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7680f510f2a814759e8f57859cf21f3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ece8da5dc9b05fcda7a07a5c5393f6fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\n--fcc-editable-region--\nconst countdown = (number) => {\nconsole log(number);\nif (number === 0) {\nreturn;\n} else {\ncountdown(number - 1);\n}\n};\ncountdown(3);\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2d7262c7fba011f7631c147bfae7db8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "console log(number); if (number === 0) { return; } else { countdown(number - 1); } }; countdown(3); --fcc-editable-region-- const decimalToBinary = (input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInputvalue) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ca62092c53f29f4ea9bf6.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "32a84827ae25fce831e7c9805382a306",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cb0ce6dc93738b442b0d0\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nNow you should see a countdown from 3 to 0, followed by Reached base case, and a count from 1 to 3 This is because, after the recursive loop is finished, the function will continue to execute the code after the recursive call This is why you see Reached base case before the count from 1 to 3 Now that you have a better understanding of how the call stack and recursion work, you'll refactor the decimalToBinary() function to use recursion instead of a while loop First, remove your countDownAndUp() function and function call --hints--\nYour code should not have a function named countDownAndUp js\nassert notMatch(code, /(var|let|const)\\s+countDownAndUp\\s*=\\s*[\\s\\S]+\\}/);\nYour code should not call the countDownAndUp function js\nassert notMatch(code, /countDownAndUp\\([\\s\\S]+\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "acbe322cd8c586ea03e428e8eb932fc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ad6e9b7e78265d613b0a0a1d36e518a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\n--fcc-editable-region--\nconst countDownAndUp = (number) => {\nconsole log(number);\nif (number === 0) {\nconsole log(\"Reached base case\");\nreturn;\n} else {\ncountDownAndUp(number - 1);\nconsole log(number);\n}\n};\ncountDownAndUp(3);\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ee3943e11e80f5d0f9fa091ba2c7c069",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); --fcc-editable-region-- const countDownAndUp = (number) => { console log(number); if (number === 0) { console log(\"Reached base case\"); return; } else { countDownAndUp(number - 1); console log(number); } }; countDownAndUp(3); --fcc-editable-region-- const decimalToBinary = (input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } resultinnerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb0ce6dc93738b442b0d0.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fdeb97152161af2e7203176d65110827",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cbad5f77ce948b35cf83e\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nFinally, call a() from within a console log() statement to log the output to the console --hints--\nYou should call a() from within a console log() statement js\nassert match(code, /console\\ log\\(\\s*a\\s*\\(\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d68b761131a2c009c37efdfa7eebd354",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b1b7041d205717c299027a5f03bb43c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; }number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbad5f77ce948b35cf83e.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4cab3b05aa331a1af39eb43ca645928c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cb99035b8f046f1d669e4\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nNext, create a function named b that returns the following: \"is \" + c() Also, create a function named c that returns the following: \"awesome \" --hints--\nYou should create a function named b js\nassert isFunction(b);\nYou should create a function named c js\nassert isFunction(c);\nYour function b should return \"is \" + c() js\nassert match(String(b), /return\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)\\s*; /);\nYour function c should return \"awesome \" js\nassert match(String(c), /return\\s*('|\"|`)awesome \\1\\s*; /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a23d94c330464038f62e45e56fd721d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "49bc2174a18b7884edfe55e74ac693a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cb99035b8f046f1d669e4.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7345b00decda75afa481c1b694fc6ec5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cbb5ab1296e49946adb6e\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nIn computer science, a stack is a data structure where items are stored in a LIFO (last-in-first-out) manner If you imagine a stack of books, the last book you add to the stack is the first book you can take off the stack Or an array where you can only push() and pop() elements The call stack is a collection of function calls stored in a stack structure When you call a function, it is added to the top of the stack, and when it returns, it is removed from the top / end of the stack You'll see this in action by creating mock call stack Initialize a variable named callStack and assign it an empty array --hints--\nYou should create a variable named callStack js\nassert exists(callStack);\nYou should assign callStack an empty array js\nassert isArray(callStack);\nassert isEmpty(callStack);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b4f7d8a29d1c56f792318a90475421a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "85142af0b57f2426abb072845e1cabcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f3023459a9ce6974a9c88302699b1ebe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "\"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cbb5ab1296e49946adb6e.md",
      "source_type": "git_repo"
    },
    "token_count": 142,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b787c79efc26753918e233a8638b7755",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cc5925f158b5b33e2698f\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nWhen your code runs, the a() function is added to the call stack first In your callStack array, add the following string: 'a(): returns \"freeCodeCamp \" + b()' This represents the function call and the code that will be executed Note: Since the string you're adding includes double quotation marks (\"), wrap it in single quotation marks (') or backticks (`) --hints--\ncallStack have a single element that is a string js\nassert lengthOf(callStack, 1);\nassert isString(callStack[0]);\nThe string in callStack should be the string 'a(): returns \"freeCodeCamp \" + b()' js\nassert match(callStack[0], /a\\(\\s*\\):\\s*returns\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*b\\s*\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5087,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "eff016941f6a89c1ddf10982afd14aa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5087,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b56a033bd99e1d0309c336f184ffee0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5087,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f74bced062186d3b789d8d5023e4eb9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "(input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5087,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cc5925f158b5b33e2698f.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fb895fe9ffc0af0f7567d1770a62f328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ccf7ec9aca267d84b053e\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nThen, since a() calls b(), the function b() is added to the call stack Next, add the following string to your callStack array: \"b(): returns 'is ' + c()\" Remember that the call stack is a LIFO data structure, so the last function is added to the top or end of the stack, similar to pushing an element into an array --hints--\ncallStack should have two elements that are strings js\nassert lengthOf(callStack, 2);\nassert isTrue(callStack every((element) => typeof element === \"string\"));\nThe second element in callStack should be the string \"b(): returns 'is ' + c()\" js\nassert match(\ncallStack[1],\n/b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fe3d4f1325e9cbf245f79cc2ff9cc390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1a0da3317689e421c6cd0f17a08324cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + b()'\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0b37a075cb4b4ad3328d3a7b7ae10adc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtnaddEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ccf7ec9aca267d84b053e.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fe053a2e03b7ab6e3f2ae879e6cb23a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd17b061afb6a8cba945a\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nAnd since b() calls c(), the function c() is added to the call stack Add the following string to your callStack array: \"c(): returns 'awesome '\" --hints--\ncallStack should have three elements that are strings js\nassert lengthOf(callStack, 3);\nassert isTrue(callStack every((element) => typeof element === \"string\"));\nThe third element in callStack should be the string \"c(): returns 'awesome '\" js\nassert match(\ncallStack[2],\n/c\\(\\s*\\):\\s*returns\\s*('|\"|`)awesome \\1/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ecdf8d3cf95775174e5f1772a13b051f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2d83549e802ba63888483a7f21ebc283",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; }number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + b()',\n'b(): returns \"is \" + c()'\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd17b061afb6a8cba945a.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "857da51185fac174093fb0c9c9fbdfa8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd2b76488fd6cb8d1ae79\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nThen the function b() executes and evaluates to \"is \" + \"awesome \" Update your mock call to b() so it looks like this: \"b(): returns 'is ' + 'awesome '\" --hints--\ncallStack should have two elements that are strings js\nassert lengthOf(callStack, 2);\nassert isTrue(callStack every((element) => typeof element === \"string\"));\nThe final element in callStack should be the string \"b(): returns 'is ' + 'awesome '\" js\nassert match(\ncallStack[callStack length - 1],\n/b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*('|\"|`)awesome \\2/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1d032d2088f567aa7f1b7b1c960c446d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ba977839cb9fc91c60843671030bf920",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + b()',\n'b(): returns \"is \" + c()'\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cb930d85c42730ea5661d220d25ae0f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "(input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInputvalue = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd2b76488fd6cb8d1ae79.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ac7ec3be9d80c5a542e28aca3df51198",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd5b506ed8970b7ea953d\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nFinally, a() returns the concatenated string \"freeCodeCamp is awesome \" Pop a() off the top of the call stack --hints--\ncallStack should be an empty array js\nassert isEmpty(callStack);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a8065ff4db66ad8d5ff1567e9dedaca9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + \"is awesome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "78567519795982dc54c7d76a56fd400d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js --fcc-editable-region-- const callStack = [ 'a(): returns \"freeCodeCamp \" + \"is awesome\"',\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd5b506ed8970b7ea953d.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "39274a156704a58697927bb08b77b77b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd267410ac06bfcaf0bd4\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nYour call stack is complete As you can see, a() is at the bottom or beginning of the stack, which calls b() in the middle, which calls c() at the top or end Once they're all in place, they begin to execute from top to bottom c() executes, returns the string \"awesome \", and is popped off or removed from the top of the stack Remove your \"c(): returns 'awesome '\" string from the top of the callStack array --hints--\ncallStack should have two elements that are strings js\nassert lengthOf(callStack, 2);\nassert isTrue(callStack every((element) => typeof element === \"string\"));\nThe final element in callStack should be the string \"b(): returns 'is ' + c()\" js\nassert match(\ncallStack[callStack length - 1],\n/b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ffe6fa30393b90e34c480d7790c9d5ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "584fc909e9e88b971cd140c056d6a173",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + b()',\n'b(): returns \"is \" + c()',\n'c(): returns \"awesome \"'\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9de4514e6c909e6de713899084ddcb36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "} ``` ```js --fcc-editable-region-- const callStack = [ 'a(): returns \"freeCodeCamp \" + b()', 'b(): returns \"is \" + c()', 'c(): returns \"awesome \"' ]; --fcc-editable-region-- const a = () => { return \"freeCodeCamp \" + b(); }; const b = () => { return \"is \" + c(); }; const c = () => { return \"awesome \"; }; console log(a()); const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd267410ac06bfcaf0bd4.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c66eb11650c498a7b240d30644f7cf89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd4eb6edf6e6f91acabbb\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nNow that b() has executed, pop it off the call stack Then, update your mock call to a() to the following: \"a(): returns 'freeCodeCamp ' + 'is awesome '\" --hints--\ncallStack should have one element that is a string js\nassert lengthOf(callStack, 1);\nassert isString(callStack[0]);\nThe string in callStack should be the string \"a(): returns 'freeCodeCamp ' + 'is awesome '\" js\nassert match(\ncallStack[0],\n/a\\(\\s*\\):\\s*returns\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*('|\"|`)is\\s+awesome \\2/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4973,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "91f2d44456d8286d306d8f413d30432b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4973,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c95514b212aa2d4a73f2489d9ed40474",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [\n'a(): returns \"freeCodeCamp \" + b()',\n'b(): returns \"is \" + \"awesome \"'\n];\n--fcc-editable-region--\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4973,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "307ffe290f6af0ef31bd94ee56b3770a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "(input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInputvalue = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4973,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd4eb6edf6e6f91acabbb.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ec815dc8c8b403988611ee6ba4481f23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd65c33bdc871bb72def4\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nWhile that's a simple example, it demonstrates how the call stack steps through your code and calls multiple functions Now it's time to jump into recursion, and see how the call stack fits into the picture Remove your callStack array, the a(), b(), and c() functions, and the console log() statement --hints--\nYou should remove the callStack array from your code js\nassert notMatch(code, /(var|let|const)\\s+callStack\\s*=\\s*\\[\\s*\\]/);\nYou should remove the a(), b(), and c() functions from your code js\nassert notMatch(code, /(var|let|const)\\s+a\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nassert notMatch(code, /(var|let|const)\\s+b\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nassert notMatch(code, /(var|let|const)\\s+c\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nYour code should not have a console log() statement js\nassert notMatch(code, /console\\ log\\([\\s\\S]+\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6387f2707f3b2f1080c01b9ada5ce7bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "fe40b9d73646cd4b9406457956d90abd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\n--fcc-editable-region--\nconst callStack = [];\nconst a = () => {\nreturn \"freeCodeCamp \" + b();\n};\nconst b = () => {\nreturn \"is \" + c();\n};\nconst c = () => {\nreturn \"awesome \";\n};\nconsole log(a());\n--fcc-editable-region--\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "5da4b47273b3ee953dbfb5cec7b59c3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=> { return \"awesome \"; }; console log(a()); --fcc-editable-region-- const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const decimalToBinary = (input) => { let binary = \"\"; if (input === 0) { binary = \"0\"; } while (input > 0) { binary = (input % 2) + binary; input = Math floor(input / 2); } result innerText = binary; }; const checkUserInput = () => { if ( numberInputvalue ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5273,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd65c33bdc871bb72def4.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "35640eda3b66e361129f34442eb3d771",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645cd8b7f4d8e27526694448\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nNow you'll create a function that will count down from a given number to zero using recursion Create a new function named countdown with number as a parameter Leave the function body empty for now --hints--\nYou should create a function named countdown js\nassert isFunction(countdown);\nYour function countdown should accept number as a parameter js\nassert match(String(countdown), /function\\s+countdown\\s*\\(\\s*number\\s*\\)/);\nThe body of your countdown function should be empty js\nassert match(String(countdown), /function\\s+countdown\\s*\\(\\s*number\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "74f7621af80f64aa290ff832ce1cb1a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "44cf2c4affeb03e1e72e878284e58940",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645cd8b7f4d8e27526694448.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8f2ed882f0e4d1a1e6bf15078c13e134",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ce3c80f1c29824f1a8359\ntitle: Step 67\nchallengeType: 0\ndashedName: step-67\n--description--\nAs a reminder, it's often best to start with the base case when writing a recursive function so you know what you're working towards, and to prevent an infinite loop Similar to your last implementation, you'll divide input by 2 repeatedly until input is 0 Use an if statement to check if input is equal to 0 If it is, return an empty string --hints--\nYou should use an if statement to check if input is equal to 0 js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)/);\nYou should return an empty string if input is equal to 0 js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{ \\s*return\\s*('|\"|`)\\1\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2a0aa741cbf8fe6dfc8cd44691bd971a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6f867b9ac7fb21525e8e17d6cbbca602",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce3c80f1c29824f1a8359.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8451232638bfcb42eec4930283a3da27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ce315efe609814258b0bc\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nThen, remove the contents of your decimalToBinary() function Leave the body of the function empty for now --hints--\nThe body of your decimalToBinary() function should be empty js\nassert match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fbdaa7f3bf9e594675ec6e920d6c0423",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "981682a2052af8f2ff732d2a0391e86a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nlet binary = \"\";\nif (input === 0) {\nbinary = \"0\";\n}\nwhile (input > 0) {\nbinary = (input % 2) + binary;\ninput = Math floor(input / 2);\n}\nresult innerText = binary;\n};\n--fcc-editable-region--\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce315efe609814258b0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5413c151bdc07223566046dad468113c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 645ce4375221138326895726\ntitle: Step 68\nchallengeType: 0\ndashedName: step-68\n--description--\nFor the recursive case, add an else statement and return the result of calling decimalToBinary() Pass in input divided by 2 rounded down with Math floor() as the argument --hints--\nYou should convert your if statement into an if else statement js\nassert match(String(decimalToBinary), /\\{\\s*return\\s+('|\"|`)\\1\\s*; \\s*\\}\\s*else\\s*\\{/);\nWithin the body of your else statement, you should return the result of calling decimalToBinary js\nassert match(String(decimalToBinary), /else\\s*\\{\\s*return\\s+decimalToBinary\\(/);\nYou should pass in input divided by 2 rounded down with Math floor() as the argument to decimalToBinary js\nassert match(String(decimalToBinary), /decimalToBinary\\(\\s*Math\\ floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4830,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6ca24dd3ac3e0cfd0eee89c461c2d876",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4830,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2ce1c11ceb0d5e88ccafb5c0ad9867a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nif (input === 0) {\nreturn \"\";\n}\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4830,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\645ce4375221138326895726.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ca7f4ee71fe39f5ca2d1b3ac6c35226c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64620068f97fe70ea47a9e75\ntitle: Step 71\nchallengeType: 0\ndashedName: step-71\n--description--\nYour converter should be working now Feel free to try out different numbers and think about what is happening each time decimalToBinary() is called But if you test your converter with 0, you'll see that nothing happens This is because you return an empty string in your base case when input is 0 We can fix this now Update your base case so that it returns the string \"0\" when input is equal to 0 --hints--\nYou should return the string \"0\" when input is equal to 0 in your base case js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)\\s*\\{ \\s*return\\s*('|\"|`)0\\1\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "acd972007ee1f12bb4fe33a44bf96e27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "dc364fc7059b95a6bd1ecf54ff13e3e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0) {\n--fcc-editable-region--\nreturn \"\";\n--fcc-editable-region--\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620068f97fe70ea47a9e75.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ec4f7ecbd8ba452659e6be3207313030",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6461f79f4ea2ef042fb2c0f4\ntitle: Step 69\nchallengeType: 0\ndashedName: step-69\n--description--\nThis effectively lowers the input by roughly half each time the decimalToBinary() function is called However, remember that the binary number string is built by calculating the remainder of input divided by 2 and concatenating that to the end After your call to decimalToBinary(), use the addition operator (+) to concatenate the remainder of input divided by 2 to the end of the string your recursive function returns Also, wrap the operation in parentheses --hints--\nYou should use the addition operator (+) to concatenate the remainder of input divided by 2 to the end of the string your recursive function returns js\nassert match(code, /decimalToBinary\\(\\s*Math\\ floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*\\)\\s*\\+\\s*\\( \\s*input\\s*%\\s*2\\s*\\) /);\nYou should wrap input % 2 in parentheses js\nassert match(code, /\\)\\s*\\+\\s*\\(\\s*input\\s*%\\s*2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "56f8846c9b58f04bd1d21a63be779731",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4fa1804796ed8cd5a4f9dd6f4e569232",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0) {\nreturn \"\";\n} else {\n--fcc-editable-region--\nreturn decimalToBinary(Math floor(input / 2));\n--fcc-editable-region--\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\ndecimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "113f6b13efc0fa1f52d0aefdf5e50f43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0) { return \"\"; } else { --fcc-editable-region-- return decimalToBinary(Math floor(input / 2)); --fcc-editable-region-- } }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } decimalToBinary(parseInt(numberInput value)); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461f79f4ea2ef042fb2c0f4.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "463766e59e06e8a4ae3b222f01b6f7ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6461fd4c1bc6620aed6435b2\ntitle: Step 70\nchallengeType: 0\ndashedName: step-70\n--description--\nFinally, in your checkUserInput() function, set the textContent property of result equal to the string returned by your decimalToBinary() function --hints--\nYou should set the textContent property of result equal to the string returned by your decimalToBinary() function js\nassert match(\nString(checkUserInput),\n/result\\ textContent\\s*=\\s*decimalToBinary\\(/\n);\nYou should continue to pass in parseInt(numberInput value) as an argument to decimalToBinary() js\nassert match(\nString(checkUserInput),\n/decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)/\n);\nThe #result element should display the correct binary conversion of the number entered in the #number-input element ```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nnumberInput value = \"20\";\nconvertBtn click();\nassert strictEqual(result textContent, \"10100\");\n```\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "718b78b251762976e8924304a092e857",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "112576bff6e7fef4f13923bea48a831a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0) {\nreturn \"\";\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\n--fcc-editable-region--\ndecimalToBinary(parseInt(numberInput value));\n--fcc-editable-region--\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e2f872a99ca6ede5b46ed9a4879f23c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0) { return \"\"; } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } --fcc-editable-region-- decimalToBinary(parseInt(numberInput value)); --fcc-editable-region-- numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6461fd4c1bc6620aed6435b2.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9ffbf68dbb6e8e117216544244fa7d9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646203cdc054d012b5d71428\ntitle: Step 72\nchallengeType: 0\ndashedName: step-72\n--description--\nThis mostly works – if you convert 0 into binary, 0 is displayed on the page But now when you convert other numbers greater than 0, your binary number starts with a leading 0 For example, if you convert 1, the result is 01 But if you think about it, 0 and 1 in base-10 always convert to 0 and 1 in base-2, respectively So you can add another base case to handle when input is 1 Add an else if statement to your function that checks if input is equal to 1 If it is, return the string \"1\" --hints--\nYou should add an else if statement to your decimalToBinary() function js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\)[\\s\\S]+else\\s+if\\s*\\(/);\nFor the condition of your else if statement, you should check if input is equal to 1 js\nassert match(String(decimalToBinary), /else\\s+if\\s*\\(\\s*input\\s*=== \\s*1\\s*\\)/);\nYou should return the string \"1\" if input is equal to 1 js\nassert match(String(decimalToBinary), /else\\s+if\\s*\\(\\s*input\\s*=== \\s*1\\s*\\)\\s*\\{ \\s*return\\s*('|\"|`)1\\1\\s*; \\s*\\} \\s*else\\s*\\{/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5cbc71190b197b7d5d08ca4009de86b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "the string \"1\" if input is equal to 1 js assert match(String(decimalToBinary), /else\\s+if\\s*\\(\\s*input\\s*=== \\s*1\\s*\\)\\s*\\{ \\s*return\\s*('|\"|`)1\\1\\s*; \\s*\\} \\s*else\\s*\\{/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0300767bb884bc79e93527baea8d315f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d02f85812cba139991cfa1f3882ff200",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nif (input === 0) {\nreturn \"0\";\n}\nelse {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646203cdc054d012b5d71428.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1c7c1d0f0449aa149f0af9e12debd58c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64620800e0c6ab17f0e31d6d\ntitle: Step 74\nchallengeType: 0\ndashedName: step-74\n--description--\nNow your decimalToBinary() function is complete Feel free to test it out If you're still confused about how it works under the hood, don't worry Next, you'll create a simple animation to help you understand what's happening each step of the way Create a new function called showAnimation Leave the body of the function empty for now --hints--\nYou should create a function named showAnimation js\nassert isFunction(showAnimation);\nThe body of your showAnimation function should be empty js\nassert match(String(showAnimation), /function\\s+showAnimation\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bd3713e9e921c01cb38dbf9bf44a3e5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b7b5490cf394c7b061afae60ef6237c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64620800e0c6ab17f0e31d6d.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9f9f2ddd7f0c4b1ccbbf987cf1025977",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6462060b0a8a2c15726649ec\ntitle: Step 73\nchallengeType: 0\ndashedName: step-73\n--description--\nNow everything should work as expected And since you know that input will either be the numbers 0 or 1 at this point, you can combine your two base cases and just return input as a string For a reliable way to convert a value into a string, even falsy values like null and undefined, you can use the String() function For example:\n```js\nconst num = 5;\nconsole log(String(num)); // \"5\"\nconsole log(String(null)); // \"null\"\n```\nCombine your if and else if statements into a single if statement checking if input is equal to 0 or 1 If it is, use the String() function to convert input into a string and return it --hints--\nYour decimalToBinary() function should not have an else if statement js\nassert notMatch(String(decimalToBinary), /else\\s+if\\s*\\([\\s\\S]+\\)/);\nYour decimalToBinary() function should have an if statement that checks if input is equal to 0 or 1 js\nassert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\|\\|\\s*input\\s*=== \\s*1\\s*\\)|if\\s*\\(\\s*input\\s*=== \\s*1\\s*\\|\\|\\s*input\\s*=== \\s*0\\s*\\)/);\nIf input is equal to 0 or 1, your decimalToBinary() function should return String(input) js\nassert match(String(decimalToBinary), /if\\s*\\([\\s\\S]+\\)\\s*\\{ \\s*return\\s+String\\(\\s*input\\s*\\)\\s*; \\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5497,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "117c325a61904e593ed0023feb5f283b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "it is, use the String() function to convert input into a string and return it --hints-- Your decimalToBinary() function should not have an else if statement js assert notMatch(String(decimalToBinary), /else\\s+if\\s*\\([\\s\\S]+\\)/); Your decimalToBinary() function should have an if statement that checks if input is equal to 0 or 1 js assert match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*=== \\s*0\\s*\\|\\|\\s*input\\s*=== \\s*1\\s*\\)|if\\s*\\(\\s*input\\s*=== \\s*1\\s*\\|\\|\\s*input\\s*=== \\s*0\\s*\\)/); If input is equal to 0 or 1, your decimalToBinary() function should return String(input) js assert match(String(decimalToBinary), /if\\s*\\([\\s\\S]+\\)\\s*\\{ \\s*return\\s+String\\(\\s*input\\s*\\)\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5497,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "bdccadb2467495331698aafe3584c891",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5497,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b0a36f1f00a3cb3ce2bda77b20febea8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\nif (input === 0) {\nreturn \"0\";\n} else if (input === 1) {\nreturn \"1\";\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5497,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6462060b0a8a2c15726649ec.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a2f52c58fce329d89295c834d681976f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646463be7341819690797ad2\ntitle: Step 75\nchallengeType: 0\ndashedName: step-75\n--description--\nYou'll show the animation when users try to convert the decimal number 5 to binary, so you'll need to add a check for that within your checkUserInput() function Use an if statement to check if the value attribute of numberInput is equal to the number 5 Remember to use the parseInt() function to convert the string into a number before comparing it to 5 Leave the if statement empty for now --hints--\nYou should add a second if statement to your checkUserInput() function, after the existing if statement js\nassert match(String(checkUserInput), /if\\s*\\(\\s* numberInput\\s*\\ \\s*value\\s*\\|\\|\\s*isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)[\\s\\S]+if\\s*\\(/);\nYou should use the parseInt() function within the condition of your new if statement js\nassert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(/);\nYou should check if the value attribute of numberInput is equal to 5 js\nassert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5\\s*\\)/);\nThe body of your new if statement should be empty js\nassert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "576d512dddfd9cc0de1dd4822c813ed1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "\\s*5\\s*\\)/); The body of your new if statement should be empty js assert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5\\s*\\)\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6e642ccdabac6d831fc304927fce72c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7560ab34f133898e862b1607e6f4c9a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646463be7341819690797ad2.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ceda70fb54da75e44c7fdbeef7ed3af3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64646577f28ade99100a55c3\ntitle: Step 77\nchallengeType: 0\ndashedName: step-77\n--description--\nNow your showAnimation() function is set up But if you look at your checkUserInput() function, you'll notice that it is calling parseInt() to convert numberInput value into a number several times This is generally a poor practice, for reasons like performance concerns or even just the fact that you'd have to change your logic in multiple places to update the parseInt() call To fix this, create a new variable to store the converted number Then you only have to convert the number once and can use it throughout the function Create a new variable called inputInt and assign it the number converted from numberInput value --hints--\nYou should create a new variable called inputInt js\nassert match(\nString(checkUserInput),\n/(var|let|const)\\s+inputInt/\n);\nYou should use the parseInt() function to convert the value of numberInput into a number and assign it to inputInt js\nassert match(\nString(checkUserInput),\n/(var|let|const)\\s+inputInt\\s*=\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b54af0c393927c185e71fd536615c70c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "dc750328f2f43904bd103c2af5990102",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n};\nconst checkUserInput = () => {\n--fcc-editable-region--\n--fcc-editable-region--\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (parseInt(numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "dcd0f1f2937202becb884797d056443a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { }; const checkUserInput = () => { --fcc-editable-region-- --fcc-editable-region-- if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (parseInt(numberInputvalue) === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646577f28ade99100a55c3.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a8c807e10b3a615018e51d1802c3f816",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464650a962e3d9852713549\ntitle: Step 76\nchallengeType: 0\ndashedName: step-76\n--description--\nIf the value of numberInput is equal to 5, call the showAnimation() function, then return early --hints--\nYou should call the showAnimation() function within the body of your second if statement js\nassert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5\\s*\\)\\s*\\{\\s*showAnimation\\(\\s*\\)/);\nAfter calling the showAnimation() function, you should use the return keyword to exit the checkUserInput() function early js\nassert match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5\\s*\\)\\s*\\{\\s*showAnimation\\(\\s*\\)\\s*; \\s*return\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "82896e084a23a67706f63b2a35d130c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ee3dce73e500afef0b9d6d51ba5cb287",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n};\nconst checkUserInput = () => {\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (parseInt(numberInput value) === 5) {\n--fcc-editable-region--\n--fcc-editable-region--\n}\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0d49fb58580ea47d9379b0a81b04ccd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { }; const checkUserInput = () => { if ( numberInput value || isNaN(parseInt(numberInput value)) || parseInt(numberInput value) < 0 ) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (parseInt(numberInput value) === 5) { --fcc-editable-region-- --fcc-editable-region-- } resulttextContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464650a962e3d9852713549.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5af8e967293b3bb02a89b0a184aa7a93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646467683f25e19bfc9cf9b0\ntitle: Step 79\nchallengeType: 0\ndashedName: step-79\n--description--\nNow that your showAnimation() function is set up, let's do some testing Add three console log() statements in the showAnimation() function to log the text \"free\", \"Code\", and \"Camp\" to the console You should see that text in the console when you enter 5 into the number input and click the Convert button --hints--\nYou should add a console log() statement for the string \"free\" js\nassert match(String(showAnimation), /console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)/i);\nYou should add a console log() statement for the string \"Code\" js\nassert match(String(showAnimation), /console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)/i);\nYou should add a console log() statement for the string \"Camp\" js\nassert match(String(showAnimation), /console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)/i);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "04294bb4d019197178562381bc12c195",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "774ad12cc2a5deff46886805af6b23b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "96962232bdc14acdaf2b7ece4e11a25d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { --fcc-editable-region-- --fcc-editable-region-- }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467683f25e19bfc9cf9b0.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a95c7d341ab01b97b3a05e44a22639ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64646bc0e5a60ea131e03f91\ntitle: Step 80\nchallengeType: 0\ndashedName: step-80\n--description--\nBefore you start writing code for the animation, let's take a look at the function you'll use to add and remove elements from the DOM: setTimeout The setTimeout function takes two arguments: a callback function and a number representing the time in milliseconds to wait before executing the callback function For example, if you wanted to log \"Hello, world \" to the console after 3 seconds, you would write:\njs\nsetTimeout(() => {\nconsole log(\"Hello, world \");\n}, 3000);\nUse the setTimeout function to add a one second delay before the text \"Code\" is logged to the console Then see what happens after you enter 5 into the number input and click the Convert button --hints--\nYour showAnimation() function should contain a call to the setTimeout function js\nassert match(code, /setTimeout\\(/);\nYou should pass a callback function as the first argument to the setTimeout function js\nassert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/);\nWithin the callback function, you should log the text \"Code\" to the console js\nassert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\2\\s*\\)/i);\nYou should pass 1000 as the second argument to the setTimeout function js\nassert match(code, /console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)\\s*; \\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9b37dd8cda09ece81bb2bb8e2a2ac056",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "the Convert button --hints-- Your showAnimation() function should contain a call to the setTimeout function js assert match(code, /setTimeout\\(/); You should pass a callback function as the first argument to the setTimeout function js assert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/); Within the callback function, you should log the text \"Code\" to the console js assert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\2\\s*\\)/i); You should pass 1000 as the second argument to the setTimeout function js assert match(code, /console\\ log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)\\s*; \\s*\\}\\s*,\\s*1000\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d5ea8f961a1e569d469dbedc81bc42fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "2b846abd3cd048c8d6a847f0ae37c26e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nconsole log(\"free\");\n--fcc-editable-region--\nconsole log(\"Code\");\n--fcc-editable-region--\nconsole log(\"Camp\");\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d132134a0031c1813bdfa9b175024915",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { console log(\"free\"); --fcc-editable-region-- console log(\"Code\"); --fcc-editable-region-- console log(\"Camp\"); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646bc0e5a60ea131e03f91.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d5b6d44e01dc9f42777e350236232a6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646467130d7acc9b4e565c42\ntitle: Step 78\nchallengeType: 0\ndashedName: step-78\n--description--\nReplace all instances of parseInt(numberInput value) with inputInt --hints--\nYou should replace isNaN(parseInt(numberInput value)) with isNaN(inputInt) and parseInt(numberInput value) < 0 with inputInt < 0 js\nassert notMatch(\nString(checkUserInput),\n/isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\|\\|s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\<\\s*0/\n);\nassert match(\nString(checkUserInput),\n/isNaN\\(\\s*inputInt\\s*\\)\\s*\\|\\|\\s*inputInt\\s*\\<\\s*0/\n);\nYou should replace parseInt(numberInput value) === 5 with inputInt === 5 js\nassert notMatch(\nString(checkUserInput),\n/parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5/\n);\nassert match(\nString(checkUserInput),\n/inputInt\\s*=== \\s*5/\n);\nYou should replace decimalToBinary(parseInt(numberInput value)) with decimalToBinary(inputInt) js\nassert notMatch(\nString(checkUserInput),\n/decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)/\n);\nassert match(\nString(checkUserInput),\n/decimalToBinary\\(\\s*inputInt\\s*\\)/\n);\nYour checkUserInput() function should only contain one instance of parseInt(numberInput value) js\nassert lengthOf(\nString(checkUserInput) match(/parseInt\\(\\s*numberInput\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4368ad536624f37fb75648e33f457fe7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "inputInt < 0 js assert notMatch( String(checkUserInput), /isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)\\s*\\|\\|s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\<\\s*0/ ); assert match( String(checkUserInput), /isNaN\\(\\s*inputInt\\s*\\)\\s*\\|\\|\\s*inputInt\\s*\\<\\s*0/ ); You should replace parseInt(numberInput value) === 5 with inputInt === 5 js assert notMatch( String(checkUserInput), /parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*=== \\s*5/ ); assert match( String(checkUserInput), /inputInt\\s*=== \\s*5/ ); You should replace decimalToBinary(parseInt(numberInput value)) with decimalToBinary(inputInt) js assert notMatch( String(checkUserInput), /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\ \\s*value\\s*\\)\\s*\\)/ ); assert match( String(checkUserInput), /decimalToBinary\\(\\s*inputInt\\s*\\)/ ); Your checkUserInput() function should only contain one instance of parseInt(numberInput value) js assert lengthOf( String(checkUserInput) match(/parseInt\\(\\s*numberInput\\s*\\\\s*value\\s*\\)/g),\n1\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "202bbc3cc3b32e7f5a7fa9543647dd38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "String(checkUserInput) match(/parseInt\\(\\s*numberInput\\s*\\\\s*value\\s*\\)/g), 1 ); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "73004f34aedf059d0667df7708d25e33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2588bd2f789823a5fa17438ac47ca134",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n};\nconst checkUserInput = () => {\n--fcc-editable-region--\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value ||\nisNaN(parseInt(numberInput value)) ||\nparseInt(numberInput value) < 0\n) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (parseInt(numberInput value) === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(parseInt(numberInput value));\nnumberInput value = \"\";\n--fcc-editable-region--\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646467130d7acc9b4e565c42.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "96cf71a021281a424cfa8479e9efdc7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64646db2c684b7a3a174a1d0\ntitle: Step 81\nchallengeType: 0\ndashedName: step-81\n--description--\nIf you test your code, you'll notice that your console logs are not in the expected order Instead of logging \"free\", pausing for a second before logging \"Code\", and finally logging \"Camp\", you'll see this:\nmd\nfree\nCamp\nCode\nThis is because the setTimeout() function is asynchronous, meaning that it doesn't stop the execution of the rest of your code All the code in the showAnimation() function runs line by line, but because setTimeout() is asynchronous, free and Camp are logged to the console immediately, and then Code is logged to the console after a one second delay One way to fix this is to use multiple setTimeout() functions Use setTimeout() to log free to the console after half a second, or 500 milliseconds --hints--\nYou should add a second setTimeout() function to your showAnimation() function js\nassert lengthOf(\ncode match(/setTimeout\\(/g),\n2\n);\nYou should pass a callback function as the first argument to the new setTimeout() function js\nassert lengthOf(\ncode match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g),\n2\n);\nWithin the new setTimeout() function's callback, you should log the text \"free\" to the console js\nassert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\2\\s*\\)/i);\nYou should pass 500 as the second argument to the new setTimeout() function js\nassert match(code, /console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)\\s*; \\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "874ed81f2980a35667a0525d6140b350",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "function to your showAnimation() function js assert lengthOf( code match(/setTimeout\\(/g), 2 ); You should pass a callback function as the first argument to the new setTimeout() function js assert lengthOf( code match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g), 2 ); Within the new setTimeout() function's callback, you should log the text \"free\" to the console js assert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\2\\s*\\)/i); You should pass 500 as the second argument to the new setTimeout() function js assert match(code, /console\\ log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)\\s*; \\s*\\}\\s*,\\s*500\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "8ce8d4bae6a30a46f95eac02aaa4ec95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "63972e2f563520db75018d8bd9269596",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n--fcc-editable-region--\nconsole log(\"free\");\n--fcc-editable-region--\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nconsole log(\"Camp\");\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6197f9cc054a7af88e91f37d8722ba68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { --fcc-editable-region-- console log(\"free\"); --fcc-editable-region-- setTimeout(() => { console log(\"Code\"); }, 1000); console log(\"Camp\"); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5976,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64646db2c684b7a3a174a1d0.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "3834c8aabedf062e3286333bd7db50bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64647cf70a4556b5105e65b2\ntitle: Step 83\nchallengeType: 0\ndashedName: step-83\n--description--\nNow you're ready to start on the animation itself You'll use an array of objects to store data for each frame of the animation First, create a new variable called animationData and assign it an empty array --hints--\nYou should create a variable named animationData js\nassert exists(animationData);\nYour animationData variable should be an empty array js\nassert isArray(animationData);\nassert isEmpty(animationData);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "db01956547120149747cc13ee4994b96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9bd4d951bd2170761a968045fa71cf05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64647cf70a4556b5105e65b2.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d015e5a91561ae35ffb1126d53c7f3b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646477c82475ffaf0c3c0771\ntitle: Step 82\nchallengeType: 0\ndashedName: step-82\n--description--\nWhile asynchronous, or async, code can be difficult to understand at first, it has many advantages One of the most important is that it allows you to write non-blocking code For example, imagine you're baking a cake, and you put the cake in the oven and set a timer You don't have to sit in front of the oven waiting the entire time – you can wash dishes, read a book, or do anything else while you wait for the timer to go off Async code works in a similar way You can start an async operation and other parts of your code will still work while that operation is running You'll learn more about async code in future projects, but the setTimeout() function is a good introduction Add a 1500 millisecond delay before the text \"Camp\" is logged to the console --hints--\nYou should add a third setTimeout() function to your showAnimation() function js\nassert lengthOf(\ncode match(/setTimeout\\(/g),\n3\n);\nYou should pass a callback function as the first argument to the new setTimeout() function js\nassert lengthOf(\ncode match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g),\n3\n);\nWithin the new setTimeout() function's callback, you should log the text Camp to the console js\nassert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\2\\s*\\)/i);\nYou should pass 1500 as the second argument to the new setTimeout() function js\nassert match(code, /console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)\\s*; \\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "621c559cbdafbf5a04a5f9eefe8629cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "function to your showAnimation() function js assert lengthOf( code match(/setTimeout\\(/g), 3 ); You should pass a callback function as the first argument to the new setTimeout() function js assert lengthOf( code match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ |setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g), 3 ); Within the new setTimeout() function's callback, you should log the text Camp to the console js assert match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{ \\s*console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\2\\s*\\)/i); You should pass 1500 as the second argument to the new setTimeout() function js assert match(code, /console\\ log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)\\s*; \\s*\\}\\s*,\\s*1500\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6ab8b4daa208182f942906294476d97b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "01541f3e3a97ce0675dff5301311a114",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\n--fcc-editable-region--\nconsole log(\"Camp\");\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "39b95543640436410d6e018317188d56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { setTimeout(() => { console log(\"free\"); }, 500); setTimeout(() => { console log(\"Code\"); }, 1000); --fcc-editable-region-- console log(\"Camp\"); --fcc-editable-region-- }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646477c82475ffaf0c3c0771.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b480b3320e8d20f644008cde4eea1351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646486adf52652c0ee103aab\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nRecall that the call stack is a LIFO (last in, first out) data structure This means that, as functions are called, they are added to the top or end of the stack, and as functions return, they are removed from the top of the stack Treat your animationData array as a stack and add a new object to it Your new object should have the properties inputVal, and addElDelay set to 2, and 1500, respectively Remember to add this object to the top of the stack, or in other words, to the end of the animationData array --hints--\nThe animationData array should have a length of 2 js\nassert lengthOf(animationData, 2);\nEach element in the animationData array should be an object js\nassert isTrue(animationData every((el) => typeof el === 'object'));\nYou should add an inputVal property to the object at the top of the stack js\nassert property(animationData[1], 'inputVal');\nYou should set the value of the inputVal property to the number 2 js\nassert propertyVal(animationData[1], 'inputVal', 2);\nYou should add an addElDelay property to the object at the top of the stack js\nassert property(animationData[1], 'addElDelay');\nYou should set the value of the addElDelay property to the number 1500 js\nassert propertyVal(animationData[1], 'addElDelay', 1500);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2dac68e10d994fac1bc6ca6df6669c75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "should set the value of the addElDelay property to the number 1500 js assert propertyVal(animationData[1], 'addElDelay', 1500); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6c480464ed5c4c8e02f22873b02f1857",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e12db484cf5382dc6e47e30d5adc4cad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = documentgetElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n{\ninputVal: 5,\naddElDelay: 1000\n}\n--fcc-editable-region--\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646486adf52652c0ee103aab.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ad9c462714faff75dcdf590193c7d2c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64648534ff5498bee5dceb28\ntitle: Step 84\nchallengeType: 0\ndashedName: step-84\n--description--\nNext, you'll create an object to represent the first frame of your animation Your object should have two properties or keys: inputVal, and addElDelay inputVal will represent the value of the input each time your recursive function runs And addElDelay will be the delay between adding DOM elements to the page Add an object to animationData with an inputVal property set to 5, and an addElDelay property set to 1000 --hints--\nThe animationData array should have a length of 1 js\nassert lengthOf(animationData, 1);\nThe animationData array should contain an object js\nassert isObject(animationData[0]);\nYou should add an inputVal property to the object js\nassert property(animationData[0], 'inputVal');\nYou should set the value of the inputVal property to the number 5 js\nassert propertyVal(\nanimationData[0],\n'inputVal',\n5\n);\nYou should add an addElDelay property to the object js\nassert property(animationData[0], 'addElDelay');\nYou should set the value of the addElDelay property to the number 1000 js\nassert propertyVal(\nanimationData[0],\n'addElDelay',\n1000\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3f4b5daf77a99bee112c1da4e1f9da2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7f2259803094b93a5f2d90e3b809dd7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n--fcc-editable-region--\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8415710b11f4e468d8aff53ca4714134",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "--fcc-editable-region-- --fcc-editable-region-- ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { setTimeout(() => { console log(\"free\"); }, 500); setTimeout(() => { console log(\"Code\"); }, 1000); setTimeout(() => { console log(\"Camp\"); }, 1500); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648534ff5498bee5dceb28.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "36168ce625e945318f0a840af63812ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64648c3703ad2ec796ab8d1e\ntitle: Step 88\nchallengeType: 0\ndashedName: step-88\n--description--\nNext, clear out your showAnimation() function by removing all of your setTimeout() calls --hints--\nYou should remove all of the setTimeout() calls from your showAnimation() function js\nassert notMatch(String(showAnimation), /setTimeout\\(/);\nThe body of your showAnimation() function should be empty js\nassert match(String(showAnimation), /function\\s+showAnimation\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "23ce114b74b15ced3faa7743ad02327b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7e560641606a5457134f025ff7850339",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n--fcc-editable-region--\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648c3703ad2ec796ab8d1e.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "12d3de3f1d86093742f58e01f94857e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64648963e014f8c42a65b83a\ntitle: Step 86\nchallengeType: 0\ndashedName: step-86\n--description--\nAdd another object to the animationData array Your new object should have the properties inputVal, and addElDelay set to 1, and 2000, respectively Remember to treat the animationData array as a stack and add the new object to the top of the stack --hints--\nThe animationData array should have a length of 3 js\nassert lengthOf(animationData, 3);\nEach element in the animationData array should be an object js\nassert isTrue(animationData every((el) => typeof el === 'object'));\nYou should add an inputVal property to the object at the top of the stack js\nassert property(animationData[2], 'inputVal');\nYou should set the value of the inputVal property to the number 1 js\nassert propertyVal(animationData[2], 'inputVal', 1);\nYou should add an addElDelay property to the object at the top of the stack js\nassert property(animationData[2], 'addElDelay');\nYou should set the value of the addElDelay property to the number 2000 js\nassert propertyVal(animationData[2], 'addElDelay', 2000);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b10e27da4a10e3d682baf240c21792b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a7364ccbe60c37928a0e2dd44c9c9f0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n--fcc-editable-region--\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4be666150dff92b1e90befb1aaee16d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationData = [ --fcc-editable-region-- { inputVal: 5, addElDelay: 1000 }, { inputVal: 2, addElDelay: 1500 }, --fcc-editable-region-- ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { setTimeout(() => { console log(\"free\"); }, 500); setTimeout(() => { consolelog(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648963e014f8c42a65b83a.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fd138274508eabc2e25c7fca51e0c595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64648cf52e1ce1c8c00956ae\ntitle: Step 89\nchallengeType: 0\ndashedName: step-89\n--description--\nNow you'll start building the animation itself First, set the innerText property of result to \"Call Stack Animation\" --hints--\nYou should set the innerText property of result to the string \"Call Stack Animation\" js\nassert match(String(showAnimation), /result\\ innerText\\s*=\\s*('|\"|`)Call Stack Animation\\1/i);\nAfter calling the showAnimation function, the innerText property of result should be \"Call Stack Animation\" ```js\nconst result = document getElementById(\"result\");\nshowAnimation();\nassert strictEqual(result innerText trim() toLowerCase(), \"call stack animation\");\n```\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5094,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b0dacae63d3b6f6cecc4ab1d7d4c11c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5094,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1f9f83082b3d954955229f188d814553",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5094,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bdc222477f02134213ae19cd8d62a0e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=== 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { --fcc-editable-region-- --fcc-editable-region-- }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } resulttextContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5094,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64648cf52e1ce1c8c00956ae.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b34cc10a3953ea7024b78c7b8314b7c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464905afec9efcf7328ce58\ntitle: Step 90\nchallengeType: 0\ndashedName: step-90\n--description--\nNext, use the forEach() method to loop through the animationData array For the forEach() method's callback function, pass in obj as a parameter, but leave the body of the callback function empty for now --hints--\nYou should use the forEach() method to loop through the animationData array js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\(/);\nYou should pass in obj as a parameter to the forEach() method's callback function js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\(\\s*(\\(\\s*obj\\s*\\)|obj)\\s*=>\\s*\\{|animationData\\s*\\ \\s*forEach\\(\\s*function\\s*\\(\\s*obj\\s*\\)\\s*\\{/);\nThe body of your forEach() method's callback function should be empty js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9637ba68ba5f733edfa8f8ea4b2a7dae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "79875ea4a167accf611aaf2d659da112",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0c73eb182349be66a1026572fceb7be4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000 }, { inputVal: 2, addElDelay: 1500 }, { inputVal: 1, addElDelay: 2000 } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { resultinnerText = \"Call Stack Animation\";\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464905afec9efcf7328ce58.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c3a277a6fccf1e19ac99658d974bdfc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646491d2c856afd17c2f380d\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nSince you have the timing for each frame of animation stored in addElDelay, you can use that value with setTimeout() to set up the delay to add elements to the DOM Within the body of the forEach() method's callback function, add a setTimeout() function Pass in an empty callback function as the first argument, and obj addElDelay as the second argument --hints--\nYou should add the setTimeout() function within the body of your forEach() method's callback function js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(/);\nYou should pass in an empty callback function as the first argument to the setTimeout() function js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{|animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/);\nThe body of your setTimeout() function's callback function should be empty js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\([\\s\\S]+\\{\\s*\\}/);\nYou should pass in obj addElDelay as the second argument to the setTimeout() function js\nassert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\([\\s\\S]+,\\s*obj\\s*\\ \\s*addElDelay\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c0b4af5c956d61f481dc63fc3b0d8a26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "in obj addElDelay as the second argument to the setTimeout() function js assert match(String(showAnimation), /animationData\\s*\\ \\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\([\\s\\S]+,\\s*obj\\s*\\ \\s*addElDelay\\s*\\)/); --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2916bc17dbfac70836a49fe9ae77b7d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9a310cf1b8fd3a8d2e76c43c7a1ff5ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\n--fcc-editable-region--\n--fcc-editable-region--\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646491d2c856afd17c2f380d.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c80caaa9228f02adf9d6940c9838f950",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646492f5c672c9d32f340c22\ntitle: Step 92\nchallengeType: 0\ndashedName: step-92\n--description--\nThen, use the compound assignment operator (+=) to set the innerHTML property of the animationContainer to an empty template literal string --hints--\nYou should use the compound assignment operator (+=) to set the innerHTML property of the animationContainer to an empty template literal string js\nassert match(code, /setTimeout\\([\\s\\S]+\\{\\s*animationContainer\\ innerHTML\\s*\\+=\\s*``/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0af60ae910e5586098f6cbadf68b1f20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "35360a6c1e121b2a665745c947929fd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\n--fcc-editable-region--\n--fcc-editable-region--\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646492f5c672c9d32f340c22.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "20dff581b0e5407d98ab8323e4c32f18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 646493b7dc53b5d45c9c50fc\ntitle: Step 87\nchallengeType: 0\ndashedName: step-87\n--description--\nNow you'll start building the animation itself First, use the document getElementById() method to select the element with the id animation-container and assign it to a variable called animationContainer --hints--\nYou should use the document getElementById() method to get the #animation-container element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)animation-container\\1\\s*\\)/);\nYou should use const to declare a variable called animationContainer and assign it the #animation-container element js\nassert match(code, /const\\s+animationContainer\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)animation-container\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "64539fd9f95e5f31768132d1d4076f9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "26897dd39943eb7ee9149fc356c9b487",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nsetTimeout(() => {\nconsole log(\"free\");\n}, 500);\nsetTimeout(() => {\nconsole log(\"Code\");\n}, 1000);\nsetTimeout(() => {\nconsole log(\"Camp\");\n}, 1500);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "de587e57bfd2ce256d37b44dea4d99d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2000 } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { setTimeout(() => { console log(\"free\"); }, 500); setTimeout(() => { console log(\"Code\"); }, 1000); setTimeout(() => { console log(\"Camp\"); }, 1500); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\646493b7dc53b5d45c9c50fc.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "edb43fbb715536564d65e438960c6785",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64649efb555939e30462c79b\ntitle: Step 95\nchallengeType: 0\ndashedName: step-95\n--description--\nAdd a class attribute set to \"animation-frame\" --hints--\nYou should add a class attribute to the paragraph element js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+class/\n);\nYou should set the value of the class attribute to \"animation-frame\" js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+class\\s*\\=\\s*('|\"|`)\\s*animation-frame\\s*\\1/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ee318a4645eaa06df906bbad05522cb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "521e8383f142e3dce8f7f7a5b5289e6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += --fcc-editable-region--\n<p id=\"${obj inputVal}\"></p>\n--fcc-editable-region--;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a8da5c2f3e1f7411b6f3c84d55ab1826",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ animationContainer innerHTML += --fcc-editable-region-- <p id=\"${obj inputVal}\"></p> --fcc-editable-region--; }, obj addElDelay); }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649efb555939e30462c79b.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4f256ad98fa3308a0f6b96356b7e24fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64649f91446721e3ff391d88\ntitle: Step 96\nchallengeType: 0\ndashedName: step-96\n--description--\nFinally, use string interpolation to set the text of the paragraph element to decimalToBinary(${currVal}), where currVal is the inputVal property of the current object After this, test out your code by entering the number 5 into the number input and clicking the Convert button --hints--\nYou should use string interpolation to set the text of the paragraph element to decimalToBinary(${obj inputVal}) js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+>\\s*decimalToBinary\\s*\\(\\s*\\$\\{\\s*obj\\ inputVal\\s*\\}\\s*\\)\\s*<\\s*\\/\\s*p\\s*>\\s*`|animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+>\\s*decimalToBinary\\s*\\(\\s*\\$\\{\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\}\\s*\\)\\s*<\\s*\\/\\s*p\\s*>\\s*`/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9e6435d6302711aa52c1568c75c83f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "78d64b485b30a467203929d792205f2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "013567888d4d331e5d90b945b2543609",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000 }, { inputVal: 2, addElDelay: 1500 }, { inputVal: 1, addElDelay: 2000 } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationDataforEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += `\n--fcc-editable-region--\n--fcc-editable-region--\n`;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649f91446721e3ff391d88.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "89a4ed37a6e60aea40c5fefd9c6fb618",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64649b243b9cc3ddabacc593\ntitle: Step 93\nchallengeType: 0\ndashedName: step-93\n--description--\nWithin the template literal, add a paragraph element with the id attribute equal to an empty string --hints--\nYou should add an id attribute to the paragraph element js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p\\s+id/\n);\nYou should set the value of the id attribute to an empty string js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\1\\s*>/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2fa24e35c168212c3eb0fd1d00354ac5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a16049b9a91418ce3328f72ff8b8237b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\n--fcc-editable-region--\nanimationContainer innerHTML += ``;\n--fcc-editable-region--\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649b243b9cc3ddabacc593.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0b8fb2db73cde7f46ddfc494af95dcc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 64649c6d77059edf80279a32\ntitle: Step 94\nchallengeType: 0\ndashedName: step-94\n--description--\nNext, use string interpolation to set the id attribute to the inputVal property of the current object, obj --hints--\nYou should use string interpolation to set the id attribute to the inputVal property of obj js\nassert match(\ncode,\n/animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\s*\\$\\{\\s*obj\\ inputVal\\s*\\}\\s*\\1\\s*>\\s*<\\s*\\/\\s*p\\s*>\\s*`|animationContainer\\ innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\s*\\$\\{\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\3\\s*\\]\\s*\\}\\2\\s*>\\s*<\\s*\\/\\s*p\\s*>\\s*`/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5504ee665978c8ba3c4a9ba9c42f784f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "#f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; }input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2971bc567663aac52fbe2ef9f676ed6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "25a76ea4cb3c78c379a388005a689a65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000 }, { inputVal: 2, addElDelay: 1500 }, { inputVal: 1, addElDelay: 2000 } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationDataforEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += --fcc-editable-region--\n<p id=\"\"></p>\n--fcc-editable-region--;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\64649c6d77059edf80279a32.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ea530b8e9a79ad86cff2bc34d3c92535",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464a057702d04e537d56d49\ntitle: Step 97\nchallengeType: 0\ndashedName: step-97\n--description--\nNow it's time to set up for the next phase of the animation where you'll update and remove the paragraphs you append to the DOM during the animation Add the property msg to the animation object at the top of the stack, and set its value to an empty string --hints--\nYou should add the property msg to the animation object at the top of the stack js\nassert property(\nanimationData[2],\n'msg',\n)\nYou should set the value of the msg property to an empty string js\nassert propertyVal(\nanimationData[2],\n'msg',\n''\n)\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5323,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2e763c7c6850c309f9dda1b149c328f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5323,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5eeec6b154dcea33c044afec722b5ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n--fcc-editable-region--\n{\ninputVal: 1,\naddElDelay: 2000\n}\n--fcc-editable-region--\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5323,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8b9a92ccc87970c69f156abc51b886cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=> { setTimeout(() => { animationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\"> decimalToBinary(${obj inputVal}) </p>; }, obj addElDelay); }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5323,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a057702d04e537d56d49.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0dc32986c058256e0d850912023a9e85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464a6d98c43acecb8a7867b\ntitle: Step 98\nchallengeType: 0\ndashedName: step-98\n--description--\nSet the value of the msg property to the following string:\nmd\n\"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \"\n--hints--\nYour animation object at the top of the stack should have msg property js\nassert property(\nanimationData[2],\n'msg',\n)\nYou should set the value of the msg property to \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \"\njs\nassert match(\nanimationData[2] msg,\n/decimalToBinary\\s*\\(\\s*1\\s*\\)\\s*returns\\s*('|\"|`)1\\s*\\1\\s*\\(\\s*base\\s+case\\s*\\)\\s*and\\s*gives\\s*that\\s+value\\s+to\\s+the\\s+stack\\s+below\\ \\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\ /i\n)\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4dad68097b4f0fc156b8af6cd759cb8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e5738f9451d8a57f0b565c7f5f0aad53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n{\ninputVal: 1,\naddElDelay: 2000,\n--fcc-editable-region--\nmsg: \"\"\n--fcc-editable-region--\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a1cd8967843600637dfb05122d70fed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000 }, { inputVal: 2, addElDelay: 1500 }, { inputVal: 1, addElDelay: 2000, --fcc-editable-region-- msg: \"\" --fcc-editable-region-- } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { resultinnerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a6d98c43acecb8a7867b.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2e76198bff77d470b0f78f5614acced3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464aabd17cd45f1d17cfe56\ntitle: Step 100\nchallengeType: 0\ndashedName: step-100\n--description--\nFor the object in the middle of the stack, add the property msg set to the following string:\nmd\n\"decimalToBinary(2) returns '1' + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack \"\nAlso, add the property showMsgDelay set to 10000 and the property removeElDelay set to 15000 --hints--\nYou should add the property msg to the animation object in the middle of the stack js\nassert property(\nanimationData[1],\n'msg',\n)\nYou should set the value of the msg property to \"decimalToBinary(2) returns '1' + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack \"\njs\nassert match(\nanimationData[1] msg,\n/decimalToBinary\\s*\\(\\s*2\\s*\\)\\s*returns\\s*('|\"|`)1\\s*\\1\\s*\\+\\s*0\\s*\\(\\s*2\\s*%\\s*2\\s*\\)\\s*and\\s*gives\\s*that\\s+value\\s+to\\s+the\\s+stack\\s+below\\ \\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\ /i\n)\nYou should add the property showMsgDelay to the animation object in the middle of the stack js\nassert property(\nanimationData[1],\n'showMsgDelay',\n)\nYou should set the value of the showMsgDelay property to 10000 js\nassert propertyVal(\nanimationData[1],\n'showMsgDelay',\n10000\n)\nYou should add the property removeElDelay to the animation object in the middle of the stack js\nassert property(\nanimationData[1],\n'removeElDelay',\n)\nYou should set the value of the removeElDelay property to 15000 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "799efd328f6e2958d14a4335e1fde99e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": ") You should add the property showMsgDelay to the animation object in the middle of the stack js assert property( animationData[1], 'showMsgDelay', ) You should set the value of the showMsgDelay property to 10000 js assert propertyVal( animationData[1], 'showMsgDelay', 10000 ) You should add the property removeElDelay to the animation object in the middle of the stack js assert property( animationData[1], 'removeElDelay', ) You should set the value of the removeElDelay property to 15000 js assertpropertyVal(\nanimationData[1],\n'removeElDelay',\n15000\n)\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "01ae9dbd4153580a71203c5d50a0bd6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b80b0cc928249912cfeb4814dd9e90d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n--fcc-editable-region--\n{\ninputVal: 2,\naddElDelay: 1500\n},\n--fcc-editable-region--\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "be1e7d276ee3de7a35ac66e70f367c80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=> { setTimeout(() => { animationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\"> decimalToBinary(${obj inputVal}) </p>; }, obj addElDelay); }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464aabd17cd45f1d17cfe56.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "2f452c66922325b15999e889cd58a134",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464a9f7d81939f08d04f435\ntitle: Step 99\nchallengeType: 0\ndashedName: step-99\n--description--\nNext, add the property showMsgDelay with the value 5000 and removeElDelay with the value 10000 --hints--\nYou should add the property showMsgDelay to the animation object at the top of the stack js\nassert property(\nanimationData[2],\n'showMsgDelay',\n)\nYou should set the value of the showMsgDelay property to 5000 js\nassert propertyVal(\nanimationData[2],\n'showMsgDelay',\n5000\n)\nYou should add the property removeElDelay to the animation object at the top of the stack js\nassert property(\nanimationData[2],\n'removeElDelay',\n)\nYou should set the value of the removeElDelay property to 10000 js\nassert propertyVal(\nanimationData[2],\n'removeElDelay',\n10000\n)\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1e0ac855dc3993e08d7e91a0f844e184",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6e24b2f056273ad23a2c858408607c81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000\n},\n{\ninputVal: 2,\naddElDelay: 1500\n},\n--fcc-editable-region--\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \"\n}\n--fcc-editable-region--\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "89776ae1748bc9a2eccccc006aa967f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "and gives that value to the stack below Then it pops off the stack \" } --fcc-editable-region-- ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationData forEach((obj) => { setTimeout(() => { animationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\"> decimalToBinary(${objinputVal})\n</p>;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464a9f7d81939f08d04f435.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "09230eab11555bfcf5248e8c1b430b8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464abfb6cf778f3cb33d379\ntitle: Step 102\nchallengeType: 0\ndashedName: step-102\n--description--\nFor the next phase of the animation you'll update the paragraphs with the msg text Since you have the delays for each step of the animation already, you can add your code to the same forEach() loop Add another setTimeout() function Pass in an empty callback function as the first argument, and pass in the showMsgDelay property of the current object as the second argument --hints--\nYour showAnimation() function should have two setTimeout() functions js\nassert lengthOf(\nString(showAnimation) match(/setTimeout/g),\n2\n);\nThe new setTimeout() function should have an empty callback function as the first argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\nThe new setTimeout() function should have the showMsgDelay property of the current object as the second argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\ showMsgDelay\\s*\\)|setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\s*\\[\\s*('|\"|`)showMsgDelay\\1\\s*\\]\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bc04b5ee9addacaa50d0ab67bf89b812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "846120f253eef014020c0f7e294afee0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2f0819eaf9fc7dff62b14c03e9f8703a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000, msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ', showMsgDelay: 15000, removeElDelay: 20000, }, { inputVal: 2, addElDelay: 1500, msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\n--fcc-editable-region--\n--fcc-editable-region--\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6360,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464abfb6cf778f3cb33d379.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "dd4274942c76c53d25292a4372aee54d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464ab8c06ea92f30bc548d5\ntitle: Step 101\nchallengeType: 0\ndashedName: step-101\n--description--\nFor the last animation object, add the property msg set to the following string:\nmd\n\"decimalToBinary(5) returns '10' + 1 (5 % 2) Then it pops off the stack \"\nAlso, add the property showMsgDelay set to 15000 and the property removeElDelay set to 20000 --hints--\nYou should add the property msg to the animation object at the bottom of the stack js\nassert property(\nanimationData[0],\n'msg',\n)\nYou should set the value of the msg property to \"decimalToBinary(5) returns '10' + 1 (5 % 2) Then it pops off the stack \"\njs\nassert match(\nanimationData[0] msg,\n/decimalToBinary\\s*\\(\\s*5\\s*\\)\\s*returns\\s*('|\"|`)10\\s*\\1\\s*\\+\\s*1\\s*\\(\\s*5\\s*%\\s*2\\s*\\)\\s*\\ \\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\ /i\n);\nYou should add the property showMsgDelay to the animation object at the bottom of the stack js\nassert property(\nanimationData[0],\n'showMsgDelay',\n)\nYou should set the value of the showMsgDelay property to 15000 js\nassert propertyVal(\nanimationData[0],\n'showMsgDelay',\n15000\n)\nYou should add the property removeElDelay to the animation object at the bottom of the stack js\nassert property(\nanimationData[0],\n'removeElDelay',\n)\nYou should set the value of the removeElDelay property to 20000 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b694a889eea05d016de854ffe680ca20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "); You should add the property showMsgDelay to the animation object at the bottom of the stack js assert property( animationData[0], 'showMsgDelay', ) You should set the value of the showMsgDelay property to 15000 js assert propertyVal( animationData[0], 'showMsgDelay', 15000 ) You should add the property removeElDelay to the animation object at the bottom of the stack js assert property( animationData[0], 'removeElDelay', ) You should set the value of the removeElDelay property to 20000 js assertpropertyVal(\nanimationData[0],\n'removeElDelay',\n20000\n)\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e92e13c42a854c34fd560672b392037e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f5ba8351c301815b82ab406522fb03e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n--fcc-editable-region--\n{\ninputVal: 5,\naddElDelay: 1000\n},\n--fcc-editable-region--\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack ',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "73b57d8d38fa475a3c01f4f4787998fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "(input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationData forEach((obj) => { setTimeout(() => { animationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\"> decimalToBinary(${obj inputVal}) </p>; }, obj addElDelay); }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInputvalue || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464ab8c06ea92f30bc548d5.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "3fd514c56bbb4b31729e514abbd2736b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464b25851863b0a119eb7b1\ntitle: Step 104\nchallengeType: 0\ndashedName: step-104\n--description--\nNext, you'll remove the paragraph elements from the #show-animation element after the delays you specified earlier Add a setTimeout() function to your forEach() loop Pass in an empty callback function as the first argument, and pass in the removeElDelay property of the current object as the second argument --hints--\nYour showAnimation() function should have three setTimeout() functions js\nassert lengthOf(\nString(showAnimation) match(/setTimeout/g),\n3\n);\nThe new setTimeout() function should have an empty callback function as the first argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\nThe new setTimeout() function should have the removeElDelay property of the current object as the second argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\ removeElDelay\\s*\\)|setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\s*\\[\\s*('|\"|`)removeElDelay\\1\\s*\\]\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6d52a3a38848b173d33884b081005be6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "37bb16d67ce4678937a1ef591fb3a665",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "34c16c2ecb451f6dbe745111199c82ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000, msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ', showMsgDelay: 15000, removeElDelay: 20000, }, { inputVal: 2, addElDelay: 1500, msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) textContent = obj msg;\n}, obj showMsgDelay);\n--fcc-editable-region--\n--fcc-editable-region--\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "16bb28224ef581447f0d67347b596725",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "document getElementById(obj inputVal) textContent = obj msg; }, obj showMsgDelay); --fcc-editable-region-- --fcc-editable-region-- }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b25851863b0a119eb7b1.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "027982e5bbd0ce00b1461f65a8724228",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464b3adeee9310bd37ff636\ntitle: Step 105\nchallengeType: 0\ndashedName: step-105\n--description--\nUse the getElementById() method to target the element with the id attribute with the value of the inputVal property of the current object Then, use the remove() method on that element to remove it from the DOM after the delay --hints--\nYou should use the getElementById() method to target the element where the id attribute matches the value of inputVal for the current object js\nassert lengthOf(\nString(showAnimation) match(\n/document\\ getElementById\\s*\\(\\s*obj\\ inputVal\\s*\\)|document\\ getElementById\\s*\\(\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\)/g\n),\n2\n);\nYou should chain the remove() method to the getElementById() method js\nassert match(\nString(showAnimation),\n/document\\ getElementById\\s*\\(\\s*obj\\ inputVal\\s*\\)\\s*\\ \\s*remove\\s*\\(\\s*\\)|document\\ getElementById\\s*\\(\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\)\\s*\\ \\s*remove\\s*\\(\\s*\\)/g\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "37084a95fe38dda9df0225f1ec7ec53a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; }input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1894a4a20043d338fb2522b9e100ec67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e0479139c6de3311e8d25963e28f44b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000, msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ', showMsgDelay: 15000, removeElDelay: 20000, }, { inputVal: 2, addElDelay: 1500, msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) textContent = obj msg;\n}, obj showMsgDelay);\nsetTimeout(() => {\n--fcc-editable-region--\n--fcc-editable-region--\n}, obj removeElDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "ec78ea12a4b34214a2cacf9b46971a56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "document getElementById(obj inputVal) textContent = obj msg; }, obj showMsgDelay); setTimeout(() => { --fcc-editable-region-- --fcc-editable-region-- }, obj removeElDelay); }); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b3adeee9310bd37ff636.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "12699d1ed02e742ad7bd297458942328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 674dd79dcfa5690e16e59775\ntitle: Step 103\nchallengeType: 0\ndashedName: step-103\n--description--\nYou have set the id attribute for your paragraph elements to the obj inputVal property Now, use the getElementById() method to select the element with that attribute value, again using the obj inputVal property You should pass the obj inputVal value directly to your getElementById call After that, set the textContent property of the selected element equal to the msg property of the current object, to update its text after the delay you specified earlier --hints--\nYou should use the getElementById() method to target the element where the id attribute matches the value of inputVal for the current object js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\([\\s\\S]+document\\ getElementById\\s*\\( *( :obj\\ inputVal|obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]) *\\)/\n);\nYou should chain textContent to the getElementById() method js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\([\\s\\S]+document\\ getElementById\\s*\\( *( :obj\\ inputVal|obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]) *\\)\\s*\\ \\s*textContent/\n);\nYou should set the textContent property of the targeted element equal to the msg property of the current object js\nconst oldSetTimeout = setTimeout;\nsetTimeout = (functionName, delay) => {\nfunctionName();\n}\ntry {\nshowAnimation();\nanimationData forEach((obj) => {\nassert equal(document getElementById(obj inputVal) textContent, obj msg);\n});\n} finally {\nsetTimeout = oldSetTimeout;\n}\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "11c944982e92decc5e950a1fd8284e71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "=> { assert equal(document getElementById(obj inputVal) textContent, obj msg); }); } finally { setTimeout = oldSetTimeout; } --seed-- --seed-contents-- ```html Decimal to Binary Converter Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "32096afcb258f5f44300dcc0196a9649",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; }output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f70624b11da230602135f46797f8eff5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "{ font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = documentgetElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack ',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c0b4c79125ec87745e60e33b99a10dbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "below Then it pops off the stack \", showMsgDelay: 5000, removeElDelay: 10000, } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationData forEach((obj) => { setTimeout(() => { animationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\"> decimalToBinary(${obj inputVal}) </p>; }, objaddElDelay);\nsetTimeout(() => {\n--fcc-editable-region--\n--fcc-editable-region--\n}, obj showMsgDelay);\n});\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6798,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\674dd79dcfa5690e16e59775.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "095ef78088e0a95bdce667668c87788c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464b8ccb1a5d612c2f857d1\ntitle: Step 106\nchallengeType: 0\ndashedName: step-106\n--description--\nNow your animation is complete When you enter 5 in the number input and click the Convert button, the animation will add paragraphs to the DOM, update the text of each paragraph, and then remove the paragraphs from the DOM The last thing you need to do is add the result of converting the number 5 into binary to the page once the animation is complete After the forEach() method, add another setTimeout() function Pass in an empty callback function as the first argument, and a delay of 20000 milliseconds as the second argument --hints--\nYour showAnimation() function should have four setTimeout() functions js\nassert lengthOf(\nString(showAnimation) match(/setTimeout/g),\n4\n);\nThe new setTimeout() function should have an empty callback function as the first argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\nThe new setTimeout() function should have a delay of 20000 milliseconds as the second argument js\nassert match(\nString(showAnimation),\n/setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*20000\\s*\\)/\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6a6ca5c497941233f70002c05a73b787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "Decimal to Binary Converter Enter a decimal number: Convert Call stack ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --light-grey: #f5f6f7; --dark-blue: #1b1b32; --orange: #f1be32; } body { display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 15rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6a7c7a4530abcfb8c554eb3848907a6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; } number-input { font-size: inherit; padding: 0 3rem; width: 100%; } output-container { margin-inline: auto; width: clamp(320px, 50vw, 460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; }animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6d329086e8e5e2d42bb5b9ff9fac119c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= document getElementById(\"number-input\"); const convertBtn = document getElementById(\"convert-btn\"); const result = document getElementById(\"result\"); const animationContainer = document getElementById(\"animation-container\"); const animationData = [ { inputVal: 5, addElDelay: 1000, msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ', showMsgDelay: 15000, removeElDelay: 20000, }, { inputVal: 2, addElDelay: 1500, msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack \",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) textContent = obj msg;\n}, obj showMsgDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) remove();\n}, obj removeElDelay);\n});\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "49a64f6e7ecb49bb774bde69ebb3fc77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "= obj msg; }, obj showMsgDelay); setTimeout(() => { document getElementById(obj inputVal) remove(); }, obj removeElDelay); }); --fcc-editable-region-- --fcc-editable-region-- }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInputaddEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464b8ccb1a5d612c2f857d1.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "51f92a1f1db8395be53cf877a7bbaf0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd18eb67c661d8a9e11f3.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cd18eb67c661d8a9e11f3\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nTo begin the project, use the getElementById() method to retrieve the #message-input, #result, and #check-message-btn elements from the HTML document, and assign them to the variables messageInput, result, and checkMessageButton, respectively --hints--\nYou should use const to declare a messageInput variable js\nassert match(code, /const\\s+messageInput\\s*=/);\nYour messageInput variable should have the value of document getElementById(\"message-input\") js\nassert deepEqual(messageInput, document getElementById('message-input'));\nYou should use const to declare a result variable js\nassert match(code, /const\\s+result\\s*=/);\nYour result variable should have the value of document getElementById(\"result\") js\nassert match(code, /const\\s+result\\s*=\\s*document\\ getElementById\\(\\s*('|\")result\\1\\s*\\)/);\nYou should use const to declare a checkMessageButton variable js\nassert match(code, /const\\s+checkMessageButton\\s*=/);\nYour checkMessageButton variable should have the value of document getElementById(\"check-message-btn\") js\nassert deepEqual(checkMessageButton, document getElementById('check-message-btn'));\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd18eb67c661d8a9e11f3.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3cc2bd1428b13e8aa2c2c2a854348d44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd18eb67c661d8a9e11f3.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "a phrase to check if it would be marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 25rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd18eb67c661d8a9e11f3.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "be037aeae1f103e3c3e3baa8e7c4742d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd91d28bebe226f765d86.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cd91d28bebe226f765d86\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nAttach an event listener to your checkMessageButton, listening for the click event Give it an empty callback function --hints--\nYou should call addEventListener() on your checkMessageButton element js\nassert match(code, /checkMessageButton\\ addEventListener\\(/);\nYour addEventListener() method should have a \"click\" event type js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,/);\nYour addEventListener() method should have an empty callback function js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*(\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}|function\\s*\\(\\s*\\)\\s*\\{\\s*\\})\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd91d28bebe226f765d86.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f6e78d277460f53c5c9071950c92603",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd91d28bebe226f765d86.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cd91d28bebe226f765d86.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6f0d3a157f0a2e190be3adcbae7679ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "id: 6464c6d6698a8027f8c9d6be\ntitle: Step 107\nchallengeType: 0\ndashedName: step-107\n--description--\nFinally, set the textContent property of result equal to calling decimalToBinary() with 5 as an argument After this, test out your code by entering the number 5 into the number input and clicking the Convert button Congratulations You just finished your decimal to binary converter with recursion --hints--\nYou should set the textContent property of result equal to calling decimalToBinary() with 5 as an argument js\nassert match(\nString(showAnimation),\n/result\\ textContent\\s*=\\s*decimalToBinary\\s*\\(\\s*5\\s*\\)|result\\s*\\[\\s*('|\"|`)textContent\\1\\s*\\]\\s*=\\s*decimalToBinary\\s*\\(\\s*5\\s*\\)/i\n);\n--seed--\n--seed-contents--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "a4685e9349c5ccc789ac1c67d2fe0524",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "display: flex; flex-direction: column; align-items: center; font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; font-size: 1 125rem; color: var(--light-grey); background-color: var(--dark-blue); padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; }convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n} number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "e7662690be60cd383820bd567883f382",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "460px); } result { display: flex; align-items: center; justify-content: center; font-size: 2rem; text-align: center; min-height: 80px; margin-block-start: 20px; padding: 15px; border: 2px solid var(--orange); border-radius: 2px; } animation-container { display: flex; flex-direction: column-reverse; justify-content: end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 12rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document getElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack ',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "5dcd4be756094ec93a42bb4406a6c9d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "+ 1 (5 % 2) Then it pops off the stack ', showMsgDelay: 15000, removeElDelay: 20000, }, { inputVal: 2, addElDelay: 1500, msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack ', showMsgDelay: 10000, removeElDelay: 15000, }, { inputVal: 1, addElDelay: 2000, msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below Then it pops off the stack\",\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer innerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) textContent = obj msg;\n}, obj showMsgDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) remove();\n}, obj removeElDelay);\n});\nsetTimeout(() => {\n--fcc-editable-region--\n--fcc-editable-region--\n}, 20000);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "04ac3b29cd7e328486104b5c9e87c9c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "inputVal) remove(); }, obj removeElDelay); }); setTimeout(() => { --fcc-editable-region-- --fcc-editable-region-- }, 20000); }; const checkUserInput = () => { const inputInt = parseInt(numberInput value); if ( numberInput value || isNaN(inputInt) || inputInt < 0) { alert(\"Please provide a decimal number greater than or equal to 0\"); return; } if (inputInt === 5) { showAnimation(); return; } result textContent = decimalToBinary(inputInt); numberInput value = \"\"; }; convertBtn addEventListener(\"click\", checkUserInput); numberInput addEventListener(\"keydown\", (e) => { if (ekey === \"Enter\") {\ncheckUserInput();\n}\n});\n```\n--solutions--\n```html\nDecimal to Binary Converter\nDecimal to Binary\nConverter\nEnter a decimal number:\nConvert\nCall stack\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--light-grey: #f5f6f7;\n--dark-blue: #1b1b32;\n--orange: #f1be32;\n}\nbody {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\nmonospace;\nfont-size: 1 125rem;\ncolor: var(--light-grey);\nbackground-color: var(--dark-blue);\npadding: 0 4px;\n}\nh1 {\nfont-size: 2 125rem;\ntext-align: center;\nmargin: 20px 0;\n}\nh2 {\nfont-size: 1 5rem;\ntext-align: center;\nmargin: 20px 0;\n} input-container {\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\nalign-items: center;\nwidth: clamp(320px, 50vw, 460px);\nmargin: 10px auto;\n} input-container label {\nwhite-space: nowrap;\nword-spacing: -6px;\n} convert-btn {\nfont-size: inherit;\nfont-family: inherit;\nbackground-color: var(--orange);\nwidth: 100%;\nheight: 2rem;\npadding: 0 6px;\nborder: none;\nborder-radius: 2px;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "220122ea593f2e0cc8f83bb70307a679",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "padding: 0 4px; } h1 { font-size: 2 125rem; text-align: center; margin: 20px 0; } h2 { font-size: 1 5rem; text-align: center; margin: 20px 0; } input-container { display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center; width: clamp(320px, 50vw, 460px); margin: 10px auto; } input-container label { white-space: nowrap; word-spacing: -6px; } convert-btn { font-size: inherit; font-family: inherit; background-color: var(--orange); width: 100%; height: 2rem; padding: 0 6px; border: none; border-radius: 2px; cursor: pointer; }number-input {\nfont-size: inherit;\npadding: 0 3rem;\nwidth: 100%;\n} output-container {\nmargin-inline: auto;\nwidth: clamp(320px, 50vw, 460px);\n}\nresult {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 2rem;\ntext-align: center;\nmin-height: 80px;\nmargin-block-start: 20px;\npadding: 15px;\nborder: 2px solid var(--orange);\nborder-radius: 2px;\n}\nanimation-container {\ndisplay: flex;\nflex-direction: column-reverse;\njustify-content: end;\ngap: 1rem;\nmargin-block-end: 1rem;\nmin-height: 40vh;\nborder: 2px dashed var(--orange);\npadding: 1rem;\n} animation-frame {\nfont-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\nhelvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\nsans-serif;\npadding: 15px 10px;\nborder: 5px solid var(--orange);\nfont-size: 1 2rem;\ntext-align: center;\n}\n@media screen and (min-width: 36em) {\nbody {\nfont-size: 1rem;\n} input-container {\nflex-direction: row;\nwidth: unset;\n} number-input {\nwidth: unset;\n}\n}\n```\n```js\nconst numberInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "446614a458860e7785b4175d7d2b9a1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "end; gap: 1rem; margin-block-end: 1rem; min-height: 40vh; border: 2px dashed var(--orange); padding: 1rem; } animation-frame { font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif; padding: 15px 10px; border: 5px solid var(--orange); font-size: 1 2rem; text-align: center; } @media screen and (min-width: 36em) { body { font-size: 1rem; } input-container { flex-direction: row; width: unset; } number-input { width: unset; } } ``` ```js const numberInput = documentgetElementById(\"number-input\");\nconst convertBtn = document getElementById(\"convert-btn\");\nconst result = document getElementById(\"result\");\nconst animationContainer = document getElementById(\"animation-container\");\nconst animationData = [\n{\ninputVal: 5,\naddElDelay: 1000,\nmsg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2) Then it pops off the stack ',\nshowMsgDelay: 15000,\nremoveElDelay: 20000,\n},\n{\ninputVal: 2,\naddElDelay: 1500,\nmsg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below Then it pops off the stack ',\nshowMsgDelay: 10000,\nremoveElDelay: 15000,\n},\n{\ninputVal: 1,\naddElDelay: 2000,\nmsg: 'decimalToBinary(1) returns \"1\" (base case) and gives that value to the stack below Then it pops off the stack ',\nshowMsgDelay: 5000,\nremoveElDelay: 10000,\n}\n];\nconst decimalToBinary = (input) => {\nif (input === 0 || input === 1) {\nreturn String(input);\n} else {\nreturn decimalToBinary(Math floor(input / 2)) + (input % 2);\n}\n};\nconst showAnimation = () => {\nresult innerText = \"Call Stack Animation\";\nanimationData forEach((obj) => {\nsetTimeout(() => {\nanimationContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "2e065ca71e5582abfa4ee90727684dcd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
    "source_type": "git_repo",
    "title": "Decimal to Binary Converter",
    "content": "returns \"1\" (base case) and gives that value to the stack below Then it pops off the stack ', showMsgDelay: 5000, removeElDelay: 10000, } ]; const decimalToBinary = (input) => { if (input === 0 || input === 1) { return String(input); } else { return decimalToBinary(Math floor(input / 2)) + (input % 2); } }; const showAnimation = () => { result innerText = \"Call Stack Animation\"; animationData forEach((obj) => { setTimeout(() => { animationContainerinnerHTML += <p id=\"${obj inputVal}\" class=\"animation-frame\">\ndecimalToBinary(${obj inputVal})\n</p>;\n}, obj addElDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) textContent = obj msg;\n}, obj showMsgDelay);\nsetTimeout(() => {\ndocument getElementById(obj inputVal) remove();\n}, obj removeElDelay);\n});\nsetTimeout(() => {\nresult textContent = decimalToBinary(5);\n}, 20000);\n};\nconst checkUserInput = () => {\nconst inputInt = parseInt(numberInput value);\nif ( numberInput value || isNaN(inputInt) || inputInt < 0) {\nalert(\"Please provide a decimal number greater than or equal to 0\");\nreturn;\n}\nif (inputInt === 5) {\nshowAnimation();\nreturn;\n}\nresult textContent = decimalToBinary(inputInt);\nnumberInput value = \"\";\n};\nconvertBtn addEventListener(\"click\", checkUserInput);\nnumberInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckUserInput();\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-recursion-by-building-a-decimal-to-binary-converter\\6464c6d6698a8027f8c9d6be.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "1e960cd817282562b6c666f691add915",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cdebe67ec0f25a4798356\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nIf the messageInput is empty, display an alert to the user with the message \"Please enter a message \" Then, exit the function execution --hints--\nYour callback function should have an if statement js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(/)\nYour if statement should check if the value of messageInput is an empty string js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*('|\"|`)\\2|('|\"|`)\\3\\s*=== \\s*messageInput\\ value)\\s*\\)/)\nYour if statement should display an alert to the user with the message \"Please enter a message \" js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*('|\"|`)\\2|('|\"|`)\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\4\\s*\\)/)\nYour if statement should exit the function execution js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*(['\"`])click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*(['\"`])\\2|(['\"`])\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*(['\"`])Please enter a message\\ \\4\\s*\\)\\s*; \\s*return\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bb5b8edc3503c08a36d5b30e4d515f41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "an empty string js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*('|\"|`)\\2|('|\"|`)\\3\\s*=== \\s*messageInput\\ value)\\s*\\)/) Your if statement should display an alert to the user with the message \"Please enter a message \" js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*('|\"|`)\\2|('|\"|`)\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\4\\s*\\)/) Your if statement should exit the function execution js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*(['\"`])click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*(['\"`])\\2|(['\"`])\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*(['\"`])Please enter a message\\ \\4\\s*\\)\\s*; \\s*return\\s*;\\s*\\}\\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e4f513830bfcaaaceb54baa938ad77ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "a message \" js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*('|\"|`)\\2|('|\"|`)\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\4\\s*\\)/) Your if statement should exit the function execution js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*(['\"`])click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*( :messageInput\\ value\\s*=== \\s*(['\"`])\\2|(['\"`])\\3\\s*=== \\s*messageInput\\ value)\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*(['\"`])Please enter a message\\ \\4\\s*\\)\\s*; \\s*return\\s*;\\s*\\}\\s*\\}/) --seed-- --seed-contents-- ```html Learn Regular Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or notMessage:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c71242c16d171c715d3e641ca07fbf84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "as spam or notMessage: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; }message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdebe67ec0f25a4798356.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6eb00cf3099fbdade730e47fb8a66be1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdefa704f232675ed98aa.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cdefa704f232675ed98aa\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nCreate an isSpam function using the const keyword and arrow syntax The function should take a single parameter msg and implicitly return false for now --hints--\nYou should use const to declare an isSpam variable js\nassert match(code, /const\\s+isSpam\\s*=/);\nYou should use arrow syntax to assign isSpam a function js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour isSpam function should have a single msg parameter js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)/);\nYour isSpam function should implicitly return false js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*false\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3424,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdefa704f232675ed98aa.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22e9e60c2e89f4a2a4042a30f0d03ef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdefa704f232675ed98aa.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 11rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3424,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdefa704f232675ed98aa.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0a5c1a283cb73c1d594eaedc706767c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce03dfeca10293e05dad7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641ce03dfeca10293e05dad7\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nYour first regular expression will be used to catch help requests Declare a helpRegex variable, and assign it a regular expression that matches the string please help As a refresher, here is a regular expression to match the string hello world:\njs\nconst regex = /hello world/;\n--hints--\nYou should use const to declare a helpRegex variable js\nassert match(code, /const\\s+helpRegex\\s*=/);\nYour helpRegex variable should be a regular expression js\nassert instanceOf(helpRegex, RegExp);\nYour helpRegex variable should match the string please help js\nassert match('please help', helpRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce03dfeca10293e05dad7.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "20962c4f4c278388a41049b05901f75b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce03dfeca10293e05dad7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst isSpam = (msg) => false;\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce03dfeca10293e05dad7.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c583bce048f136be72bc2eb8d85e3faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3065c50e62f97406973.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641ce3065c50e62f97406973\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nRegular expressions can take flags to modify their behavior For instance, the i flag can be used to make the expression ignore case, causing it to match hello, HELLO, and Hello for the expression /hello/ Flags are added after the trailing slash Add the i flag to your helpRegex --hints--\nYour helpRegex should have the case-insensitive i flag js\nassert include(helpRegex flags, 'i');\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3065c50e62f97406973.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4baa37859cad12cf6bfe1754b2ce3a08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3065c50e62f97406973.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; }footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\nconst helpRegex = /please help/;\n--fcc-editable-region--\nconst isSpam = (msg) => false;\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3065c50e62f97406973.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e66bc1b8238d51fbdd163e902f8394ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3dcd0aec8309fbc9971.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641ce3dcd0aec8309fbc9971\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nStrings have a match() method, which accepts a regular expression as an argument and determines if the string matches that expression Update your isSpam() function to implicitly return the result of calling the match() method on msg, passing helpRegex as the argument Then, try entering some messages on your page and see the result --hints--\nYour isSpam() function should implicitly return the result of msg match(helpRegex) js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*msg\\ match\\(\\s*helpRegex\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3dcd0aec8309fbc9971.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c1ee50d4f3f3bba8918761a07ab03281",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3dcd0aec8309fbc9971.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help/i;\n--fcc-editable-region--\nconst isSpam = (msg) => false;\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ce3dcd0aec8309fbc9971.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "22e870f6dd12795588d822bdf973e2ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ceed81533263283835c3d.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641ceed81533263283835c3d\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nInstead of using the match() method, you can use the test() method of a regular expression to test if a string matches the pattern Unlike match(), test() returns a boolean value indicating whether or not the string matches the pattern Update your isSpam() function to use the test() method of helpRegex to test if msg is a match Then, try entering some messages on your page and see the result --hints--\nYour isSpam() function should implicitly return the result of helpRegex test(msg) js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*helpRegex\\ test\\(\\s*msg\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ceed81533263283835c3d.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "57a9f2a3bfee194f385d4bb6975ecc97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ceed81533263283835c3d.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help/i;\n--fcc-editable-region--\nconst isSpam = (msg) => msg match(helpRegex);\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641ceed81533263283835c3d.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "af7b50f1dc631554d811a11ff3d41ee5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cf198ec366c33d6504854.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cf198ec366c33d6504854\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nThe alternate sequence | can be used to match either the text on the left or the text on the right of the | For example, the regular expression /yes|no/ will match either yes or no Update your helpRegex to match either please help or assist me --hints--\nYour helpRegex should use the | alternate sequence js\nassert match(helpRegex toString(), /\\|/);\nYour helpRegex should match the string please help js\nassert match('please help', helpRegex);\nconst splitRegex = helpRegex toString() split(/[\\/|]/);\nassert include(splitRegex, 'please help');\nYour helpRegex should match the string assist me js\nassert match('assist me', helpRegex);\nconst splitRegex = helpRegex toString() split(/[\\/|]/);\nassert include(splitRegex, 'assist me');\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3780,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cf198ec366c33d6504854.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f310707c2a8bac32d26679a0e593871f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cf198ec366c33d6504854.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\n--fcc-editable-region--\nconst helpRegex = /please help/i;\n--fcc-editable-region--\nconst isSpam = (msg) => helpRegex test(msg);\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3780,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cf198ec366c33d6504854.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e05dde38deda5fe97eb0baa475b259b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 641cdf57c3f7ee276e1d9b32\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nBack in your event listener, you need to update the text of the result element You can use a ternary operator to achieve this task Here is an example of assigning the result of a ternary operator to an element's text content:\njs\nel textContent = condition \"Use this text if the condition is true\" : \"Use this text if the condition is false\";\nAfter the if statement, use a ternary operator to check the truthiness of calling isSpam() with messageInput value as the argument If true, set the textContent property on the result element to \"Oh no This looks like a spam message \" Otherwise, set it to \"This message does not seem to contain any spam \"\nThen set the messageInput element's value property to an empty string --hints--\nYou should use the assignment operator to set the textContent property of the result element js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*/)\nYou should call the isSpam() function after the assignment operator = and before the ternary operator js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\( *\\)\\s*\\ /)\nYou should use ternary syntax to check the truthiness of isSpam(messageInput value) js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "8fdb6a010338f9abc75cc05c0abd2e6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "operator to set the textContent property of the result element js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*/) You should call the isSpam() function after the assignment operator = and before the ternary operator js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\( *\\)\\s*\\ /) You should use ternary syntax to check the truthiness of isSpam(messageInput value) js assertmatch(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ /)\nThe truthy expression of your ternary should set the textContent property of the result element to \"Oh no This looks like a spam message \" js\nassert match(code, /checkMessageButton\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "48e7ebf9600750c0b4dafe0f9aab6af3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\( *\\)\\s*\\ /) You should use ternary syntax to check the truthiness of isSpam(messageInput value) js assertmatch(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ /) The truthy expression of your ternary should set the textContent property of the result element to \"Oh no This looks like a spam message \" js assert match(code, /checkMessageButton\\addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:/);\nThe falsy expression of your ternary should set the textContent property of the result element to \"This message does not seem to contain any spam \" js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "4069aa4787ed9c6d699879a0535caff6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "of your ternary should set the textContent property of the result element to \"Oh no This looks like a spam message \" js assert match(code, /checkMessageButton\\addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:/); The falsy expression of your ternary should set the textContent property of the result element to \"This message does not seem to contain any spam \" js assertmatch(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam \\5\\s*; \\s*/);\nAfter your ternary, set the value property on the messageInput element to an empty string js\nassert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "a3f16e4387a3153ea5b0077ed50c52f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "to \"This message does not seem to contain any spam \" js assertmatch(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*; \\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam \\5\\s*; \\s*/); After your ternary, set the value property on the messageInput element to an empty string js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*;\\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam \\5\\s*; \\s*messageInput\\ value\\s*=\\s*('|\"|`)\\6\\s*; \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "6182b0096d57114b186188d637919810",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "value property on the messageInput element to an empty string js assert match(code, /checkMessageButton\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\ value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*( :window\\ |globalThis\\ ) alert\\(\\s*('|\"|`)Please enter a message\\ \\3\\s*\\)\\s*;\\s*return\\s*; \\s*\\}\\s*result\\ textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\ value\\s*\\)\\s*\\ \\s*('|\"|`)Oh no This looks like a spam message \\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam \\5\\s*; \\s*messageInput\\ value\\s*=\\s*('|\"|`)\\6\\s*; \\s*\\}/) --seed-- --seed-contents-- ```html Learn Regular Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or notMessage:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "b96de8e84fd3a1c6aaefba2cd7f44980",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst isSpam = (msg) => false;\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\641cdf57c3f7ee276e1d9b32.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "58fdb1ec5d706353052a2900cda9a8f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f6f59d665615c9e94d8a.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6421f6f59d665615c9e94d8a\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nBefore you start creating additional regular expressions, you need to update your application to check more than one regular expression Start by declaring a denyList variable Assign it an array containing your helpRegex --hints--\nYou should use const to declare a denyList variable js\nassert match(code, /const\\s+denyList\\s*=/);\nYour denyList variable should be an array js\nassert isArray(denyList);\nYour denyList array should have helpRegex as its only element js\nassert deepEqual(denyList, [helpRegex]);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f6f59d665615c9e94d8a.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "446b7b7c4dbaa7d64cd9121d2faa37af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f6f59d665615c9e94d8a.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\n--fcc-editable-region--\nconst isSpam = (msg) => helpRegex test(msg);\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f6f59d665615c9e94d8a.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eee3af23f9646a1d21187e9474f792e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642205fa6376c818f78bb24e.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642205fa6376c818f78bb24e\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nThe next regular expression you will work on is one that matches mentions of dollar amounts Start by declaring a dollarRegex variable, and assign it a case-insensitive regular expression that matches the text dollars --hints--\nYou should use const to declare a dollarRegex variable js\nassert match(code, /const\\s+dollarRegex\\s*=/);\nYour dollarRegex variable should be a regular expression js\nassert instanceOf(dollarRegex, RegExp);\nYour dollarRegex should match dollars js\nassert match('dollars', dollarRegex);\nYour dollarRegex should be case-insensitive js\nassert include(dollarRegex flags, 'i');\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642205fa6376c818f78bb24e.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7142d02e9c7f1072f55174509a3a6dcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642205fa6376c818f78bb24e.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\n--fcc-editable-region--\nconst denyList = [helpRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642205fa6376c818f78bb24e.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d392b4073e91a56f7361a49e62fe3b5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6421f98f4999d1179ce37cb4\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nArrays have a some() method Like the filter() method, some() accepts a callback function which should take an element of the array as the argument The some() method will return true if the callback function returns true for at least one element in the array Here is an example of a some() method call to check if any element in the array is an uppercase letter js\nconst arr = [\"A\", \"b\", \"C\"];\narr some(letter => letter === letter toUpperCase());\nUse the some() method to check if testing your msg on any of your denyList regular expressions returns true Use regex as the parameter for the callback function, for clarity --hints--\nYour isSpam function should implicitly return the result of denyList some() js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*[\\s\\S]*\\)/)\nYour some() method should use arrow syntax for the callback js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour some() callback should take regex as the parameter js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>/);\nYour some() callback should implicitly return the result of testing msg on regex js\nassert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>\\s*regex\\ test\\(\\s*msg\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e55c8065735eccc8dfcfe9f96df5c701",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "Your some() method should use arrow syntax for the callback js assert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your some() callback should take regex as the parameter js assert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>/); Your some() callback should implicitly return the result of testing msg on regex js assert match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\ some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>\\s*regex\\ test\\(\\s*msg\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Learn Regular Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or notMessage:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0ca76c72cd27fde8fef0c71d694f34af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst denyList = [helpRegex];\n--fcc-editable-region--\nconst isSpam = (msg) => helpRegex test(msg);\n--fcc-editable-region--\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6421f98f4999d1179ce37cb4.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2a259f5c6b30f118ed0385a72769d839",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206618bdd611a0c4e90f3.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642206618bdd611a0c4e90f3\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nAdd your dollarRegex to the denyList array so that you can test the regular expression Then try entering a message in your app --hints--\nYour denyList array should include dollarRegex js\nassert deepInclude(denyList, dollarRegex);\nYour denyList array should still include helpRegex js\nassert deepInclude(denyList, helpRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206618bdd611a0c4e90f3.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bfff73e7dd029b0332c3e3f2138a69db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206618bdd611a0c4e90f3.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; }footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex];\n--fcc-editable-region--\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206618bdd611a0c4e90f3.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "adf2cdb060f4037df17b4335b5126f92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642208bc4d44701c6fd6f65e.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642208bc4d44701c6fd6f65e\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nThe dollar value may be more than one digit To match this, the + quantifier can be used - this matches one or more consecutive occurrences For example, the regular expression /a+/ matches one or more consecutive a characters Update your regular expression to match one or more consecutive digits --hints--\nYour dollarRegex should use the + quantifier js\nassert match(dollarRegex source, /\\+/);\nYour dollarRegex should use the + quantifier on your [0-9] character class js\nassert match(dollarRegex source, /\\[0-9\\]\\+/);\nYour dollarRegex should still match \"100 dollars\" js\nassert match('100 dollars', dollarRegex);\nYour dollarRegex should still match \"3 dollars\" js\nassert match('3 dollars', dollarRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3865,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642208bc4d44701c6fd6f65e.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "86a88fa514573a91d822ec4bd655df52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642208bc4d44701c6fd6f65e.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9] dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3865,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642208bc4d44701c6fd6f65e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "775a2fda95c4a2ddabdda6097a1f4648",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642206e054eef81b5e3092ed\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nYou need to match a number before the text dollars While you could write out 0|1|2 and so on, regular expressions have a feature that makes this easier A character class is defined by square brackets, and matches any character within the brackets For example, [aeiou] matches any character in the list aeiou You can also define a range of characters to match using a hyphen For example, [a-z] matches any character from a to z Add a character class to match the digits 0 through 9 to your dollarRegex expression - remember the digit must come before the word dollars, and there should be a space between the digit and the word --hints--\nYour dollarRegex should use a character class js\nassert match(dollarRegex source, /\\[ *\\]/);\nYour character class should be 0-9 js\nassert match(dollarRegex source, /\\[0-9\\] dollars/);\nYour dollarRegex should still match \"1 dollars\" js\nassert match('1 dollars', dollarRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ded33310f216f443962cfd247d7cb93b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 15rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a1d79a3ff3f9c415c8c9e0d3a52f57c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; --fcc-editable-region-- const dollarRegex = /dollars/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \" : \"This message does not seem to contain any spam \"; messageInputvalue = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642206e054eef81b5e3092ed.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d765a36e16efea3c389ae7913208e600",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64220e8cb589f61e625bf453\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nBetween your digits and your dollars text, you want to catch place values Use the | token to allow hundred, thousand, million, or billion between your digits and dollars --hints--\nYour dollarRegex should use the | token js\nassert match(dollarRegex source, /\\|/);\nYour dollarRegex should have three | tokens js\nassert lengthOf(dollarRegex source match(/\\|/g), 3);\nYour dollarRegex should use the | token to match hundred, thousand, million, or billion js\nconst placeValues = dollarRegex source replace(\"[0-9]+ \", \"\") replace(\" dollars\", \"\") split('|');\nassert include(placeValues, 'hundred');\nassert include(placeValues, 'thousand');\nassert include(placeValues, 'million');\nassert include(placeValues, 'billion');\nYour dollarRegex should match 1 hundred dollars js\nassert match('1 hundred dollars', dollarRegex);\nYour dollarRegex should match 1 thousand dollars js\nassert match('1 thousand dollars', dollarRegex);\nYour dollarRegex should match 1 million dollars js\nassert match('1 million dollars', dollarRegex);\nYour dollarRegex should match 1 billion dollars js\nassert match('1 billion dollars', dollarRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f33962e687f52e1d712f4f3366e4a858",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "to check if it would be marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; }description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "08aa7aa106e0773eab12ffa2aa34f2b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "} footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; --fcc-editable-region-- const dollarRegex = /[0-9]+ dollars/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh noThis looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220e8cb589f61e625bf453.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6d450df2ad94d3af0c6a7bd9d6ffb0f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220f22dff8151f751a53a7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64220f22dff8151f751a53a7\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nA capture group is a way to define a part of the expression that should be captured and saved for later reference You can define a capture group by wrapping a part of your expression in parentheses For example, /h(i|ey) camper/ would match either hi camper or hey camper, and would capture i or ey in a group Turn your place values into a capture group --hints--\nYou should not change your helpRegex regular expression js\nassert match(helpRegex source, /please help|assist me/);\nYour dollarRegex should use a capture group js\nassert match(dollarRegex source, /\\( *\\)/)\nYour hundred|thousand|million|billion pattern should be a capture group js\nassert match(dollarRegex source, /\\(hundred\\|thousand\\|million\\|billion\\)/)\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3907,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220f22dff8151f751a53a7.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9a30d79dc0f137d0b006c712d54e579b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220f22dff8151f751a53a7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ hundred|thousand|million|billion dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3907,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220f22dff8151f751a53a7.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f0fa4ed0c908eea2e9c03bc8301d6b9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233060735ddf06451c5c8c.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64233060735ddf06451c5c8c\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nAdd your new regular expression to your denyList array so you can test it --hints--\nYour denyList array should include your freeRegex variable js\nassert deepInclude(denyList, freeRegex);\nYour denyList array should include your dollarRegex variable js\nassert deepInclude(denyList, dollarRegex);\nYour denyList array should include your helpRegex variable js\nassert deepInclude(denyList, helpRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233060735ddf06451c5c8c.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d9062a8c0e997f246000586826d4d4fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233060735ddf06451c5c8c.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; }footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /free money/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\n--fcc-editable-region--\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233060735ddf06451c5c8c.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ab8d4f15ec7e8ddb2f20d2df68f8e2ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64220fb017c57d20612de8b8\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nNow that you have your capture group, you can mark the entire pattern as an optional match The quantifier matches zero or one occurrence of the preceding character or group For example, the regular expression /colou r/ matches both color and colour, because the u is optional Mark your capture group as optional --hints--\nYour dollarRegex should use the quantifier js\nassert match(dollarRegex source, /\\ /);\nYour (hundred|thousand|million|billion) capture group should be optional js\nassert match(dollarRegex source, /\\(hundred\\|thousand\\|million\\|billion\\)\\ /);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "55fb9b75fb06e3a110a1727903277bcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ (hundred|thousand|million|billion) dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ebebe0a39aab9dd28ade081ce87346ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "= document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; --fcc-editable-region-- const dollarRegex = /[0-9]+ (hundred|thousand|million|billion) dollars/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \" : \"This message does not seem to contain any spam \"; messageInputvalue = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64220fb017c57d20612de8b8.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3702c2dab1f966d74a063e0035aca08e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64221007887f38213fa57827\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nOne last thing with this expression You don't actually need the match value from your capture group, so you can turn it into a non-capturing group This will allow you to group the characters together without preserving the result To create a non-capturing group in a regular expression, you can add : after the opening parenthesis of a group For instance, ( :a|b) will match either a or b, but it will not capture the result Update your regular expression to use a non-capturing group --hints--\nYour dollarRegex should use : js\nassert match(dollarRegex source, /\\ :/);\nYour dollarRegex should use a non-capturing group js\nassert match(dollarRegex source, /\\(\\ : *\\)/);\nYour (hundred|thousand|million|billion) should be a non-capturing group js\nassert match(dollarRegex source, /\\(\\ :hundred\\|thousand\\|million\\|billion\\)/);\nYour (hundred|thousand|million|billion) group should still be optional js\nassert match(dollarRegex source, /\\(\\ :hundred\\|thousand\\|million\\|billion\\)\\ /);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4191,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c0aeb882f909bc4ec726a7a581c5b105",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "to check if it would be marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; }description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+\\s*(hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4191,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6551337d501b001b6950af4ea29d17b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; --fcc-editable-region-- const dollarRegex = /[0-9]+\\s*(hundred|thousand|million|billion) \\s+dollars/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message\");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4191,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64221007887f38213fa57827.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7ffd4b3d48178a3bb0a8d12ea5d261e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642213bf8d38b0227ed6ab0b\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nYour next regular expression will look for strings like free money Start by declaring a freeRegex variable and assigning it a regular expression that will match the string free money Remember to make it case-insensitive --hints--\nYou should declare a freeRegex variable using const js\nassert match(code, /const\\s+freeRegex\\s*=/);\nYour freeRegex variable should be a regular expression js\nassert instanceOf(freeRegex, RegExp);\nYour freeRegex should match free money js\nassert match('free money', freeRegex);\nYour freeRegex should be case-insensitive js\nassert include(freeRegex flags, 'i');\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "85bb6681227e9440da95ada68a2d1325",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8ba315fba31906a603e63e830dd64ac2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; --fcc-editable-region-- --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \" : \"This message does not seem to contain any spam\";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642213bf8d38b0227ed6ab0b.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "aeecee33f51070eeba5fe11691bde5ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423322e71f8d108608005cb.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6423322e71f8d108608005cb\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nNow update your o character to match o and 0 (the digit) --hints--\nYour freeRegex should use a character class to match o and 0 js\nassert match(freeRegex source, /\\[(o0|0o)\\]/);\nYour freeRegex should match free money js\nassert match('free money', freeRegex);\nYour freeRegex should match fr33 m0n3y js\nassert match('fr33 m0n3y', freeRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423322e71f8d108608005cb.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0250245809513a0ec1f08f0c3c7be016",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423322e71f8d108608005cb.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /fr[e3][e3] mon[e3]y/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423322e71f8d108608005cb.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4702d296ce63dd76b8929aafd3628c7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64233094a1293c079b5b0996\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nSpam messages often use numbers instead of letters to bypass filters Your regular expression should catch these Replace the e characters in your regular expression with character classes that match e and 3 --hints--\nYour freeRegex should use a character class js\nassert match(freeRegex source, /\\[ *\\]/);\nYour freeRegex should use a character class to match e and 3 js\nassert match(freeRegex source, /\\[(e3|3e)\\]/);\nYour freeRegex should use three character classes to match e and 3 js\nassert lengthOf(freeRegex source match(/\\[(e3|3e)\\]/g), 3);\nYour freeRegex should match free money js\nassert equal(\"free money\" match(freeRegex) [0], \"free money\");\nYour freeRegex should match fr33 mon3y js\nassert equal(\"fr33 mon3y\" match(freeRegex) [0], \"fr33 mon3y\");\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "542dcccc650721a797cfdf23479ae6ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 15rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /free money/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "29d1a7b92bf051154d533a0a325e523e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; --fcc-editable-region-- const freeRegex = /free money/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } resulttextContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233094a1293c079b5b0996.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9bfaf7da6ff0d29222419c58242a9f89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642335220b7d830a69eb59fb\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nIf you try entering the message free money, you'll notice it doesn't match your expression This is because \\s doesn't match the beginning or end of the text To match the beginning of the text, you can use the ^ anchor This asserts that your pattern match starts at the beginning of the full string Replace your first \\s character with a non-capturing group that matches \\s or ^ --hints--\nYour freeRegex should use a non-capturing group js\nassert match(freeRegex source, /\\(\\ :/);\nYour freeRegex should use a non-capturing group to match \\s or ^ js\nassert match(freeRegex source, /\\(\\ :(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\nYour freeRegex should match it's free money time js\nassert match(\"it's free money time\", freeRegex);\nYour freeRegex should match free money time js\nassert match('free money time', freeRegex);\nYour freeRegex should not match hands-free money time js\nassert notMatch('hands-free money', freeRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bd65eaeb0d324d6050f0ea2f101d8407",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; }message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /\\sfr[e3][e3] m[o0]n[e3]y\\s/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "92cecbfc7c1cbd4301cadc86be6dba7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; --fcc-editable-region-- const freeRegex = /\\sfr[e3][e3] m[o0]n[e3]y\\s/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButtonaddEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335220b7d830a69eb59fb.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e0f9b88877a610121944664ce51b0edb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423331f0527840934183aba.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6423331f0527840934183aba\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nYour regex should match whole words, not partial words That is, you do not want to match hands-free money management To do this, start by checking for spaces before and after your pattern You can do this by using the meta character \\s, which will match spaces, tabs, and line breaks --hints--\nYour freeRegex should use the \\s token js\nassert match(freeRegex source, /\\\\s/);\nYour freeRegex should look for spaces at the beginning and end of your pattern js\nassert isTrue(freeRegex source startsWith('\\\\s'));\nassert isTrue(freeRegex source endsWith('\\\\s'));\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3781,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423331f0527840934183aba.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6c0564bd0579ff96160be95cd21f6554",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423331f0527840934183aba.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /fr[e3][e3] m[o0]n[e3]y/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3781,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423331f0527840934183aba.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "089612307da22767f5a4e3d36b08557c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64233d08f234a310e73f9496\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nYour next regular expression will match strings like stock alert Declare a stockRegex variable and assign it a regular expression that will match the string stock alert Remember to make it case insensitive Add it to your denyList array as well --hints--\nYou should use const to declare your stockRegex variable js\nassert match(code, /const\\s+stockRegex\\s*=/);\nYour stockRegex variable should be assigned a regular expression js\nassert instanceOf(stockRegex, RegExp);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should be case-insensitive js\nassert include(stockRegex flags, 'i');\nYour denyList array should contain stockRegex js\nassert deepInclude(denyList, stockRegex);\nYour denyList array should contain freeRegex js\nassert deepInclude(denyList, freeRegex);\nYour denyList array should contain dollarRegex js\nassert deepInclude(denyList, dollarRegex);\nYour denyList array should contain helpRegex js\nassert deepInclude(denyList, helpRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "42eeea24f50a18583f63d26c0d5f42ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 15rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n--fcc-editable-region--\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2d896b607768d1e255a4c3cd60a1241b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex]; --fcc-editable-region-- const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButtonaddEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64233d08f234a310e73f9496.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ca9014a8588675bf63f600a895ccaf6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642335d232d7690b2d67dbaf\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nYou still aren't matching free money yet, because you need to match the end of the string as well Like the ^ anchor, you can use the $ anchor to match the end of the string Update your regular expression to match either the end of the string or a space, like you did for the beginning of the string --hints--\nYour freeRegex should use a second non-capturing group js\nassert lengthOf(freeRegex source match(/\\(\\ :/g), 2);\nYour freeRegex should use a non-capturing group to match \\s or $ js\nassert match(freeRegex source, /\\(\\ :(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\nYour freeRegex should match it's free money time js\nassert match(\"it's free money time\", freeRegex);\nYour freeRegex should match free money time js\nassert match('free money time', freeRegex);\nYour freeRegex should match it's free money js\nassert match(\"it's free money\", freeRegex);\nYour freeRegex should match free money js\nassert match('free money', freeRegex);\nYour freeRegex should not match hands-free money time js\nassert notMatch('hands-free money', freeRegex);\nYour freeRegex should not match free money-management js\nassert notMatch('free money-management', freeRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "24ea73f7e8750d78394144fa7e4d0c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; }main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cdfdb914605dcd78928d7f7f75b24b47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; --fcc-editable-region-- const freeRegex = /(:^|\\s)fr[e3][e3] m[o0]n[e3]y\\s/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642335d232d7690b2d67dbaf.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2784db5a95668cdcd5563a0a9931d9ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642344dc9390c712080432c7\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nLike your freeRegex, update your stockRegex to replace the e and o characters with character classes to match the letter and the corresponding number --hints--\nYour stockRegex should use a character class to match the letter e and the number 3 js\nassert match(stockRegex source, /\\[(e3|3e)\\]/);\nYour stockRegex should use a character class to match the letter o and the number 0 js\nassert match(stockRegex source, /\\[(o0|0o)\\]/);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should match st0ck al3rt js\nassert match('st0ck al3rt', stockRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a72cb77703f09267e17faab7c04e0ba9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /stock alert/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9df3d5728540cd2eacab110c1fda54a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; --fcc-editable-region-- const stockRegex = /stock alert/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex, stockRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButtonaddEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642344dc9390c712080432c7.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6ca8b7123810ffe6dd9fb2b80c3d35e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64234598ef08dd13114edae5\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nNext update your s and t characters to also match 5 and 7 respectively --hints--\nYour stockRegex should use a character class to match the letter s and the number 5 js\nassert match(stockRegex source, /\\[(s5|5s)\\]/);\nYour stockRegex should use a character class to match the letter t and the number 7 js\nassert match(stockRegex source, /\\[(t7|7t)\\]/);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should match 570ck al3r7 js\nassert match('570ck al3r7', stockRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0d4e8c19212a832ae2a8cf6103279894",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /st[o0]ck al[e3]rt/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ba91acfdbbb52ce747198f18e6711b25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; --fcc-editable-region-- const stockRegex = /st[o0]ck al[e3]rt/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex, stockRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButtonaddEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234598ef08dd13114edae5.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "09f0c45a76edb80794ada9665311e523",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6423472aeed932150e8984b6\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nUsing the same syntax, update c to match c, {, [, and ( --hints--\nYour stockRegex should use a character class to match c, {, [, and ( js\nassert match(stockRegex source, /\\[(c\\{\\[\\(|\\{c\\[\\(|\\[c\\{\\(|c\\[\\{\\(|\\{\\[c\\(|\\[\\{c\\(|\\[\\{\\(c|\\{\\[\\(c|\\(\\[\\{c|\\[\\(\\{c|\\{\\(\\[c|\\(\\{\\[c|\\(c\\[\\{|c\\(\\[\\{|\\[\\(c\\{|\\(\\[c\\{|c\\[\\(\\{|\\[c\\(\\{|\\{c\\(\\[|c\\{\\(\\[|\\(\\{c\\[|\\{\\(c\\[|c\\(\\{\\[|\\(c\\{\\[)\\]/);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should match 570(k 4l3r7 js\nassert match('570(k 4l3r7', stockRegex);\nYour stockRegex should match sto{k alert js\nassert match('sto{k alert', stockRegex);\nYour stockRegex should match sto[k alert js\nassert match('sto[k alert', stockRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bd08d66c1f1f1813daa7d9ea95bbf82f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; }main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "50c86230df5b22a707f7b29290d53ddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "{ display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y(:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0]ck [a@4]l[e3]r[t7]/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423472aeed932150e8984b6.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2ced8026e8acaa162cb3da297149586a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6423462975f33b14056583de\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nCharacter classes can take more than two characters Replace your a character with a character class that matches a, @, and 4 --hints--\nYour stockRegex should use a character class to match a, @, and 4 js\nassert match(stockRegex source, /\\[(a@4|a4@|4@a|4a@|@a4|@4a)]/);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should match stock @lert js\nassert match('stock @lert', stockRegex);\nYour stockRegex should match stock 4lert js\nassert match('stock 4lert', stockRegex);\nYour stockRegex should match 570ck 4l3r7 js\nassert match('570ck 4l3r7', stockRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "43715b0cbb1c0c2fc02a7048a224c3be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0]ck al[e3]r[t7]/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\nconst isSpam = (msg) => denyList some((regex) => regex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0c00e8232ba05a9a2feae91bf799b9e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; --fcc-editable-region-- const stockRegex = /[s5][t7][o0]ck al[e3]r[t7]/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex, freeRegex, stockRegex]; const isSpam = (msg) => denyList some((regex) => regextest(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3961,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423462975f33b14056583de.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "46af00f21f137c72b3dfb67bae8c485d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 64234797d84734163088961a\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nFinally, allow your regex to match whole words (like you did with freeRegex) --hints--\nYour stockRegex should use a non-capturing group js\nassert match(stockRegex source, /\\(\\ :/);\nYour stockRegex should use a non-capturing group to match \\s or ^ js\nassert match(stockRegex source, /\\(\\ :(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\nYour stockRegex should use a second non-capturing group js\nassert lengthOf(stockRegex source match(/\\(\\ :/g), 2);\nYour stockRegex should use a non-capturing group to match \\s or $ js\nassert match(stockRegex source, /\\(\\ :(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\nYour stockRegex should match it's stock alert time js\nassert match(\"it's stock alert time\", stockRegex);\nYour stockRegex should match stock alert time js\nassert match('stock alert time', stockRegex);\nYour stockRegex should match it's stock alert js\nassert match(\"it's stock alert\", stockRegex);\nYour stockRegex should match stock alert js\nassert match('stock alert', stockRegex);\nYour stockRegex should not match hands-stock alert time js\nassert notMatch('hands-stock alert', stockRegex);\nYour stockRegex should not match stock alert-management js\nassert notMatch('stock alert-management', stockRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8406d521dd8fdf4e6938dc348e88a0d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "stockRegex should match it's stock alert js assert match(\"it's stock alert\", stockRegex); Your stockRegex should match stock alert js assert match('stock alert', stockRegex); Your stockRegex should not match hands-stock alert time js assert notMatch('hands-stock alert', stockRegex); Your stockRegex should not match stock alert-management js assert notMatch('stock alert-management', stockRegex); --seed-- --seed-contents-- ```html Learn Regular Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or notMessage:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d50c7cfec78baf167c5dcde5710a2ff8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "} message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = documentgetElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7]/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\64234797d84734163088961a.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "21e96ff7471a75ad330c391dd31bda13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 66bb6467b4b7381178420970\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nWhile this expression does match 1 hundred dollars, it will not match 1  hundred  dollars, or 10 dollars Spam messages can and will find a way to exploit flaws in your detection Time to improve your regex Replace the first literal space with the \\s* expression The \\s character class matches whitespace, such as spaces, tabs, and new lines The * quantifier means \"match the previous character 0 or more times\" Replace the second literal space with \\s+ The + quantifier means \"match the previous character at least one time\" --hints--\nYour dollarRegex must not use literal spaces js\nassert notMatch(dollarRegex source, / /);\nYour dollarRegex must allow any number of spaces before the dollar quantity, and one or more spaces after js\nassert match(dollarRegex source, /\\\\s\\*\\(hundred\\|thousand\\|million\\|billion\\)\\ \\\\s\\+/);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bbc9c01bb612e6cc200cc7639f0380aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 11rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ (hundred|thousand|million|billion) dollars/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "50b2d231441eaefbef77f3d876560ef0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; --fcc-editable-region-- const dollarRegex = /[0-9]+ (hundred|thousand|million|billion) dollars/i; --fcc-editable-region-- const denyList = [helpRegex, dollarRegex]; const isSpam = (msg) => denyList some((regex) => regex test(msg)); checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \" : \"This message does not seem to contain any spam\";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4002,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\66bb6467b4b7381178420970.md",
      "source_type": "git_repo"
    },
    "token_count": 161,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b848245d6a12cfcbd8852b8e15c303ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65386e889dd615940cb3e042.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65386e889dd615940cb3e042\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you will learn about the JavaScript Date object by building a date formatter All of the HTML and CSS for this project have been provided for you Start by getting the #current-date element using the getElementById() method and assign it to a const variable called currentDateParagraph --hints--\nYou should use const to declare a currentDateParagraph variable js\nassert match(code, /const\\s+currentDateParagraph\\s*=/);\nYou should use document getElementById() to get the #current-date element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)current-date\\1\\s*\\)/);\nYou should assign the #current-date element to your currentDateParagraph variable js\nassert(code match(/const\\s+currentDateParagraph\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)current-date\\1\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65386e889dd615940cb3e042.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "98f6f0069f609887b7db5eb5c85793e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65386e889dd615940cb3e042.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65386e889dd615940cb3e042.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "13e7ba946e21800f04a517527f896c7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 6423491485db5e1786dd6434\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nYour final regular expression will look for strings like dear friend Declare a dearRegex and assign it a regular expression that will match the string dear friend Remember to make it case insensitive, and add it to your denyList array --hints--\nYou should use const to declare your dearRegex variable js\nassert match(code, /const\\s+dearRegex\\s*=/);\nYour dearRegex variable should be assigned a regular expression js\nassert instanceOf(dearRegex, RegExp);\nYour dearRegex should match dear friend js\nassert match('dear friend', dearRegex);\nYour dearRegex should be case-insensitive js\nassert include(dearRegex flags, 'i');\nYour denyList array should contain dearRegex js\nassert deepInclude(denyList, dearRegex);\nYour denyList array should contain stockRegex js\nassert deepInclude(denyList, stockRegex);\nYour denyList array should contain freeRegex js\nassert deepInclude(denyList, freeRegex);\nYour denyList array should contain dollarRegex js\nassert deepInclude(denyList, dollarRegex);\nYour denyList array should contain helpRegex js\nassert deepInclude(denyList, helpRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0ca3238c7d1998a39ae47accccac542a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "marked as spam or not Message: Check message © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 14rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\nconst stockRegex = /(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ddf1650707d4028ef097c859b22485c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; const stockRegex = /(:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]rt7/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n--fcc-editable-region--\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\6423491485db5e1786dd6434.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "20942ee1ba11bed569ddf5f18a8ad582",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653879d87bc55fa624280c77.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653879d87bc55fa624280c77\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nUse the getElementById() method to get the #date-options element and use const to assign it to a variable named dateOptionsSelectElement --hints--\nYou should use const to declare a dateOptionsSelectElement variable js\nassert match(code, /const\\s+dateOptionsSelectElement\\s*=/);\nYou should use document getElementById() to get the #date-options element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)date-options\\1\\s*\\)/);\nYou should assign the #date-options element to your dateOptionsSelectElement variable js\nassert(code match(/const\\s+dateOptionsSelectElement\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)date-options\\1\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6512,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653879d87bc55fa624280c77.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "921a8ca406d30f39648b9bbf9bdc7733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653879d87bc55fa624280c77.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6512,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653879d87bc55fa624280c77.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dc39e6338facb9e042ccd19024902ee8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65387b440b5cb1aa35585820.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65387b440b5cb1aa35585820\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nIn JavaScript, there are many built-in constructors that create objects A constructor is like a regular function, but starts with a capital letter, and is initialized with the new operator For example, you can use the Date() constructor with the new operator to create a new Date object that returns a string with the current date and time:\n```js\nconst currentDate = new Date();\nconsole log(currentDate);\n// Output:\n// Mon Aug 23 2021 15:31:00 GMT-0400 (Eastern Daylight Time)\n```\nCreate a new const variable called date and assign it a Date object with new Date() --hints--\nYou should use const to declare a date variable js\nassert match(code, /const\\s+date\\s*=/);\nYou should assign a Date object to your date variable with new Date() js\nassert(code match(/const\\s+date\\s*=\\s*new\\s+Date\\(\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6756,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65387b440b5cb1aa35585820.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bd0cb7e36aaf42698941aa66749f5374",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65387b440b5cb1aa35585820.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6756,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65387b440b5cb1aa35585820.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8bdc840fb27049e385e54bb66db10781",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "id: 642349b5b7bae31af21cd5f8\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nTo put everything you have learned together, update your dearRegex to map the vowels to the corresponding numbers (note that i should match 1, and also match the pipe symbol |), and to match whole words With that, your spam filter project is complete --hints--\nYour dearRegex should use a character class to match e or 3 js\nassert match(dearRegex source, /\\[(e3|3e)\\]/);\nYour dearRegex should use a character class to match a, @, or 4 js\nassert match(dearRegex source, /\\[(a@4|a4@|4a@|4@a|@a4|@4a)\\]/);\nYour dearRegex should use a character class to match i, 1, or | js\nassert match(dearRegex source, /\\[(i1\\||i\\|1|1i\\||1\\|i|\\|1i|\\|i1)\\]/);\nYour dearRegex should use a non-capturing group js\nassert match(dearRegex source, /\\(\\ :/);\nYour dearRegex should use a non-capturing group to match \\s or ^ js\nassert match(dearRegex source, /\\(\\ :(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\nYour dearRegex should use a second non-capturing group js\nassert lengthOf(dearRegex source match(/\\(\\ :/g), 2);\nYour dearRegex should use a non-capturing group to match \\s or $ js\nassert match(dearRegex source, /\\(\\ :(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\nYour dearRegex should match dear friend js\nassert match('dear friend', dearRegex);\nYour dearRegex should match d34r fr13nd js\nassert match('d34r fr13nd', dearRegex);\nYour dearRegex should match d3@r fr|3nd js\nassert match('d3@r fr|3nd', dearRegex);\nYour dearRegex should match my dear friend Naomi js\nassert match('my dear friend Naomi', dearRegex);\nYour dearRegex should match dear friend Naomi js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "f9dbda0cec05b9fde7991df44e7a14dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "2); Your dearRegex should use a non-capturing group to match \\s or $ js assert match(dearRegex source, /\\(\\ :(\\$\\|\\\\s|\\\\s\\|\\$)\\)/); Your dearRegex should match dear friend js assert match('dear friend', dearRegex); Your dearRegex should match d34r fr13nd js assert match('d34r fr13nd', dearRegex); Your dearRegex should match d3@r fr|3nd js assert match('d3@r fr|3nd', dearRegex); Your dearRegex should match my dear friend Naomi js assert match('my dear friend Naomi', dearRegex); Your dearRegex should match dear friend Naomi js assertmatch('dear friend Naomi', dearRegex);\nYour dearRegex should match my dear friend js\nassert match('my dear friend', dearRegex);\nYour dearRegex should not match non-dear friend js\nassert notMatch('non-dear friend', dearRegex);\nYour dearRegex should not match dear friend-o js\nassert notMatch('dear friend-o', dearRegex);\n--seed--\n--seed-contents--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not Message:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a8cccb6c2a742c7de51951299072680f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); color: var(--light-grey); } body, message-input:placeholder-shown { text-align: center; } textarea { max-width: 90%; } main-text { margin: 25px 0; } title { font-size: 2 5rem; } description { margin-top: 15px; font-size: 1 4rem; } message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; }btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document getElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\nconst stockRegex = /(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "5df4df7d42c485637f801ff882f8615e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = document getElementById(\"check-message-btn\"); const helpRegex = /please help|assist me/i; const dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i; const freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i; const stockRegex = /(:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]rt7/i;\n--fcc-editable-region--\nconst dearRegex = /dear friend/i;\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex, dearRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```\n--solutions--\n```html\nLearn Regular Expressions by Building a Spam Filter\nIs this Spam Enter a phrase to check if it would be marked as spam or not",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "ce8532854bca1820b45f6c49abb4abff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "checkMessageButton addEventListener(\"click\", () => { if (messageInput value === \"\") { alert(\"Please enter a message \"); return; } result textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \" : \"This message does not seem to contain any spam \"; messageInput value = \"\"; }); ``` --solutions-- ```html Learn Regular Expressions by Building a Spam Filter Is this Spam Enter a phrase to check if it would be marked as spam or notMessage:\nCheck message\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\ncolor: var(--light-grey);\n}\nbody,\nmessage-input:placeholder-shown {\ntext-align: center;\n}\ntextarea {\nmax-width: 90%;\n} main-text {\nmargin: 25px 0;\n} title {\nfont-size: 2 5rem;\n} description {\nmargin-top: 15px;\nfont-size: 1 4rem;\n} message-label {\ndisplay: block;\nmargin-bottom: 20px;\nfont-size: 1 5rem;\n}\nmessage-input:placeholder-shown,\ntextarea {\nfont-size: 1 1rem;\n} btn {\ndisplay: block;\ncursor: pointer;\nwidth: 200px;\nmargin: 10px auto;\ncolor: var(--dark-grey);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\nresult {\nfont-size: 2rem;\nmargin: 20px 0;\n} footer {\nmargin-top: 10px;\n}\n```\n```js\nconst messageInput = document getElementById(\"message-input\");\nconst result = document getElementById(\"result\");\nconst checkMessageButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "80e215dae5f5383f5f72b200ab4fa2df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
    "source_type": "git_repo",
    "title": "Learn Regular Expressions by Building a Spam Filter",
    "content": "} message-label { display: block; margin-bottom: 20px; font-size: 1 5rem; } message-input:placeholder-shown, textarea { font-size: 1 1rem; } btn { display: block; cursor: pointer; width: 200px; margin: 10px auto; color: var(--dark-grey); background-color: var(--gold); background-image: linear-gradient(var(--golden-yellow), var(--orange)); border-color: var(--gold); border-width: 3px; } btn:hover { background-image: linear-gradient(var(--yellow), var(--dark-orange)); } result { font-size: 2rem; margin: 20px 0; } footer { margin-top: 10px; } ``` ```js const messageInput = document getElementById(\"message-input\"); const result = document getElementById(\"result\"); const checkMessageButton = documentgetElementById(\"check-message-btn\");\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*( :hundred|thousand|million|billion) \\s+dollars/i;\nconst freeRegex = /( :^|\\s)fr[e3][e3] m[o0]n[e3]y( :$|\\s)/i;\nconst stockRegex = /( :^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]rt7/i;\nconst dearRegex = /( :^|\\s)d[e3][a@4]r fr[i1|][e3]nd( :$|\\s)/i;\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex, dearRegex];\nconst isSpam = (msg) => denyList some((regex) => regex test(msg));\ncheckMessageButton addEventListener(\"click\", () => {\nif (messageInput value === \"\") {\nalert(\"Please enter a message \");\nreturn;\n}\nresult textContent = isSpam(messageInput value) \"Oh no This looks like a spam message \"\n: \"This message does not seem to contain any spam \";\nmessageInput value = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-regular-expressions-by-building-a-spam-filter\\642349b5b7bae31af21cd5f8.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "19ef504dfad663ed6cd8dce477a5313a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538830e01ab66ade75b869e.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 6538830e01ab66ade75b869e\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nThe Date object has a number of methods that allow you to get the date and time in different formats One of those is the getDate() method, which returns a number between 1 and 31 that represents the day of the month for that date For example:\njs\nconst date = new Date();\nconst dayOfTheMonth = date getDate();\nconsole log(dayOfTheMonth); // 20\nUsing const, create a variable named day and assign it the day of the month from date with the getDate() method --hints--\nYou should use const to declare a day variable js\nassert match(code, /const\\s+day\\s*=/);\nYou should assign the date getDate() to your day variable js\nassert(code match(/const\\s+day\\s*=\\s*date\\ getDate\\(\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6655,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538830e01ab66ade75b869e.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8cd82c652e51d87ce3f0839c56cb020f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538830e01ab66ade75b869e.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6655,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538830e01ab66ade75b869e.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "567d1994bbdb26106d61f8d97fefd09b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388475abfb4faf8dd5e347.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388475abfb4faf8dd5e347\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nThe getFullYear() method returns a number which represents the year for the provided date Using const, create a variable named year and assign it the year from date with the getFullYear() method --hints--\nYou should use const to declare a year variable js\nassert match(code, /const\\s+year\\s*=/);\nYou should assign the date getFullYear() to your year variable js\nassert(code match(/const\\s+year\\s*=\\s*date\\ getFullYear\\(\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388475abfb4faf8dd5e347.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d29668671d338749933cde7f3ab382ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388475abfb4faf8dd5e347.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388475abfb4faf8dd5e347.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0fdc3b93c24378d041f48b63fa67359f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653883da4a1fabaeb5f1f5e7\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nThe getMonth() method returns a number between 0 and 11 This represents the month for the date provided, where 0 is January and 11 is December Because the number this method returns is zero-based, you need to add 1 to it to get the expected month number Using const, create a variable named month and assign it the month from date with the getMonth() method Remember to add 1 to the number returned by getMonth() --hints--\nYou should use const to declare a month variable js\nassert match(code, /const\\s+month\\s*=/);\nYou should assign the date getMonth() + 1 to your month variable js\nassert(code match(/const\\s+month\\s*=\\s*date\\ getMonth\\(\\s*\\)\\s*\\+\\s*1/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e36f70ffdf2499b9009626b8d25e3fad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "048e5e4dff1059741d9006c95bec63bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "height: 36px; pointer-events: none; padding-left: 5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = dategetDate();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653883da4a1fabaeb5f1f5e7.md",
      "source_type": "git_repo"
    },
    "token_count": 169,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "79433323fe1ff1645601ce7561ae7ca5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653884e09dfb4eb01f1622ed.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653884e09dfb4eb01f1622ed\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nThe getHours() method returns a number between 0 and 23 This represents the hour for the provided date, where 0 is midnight and 23 is 11 p m Create a const variable named hours and assign it the hour from date with the getHours() method --hints--\nYou should use const to declare a hours variable js\nassert match(code, /const\\s+hours\\s*=/);\nYou should assign the date getHours() to your hours variable js\nassert(code match(/const\\s+hours\\s*=\\s*date\\ getHours\\(\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653884e09dfb4eb01f1622ed.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35a284e41cd2a93c7839ad078d2a6230",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653884e09dfb4eb01f1622ed.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "} title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 03s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653884e09dfb4eb01f1622ed.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c03576dc05bf728c2f70c92d6505f836",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538855514cb16b10204e712.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 6538855514cb16b10204e712\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nThe getMinutes() method returns a number between 0 and 59 which represents the minutes for the provided date Create a const variable named minutes and assign it the minutes from date with the getMinutes() method --hints--\nYou should use const to declare a minutes variable js\nassert match(code, /const\\s+minutes\\s*=/);\nYou should assign the date getMinutes() to your minutes variable js\nassert(code match(/const\\s+minutes\\s*=\\s*date\\ getMinutes\\(\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538855514cb16b10204e712.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d2d4b7e09ca6a3ba341c61bc63ca0299",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538855514cb16b10204e712.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538855514cb16b10204e712.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a6a11c6bd0a77a4d55f5c73f3a16cd9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653885c61ede29b1a99554a2.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653885c61ede29b1a99554a2\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nNext, create a const variable named formattedDate and assign it empty template literals --hints--\nYou should use const to declare a formattedDate variable js\nassert match(code, /const\\s+formattedDate\\s*=/);\nYou should assign the empty template literals to your formattedDate variable js\nassert(code match(/const\\s+formattedDate\\s*=\\s*``/));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6452,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653885c61ede29b1a99554a2.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "929b5f6d2a0b82db9b1369c4ebe95b4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653885c61ede29b1a99554a2.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6452,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653885c61ede29b1a99554a2.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "28d6acfb3cbba008edf2fb6d41eab7e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388659a72663b27cde0699.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388659a72663b27cde0699\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nInside the template literal, add an embedded expression that contains the day variable --hints--\nYou should use the day constant inside the template literal js\nassert(code match(/const\\s+formattedDate\\s*=\\s*`\\${day}`/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388659a72663b27cde0699.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c14515468ed76a400be8b4b9ada5dd3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388659a72663b27cde0699.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; } select-icon { position: absolute; top: 4px; right: 4px; width: 30px; height: 36px; pointer-events: none; padding-left: 5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svgicon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\nconst formattedDate = ``;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388659a72663b27cde0699.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3774072e9b422694563682fc7ae4afa9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653887098bdc39b3684a51c8.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653887098bdc39b3684a51c8\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nAfter the day variable, add a dash (-) followed by another embedded expression that contains the month variable --hints--\nYou should add a dash followed by the month constant to the template literal js\nassert(code match(/const\\s+formattedDate\\s*=\\s*`\\${day}\\s*-\\s*\\${month}`/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653887098bdc39b3684a51c8.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cd6ed51144e3422be7803dec6333d356",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653887098bdc39b3684a51c8.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\nconst formattedDate = ${day};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6415,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653887098bdc39b3684a51c8.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ccc0f55f53278d11532bd5796354511d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388762f61f44b3fd490a4a.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388762f61f44b3fd490a4a\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nAfter the month variable, add a dash followed by another embedded expression that contains the year variable --hints--\nYou should add a dash followed by the year constant to the template literal js\nassert(code match(/const\\s+formattedDate\\s*=\\s*`\\${day}\\s*-\\s*\\${month}\\s*-\\s*\\${year}`/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6433,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388762f61f44b3fd490a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "eaa6f97eba74339e38814d326cc1ae31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388762f61f44b3fd490a4a.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\nconst formattedDate = ${day}-${month};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6433,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388762f61f44b3fd490a4a.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e6d4e678157a9ad7dc57c65a43e834b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538886c61a414b4e34496fe.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 6538886c61a414b4e34496fe\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nTo see the results of the formattedDate variable, add a console log() statement and pass in the formattedDate variable as an argument Open up the console and you should see the date printed out --hints--\nYou should have a console log(formattedDate) line in your code js\nassert match(code, /console\\ log\\(\\s*formattedDate\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538886c61a414b4e34496fe.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f5612d4b6f785253907ad40b88d626f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538886c61a414b4e34496fe.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; }select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\nconst formattedDate = ${day}-${month}-${year};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538886c61a414b4e34496fe.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0c9adf030624c7c6dac686f9872f743e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388ac7154e44b72c74d616.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388ac7154e44b72c74d616\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nUse the textContent property on currentDateParagraph to set its text content to the value of the formattedDate variable Also, make sure to remove your console log(formattedDate); line --hints--\nYou should use the textContent property to set the text content of currentDateParagraph to the value of the constant formattedDate js\nassert(code match(/currentDateParagraph\\ textContent\\s*=\\s*formattedDate/g));\nYou should not have a console log(formattedDate); line in your code js\nassert notMatch(code, /console\\ log\\(\\s*formattedDate\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388ac7154e44b72c74d616.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "351c9ea7ce72a61d57b12c8d6b79db70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388ac7154e44b72c74d616.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "} title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 03s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\n--fcc-editable-region--\nconst formattedDate = ${day}-${month}-${year};\nconsole log(formattedDate);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388ac7154e44b72c74d616.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9d1bf8745bef27144fe9fce87f136d55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388bbcbf6928b83fc424d1\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nIn JavaScript, the change event is used to detect when the value of an HTML element has changed:\n```js\nelement addEventListener(\"change\", () => {\n});\n```\nAttach the addEventListener method to the dateOptionsSelectElement The first argument of the event listener should be the string \"change\" and the second argument should be an empty arrow function --hints--\nYou should attach the addEventListener method to the dateOptionsSelectElement js\nassert(code match(/dateOptionsSelectElement\\ addEventListener\\s*\\(/g));\nYour event listener should listen for a \"change\" event js\nassert(code match(/dateOptionsSelectElement\\ addEventListener\\s*\\(\\s*('|\")change\\1/g));\nYou should add an empty arrow function as the second argument to the addEventListener method js\nassert(code match(/dateOptionsSelectElement\\ addEventListener\\s*\\(\\s*('|\")change\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "499ce956e3a7d9b90bc6cf46cb0b53a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fafbc3c2368fb5b358e3656060ed5d93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388bbcbf6928b83fc424d1.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d07ff11332a355d3f492930a4dcc2ab1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388edfdf364fbb04e426f2\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nWhen the user chooses the Year, Month, Day option from the dropdown, the date format should reflect this choice To do this, you can add a case clause in the switch statement that checks for a match against the expression expr, followed by code to run if there's a match Here's an example where the case clause checks that expr is equal to the string \"case123\":\njs\nswitch (expr) {\ncase 'case123':\n// Write your logic here\n}\nAdd a case where the value is \"yyyy-mm-dd\" Inside the case, set the text content of currentDateParagraph to the value of formattedDate --hints--\nYou should add a case with the value \"yyyy-mm-dd\" js\nassert match(code, /case\\s*('|\")yyyy-mm-dd\\1\\s*:\\s*/);\nYou should set the textContent property of currentDateParagraph to formattedDate in the block of your \"yyyy-mm-dd\" case js\nassert match(code, /case\\s*('|\")yyyy-mm-dd\\1\\s*:\\s*currentDateParagraph\\ textContent\\s*=\\s*formattedDate/);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f59179746abd9acfceb550bd4ba564f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a2eb473acd0ad46c789cb95968ab4cb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388edfdf364fbb04e426f2.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f937ce9c8f8507d8dd5463d58bb046d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 6538935e2ab721beedb137c4\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nLike in the previous step, use method chaining to split, reverse, and join the formattedDate variable Use '-' in the split and join methods Test out your changes by selecting the Year, Month, Day option from the dropdown menu The date should now be displayed in the format yyyy-mm-dd --hints--\nYou should chain split('-') to the formattedDate variable js\nassert(code match(/formattedDate\\s*\\s*\\ split\\s*\\(\\s*('|\")-\\1\\s*\\)/g));\nYou should chain reverse() after the split('-') method js\nassert(code match(/split\\s*\\(\\s*('|\")-\\1\\s*\\)\\s*\\ \\s*reverse\\s*\\(\\s*\\)/g));\nYou should chain join('-') after the reverse() method js\nassert(code match(/reverse\\s*\\(\\s*\\)\\s*\\ \\s*join\\s*\\(\\s*('|\")-\\1\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "245dde001d22e8d9e4202d9b83b55967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "26cb3dca9c60d3e5acf52db5a1cfc51a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6538935e2ab721beedb137c4.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "491d29ff19dddb4247ff56ba4ffe9f25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65388d61a57a00b9ad0d0817\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nWhen a user makes a selection from the dropdown menu, the function should get the user's value and display the date in their chosen date format To do this, you can use the switch statement A switch statement is used to compare an expression against multiple possible values and execute different code blocks based on the match It's commonly used for branching logic For example, here's how to compare the expression dayOfWeek against possible values:\njs\nswitch (dayOfWeek) {\ncase 1:\nconsole log(\"It's Monday \");\nbreak;\ncase 2:\nconsole log(\"It's Tuesday \");\nbreak;\n// cases for other workdays\ndefault:\nconsole log(\"It's the weekend \");\n}\nCreate a switch statement and use dateOptionsSelectElement value as the expression --hints--\nYou should use a switch statement where dateOptionsSelectElement value is the expression js\nassert(code match(/switch\\s*\\(\\s*dateOptionsSelectElement\\ value\\s*\\)/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "635e6794c4e579e07c3fec5b7dac231b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7ce840b717d6af3c3846397a36bef661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65388d61a57a00b9ad0d0817.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6f52e4a6962d714dbea61b82b14cb6d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 653898fa7eee37c57b960e35\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nIf your switch statement is going to have multiple cases, it is best practice to include a break statement The break statement will tell the JavaScript interpreter to stop executing statements Without adding a break statement at the end of each case block, the program will execute the code for all matching cases:\njs\nswitch (someVariable) {\ncase 'case123':\n// Write your logic here\nbreak; // Terminates the switch statement\n}\nAdd a break statement to the end of your case block --hints--\nYou should add a break statement within the case after your logic js\nassert(code match(/\\ join\\(\\s*('|\")-\\1\\s*\\)\\s*; \\n+\\s*break/g));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7109,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7c760e86037ceb29543b5044a955fa04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7109,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fc0accb21f2289b1933c2287961211b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate split(\"-\") reverse() join(\"-\");\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7109,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\653898fa7eee37c57b960e35.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "31ec4adea16b704bc5d1819ff0fc895f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65389a63d3b1d6c764c0e10e\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nAdd another case with the value \"mm-dd-yyyy-h-mm\" Inside that case, set the text content of currentDateParagraph to empty template literals Also, make sure to include a break statement to terminate the switch statement --hints--\nYou should add a case with the value \"mm-dd-yyyy-h-mm\" js\nassert match(code, /case\\s*('|\")mm-dd-yyyy-h-mm\\1\\s*:\\s*/);\nYou should set the textContent property of currentDateParagraph to an empty template literals inside the block of your \"mm-dd-yyyy-h-mm\" case js\nassert match(code, /case\\s*('|\")mm-dd-yyyy-h-mm\\1\\s*:\\s*currentDateParagraph\\ textContent\\s*=\\s*``/);\nYou should include a break statement in the \"mm-dd-yyyy-h-mm\" case after your logic js\nassert match(code, /currentDateParagraph\\ textContent\\s*=\\s*``\\s*; \\n+\\s*break/);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5f7a2ba761b708dcd99a8eea54bd92f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9df2badbb9606ebe04f3bb8a1c603ef9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate split(\"-\") reverse() join(\"-\");\nbreak;\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389a63d3b1d6c764c0e10e.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3831c421b4459b70d0375fd3f4bca908",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65389de504d0f2ca10e92a57\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nWhen the user selects the Month, Day, Year, Hours, Minutes option from the dropdown, you need to display the date in the format mm-dd-yyyy h Hours m Minutes Inside the case for mm-dd-yyyy-h-mm, use string interpolation to assign the formatted date from above to the textContent property of currentDateParagraph Make sure to use the month, day, year, hours, and minutes variables in your answer --hints--\nYour answer should follow this format: mm-dd-yyyy h Hours m Minutes Replace mm, dd, yyyy, h, and m with the month, day, year, hours, and minutes variables you created earlier js\nconst pattern = /case\\s*('|\")mm-dd-yyyy-h-mm\\1\\s*:\\s*currentDateParagraph\\ textContent\\s*=\\s*`(\\$\\{month}-\\$\\{day}-\\$\\{year} \\$\\{hours} Hours \\$\\{minutes} Minutes)`/;\nassert(code match(pattern));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eda56c7a74b89c994ae436eb29ecf601",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3e86d9716d17387b1bf6e5ecebee9854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate split(\"-\") reverse() join(\"-\");\nbreak;\ncase \"mm-dd-yyyy-h-mm\":\ncurrentDateParagraph textContent = ``;\nbreak;\n}\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389de504d0f2ca10e92a57.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bbe56a5609301d7217c152b5e0520c2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 6607343c7909e562a2e3d94c\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nTo format the date into yyyy-mm-dd, you will need to use the split, reverse, and join methods But first, you will need to go through a few practice examples so you can better understand how to use them in the context of this project The split() method is used to divide a string into substrings based on a specified separator It then returns these substrings as elements of an array Here is an example of taking the words \"Hello World\" and returning an array of one element:\njs\nconst greeting = \"Hello World\";\ngreeting split(); // [\"Hello World\"]\nCreate a new const variable called exampleSentence and assign it the result of \"selur pmaCedoCeerf\" split() Then add a console statement to log the value of exampleSentence Open up the console to see the result --hints--\nYou should have a const variable called exampleSentence js\nassert match(code, /const\\s+exampleSentence\\s*=/);\nYou should assign \"selur pmaCedoCeerf\" split() to your exampleSentence variable js\nassert deepEqual(exampleSentence, \"selur pmaCedoCeerf\" split());\nYou should have a console log statement that logs the value of exampleSentence js\nassert match(code, /console\\ log\\(\\s*exampleSentence\\s*\\)/);\nYour console statement should be below the exampleSentence variable assignment ```js\nconst consoleStatementIndex = code indexOf(\"console log(exampleSentence)\");\nconst exampleSentenceIndex = code indexOf(\"const exampleSentence\");\nassert isBelow(exampleSentenceIndex, consoleStatementIndex);\n```\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3664b121b953bd7270e74109bbe74ec0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "below the exampleSentence variable assignment ```js const consoleStatementIndex = code indexOf(\"console log(exampleSentence)\"); const exampleSentenceIndex = code indexOf(\"const exampleSentence\"); assert isBelow(exampleSentenceIndex, consoleStatementIndex); ``` --seed-- --seed-contents-- ```html Learn the Date Object by Building a Date Formatter Today's Date Day, Month, Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); }title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) {",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6629e7f6178822da49a4c78abe15f414",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 0 3s ease, background-color 0 3s ease, border-bottom-color 0 3s ease; } select-icon { position: absolute; top: 4px; right: 4px; width: 30px; height: 36px; pointer-events: none; padding-left: 5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) {title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\n--fcc-editable-region--\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\6607343c7909e562a2e3d94c.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fb76499dc68f5aa4496bf825723c8085",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 660736bde759eb64c3bd15c3\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nThe split method takes in a parameter known as a separator The separator is used to tell the computer where each split should occur Here is an example of using an empty string as a separator:\njs\n// returns [\"h\", \"e\", \"l\", \"l\", \"o\"]\n\"hello\" split(\"\");\nOther examples of separators can include a space \" \", or a hyphen \"-\" If you don't provide a separator, the method will return an array with the original string as the only element Update your split method, to use an empty string as a separator Open up the console again to see the result --hints--\nYour split method should take in an empty string as a separator js\nassert deepEqual(exampleSentence, \"selur pmaCedoCeerf\" split(\"\"));\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "19e4082db060f858545ff3af78fbda0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0a274c32097bc45f1ae3f4b6abe5642b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\nconst exampleSentence = \"selur pmaCedoCeerf\" split();\nconsole log(exampleSentence);\n--fcc-editable-region--\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660736bde759eb64c3bd15c3.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f6feb677c41274a45b2e4fde0a1675e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 66074463e8cc156e18142dbe\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nTo reverse an array of elements, you can use the reverse method This method reverses the order of the elements in the array in place The first element becomes the last, and the last element becomes the first Here is an example of using the reverse method:\njs\n// returns [5, 4, 3, 2, 1]\n[1, 2, 3, 4, 5] reverse();\nChain the reverse method to your split method Open up the console again to see the result Remember that you learned how to chain methods in the previous project like this:\njs\nmethod1() method2() method3();\n--hints--\nYou should chain the reverse method to your \"selur pmaCedoCeerf\" split(\"\") method js\nassert deepEqual(exampleSentence, [\n'f', 'r', 'e', 'e', 'C',\n'o', 'd', 'e', 'C', 'a',\n'm', 'p', ' ', 'r', 'u',\n'l', 'e', 's'\n]);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0330aadb0a34f836b05627a44fdedee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f5a9d1009df40b144ae6c81746a8ef4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\nconst exampleSentence = \"selur pmaCedoCeerf\" split(\"\");\nconsole log(exampleSentence);\n--fcc-editable-region--\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074463e8cc156e18142dbe.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1dfd25d5b405f92895051fa8e6af65ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 660746a665a61c7075a0f457\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nIn the previous project, you learned how to work with the join method This method takes an array of elements and joins them into a string Similar to the split method, the join method also takes an optional separator If you don't provide a separator, the default separator is a comma Here is an example of using the join method:\njs\n// returns \"1-2-3-4-5\"\n[1, 2, 3, 4, 5] join(\"-\");\nChain the join method to your reverse method Pass in an empty string as the separator Open up the console and see the output --hints--\nYou should chain join('') to the reverse method js\nassert strictEqual(exampleSentence, 'freeCodeCamp rules');\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3e043e06e9b6a02769b2d75ba996875f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9663743102cd17d32be29a94176d247a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\nconst exampleSentence = \"selur pmaCedoCeerf\" split(\"\") reverse();\nconsole log(exampleSentence);\n--fcc-editable-region--\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\660746a665a61c7075a0f457.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "25931639c836b0c78946800687843ef2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 65389eff4893facbbe6eae67\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nIn a switch statement, the default case is executed when none of the previous case conditions match the value being evaluated It serves as a catch-all for any other possible cases For example:\n```js\nconst dayOfWeek = 7;\nswitch (dayOfWeek) {\ncase 1:\nconsole log(\"It's Monday \");\nbreak;\ncase 2:\nconsole log(\"It's Tuesday \");\nbreak;\n// cases for other workdays\ndefault:\nconsole log(\"It's the weekend \");\n}\n```\nFor the default case, set the text content of currentDateParagraph to the value of formattedDate And with that, your date formatter is complete You can now format the current date three different ways --hints--\nYou should have a default case after the existing cases js\nassert match(code, /default\\s*:\\s*/)\nIn the block of the default case, set the textContent property of currentDateParagraph to formattedDate js\nassert match(code, /default\\s*:\\s*currentDateParagraph\\ textContent\\s*=\\s*formattedDate/g);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "fd1ff0d35d4a64985e24f952bd270a6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0cbc4191515cf54d89a7d8dfe45531e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\n--fcc-editable-region--\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate split(\"-\") reverse() join(\"-\");\nbreak;\ncase \"mm-dd-yyyy-h-mm\":\ncurrentDateParagraph textContent = ${month}-${day}-${year} ${hours} Hours ${minutes} Minutes;\nbreak;\n}\n--fcc-editable-region--\n});\n```\n--solutions--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "285e35ea56bb7a7fbcd9f81712da83f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "Year Year, Month, Day Month, Day, Year, Hours, Minutes ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --dark-grey: #0a0a23; --white: #ffffff; --yellow: #f1be32; } body { color: var(--white); background-color: var(--dark-grey); } title-container { margin: 10px 0; display: flex; align-items: center; justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); }dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0 3s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "32c0799279f88303ffeb313c810fecb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "5px; transition: background-color 0 3s ease, border-color 0 3s ease; } select-icon svg icon { transition: fill 0 3s ease; fill: var(--dark-grey); } current-date { font-size: 2rem; text-align: center; } @media (max-width: 375px) { title { font-size: 2rem; } dropdown-container { width: 80%; } date-svg { display: none; } } ``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = dategetMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph textContent = formattedDate split(\"-\") reverse() join(\"-\");\nbreak;\ncase \"mm-dd-yyyy-h-mm\":\ncurrentDateParagraph textContent = ${month}-${day}-${year} ${hours} Hours ${minutes} Minutes;\nbreak;\ndefault:\ncurrentDateParagraph textContent = formattedDate;\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\65389eff4893facbbe6eae67.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "521ea7874543e85a7ef3418d9127bb32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "id: 66074af5d2b4f373cb140d6a\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nNow that you have a better understanding on how to work with the split, reverse, and join methods, you can delete your exampleSentence variable and console statement --hints--\nYou should not have a exampleSentence variable in your code js\nassert notMatch(code, /const\\s+exampleSentence\\s*=\\s*['\"]selur pmaCedoCeerf['\"]\\s*\\ split\\(['\"]['\"]\\)\\s*\\ reverse\\(\\)\\s*\\ join\\(['\"]['\"]\\)/);\nYou should not have a console log statement in your code js\nassert notMatch(code, /console\\ log\\(exampleSentence\\)/);\n--seed--\n--seed-contents--\n```html\nLearn the Date Object by Building a Date Formatter\nToday's Date\nDay, Month, Year\nYear, Month, Day\nMonth, Day, Year, Hours, Minutes\n```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--dark-grey: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n}\nbody {\ncolor: var(--white);\nbackground-color: var(--dark-grey);\n} title-container {\nmargin: 10px 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n} title {\nfont-size: 2 5rem;\n} date-svg {\nwidth: 30px;\nheight: 30px;\n} divider {\nmargin: auto;\nwidth: 150px;\nheight: 10px;\nbackground-color: var(--yellow);\n} dropdown-container {\nwidth: 50%;\nmargin: 40px auto;\nposition: relative;\n}\nselect {\ndisplay: block;\nmargin: 20px auto 0;\nwidth: 100%;\nheight: 50px;\nfont-size: 100%;\nfont-weight: bold;\ncursor: pointer;\nbackground-color: var(--white);\nborder: none;\ncolor: var(--dark-grey);\nappearance: none;\npadding: 10px;\npadding-right: 38px;\n-webkit-appearance: none;\n-moz-appearance: none;\ntransition: color 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7010,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e09abd3b92ff78d6d1fe93c0803cc16d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "justify-content: center; gap: 8px; } title { font-size: 2 5rem; } date-svg { width: 30px; height: 30px; } divider { margin: auto; width: 150px; height: 10px; background-color: var(--yellow); } dropdown-container { width: 50%; margin: 40px auto; position: relative; } select { display: block; margin: 20px auto 0; width: 100%; height: 50px; font-size: 100%; font-weight: bold; cursor: pointer; background-color: var(--white); border: none; color: var(--dark-grey); appearance: none; padding: 10px; padding-right: 38px; -webkit-appearance: none; -moz-appearance: none; transition: color 03s ease, background-color 0 3s ease,\nborder-bottom-color 0 3s ease;\n} select-icon {\nposition: absolute;\ntop: 4px;\nright: 4px;\nwidth: 30px;\nheight: 36px;\npointer-events: none;\npadding-left: 5px;\ntransition: background-color 0 3s ease, border-color 0 3s ease;\n} select-icon svg icon {\ntransition: fill 0 3s ease;\nfill: var(--dark-grey);\n}\ncurrent-date {\nfont-size: 2rem;\ntext-align: center;\n}\n@media (max-width: 375px) { title {\nfont-size: 2rem;\n} dropdown-container {\nwidth: 80%;\n} date-svg {\ndisplay: none;\n}\n}\n```\n```js\nconst currentDateParagraph = document getElementById(\"current-date\");\nconst dateOptionsSelectElement = document getElementById(\"date-options\");\nconst date = new Date();\nconst day = date getDate();\nconst month = date getMonth() + 1;\nconst year = date getFullYear();\nconst hours = date getHours();\nconst minutes = date getMinutes();\nconst formattedDate = ${day}-${month}-${year};\ncurrentDateParagraph textContent = formattedDate;\n--fcc-editable-region--\nconst exampleSentence = \"selur pmaCedoCeerf\" split(\"\") reverse() join(\"\");\nconsole log(exampleSentence);\n--fcc-editable-region--\ndateOptionsSelectElement addEventListener(\"change\", () => {\nswitch (dateOptionsSelectElement value) {\ncase \"yyyy-mm-dd\":\ncurrentDateParagraph",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7010,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "502c675b75cecdc2cd9f6832e70e2299",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
    "source_type": "git_repo",
    "title": "Learn the Date Object by Building a Date Formatter",
    "content": "``` ```js const currentDateParagraph = document getElementById(\"current-date\"); const dateOptionsSelectElement = document getElementById(\"date-options\"); const date = new Date(); const day = date getDate(); const month = date getMonth() + 1; const year = date getFullYear(); const hours = date getHours(); const minutes = date getMinutes(); const formattedDate = ${day}-${month}-${year}; currentDateParagraph textContent = formattedDate; --fcc-editable-region-- const exampleSentence = \"selur pmaCedoCeerf\" split(\"\") reverse() join(\"\"); console log(exampleSentence); --fcc-editable-region-- dateOptionsSelectElement addEventListener(\"change\", () => { switch (dateOptionsSelectElement value) { case \"yyyy-mm-dd\": currentDateParagraphtextContent = formattedDate\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7010,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-the-date-object-by-building-a-date-formatter\\66074af5d2b4f373cb140d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 169,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7d7391be7735d76529523b6b9291328e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657a19e477dc04e36a86dffc\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nWhen the user clicks on the Show rules button, the rules for the game should display on the screen When they click on the button again, the rules should be hidden Use an event listener to invert the value of the isModalShowing variable, toggle the visibility of the rulesContainer, and change the text of the rulesBtn to Show rules or Hide rules --before-all--\njs\nfunction resetState() {\nisModalShowing = false;\nrulesBtn textContent = 'Show rules';\nrulesContainer style display = 'none';\n}\n--hints--\nYour rulesContainer should not be visible initially js\nassert isFalse(rulesContainer checkVisibility());\nWhen your rulesBtn is clicked, your isModalShowing should be true js\nrulesBtn click();\nassert isTrue(isModalShowing);\nresetState();\nWhen your rulesBtn is clicked, your rulesContainer should be visible js\nrulesBtn click();\nassert isTrue(rulesContainer checkVisibility());\nresetState();\nWhen your rulesBtn is clicked, your rulesBtn should say Hide rules js\nrulesBtn click();\nassert strictEqual(rulesBtn innerText trim(), \"Hide rules\");\nresetState();\nWhen your rulesBtn is clicked twice, your isModalShowing should be false js\nrulesBtn click();\nassert isTrue(isModalShowing);\nrulesBtn click();\nassert isFalse(isModalShowing);\nresetState();\nWhen your rulesBtn is clicked twice, your rulesContainer should not be visible js\nrulesBtn click();\nassert isTrue(rulesContainer checkVisibility());\nrulesBtn click();\nassert isFalse(rulesContainer checkVisibility());\nresetState();\nWhen your rulesBtn is clicked twice, your rulesBtn should say Show rules js\nrulesBtn click();\nassert strictEqual(rulesBtn innerText trim(), \"Hide rules\");\nrulesBtn click();\nassert strictEqual(rulesBtn innerText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f98d3ea0d8cbf850455277b12aa53db7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "innerText trim(), \"Hide rules\"); resetState(); When your rulesBtn is clicked twice, your isModalShowing should be false js rulesBtn click(); assert isTrue(isModalShowing); rulesBtn click(); assert isFalse(isModalShowing); resetState(); When your rulesBtn is clicked twice, your rulesContainer should not be visible js rulesBtn click(); assert isTrue(rulesContainer checkVisibility()); rulesBtn click(); assert isFalse(rulesContainer checkVisibility()); resetState(); When your rulesBtn is clicked twice, your rulesBtn should say Show rules js rulesBtn click(); assert strictEqual(rulesBtn innerText trim(), \"Hide rules\"); rulesBtn click(); assert strictEqual(rulesBtn innerTexttrim(), \"Show rules\");\nresetState();\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b488e41d1868986f0ea895b6cc509786",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "63394f9c8ac94851528dde229aab0f62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a19e477dc04e36a86dffc.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7b85c6d862d087f586cade3e9d424969",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657a0ea50da0c8d9d6d7950a\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you will learn algorithmic thinking by building a dice game There are a total of 6 rounds and for each round, the player can roll the dice up to 3 times and collect a score The HTML and CSS have been provided for you Feel free to explore them When you are ready, you will need to set up your HTML variables Get all of your die elements and assign them to a listOfAllDice variable Get your score inputs (the input elements in your #score-options) and score spans, and assign them to scoreInputs and scoreSpans Assign the #current-round element to roundElement and the #current-round-rolls element to rollsElement, then do the same for your #total-score and #score-history elements Assign your #roll-dice-btn, #keep-score-btn, #rules-btn, and rules-container to variables with properly formatted names When the user clicks on the Show rules button, they should be able to toggle between showing and hiding the game rules Create a variable isModalShowing to track the state of the game rules Each time the user rolls the dice, you will need to keep track of all of the dice values Create a variable diceValuesArr to track this Throughout the game, you will need to keep track of the current score, total score, number of rolls and which round the player is on Declare rolls, score, and round variables for this purpose Think about what the starting value of each of these variables should be All of these variables should be able to be reassigned --hints--\nYou should assign your die elements to listOfAllDice js\nassert deepEqual(listOfAllDice, document querySelectorAll(\" die\"));\nYou should assign your #score-options input elements to scoreInputs js\nassert deepEqual(scoreInputs, document querySelectorAll(\"#score-options input\"));\nYou should assign your #score-options span elements to scoreSpans js\nassert deepEqual(scoreSpans, document querySelectorAll(\"#score-options span\"));\nYou should assign your #current-round element to roundElement js\nassert deepInclude([document getElementById(\"current-round\"), document querySelector(\"#current-round\")], roundElement);\nYou should assign your #current-round-rolls element to rollsElement js\nassert deepInclude([document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "85f35a3d70defa6967e337b6585da278",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "be able to be reassigned --hints-- You should assign your die elements to listOfAllDice js assert deepEqual(listOfAllDice, document querySelectorAll(\" die\")); You should assign your #score-options input elements to scoreInputs js assert deepEqual(scoreInputs, document querySelectorAll(\"#score-options input\")); You should assign your #score-options span elements to scoreSpans js assert deepEqual(scoreSpans, document querySelectorAll(\"#score-options span\")); You should assign your #current-round element to roundElement js assert deepInclude([document getElementById(\"current-round\"), document querySelector(\"#current-round\")], roundElement); You should assign your #current-round-rolls element to rollsElement js assert deepInclude([documentgetElementById(\"current-round-rolls\"), document querySelector(\"#current-round-rolls\")], rollsElement);\nYou should assign your #total-score element to totalScoreElement js\nassert deepInclude([document getElementById(\"total-score\"), document querySelector(\"#total-score\")], totalScoreElement);\nYou should assign your #score-history element to scoreHistory js\nassert deepInclude([document getElementById(\"score-history\"), document querySelector(\"#score-history\")], scoreHistory);\nYou should assign your #roll-dice-btn element to rollDiceBtn js\nassert deepInclude([document getElementById(\"roll-dice-btn\"), document querySelector(\"#roll-dice-btn\")], rollDiceBtn);\nYou should assign your #keep-score-btn element to keepScoreBtn js\nassert deepInclude([document getElementById(\"keep-score-btn\"), document querySelector(\"#keep-score-btn\")], keepScoreBtn);\nYou should assign your #rules-btn element to rulesBtn js\nassert deepInclude([document getElementById(\"rules-btn\"), document querySelector(\"#rules-btn\")], rulesBtn);\nYou should assign your rules-container element to rulesContainer js\nassert deepEqual(rulesContainer, document querySelector(\" rules-container\"));\nYour isModalShowing variable should have the value false js\nassert isFalse(isModalShowing);\nYour diceValuesArr should have an empty array for the value js\nassert isArray(diceValuesArr);\nassert isEmpty(diceValuesArr);\nYour rolls variable should have the value 0 js\nassert strictEqual(rolls, 0);\nYour score variable should have the value 0 js\nassert strictEqual(score, 0);\nYour round variable should have the value 1 js\nassert strictEqual(round, 1);\nAll of your new variables should be declared with let js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "9c19f6ae2c8e8206e2ed3189c7c83421",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "querySelector(\" rules-container\")); Your isModalShowing variable should have the value false js assert isFalse(isModalShowing); Your diceValuesArr should have an empty array for the value js assert isArray(diceValuesArr); assert isEmpty(diceValuesArr); Your rolls variable should have the value 0 js assert strictEqual(rolls, 0); Your score variable should have the value 0 js assert strictEqual(score, 0); Your round variable should have the value 1 js assert strictEqual(round, 1); All of your new variables should be declared with let js assertmatch(code, /let isModalShowing/);\nassert match(code, /let diceValuesArr/);\nassert match(code, /let rolls/);\nassert match(code, /let score/);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "9e78280782b700500bceaaf096d64afd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "should have an empty array for the value js assert isArray(diceValuesArr); assert isEmpty(diceValuesArr); Your rolls variable should have the value 0 js assert strictEqual(rolls, 0); Your score variable should have the value 0 js assert strictEqual(score, 0); Your round variable should have the value 1 js assert strictEqual(round, 1); All of your new variables should be declared with let js assertmatch(code, /let isModalShowing/); assert match(code, /let diceValuesArr/); assert match(code, /let rolls/); assert match(code, /let score/); assertmatch(code, /let round/);\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "1174ca36f5c06c86145fd57e1fa791f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "345eba1e30def401147ee57fa5ce86d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657a0ea50da0c8d9d6d7950a.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "226dac78d6990ae0087a73ea266a50b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657c91ad5028770fc68d6116\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nWhen the user clicks on the Roll the dice button, five random die numbers should be generated and displayed on the screen Build out the logic such that clicking on the rollDiceBtn generates five random numbers between 1 and 6 inclusive, sets the diceValuesArr to contain only those five numbers, and displays the numbers in order in the listOfAllDice elements --hints--\nWhen your rollDiceBtn is clicked, your diceValuesArr array should contain five elements js\nrollDiceBtn click();\nassert lengthOf(diceValuesArr, 5);\nWhen your rollDiceBtn is clicked a second time, your diceValuesArr array should contain only five new elements js\nconst __mocker = new __helpers RandomMocker();\ntry {\n__mocker mock();\nrollDiceBtn click();\nconst old = [ diceValuesArr];\nrollDiceBtn click();\nassert lengthOf(diceValuesArr, 5);\nassert notDeepEqual(old, diceValuesArr);\n} finally {\n__mocker restore();\n}\nEach of your random numbers should be between 1 and 6 inclusive ```js\nconst __mocker = new __helpers RandomMocker();\ntry {\n__mocker mock();\nfor (let i = 1; i < 20; i++) {\nrollDiceBtn click();\nfor (const val of diceValuesArr) {\nassert isAtLeast(val, 1);\nassert isAtMost(val, 6);\n}\n}\n} finally {\n__mocker restore();\n}\n```\nEach of your die elements should contain the corresponding value from the diceValuesArr array js\nconst numbers = [ listOfAllDice] map(el => Number(el innerText));\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5232ac890d66eb2fd0a1e28456531b69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "should be between 1 and 6 inclusive ```js const __mocker = new __helpers RandomMocker(); try { __mocker mock(); for (let i = 1; i < 20; i++) { rollDiceBtn click(); for (const val of diceValuesArr) { assert isAtLeast(val, 1); assert isAtMost(val, 6); } } } finally { __mocker restore(); } ``` Each of your die elements should contain the corresponding value from the diceValuesArr array js const numbers = [ listOfAllDice] map(el => Number(el innerText)); assertdeepEqual(numbers, diceValuesArr);\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "770acbd969dd0a792049a1d2eba2d750",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "efbc499d8078e3b6830a10a61aa6f7fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n--fcc-editable-region--\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6c9f291fa94528e9472df1d73e08e781",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "span\"); const roundElement = document getElementById(\"current-round\"); const rollsElement = document getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; --fcc-editable-region-- --fcc-editable-region-- rulesBtn addEventListener(\"click\", () => { isModalShowing = isModalShowing; if (isModalShowing) { rulesBtntextContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8248,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657c91ad5028770fc68d6116.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d02211e4c719fe981a3ab9cfb02802dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657ca813b0908a230e3eb488\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nFor each round in the game, users are allowed to roll the dice a maximum of three times If a user clicks the rollDiceBtn but has already made three rolls, the browser should show an alert() to indicate they must select a score - otherwise, it should roll the dice as it currently does and increment the rolls variable --hints--\nYour event listener should roll the dice js\nrollDiceBtn click();\nconst numbers = [ listOfAllDice] map(el => Number(el innerText));\nassert deepEqual(numbers, diceValuesArr);\nIf dice have been rolled three times, the browser should show an alert js\nconst oldAlert = alert;\nalert = () => {};\nconst oldWindow = window alert;\nwindow alert = () => {};\nrollDiceBtn click();\nrollDiceBtn click();\nconst old = [ diceValuesArr];\nrollDiceBtn click();\nassert deepEqual(old, diceValuesArr);\nalert = oldAlert;\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "25fa3f010228140d9a1dc9f4d9260292",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "variable --hints-- Your event listener should roll the dice js rollDiceBtn click(); const numbers = [ listOfAllDice] map(el => Number(el innerText)); assert deepEqual(numbers, diceValuesArr); If dice have been rolled three times, the browser should show an alert js const oldAlert = alert; alert = () => {}; const oldWindow = window alert; window alert = () => {}; rollDiceBtn click(); rollDiceBtn click(); const old = [ diceValuesArr]; rollDiceBtn click(); assert deepEqual(old, diceValuesArr); alert = oldAlert; windowalert = oldWindow;\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "88aa4749ed3d4d76b98d4f142457e41c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "53e057776060ac4df342892dbfb64fcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4853a057fe07b35661fc69be9185cfd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nrollDice();\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657ca813b0908a230e3eb488.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "006d82fabbdfeb4fb95fc74ad5ac5687",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657caa69db80ef25862b1b17\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nYou'll need to be able to update your rolls and your round on the page Create an updateStats function to update the text of those two elements with the appropriate values Then, call that function when your rollDiceBtn is clicked and the dice are rolled --hints--\nYou should have a function called updateStats js\nassert isFunction(updateStats);\nYour updateStats function should update the rollsElement element with the correct value js\nrolls = 2;\nupdateStats();\nassert strictEqual(rollsElement innerText, \"2\");\nYour updateStats function should update the roundElement element with the correct value js\nround = 5;\nupdateStats();\nassert strictEqual(roundElement innerText, \"5\");\nRolling the dice should update the rolls correctly js\nrolls = 0;\nrollDiceBtn click();\nassert strictEqual(rollsElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e22ff827ae2ba8c4ce0f47adffb1c757",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "is clicked and the dice are rolled --hints-- You should have a function called updateStats js assert isFunction(updateStats); Your updateStats function should update the rollsElement element with the correct value js rolls = 2; updateStats(); assert strictEqual(rollsElement innerText, \"2\"); Your updateStats function should update the roundElement element with the correct value js round = 5; updateStats(); assert strictEqual(roundElement innerText, \"5\"); Rolling the dice should update the rolls correctly js rolls = 0; rollDiceBtn click(); assert strictEqual(rollsElementinnerText, \"1\");\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "26187831ac1140ee10634234148b1452",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6c5c712a25ea63294796e06c78cbaec8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "732697a36feb912571a35c3e4e64a856",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nrollDice();\n}\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caa69db80ef25862b1b17.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "67661a51f8bb4755d64d75be30fc4b33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657caf204c0d672a35411c31\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nEach time you roll the dice, you could end up with a Three of a kind, Four of a kind, Full house, Straight or a random combination of numbers Based on the outcome, you can make a selection and add points to your score Start by creating a function called updateRadioOption that takes an index and a score value as arguments It should set the scoreInputs at that index to be enabled, set the value of that input to the score, and display , score = ${score} in the correct scoreSpans element --hints--\nupdateRadioOption should be a function js\nassert isFunction(updateRadioOption);\nupdateRadioOption should update the scoreInputs element at the provided index to be enabled js\nupdateRadioOption(0, 10);\nassert isFalse(scoreInputs[0] disabled);\nupdateRadioOption should update the value of the scoreInputs element at the provided index to be the given score js\nassert deepEqual(scoreInputs[0] value, \"10\");\nupdateRadioOption should update the text of the scoreSpans element at the provided index to be the text \", score = \" followed by the given score js\nassert deepEqual(scoreSpans[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "0246ec9500a0d7f06570d5a6efac22fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "a function js assert isFunction(updateRadioOption); updateRadioOption should update the scoreInputs element at the provided index to be enabled js updateRadioOption(0, 10); assert isFalse(scoreInputs[0] disabled); updateRadioOption should update the value of the scoreInputs element at the provided index to be the given score js assert deepEqual(scoreInputs[0] value, \"10\"); updateRadioOption should update the text of the scoreSpans element at the provided index to be the text \", score = \" followed by the given score js assert deepEqual(scoreSpans[0]innerText, \", score = 10\");\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4f3e1495a823edc9dd9e17b67b38f9f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5f1f2beb238672d80ef7f6fd51d3f16b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "ba3367694ee11efdbaca29ef6d939327",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\n--fcc-editable-region--\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nrollDice();\nupdateStats();\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657caf204c0d672a35411c31.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b7f96431751d4259a39ad7ced3133203",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657d1d52d574588677347c7f\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nBefore each dice roll, you will need to reset the values for the score inputs and spans so a new value can be displayed Create a resetRadioOptions function Your function should iterate through the scoreInputs to disable them and remove the checked attribute Your function should also remove the text from each of the scoreSpans Finally, call this function before you roll the dice --hints--\nYou should have a resetRadioOptions function js\nassert isFunction(resetRadioOptions);\nYour resetRadioOptions should disable all scoreInputs js\ngetHighestDuplicates([5,5,5,5,5]);\nresetRadioOptions();\nfor (const input of scoreInputs) {\nassert isTrue(input disabled)\n}\nYour resetRadioOptions should remove the checked attribute fom all scoreInputs js\nscoreInputs[5] checked = true;\nresetRadioOptions();\nfor (const input of scoreInputs) {\nassert isFalse(input checked);\n}\nYour resetRadioOptions should remove the text from all scoreSpans js\ngetHighestDuplicates([5,5,5,5,5]);\nresetRadioOptions();\nfor (const span of scoreSpans) {\nassert strictEqual(span",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c41f375cb13f9271a7d342c68fba8a9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "dice --hints-- You should have a resetRadioOptions function js assert isFunction(resetRadioOptions); Your resetRadioOptions should disable all scoreInputs js getHighestDuplicates([5,5,5,5,5]); resetRadioOptions(); for (const input of scoreInputs) { assert isTrue(input disabled) } Your resetRadioOptions should remove the checked attribute fom all scoreInputs js scoreInputs[5] checked = true; resetRadioOptions(); for (const input of scoreInputs) { assert isFalse(input checked); } Your resetRadioOptions should remove the text from all scoreSpans js getHighestDuplicates([5,5,5,5,5]); resetRadioOptions(); for (const span of scoreSpans) { assert strictEqual(spaninnerText, \"\");\n}\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "c6230bda88163fd4af24417f15918b9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d9f8c2de5628def8153858f5faa49d6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "8fb717bcd5905197620abf0ff9922ae6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\n--fcc-editable-region--\nrulesBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "ec0670c3878baeb7a73f1af6cccd5f70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": ">= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; --fcc-editable-region-- rollDiceBtn addEventListener(\"click\", () => { if (rolls === 3) { alert(\"You have made three rolls this round Please select a score \"); } else { rolls++; rollDice(); updateStats(); getHighestDuplicates(diceValuesArr); } }); --fcc-editable-region-- rulesBtnaddEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d1d52d574588677347c7f.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "053d6486776b491b4894f249a74bd258",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657cf677438e705eab9fd1f9\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nIf you roll the dice and get a Three of a kind or Four of a kind, then you can get a score totalling the sum of all five dice values To calculate this, create a getHighestDuplicates function which takes an array of numbers The function will need to count how many times each number is found in the array If a number appears four or more times, you will need to update the Four of a Kind option with your updateRadioOption function If a number appears three or more times, you will need to update the Three of a Kind option In both cases, the score value should be the sum of all five dice Regardless of the outcome, the final option should be updated with a score of 0 Make sure to call your getHighestDuplicates when the dice are rolled --hints--\nYou should have a function called getHighestDuplicates js\nassert isFunction(getHighestDuplicates);\nWhen the array has less than three of the same number, your getHighestDuplicates function should update the final radio option with , score = 0 js\ngetHighestDuplicates([1, 2, 3, 4, 5]);\nassert strictEqual(scoreSpans[5] innerText, \", score = 0\");\nWhen the array has less than three of the same number, your getHighestDuplicates function should not update the first nor the second radio options js\ngetHighestDuplicates([1, 2, 3, 4, 5]);\nassert strictEqual(scoreSpans[0] innerText, \"\");\nassert strictEqual(scoreSpans[1] innerText, \"\");\nWhen the array has three of the same number, your getHighestDuplicates function should update the Three of a Kind radio option with , score = and the total sum of the dice js\ngetHighestDuplicates([5, 5, 5, 1, 1]);\nassert strictEqual(scoreSpans[0] innerText, \", score = 17\");\nWhen the array has three of the same number, your getHighestDuplicates function should not update the Four of a Kind radio option js\ngetHighestDuplicates([5, 5, 5, 1, 1]);\nassert strictEqual(scoreSpans[1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "e1d79bc7b1855542a0788a3b9248c25c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "\"\"); When the array has three of the same number, your getHighestDuplicates function should update the Three of a Kind radio option with , score = and the total sum of the dice js getHighestDuplicates([5, 5, 5, 1, 1]); assert strictEqual(scoreSpans[0] innerText, \", score = 17\"); When the array has three of the same number, your getHighestDuplicates function should not update the Four of a Kind radio option js getHighestDuplicates([5, 5, 5, 1, 1]); assert strictEqual(scoreSpans[1]innerText, \"\");\nWhen the array has four of the same number, your getHighestDuplicates function should update the Four of a Kind radio option with , score = and the total sum of the dice js\ngetHighestDuplicates([5, 5, 5, 5, 1]);\nassert strictEqual(scoreSpans[1] innerText, \", score = 21\");\nWhen the array has four of the same number, your getHighestDuplicates function should also update the Three of a Kind radio option with , score = and the total sum of the dice js\ngetHighestDuplicates([5, 5, 5, 5, 1]);\nassert strictEqual(scoreSpans[0] innerText, \", score = 21\");\nYou should call your getHighestDuplicates function when the dice are rolled js\n/* If the function doesn't change the HTML,\nwe can safely assume it is being called */\nfor (let i = 0; i < 10; i++) {\nrolls = 0;\nrollDiceBtn click();\nconst oldSpans = [ scoreSpans] map(el => el innerText);\ngetHighestDuplicates(diceValuesArr);\nassert deepEqual([ scoreSpans] map(el => el",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "788ed0be9a932bbbc10252f81a912685",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "of the dice js getHighestDuplicates([5, 5, 5, 5, 1]); assert strictEqual(scoreSpans[0] innerText, \", score = 21\"); You should call your getHighestDuplicates function when the dice are rolled js /* If the function doesn't change the HTML, we can safely assume it is being called */ for (let i = 0; i < 10; i++) { rolls = 0; rollDiceBtn click(); const oldSpans = [ scoreSpans] map(el => el innerText); getHighestDuplicates(diceValuesArr); assert deepEqual([ scoreSpans] map(el => elinnerText), oldSpans);\n}\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 526,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d2fdcede0a3141e9861813b08ef10f0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "333b736ab5cbb685afe2dacb6f394dad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "29a5cab4e592510685f912f66c7c33dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nrollDice();\nupdateStats();\n}\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657cf677438e705eab9fd1f9.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "804790a58e9e615a584e0eb75609af46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657d3ab710745d17697c633a\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nWhen you roll the dice and make a selection, you are not able to keep the score you selected and move onto the next round Create an updateScore function to add this functionality Your function will need two parameters for the user selected score option The first parameter will be passed the value of the radio button, remember this is a string, and the second parameter will be passed the id value of the radio button, which is the type of score they achieved The function will need to add the user selected value to the score, update the total score text on the page, and add a new li element to the score history ul element, using the format ${achieved} : ${selectedValue} for the li element content --hints--\nYou should have a updateScore function js\nassert isFunction(updateScore);\nYour updateScore function should convert string value to integer and add the value to the total score js\nscore = 0;\nupdateScore(\"10\", \"hi\");\nassert strictEqual(score, 10);\nYour updateScore function should add the value of the first parameter to the total score js\nscore = 0;\nupdateScore(10, \"hi\");\nassert strictEqual(score, 10);\nYour updateScore function should update the text of the totalScoreElement element js\nscore = 0;\nupdateScore(10, \"hi\");\nassert strictEqual(totalScoreElement innerText, \"10\");\nYour updateScore function should add a new list item to the scoreHistory element js\nscoreHistory innerHTML = \"\";\nupdateScore(10, \"hi\");\nassert strictEqual(scoreHistory children length, 1);\nWhen updateScore(10, \"hi\") is called, your new list element should have the text hi : 10 js\nscoreHistory innerHTML = \"\";\nupdateScore(10, \"hi\");\nassert strictEqual(scoreHistory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "6fa6daafcc887ba08e8a2fd0c5c54932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "updateScore(10, \"hi\"); assert strictEqual(score, 10); Your updateScore function should update the text of the totalScoreElement element js score = 0; updateScore(10, \"hi\"); assert strictEqual(totalScoreElement innerText, \"10\"); Your updateScore function should add a new list item to the scoreHistory element js scoreHistory innerHTML = \"\"; updateScore(10, \"hi\"); assert strictEqual(scoreHistory children length, 1); When updateScore(10, \"hi\") is called, your new list element should have the text hi : 10 js scoreHistory innerHTML = \"\"; updateScore(10, \"hi\"); assert strictEqual(scoreHistoryinnerHTML, \"<li>hi : 10</li>\");\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 536,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "08e98478f7cf0dae2ae4249080fd3a25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d34e75246fcfea5e9e94f0cdc34bbda5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "d42f8d8da27c9ffb606d28b165f20cff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans forEach((span) => {\nspan textContent = \"\";\n});\n};\nrollDiceBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3215aaa0a9babecb1ee12a1e5ab7e144",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; input checked = false; }); scoreSpans forEach((span) => { span textContent = \"\"; }); }; rollDiceBtnaddEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d3ab710745d17697c633a.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "02e0e1cf6dd1d5fcafaefdc02ff5124b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657d552526c0d72beb57160f\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nAt this point in the game, you are able to roll the dice, make a selection and play for a few rounds However, you should notice that there is no end to the game and there are infinite rounds According to the rules, there should be a total of six rounds and then the game ends with the final score After running your logic when the user selects a score, you should check if 6 rounds have been played If so, display an alert with the user's final score after 500 milliseconds --hints--\nIf six rounds have been played, you should show an alert to the user js\nconst messages = []\nconst oldAlert = alert;\nalert = (msg) => {messages push(msg)};\nconst oldWindow = window alert;\nwindow alert = (msg) => {messages push(msg)};\nscoreInputs[0] checked = true;\nscoreInputs[0] value = \"10\";\nround = 5;\nkeepScoreBtn click();\nassert lengthOf(messages, 0, messages[0]);\nscoreInputs[0] value = \"10\";\nscoreInputs[0] checked = true;\nkeepScoreBtn click();\nnew Promise(resolve => setTimeout(resolve, 1000)) then(() => {\nassert lengthOf(messages, 1);\nalert = oldAlert;\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a25c3b01645738b25264ffe6b0dc7e1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "should show an alert to the user js const messages = [] const oldAlert = alert; alert = (msg) => {messages push(msg)}; const oldWindow = window alert; window alert = (msg) => {messages push(msg)}; scoreInputs[0] checked = true; scoreInputs[0] value = \"10\"; round = 5; keepScoreBtn click(); assert lengthOf(messages, 0, messages[0]); scoreInputs[0] value = \"10\"; scoreInputs[0] checked = true; keepScoreBtn click(); new Promise(resolve => setTimeout(resolve, 1000)) then(() => { assert lengthOf(messages, 1); alert = oldAlert; windowalert = oldWindow;\n})\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "ad06185e6f8f56344ff109a709e2a1ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "5a84947f3afabfbd8fba6f33de206fdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "b5b6bba608f1797fe7f0cf3db1fd7e7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "6a25477f81d261351260c84102b8b06c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "(count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; input checked = false; }); scoreSpansforEach((span) => {\nspan textContent = \"\";\n});\n};\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn addEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\n--fcc-editable-region--\n--fcc-editable-region--\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d552526c0d72beb57160f.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "787a731016fded490eb99c2ea05c65af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657d4a7e2002f822c646204b\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nAfter a user makes a selection, they should be able to keep that score and move onto the next round by clicking the keepScoreBtn When that button is clicked, you should find which radio option is checked and capture its value and id attributes If the user has selected an option, call your functions to update the score, reset the radio options, and add the value and id to the score history If the user has not selected an option, display an alert informing them to do so --hints--\nWhen your keepScoreBtn is clicked, the score should be updated in the totalScoreElement text js\nscoreInputs[0] checked = true;\nscoreInputs[0] value = \"10\";\nscore = 10;\nkeepScoreBtn click();\nassert strictEqual(totalScoreElement innerText, \"20\");\nWhen your keepScoreBtn is clicked, the radio options should be reset js\nscoreInputs[0] checked = true;\nscoreInputs[0] value = \"10\";\nscore = 10;\nkeepScoreBtn click();\nfor (const element of scoreInputs) {\nassert isFalse(element checked);\nassert isTrue(element disabled);\n}\nfor (const element of scoreSpans) {\nassert strictEqual(element innerText, \"\");\n}\nWhen your keepScoreBtn is clicked, the score history should be updated js\nscoreInputs[0] checked = true;\nscoreInputs[0] value = \"10\";\nscoreHistory innerHTML = \"\";\nkeepScoreBtn click();\nassert strictEqual(scoreHistory innerHTML, \"<li>three-of-a-kind : 10</li>\");\nWhen your keepScoreBtn is clicked, and no options are selected, you should display an alert to the user js\nconst messages = []\nconst oldAlert = alert;\nalert = (msg) => {messages push(msg)};\nconst oldWindow = window alert;\nwindow alert = (msg) => {messages push(msg)};\nkeepScoreBtn click();\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "7c7d678a29d3541e05cc21139b92900c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "clicked, the score history should be updated js scoreInputs[0] checked = true; scoreInputs[0] value = \"10\"; scoreHistory innerHTML = \"\"; keepScoreBtn click(); assert strictEqual(scoreHistory innerHTML, \"<li>three-of-a-kind : 10</li>\"); When your keepScoreBtn is clicked, and no options are selected, you should display an alert to the user js const messages = [] const oldAlert = alert; alert = (msg) => {messages push(msg)}; const oldWindow = window alert; window alert = (msg) => {messages push(msg)}; keepScoreBtn click(); assertlengthOf(messages, 1);\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 522,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "752f81fc5a820c39cfaaf2d259dcbc65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0be8b0c291d9f27e631126d7b6d59750",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "1234ff63f105b7d96378ce36ed9b101e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a797c028c6bdee40465741816d8be3dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "(count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; input checked = false; }); scoreSpansforEach((span) => {\nspan textContent = \"\";\n});\n};\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657d4a7e2002f822c646204b.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "6b8ec859ff855469e271c9c516c0adec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657e0c2c6a9d37705146f34d\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nIf the user rolls three of one number, and two of another number, this is called a full house Declare a detectFullHouse function that accepts a single argument The function will be passed the diceValuesArr array when called Your detectFullHouse function should check if the user has rolled three of one number and two of another number If so, it should update the third radio button to display a score of 25, with the correct attributes Regardless, it should always update the last radio button to display a score of 0, with the correct attributes Don't forget to call your new function when the dice are rolled --hints--\nYou should have a detectFullHouse function js\nassert isFunction(detectFullHouse);\nYour detectFullHouse function should have a parameter js\nassert match(code, /( :var|let|const)\\s+detectFullHouse\\s*=\\s*(\\(\\s*\\w+\\s*\\)|\\s*\\w+\\s*)\\s*=>\\s*|function\\s+detectFullHouse\\s*\\(\\s*\\w+\\s*\\)/);\nWhen a full house is rolled, your detectFullHouse function should enable the third radio button, set its value to 25, and set the third span to display the text , score = 25 js\nresetRadioOptions();\ndetectFullHouse([1,1,1,2,2]);\nassert isFalse(scoreInputs[2] disabled);\nassert strictEqual(scoreInputs[2] value, \"25\");\nassert strictEqual(scoreSpans[2] innerText, \", score = 25\");\nWhen a full house is not rolled, your detectFullHouse function should enable the final radio button, set its value to 0, and set the final span to display the text , score = 0 js\nresetRadioOptions();\ndetectFullHouse([1,2,3,4,5]);\nassert isTrue(scoreInputs[2] disabled);\nassert isFalse(scoreInputs[5] disabled);\nassert strictEqual(scoreInputs[5] value, \"0\");\nassert strictEqual(scoreSpans[5] innerText, \", score = 0\");\nYou should call your detectFullHouse function when your rollDiceBtn is clicked ```js\n// Temporarily modifies Math random to guarantee full house",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "841f6e19a0d59c79d1deaa10e0ad45cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "25\"); When a full house is not rolled, your detectFullHouse function should enable the final radio button, set its value to 0, and set the final span to display the text , score = 0 js resetRadioOptions(); detectFullHouse([1,2,3,4,5]); assert isTrue(scoreInputs[2] disabled); assert isFalse(scoreInputs[5] disabled); assert strictEqual(scoreInputs[5] value, \"0\"); assert strictEqual(scoreSpans[5] innerText, \", score = 0\"); You should call your detectFullHouse function when your rollDiceBtn is clicked ```js // Temporarily modifies Math random to guarantee full houseconst origMathRandom = Math random\nconst myMathRandom = (() => {\nlet i = 0;\nconst values = [0, 0, 0, 1 / 6 + 0 000001, 1 / 6 + 0 000001];\nreturn () => values[i++ % 5];\n})();\nMath random = myMathRandom;\ntry {\nrollDiceBtn click();\n} finally {\nMath random = origMathRandom;\n}\nassert isFalse(scoreInputs[2] disabled);\nassert strictEqual(scoreInputs[2] value, \"25\");\nassert strictEqual(scoreSpans[2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "c8a19ceb8c1d1cc924b6e54611a14afc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "is clicked ```js // Temporarily modifies Math random to guarantee full houseconst origMathRandom = Math random const myMathRandom = (() => { let i = 0; const values = [0, 0, 0, 1 / 6 + 0 000001, 1 / 6 + 0 000001]; return () => values[i++ % 5]; })(); Math random = myMathRandom; try { rollDiceBtn click(); } finally { Math random = origMathRandom; } assert isFalse(scoreInputs[2] disabled); assert strictEqual(scoreInputs[2] value, \"25\"); assert strictEqual(scoreSpans[2]innerText, \", score = 25\");\n```\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "a593e9fcc728e025223da56a7279dbc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "5aad65fde0341d8760d5de01368d5ae9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "36cbc3036af611487eba4dee0f754eab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\n--fcc-editable-region--\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "7119acd73d29503a407ff497acac51e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "count = counts[num]; if (count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; --fcc-editable-region-- const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; inputchecked = false;\n});\nscoreSpans forEach((span) => {\nspan textContent = \"\";\n});\n};\nconst resetGame = () => {\ndiceValuesArr = [0, 0, 0, 0, 0];\nscore = 0;\nround = 1;\nrolls = 0;\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\ntotalScoreElement textContent = score;\nscoreHistory innerHTML = \"\";\nrollsElement textContent = rolls;\nroundElement textContent = round;\nresetRadioOptions();\n};\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn addEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\nif (round > 6) {\nsetTimeout(() => {\nalert(Game Over",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "3256706a213a62c956499d5a1937a6fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "rulesBtn textContent = \"Hide rules\"; rulesContainer style display = \"block\"; } else { rulesBtn textContent = \"Show rules\"; rulesContainer style display = \"none\"; } }); keepScoreBtn addEventListener(\"click\", () => { let selectedValue; let achieved; for (const radioButton of scoreInputs) { if (radioButton checked) { selectedValue = radioButton value; achieved = radioButton id; break; } } if (selectedValue) { rolls = 0; round++; updateStats(); resetRadioOptions(); updateScore(selectedValue, achieved); if (round > 6) { setTimeout(() => { alert(Game OverYour total score is ${score});\nresetGame();\n}, 500);\n}\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e0c2c6a9d37705146f34d.md",
      "source_type": "git_repo"
    },
    "token_count": 162,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "1d9b1e914361b7f6cafef9785888e448",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657dfeef78fe0364bd241d7f\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nIf you go through six rounds of the game, you should see the alert show up with your final score But when you dismiss the alert, you are able to keep playing for more rounds past the original six To fix this, you will need to reset the game Declare a resetGame function to do so Reset all of the listOfAllDice elements to display 0, update score and rolls to be 0, update round to be 1, set the totalScoreElement text to the user's total score, clear the score history by setting it to an empty string, set the rollsElement text to the number of rolls, and set the roundElement text to the current round Finally, reset all of the radio buttons to their initial states Call this function after displaying the alert with the final score --hints--\nYou should have a function called resetGame js\nassert isFunction(resetGame);\nYour resetGame function should set both score and rolls to 0, and round to 1 js\nscore = 20;\nround = 5000;\nrolls = 150;\nresetGame();\nassert strictEqual(score, 0);\nassert strictEqual(round, 1);\nassert strictEqual(rolls, 0);\nYour resetGame function should set each listOfAllDice element to have the text 0 js\nrollDice();\nresetGame();\nfor (const element of listOfAllDice) {\nassert strictEqual(element innerText, \"0\")\n}\nYour resetGame function should set the text of the totalScoreElement element to the current score js\nscore = 100;\nresetGame();\nassert strictEqual(totalScoreElement innerText, \"0\");\nYour resetGame function should set the text of the roundElement element to the current round js\nround = 100;\nresetGame();\nassert strictEqual(roundElement innerText, \"1\");\nYour resetGame function should set all of the radio buttons to be unchecked and disabled js\nrolls = 0;\nresetGame();\nfor (const element of scoreInputs) {\nassert isTrue(element disabled);\nassert isFalse(element checked);\n}\nYour resetGame function should remove the text from the scoreSpans elements js\nrolls = 0;\nresetGame();\nfor (const element of scoreSpans) {\nassert strictEqual(element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "a03bc245e446e1feea0be42463c36679",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "the text of the roundElement element to the current round js round = 100; resetGame(); assert strictEqual(roundElement innerText, \"1\"); Your resetGame function should set all of the radio buttons to be unchecked and disabled js rolls = 0; resetGame(); for (const element of scoreInputs) { assert isTrue(element disabled); assert isFalse(element checked); } Your resetGame function should remove the text from the scoreSpans elements js rolls = 0; resetGame(); for (const element of scoreSpans) { assert strictEqual(elementinnerText, \"\");\n}\nYou should call your resetGame function after displaying the alert in your keepScoreBtn listener ```js\nlet called = false;\nconst oldReset = resetGame;\nresetGame = () => {\ncalled = true;\noldReset();\n}\nconst messages = [];\nconst oldAlert = alert;\nconst oldWindow = window alert;\nalert = (msg) => {messages push(msg)};\nwindow alert = (msg) => {messages push(msg)};\nrolls = 1;\nround = 6;\nrollDiceBtn click();\ndocument querySelector('#none') click();\nkeepScoreBtn click();\nassert lengthOf(messages, 0);\nassert isFalse(called);\nnew Promise(resolve => setTimeout(resolve, 1000)) then(() => {\nassert lengthOf(messages, 1);\nassert isTrue(called);\nresetGame = oldReset;\nalert = oldAlert;\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "4d29d0d17e1a71a829a0ae6d36bd2f4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "= resetGame; resetGame = () => { called = true; oldReset(); } const messages = []; const oldAlert = alert; const oldWindow = window alert; alert = (msg) => {messages push(msg)}; window alert = (msg) => {messages push(msg)}; rolls = 1; round = 6; rollDiceBtn click(); document querySelector('#none') click(); keepScoreBtn click(); assert lengthOf(messages, 0); assert isFalse(called); new Promise(resolve => setTimeout(resolve, 1000)) then(() => { assert lengthOf(messages, 1); assert isTrue(called); resetGame = oldReset; alert = oldAlert; windowalert = oldWindow;\n});\n```\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "05ca278910961835c56257e05db833e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "ef6cbc5b6fb7b6b02eb154f15d1cadc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "d51c0ff2a7040bb8eb8094550fa6d497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "5d0223940602fe7243adfb9defc7a5d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "(count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; input checked = false; }); scoreSpansforEach((span) => {\nspan textContent = \"\";\n});\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn addEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\nif (round > 6) {\nsetTimeout(() => {\nalert(Game Over Your total score is ${score});\n}, 500);\n}\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657dfeef78fe0364bd241d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "1dfaab69b771c73f776b47347566066c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 657e230500602983e01fff6e\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nFor the last portion of the game, you will need to create an algorithm that checks for the presence of a straight A small straight is when four of the dice have consecutive values in any order (Ex in a roll of 41423, we have 1234) resulting in a score of 30 points A large straight is when all five dice have consecutive values in any order (Ex in a roll of 35124, we have 12345) resulting in a score of 40 points Declare a checkForStraights function which accepts an array of numbers If the user gets a large straight, update the fifth radio button with a score of 40 If the user gets a small straight, update the fourth radio button with a score of 30 Regardless, it should always update the last radio button to display a score of 0, with the correct attributes Call your checkForStraights function when the rollDiceBtn is clicked to complete your dice game --hints--\nYour checkForStraights variable should be a function js\nassert isFunction(checkForStraights);\nIf a small straight is rolled, your checkForStraights function should enable the fourth radio button, set the value to 30, update the displayed text to , score = 30 and leave the fifth radio button disabled js\nconst assertSmallStraight = (_diceValuesArr) => {\nresetRadioOptions();\ncheckForStraights(_diceValuesArr);\nassert isTrue(scoreInputs[4] disabled);\nassert isFalse(scoreInputs[3] disabled);\nassert strictEqual(scoreInputs[3] value, \"30\");\nassert strictEqual(scoreSpans[3]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "350fd7e8d24f376c1508f569e7b7de75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "rollDiceBtn is clicked to complete your dice game --hints-- Your checkForStraights variable should be a function js assert isFunction(checkForStraights); If a small straight is rolled, your checkForStraights function should enable the fourth radio button, set the value to 30, update the displayed text to , score = 30 and leave the fifth radio button disabled js const assertSmallStraight = (_diceValuesArr) => { resetRadioOptions(); checkForStraights(_diceValuesArr); assert isTrue(scoreInputs[4] disabled); assert isFalse(scoreInputs[3] disabled); assert strictEqual(scoreInputs[3] value, \"30\"); assert strictEqual(scoreSpans[3]innerText, \", score = 30\");\n}\n// Basic straights\nassertSmallStraight([1,1,2,3,4])\nassertSmallStraight([2,3,4,5,5])\nassertSmallStraight([3,4,5,6,6])\n// 5 unique numbers, but only small straight\nassertSmallStraight([1,2,3,4,6])\nassertSmallStraight([1,3,4,5,6])\n// Straights with duplicates in middle\nassertSmallStraight([1,2,2,3,4])\nassertSmallStraight([2,3,3,4,5])\nassertSmallStraight([3,4,5,5,6])\n// Out of order straights\nassertSmallStraight([1,3,2,1,4])\nassertSmallStraight([5,4,3,3,2])\nassertSmallStraight([3,4,5,6,1])\nIf a large straight is rolled, your checkForStraights function should enable the fourth button, set the value to 30, update the displayed text to , score = 30 Additionally, the function should enable the fifth radio button, set the value to 40, and update the displayed text to , score = 40 js\nconst assertLargeStraight = (_diceValuesArr) => {\nresetRadioOptions();\ncheckForStraights(_diceValuesArr);\nassert isFalse(scoreInputs[3] disabled);\nassert strictEqual(scoreInputs[3] value, \"30\");\nassert strictEqual(scoreSpans[3] innerText, \", score = 30\");\nassert isFalse(scoreInputs[4] disabled);\nassert strictEqual(scoreInputs[4] value, \"40\");\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "52a5d1c35701073787677629426422d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "checkForStraights function should enable the fourth button, set the value to 30, update the displayed text to , score = 30 Additionally, the function should enable the fifth radio button, set the value to 40, and update the displayed text to , score = 40 js const assertLargeStraight = (_diceValuesArr) => { resetRadioOptions(); checkForStraights(_diceValuesArr); assert isFalse(scoreInputs[3] disabled); assert strictEqual(scoreInputs[3] value, \"30\"); assert strictEqual(scoreSpans[3] innerText, \", score = 30\"); assert isFalse(scoreInputs[4] disabled); assert strictEqual(scoreInputs[4] value, \"40\"); assertstrictEqual(scoreSpans[4] innerText, \", score = 40\");\n}\n// Basic straights\nassertLargeStraight([1,2,3,4,5])\nassertLargeStraight([2,3,4,5,6])\n// Backward straights\nassertLargeStraight([5,4,3,2,1])\nassertLargeStraight([6,5,4,3,2])\n// Out of order straights\nassertLargeStraight([1,5,3,4,2])\nassertLargeStraight([2,4,6,5,3])\nIf no straight is rolled, your checkForStraights function should not enable the fourth or fifth radio button js\nconst assertNoStraight = (_diceValuesArr) => {\nresetRadioOptions();\ncheckForStraights(_diceValuesArr);\nassert isTrue(scoreInputs[3] disabled);\nassert isTrue(scoreInputs[4]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "4ea36f12ecde49e757331b180d20054c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "assert isFalse(scoreInputs[3] disabled); assert strictEqual(scoreInputs[3] value, \"30\"); assert strictEqual(scoreSpans[3] innerText, \", score = 30\"); assert isFalse(scoreInputs[4] disabled); assert strictEqual(scoreInputs[4] value, \"40\"); assertstrictEqual(scoreSpans[4] innerText, \", score = 40\"); } // Basic straights assertLargeStraight([1,2,3,4,5]) assertLargeStraight([2,3,4,5,6]) // Backward straights assertLargeStraight([5,4,3,2,1]) assertLargeStraight([6,5,4,3,2]) // Out of order straights assertLargeStraight([1,5,3,4,2]) assertLargeStraight([2,4,6,5,3]) If no straight is rolled, your checkForStraights function should not enable the fourth or fifth radio button js const assertNoStraight = (_diceValuesArr) => { resetRadioOptions(); checkForStraights(_diceValuesArr); assert isTrue(scoreInputs[3] disabled); assert isTrue(scoreInputs[4]disabled);\n}\n// Simple cases\nassertNoStraight([1,4,4,4,4]);\nassertNoStraight([2,2,3,3,3]);\nassertNoStraight([5,5,5,5,5]);\nassertNoStraight([6,5,1,5,6]);\n// Almost a straight, but broken in middle\nassertNoStraight([1,2,3,5,6]);\nassertNoStraight([1,2,4,5,6]);\n// Almost a straight with duplicates in middle\nassertNoStraight([1,2,2,3,5]);\nassertNoStraight([2,4,4,5,6]);\n// Repeat of last 4 cases, but not in order\nassertNoStraight([1,5,6,2,3]);\nassertNoStraight([5,2,4,1,6]);\nassertNoStraight([2,1,5,3,2]);\nassertNoStraight([2,4,5,4,6]);\nIf no straight is rolled, your checkForStraights function should enable the final radio button set the value to 0, and update the displayed text to , score = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "6a99da97306b7e9f172e379883183d7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "assert isTrue(scoreInputs[3] disabled); assert isTrue(scoreInputs[4]disabled); } // Simple cases assertNoStraight([1,4,4,4,4]); assertNoStraight([2,2,3,3,3]); assertNoStraight([5,5,5,5,5]); assertNoStraight([6,5,1,5,6]); // Almost a straight, but broken in middle assertNoStraight([1,2,3,5,6]); assertNoStraight([1,2,4,5,6]); // Almost a straight with duplicates in middle assertNoStraight([1,2,2,3,5]); assertNoStraight([2,4,4,5,6]); // Repeat of last 4 cases, but not in order assertNoStraight([1,5,6,2,3]); assertNoStraight([5,2,4,1,6]); assertNoStraight([2,1,5,3,2]); assertNoStraight([2,4,5,4,6]); If no straight is rolled, your checkForStraights function should enable the final radio button set the value to 0, and update the displayed text to , score = 0js\nresetRadioOptions();\ncheckForStraights([1,1,1,1,1]);\nassert isFalse(scoreInputs[5] disabled);\nassert strictEqual(scoreInputs[5] value, \"0\");\nassert strictEqual(scoreSpans[5] innerText, \", score = 0\");\nYou should call the checkForStraights function when the rollDiceBtn is clicked ```js\nresetRadioOptions();\nconst origMathRandom = Math random;\n// Temporarily modifies Math random to guarantee a straight const myMathRandom = (() => {\nlet i = 0;\nconst values = [4/6,2/6,5/6,3/6,1/6];\nreturn () => values[i++ % 5];\n})();\nMath random = myMathRandom;\ntry {\nrollDiceBtn click();\n} finally {\nMath random = origMathRandom;\n}\nassert isFalse(scoreInputs[4] disabled);\nassert strictEqual(scoreInputs[4] value, \"40\");\nassert strictEqual(scoreSpans[4]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "c7c1be1812d8527aa0ba708467def6a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "score = 0\"); You should call the checkForStraights function when the rollDiceBtn is clicked ```js resetRadioOptions(); const origMathRandom = Math random; // Temporarily modifies Math random to guarantee a straight const myMathRandom = (() => { let i = 0; const values = [4/6,2/6,5/6,3/6,1/6]; return () => values[i++ % 5]; })(); Math random = myMathRandom; try { rollDiceBtn click(); } finally { Math random = origMathRandom; } assert isFalse(scoreInputs[4] disabled); assert strictEqual(scoreInputs[4] value, \"40\"); assert strictEqual(scoreSpans[4]innerText, \", score = 40\");\n```\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 545,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "92f3d80fff87984e9536f206c57b290b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "14f4d38c6d74269fc152af6a3d5e65a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "88806609843877957822a053e6aa0365",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst detectFullHouse = (arr) => {\nconst counts = {};\nfor (const num of arr) {\ncounts[num] = counts[num]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "7f28165e38d595301922d31d371ae35b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "if (count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } updateRadioOption(5, 0); }; const detectFullHouse = (arr) => { const counts = {}; for (const num of arr) { counts[num] = counts[num]counts[num] + 1 : 1;\n}\nconst hasThreeOfAKind = Object values(counts) includes(3);\nconst hasPair = Object values(counts) includes(2);\nif (hasThreeOfAKind && hasPair) {\nupdateRadioOption(2, 25);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans forEach((span) => {\nspan textContent = \"\";\n});\n};\nconst resetGame = () => {\ndiceValuesArr = [0, 0, 0, 0, 0];\nscore = 0;\nround = 1;\nrolls = 0;\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\ntotalScoreElement textContent = score;\nscoreHistory innerHTML = \"\";\nrollsElement textContent = rolls;\nroundElement textContent = round;\nresetRadioOptions();\n};\n--fcc-editable-region--\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\ndetectFullHouse(diceValuesArr);\n}\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "c21c01dc2255eb46b6d9c648154e424d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "= round; resetRadioOptions(); }; --fcc-editable-region-- rollDiceBtn addEventListener(\"click\", () => { if (rolls === 3) { alert(\"You have made three rolls this round Please select a score \"); } else { rolls++; resetRadioOptions(); rollDice(); updateStats(); getHighestDuplicates(diceValuesArr); detectFullHouse(diceValuesArr); } }); --fcc-editable-region-- rulesBtn addEventListener(\"click\", () => { isModalShowing = isModalShowing; if (isModalShowing) { rulesBtn textContent = \"Hide rules\"; rulesContainer style display = \"block\"; } else { rulesBtn textContent = \"Show rules\"; rulesContainer style display = \"none\"; } }); keepScoreBtnaddEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\nif (round > 6) {\nsetTimeout(() => {\nalert(Game Over Your total score is ${score});\nresetGame();\n}, 500);\n}\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\657e230500602983e01fff6e.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "e5d29ba8fb276043f1d63ff4f574d69e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d0ab797cb716189ffcc0a\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nThe first step is to build out the function that will generate a random choice for the computer The getRandomComputerResult function will be used to get the computer's choice Inside that function, you should see an options array with \"Rock\", \"Paper\", and \"Scissors\" Your task is to complete the getRandomComputerResult function so that it returns a random option from the options array Tips\nYou can use Math random() and Math floor() to help you get a random whole number This will represent the index number for the options array You can use the random index to access the option from the options array --hints--\nYour getRandomComputerResult function should return a string js\nassert isString(getRandomComputerResult());\nYour getRandomComputerResult function should return one of the options in the options array js\nassert include([\"Rock\", \"Paper\", \"Scissors\"], getRandomComputerResult());\nYour getRandomComputerResult function should return a random option each time ```js\nconst results = new Set();\nfor (let i = 0; i < 50; i++) {\nresults add(getRandomComputerResult());\n}\nassert hasAllKeys(results, [\"Rock\", \"Paper\", \"Scissors\"]);\n```\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0809776beaf7b56edf37c086efdfb026",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "game You will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game: Rock beats Scissors Scissors beats Paper Paper beats Rock If the player and computer choose the same option (Ex Paper and Paper), then no one gets the point Player Score: 0 Computer Score: 0 Choose an option: Rock Paper Scissors Play again```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1 3rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\n--fcc-editable-region--\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\n}\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "209d3f5b853648d740f834190631bad7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "ul { list-style-type: none; } rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 1 3rem; margin: 15px 0; } winner-msg { margin-top: 25px; } reset-game-btn { display: none; margin: 20px auto; } ``` ```js --fcc-editable-region-- function getRandomComputerResult() { const options = [\"Rock\", \"Paper\", \"Scissors\"]; } consolelog(getRandomComputerResult());\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d0ab797cb716189ffcc0a.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "006fb1124c957005c721999f7589c23a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d18c574456976d11b6e87\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nIn the game, there will be multiple rounds The first to reach three points wins the game In this step, you will focus on determining if the player has won the round Complete the hasPlayerWonTheRound function This function has two parameters: player and computer The function should return true if the player has won the round, and false if the player has lost or tied the round Here are the criteria for the player to win a round:\nIf the player chooses \"Rock\" and the computer chooses \"Scissors\"\nIf the player chooses \"Scissors\" and the computer chooses \"Paper\"\nIf the player chooses \"Paper\" and the computer chooses \"Rock\"\nA few function calls have been provided for you to test your function --hints--\nYour hasPlayerWonTheRound function should return a boolean js\nassert isBoolean(hasPlayerWonTheRound(\"Rock\", \"Scissors\"));\nYour hasPlayerWonTheRound function should return true if the player chose \"Rock\" and the computer chose \"Scissors\" js\nassert isTrue(hasPlayerWonTheRound(\"Rock\", \"Scissors\"));\nYour hasPlayerWonTheRound function should return true if the player chose \"Scissors\" and the computer chose \"Paper\" js\nassert isTrue(hasPlayerWonTheRound(\"Scissors\", \"Paper\"));\nYour hasPlayerWonTheRound function should return true if the player chose \"Paper\" and the computer chose \"Rock\" js\nassert isTrue(hasPlayerWonTheRound(\"Paper\", \"Rock\"));\nYour hasPlayerWonTheRound function should return false if the player and computer chose the same option js\nassert isFalse(hasPlayerWonTheRound(\"Rock\", \"Rock\"));\nassert isFalse(hasPlayerWonTheRound(\"Scissors\", \"Scissors\"));\nassert isFalse(hasPlayerWonTheRound(\"Paper\", \"Paper\"));\nYour hasPlayerWonTheRound function should return false if the computer won the round js\nassert isFalse(hasPlayerWonTheRound(\"Scissors\", \"Rock\"));\nassert isFalse(hasPlayerWonTheRound(\"Paper\", \"Scissors\"));\nassert isFalse(hasPlayerWonTheRound(\"Rock\", \"Paper\"));\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "08c21a3e17cec000f9303946545dd7d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "should return true if the player chose \"Paper\" and the computer chose \"Rock\" js assert isTrue(hasPlayerWonTheRound(\"Paper\", \"Rock\")); Your hasPlayerWonTheRound function should return false if the player and computer chose the same option js assert isFalse(hasPlayerWonTheRound(\"Rock\", \"Rock\")); assert isFalse(hasPlayerWonTheRound(\"Scissors\", \"Scissors\")); assert isFalse(hasPlayerWonTheRound(\"Paper\", \"Paper\")); Your hasPlayerWonTheRound function should return false if the computer won the round js assert isFalse(hasPlayerWonTheRound(\"Scissors\", \"Rock\")); assert isFalse(hasPlayerWonTheRound(\"Paper\", \"Scissors\")); assert isFalse(hasPlayerWonTheRound(\"Rock\", \"Paper\")); --seed-- --seed-contents-- ```html Rock, Paper, Scissors game Let's play Rock, Paper, ScissorsRules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again ```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c97ac5e61378719c1202cb3ff6a4eb76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "Score: 0 Choose an option: Rock Paper Scissors Play again ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --very-dark-blue: #0a0a23; --white: #ffffff; --yellow: #f1be32; --golden-yellow: #feac32; } body { background-color: var(--very-dark-blue); text-align: center; color: var(--white); } h1 { margin: 15px 0 20px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--very-dark-blue); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1 3rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options length);\nreturn options[randomIndex];\n}\n--fcc-editable-region--\nfunction hasPlayerWonTheRound(player, computer) {\n}\nconsole log(hasPlayerWonTheRound(\"Rock\", \"Scissors\"));\nconsole log(hasPlayerWonTheRound(\"Scissors\", \"Rock\"));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d18c574456976d11b6e87.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8acfd7dc6a66454c42da2bee4374bc84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d2f8056542a8066fd6cc6\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nNow it is time to get the results of the round Complete the getRoundResults function If the player wins the round, update the playerScore by 1 and return the message \"Player wins [player's choice] beats [computer's choice]\" If the computer and player choose the same option, return the message \"It's a tie Both chose [player's choice]\" If the computer wins the round, update the computerScore by 1 and return the message \"Computer wins [computer's choice] beats [player's choice]\" [computer's choice] should be replaced with computerResult while [player's choice] should be replaced with the userOption Tips\nRemember you can use the hasPlayerWonTheRound function to check if the player wins the round You can use template literals or regular string concatenation to build the message --hints--\nYour getRoundResults should return a string js\nassert isString(getRoundResults(\"Rock\"));\nYour getRoundResults function should return the correct message based on who wins the round If no one wins, the message should say it's a tie js\nconst result = getRoundResults(\"Paper\")\nif(result startsWith(\"Player wins \")){\nassert strictEqual(result, \"Player wins Paper beats Rock\")\nassert isAtLeast(playerScore, 1)\n} else if(result startsWith(\"Computer wins \")) {\nassert strictEqual(result, \"Computer wins Scissors beats Paper\")\nassert isAtLeast(computerScore, 1)\n} else if(result startsWith(\"It's a tie \")){\nassert strictEqual(result, \"It's a tie Both chose Paper\")\n}\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c1e3487846e095cf965cb96ee6cf6fba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "game You will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game: Rock beats Scissors Scissors beats Paper Paper beats Rock If the player and computer choose the same option (Ex Paper and Paper), then no one gets the point Player Score: 0 Computer Score: 0 Choose an option: Rock Paper Scissors Play again```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1 3rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9a7b0747055cc4dc40f171962101bba3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 1 3rem; margin: 15px 0; } winner-msg { margin-top: 25px; } reset-game-btn { display: none; margin: 20px auto; } ``` ```js function getRandomComputerResult() { const options = [\"Rock\", \"Paper\", \"Scissors\"]; const randomIndex = Math floor(Math random() * optionslength);\nreturn options[randomIndex];\n}\nlet playerScore = 0;\nlet computerScore = 0;\nfunction hasPlayerWonTheRound(player, computer) {\nreturn (\n(player === \"Rock\" && computer === \"Scissors\") ||\n(player === \"Scissors\" && computer === \"Paper\") ||\n(player === \"Paper\" && computer === \"Rock\")\n);\n}\n--fcc-editable-region--\nfunction getRoundResults(userOption) {\nconst computerResult = getRandomComputerResult();\n}\nconsole log(getRoundResults(\"Rock\"));\nconsole log(\"Player Score: \", playerScore, \"Computer Score: \", computerScore);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d2f8056542a8066fd6cc6.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7e4cf70fdbdfdabd073aa6e6fa3400c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d4008cee64e05dfb08f0d\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nNow it is time to update the scores and the round results message Complete the showResults function The playerScoreSpanElement and computerScoreSpanElement should be updated to show the updated scores of the player and computer The roundResultsMsg should also be updated with the result of the round Tips\nRemember that you learned how to work with the innerText property to update the text content of an element You can use the getRoundResults function to get the result of the round --hints--\nYour showResults function should update the roundResultsMsg with the result of the round js\nconst possibleResults = [\n\"Player wins Rock beats Scissors\",\n\"Player wins Scissors beats Paper\",\n\"Player wins Paper beats Rock\",\n\"Computer wins Paper beats Rock\",\n\"Computer wins Scissors beats Paper\",\n\"Computer wins Rock beats Scissors\",\n\"It's a tie Both chose Rock\",\n\"It's a tie Both chose Scissors\",\n\"It's a tie Both chose Paper\"\n];\nshowResults(\"Rock\");\nassert include(possibleResults, roundResultsMsg innerText replace(/\\//g, \"'\"));\nYour showResults function should update the computerScoreSpanElement to show the updated score of the computer ```js\ncomputerScore = 0;\nconst oldRandomResult = getRandomComputerResult;\ngetRandomComputerResult = () => \"Rock\";\nshowResults(\"Scissors\");\nassert equal(computerScoreSpanElement innerText, \"1\");\ngetRandomComputerResult = oldRandomResult;\n```\nYour showResults function should update the playerScoreSpanElement to show the updated score of the player ```js\nplayerScore = 0;\nconst oldRandomResult = getRandomComputerResult;\ngetRandomComputerResult = () => \"Scissors\";\nshowResults(\"Rock\");\nassert equal(playerScoreSpanElement innerText, \"1\");\ngetRandomComputerResult = oldRandomResult;\n```\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3ea4464ebae1b6e4cd83c554147424ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "assert equal(playerScoreSpanElement innerText, \"1\"); getRandomComputerResult = oldRandomResult; ``` --seed-- --seed-contents-- ```html Rock, Paper, Scissors game Let's play Rock, Paper, Scissors Rules to the game You will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game: Rock beats Scissors Scissors beats Paper Paper beats Rock If the player and computer choose the same option (ExPaper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again ```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bec647978f6a1228b690594c8348e98c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } rules-container { padding: 10px 0; margin: auto; border-radius: 15px; border: 5px solid var(--yellow); background-color: var(--white); color: var(--very-dark-blue); } rules-container ul { list-style-type: none; } rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 13rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options length);\nreturn options[randomIndex];\n}\nfunction hasPlayerWonTheRound(player, computer) {\nreturn (\n(player === \"Rock\" && computer === \"Scissors\") ||\n(player === \"Scissors\" && computer === \"Paper\") ||\n(player === \"Paper\" && computer === \"Rock\")\n);\n}\nlet playerScore = 0;\nlet computerScore = 0;\nfunction getRoundResults(userOption) {\nconst computerResult = getRandomComputerResult();\nif (hasPlayerWonTheRound(userOption, computerResult)) {\nplayerScore++;\nreturn Player wins ${userOption} beats ${computerResult};\n} else if (computerResult === userOption) {\nreturn It's a tie Both chose ${userOption};\n} else {\ncomputerScore++;\nreturn Computer wins ${computerResult} beats ${userOption};\n}\n}\n--fcc-editable-region--\nconst playerScoreSpanElement = document getElementById(\"player-score\");\nconst computerScoreSpanElement = document getElementById(\"computer-score\");\nconst roundResultsMsg = document getElementById(\"results-msg\");\nfunction showResults(userOption) {\n};\nshowResults(\"Rock\");\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d4008cee64e05dfb08f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4f3c04edb376019cc1cf73199a500671",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "id: 679c1803ee88d2245cf9e335\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nLastly, you should tidy up your code with a bit of refactoring You might notice that your code enabled the last radio button (\"None of the Above\") multiple times within your getHighestDuplicates, detectFullHouse and checkForStraights functions Refactor your code so that instead of enabling the last radio button at the end of each function, it should only be done once inside of rollDiceBtn --hints--\nYour getHighestDuplicates function should not enable the final radio button, or set the final span text, regardless of if duplicates are rolled js\nconst assertFinalButtonNotSetDuplicates = (_diceValuesArr) => {\nresetRadioOptions();\ngetHighestDuplicates(_diceValuesArr);\nassert isTrue(scoreInputs[5] disabled);\nassert strictEqual(scoreSpans[5] innerText, \"\");\n}\nassertFinalButtonNotSetDuplicates([1,2,3,4,5]);\nassertFinalButtonNotSetDuplicates([1,1,1,2,3]);\nassertFinalButtonNotSetDuplicates([1,1,1,1,3]);\nassertFinalButtonNotSetDuplicates([1,1,1,1,1]);\nYour detectFullHouse function should not enable the final radio button, or set the final span text, regardless of if a full house is rolled js\nconst assertFinalButtonNotSetFullHouse = (_diceValuesArr) => {\nresetRadioOptions();\ndetectFullHouse(_diceValuesArr);\nassert isTrue(scoreInputs[5] disabled);\nassert strictEqual(scoreSpans[5] innerText, \"\");\n}\nassertFinalButtonNotSetFullHouse([1,2,3,4,5]);\nassertFinalButtonNotSetFullHouse([1,1,1,2,2]);\nYour checkForStraights function should not enable the final radio button, or set the final span text, regardless of if a straight is rolled js\nconst assertFinalButtonNotSetStraight = (_diceValuesArr) => {\nresetRadioOptions();\ncheckForStraights(_diceValuesArr);\nassert isTrue(scoreInputs[5] disabled);\nassert strictEqual(scoreSpans[5]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "e7afabfc8975255572c91a3b43bfdfcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "not enable the final radio button, or set the final span text, regardless of if a full house is rolled js const assertFinalButtonNotSetFullHouse = (_diceValuesArr) => { resetRadioOptions(); detectFullHouse(_diceValuesArr); assert isTrue(scoreInputs[5] disabled); assert strictEqual(scoreSpans[5] innerText, \"\"); } assertFinalButtonNotSetFullHouse([1,2,3,4,5]); assertFinalButtonNotSetFullHouse([1,1,1,2,2]); Your checkForStraights function should not enable the final radio button, or set the final span text, regardless of if a straight is rolled js const assertFinalButtonNotSetStraight = (_diceValuesArr) => { resetRadioOptions(); checkForStraights(_diceValuesArr); assert isTrue(scoreInputs[5] disabled); assert strictEqual(scoreSpans[5]innerText, \"\");\n}\nassertFinalButtonNotSetStraight([1,1,1,1,1]);\nassertFinalButtonNotSetStraight([1,2,3,4,6]);\nassertFinalButtonNotSetStraight([1,2,3,4,5]);\nYou should enable the final radio button, set the value to 0, and update the displayed text to , score = 0 when your rollDiceBtn is clicked js\nresetRadioOptions();\nrollDiceBtn click();\nassert isFalse(scoreInputs[5] disabled);\nassert strictEqual(scoreInputs[5] value, \"0\");\nassert strictEqual(scoreSpans[5]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "b8cf814ca6be3b2664bcd41b5b70d035",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "the final radio button, or set the final span text, regardless of if a straight is rolled js const assertFinalButtonNotSetStraight = (_diceValuesArr) => { resetRadioOptions(); checkForStraights(_diceValuesArr); assert isTrue(scoreInputs[5] disabled); assert strictEqual(scoreSpans[5]innerText, \"\"); } assertFinalButtonNotSetStraight([1,1,1,1,1]); assertFinalButtonNotSetStraight([1,2,3,4,6]); assertFinalButtonNotSetStraight([1,2,3,4,5]); You should enable the final radio button, set the value to 0, and update the displayed text to , score = 0 when your rollDiceBtn is clicked js resetRadioOptions(); rollDiceBtn click(); assert isFalse(scoreInputs[5] disabled); assert strictEqual(scoreInputs[5] value, \"0\"); assert strictEqual(scoreSpans[5]innerText, \", score = 0\");\n--seed--\n--seed-contents--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "96daa9f388fd37db4c7ff7e66236f967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "05e854116ed3b2e8a95eae8a8b2cb267",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "80bd192f4ea965b54892fcad50325df1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\n--fcc-editable-region--\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "1ea59ff4fbf9924777da3ffc88567b80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "${selectedValue}</li>; }; --fcc-editable-region-- const getHighestDuplicates = (arr) => { const counts = {}; for (const num of arr) { if (counts[num]) { counts[num]++; } else { counts[num] = 1; } } let highestCount = 0; for (const num of arr) { const count = counts[num]; if (count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arrreduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\nupdateRadioOption(5, 0);\n};\nconst detectFullHouse = (arr) => {\nconst counts = {};\nfor (const num of arr) {\ncounts[num] = counts[num] counts[num] + 1 : 1;\n}\nconst hasThreeOfAKind = Object values(counts) includes(3);\nconst hasPair = Object values(counts) includes(2);\nif (hasThreeOfAKind && hasPair) {\nupdateRadioOption(2, 25);\n}\nupdateRadioOption(5, 0);\n};\nconst checkForStraights = (arr) => {\nconst sortedNumbersArr = arr sort((a, b) => a - b);\nconst uniqueNumbersArr = [ new Set(sortedNumbersArr)];\nconst uniqueNumbersStr = uniqueNumbersArr join(\"\");\nconst smallStraightsArr = [\"1234\", \"2345\", \"3456\"];\nconst largeStraightsArr = [\"12345\", \"23456\"];\nif (smallStraightsArr some(straight => uniqueNumbersStr includes(straight))) {\nupdateRadioOption(3, 30);\n}\nif (largeStraightsArr includes(uniqueNumbersStr)) {\nupdateRadioOption(4, 40);\n}\nupdateRadioOption(5, 0);\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans forEach((span) => {\nspan",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "c825a94c95051bdefddb861ce58cd922",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "const sortedNumbersArr = arr sort((a, b) => a - b); const uniqueNumbersArr = [ new Set(sortedNumbersArr)]; const uniqueNumbersStr = uniqueNumbersArr join(\"\"); const smallStraightsArr = [\"1234\", \"2345\", \"3456\"]; const largeStraightsArr = [\"12345\", \"23456\"]; if (smallStraightsArr some(straight => uniqueNumbersStr includes(straight))) { updateRadioOption(3, 30); } if (largeStraightsArr includes(uniqueNumbersStr)) { updateRadioOption(4, 40); } updateRadioOption(5, 0); }; const resetRadioOptions = () => { scoreInputs forEach((input) => { input disabled = true; input checked = false; }); scoreSpans forEach((span) => { spantextContent = \"\";\n});\n};\nconst resetGame = () => {\ndiceValuesArr = [0, 0, 0, 0, 0];\nscore = 0;\nround = 1;\nrolls = 0;\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\ntotalScoreElement textContent = score;\nscoreHistory innerHTML = \"\";\nrollsElement textContent = rolls;\nroundElement textContent = round;\nresetRadioOptions();\n};\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score \");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\ndetectFullHouse(diceValuesArr);\ncheckForStraights(diceValuesArr);\n}\n});\n--fcc-editable-region--\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn addEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\nif (round > 6) {\nsetTimeout(() => {\nalert(Game Over",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "10bbeede58da4dd03cf71c81031e6e83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "rulesBtn textContent = \"Hide rules\"; rulesContainer style display = \"block\"; } else { rulesBtn textContent = \"Show rules\"; rulesContainer style display = \"none\"; } }); keepScoreBtn addEventListener(\"click\", () => { let selectedValue; let achieved; for (const radioButton of scoreInputs) { if (radioButton checked) { selectedValue = radioButton value; achieved = radioButton id; break; } } if (selectedValue) { rolls = 0; round++; updateStats(); resetRadioOptions(); updateScore(selectedValue, achieved); if (round > 6) { setTimeout(() => { alert(Game OverYour total score is ${score});\nresetGame();\n}, 500);\n}\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n```\n--solutions--\n```html\nAdvanced Dice Game\nAdvanced Dice Game\nShow rules\nRules\nThere are total of six rounds\nYou can only roll the dice three times per round\nTo start the game, roll the dice\nThen, choose from one of the selected scores or roll the dice again\nIf you choose a selected score, then you will move to the next round\nIf you decline to choose a selected score, then you can roll the\ndice again two more times\nPoints\nThree of a kind: Sum of all five dice\nFour of a kind: Sum of all five dice\nFull house: Three of a kind and a pair - 25 points\nSmall straight: Four of the dice have consecutive values - 30 points\nLarge straight: All five dice have consecutive values - 40 points\nRolls: 0 |\nRound: 1\nThree of a kind\nFour of a kind\nFull house\nSmall straight\nLarge straight\nNone of the above\nKeep the above selected score\nRoll the dice\nScore history (Total score: 0)\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #1b1b32;\n--light-grey: #f5f6f7;\n--black: #000;\n--white: #fff;\n--grey: #3b3b4f;\n--golden-yellow: #fecc4c;\n--yellow: #ffcc4c;\n--gold: #feac32;\n--orange: #ffac33;\n--dark-orange: #f89808;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nheader {\ncolor: var(--light-grey);\ntext-align: center;\n}\nh1 {\nfont-size: 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "657cd826da16bfadcfa7c02883554c8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "kind Full house Small straight Large straight None of the above Keep the above selected score Roll the dice Score history (Total score: 0) ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #1b1b32; --light-grey: #f5f6f7; --black: #000; --white: #fff; --grey: #3b3b4f; --golden-yellow: #fecc4c; --yellow: #ffcc4c; --gold: #feac32; --orange: #ffac33; --dark-orange: #f89808; } body { background-color: var(--dark-grey); } header { color: var(--light-grey); text-align: center; } h1 { font-size: 25rem;\nmargin: 25px 0;\n} rules-container {\ndisplay: none;\nbackground-color: var(--light-grey);\ncolor: var(--black);\nwidth: 50%;\nmargin: 20px auto;\nheight: 300px;\nborder-radius: 10px;\noverflow-y: scroll;\n} rules-container ul {\nlist-style-type: none;\n} points {\nmargin-top: 15px;\n}\nmain {\nbackground-color: var(--light-grey);\npadding: 20px;\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\ngap: 1rem;\nmargin: auto;\njustify-items: center;\nwidth: 50%;\nborder-radius: 10px;\n}\ndice {\ndisplay: flex;\njustify-content: space-around;\nmargin-bottom: 15px;\n} die {\nwidth: 40px;\nheight: 40px;\ntext-align: center;\nmargin-right: 15px;\nborder: 4px solid var(--black);\npadding: 10px;\n} rounds-text {\ntext-align: center;\n}\ninput[type=\"radio\"]:disabled + label {\ncolor: var(--grey);\n}\nscore-history {\nmargin-top: 15px;\ntext-align: center;\nlist-style-position: inside;\n} btn {\ncursor: pointer;\nwidth: 200px;\nmargin: 10px 0 10px 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "df9c8cd51e99849441a4db180cd5d062",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 1rem; margin: auto; justify-items: center; width: 50%; border-radius: 10px; } dice { display: flex; justify-content: space-around; margin-bottom: 15px; } die { width: 40px; height: 40px; text-align: center; margin-right: 15px; border: 4px solid var(--black); padding: 10px; } rounds-text { text-align: center; } input[type=\"radio\"]:disabled + label { color: var(--grey); } score-history { margin-top: 15px; text-align: center; list-style-position: inside; } btn { cursor: pointer; width: 200px; margin: 10px 0 10px 05rem;\ncolor: var(--black);\nbackground-color: var(--gold);\nbackground-image: linear-gradient(var(--golden-yellow), var(--orange));\nborder-color: var(--gold);\nborder-width: 3px;\n} btn:hover:enabled {\nbackground-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n@media (max-width: 992px) {\nmain {\nwidth: 100%;\n}\n}\n@media (max-width: 500px) { btn {\nwidth: 120px;\n}\n}\n```\n```js\nconst listOfAllDice = document querySelectorAll(\" die\");\nconst scoreInputs = document querySelectorAll(\"#score-options input\");\nconst scoreSpans = document querySelectorAll(\"#score-options span\");\nconst roundElement = document getElementById(\"current-round\");\nconst rollsElement = document getElementById(\"current-round-rolls\");\nconst totalScoreElement = document getElementById(\"total-score\");\nconst scoreHistory = document getElementById(\"score-history\");\nconst rollDiceBtn = document getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document getElementById(\"keep-score-btn\");\nconst rulesContainer = document querySelector(\" rules-container\");\nconst rulesBtn = document getElementById(\"rules-btn\");\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\nconst rollDice = () => {\ndiceValuesArr = [];\nfor (let i = 0; i < 5; i++) {\nconst randomDice = Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "ddb945cb57e6021eb24609e62fc2a194",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "getElementById(\"current-round-rolls\"); const totalScoreElement = document getElementById(\"total-score\"); const scoreHistory = document getElementById(\"score-history\"); const rollDiceBtn = document getElementById(\"roll-dice-btn\"); const keepScoreBtn = document getElementById(\"keep-score-btn\"); const rulesContainer = document querySelector(\" rules-container\"); const rulesBtn = document getElementById(\"rules-btn\"); let diceValuesArr = []; let isModalShowing = false; let score = 0; let round = 1; let rolls = 0; const rollDice = () => { diceValuesArr = []; for (let i = 0; i < 5; i++) { const randomDice = Math floor(Mathrandom() * 6) + 1;\ndiceValuesArr push(randomDice);\n};\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\n};\nconst updateStats = () => {\nrollsElement textContent = rolls;\nroundElement textContent = round;\n};\nconst updateRadioOption = (index, score) => {\nscoreInputs[index] disabled = false;\nscoreInputs[index] value = score;\nscoreSpans[index] textContent = , score = ${score};\n};\nconst updateScore = (selectedValue, achieved) => {\nscore += parseInt(selectedValue);\ntotalScoreElement textContent = score;\nscoreHistory innerHTML += <li>${achieved} : ${selectedValue}</li>;\n};\nconst getHighestDuplicates = (arr) => {\nconst counts = {};\nfor (const num of arr) {\nif (counts[num]) {\ncounts[num]++;\n} else {\ncounts[num] = 1;\n}\n}\nlet highestCount = 0;\nfor (const num of arr) {\nconst count = counts[num];\nif (count >= 3 && count > highestCount) {\nhighestCount = count;\n}\nif (count >= 4 && count > highestCount) {\nhighestCount = count;\n}\n}\nconst sumOfAllDice = arr reduce((a, b) => a + b, 0);\nif (highestCount >= 4) {\nupdateRadioOption(1, sumOfAllDice);\n}\nif (highestCount >= 3) {\nupdateRadioOption(0, sumOfAllDice);\n}\n};\nconst detectFullHouse = (arr) => {\nconst counts = {};\nfor (const num of arr) {\ncounts[num] = counts[num]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "95fa312c4150caa8868ef828f89d2f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "= counts[num]; if (count >= 3 && count > highestCount) { highestCount = count; } if (count >= 4 && count > highestCount) { highestCount = count; } } const sumOfAllDice = arr reduce((a, b) => a + b, 0); if (highestCount >= 4) { updateRadioOption(1, sumOfAllDice); } if (highestCount >= 3) { updateRadioOption(0, sumOfAllDice); } }; const detectFullHouse = (arr) => { const counts = {}; for (const num of arr) { counts[num] = counts[num]counts[num] + 1 : 1;\n}\nconst hasThreeOfAKind = Object values(counts) includes(3);\nconst hasPair = Object values(counts) includes(2);\nif (hasThreeOfAKind && hasPair) {\nupdateRadioOption(2, 25);\n}\n};\nconst checkForStraights = (arr) => {\nconst sortedNumbersArr = arr sort((a, b) => a - b);\nconst uniqueNumbersArr = [ new Set(sortedNumbersArr)];\nconst uniqueNumbersStr = uniqueNumbersArr join(\"\");\nconst smallStraightsArr = [\"1234\", \"2345\", \"3456\"];\nconst largeStraightsArr = [\"12345\", \"23456\"];\nif (smallStraightsArr some(straight => uniqueNumbersStr includes(straight))) {\nupdateRadioOption(3, 30);\n}\nif (largeStraightsArr includes(uniqueNumbersStr)) {\nupdateRadioOption(4, 40);\n}\n};\nconst resetRadioOptions = () => {\nscoreInputs forEach((input) => {\ninput disabled = true;\ninput checked = false;\n});\nscoreSpans forEach((span) => {\nspan textContent = \"\";\n});\n};\nconst resetGame = () => {\ndiceValuesArr = [0, 0, 0, 0, 0];\nscore = 0;\nround = 1;\nrolls = 0;\nlistOfAllDice forEach((dice, index) => {\ndice textContent = diceValuesArr[index];\n});\ntotalScoreElement textContent = score;\nscoreHistory innerHTML = \"\";\nrollsElement textContent = rolls;\nroundElement textContent = round;\nresetRadioOptions();\n};\nrollDiceBtn addEventListener(\"click\", () => {\nif (rolls === 3) {\nalert(\"You have made three rolls this round Please select a score",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "ac59929cbd890e7c8b6faa76ac3ec508",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
    "source_type": "git_repo",
    "title": "Advanced Dice Game",
    "content": "textContent = \"\"; }); }; const resetGame = () => { diceValuesArr = [0, 0, 0, 0, 0]; score = 0; round = 1; rolls = 0; listOfAllDice forEach((dice, index) => { dice textContent = diceValuesArr[index]; }); totalScoreElement textContent = score; scoreHistory innerHTML = \"\"; rollsElement textContent = rolls; roundElement textContent = round; resetRadioOptions(); }; rollDiceBtn addEventListener(\"click\", () => { if (rolls === 3) { alert(\"You have made three rolls this round Please select a score\");\n} else {\nrolls++;\nresetRadioOptions();\nrollDice();\nupdateStats();\ngetHighestDuplicates(diceValuesArr);\ndetectFullHouse(diceValuesArr);\ncheckForStraights(diceValuesArr);\nupdateRadioOption(5, 0);\n}\n});\nrulesBtn addEventListener(\"click\", () => {\nisModalShowing = isModalShowing;\nif (isModalShowing) {\nrulesBtn textContent = \"Hide rules\";\nrulesContainer style display = \"block\";\n} else {\nrulesBtn textContent = \"Show rules\";\nrulesContainer style display = \"none\";\n}\n});\nkeepScoreBtn addEventListener(\"click\", () => {\nlet selectedValue;\nlet achieved;\nfor (const radioButton of scoreInputs) {\nif (radioButton checked) {\nselectedValue = radioButton value;\nachieved = radioButton id;\nbreak;\n}\n}\nif (selectedValue) {\nrolls = 0;\nround++;\nupdateStats();\nresetRadioOptions();\nupdateScore(selectedValue, achieved);\nif (round > 6) {\nsetTimeout(() => {\nalert(Game Over Your total score is ${score});\nresetGame();\n}, 500);\n}\n} else {\nalert(\"Please select an option or roll the dice\");\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-algorithmic-thinking-by-building-a-dice-game\\679c1803ee88d2245cf9e335.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "c562fdbd84a4d1321086fdffaa191c29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\662693f82c91a66be46c881b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662693f82c91a66be46c881b\ntitle: Step 1\nchallengeType: 1\ndashedName: step-1\n--description--\nA teacher has finished grading their students' tests and needs your help to calculate the average score for the class Complete the getAverage function which takes in an array of test scores and returns the average score The average is calculated by adding up all the scores and dividing by the total number of scores md\naverage = sum of all scores / total number of scores\nA couple of function calls have been provided for you so you can test out your code Tips\nYou can use a loop to iterate over the scores array and add up all the scores You can use the length property to get the total number of scores --hints--\nYour getAverage function should return a number js\nassert strictEqual(typeof getAverage([92, 88, 12, 77, 57, 100, 67, 38, 97, 89]), 'number');\ngetAverage([92, 88, 12, 77, 57, 100, 67, 38, 97, 89]) should return 71 7 js\nassert strictEqual(getAverage([92, 88, 12, 77, 57, 100, 67, 38, 97, 89]), 71 7);\ngetAverage([45, 87, 98, 100, 86, 94, 67, 88, 94, 95]) should return 85 4 js\nassert strictEqual(getAverage([45, 87, 98, 100, 86, 94, 67, 88, 94, 95]), 85 4);\ngetAverage([38, 99, 87, 100, 100, 100, 100, 100, 100, 100]) should return 92 4 js\nassert strictEqual(getAverage([38, 99, 87, 100, 100, 100, 100, 100, 100, 100]), 92 4);\nYour getAverage function should return the average score of the test scores js\nassert strictEqual(getAverage([52, 56, 60, 65, 70, 75, 80, 85, 90, 95]), 72",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\662693f82c91a66be46c881b.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d8ae82d82d9ae11760e815bf27585e13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\662693f82c91a66be46c881b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "94, 67, 88, 94, 95]) should return 85 4 js assert strictEqual(getAverage([45, 87, 98, 100, 86, 94, 67, 88, 94, 95]), 85 4); getAverage([38, 99, 87, 100, 100, 100, 100, 100, 100, 100]) should return 92 4 js assert strictEqual(getAverage([38, 99, 87, 100, 100, 100, 100, 100, 100, 100]), 92 4); Your getAverage function should return the average score of the test scores js assert strictEqual(getAverage([52, 56, 60, 65, 70, 75, 80, 85, 90, 95]), 728);\nassert strictEqual(getAverage([45, 50, 55, 60, 65, 70, 75, 80, 85, 90]), 67 5);\nassert strictEqual(getAverage([38, 42, 46, 50, 54, 58, 62, 66, 70, 74]), 56);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nfunction getAverage(scores) {\n}\nconsole log(getAverage([92, 88, 12, 77, 57, 100, 67, 38, 97, 89]));\nconsole log(getAverage([45, 87, 98, 100, 86, 94, 67, 88, 94, 95]));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\662693f82c91a66be46c881b.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3355ea0c0988d8ba1edbaabb9b3bcd71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626a060c4006f793e10cb33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6626a060c4006f793e10cb33\ntitle: Step 2\nchallengeType: 1\ndashedName: step-2\n--description--\nNow the teacher needs your help converting the student score to a letter grade Complete the getGrade function that takes a number score as a parameter Your function should return a string representing a letter grade based on the score Here are the scores and their corresponding letter grades:\n| Score Range | Grade   |\n| ----------- | ------- |\n| 100       | \"A++\" |\n| 90 - 99   | \"A\"   |\n| 80 - 89   | \"B\"   |\n| 70 - 79   | \"C\"   |\n| 60 - 69   | \"D\"   |\n| 0 - 59    | \"F\"   |\nTips\nRemember that you learned about conditional statements (if, else if, and else) Remember that you learned about comparison operators (>, <, >=, <=, ===) Remember that you learned about the logical AND operator (&&) --hints--\nYour getGrade function should return \"A++\" if the score is 100 js\nassert strictEqual(getGrade(100), \"A++\");\nYour getGrade function should return \"A\" if the score is 94 js\nassert strictEqual(getGrade(94), \"A\");\nYour getGrade function should return \"B\" if the score is between 80 and 89 js\nassert strictEqual(getGrade(80), \"B\");\nassert strictEqual(getGrade(83), \"B\");\nassert strictEqual(getGrade(88), \"B\");\nYour getGrade function should return \"C\" if the score is 78 js\nassert strictEqual(getGrade(75), \"C\");\nYour getGrade function should return \"D\" if the score is between 60 and 69 js\nassert strictEqual(getGrade(60), \"D\");\nassert strictEqual(getGrade(63), \"D\");\nassert strictEqual(getGrade(68), \"D\");\nYour getGrade function should return \"F\" if the score is 57 js\nassert strictEqual(getGrade(57), \"F\");\nYour getGrade function should return \"F\" if the score is between 0 and 59 js\nassert strictEqual(getGrade(0), \"F\");\nassert strictEqual(getGrade(30), \"F\");\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626a060c4006f793e10cb33.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "28d00a55bf206d89ed18d775f2dc8918",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626a060c4006f793e10cb33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Your getGrade function should return \"C\" if the score is 78 js assert strictEqual(getGrade(75), \"C\"); Your getGrade function should return \"D\" if the score is between 60 and 69 js assert strictEqual(getGrade(60), \"D\"); assert strictEqual(getGrade(63), \"D\"); assert strictEqual(getGrade(68), \"D\"); Your getGrade function should return \"F\" if the score is 57 js assert strictEqual(getGrade(57), \"F\"); Your getGrade function should return \"F\" if the score is between 0 and 59 js assert strictEqual(getGrade(0), \"F\"); assert strictEqual(getGrade(30), \"F\"); assertstrictEqual(getGrade(43), \"F\");\n--seed--\n--seed-contents--\n```js\nfunction getAverage(scores) {\nlet sum = 0;\nfor (const score of scores) {\nsum += score;\n}\nreturn sum / scores length;\n}\n--fcc-editable-region--\nfunction getGrade(score) {\n}\nconsole log(getGrade(96));\nconsole log(getGrade(82));\nconsole log(getGrade(56));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626a060c4006f793e10cb33.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "afc190d28358a51c2f76dfee8f8f2c89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b4c58c027d86478ff5eb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6626b4c58c027d86478ff5eb\ntitle: Step 3\nchallengeType: 1\ndashedName: step-3\n--description--\nThe teacher is really happy with the program you have created so far. But now they want to have an easy way to check if a student has a passing grade. A passing grade is anything that is not an \"F\".\nComplete the function hasPassingGrade that takes a student score as a parameter. Your function should return true if the student has a passing grade and false if they do not.\nTips\nUse the getGrade function to get the student's grade. Then check if the grade is passing or not.\n--hints--\nYour hasPassingGrade function should return a boolean value.\njs\nassert.strictEqual(typeof hasPassingGrade(100), \"boolean\");\nYour hasPassingGrade function should return true if the grade is an \"A\".\njs\nassert.isTrue(hasPassingGrade(100));\nYour hasPassingGrade function should return false if the grade is an \"F\".\njs\nassert.isFalse(hasPassingGrade(53));\nYour hasPassingGrade function should return true for all passing grades.\njs\nassert.isTrue(hasPassingGrade(87));\nassert.isTrue(hasPassingGrade(60));\nassert.isTrue(hasPassingGrade(73));\nassert.isTrue(hasPassingGrade(96));\n--seed--\n--seed-contents--\n```js\nfunction getAverage(scores) {\nlet sum = 0;\nfor (const score of scores) {\nsum += score;\n}\nreturn sum / scores.length;\n}\nfunction getGrade(score) {\nif (score === 100) {\nreturn \"A++\";\n} else if (score >= 90) {\nreturn \"A\";\n} else if (score >= 80) {\nreturn \"B\";\n} else if (score >= 70) {\nreturn \"C\";\n} else if (score >= 60) {\nreturn \"D\";\n} else {\nreturn \"F\";\n}\n}\n--fcc-editable-region--\nfunction hasPassingGrade(score) {\n}\nconsole.log(hasPassingGrade(100));\nconsole.log(hasPassingGrade(53));\nconsole.log(hasPassingGrade(87));\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1889,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b4c58c027d86478ff5eb.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "76c8e8c43ec7d32edef97031a7418c3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d5697d80fef0eea026672\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nIf you try to play the game, you will see that you can play for an infinite amount of rounds But the rules state that the first one to three points wins Inside your showResults function, you will need to check if the player or computer has reached three points If either has reached three points, you should display a message indicating the winner For example, if the player has won the game, then the winnerMsgElement should be updated to \"Player has won the game \" If the computer has won the game, then the winnerMsgElement should be updated to \"Computer has won the game \" If there is a winner, you will want to show the resetGameBtn button and hide the optionsContainer so the player can play again Tips\nUse the style display property on an element, with the value \"block\" or \"none\", to show or hide the element --hints--\nYou should update the winnerMsgElement if there is a winner ```js\nwhile (playerScore < 3 && computerScore < 3) {\nshowResults(\"Rock\");\n}\nif (playerScore === 3) {\nassert equal(winnerMsgElement innerText, \"Player has won the game \");\n} else {\nassert equal(winnerMsgElement innerText, \"Computer has won the game \");\n}\n```\nYou should hide the optionsContainer and if the player or computer has reached three points js\nplayerScore = 3;\nshowResults(\"Scissors\");\nassert equal(optionsContainer style display, \"none\");\nYou should show the resetGameBtn button if the player or computer has reached three points js\ncomputerScore = 3;\nshowResults(\"Rock\");\nconst computedStyle = window getComputedStyle(resetGameBtn) display;\nassert notEqual(computedStyle, \"none\");\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c71d67b61311eae92dd04ec86fed7e35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "--seed-contents-- ```html Rock, Paper, Scissors game Let's play Rock, Paper, Scissors Rules to the game You will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game: Rock beats Scissors Scissors beats Paper Paper beats Rock If the player and computer choose the same option (Ex Paper and Paper), then no one gets the pointPlayer Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again ```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "939dc34214dff12ff4032c799b73a1d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } rules-container { padding: 10px 0; margin: auto; border-radius: 15px; border: 5px solid var(--yellow); background-color: var(--white); color: var(--very-dark-blue); } rules-container ul { list-style-type: none; } rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 13rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options length);\nreturn options[randomIndex];\n}\nfunction hasPlayerWonTheRound(player, computer) {\nreturn (\n(player === \"Rock\" && computer === \"Scissors\") ||\n(player === \"Scissors\" && computer === \"Paper\") ||\n(player === \"Paper\" && computer === \"Rock\")\n);\n}\nlet playerScore = 0;\nlet computerScore = 0;\nfunction getRoundResults(userOption) {\nconst computerResult = getRandomComputerResult();\nif (hasPlayerWonTheRound(userOption, computerResult)) {\nplayerScore++;\nreturn Player wins ${userOption} beats ${computerResult};\n} else if (computerResult === userOption) {\nreturn It's a tie Both chose ${userOption};\n} else {\ncomputerScore++;\nreturn Computer wins ${computerResult} beats ${userOption};\n}\n}\n--fcc-editable-region--\nconst playerScoreSpanElement = document getElementById(\"player-score\");\nconst computerScoreSpanElement = document getElementById(\"computer-score\");\nconst roundResultsMsg = document getElementById(\"results-msg\");\nconst winnerMsgElement = document getElementById(\"winner-msg\");\nconst optionsContainer = document querySelector(\" options-container\");\nconst resetGameBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "eed4c94c7f7cca97cef75089cf5ee4ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "0; function getRoundResults(userOption) { const computerResult = getRandomComputerResult(); if (hasPlayerWonTheRound(userOption, computerResult)) { playerScore++; return Player wins ${userOption} beats ${computerResult}; } else if (computerResult === userOption) { return It's a tie Both chose ${userOption}; } else { computerScore++; return Computer wins ${computerResult} beats ${userOption}; } } --fcc-editable-region-- const playerScoreSpanElement = document getElementById(\"player-score\"); const computerScoreSpanElement = document getElementById(\"computer-score\"); const roundResultsMsg = document getElementById(\"results-msg\"); const winnerMsgElement = document getElementById(\"winner-msg\"); const optionsContainer = document querySelector(\" options-container\"); const resetGameBtn = documentgetElementById(\"reset-game-btn\");\nfunction showResults(userOption) {\nroundResultsMsg innerText = getRoundResults(userOption);\ncomputerScoreSpanElement innerText = computerScore;\nplayerScoreSpanElement innerText = playerScore;\n};\n--fcc-editable-region--\nconst rockBtn = document getElementById(\"rock-btn\");\nconst paperBtn = document getElementById(\"paper-btn\");\nconst scissorsBtn = document getElementById(\"scissors-btn\");\nrockBtn addEventListener(\"click\", function () {\nshowResults(\"Rock\");\n});\npaperBtn addEventListener(\"click\", function () {\nshowResults(\"Paper\");\n});\nscissorsBtn addEventListener(\"click\", function () {\nshowResults(\"Scissors\");\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5697d80fef0eea026672.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "82d06bf21a292bb20045be34719e7273",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "id: 663d5bebe2eef6128a0b1e75\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nIf the player or computer has won the game, there should be an option to reset the game and play again Complete the resetGame function that accomplishes the following:\nResets the player and computer scores to 0 Updates the playerScoreSpanElement and computerScoreSpanElement to display the new scores Hides the resetGameBtn button Shows the optionsContainer so the player can play again Clears the content for the winnerMsgElement and roundResultsMsg elements Tips\nYou can use the innerText property to update the content of an element To clear the content of an element, you can set the innerText to an empty string Once you apply those changes, you will have completed the Rock, Paper, Scissors game --hints--\nYour resetGame function should set the playerScore to 0 js\nplayerScore = 1;\nresetGame();\nassert equal(playerScore, 0);\nYour resetGame function should set the computerScore to 0 js\ncomputerScore = 1;\nresetGame();\nassert equal(computerScore, 0);\nYour resetGame function should set the playerScoreSpanElement to 0 js\nplayerScoreSpanElement innerText = \"1\";\nresetGame();\nassert equal(playerScoreSpanElement innerText, \"0\");\nYour resetGame function should set the computerScoreSpanElement to 0 js\ncomputerScoreSpanElement innerText = \"1\";\nresetGame();\nassert equal(computerScoreSpanElement innerText, \"0\");\nYour resetGame function should set the roundResultsMsg to an empty string js\nrockBtn click();\nassert notEqual(roundResultsMsg innerText, \"\");\nresetGame();\nassert equal(roundResultsMsg innerText, \"\");\nYour resetGame function should set the winnerMsgElement to an empty string js\nwinnerMsgElement innerText = \"Player has won the game \";\nresetGame();\nassert equal(winnerMsgElement innerText, \"\");\nYour resetGame function should hide the resetGameBtn js\nplayerScore = 3;\ncomputerScore = 3;\nrockBtn click();\nassert notEqual(window getComputedStyle(resetGameBtn) display, \"none\");\nresetGame();\nassert equal(window getComputedStyle(resetGameBtn) display, \"none\");\nYour resetGame function should show the optionsContainer js\nplayerScore = 3;\ncomputerScore = 3;\nrockBtn click();\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "1d112c4c4c6435bb1b5f687ca6b4b546",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "\"\"); resetGame(); assert equal(roundResultsMsg innerText, \"\"); Your resetGame function should set the winnerMsgElement to an empty string js winnerMsgElement innerText = \"Player has won the game \"; resetGame(); assert equal(winnerMsgElement innerText, \"\"); Your resetGame function should hide the resetGameBtn js playerScore = 3; computerScore = 3; rockBtn click(); assert notEqual(window getComputedStyle(resetGameBtn) display, \"none\"); resetGame(); assert equal(window getComputedStyle(resetGameBtn) display, \"none\"); Your resetGame function should show the optionsContainer js playerScore = 3; computerScore = 3; rockBtn click(); assertequal(window getComputedStyle(optionsContainer) display, \"none\");\nresetGame();\nassert notEqual(window getComputedStyle(optionsContainer) display, \"none\");\n--seed--\n--seed-contents--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again ```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "2dcb8997affaee78f9b93461fd75913f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "Score: 0 Choose an option: Rock Paper Scissors Play again ``` ```css , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } :root { --very-dark-blue: #0a0a23; --white: #ffffff; --yellow: #f1be32; --golden-yellow: #feac32; } body { background-color: var(--very-dark-blue); text-align: center; color: var(--white); } h1 { margin: 15px 0 20px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--very-dark-blue); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1 3rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "2e2f971cf8dc2201345635529a4aac94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 1 3rem; margin: 15px 0; } winner-msg { margin-top: 25px; } reset-game-btn { display: none; margin: 20px auto; } ``` ```js function getRandomComputerResult() { const options = [\"Rock\", \"Paper\", \"Scissors\"]; const randomIndex = Math floor(Math random() * optionslength);\nreturn options[randomIndex];\n}\nfunction hasPlayerWonTheRound(player, computer) {\nreturn (\n(player === \"Rock\" && computer === \"Scissors\") ||\n(player === \"Scissors\" && computer === \"Paper\") ||\n(player === \"Paper\" && computer === \"Rock\")\n);\n}\nlet playerScore = 0;\nlet computerScore = 0;\nfunction getRoundResults(userOption) {\nconst computerResult = getRandomComputerResult();\nif (hasPlayerWonTheRound(userOption, computerResult)) {\nplayerScore++;\nreturn Player wins ${userOption} beats ${computerResult};\n} else if (computerResult === userOption) {\nreturn It's a tie Both chose ${userOption};\n} else {\ncomputerScore++;\nreturn Computer wins ${computerResult} beats ${userOption};\n}\n}\nconst playerScoreSpanElement = document getElementById(\"player-score\");\nconst computerScoreSpanElement = document getElementById(\"computer-score\");\nconst roundResultsMsg = document getElementById(\"results-msg\");\nconst winnerMsgElement = document getElementById(\"winner-msg\");\nconst optionsContainer = document querySelector(\" options-container\");\nconst resetGameBtn = document getElementById(\"reset-game-btn\");\nfunction showResults(userOption) {\nroundResultsMsg innerText = getRoundResults(userOption);\ncomputerScoreSpanElement innerText = computerScore;\nplayerScoreSpanElement innerText = playerScore;\nif (playerScore === 3 || computerScore === 3) {\nwinnerMsgElement innerText = ${\nplayerScore === 3 \"Player\" : \"Computer\"\n} has won the game ;\nresetGameBtn style display = \"block\";\noptionsContainer style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "63e01991483b6d8a26b37a40d1217a95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "= document getElementById(\"player-score\"); const computerScoreSpanElement = document getElementById(\"computer-score\"); const roundResultsMsg = document getElementById(\"results-msg\"); const winnerMsgElement = document getElementById(\"winner-msg\"); const optionsContainer = document querySelector(\" options-container\"); const resetGameBtn = document getElementById(\"reset-game-btn\"); function showResults(userOption) { roundResultsMsg innerText = getRoundResults(userOption); computerScoreSpanElement innerText = computerScore; playerScoreSpanElement innerText = playerScore; if (playerScore === 3 || computerScore === 3) { winnerMsgElement innerText = ${ playerScore === 3 \"Player\" : \"Computer\" } has won the game ; resetGameBtn style display = \"block\"; optionsContainer styledisplay = \"none\";\n}\n};\n--fcc-editable-region--\nfunction resetGame() {\n};\n--fcc-editable-region--\nresetGameBtn addEventListener(\"click\", resetGame);\nconst rockBtn = document getElementById(\"rock-btn\");\nconst paperBtn = document getElementById(\"paper-btn\");\nconst scissorsBtn = document getElementById(\"scissors-btn\");\nrockBtn addEventListener(\"click\", function () {\nshowResults(\"Rock\");\n});\npaperBtn addEventListener(\"click\", function () {\nshowResults(\"Paper\");\n});\nscissorsBtn addEventListener(\"click\", function () {\nshowResults(\"Scissors\");\n});\n```\n--solutions--\n```html\nRock, Paper, Scissors game\nLet's play Rock, Paper, Scissors Rules to the game\nYou will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nIf the player and computer choose the same option (Ex Paper and\nPaper), then no one gets the point Player Score: 0\nComputer Score:\n0\nChoose an option:\nRock\nPaper\nScissors\nPlay again",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "0cebd30af0ea84a3d034a01dfca1028b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "game You will be playing against the computer You can choose between Rock, Paper, and Scissors The first one to three points wins Here are the rules to getting a point in the game: Rock beats Scissors Scissors beats Paper Paper beats Rock If the player and computer choose the same option (Ex Paper and Paper), then no one gets the point Player Score: 0 Computer Score: 0 Choose an option: Rock Paper Scissors Play again```\n```css\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--very-dark-blue: #0a0a23;\n--white: #ffffff;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--very-dark-blue);\ntext-align: center;\ncolor: var(--white);\n}\nh1 {\nmargin: 15px 0 20px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--very-dark-blue);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} rules-container {\npadding: 10px 0;\nmargin: auto;\nborder-radius: 15px;\nborder: 5px solid var(--yellow);\nbackground-color: var(--white);\ncolor: var(--very-dark-blue);\n} rules-container ul {\nlist-style-type: none;\n} rules-container p {\nmargin: 10px 0;\n}\n@media (min-width: 760px) { rules-container {\nwidth: 60%;\n}\n} score-container {\ndisplay: flex;\njustify-content: space-around;\nmargin: 30px 0;\nfont-size: 1 2rem;\n} score {\nfont-weight: 500;\n} results-container {\nfont-size: 1 3rem;\nmargin: 15px 0;\n}\nwinner-msg {\nmargin-top: 25px;\n}\nreset-game-btn {\ndisplay: none;\nmargin: 20px auto;\n}\n```\n```js\nfunction getRandomComputerResult() {\nconst options = [\"Rock\", \"Paper\", \"Scissors\"];\nconst randomIndex = Math floor(Math random() * options",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "515674f4ed98d5dc15929101cbbe21c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "rules-container p { margin: 10px 0; } @media (min-width: 760px) { rules-container { width: 60%; } } score-container { display: flex; justify-content: space-around; margin: 30px 0; font-size: 1 2rem; } score { font-weight: 500; } results-container { font-size: 1 3rem; margin: 15px 0; } winner-msg { margin-top: 25px; } reset-game-btn { display: none; margin: 20px auto; } ``` ```js function getRandomComputerResult() { const options = [\"Rock\", \"Paper\", \"Scissors\"]; const randomIndex = Math floor(Math random() * optionslength);\nreturn options[randomIndex];\n}\nfunction hasPlayerWonTheRound(player, computer) {\nreturn (\n(player === \"Rock\" && computer === \"Scissors\") ||\n(player === \"Scissors\" && computer === \"Paper\") ||\n(player === \"Paper\" && computer === \"Rock\")\n);\n}\nlet playerScore = 0;\nlet computerScore = 0;\nfunction getRoundResults(userOption) {\nconst computerResult = getRandomComputerResult();\nif (hasPlayerWonTheRound(userOption, computerResult)) {\nplayerScore++;\nreturn Player wins ${userOption} beats ${computerResult};\n} else if (computerResult === userOption) {\nreturn It's a tie Both chose ${userOption};\n} else {\ncomputerScore++;\nreturn Computer wins ${computerResult} beats ${userOption};\n}\n}\nconst playerScoreSpanElement = document getElementById(\"player-score\");\nconst computerScoreSpanElement = document getElementById(\"computer-score\");\nconst roundResultsMsg = document getElementById(\"results-msg\");\nconst winnerMsgElement = document getElementById(\"winner-msg\");\nconst optionsContainer = document querySelector(\" options-container\");\nconst resetGameBtn = document getElementById(\"reset-game-btn\");\nfunction showResults(userOption) {\nroundResultsMsg innerText = getRoundResults(userOption);\ncomputerScoreSpanElement innerText = computerScore;\nplayerScoreSpanElement innerText = playerScore;\nif (playerScore === 3 || computerScore === 3) {\nwinnerMsgElement innerText = ${\nplayerScore === 3 \"Player\" : \"Computer\"\n} has won the game ;\nresetGameBtn style display = \"block\";\noptionsContainer style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "533e2168296312e4d408548e2ebc1fc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
    "source_type": "git_repo",
    "title": "Rock, Paper, Scissors game",
    "content": "= document getElementById(\"player-score\"); const computerScoreSpanElement = document getElementById(\"computer-score\"); const roundResultsMsg = document getElementById(\"results-msg\"); const winnerMsgElement = document getElementById(\"winner-msg\"); const optionsContainer = document querySelector(\" options-container\"); const resetGameBtn = document getElementById(\"reset-game-btn\"); function showResults(userOption) { roundResultsMsg innerText = getRoundResults(userOption); computerScoreSpanElement innerText = computerScore; playerScoreSpanElement innerText = playerScore; if (playerScore === 3 || computerScore === 3) { winnerMsgElement innerText = ${ playerScore === 3 \"Player\" : \"Computer\" } has won the game ; resetGameBtn style display = \"block\"; optionsContainer styledisplay = \"none\";\n}\n};\nfunction resetGame() {\nplayerScore = 0;\ncomputerScore = 0;\ncomputerScoreSpanElement innerText = computerScore;\nplayerScoreSpanElement innerText = playerScore;\nroundResultsMsg innerText = \"\";\nwinnerMsgElement innerText = \"\";\noptionsContainer style display = \"block\";\nresetGameBtn style display = \"none\";\n}\nresetGameBtn addEventListener(\"click\", resetGame);\nconst rockBtn = document getElementById(\"rock-btn\");\nconst paperBtn = document getElementById(\"paper-btn\");\nconst scissorsBtn = document getElementById(\"scissors-btn\");\nrockBtn addEventListener(\"click\", function () {\nshowResults(\"Rock\");\n});\npaperBtn addEventListener(\"click\", function () {\nshowResults(\"Paper\");\n});\nscissorsBtn addEventListener(\"click\", function () {\nshowResults(\"Scissors\");\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-dom-manipulation-by-building-a-rock-paper-scissors-game\\663d5bebe2eef6128a0b1e75.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "99f84b02bc1c5623e794738b23c4f1a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6626b8dcf5057f896f948440\ntitle: Step 4\nchallengeType: 1\ndashedName: step-4\n--description--\nNow that the teacher has all of the information they need, they want to be able to message the student with the results Complete the studentMsg function with totalScores and studentScore for parameters The function should return a string representing a message to the student If the student passed the course, the string should follow this format:\nmd\nClass average: average-goes-here Your grade: grade-goes-here You passed the course If the student failed the course, the string should follow this format:\nmd\nClass average: average-goes-here Your grade: grade-goes-here You failed the course Replace average-goes-here with the average of the total scores Replace grade-goes-here with the student's grade Tips\nUse the getAverage function to get the class average Use the getGrade function to get the student's grade Use string concatenation (+) to build the message Be careful with the punctuation and spaces in the message --hints--\nstudentMsg([92, 88, 12, 77, 57, 100, 67, 38, 97, 89], 37) should return the following message: \"Class average: 71 7 Your grade: F You failed the course \" js\nassert strictEqual(studentMsg([92, 88, 12, 77, 57, 100, 67, 38, 97, 89], 37), \"Class average: 71 7 Your grade: F You failed the course \");\nstudentMsg([56, 23, 89, 42, 75, 11, 68, 34, 91, 19], 100) should return the following message: \"Class average: 50 8 Your grade: A++ You passed the course \" js\nassert strictEqual(studentMsg([56, 23, 89, 42, 75, 11, 68, 34, 91, 19], 100), \"Class average: 50 8 Your grade: A++ You passed the course \");\nYour studentMsg function should return the correct message based on the student's score and the class average js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b7c50c59ffdd75a7454f8cb3d5ef7c7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "failed the course \"); studentMsg([56, 23, 89, 42, 75, 11, 68, 34, 91, 19], 100) should return the following message: \"Class average: 50 8 Your grade: A++ You passed the course \" js assert strictEqual(studentMsg([56, 23, 89, 42, 75, 11, 68, 34, 91, 19], 100), \"Class average: 50 8 Your grade: A++ You passed the course \"); Your studentMsg function should return the correct message based on the student's score and the class average js assertstrictEqual(studentMsg([33, 44, 55, 66, 77, 88, 99, 100], 92), \"Class average: 70 25 Your grade: A You passed the course \");\nassert strictEqual(studentMsg([33, 44, 55, 66, 77, 88, 99, 100], 57), \"Class average: 70 25 Your grade: F You failed the course \");\n--seed--\n--seed-contents--\n```js\nfunction getAverage(scores) {\nlet sum = 0;\nfor (const score of scores) {\nsum += score;\n}\nreturn sum / scores length;\n}\nfunction getGrade(score) {\nif (score === 100) {\nreturn \"A++\";\n} else if (score >= 90) {\nreturn \"A\";\n} else if (score >= 80) {\nreturn \"B\";\n} else if (score >= 70) {\nreturn \"C\";\n} else if (score >= 60) {\nreturn \"D\";\n} else {\nreturn \"F\";\n}\n}\nfunction hasPassingGrade(score) {\nreturn getGrade(score) == \"F\";\n}\n--fcc-editable-region--\nfunction studentMsg(totalScores, studentScore) {\n}\nconsole log(studentMsg([92, 88, 12, 77, 57, 100, 67, 38, 97, 89], 37));\n--fcc-editable-region--\n```\n--solutions--\n```js\nfunction getAverage(scores) {\nlet sum = 0;\nfor (const score of scores) {\nsum += score;\n}\nreturn sum / scores",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "239ada5126923308a98727c88669217a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} else if (score >= 70) { return \"C\"; } else if (score >= 60) { return \"D\"; } else { return \"F\"; } } function hasPassingGrade(score) { return getGrade(score) == \"F\"; } --fcc-editable-region-- function studentMsg(totalScores, studentScore) { } console log(studentMsg([92, 88, 12, 77, 57, 100, 67, 38, 97, 89], 37)); --fcc-editable-region-- ``` --solutions-- ```js function getAverage(scores) { let sum = 0; for (const score of scores) { sum += score; } return sum / scoreslength;\n}\nfunction getGrade(score) {\nif (score === 100) {\nreturn \"A++\";\n} else if (score >= 90) {\nreturn \"A\";\n} else if (score >= 80) {\nreturn \"B\";\n} else if (score >= 70) {\nreturn \"C\";\n} else if (score >= 60) {\nreturn \"D\";\n} else {\nreturn \"F\";\n}\n}\nfunction hasPassingGrade(score) {\nreturn getGrade(score) == \"F\";\n}\nfunction studentMsg(totalScores, studentScore) {\nlet average = getAverage(totalScores);\nlet grade = getGrade(studentScore);\nreturn Class average: ${average} Your grade: ${grade} You ${\nhasPassingGrade(studentScore) \"passed\" : \"failed\"\n} the course ;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\review-js-fundamentals-by-building-a-gradebook-app\\6626b8dcf5057f896f948440.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "07c886d0c7626224515bac0fbff7a97c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
    "source_type": "git_repo",
    "title": "Personal Portfolio",
    "content": "id: bd7158d8c242eddfaeb5bd13\ntitle: Build a Personal Portfolio Webpage\nchallengeType: 14\nforumTopicId: 301143\ndashedName: build-a-personal-portfolio-webpage\n--description--\nObjective: Build an app that is functionally similar to https://personal-portfolio freecodecamp rocks Do not copy this demo project User Stories:\nYour portfolio should have a welcome section with an id of welcome-section\nThe welcome section should have an h1 element that contains text\nYour portfolio should have a projects section with an id of projects\nThe projects section should contain at least one element with a class of project-tile to hold a project\nThe projects section should contain at least one link to a project\nYour portfolio should have a navbar with an id of navbar\nThe navbar should contain at least one link that you can click on to navigate to different sections of the page\nYour portfolio should have a link with an id of profile-link, which opens your GitHub or freeCodeCamp profile in a new tab\nYour portfolio should have at least one media query\nThe height of the welcome section should be equal to the height of the viewport\nThe navbar should always be at the top of the viewport\nFulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding Note: Be sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS\n--hints--\nYour portfolio should have a \"Welcome\" section with an id of welcome-section js\nconst el = document getElementById('welcome-section');\nassert isNotNull(el);\nYour #welcome-section element should contain an h1 element js\nassert isAbove(\ndocument querySelectorAll('#welcome-section h1') length,\n0,\n'Welcome section should contain an h1 element '\n);\nYou should not have any empty h1 elements within #welcome-section element js\nassert isAbove(\ndocument querySelectorAll('#welcome-section h1') [0] innerText length,\n0,\n'h1 element in welcome section should contain your name or camper ' + 'name '\n);\nYou should have a \"Projects\" section with an id of projects js\nconst el = document getElementById('projects');\nassert isNotNull(el);\nYour portfolio should contain at least one element with a class of project-tile js\nassert isAbove(document querySelectorAll('#projects project-tile')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "18c71503d9297b650103e5e67e4affb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
    "source_type": "git_repo",
    "title": "Personal Portfolio",
    "content": "' ); You should not have any empty h1 elements within #welcome-section element js assert isAbove( document querySelectorAll('#welcome-section h1') [0] innerText length, 0, 'h1 element in welcome section should contain your name or camper ' + 'name ' ); You should have a \"Projects\" section with an id of projects js const el = document getElementById('projects'); assert isNotNull(el); Your portfolio should contain at least one element with a class of project-tile js assert isAbove(document querySelectorAll('#projects project-tile')length, 0);\nYour #projects element should contain at least one a element js\nassert isAbove(document querySelectorAll('#projects a') length, 0);\nYour portfolio should have a navbar with an id of navbar js\nconst el = document getElementById('navbar');\nassert isNotNull(el);\nYour #navbar element should contain at least one a element whose href attribute starts with # ```js\nconst links = [ document querySelectorAll('#navbar a')] filter(\nnav => (nav getAttribute('href') || '') substring(0, 1) === '#'\n);\nassert isAbove(links length, 0, 'Navbar should contain an anchor link ');\n```\nYour portfolio should have an a element with an id of profile-link js\nconst el = document getElementById('profile-link');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'A');\nYour #profile-link element should have a target attribute of _blank js\nconst el = document getElementById('profile-link');\nassert isNotNull(el);\nassert strictEqual(el target, '_blank');\nYour portfolio should use at least one media query js\nconst htmlSourceAttr = Array from(document querySelectorAll('source')) map(el => el getAttribute('media'))\nconst cssCheck = new __helpers CSSHelp(document) getCSSRules('media')\nassert isTrue(cssCheck length > 0 || htmlSourceAttr length > 0);\nYour #navbar element should always be at the top of the viewport ```js\n(async () => {\nconst timeout = milliseconds =>\nnew Promise(resolve => setTimeout(resolve, milliseconds));\nconst navbar = document getElementById('navbar');\nassert approximately(\nnavbar getBoundingClientRect() top,\n0,\n15,\n\"Navbar's parent should be body and it should be at the top of \" +\n'the viewport '\n);\nwindow scroll(0, 500);\nawait timeout(1);\nassert approximately(\nnavbar getBoundingClientRect()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "baf45bfa5929bcf7ef3ba7a51c7c142b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
    "source_type": "git_repo",
    "title": "Personal Portfolio",
    "content": "isTrue(cssCheck length > 0 || htmlSourceAttr length > 0); Your #navbar element should always be at the top of the viewport ```js (async () => { const timeout = milliseconds => new Promise(resolve => setTimeout(resolve, milliseconds)); const navbar = document getElementById('navbar'); assert approximately( navbar getBoundingClientRect() top, 0, 15, \"Navbar's parent should be body and it should be at the top of \" + 'the viewport ' ); window scroll(0, 500); await timeout(1); assert approximately( navbar getBoundingClientRect()top,\n0,\n15,\n'Navbar should be at the top of the viewport even after ' + 'scrolling '\n);\nwindow scroll(0, 0);\n})();\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nPersonal Portfolio\nProjects |\nContact me\nIt's me Naomi Carrigan\nWelcome to my portfolio page Projects\nHere's what I've worked on See the Pen Algebraic Concepts by Naomi Carrigan\n(@nhcarrigan) on CodePen See the Pen Pokemon Daycare Service by Naomi Carrigan\n(@nhcarrigan) on CodePen See the Pen Togepi Fan Club by Naomi Carrigan\n(@nhcarrigan) on CodePen See the Pen Togepi by Naomi Carrigan\n(@nhcarrigan) on CodePen Contact me Use the links below to get in touch FreeCodeCamp",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9e603ac48bd9417327c3189d57399df0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
    "source_type": "git_repo",
    "title": "Personal Portfolio",
    "content": "Portfolio Projects | Contact me It's me Naomi Carrigan Welcome to my portfolio page Projects Here's what I've worked on See the Pen Algebraic Concepts by Naomi Carrigan (@nhcarrigan) on CodePen See the Pen Pokemon Daycare Service by Naomi Carrigan (@nhcarrigan) on CodePen See the Pen Togepi Fan Club by Naomi Carrigan (@nhcarrigan) on CodePen See the Pen Togepi by Naomi Carrigan (@nhcarrigan) on CodePen Contact me Use the links below to get in touch FreeCodeCamporg | GitHub | Facebook | LinkedIn\nReturn to Project List | Return to HomePage\n```\n```css\nnav {\nposition: fixed;\nwidth: 100%;\ntext-align: right;\nfont-size: 24pt;\ntop: 0%;\nright: 5px;\nbackground-color: #000000;\ncolor: #ffffff;\n}\n@media (max-width: 500px) {\nnav {\ndisplay: none;\n}\n}\na {\ncolor: #ffffff;\n}\nmain {\ntext-align: center;\nbackground-color: black;\nfont-family: Pacifico;\n}\nh1 {\nfont-size: 48pt;\n}\nh2 {\nfont-size: 24pt;\n}\np {\nfont-size: 12pt;\n}\nwelcome-section {\nbackground-color: #251a4a;\ncolor: #ffffff;\ndisplay: table-cell;\nvertical-align: middle;\nwidth: 100vw;\nheight: 100vh;\n}\nprojects {\nbackground-color: #060a9c;\ncolor: #ffffff;\ndisplay: table-cell;\nvertical-align: middle;\nwidth: 100vw;\nheight: 100vh;\n}\ncontact {\nbackground-color: #03300b;\ncolor: #ffffff;\ndisplay: table-cell;\nvertical-align: middle;\nwidth: 100vw;\nheight: 100vh;\n}\n```\nhtml\n<head><style>@media (max-width: 500px){nav{display: none;}}</style></head><body><nav id=\"navbar\"><a href=\"#projects\">text</a> | </nav><main><section id=\"welcome-section\"><h1>text</h1></section><hr><section id=\"projects\"><h1>Projects</h1><h2 class=\"project-tile\"><a id=\"profile-link\" target=\"_blank\" href=\"https://freecodecamp",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f9c3a0b09670049a51f7d005376fc5f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
    "source_type": "git_repo",
    "title": "Personal Portfolio",
    "content": "h1 { font-size: 48pt; } h2 { font-size: 24pt; } p { font-size: 12pt; } welcome-section { background-color: #251a4a; color: #ffffff; display: table-cell; vertical-align: middle; width: 100vw; height: 100vh; } projects { background-color: #060a9c; color: #ffffff; display: table-cell; vertical-align: middle; width: 100vw; height: 100vh; } contact { background-color: #03300b; color: #ffffff; display: table-cell; vertical-align: middle; width: 100vw; height: 100vh; } ``` html <head><style>@media (max-width: 500px){nav{display: none;}}</style></head><body><nav id=\"navbar\"><a href=\"#projects\">text</a> | </nav><main><section id=\"welcome-section\"><h1>text</h1></section><hr><section id=\"projects\"><h1>Projects</h1><h2 class=\"project-tile\"><a id=\"profile-link\" target=\"_blank\" href=\"https://freecodecamporg\">text</a></h2></section><hr></body></html>\n```css\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-personal-portfolio-webpage-project\\build-a-personal-portfolio-webpage.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "797bf53492c6eab78095d0f0e1067547",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "id: 587d78af367417b2b2512b04\ntitle: Build a Product Landing Page\nchallengeType: 14\nforumTopicId: 301144\ndashedName: build-a-product-landing-page\n--description--\nObjective: Build an app that is functionally similar to https://product-landing-page freecodecamp rocks Do not copy this demo project User Stories:\nYour product landing page should have a header element with a corresponding id=\"header\"\nYou can see an image within the header element with a corresponding id=\"header-img\" (A logo would make a good image here)\nWithin the #header element, you can see a nav element with a corresponding id=\"nav-bar\"\nYou can see at least three clickable elements inside the nav element, each with the class nav-link\nWhen you click a nav-link button in the nav element, you are taken to the corresponding section of the landing page\nYou can watch an embedded product video with id=\"video\"\nYour landing page has a form element with a corresponding id=\"form\"\nWithin the form, there is an input field with id=\"email\" where you can enter an email address\nThe #email input field should have placeholder text to let users know what the field is for\nThe #email input field uses HTML5 validation to confirm that the entered text is an email address\nWithin the form, there is a submit input with a corresponding id=\"submit\"\nWhen you click the #submit element, the email is submitted to a static page (use this mock URL: https://www freecodecamp com/email-submit)\nThe navbar should always be at the top of the viewport\nYour product landing page should have at least one media query\nYour product landing page should utilize CSS flexbox at least once\nFulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding Note: Be sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS\n--hints--\nYou should have a header element with an id of header js\nconst el = document getElementById('header')\nassert( el && el tagName === 'HEADER')\nYou should have an img element with an id of header-img js\nconst el = document getElementById('header-img')\nassert( el && el tagName === 'IMG')\nYour #header-img should be a descendant of the #header",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "f91828149a522dc9fea022fe81bce1ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS --hints-- You should have a header element with an id of header js const el = document getElementById('header') assert( el && el tagName === 'HEADER') You should have an img element with an id of header-img js const el = document getElementById('header-img') assert( el && el tagName === 'IMG') Your #header-img should be a descendant of the #headerjs\nconst els = document querySelectorAll('#header #header-img')\nassert(els length > 0)\nYour #header-img should have a src attribute js\nconst el = document getElementById('header-img')\nassert( el && el src)\nYour #header-img’s src value should be a valid URL (starts with http) js\nconst el = document getElementById('header-img')\nassert( el && /^http/ test(el src))\nYou should have a nav element with an id of nav-bar js\nconst el = document getElementById('nav-bar')\nassert( el && el tagName === 'NAV')\nYour #nav-bar should be a descendant of the #header js\nconst els = document querySelectorAll('#header #nav-bar')\nassert(els length > 0)\nYou should have at least 3 nav-link elements within the #nav-bar js\nconst els = document querySelectorAll('#nav-bar nav-link')\nassert(els length >= 3)\nEach nav-link element should have an href attribute js\nconst els = document querySelectorAll(' nav-link')\nels forEach(el => {\nif ( el href) assert(false)\n})\nassert(els length > 0)\nEach nav-link element should link to a corresponding element on the landing page (has an href with a value of another element's id e g #footer) js\nconst els = document querySelectorAll(' nav-link')\nels forEach(el => {\nconst linkDestination = el getAttribute('href') slice(1)\nif ( document getElementById(linkDestination)) assert(false)\n})\nassert(els length > 0)\nYou should have a video or iframe element with an id of video js\nconst el = document getElementById('video')\nassert( el && (el tagName === 'VIDEO' || el tagName === 'IFRAME'))\nYour #video should have a src attribute js\nlet el = document getElementById('video')\nconst sourceNode = el",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "c7ea14b9743d03e0887421242da727b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "#footer) js const els = document querySelectorAll(' nav-link') els forEach(el => { const linkDestination = el getAttribute('href') slice(1) if ( document getElementById(linkDestination)) assert(false) }) assert(els length > 0) You should have a video or iframe element with an id of video js const el = document getElementById('video') assert( el && (el tagName === 'VIDEO' || el tagName === 'IFRAME')) Your #video should have a src attribute js let el = document getElementById('video') const sourceNode = elchildren;\nlet sourceElement = null;\nif (sourceNode length) {\nsourceElement = [ video children] filter(el => el localName === 'source')[0];\n}\nif (sourceElement) {\nel = sourceElement;\n}\nassert(el hasAttribute('src'));\nYou should have a form element with an id of form js\nconst el = document getElementById('form')\nassert( el && el tagName === 'FORM')\nYou should have an input element with an id of email js\nconst el = document getElementById('email')\nassert( el && el tagName === 'INPUT')\nYour #email should be a descendant of the #form js\nconst els = document querySelectorAll('#form #email')\nassert(els length > 0)\nYour #email should have the placeholder attribute with placeholder text js\nconst el = document getElementById('email')\nassert( el && el placeholder && el placeholder length > 0)\nYour #email should use HTML5 validation by setting its type to email js\nconst el = document getElementById('email')\nassert( el && el type === 'email')\nYou should have an input element with an id of submit js\nconst el = document getElementById('submit')\nassert( el && el tagName === 'INPUT')\nYour #submit should be a descendant of the #form js\nconst els = document querySelectorAll('#form #submit')\nassert(els length > 0)\nYour #submit should have a type of submit js\nconst el = document getElementById('submit')\nassert( el && el type === 'submit')\nYour #form should have an action attribute of https://www freecodecamp com/email-submit js\nconst el = document getElementById('form')\nassert( el && el action === 'https://www freecodecamp com/email-submit')\nYour #email should have a name attribute of email js\nconst el = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "888e8b93736f273129b2f7425ee875c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "descendant of the #form js const els = document querySelectorAll('#form #submit') assert(els length > 0) Your #submit should have a type of submit js const el = document getElementById('submit') assert( el && el type === 'submit') Your #form should have an action attribute of https://www freecodecamp com/email-submit js const el = document getElementById('form') assert( el && el action === 'https://www freecodecamp com/email-submit') Your #email should have a name attribute of email js const el = documentgetElementById('email')\nassert( el && el name === 'email')\nYour #nav-bar should always be at the top of the viewport ```js\n(async () => {\nconst timeout = (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));\nconst header = document getElementById('header');\nconst headerChildren = header children;\nconst navbarCandidates = [header, headerChildren];\n// Return smallest top position of all navbar candidates\nconst getNavbarPosition = (candidates = []) => {\nreturn candidates reduce(\n(min, candidate) =>\nMath min(min, Math abs(candidate getBoundingClientRect() top)),\nInfinity\n);\n};\nassert approximately(\ngetNavbarPosition(navbarCandidates),\n0,\n15,\n'#header or one of its children should be at the top of the viewport '\n);\nwindow scroll(0, 500);\nawait timeout(1);\nassert approximately(\ngetNavbarPosition(navbarCandidates),\n0,\n15,\n'#header or one of its children should be at the top of the ' +\n'viewport even after scrolling '\n);\nwindow scroll(0, 0);\n})();\n```\nYour Product Landing Page should use at least one media query js\nconst htmlSourceAttr = Array from(document querySelectorAll('source')) map(el => el getAttribute('media'))\nconst cssCheck = new __helpers CSSHelp(document) getCSSRules('media')\nassert(cssCheck length > 0 || htmlSourceAttr length > 0);\nYour Product Landing Page should use CSS Flexbox at least once js\nconst hasFlex = (rule) => [\"flex\", \"inline-flex\"] includes(rule style display)\nconst stylesheet = new __helpers CSSHelp(document) getStyleSheet()\nconst cssRules = new __helpers CSSHelp(document) styleSheetToCssRulesArray(stylesheet)\nconst mediaRules = new __helpers CSSHelp(document) getCSSRules('media')\nconst usesFlex = cssRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "6667eeca58efda7d737142e0f950016e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "media query js const htmlSourceAttr = Array from(document querySelectorAll('source')) map(el => el getAttribute('media')) const cssCheck = new __helpers CSSHelp(document) getCSSRules('media') assert(cssCheck length > 0 || htmlSourceAttr length > 0); Your Product Landing Page should use CSS Flexbox at least once js const hasFlex = (rule) => [\"flex\", \"inline-flex\"] includes(rule style display) const stylesheet = new __helpers CSSHelp(document) getStyleSheet() const cssRules = new __helpers CSSHelp(document) styleSheetToCssRulesArray(stylesheet) const mediaRules = new __helpers CSSHelp(document) getCSSRules('media') const usesFlex = cssRulesfind(rule => hasFlex(rule))\nconst usesFlexMedia = mediaRules find(mediaRule => {\nreturn [ mediaRule cssRules] find(rule => hasFlex(rule))\n})\nassert(usesFlex || usesFlexMedia)\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nProduct Landing Page\nFeatures |\nSee our facility |\nPurchase\nPokemon Daycare Service\nWhat we offer\nGuaranteed friendly and loving staff Comfortable environment for Pokemon to explore and play Multiple membership plans to fit your lifestyle Check us out A sneak peek into our facility:\nMembership Plans\nBasic Membership\nOne Pokemon\nFood and berries provided\n$9 99/month\nSilver Membership\nUp to Three Pokemon\nFood and berries provided\nGrooming and accessories included\n$19 99/month\nGold Membership\nUp to six Pokemon Food and berries provided\nGrooming and accessories included\nPersonal training for each Pokemon\nBreeding and egg hatching\n$29 99/month\nSign up for our newsletter Email:\nReturn to Project List |\nReturn to HomePage\n```\n```css\nbody {\nbackground-color: #3a3240;\ncolor: white;\n}\nmain {\nmax-width: 750px;\nmargin: 50px auto;\n}\ninput {\nbackground-color: #92869c;\n}\na:not(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "87e76413d562a2692aa080bc079eb3f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
    "source_type": "git_repo",
    "title": "Product Landing Page",
    "content": "Up to Three Pokemon Food and berries provided Grooming and accessories included $19 99/month Gold Membership Up to six Pokemon Food and berries provided Grooming and accessories included Personal training for each Pokemon Breeding and egg hatching $29 99/month Sign up for our newsletter Email: Return to Project List | Return to HomePage ``` ```css body { background-color: #3a3240; color: white; } main { max-width: 750px; margin: 50px auto; } input { background-color: #92869c; } a:not(nav-link) {\ncolor: white;\n}\nheader-img {\nmax-height: 25px;\n}\nnav-bar {\nposition: fixed;\nwidth: 100%;\ntext-align: center;\ntop: 0%;\nbackground-color: #92869c;\n}\nh1 {\ntext-align: center;\n}\nbody {\ntext-align: center;\n}\nfooter {\ntext-align: center;\n}\nbullet {\nmax-height: 25px;\n} flex-here {\ndisplay: flex;\njustify-content: center;\n} flex-left {\nheight: 25px;\n} flex-mem {\ndisplay: flex;\njustify-content: center;\n} flex-mem-box {\nbackground-color: #92869c;\nborder-color: black;\nborder-width: 5px;\nborder-style: solid;\nmargin: 10px;\npadding: 10px;\ncolor: black;\n}\n@media (max-width: 350px) {\n#video {\nwidth: 300;\nheight: 200;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-product-landing-page-project\\build-a-product-landing-page.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "7898dc7557901b0aa63fcb93aa9f9820",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
    "source_type": "git_repo",
    "title": "Tribute Page",
    "content": "id: bd7158d8c442eddfaeb5bd18\ntitle: Build a Tribute Page\nchallengeType: 14\nforumTopicId: 301147\ndashedName: build-a-tribute-page\n--description--\nObjective: Build an app that is functionally similar to https://tribute-page freecodecamp rocks Do not copy this demo project User Stories:\nYour tribute page should have a main element with a corresponding id of main, which contains all other elements\nYou should see an element with an id of title, which contains a string (i e text), that describes the subject of the tribute page (e g \"Dr Norman Borlaug\")\nYou should see either a figure or a div element with an id of img-div\nWithin the #img-div element, you should see an img element with a corresponding id=\"image\"\nWithin the #img-div element, you should see an element with a corresponding id=\"img-caption\" that contains textual content describing the image shown in #img-div\nYou should see an element with a corresponding id=\"tribute-info\", which contains textual content describing the subject of the tribute page\nYou should see an a element with a corresponding id=\"tribute-link\", which links to an outside site, that contains additional information about the subject of the tribute page HINT: You must give your element an attribute of target and set it to _blank in order for your link to open in a new tab\nYour #image should use max-width and height properties to resize responsively, relative to the width of its parent element, without exceeding its original size\nYour img element should be centered within its parent element\nFulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding Note: Be sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS\n--hints--\nYou should have a main element with an id of main js\nconst el = document getElementById('main');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'MAIN');\nYour #img-div, #image, #img-caption, #tribute-info, and #tribute-link should all be descendants of #main js\nconst el1 = document querySelector('#main #img-div');\nconst el2 = document querySelector('#main #image');\nconst el3 = document querySelector('#main #img-caption');\nconst el4 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "fa5a212d1d4e278b6c11719a6b525e4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
    "source_type": "git_repo",
    "title": "Tribute Page",
    "content": "add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS --hints-- You should have a main element with an id of main js const el = document getElementById('main'); assert isNotNull(el); assert strictEqual(el tagName, 'MAIN'); Your #img-div, #image, #img-caption, #tribute-info, and #tribute-link should all be descendants of #main js const el1 = document querySelector('#main #img-div'); const el2 = document querySelector('#main #image'); const el3 = document querySelector('#main #img-caption'); const el4 = documentquerySelector('#main #tribute-info');\nconst el5 = document querySelector('#main #tribute-link');\nassert isNotNull(el1);\nassert isNotNull(el2);\nassert isNotNull(el3);\nassert isNotNull(el4);\nassert isNotNull(el5);\nYou should have an element with an id of title js\nconst el = document getElementById('title');\nassert isNotNull(el);\nYour #title should not be empty js\nconst el = document getElementById('title');\nassert isNotNull(el);\nassert isNotEmpty(el innerText, 0);\nYou should have a figure or div element with an id of img-div js\nconst el = document getElementById('img-div');\nassert isNotNull(el);\nassert isTrue(el tagName === 'DIV' || el tagName === 'FIGURE');\nYou should have an img element with an id of image js\nconst el = document getElementById('image');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'IMG');\nYour #image should be a descendant of #img-div js\nconst el = document querySelector('#img-div #image');\nassert isNotNull(el);\nYou should have a figcaption or div element with an id of img-caption js\nconst el = document getElementById('img-caption');\nassert isNotNull(el);\nassert isTrue(el tagName === 'DIV' || el tagName === 'FIGCAPTION');\nYour #img-caption should be a descendant of #img-div js\nconst el = document querySelector('#img-div #img-caption');\nassert isNotNull(el);\nYour #img-caption should not be empty js\nconst el = document getElementById('img-caption');\nassert isNotNull(el);\nassert isNotEmpty(el innerText);\nYou should have an element with an id of tribute-info js\nconst el = document getElementById('tribute-info');\nassert isNotNull(el);\nYour #tribute-info should not be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4c7bdb7084a53afed8b60581ab8de700",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
    "source_type": "git_repo",
    "title": "Tribute Page",
    "content": "js const el = document getElementById('img-caption'); assert isNotNull(el); assert isTrue(el tagName === 'DIV' || el tagName === 'FIGCAPTION'); Your #img-caption should be a descendant of #img-div js const el = document querySelector('#img-div #img-caption'); assert isNotNull(el); Your #img-caption should not be empty js const el = document getElementById('img-caption'); assert isNotNull(el); assert isNotEmpty(el innerText); You should have an element with an id of tribute-info js const el = document getElementById('tribute-info'); assert isNotNull(el); Your #tribute-info should not be emptyjs\nconst el = document getElementById('tribute-info');\nassert isNotNull(el);\nassert isNotEmpty(el innerText);\nYou should have an a element with an id of tribute-link js\nconst el = document getElementById('tribute-link');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'A');\nYour #tribute-link should have an href attribute and value js\nconst el = document getElementById('tribute-link');\nassert isNotNull(el);\nassert isNotNull(el href);\nassert isNotEmpty(el href);\nYour #tribute-link should have a target attribute set to _blank js\nconst el = document getElementById('tribute-link');\nassert isNotNull(el);\nassert strictEqual(el target, '_blank');\nYour img element should have a display of block js\nconst img = document getElementById('image');\nconst imgStyle = window getComputedStyle(img);\nconst style = imgStyle getPropertyValue('display');\nassert strictEqual(style, 'block');\nYour #image should have a max-width of 100% js\nconst img = document getElementById('image');\nconst imgStyle = window getComputedStyle(img);\nconst style = imgStyle getPropertyValue('max-width');\nassert strictEqual(style, '100%');\nYour #image should have a height of auto js\n// taken from the testable-projects repo\nconst img = document getElementById('image');\nconst imgStyle = window getComputedStyle(img);\nconst oldDisplayValue = imgStyle getPropertyValue('display');\nconst oldDisplayPriority = imgStyle getPropertyPriority('display');\nimg style setProperty('display', 'none', 'important');\nconst heightValue = imgStyle getPropertyValue('height');\nimg style setProperty('display', oldDisplayValue, oldDisplayPriority);\nassert strictEqual(heightValue, 'auto');\nYour #image should be centered within its parent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a9fc047008162d41c1d6fb43ad51a732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
    "source_type": "git_repo",
    "title": "Tribute Page",
    "content": "document getElementById('image'); const imgStyle = window getComputedStyle(img); const style = imgStyle getPropertyValue('max-width'); assert strictEqual(style, '100%'); Your #image should have a height of auto js // taken from the testable-projects repo const img = document getElementById('image'); const imgStyle = window getComputedStyle(img); const oldDisplayValue = imgStyle getPropertyValue('display'); const oldDisplayPriority = imgStyle getPropertyPriority('display'); img style setProperty('display', 'none', 'important'); const heightValue = imgStyle getPropertyValue('height'); img style setProperty('display', oldDisplayValue, oldDisplayPriority); assert strictEqual(heightValue, 'auto'); Your #image should be centered within its parentjs\n// taken from the testable-projects repo\nconst img = document getElementById('image'),\nimgParent = img parentElement,\nimgLeft = img getBoundingClientRect() left,\nimgRight = img getBoundingClientRect() right,\nparentLeft = imgParent getBoundingClientRect() left,\nparentRight = imgParent getBoundingClientRect() right,\nleftMargin = imgLeft - parentLeft,\nrightMargin = parentRight - imgRight;\nassert isBelow(leftMargin - rightMargin, 6);\nassert isBelow(rightMargin - leftMargin, 6);\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nTribute Page\nTribute Page\nThe below card was designed as a tribute page for freeCodeCamp Togepi, happy as always Togepi\nTogepi was first discovered in the Johto region, when Ash Ketchum\ndiscovered a mysterious egg However, when the egg hatched, Togepi saw\nAsh's friend Misty first and imprinted on her Like many other\ncreatures, this imprinting process created a bond and Togepi views\nMisty as his mother Togepi is a very childlike Pokemon, and is very emotionally\nexpressive He demonstrates extreme levels of joy and sadness Battle Information\nType: Fairy\nEvolutions: Togepi -> Togetic -> Togekiss\nMoves: Growl, Pound, Sweet Kiss, Charm\nWeaknesses: Poison, Steel\nResistances: Dragon\nCheck out this\nBulbapedia article on Togepi\nfor more information on this great Pokemon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0dfa92b6d3f923e82a232e74adac4e96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
    "source_type": "git_repo",
    "title": "Tribute Page",
    "content": "first and imprinted on her Like many other creatures, this imprinting process created a bond and Togepi views Misty as his mother Togepi is a very childlike Pokemon, and is very emotionally expressive He demonstrates extreme levels of joy and sadness Battle Information Type: Fairy Evolutions: Togepi -> Togetic -> Togekiss Moves: Growl, Pound, Sweet Kiss, Charm Weaknesses: Poison, Steel Resistances: Dragon Check out this Bulbapedia article on Togepi for more information on this great PokemonReturn to Project List |\nReturn to HomePage\n```\n```css\nbody {\nbackground-color: #3a3240;\ncolor: white;\n}\nmain {\nbackground-color: #92869c;\nfont-family: Lobster;\nmax-width: 500px;\nmargin: 20px auto;\ncolor: black;\nborder-radius: 50px;\nbox-shadow: 10px 10px rgba(0, 0, 0, 0 5);\n}\nh2 {\ntext-align: center;\nfont-size: 20pt;\nfont-family: Pacifico;\n}\nbody {\ntext-align: center;\nfont-size: 12pt;\n}\nfooter {\ntext-align: center;\nfont-size: 10pt;\n} border {\nborder-color: black;\nborder-width: 5px;\nborder-style: solid;\n}\nimage {\nheight: auto;\ndisplay: block;\nmargin: auto;\nmax-width: 100%;\nborder-radius: 50%;\n}\nimg-caption {\nfont-size: 10pt;\n}\na:not(#tribute-link) {\ncolor: white;\n}\nhr {\nborder-color: black;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-tribute-page-project\\build-a-tribute-page.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "36ebde3b490434491d5689921aa21e82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61329b210dac0b08047fd6ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 61329b210dac0b08047fd6ab\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nContinuing with the meta elements, a viewport definition tells the browser how to render the page. Including one betters visual accessibility on mobile, and improves SEO (search engine optimization).\nAdd a viewport definition with a content attribute detailing the width and initial-scale of the page.\n--hints--\nYou should create another meta element in the head.\njs\nassert.equal(document.querySelectorAll('head > meta')?.length, 2);\nYou should give the meta a name attribute of viewport.\njs\nassert.equal(document.querySelectorAll('head > meta[name=\"viewport\"]')?.length, 1);\nYou should give the meta a content attribute of width=device-width, initial-scale=1.\njs\nassert.equal(document.querySelectorAll('head > meta[content=\"width=device-width, initial-scale=1.0\"]')?.length || document.querySelectorAll('head > meta[content=\"width=device-width, initial-scale=1\"]')?.length, 1);\n--seed--\n--seed-contents--\n```html\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1401,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61329b210dac0b08047fd6ab.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25e8cd4149aef83a5d523a278162ae56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613297a923965e0703b64796.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 613297a923965e0703b64796\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nYou may be familiar with the meta element already; it is used to specify information about the page, such as the title, description, keywords, and author.\nGive your page a meta element with an appropriate charset value.\nThe charset attribute specifies the character encoding of the page, and, nowadays, UTF-8 is the only encoding supported by most browsers.\n--hints--\nYou should create a meta element within the head element.\njs\nassert.exists(document.querySelector('head > meta'));\nYou should give the meta tag a charset of UTF-8.\njs\nassert.equal(document.querySelector('head > meta')?.getAttribute('charset')?.toLowerCase(), 'utf-8');\n--seed--\n--seed-contents--\n```html\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613297a923965e0703b64796.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da0ac0f439421d0c94686602cb0a4ed6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "id: 587d78af367417b2b2512b03\ntitle: Build a Survey Form\nchallengeType: 14\nforumTopicId: 301145\ndashedName: build-a-survey-form\n--description--\nObjective: Build an app that is functionally similar to https://survey-form freecodecamp rocks Do not copy this demo project User Stories:\nYou should have a page title in an h1 element with an id of title\nYou should have a short explanation in a p element with an id of description\nYou should have a form element with an id of survey-form\nInside the form element, you are required to enter your name in an input field that has an id of name and a type of text\nInside the form element, you are required to enter your email in an input field that has an id of email\nIf you enter an email that is not formatted correctly, you will see an HTML5 validation error\nInside the form, you can enter a number in an input field that has an id of number\nThe number input should not accept non-numbers, either by preventing you from typing them or by showing an HTML5 validation error (depending on your browser) If you enter numbers outside the range of the number input, which are defined by the min and max attributes, you will see an HTML5 validation error\nFor the name, email, and number input fields, you can see corresponding label elements in the form, that describe the purpose of each field with the following ids: id=\"name-label\", id=\"email-label\", and id=\"number-label\"\nFor the name, email, and number input fields, you can see placeholder text that gives a description or instructions for each field\nInside the form element, you should have a select dropdown element with an id of dropdown and at least two options to choose from\nInside the form element, you can select an option from a group of at least two radio buttons that are grouped using the name attribute\nInside the form element, you can select several fields from a series of checkboxes, each of which must have a value attribute\nInside the form element, you are presented with a textarea for additional comments\nInside the form element, you are presented with a button with id of submit to submit all the inputs\nFulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "f4dfaddce590b52d1f43faab8234ed41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "Inside the form element, you can select several fields from a series of checkboxes, each of which must have a value attribute Inside the form element, you are presented with a textarea for additional comments Inside the form element, you are presented with a button with id of submit to submit all the inputs Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy CodingNote: Be sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS\n--hints--\nYou should have an h1 element with an id of title js\nconst el = document getElementById('title');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'H1');\nYour #title should not be empty js\nconst el = document getElementById('title');\nassert isNotNull(el);\nassert isAbove(el innerText length, 0);\nYou should have a p element with an id of description js\nconst el = document getElementById('description');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'P');\nYour #description should not be empty js\nconst el = document getElementById('description');\nassert isNotNull(el);\nassert isAbove(el innerText length, 0);\nYou should have a form element with an id of survey-form js\nconst el = document getElementById('survey-form');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'FORM');\nYou should have an input element with an id of name js\nconst el = document getElementById('name');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'INPUT');\nYour #name should have a type of text js\nconst el = document getElementById('name');\nassert isNotNull(el);\nassert strictEqual(el type, 'text');\nYour #name should require input js\nconst el = document getElementById('name');\nassert isNotNull(el);\nassert isTrue(el required);\nYour #name should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #name');\nassert isNotNull(el);\nYou should have an input element with an id of email js\nconst el = document getElementById('email');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'INPUT');\nYour #email should have a type of email js\nconst el = document getElementById('email');\nassert isNotNull(el);\nassert strictEqual(el type, 'email');\nYour #email should require input js\nconst el = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "1a167ab87c7967ca7576147524f4971a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "getElementById('name'); assert isNotNull(el); assert isTrue(el required); Your #name should be a descendant of #survey-form js const el = document querySelector('#survey-form #name'); assert isNotNull(el); You should have an input element with an id of email js const el = document getElementById('email'); assert isNotNull(el); assert strictEqual(el tagName, 'INPUT'); Your #email should have a type of email js const el = document getElementById('email'); assert isNotNull(el); assert strictEqual(el type, 'email'); Your #email should require input js const el = documentgetElementById('email');\nassert isNotNull(el);\nassert isTrue(el required);\nYour #email should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #email');\nassert isNotNull(el);\nYou should have an input element with an id of number js\nconst el = document getElementById('number');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'INPUT');\nYour #number should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #number');\nassert isNotNull(el);\nYour #number should have a type of number js\nconst el = document getElementById('number');\nassert isNotNull(el);\nassert strictEqual(el type, 'number');\nYour #number should have a min attribute with a numeric value js\nconst el = document getElementById('number');\nassert isNotNull(el);\nassert isNotEmpty(el min);\nassert isTrue(isFinite(el min));\nYour #number should have a max attribute with a numeric value js\nconst el = document getElementById('number');\nassert isNotNull(el);\nassert isNotEmpty(el max);\nassert isTrue(isFinite(el max));\nYou should have a label element with an id of name-label js\nconst el = document getElementById('name-label');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'LABEL');\nYou should have a label element with an id of email-label js\nconst el = document getElementById('email-label');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'LABEL');\nYou should have a label element with an id of number-label js\nconst el = document getElementById('number-label');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'LABEL');\nYour #name-label should contain text that describes the input js\nconst el = document getElementById('name-label');\nassert isNotNull(el);\nassert isAbove(el innerText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "ec6be5dc20c9f47f81007d4a21ff3aec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "el = document getElementById('name-label'); assert isNotNull(el); assert strictEqual(el tagName, 'LABEL'); You should have a label element with an id of email-label js const el = document getElementById('email-label'); assert isNotNull(el); assert strictEqual(el tagName, 'LABEL'); You should have a label element with an id of number-label js const el = document getElementById('number-label'); assert isNotNull(el); assert strictEqual(el tagName, 'LABEL'); Your #name-label should contain text that describes the input js const el = document getElementById('name-label'); assert isNotNull(el); assert isAbove(el innerTextlength, 0);\nYour #email-label should contain text that describes the input js\nconst el = document getElementById('email-label');\nassert isNotNull(el);\nassert isAbove(el innerText length, 0);\nYour #number-label should contain text that describes the input js\nconst el = document getElementById('number-label');\nassert isNotNull(el);\nassert isAbove(el innerText length, 0);\nYour #name-label should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #name-label');\nassert isNotNull(el);\nYour #email-label should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #email-label');\nassert isNotNull(el);\nYour #number-label should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #number-label');\nassert isNotNull(el);\nYour #name should have a placeholder attribute and value js\nconst el = document getElementById('name');\nassert isNotNull(el);\nassert isNotNull(el placeholder);\nassert isAbove(el placeholder length, 0);\nYour #email should have a placeholder attribute and value js\nconst el = document getElementById('email');\nassert isNotNull(el);\nassert isNotNull(el placeholder);\nassert isAbove(el placeholder length, 0);\nYour #number should have a placeholder attribute and value js\nconst el = document getElementById('number');\nassert isNotNull(el);\nassert isNotNull(el placeholder);\nassert isAbove(el placeholder length, 0);\nYou should have a select field with an id of dropdown js\nconst el = document getElementById('dropdown');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'SELECT');\nYour #dropdown should have at least two selectable (not disabled) option elements js\nconst els = document querySelectorAll('#dropdown option:not([disabled])');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "2d36bd1fee825b37e264156b49cfeb45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "assert isNotNull(el placeholder); assert isAbove(el placeholder length, 0); Your #number should have a placeholder attribute and value js const el = document getElementById('number'); assert isNotNull(el); assert isNotNull(el placeholder); assert isAbove(el placeholder length, 0); You should have a select field with an id of dropdown js const el = document getElementById('dropdown'); assert isNotNull(el); assert strictEqual(el tagName, 'SELECT'); Your #dropdown should have at least two selectable (not disabled) option elements js const els = document querySelectorAll('#dropdown option:not([disabled])'); assertisAtLeast(els length, 2);\nYour #dropdown should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #dropdown');\nassert isNotNull(el);\nYou should have at least two input elements with a type of radio (radio buttons) js\nconst els = document querySelectorAll('input[type=\"radio\"]');\nassert isAtLeast(els length, 2);\nYou should have at least two radio buttons that are descendants of #survey-form js\nconst els = document querySelectorAll('#survey-form input[type=\"radio\"]');\nassert isAtLeast(els length, 2);\nAll your radio buttons should have a value attribute and value js\nconst els1 = document querySelectorAll('input[type=\"radio\"]');\nconst els2 = document querySelectorAll(\n'input[type=\"radio\"][value=\"\"], input[type=\"radio\"]:not([value])'\n);\nassert isAbove(els1 length, 0);\nassert lengthOf(els2, 0);\nAll your radio buttons should have a name attribute and value js\nconst els1 = document querySelectorAll('input[type=\"radio\"]');\nconst els2 = document querySelectorAll(\n'input[type=\"radio\"][name=\"\"], input[type=\"radio\"]:not([name])'\n);\nassert isAbove(els1 length, 0);\nassert lengthOf(els2, 0);\nEvery radio button group should have at least 2 radio buttons ```js\nconst radioButtons = document querySelectorAll('input[type=\"radio\"]');\nconst groups = {};\nif (radioButtons) {\nradioButtons forEach(el => {\nif ( groups[el name]) groups[el name] = [];\ngroups[el name] push(el);\n});\n}\nconst groupKeys = Object keys(groups);\ngroupKeys forEach(key => {\nif (groups[key] length < 2) assert(false);\n});\nassert isAbove(groupKeys",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "69147305a6c355e87e49768b7d667ae9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "document querySelectorAll('input[type=\"radio\"]'); const els2 = document querySelectorAll( 'input[type=\"radio\"][name=\"\"], input[type=\"radio\"]:not([name])' ); assert isAbove(els1 length, 0); assert lengthOf(els2, 0); Every radio button group should have at least 2 radio buttons ```js const radioButtons = document querySelectorAll('input[type=\"radio\"]'); const groups = {}; if (radioButtons) { radioButtons forEach(el => { if ( groups[el name]) groups[el name] = []; groups[el name] push(el); }); } const groupKeys = Object keys(groups); groupKeys forEach(key => { if (groups[key] length < 2) assert(false); }); assert isAbove(groupKeyslength, 0);\n```\nYou should have at least two input elements with a type of checkbox (checkboxes) that are descendants of #survey-form js\nconst els = document querySelectorAll('#survey-form input[type=\"checkbox\"]');\nassert isAtLeast(els length, 2);\nAll your checkboxes inside #survey-form should have a value attribute and value js\nconst els1 = document querySelectorAll('#survey-form input[type=\"checkbox\"]');\nconst els2 = document querySelectorAll(\n'#survey-form input[type=\"checkbox\"][value=\"\"], #survey-form input[type=\"checkbox\"]:not([value])'\n);\nassert isAbove(els1 length, 0);\nassert lengthOf(els2, 0);\nYou should have at least one textarea element that is a descendant of #survey-form js\nconst el = document querySelector('#survey-form textarea');\nassert isNotNull(el);\nYou should have an input or button element with an id of submit js\nconst el = document getElementById('submit');\nassert isNotNull(el);\nassert isTrue(el tagName === 'INPUT' || el tagName === 'BUTTON');\nYour #submit should have a type of submit js\nconst el = document getElementById('submit');\nassert isNotNull(el);\nassert strictEqual(el type, 'submit');\nYour #submit should be a descendant of #survey-form js\nconst el = document querySelector('#survey-form #submit');\nassert isNotNull(el);\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nSurvey Form\nSurvey Form\nThe card below was built as a sample survey form for freeCodeCamp Join the Togepi Fan Club",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "64daf8f35c6f9a4877952eea46b67e08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
    "source_type": "git_repo",
    "title": "Survey Form",
    "content": "assert isTrue(el tagName === 'INPUT' || el tagName === 'BUTTON'); Your #submit should have a type of submit js const el = document getElementById('submit'); assert isNotNull(el); assert strictEqual(el type, 'submit'); Your #submit should be a descendant of #survey-form js const el = document querySelector('#survey-form #submit'); assert isNotNull(el); --seed-- --seed-contents-- ```html ``` ```css ``` --solutions-- ```html Survey Form Survey Form The card below was built as a sample survey form for freeCodeCamp Join the Togepi Fan ClubEnter your information here to receive updates about club activities,\nour monthly newsletter, and other email communications Name:\nEmail:\nAge(optional):\nWhat are you most interested in Battling\nBreeding\nCompleting my Pokedex\nExploring new regions\nWho is your favourite Pokemon Togepi Pikachu\nOther\nWhich communications do you want to receive Newsletter\nEvent updates\nClub updates\nAny other information you would like to share You can provide comments, suggestions, or feedback here Please note: This form is a proof of concept Submitting the form\nwill not actually transmit your data Submit\nReturn to Project List |\nReturn to HomePage\n```\ncss\nmain {\ntext-align: center;\nbackground-color: #92869c;\nbackground-blend-mode: lighten;\nmax-width: 500px;\nmargin: 20px auto;\nborder-radius: 50px;\nbox-shadow: 10px 10px rgba(0, 0, 0, 0 5);\ncolor: black;\n}\nbody {\ntext-align: center;\nbackground: #3a3240;\ncolor: white;\n}\ninput,\ntextarea,\nselect,\nbutton {\nbackground: #3a3240;\ncolor: white;\n}\na {\ncolor: white;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-survey-form-project\\build-a-survey-form.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "76c68725d2f80ffa62caadcf15e415af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6133acc353338c0bba9cb553.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6133acc353338c0bba9cb553\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nLastly in the head, the title element is useful for screen readers to understand the content of a page. Furthermore, it is an important part of SEO.\nGive your page a title that is descriptive and concise.\n--hints--\nYou should add a title element to the head.\njs\nassert.exists(document.querySelector('head > title'));\nYou should not make the title longer than 60 characters.\njs\nassert.isAtMost(document.querySelector('head > title')?.textContent?.length, 60);\nTry being more descriptive with your title element. Hint: At least 15 characters\njs\nassert.isAtLeast(document.querySelector('head > title')?.textContent?.length, 15);\n--seed--\n--seed-contents--\n```html\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1304,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6133acc353338c0bba9cb553.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a639469045f02431cb3fe9b8a98acef1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61329d52e5010e08d9b9d66b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 61329d52e5010e08d9b9d66b\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nAnother important meta element for accessibility and SEO is the description definition. The value of the content attribute is used by search engines to provide a description of your page.\nAdd a meta element with the name attribute set to description, and give it a useful content attribute.\n--hints--\nYou should add a new meta element to the head.\njs\nassert.equal(document.querySelectorAll('meta').length, 3);\nYou should give the meta a name attribute of description.\njs\nassert.exists(document.querySelector('meta[name=\"description\"]'));\nYou should give the meta a content attribute.\njs\nassert.notEmpty(document.querySelector('meta[name=\"description\"]')?.content);\nThe content attribute value should not be more than 165 characters. This is Google's maximum description length.\njs\nassert.isAtMost(document.querySelector('meta[name=\"description\"]')?.content?.length, 165);\n--seed--\n--seed-contents--\n```html\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61329d52e5010e08d9b9d66b.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3ce49fbe7a367fb099151c4be36cf1be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6133d11ef548f51f876149e3.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6133d11ef548f51f876149e3\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nNavigation is a core part of accessibility, and screen readers rely on you to provide the structure of your page. This is accomplished with semantic HTML elements.\nAdd a header and a main element to your page.\nThe header element will be used to introduce the page, as well as provide a navigation menu.\nThe main element will contain the core content of your page.\n--hints--\nYou should add a header element to the body.\njs\nassert.exists(document.querySelector('body > header'));\nYou should add a main element to the body.\njs\nassert.exists(document.querySelector('body > main'));\nThe header element should come before the main element.\njs\nassert.exists(document.querySelector('header + main'));\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6133d11ef548f51f876149e3.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a8bd119ecdd1b3b3e1a8efd88321c187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613e2546d0594208229ada50.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 613e2546d0594208229ada50\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nWithin the header, provide context about the page by nesting one img, h1, and nav element.\nThe img should point to https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg, have an id of logo, and have an alt text of freeCodeCamp.\nThe h1 should contain the text HTML/CSS Quiz.\n--hints--\nYou should add an img element to the header element.\njs\nassert.exists(document.querySelector('header > img'));\nYou should add an h1 element to the header element.\njs\nassert.exists(document.querySelector('header > h1'));\nYou should add a nav element to the header element.\njs\nassert.exists(document.querySelector('header > nav'));\nYou should place the img, h1, and nav elements in that order.\njs\nassert.exists(document.querySelector('img + h1 + nav'));\nYou should give the img element a src attribute of https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg.\njs\nassert.equal(document.querySelector('img')?.src, 'https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg');\nYou should give the img element an id attribute of logo.\njs\nassert.equal(document.querySelector('img')?.id, 'logo');\nYou should give the img element an alt attribute of freeCodeCamp.\njs\nassert.equal(document.querySelector('img')?.alt, 'freeCodeCamp');\nYou should give the h1 element the text HTML/CSS Quiz.\njs\nassert.include(document.querySelector('h1')?.innerText?.toLowerCase(), 'html/css quiz');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\n--fcc-editable-region--\n--fcc-editable-region--\n```\ncss\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613e2546d0594208229ada50.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de20aec68ce336981043651195991ec3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613e275749ebd008e74bb62e.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 613e275749ebd008e74bb62e\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nCurrently, the img is assuming its default size, which is too large. CSS has a max function which returns the largest of a set of comma-separated values. For example:\ncss\nimg {\nwidth: max(250px, 25vw);\n}\nIn the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is equal to 25% of the viewport width.\nScale the image using its id as a selector, and setting the width to be the maximum of 10rem or 18vw.\n--hints--\nYou should use the #logo selector to target the img element.\njs\nassert.exists(new __helpers.CSSHelp(document).getStyle('#logo'));\nYou should give the img a width of max(10rem, 18vw).\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('#logo')?.width, 'max(10rem, 18vw)');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\613e275749ebd008e74bb62e.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "89eaae265664bf826f0442d980c33d05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6140827cff96e906bd38fc2b.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6140827cff96e906bd38fc2b\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nAs described in the freeCodeCamp Style Guide, the logo should retain an aspect ratio of 35 / 4, and have padding around the text.\nFirst, change the background-color to #0a0a23 so you can see the logo. Then, use the aspect-ratio property to set the desired aspect ratio to 35 / 4. Finally, add a padding of 0.4rem all around.\n--hints--\nYou should give #logo a background-color of #0a0a23.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('#logo')?.backgroundColor, 'rgb(10, 10, 35)');\nYou should use the aspect-ratio property.\njs\nassert.notEmpty(new __helpers.CSSHelp(document).getStyle('#logo')?.aspectRatio);\nYou should not use the height property.\njs\nassert.isEmpty(new __helpers.CSSHelp(document).getStyle('#logo')?.height);\nYou should not change the width property.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('#logo')?.width, 'max(10rem, 18vw)');\nYou should give the img an aspect-ratio of 35 / 4.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('#logo')?.aspectRatio, '35 / 4');\nYou should give the img a padding of 0.4rem.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('#logo')?.padding, '0.4rem');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\n--fcc-editable-region--\nlogo {\nwidth: max(10rem, 18vw);\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6140827cff96e906bd38fc2b.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1ded48d51472470af8cd2351949be12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61408f155e798909b6908712.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 61408f155e798909b6908712\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nTo enable navigation on the page, add an unordered list with the following three list items:\nINFO\nHTML\nCSS\nThe list items text should be wrapped in anchor tags.\n--hints--\nYou should nest one ul element inside the nav.\njs\nassert.equal(document.querySelectorAll('nav > ul')?.length, 1);\nYou should nest three li elements inside the ul element.\njs\nassert.equal(document.querySelectorAll('nav > ul > li')?.length, 3);\nYou should nest one a element inside each li element.\njs\nassert.equal(document.querySelectorAll('nav > ul > li > a')?.length, 3);\nYou should give the first a element the text INFO.\njs\nassert.equal(document.querySelectorAll('nav > ul > li > a')?.[0]?.textContent, 'INFO');\nYou should give the second a element the text HTML.\njs\nassert.equal(document.querySelectorAll('nav > ul > li > a')?.[1]?.textContent, 'HTML');\nYou should give the third a element the text CSS.\njs\nassert.equal(document.querySelectorAll('nav > ul > li > a')?.[2]?.textContent, 'CSS');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61408f155e798909b6908712.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "851bc4c01e26e050825b96b5bf42f73f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6140883f74224508174794c0.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6140883f74224508174794c0\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nMake the header take up the full width of its parent container, set its height to 50px, and set the background-color to #1b1b32. Then, set the display to use Flexbox.\n--hints--\nYou should use the header element selector.\njs\nassert.exists(new __helpers.CSSHelp(document).getStyle('header'));\nYou should give the header a width of 100%.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('header')?.width, '100%');\nYou should give the header a height of 50px.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('header')?.height, '50px');\nYou should give the header a background-color of #1b1b32.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('header')?.backgroundColor, 'rgb(27, 27, 50)');\nYou should give the header a display of flex.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('header')?.display, 'flex');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6140883f74224508174794c0.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "65384af61b3d46fef915cbc48f4537ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61408e4ae3e35d08feb260eb.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 61408e4ae3e35d08feb260eb\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nChange the h1 font color to #f1be32, and set the font size to min(5vw, 1.2em).\n--hints--\nYou should use the h1 element selector.\njs\nassert.exists(new __helpers.CSSHelp(document).getStyle('h1'));\nYou should give the h1 a color of #f1be32.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('h1')?.color, 'rgb(241, 190, 50)');\nYou should give the h1 a font-size of min(5vw, 1.2em).\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('h1')?.fontSize, 'min(5vw, 1.2em)');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1602,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61408e4ae3e35d08feb260eb.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "facffc9ff4bdad7e729a26508b1b2df2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6141fed65b61320743da5894.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6141fed65b61320743da5894\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nTo increase the page accessibility, the role attribute can be used to indicate the purpose behind an element on the page to assistive technologies. The role attribute is a part of the Web Accessibility Initiative (WAI), and accepts preset values.\nGive each of the section elements the region role.\n--hints--\nYou should give the first section element the region role.\njs\nassert.equal(document.querySelectorAll('section')?.[0]?.getAttribute('role'), 'region');\nYou should give the second section element the region role.\njs\nassert.equal(document.querySelectorAll('section')?.[1]?.getAttribute('role'), 'region');\nYou should give the third section element the region role.\njs\nassert.equal(document.querySelectorAll('section')?.[2]?.getAttribute('role'), 'region');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2390,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6141fed65b61320743da5894.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "187961d371d5dcd37e30d68fe7fd83a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614090d5a22b6f0a5a6b464c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 614090d5a22b6f0a5a6b464c\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nThe child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.\nThis can be helpful when you have deeply nested elements and want to control the scope of your styling.\nUse the > selector to target the unordered list elements within the nav elements, and use Flexbox to evenly space the children.\n--hints--\nYou should use the nav > ul selector.\njs\nassert.exists(new __helpers.CSSHelp(document).getStyle('nav > ul'));\nYou should give the nav > ul elements a display of flex.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('nav > ul')?.display, 'flex');\nYou should give the nav > ul elements a justify-content of space-evenly.\njs\nassert.equal(new __helpers.CSSHelp(document).getStyle('nav > ul')?.justifyContent, 'space-evenly');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614090d5a22b6f0a5a6b464c.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ca56b5a1061cdfc7cd9b8b76cc276ba8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6141fabd6f75610664e908fd.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6141fabd6f75610664e908fd\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nAs this is a quiz, you will need a form for users to submit answers You can semantically separate the content within the form using section elements Within the main element, create a form with three nested section elements Then, make the form submit to https://freecodecamp org/practice-project/accessibility-quiz, using the correct method --hints--\nYou should nest a form element within your main element js\nassert exists(document querySelector('main > form'));\nYou should nest three section elements within your form element js\nassert equal(document querySelectorAll('main > form > section') length, 3);\nYou should give the form element an action attribute js\nassert notEmpty(document querySelector('main > form') action);\nYou should give the action attribute a value of https://freecodecamp org/practice-project/accessibility-quiz js\nassert equal(document querySelector('main > form') action, 'https://freecodecamp org/practice-project/accessibility-quiz');\nYou should give the form element a method attribute js\nassert notEmpty(document querySelector('main > form') method);\nYou should give the form element a method attribute with a value of post js\nassert equal(document querySelector('main > form') method toLowerCase(), 'post');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6141fabd6f75610664e908fd.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fd19d2a6812931275c0af898aa024f6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "id: 587d78b0367417b2b2512b05\ntitle: Build a Technical Documentation Page\nchallengeType: 14\nforumTopicId: 301146\ndashedName: build-a-technical-documentation-page\n--description--\nObjective: Build an app that is functionally similar to https://technical-documentation-page freecodecamp rocks Do not copy this demo project User Stories:\nYou can see a main element with a corresponding id=\"main-doc\", which contains the page's main content (technical documentation)\nWithin the #main-doc element, you can see several section elements, each with a class of main-section There should be a minimum of five\nThe first element within each main-section should be a header element, which contains text that describes the topic of that section Each section element with the class of main-section should also have an id that corresponds with the text of each header contained within it Any spaces should be replaced with underscores (e g The section that contains the header \"JavaScript and Java\" should have a corresponding id=\"JavaScript_and_Java\")\nThe main-section elements should contain at least ten p elements total (not each)\nThe main-section elements should contain at least five code elements total (not each)\nThe main-section elements should contain at least five li items total (not each)\nYou can see a nav element with a corresponding id=\"navbar\"\nThe navbar element should contain one header element which contains text that describes the topic of the technical documentation\nAdditionally, the navbar should contain link (a) elements with the class of nav-link There should be one for every element with the class main-section\nThe header element in the #navbar must come before any link (a) elements in the navbar\nEach element with the class of nav-link should contain text that corresponds to the header text within each section (e g if you have a \"Hello world\" section/header, your navbar should have an element which contains the text \"Hello world\")\nWhen you click on a navbar element, the page should navigate to the corresponding section of the #main-doc element (e g If you click on a",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "8f04a16cb9a5e7a8aace276845a92fc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "must come before any link (a) elements in the navbar Each element with the class of nav-link should contain text that corresponds to the header text within each section (e g if you have a \"Hello world\" section/header, your navbar should have an element which contains the text \"Hello world\") When you click on a navbar element, the page should navigate to the corresponding section of the #main-doc element (e g If you click on anav-link element that contains the text \"Hello world\", the page navigates to a section element with that id, and contains the corresponding header)\nOn regular sized devices (laptops, desktops), the element with id=\"navbar\" should be shown on the left side of the screen and should always be visible to the user\nYour technical documentation should use at least one media query\nFulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding Note: Be sure to add <link rel=\"stylesheet\" href=\"styles css\"> in your HTML to link your stylesheet and apply your CSS\n--hints--\nYou should have a main element with an id of main-doc js\nconst el = document getElementById('main-doc');\nassert isNotNull(el);\nYou should have at least five section elements with a class of main-section js\nconst els = document querySelectorAll('#main-doc section');\nassert isAtLeast(els length, 5);\nAll of your main-section elements should be section elements js\nconst els = document querySelectorAll(' main-section');\nels forEach(el => {\nif (el tagName == 'SECTION') {\nassert fail();\n}\n});\nassert isAbove(els length, 0);\nYou should have at least five main-section elements that are descendants of #main-doc js\nconst els = document querySelectorAll('#main-doc main-section');\nassert isAtLeast(els length, 5);\nThe first child of each main-section should be a header element js\nconst els = document querySelectorAll(' main-section');\nels forEach(el => {\nif (el firstElementChild tagName == 'HEADER') assert fail();\n});\nassert isNotEmpty(els);\nNone of your header elements should be empty js\nconst els = document querySelectorAll('header');\nels forEach(el => {\nif (el innerText length <= 0) assert fail();\n});\nassert isNotEmpty(els);\nAll of your main-section elements should have an id js\nconst els = document querySelectorAll(' main-section');\nels",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "284cde2009abd5431052043c6432b8d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "of each main-section should be a header element js const els = document querySelectorAll(' main-section'); els forEach(el => { if (el firstElementChild tagName == 'HEADER') assert fail(); }); assert isNotEmpty(els); None of your header elements should be empty js const els = document querySelectorAll('header'); els forEach(el => { if (el innerText length <= 0) assert fail(); }); assert isNotEmpty(els); All of your main-section elements should have an id js const els = document querySelectorAll(' main-section'); elsforEach(el => {\nif ( el id || el id === '') assert fail();\n});\nassert isNotEmpty(els);\nEach main-section should have an id that matches the text of its first child, having any spaces in the child's text replaced with underscores (_) for the id's js\nconst els = document querySelectorAll(' main-section');\nels forEach(el => {\nconst text = el firstElementChild innerText replaceAll(' ', '_');\nif (el id toUpperCase() == text toUpperCase()) assert fail();\n});\nassert isNotEmpty(els);\nYou should have at least 10 p elements (total) within your main-section elements js\nconst els = document querySelectorAll(' main-section p');\nassert isAtLeast(els length, 10);\nYou should have at least five code elements that are descendants of main-section elements js\nconst els = document querySelectorAll(' main-section code');\nassert isAtLeast(els length, 5);\nYou should have at least five li elements that are descendants of main-section elements js\nconst els = document querySelectorAll(' main-section li');\nassert isAtLeast(els length, 5);\nYou should have a nav element with an id of navbar js\nconst el = document getElementById('navbar');\nassert isNotNull(el);\nassert strictEqual(el tagName, 'NAV');\nYour #navbar should have exactly one header element within it js\nconst els = document querySelectorAll('#navbar header');\nassert lengthOf(els, 1);\nYou should have at least one a element with a class of nav-link js\nconst els = document querySelectorAll('a nav-link');\nassert isAtLeast(els length, 1);\nAll of your nav-link elements should be anchor (a) elements js\nconst els = document querySelectorAll(' nav-link');\nels forEach(el => {\nif (el tagName == 'A') assert fail();\n});\nassert isNotEmpty(els);\nAll of your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "3e499f899ce0b16f7a30979872e6b1b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "should have exactly one header element within it js const els = document querySelectorAll('#navbar header'); assert lengthOf(els, 1); You should have at least one a element with a class of nav-link js const els = document querySelectorAll('a nav-link'); assert isAtLeast(els length, 1); All of your nav-link elements should be anchor (a) elements js const els = document querySelectorAll(' nav-link'); els forEach(el => { if (el tagName == 'A') assert fail(); }); assert isNotEmpty(els); All of yournav-link elements should be in the #navbar js\nconst els1 = document querySelectorAll(' nav-link');\nconst els2 = document querySelectorAll('#navbar nav-link');\nassert isNotEmpty(els2);\nassert strictEqual(els1 length, els2 length);\nYou should have the same number of nav-link and main-section elements js\nconst els1 = document querySelectorAll(' main-section');\nconst els2 = document querySelectorAll(' nav-link');\nassert isNotEmpty(els1);\nassert isNotEmpty(els2);\nassert strictEqual(els1 length, els2 length);\nThe header element in the #navbar should come before any link (a) elements also in the #navbar js\nconst navLinks = document querySelectorAll('#navbar a nav-link');\nconst header = document querySelector('#navbar header');\nnavLinks forEach(navLink => {\nif (\nheader compareDocumentPosition(navLink) & Node DOCUMENT_POSITION_PRECEDING\n)\nassert fail();\n});\nassert isNotNull(header);\nEach nav-link should have text that corresponds to the header text of its related section (e g if you have a \"Hello world\" section/header, your #navbar should have a nav-link which has the text \"Hello world\") ```js\nconst headerText = Array from(document querySelectorAll(' main-section')) map(\nel => el firstElementChild innerText trim() toUpperCase()\n);\nconst linkText = Array from(document querySelectorAll(' nav-link')) map(el =>\nel innerText trim() toUpperCase()\n);\nconst remainder = headerText filter(str => linkText indexOf(str) === -1);\nassert isNotEmpty(headerText);\nassert isNotEmpty(linkText);\nassert isEmpty(remainder);\n```\nEach nav-link should have an href attribute that links to its corresponding main-section (e g If you click on a nav-link element that contains the text \"Hello world\", the page navigates to a section element with that id)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "262f81a196b671e4084fc042bcae56af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "=> el firstElementChild innerText trim() toUpperCase() ); const linkText = Array from(document querySelectorAll(' nav-link')) map(el => el innerText trim() toUpperCase() ); const remainder = headerText filter(str => linkText indexOf(str) === -1); assert isNotEmpty(headerText); assert isNotEmpty(linkText); assert isEmpty(remainder); ``` Each nav-link should have an href attribute that links to its corresponding main-section (e g If you click on a nav-link element that contains the text \"Hello world\", the page navigates to a section element with that id)js\nconst hrefValues = Array from(document querySelectorAll(' nav-link')) map(el =>\nel getAttribute('href')\n);\nconst mainSectionIDs = Array from(\ndocument querySelectorAll(' main-section')\n) map(el => el id);\nconst missingHrefValues = mainSectionIDs filter(\nstr => hrefValues indexOf('#' + str) === -1\n);\nassert isNotEmpty(hrefValues);\nassert isNotEmpty(mainSectionIDs);\nassert isEmpty(missingHrefValues, 0);\nYour #navbar should always be on the left edge of the window js\nconst el = document getElementById('navbar');\nconst left1 = el offsetLeft;\nassert isNotNull(el);\nassert isAtLeast(left1, -15);\nassert isAtMost(left1, 15);\nYour Technical Documentation project should use at least one media query js\nconst htmlSourceAttr = Array from(document querySelectorAll('source')) map(el =>\nel getAttribute('media')\n);\nconst cssCheck = new __helpers CSSHelp(document) getCSSRules('media');\nassert isTrue(cssCheck length > 0 || htmlSourceAttr length > 0);\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nTechnical Documentation Page\nAlgebraic Concepts\nIntroduction\nDefinitions\nExamples\nSolving Equations\nSolving Equations II\nSolving Equations III\nSystem of Equations\nTry it Yourself More Information\nIntroduction\nWelcome to a basic introduction of algebra In this tutorial, we will\nreview some of the more common algebraic concepts Definitions\nTo start with, let's define some of the more common terms used in\nalgebra:\nVariable: A variable is an unknown value, usually represented\nby a letter Expression: Essentially a mathematical object For the\npurpose of this tutorial, an expression is one part of an equation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "8416af1562e12aa8aa0f4458e7b33685",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "III System of Equations Try it Yourself More Information Introduction Welcome to a basic introduction of algebra In this tutorial, we will review some of the more common algebraic concepts Definitions To start with, let's define some of the more common terms used in algebra: Variable: A variable is an unknown value, usually represented by a letter Expression: Essentially a mathematical object For the purpose of this tutorial, an expression is one part of an equationEquation: An equation is a mathematical argument in which two\nexpressions result in the same value Examples\nSometimes it is easier to understand the definitions when you have a\nphysical example to look at Here is an example of the above terms x + 5 = 12\nIn this above example, we have:\nVariable: The variable in the example is \"x\" Expression: There are two expressions in this example They\nare \"x+5\" and \"12\" Equation: The entire example, \"x+5=12\", is an equation Solving Equations\nThe primary use for algebra is to determine an unknown value, the\n\"variable\", with the information provided Continuing to use our\nexample from above, we can find the value of the variable \"x\" x + 5 = 12\nIn an equation, both sides result in the same value So you can\nmanipulate the two expressions however you need, as long as you\nperform the same operation (or change) to each side You do this\nbecause the goal when solving an equation is to\nget the variable into its own expression, or by itself on one side\nof the = sign For this example, we want to remove the \"+5\" so the \"x\" is\nalone To do this, we can subtract 5, because subtraction is\nthe opposite operation to addition But remember, we have to perform\nthe same operation to both sides of the equation Now our equation\nlooks like this x + 5 - 5 = 12 - 5\nThe equation looks like a mess right now, because we haven't completed\nthe operations We can simplify this equation to make it easier\nto read by performing the operations \"5-5\" and \"12-5\" The result\nis:\nx = 7\nWe now have our solution to this equation Solving Equations II\nLet us look at a slightly more challenging equation 3x + 4 = 13\nAgain we can start with subtraction",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "c9b9bd65d6df3261b9e470273bf81054",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "5 - 5 = 12 - 5 The equation looks like a mess right now, because we haven't completed the operations We can simplify this equation to make it easier to read by performing the operations \"5-5\" and \"12-5\" The result is: x = 7 We now have our solution to this equation Solving Equations II Let us look at a slightly more challenging equation 3x + 4 = 13 Again we can start with subtractionIn this case, we want to subtract\n4 from each side of the equation We will also go ahead and simplify\nwith each step So now we have:\n3x = 9\n\"3x\" translates to \"3*x\", where the \"*\" symbol indicates\nmultiplication We use the \"*\" to avoid confusion, as the \"x\" is now a\nvariable instead of a multiplication symbol The opposite operation\nfor multiplication is division, so we need to\ndivide each expression by 3 x = 3\nAnd now we have our solution Solving Equations III\nNow we are getting in to more complex operations Here is another\nequation for us to look at:\nx^2 - 8 = 8\nOur very first step will be to add 8 to each side This is\ndifferent from our previous examples, where we had to subtract But\nremember, our goal is to get the variable alone by performing opposite\noperations x^2 = 16\nBut what does the \"^2\" mean The \"^\" symbol is used to denote\nexponents in situations where superscript is not available When\nsuperscript is available, you would see it as x2 For the sake of this project, however, we will use the \"^\" symbol An exponent tells you how many times the base (in our case, \"x\") is\nmultiplied by itself So, \"x^2\" would be the same as \"x*x\" Now the\nopposite function of multiplication is division, but we would have to\ndivide both sides by \"x\" We do not want to do this, as that\nwould put an \"x\" on the other side of the equation So instead, we\nneed to use the root operation For an exponent of \"2\", we call this\nthe \"square root\" and denote it with \"√\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "9c1f6a75fb3d331ea3e1788da1b061b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "\"x\") is multiplied by itself So, \"x^2\" would be the same as \"x*x\" Now the opposite function of multiplication is division, but we would have to divide both sides by \"x\" We do not want to do this, as that would put an \"x\" on the other side of the equation So instead, we need to use the root operation For an exponent of \"2\", we call this the \"square root\" and denote it with \"√\"Our equation is now:\nx = √9\nPerforming a root operation by hand can be a tedious process, so we\nrecommend using a calculator when necessary However, we are lucky in\nthat \"9\" is a\nperfect square, so we do not need to calculate anything Instead, we find our\nanswer to be:\nx = 3\nSystem of Equations\nAs you explore your algebra studies further, you may start to run\nacross equations with more than one variable The first such equations\nwill likely look like:\ny = 3x\nAn equation like this does not have one single solution Rather, there are a series of values for which the equation is true For example, if \"x=3\" and \"y=9\", the equation is true These equations\nare usually used to plot a graph Getting more complicated, though, you may be given a pair of\nequations This is called a \"system of equations\", and CAN be solved Let's look at how we do this Consider the following system of\nequations:\ny = 3x | y - 6 = x\nA system of equations IS solvable, but it is a multi-step process To\nget started, we need to choose a variable we are solving for Let's\nsolve for \"x\" first From the second equation, we know that \"x\" equals\n\"y - 6\", but we cannot simplify that further because we do not have a\nvalue for \"y\" Except, thanks to the system of equations, we DO have a\nvalue for \"y\" We know that \"y\" equals \"3x\" So, looking at our second\nequation, we can replace \"y\" with \"3x\" because they have the same\nvalue We then get:\n3x - 6 = x\nNow we can solve for \"x\" We start by adding 6 to each side",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "217323f6cc4a7669feab2a8201c475b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "6\", but we cannot simplify that further because we do not have a value for \"y\" Except, thanks to the system of equations, we DO have a value for \"y\" We know that \"y\" equals \"3x\" So, looking at our second equation, we can replace \"y\" with \"3x\" because they have the same value We then get: 3x - 6 = x Now we can solve for \"x\" We start by adding 6 to each side3x = x + 6\nWe still need to get \"x\" by itself, so we subtract \"x\" from both sides\nand get:\n2x = 6\nIf this confuses you, remember that \"3x\" is the same as \"x+x+x\" Subtract an \"x\" from that and you get \"x+x\", or \"2x\" Now we divide\nboth sides by 2 and have our value for x x = 3\nHowever, our work is not done yet We still need to find the value for\n\"y\" Let's go back to our first equation:\ny = 3x\nWe have a value for \"x\" now, so let's see what happens if we put that\nvalue in y = 3*3\nWe perform the multiplication and discover that \"y=9\" Our solution to\nthis system of equations then is:\nx = 3 and y = 9\nTry it Yourself Coming Soon Keep an eye out for new additions More Information\nCheck out the following links for more information Wolfram Alpha\nis a great source for multiple mathematic fields Wikipedia's Algebra page\nfor more general information",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "e3c3f010a0fd8f01f7b23bb6ea0f0b40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
    "source_type": "git_repo",
    "title": "Technical Documentation Page",
    "content": "let's see what happens if we put that value in y = 3*3 We perform the multiplication and discover that \"y=9\" Our solution to this system of equations then is: x = 3 and y = 9 Try it Yourself Coming Soon Keep an eye out for new additions More Information Check out the following links for more information Wolfram Alpha is a great source for multiple mathematic fields Wikipedia's Algebra page for more general informationReturn to Project List |\nReturn to HomePage\n```\n```css\n* {\nbackground-color: #3a3240;\n}\na {\ncolor: #92869c;\n}\na:hover {\nbackground-color: #92869c;\ncolor: #3a3240;\n}\nnavbar {\nborder-style: solid;\nborder-width: 5px;\nborder-color: #92869c;\nheight: 100%;\ntop: -5px;\nleft: -5px;\npadding: 5px;\ntext-align: center;\ncolor: #92869c;\n}\n@media (min-width: 480px) {\n#navbar {\nposition: fixed;\n}\n}\nmain {\nmargin-left: 220px;\ncolor: #92869c;\n}\nheader {\nfont-size: 20pt;\n}\ncode {\nbackground-color: #92869c;\nborder-style: dashed;\nborder-width: 2px;\nborder-color: #92869c;\npadding: 5px;\ncolor: black;\n}\nfooter {\ntext-align: center;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\build-a-technical-documentation-page-project\\build-a-technical-documentation-page.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "34606556c79d2e177a8572bafa4e9414",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614206033d366c090ca7dd42.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 614206033d366c090ca7dd42\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nTypeface plays an important role in the accessibility of a page Some fonts are easier to read than others, and this is especially true on low-resolution screens Change the font for both the h1 and h2 elements to Verdana, and use another web-safe font in the sans-serif family as a fallback Also, add a border-bottom of 4px solid #dfdfe2 to h2 elements to make the sections distinct --hints--\nYou should use a multiple element selector to target the h1 and h2 elements js\nconst gs = (s) => new __helpers CSSHelp(document) getStyle(s);\nassert exists(gs('h1, h2') || gs('h2, h1'));\nYou should set the first value of the font-family property to Verdana js\nconst gs = (s) => new __helpers CSSHelp(document) getStyle(s);\nconst style = gs('h1, h2') || gs('h2, h1');\nassert include(style fontFamily, 'Verdana');\nYou should set the second value of the font-family property to another sans-serif, web safe font Hint: I would choose Tahoma js\n// Acceptable fonts: Arial, sans-serif, Helvetica, Tahoma, Trebuchet MS const gs = (s) => new __helpers CSSHelp(document) getStyle(s);\nconst style = gs('h1, h2') || gs('h2, h1');\nassert match(style fontFamily, /(Tahoma)|(Arial)|(sans-serif)|(Helvetica)|(Trebuchet MS)/);\nYou should use an h2 element selector to target the h2 elements js\nassert exists(new __helpers CSSHelp(document) getStyle('h2'));\nYou should give h2 a border-bottom property of 4px solid #dfdfe2 js\nassert equal(new __helpers CSSHelp(document) getStyle('h2')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614206033d366c090ca7dd42.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e711364eab42881cc348c469bd7413ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614206033d366c090ca7dd42.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "sans-serif, web safe font Hint: I would choose Tahoma js // Acceptable fonts: Arial, sans-serif, Helvetica, Tahoma, Trebuchet MS const gs = (s) => new __helpers CSSHelp(document) getStyle(s); const style = gs('h1, h2') || gs('h2, h1'); assert match(style fontFamily, /(Tahoma)|(Arial)|(sans-serif)|(Helvetica)|(Trebuchet MS)/); You should use an h2 element selector to target the h2 elements js assert exists(new __helpers CSSHelp(document) getStyle('h2')); You should give h2 a border-bottom property of 4px solid #dfdfe2 js assert equal(new __helpers CSSHelp(document) getStyle('h2')borderBottom, '4px solid rgb(223, 223, 226)');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614206033d366c090ca7dd42.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a8dc2d5987349b19d422cc4bada3c4e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61435e3c0679a306c20f1acc.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 61435e3c0679a306c20f1acc\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nTo be able to navigate within the page, give each anchor element an href corresponding to the id of the h2 elements.\n--hints--\nYou should give the first a element an href of #student-info.\njs\nassert.equal(document.querySelectorAll('a')?.[0]?.getAttribute('href'), '#student-info');\nYou should give the second a element an href of #html-questions.\njs\nassert.equal(document.querySelectorAll('a')?.[1]?.getAttribute('href'), '#html-questions');\nYou should give the third a element an href of #css-questions.\njs\nassert.equal(document.querySelectorAll('a')?.[2]?.getAttribute('href'), '#css-questions');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\n--fcc-editable-region--\nINFO\nHTML\nCSS\n--fcc-editable-region--\nStudent Info\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\61435e3c0679a306c20f1acc.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6873d34c09063920cb2048663a81dc3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614202874ca576084fca625f.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 614202874ca576084fca625f\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nEvery region role requires a label, which helps screen reader users understand the purpose of the region One method for adding a label is to add a heading element inside the region and then reference it with the aria-labelledby attribute Add the following aria-labelledby attributes to the section elements:\nstudent-info\nhtml-questions\ncss-questions\nThen, within each section element, nest one h2 element with an id matching the corresponding aria-labelledby attribute Give each h2 suitable text content --hints--\nYou should give the first section element an aria-labelledby attribute of student-info js\nassert equal(document querySelectorAll('section') [0] getAttribute('aria-labelledby'), 'student-info');\nYou should give the second section element an aria-labelledby attribute of html-questions js\nassert equal(document querySelectorAll('section') [1] getAttribute('aria-labelledby'), 'html-questions');\nYou should give the third section element an aria-labelledby attribute of css-questions js\nassert equal(document querySelectorAll('section') [2] getAttribute('aria-labelledby'), 'css-questions');\nYou should nest one h2 element within the first section element js\nassert equal(document querySelectorAll('section') [0] querySelectorAll('h2') length, 1);\nYou should nest one h2 element within the second section element js\nassert equal(document querySelectorAll('section') [1] querySelectorAll('h2') length, 1);\nYou should nest one h2 element within the third section element js\nassert equal(document querySelectorAll('section') [2] querySelectorAll('h2') length, 1);\nYou should give the first h2 element an id attribute of student-info js\nassert equal(document querySelectorAll('h2') [0] id, 'student-info');\nYou should give the second h2 element an id attribute of html-questions js\nassert equal(document querySelectorAll('h2') [1] id, 'html-questions');\nYou should give the third h2 element an id attribute of css-questions js\nassert equal(document querySelectorAll('h2') [2] id, 'css-questions');\nYou should give the first h2 element suitable text content Hint: I would have chosen Student Info\njs\nassert isAtLeast(document querySelectorAll('h2') [0] textContent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614202874ca576084fca625f.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aeff65dbfb0c71df9b17675ba48ec9f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614202874ca576084fca625f.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "first h2 element an id attribute of student-info js assert equal(document querySelectorAll('h2') [0] id, 'student-info'); You should give the second h2 element an id attribute of html-questions js assert equal(document querySelectorAll('h2') [1] id, 'html-questions'); You should give the third h2 element an id attribute of css-questions js assert equal(document querySelectorAll('h2') [2] id, 'css-questions'); You should give the first h2 element suitable text content Hint: I would have chosen Student Info js assert isAtLeast(document querySelectorAll('h2') [0] textContentlength, 1);\nYou should give the second h2 element suitable text content Hint: I would have chosen HTML\njs\nassert isAtLeast(document querySelectorAll('h2') [1] textContent length, 1);\nYou should give the third h2 element suitable text content Hint: I would have chosen CSS\njs\nassert isAtLeast(document querySelectorAll('h2') [2] textContent length, 1);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614202874ca576084fca625f.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b49a13154b92cff81071ed61429428cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143920c8eafb00b735746ce.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143920c8eafb00b735746ce\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nEven though you added a placeholder to the first input element in the previous lesson, this is actually not a best-practice for accessibility; too often, users confuse the placeholder text with an actual input value - they think there is already a value in the input.\nRemove the placeholder text from the first input element, relying on the label being the best-practice.\n--hints--\nYou should remove the placeholder attribute from the first input element.\njs\nassert.isEmpty(document.querySelectorAll('input')?.[0]?.placeholder);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\n--fcc-editable-region--\nName:\n--fcc-editable-region--\nEmail:\nDate of Birth:\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143920c8eafb00b735746ce.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d8f1f99cf08391bda732389dd8786c86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143639d5eddc7094161648c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143639d5eddc7094161648c\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nIt is important to link each input to the corresponding label element This provides assistive technology users with a visual reference to the input This is done by giving the label a for attribute, which contains the id of the input This section will take a student's name, email address, and date of birth Give the label elements appropriate for attributes, as well as text content Then, link the input elements to the corresponding label elements --hints--\nYou should give the first label element an appropriate for attribute js\nassert isAtLeast(document querySelectorAll('label') [0] htmlFor length, 1);\nYou should give the second label element an appropriate for attribute js\nassert isAtLeast(document querySelectorAll('label') [1] htmlFor length, 1);\nYou should give the third label element an appropriate for attribute js\nassert isAtLeast(document querySelectorAll('label') [2] htmlFor length, 1);\nYou should give the first label element an appropriate text content js\nassert isAtLeast(document querySelectorAll('label') [0] textContent length, 1);\nYou should give the second label element an appropriate text content js\nassert isAtLeast(document querySelectorAll('label') [1] textContent length, 1);\nYou should give the third label element an appropriate text content js\nassert isAtLeast(document querySelectorAll('label') [2] textContent length, 1);\nYou should give the first input element an id attribute matching the for attribute of the first label js\nassert equal(document querySelectorAll('input') [0] id, document querySelectorAll('label') [0] htmlFor);\nYou should give the second input element an id attribute matching the for attribute of the second label js\nassert equal(document querySelectorAll('input') [1] id, document querySelectorAll('label') [1] htmlFor);\nYou should give the third input element an id attribute matching the for attribute of the third label js\nassert equal(document querySelectorAll('input') [2] id, document querySelectorAll('label') [2] htmlFor);\nYou should not use the same id attribute for more than one input element js\nconst id = (n) => document querySelectorAll('input') [n] id;\nassert notEqual(id(0), id(1));\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5035,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143639d5eddc7094161648c.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aa431497a149f39fbe86f86a29914b73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143639d5eddc7094161648c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id attribute matching the for attribute of the second label js assert equal(document querySelectorAll('input') [1] id, document querySelectorAll('label') [1] htmlFor); You should give the third input element an id attribute matching the for attribute of the third label js assert equal(document querySelectorAll('input') [2] id, document querySelectorAll('label') [2] htmlFor); You should not use the same id attribute for more than one input element js const id = (n) => document querySelectorAll('input') [n] id; assert notEqual(id(0), id(1)); assertnotEqual(id(0), id(2));\nassert notEqual(id(1), id(2));\nYou should not use the same for attribute for more than one label element js\nconst htmlFor = (n) => document querySelectorAll('label') [n] htmlFor;\nassert notEqual(htmlFor(0), htmlFor(1));\nassert notEqual(htmlFor(0), htmlFor(2));\nassert notEqual(htmlFor(1), htmlFor(2));\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\nStudent Info\n--fcc-editable-region--\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5035,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143639d5eddc7094161648c.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "84a7b20ddf0f8273c0fc03d78ca07e14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143610161323a081b249c19.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143610161323a081b249c19\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nFilling out the content of the quiz, below #student-info, add three div elements with a class of info Then, within each div nest one label element, and one input element --hints--\nYou should nest three div elements below the h2#student-info element js\nassert equal(document querySelectorAll('h2#student-info ~ div') length, 3);\nYou should give the first div a class of info js\nassert equal(document querySelectorAll('h2#student-info ~ div') [0] className, 'info');\nYou should give the second div a class of info js\nassert equal(document querySelectorAll('h2#student-info ~ div') [1] className, 'info');\nYou should give the third div a class of info js\nassert equal(document querySelectorAll('h2#student-info ~ div') [2] className, 'info');\nYou should nest one label element within the first div js\nassert equal(document querySelectorAll('h2#student-info ~ div') [0] querySelectorAll('label') length, 1);\nYou should nest one input element within the first div, after the label js\nassert equal(document querySelectorAll('h2#student-info ~ div') [0] querySelectorAll('input') length, 1);\nassert exists(document querySelectorAll('h2#student-info ~ div') [0] querySelector('label + input'));\nYou should nest one label element within the second div js\nassert equal(document querySelectorAll('h2#student-info ~ div') [1] querySelectorAll('label') length, 1);\nYou should nest one input element within the second div, after the label js\nassert equal(document querySelectorAll('h2#student-info ~ div') [1] querySelectorAll('input') length, 1);\nassert exists(document querySelectorAll('h2#student-info ~ div') [1] querySelector('label + input'));\nYou should nest one label element within the third div js\nassert equal(document querySelectorAll('h2#student-info ~ div') [2] querySelectorAll('label') length, 1);\nYou should nest one input element within the third div, after the label js\nassert equal(document querySelectorAll('h2#student-info ~ div') [2]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143610161323a081b249c19.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "df24759c9a6e43358c722fa459c0bbde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143610161323a081b249c19.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "[1] querySelectorAll('label') length, 1); You should nest one input element within the second div, after the label js assert equal(document querySelectorAll('h2#student-info ~ div') [1] querySelectorAll('input') length, 1); assert exists(document querySelectorAll('h2#student-info ~ div') [1] querySelector('label + input')); You should nest one label element within the third div js assert equal(document querySelectorAll('h2#student-info ~ div') [2] querySelectorAll('label') length, 1); You should nest one input element within the third div, after the label js assert equal(document querySelectorAll('h2#student-info ~ div') [2]querySelectorAll('input') length, 1);\nassert exists(document querySelectorAll('h2#student-info ~ div') [2] querySelector('label + input'));\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\nStudent Info\n--fcc-editable-region--\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143610161323a081b249c19.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3424fca17b2f58942690623abd9757d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143908b6aafb00a659ca189.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143908b6aafb00a659ca189\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nKeeping in mind best-practices for form inputs, give each input an appropriate type and name attribute Then, give the first input a placeholder attribute --hints--\nYou should give the first input a type of text js\nassert equal(document querySelectorAll('input') [0] type, 'text');\nYou should give the second input a type of email js\nassert equal(document querySelectorAll('input') [1] type, 'email');\nYou should give the third input a type of date js\nassert equal(document querySelectorAll('input') [2] type, 'date');\nYou should give the first input an appropriate name attribute js\nassert isAtLeast(document querySelectorAll('input') [0] name length, 1);\nYou should give the second input an appropriate name attribute js\nassert isAtLeast(document querySelectorAll('input') [1] name length, 1);\nYou should give the third input an appropriate name attribute js\nassert isAtLeast(document querySelectorAll('input') [2] name length, 1);\nYou should give the first input a placeholder attribute js\nassert notEmpty(document querySelectorAll('input') [0] placeholder);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\n--fcc-editable-region--\nStudent Info\nName:\nEmail:\nDate of Birth:\n--fcc-editable-region--\nHTML\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143908b6aafb00a659ca189.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ae44f40318c32a5fa6a004048d76a6ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143908b6aafb00a659ca189.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "a placeholder attribute js assert notEmpty(document querySelectorAll('input') [0] placeholder); --seed-- --seed-contents-- ```html Accessibility Quiz HTML/CSS Quiz INFO HTML CSS --fcc-editable-region-- Student Info Name: Email: Date of Birth: --fcc-editable-region-- HTML CSS ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143908b6aafb00a659ca189.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6d685f71ad14400cf46280a4a718db97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614394fb41985e0d2012a93e.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 614394fb41985e0d2012a93e\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nThe question numbers are not descriptive enough. This is especially true for visually impaired users. One way to get around such an issue, without having to add visible text to the element, is to add text only a screen reader can read.\nNest a span element with a class of sr-only after the number in each of the h3 elements.\n--hints--\nYou should add a span element within the first h3 element.\njs\nassert.exists(document.querySelector('h3 > span'));\nYou should give the first span element a class of sr-only.\njs\nassert.equal(document.querySelector('span')?.className, 'sr-only');\nYou should add a span element within the second h3 element.\njs\nassert.exists(document.querySelectorAll('h3 > span')[1]);\nYou should give the second span element a class of sr-only.\njs\nassert.equal(document.querySelectorAll('span')[1]?.className, 'sr-only');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\n--fcc-editable-region--\n1\n2\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0.4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1.2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614394fb41985e0d2012a93e.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d2839bb588c07682c8d8dbc29b607c19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143931a113bb80c45546287.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143931a113bb80c45546287\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nWithin the second section element, add two div elements with a class of question-block Then, within each div question-block element, add one h3 element with text of incrementing numbers, starting at 1, and one fieldset element with a class of question --hints--\nYou should nest two div elements within the second section element js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div') length, 2);\nYou should give the first new div element a class of question-block js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div') [0] className, 'question-block');\nYou should give the second new div element a class of question-block js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div') [1] className, 'question-block');\nYou should nest one h3 element within each div question-block element js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > h3') length, 2);\nYou should give the first h3 element text of 1 js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > h3') [0] textContent, '1');\nYou should give the second h3 element text of 2 js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > h3') [1] textContent, '2');\nYou should nest one fieldset element within each div question-block element js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > fieldset') length, 2);\nYou should place the first fieldset element after the first h3 element js\nassert exists(document querySelector('section:nth-of-type(2) > div question-block > h3 + fieldset'));\nYou should place the second fieldset element after the second h3 element js\nassert exists(document querySelector('section:nth-of-type(2) > div question-block:nth-of-type(2) > h3 + fieldset'));\nYou should give the first fieldset element a class of question js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > fieldset') [0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4955,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143931a113bb80c45546287.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "578bf3d7a7d7daa25cb0345cb6781a68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143931a113bb80c45546287.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "equal(document querySelectorAll('section:nth-of-type(2) > div question-block > fieldset') length, 2); You should place the first fieldset element after the first h3 element js assert exists(document querySelector('section:nth-of-type(2) > div question-block > h3 + fieldset')); You should place the second fieldset element after the second h3 element js assert exists(document querySelector('section:nth-of-type(2) > div question-block:nth-of-type(2) > h3 + fieldset')); You should give the first fieldset element a class of question js assert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > fieldset') [0]className, 'question');\nYou should give the second fieldset element a class of question js\nassert equal(document querySelectorAll('section:nth-of-type(2) > div question-block > fieldset') [1] className, 'question');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\n--fcc-editable-region--\nHTML\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4955,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143931a113bb80c45546287.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7e88661d4e50c5750739a65864c8223d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143956ed76ed60e012faa51.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143956ed76ed60e012faa51\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nWithin the first span element, add the text Question In the second span element, add the text Question --hints--\nYou should give the first span element text of Question js\nassert equal(document querySelector('h3 > span') textContent, 'Question');\nYou should give the second span element text of Question js\nassert equal(document querySelectorAll('h3 > span') [1] textContent, 'Question');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\n--fcc-editable-region--\n1\n2\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143956ed76ed60e012faa51.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "75ed595935dc2b0eabf0753ba7d2ee1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143956ed76ed60e012faa51.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "color: #f1be32; font-size: min(5vw, 1 2em); } nav { width: 50%; max-width: 300px; height: 50px; } nav > ul { display: flex; justify-content: space-evenly; } h1, h2 { font-family: Verdana, Tahoma; } h2 { border-bottom: 4px solid #dfdfe2; } ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 04rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143956ed76ed60e012faa51.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "022745a09f12b679780d58577f569f28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143cb26f7edff2dc28f7da5.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6143cb26f7edff2dc28f7da5\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nEach fieldset will contain a true/false question Within each fieldset, nest one legend element, and one ul element with two options --hints--\nYou should nest one legend element within the first fieldset element js\nassert equal(document querySelectorAll(' question-block:nth-of-type(1) > fieldset > legend') length, 1);\nYou should nest one ul element within the first fieldset element js\nassert equal(document querySelectorAll(' question-block:nth-of-type(1) > fieldset > ul') length, 1);\nYou should nest two li elements within the first ul element js\nassert equal(document querySelectorAll('fieldset > ul') [0] querySelectorAll('li') length, 2);\nYou should nest one legend element within the second fieldset element js\nassert equal(document querySelectorAll(' question-block:nth-of-type(2) > fieldset > legend') length, 1);\nYou should nest one ul element within the second fieldset element js\nassert equal(document querySelectorAll(' question-block:nth-of-type(2) > fieldset > ul') length, 1);\nYou should nest two li elements within the second ul element js\nassert equal(document querySelectorAll('fieldset > ul') [1] querySelectorAll('li') length, 2);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\n--fcc-editable-region--\nHTML\n1\n2\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143cb26f7edff2dc28f7da5.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "61db171dca7394a832bee387529e1ad3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143cb26f7edff2dc28f7da5.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "querySelectorAll('fieldset > ul') [1] querySelectorAll('li') length, 2); --seed-- --seed-contents-- ```html Accessibility Quiz HTML/CSS Quiz INFO HTML CSS Student Info Name: Email: Date of Birth: --fcc-editable-region-- HTML 1 2 --fcc-editable-region-- CSS ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6143cb26f7edff2dc28f7da5.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9720b7e5bbdd7ed1afb65315d642b568",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144e818fd5ea704fe56081d.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6144e818fd5ea704fe56081d\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nGive each fieldset an adequate name attribute Then, give both unordered lists a class of answers-list Finally, use the legend to caption the content of the fieldset by placing a true/false question as the text content --hints--\nYou should give the first fieldset an adequate name attribute Hint: I would use html-question-one\njs\nassert notEmpty(document querySelectorAll('fieldset') [0] name);\nYou should give the second fieldset an adequate name attribute Hint: I would use html-question-two\njs\nassert notEmpty(document querySelectorAll('fieldset') [1] name);\nYou should give the first ul element a class of answers-list js\nassert equal(document querySelectorAll('fieldset > ul') [0] className, 'answers-list');\nYou should give the second ul element a class of answers-list js\nassert equal(document querySelectorAll('fieldset > ul') [1] className, 'answers-list');\nYou should give the first legend element text content js\nassert notEmpty(document querySelectorAll('legend') [0] textContent);\nYou should give the second legend element text content js\nassert notEmpty(document querySelectorAll('legend') [1] textContent);\nYou should not use the same text content for both legend elements js\nassert notEqual(document querySelectorAll('legend') [0] textContent, document querySelectorAll('legend') [1] textContent);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\n--fcc-editable-region--\nHTML\nQuestion1\nQuestion2\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144e818fd5ea704fe56081d.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "863879672a6cc19b2cd27a73f6917880",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144e818fd5ea704fe56081d.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "querySelectorAll('legend') [0] textContent, document querySelectorAll('legend') [1] textContent); --seed-- --seed-contents-- ```html Accessibility Quiz HTML/CSS Quiz INFO HTML CSS Student Info Name: Email: Date of Birth: --fcc-editable-region-- HTML Question1 Question2 --fcc-editable-region-- CSS ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144e818fd5ea704fe56081d.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1ad590851558deef3dc665fc362760ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144f8dc6849e405dd8bb829.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6144f8dc6849e405dd8bb829\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nTo provide the functionality of the true/false questions, we need a set of inputs which do not allow both to be selected at the same time Within each list element, nest one label element, and within each label element, nest one input element with the appropriate type --hints--\nYou should nest one label element within the first li element js\nassert exists(document querySelectorAll('ul answers-list > li') [0] querySelector('label'));\nYou should nest one label element within the second li element js\nassert exists(document querySelectorAll('ul answers-list > li') [1] querySelector('label'));\nYou should nest one label element within the third li element js\nassert exists(document querySelectorAll('ul answers-list > li') [2] querySelector('label'));\nYou should nest one label element within the fourth li element js\nassert exists(document querySelectorAll('ul answers-list > li') [3] querySelector('label'));\nYou should nest one input element within the first label element js\nassert exists(document querySelectorAll('ul answers-list > li') [0] querySelector('label') querySelector('input'));\nYou should nest one input element within the second label element js\nassert exists(document querySelectorAll('ul answers-list > li') [1] querySelector('label') querySelector('input'));\nYou should nest one input element within the third label element js\nassert exists(document querySelectorAll('ul answers-list > li') [2] querySelector('label') querySelector('input'));\nYou should nest one input element within the fourth label element js\nassert exists(document querySelectorAll('ul answers-list > li') [3] querySelector('label') querySelector('input'));\nYou should give the first input a type of radio js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [0] type, 'radio');\nYou should give the second input a type of radio js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [1] type, 'radio');\nYou should give the third input a type of radio js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [2] type, 'radio');\nYou should give the fourth input a type of radio js\nassert equal(document querySelectorAll('ul",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144f8dc6849e405dd8bb829.md",
      "source_type": "git_repo"
    },
    "token_count": 518,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d3678428515863f8ad66c5ac2450bbf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144f8dc6849e405dd8bb829.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "js assert equal(document querySelectorAll('ul answers-list > li > label > input') [0] type, 'radio'); You should give the second input a type of radio js assert equal(document querySelectorAll('ul answers-list > li > label > input') [1] type, 'radio'); You should give the third input a type of radio js assert equal(document querySelectorAll('ul answers-list > li > label > input') [2] type, 'radio'); You should give the fourth input a type of radio js assert equal(document querySelectorAll('ulanswers-list > li > label > input') [3] type, 'radio');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\n--fcc-editable-region--\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6172,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6144f8dc6849e405dd8bb829.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d9d307f81dc6854fdadba7af202394dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 614396f7ae83f20ea6f9f4b3\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nThe sr-only text is still visible There is a common pattern to visually hide text for only screen readers to read This pattern is to set the following CSS properties:\ncss\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\nUse the above to define the sr-only CSS rule --hints--\nYou should use the sr-only selector js\nassert exists(new __helpers CSSHelp(document) getStyle(' sr-only'));\nYou should give the sr-only a position of absolute js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') position, 'absolute');\nYou should give the sr-only a width of 1px js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') width, '1px');\nYou should give the sr-only a height of 1px js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') height, '1px');\nYou should give the sr-only an overflow of hidden js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') overflow, 'hidden');\nYou should give the sr-only a clip of rect(0, 0, 0, 0) js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') clip, 'rect(0px, 0px, 0px, 0px)');\nYou should give the sr-only a clip-path of inset(50%) js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only') clipPath, `inset(50%)`);\nYou should give the sr-only a white-space of nowrap js\nassert equal(new __helpers CSSHelp(document) getStyle(' sr-only')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5070,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "16c9548e4e2c87202056db94b07028cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "You should give the sr-only an overflow of hidden js assert equal(new __helpers CSSHelp(document) getStyle(' sr-only') overflow, 'hidden'); You should give the sr-only a clip of rect(0, 0, 0, 0) js assert equal(new __helpers CSSHelp(document) getStyle(' sr-only') clip, 'rect(0px, 0px, 0px, 0px)'); You should give the sr-only a clip-path of inset(50%) js assert equal(new __helpers CSSHelp(document) getStyle(' sr-only') clipPath, `inset(50%)`); You should give the sr-only a white-space of nowrap js assert equal(new __helpers CSSHelp(document) getStyle(' sr-only')whiteSpace, 'nowrap');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nQuestion2\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5070,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "07e5de1b00d6e6530b9edcd592ca8be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "nowrap js assert equal(new __helpers CSSHelp(document) getStyle(' sr-only')whiteSpace, 'nowrap'); --seed-- --seed-contents-- ```html Accessibility Quiz HTML/CSS Quiz INFO HTML CSS Student Info Name: Email: Date of Birth: HTML Question1 Question2 CSS ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5070,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\614396f7ae83f20ea6f9f4b3.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e37e73c5fcdb178a017c72da55683a30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e6eeaa66c605eb087fe9.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145e6eeaa66c605eb087fe9\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nAdd an id to all of your radio inputs so you can link your labels to them Give the first one an id of q1-a1 Give the rest of them ids of q1-a2, q2-a1, and q2-a2, respectively --hints--\nYou should give the first input element an id of q1-a1 js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [0] id, \"q1-a1\");\nYou should give the second input element an id of q1-a2 js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [1] id, \"q1-a2\");\nYou should give the third input element an id of q2-a1 js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [2] id, \"q2-a1\");\nYou should give the fourth input element an id of q2-a2 js\nassert equal(document querySelectorAll('ul answers-list > li > label > input') [3] id, \"q2-a2\");\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\n--fcc-editable-region--\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5055,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e6eeaa66c605eb087fe9.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3510c5ab97bbce55dea435f894a340b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e6eeaa66c605eb087fe9.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "its parent fieldset element --fcc-editable-region-- Question2 A label element nesting an input element is required to have a for attribute with the same value as the input's id --fcc-editable-region-- CSS ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5055,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e6eeaa66c605eb087fe9.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c99ddd7ebbfce6f0d93bf24ad383f938",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145eb5f08a38a0786c7a80c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145eb5f08a38a0786c7a80c\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nIf you click on the radio inputs, you might notice both inputs within the same true/false fieldset can be selected at the same time Group the relevant inputs together such that only one input from a pair can be selected at a time --hints--\nYou should give the first input a name attribute js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label > input') [0] name);\nYou should give the second input a name attribute js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label > input') [1] name);\nYou should give the third input a name attribute js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label > input') [2] name);\nYou should give the fourth input a name attribute js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label > input') [3] name);\nYou should give the second input a name attribute matching the name attribute of the first input js\nconst i = (n) => document querySelectorAll('ul answers-list > li > label > input') [n] name;\nassert equal(i(1), i(0));\nYou should give the fourth input a name attribute matching the name attribute of the third input js\nconst i = (n) => document querySelectorAll('ul answers-list > li > label > input') [n] name;\nassert equal(i(3), i(2));\nYou should give different name attributes to the first input and the third input js\nconst i = (n) => document querySelectorAll('ul answers-list > li > label > input') [n] name;\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145eb5f08a38a0786c7a80c.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7d1d885434c96135d53120dbc70d3464",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145eb5f08a38a0786c7a80c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "> input') [n] name; assert equal(i(1), i(0)); You should give the fourth input a name attribute matching the name attribute of the third input js const i = (n) => document querySelectorAll('ul answers-list > li > label > input') [n] name; assert equal(i(3), i(2)); You should give different name attributes to the first input and the third input js const i = (n) => document querySelectorAll('ul answers-list > li > label > input') [n] name; assertnotEqual(i(0), i(2));\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\n--fcc-editable-region--\nTrue\nFalse\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\nTrue\nFalse\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145eb5f08a38a0786c7a80c.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3a1996d918128615b12fca871e9bf3d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ed1f22caab087630aaad.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145ed1f22caab087630aaad\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nTo prevent unnecessary repetition, target the before pseudo-element of the h3 element, and give it a content property of \"Question #\" --hints--\nYou should use the h3::before selector js\nassert exists(new __helpers CSSHelp(document) getStyle('h3::before'));\nYou should give the h3::before pseudo-element a content property of \"Question #\" js\nassert include(new __helpers CSSHelp(document) getStyle('h3::before') content, 'Question #');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\nTrue\nFalse\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\nTrue\nFalse\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\n--fcc-editable-region--\n--fcc-editable-region-- sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4920,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ed1f22caab087630aaad.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3af0952ad54fe7efd410589fa713e543",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145ee65e2e1530938cb594d\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nThe final section of this quiz will contain a dropdown, and a text box Begin by nesting a div with a class of formrow, and nest four div elements inside of it, alternating their class attributes with question-block and answer --hints--\nYou should add one div element within the final section js\nassert exists(document querySelector('section:nth-of-type(3) > div'));\nYou should give the first div a class of formrow js\nassert equal(document querySelector('section:nth-of-type(3) > div') className, 'formrow');\nYou should place div formrow after the h2 element js\nassert exists(document querySelector('section:nth-of-type(3) > h2 + div formrow'));\nYou should nest four div elements inside div formrow js\nassert equal(document querySelectorAll('section:nth-of-type(3) > div formrow > div') length, 4);\nYou should give the first nested div a class of question-block js\nassert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(1)') className, 'question-block');\nYou should give the second nested div a class of answer js\nassert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(2)') className, 'answer');\nYou should give the third nested div a class of question-block js\nassert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(3)') className, 'question-block');\nYou should give the fourth nested div a class of answer js\nassert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(4)')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b84ee5b0768b039f9f74cc6dc6e1928e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "question-block js assert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(1)') className, 'question-block'); You should give the second nested div a class of answer js assert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(2)') className, 'answer'); You should give the third nested div a class of question-block js assert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(3)') className, 'question-block'); You should give the fourth nested div a class of answer js assert equal(document querySelector('section:nth-of-type(3) > div formrow > div:nth-of-type(4)')className, 'answer');\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\nTrue\nFalse\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\nTrue\nFalse\n--fcc-editable-region--\nCSS\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\nh3::before {\ncontent: \"Question #\";\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "87c0d947c5a19f764768be3281cc5757",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 1 2em); } nav { width: 50%; max-width: 300px; height: 50px; } nav > ul { display: flex; justify-content: space-evenly; } h1, h2 { font-family: Verdana, Tahoma; } h2 { border-bottom: 4px solid #dfdfe2; } h3::before { content: \"Question #\"; }sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145ee65e2e1530938cb594d.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a02af4c740d83b1e07a0a710ad65ba76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145f02240ff8f09f7ec913c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145f02240ff8f09f7ec913c\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nWithin the div question-block elements, nest one label element, and add a CSS related question to the label text --hints--\nYou should nest one label element within the first div question-block element js\nassert exists(document querySelectorAll(' formrow > question-block') [0] querySelector('label'));\nYou should nest one label element within the second div question-block element js\nassert exists(document querySelectorAll(' formrow > question-block') [1] querySelector('label'));\nYou should give the first label element text content js\nassert isAtLeast(document querySelectorAll(' formrow > question-block') [0] querySelector('label') textContent length, 1);\nYou should give the second label element text content js\nassert isAtLeast(document querySelectorAll(' formrow > question-block') [1] querySelector('label') textContent length, 1);\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\nTrue\nFalse\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\nTrue\nFalse\n--fcc-editable-region--\nCSS\n--fcc-editable-region--\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5677,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145f02240ff8f09f7ec913c.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f387b18a80103b75937701ada09a64ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145f02240ff8f09f7ec913c.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "True False Question2 A label element nesting an input element is required to have a for attribute with the same value as the input's id True False --fcc-editable-region-- CSS --fcc-editable-region-- ``` ```css body { background: #f5f6f7; color: #1b1b32; font-family: Helvetica; margin: 0; } header { width: 100%; height: 50px; background-color: #1b1b32; display: flex; } logo { width: max(10rem, 18vw); background-color: #0a0a23; aspect-ratio: 35 / 4; padding: 0 4rem; } h1 { color: #f1be32; font-size: min(5vw, 12em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}\nh3::before {\ncontent: \"Question #\";\n} sr-only {\nposition: absolute;\nwidth: 1px;\nheight: 1px;\noverflow: hidden;\nclip: rect(0, 0, 0, 0);\nclip-path: inset(50%);\nwhite-space: nowrap;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5677,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145f02240ff8f09f7ec913c.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c5607b91880ea047f768e681a9cb7f43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "id: 6145e8b5080a5f06bb0223d0\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nGive the label elements text such that the input comes before the text Then, give the input elements a value matching the text The text should either be True or False --hints--\nYou should give the first label element text content js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label') [0] textContent trim());\nYou should give the second label element text content js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label') [1] textContent trim());\nYou should give the third label element text content js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label') [2] textContent trim());\nYou should give the fourth label element text content js\nassert notEmpty(document querySelectorAll('ul answers-list > li > label') [3] textContent trim());\nYou should place the first label text content after the input element js\nassert match(document querySelectorAll('ul answers-list > li > label') [0] innerHTML, />[\\s\\S]+[a-zA-Z]/);\nYou should place the second label text content after the input element js\nassert match(document querySelectorAll('ul answers-list > li > label') [1] innerHTML, />[\\s\\S]+[a-zA-Z]/);\nYou should place the third label text content after the input element js\nassert match(document querySelectorAll('ul answers-list > li > label') [2] innerHTML, />[\\s\\S]+[a-zA-Z]/);\nYou should place the fourth label text content after the input element js\nassert match(document querySelectorAll('ul answers-list > li > label') [3] innerHTML, />[\\s\\S]+[a-zA-Z]/);\nYou should give the first label the text True or False js\nassert include(['True', 'False'], document querySelectorAll('ul answers-list > li > label') [0] textContent trim());\nYou should give the second label the text True js\nconst l = (n) => document querySelectorAll('ul answers-list > li > label') [n] textContent trim();\nassert(l(0) === 'False' l(1) === 'True' : true);\nYou should give the second label the text False js\nconst l = (n) => document querySelectorAll('ul",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "12b7f6325504aea1f8c57c302a004da2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "/>[\\s\\S]+[a-zA-Z]/); You should give the first label the text True or False js assert include(['True', 'False'], document querySelectorAll('ul answers-list > li > label') [0] textContent trim()); You should give the second label the text True js const l = (n) => document querySelectorAll('ul answers-list > li > label') [n] textContent trim(); assert(l(0) === 'False' l(1) === 'True' : true); You should give the second label the text False js const l = (n) => document querySelectorAll('ulanswers-list > li > label') [n] textContent trim();\nassert(l(0) === 'True' l(1) === 'False' : true);\nYou should give the third label the text True or False js\nassert include(['True', 'False'], document querySelectorAll('ul answers-list > li > label') [2] textContent trim());\nYou should give the fourth label the text True js\nconst l = (n) => document querySelectorAll('ul answers-list > li > label') [n] textContent trim();\nassert(l(2) === 'False' l(3) === 'True' : true);\nYou should give the fourth label the text False js\nconst l = (n) => document querySelectorAll('ul answers-list > li > label') [n] textContent trim();\nassert(l(2) === 'True' l(3) === 'False' : true);\nYou should give the first input a value matching the label text content js\nassert equal(document querySelectorAll('ul answers-list > li > label') [0] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [0] value toLowerCase());\nYou should give the second input a value matching the label text content js\nassert equal(document querySelectorAll('ul answers-list > li > label') [1] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [1] value toLowerCase());\nYou should give the third input a value matching the label text content js\nassert equal(document querySelectorAll('ul answers-list > li > label') [2] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [2] value toLowerCase());\nYou should give the fourth input a value matching the label text content js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
      "source_type": "git_repo"
    },
    "token_count": 524,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4619ee6f4a2ebf6b1197780810e45cb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
    "source_type": "git_repo",
    "title": "Accessibility Quiz",
    "content": "equal(document querySelectorAll('ul answers-list > li > label') [1] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [1] value toLowerCase()); You should give the third input a value matching the label text content js assert equal(document querySelectorAll('ul answers-list > li > label') [2] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [2] value toLowerCase()); You should give the fourth input a value matching the label text content js assertequal(document querySelectorAll('ul answers-list > li > label') [3] textContent trim() toLowerCase(), document querySelectorAll('ul answers-list > li > label > input') [3] value toLowerCase());\n--seed--\n--seed-contents--\n```html\nAccessibility Quiz\nHTML/CSS Quiz\nINFO\nHTML\nCSS\nStudent Info\nName:\nEmail:\nDate of Birth:\nHTML\nQuestion1\nThe legend element represents a caption for the content of its\nparent fieldset element\n--fcc-editable-region--\nQuestion2\nA label element nesting an input element is required to have a\nfor attribute with the same value as the input's id\n--fcc-editable-region--\nCSS\n```\n```css\nbody {\nbackground: #f5f6f7;\ncolor: #1b1b32;\nfont-family: Helvetica;\nmargin: 0;\n}\nheader {\nwidth: 100%;\nheight: 50px;\nbackground-color: #1b1b32;\ndisplay: flex;\n}\nlogo {\nwidth: max(10rem, 18vw);\nbackground-color: #0a0a23;\naspect-ratio: 35 / 4;\npadding: 0 4rem;\n}\nh1 {\ncolor: #f1be32;\nfont-size: min(5vw, 1 2em);\n}\nnav {\nwidth: 50%;\nmax-width: 300px;\nheight: 50px;\n}\nnav > ul {\ndisplay: flex;\njustify-content: space-evenly;\n}\nh1,\nh2 {\nfont-family: Verdana, Tahoma;\n}\nh2 {\nborder-bottom: 4px solid #dfdfe2;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8366,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\14-responsive-web-design-22\\learn-accessibility-by-building-a-quiz\\6145e8b5080a5f06bb0223d0.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 2,
    "total_chunks": 4
  }
]